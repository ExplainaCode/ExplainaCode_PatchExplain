record_number,buggy_code,fixed_code,code_similarity
107001,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  return result;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  LOCAL_SECONDARY_STORAGE_SEARCH=createSearchBuilder();
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> localSecondaryHost=_hostDao.createSearchBuilder();
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getPrivateIpAddress(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getStatus(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getType(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.join(""String_Node_Str"",localSecondaryHost,localSecondaryHost.entity().getId(),LOCAL_SECONDARY_STORAGE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  LOCAL_SECONDARY_STORAGE_SEARCH.done();
  return result;
}",0.5897339827650806
107002,"@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
    List<VMTemplateHostVO> tmplHost=new ArrayList<VMTemplateHostVO>();
    tmplHost.add(findOneBy(sc));
    return tmplHost;
  }
 else {
    return listBy(sc);
  }
}","@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
  }
  return listBy(sc);
}",0.813735691987513
107003,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool.getDataCenterId(),pool.getPodId());
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}",0.9963091619626574
107004,"/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId);","/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool);",0.9209039548022598
107005,"@Override public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId){
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}","@Override public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool){
  long dcId=pool.getDataCenterId();
  Long podId=pool.getPodId();
  if (pool.isLocal() && pool.getPoolType() == StoragePoolType.Filesystem) {
    List<StoragePoolHostVO> sphs=_storagePoolHostDao.listByPoolId(pool.getId());
    if (!sphs.isEmpty()) {
      StoragePoolHostVO localStoragePoolHost=sphs.get(0);
      return _templateHostDao.findLocalSecondaryStorageByHostTemplate(localStoragePoolHost.getHostId(),templateId);
    }
 else {
      return null;
    }
  }
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}",0.7810187200696561
107006,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),plan.getDataCenterId(),plan.getPodId());
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),pool);
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}",0.9953650057937428
107007,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  return result;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  LOCAL_SECONDARY_STORAGE_SEARCH=createSearchBuilder();
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> localSecondaryHost=_hostDao.createSearchBuilder();
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getPrivateIpAddress(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getStatus(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getType(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.join(""String_Node_Str"",localSecondaryHost,localSecondaryHost.entity().getId(),LOCAL_SECONDARY_STORAGE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  LOCAL_SECONDARY_STORAGE_SEARCH.done();
  return result;
}",0.5897339827650806
107008,"@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
    List<VMTemplateHostVO> tmplHost=new ArrayList<VMTemplateHostVO>();
    tmplHost.add(findOneBy(sc));
    return tmplHost;
  }
 else {
    return listBy(sc);
  }
}","@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
  }
  return listBy(sc);
}",0.813735691987513
107009,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool.getDataCenterId(),pool.getPodId());
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}",0.9963091619626574
107010,"private boolean validateVolumeSizeRange(long size){
  if (size < 0 || (size > 0 && size < (1024 * 1024 * 1024))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (size > _maxVolumeSizeInGb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInGb + ""String_Node_Str"");
  }
  return true;
}","private boolean validateVolumeSizeRange(long size){
  if (size < 0 || (size > 0 && size < (1024 * 1024 * 1024))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (size > (_maxVolumeSizeInGb * 1024 * 1024* 1024)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb+ ""String_Node_Str"");
  }
  return true;
}",0.9345794392523364
107011,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize() * 1024 * 1024* 1024;
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
    }
    if (snapshotCheck.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ Snapshot.Status.BackedUp+ ""String_Node_Str"");
    }
    diskOfferingId=(cmd.getDiskOfferingId() != null) ? cmd.getDiskOfferingId() : snapshotCheck.getDiskOfferingId();
    zoneId=snapshotCheck.getDataCenterId();
    size=snapshotCheck.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.Type.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,null,size);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.volume);
  return volume;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (size != null) {
      if (size > 0) {
        size=size * 1024 * 1024* 1024;
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
    }
    if (snapshotCheck.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ Snapshot.Status.BackedUp+ ""String_Node_Str"");
    }
    diskOfferingId=(cmd.getDiskOfferingId() != null) ? cmd.getDiskOfferingId() : snapshotCheck.getDiskOfferingId();
    zoneId=snapshotCheck.getDataCenterId();
    size=snapshotCheck.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.Type.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,null,size);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.volume);
  return volume;
}",0.986390041493776
107012,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseLong(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}",0.998970739597118
107013,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_ATTACH,eventDescription=""String_Node_Str"",async=true) public Volume attachVolumeToVM(AttachVolumeCmd command){
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=UserContext.current().getCaller();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != Volume.Type.DATADISK) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!Volume.State.Allocated.equals(volume.getState()) && !_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(account,volume);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(vm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName());
    }
  }
  HypervisorType dataDiskHyperType=_volsDao.getHypervisorType(volume.getId());
  if (rootDiskHyperType != dataDiskHyperType) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataDiskHyperType + ""String_Node_Str""+ rootDiskHyperType+ ""String_Node_Str"");
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getHostName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new CloudRuntimeException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),dataDiskHyperType);
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId,volume.getChainInfo());
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    return _volsDao.findById(volumeId);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    throw new CloudRuntimeException(errorMsg);
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_ATTACH,eventDescription=""String_Node_Str"",async=true) public Volume attachVolumeToVM(AttachVolumeCmd command){
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=UserContext.current().getCaller();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != Volume.Type.DATADISK) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!Volume.State.Allocated.equals(volume.getState()) && !_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(account,volume);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(rootVolumeOfVm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName());
    }
  }
  HypervisorType dataDiskHyperType=_volsDao.getHypervisorType(volume.getId());
  if (rootDiskHyperType != dataDiskHyperType) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataDiskHyperType + ""String_Node_Str""+ rootDiskHyperType+ ""String_Node_Str"");
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getHostName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new CloudRuntimeException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),dataDiskHyperType);
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId,volume.getChainInfo());
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    return _volsDao.findById(volumeId);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    throw new CloudRuntimeException(errorMsg);
  }
}",0.9990973565441652
107014,"public static long getAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,28);
}","public static long getAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,24);
}",0.9895833333333334
107015,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  final long via=buff.getLong();
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}",0.9405320813771518
107016,"public static long getViaAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,24);
}","public static long getViaAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,32);
}",0.98989898989899
107017,"private StatsCollector(Map<String,String> configs){
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  _agentMgr=locator.getManager(AgentManager.class);
  _userVmMgr=locator.getManager(UserVmManager.class);
  _hostDao=locator.getDao(HostDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _volsDao=locator.getDao(VolumeDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _storagePoolDao=locator.getDao(StoragePoolDao.class);
  _storageManager=locator.getManager(StorageManager.class);
  _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
  _executor=Executors.newScheduledThreadPool(3,new NamedThreadFactory(""String_Node_Str""));
  hostStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  hostAndVmStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  storageStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  volumeStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),-1L);
  _executor.scheduleWithFixedDelay(new HostCollector(),15000L,hostStatsInterval,TimeUnit.MILLISECONDS);
  _executor.scheduleWithFixedDelay(new VmStatsCollector(),15000L,hostAndVmStatsInterval,TimeUnit.MILLISECONDS);
  _executor.scheduleWithFixedDelay(new StorageCollector(),15000L,storageStatsInterval,TimeUnit.MILLISECONDS);
  if (volumeStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new VolumeCollector(),15000L,volumeStatsInterval,TimeUnit.MILLISECONDS);
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
}","private StatsCollector(Map<String,String> configs){
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  _agentMgr=locator.getManager(AgentManager.class);
  _userVmMgr=locator.getManager(UserVmManager.class);
  _hostDao=locator.getDao(HostDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _volsDao=locator.getDao(VolumeDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _storagePoolDao=locator.getDao(StoragePoolDao.class);
  _storageManager=locator.getManager(StorageManager.class);
  _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
  _executor=Executors.newScheduledThreadPool(3,new NamedThreadFactory(""String_Node_Str""));
  hostStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  hostAndVmStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  storageStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  volumeStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),-1L);
  if (hostStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new HostCollector(),15000L,hostStatsInterval,TimeUnit.MILLISECONDS);
  }
  if (hostAndVmStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new VmStatsCollector(),15000L,hostAndVmStatsInterval,TimeUnit.MILLISECONDS);
  }
  if (storageStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new StorageCollector(),15000L,storageStatsInterval,TimeUnit.MILLISECONDS);
  }
  if (volumeStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new VolumeCollector(),15000L,volumeStatsInterval,TimeUnit.MILLISECONDS);
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
}",0.963009014609885
107018,"@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() < Version.v3.ordinal()) {
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}","@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() != Version.v1.ordinal()) {
      s_logger.warn(""String_Node_Str"");
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}",0.9927266849846452
107019,"@Override public Map<String,TemplateInfo> gatherTemplateInfo(String rootDir){
  Map<String,TemplateInfo> result=new HashMap<String,TemplateInfo>();
  String templateDir=rootDir + File.separator + _templateDir;
  List<String> publicTmplts=listTemplates(templateDir);
  for (  String tmplt : publicTmplts) {
    String path=tmplt.substring(0,tmplt.lastIndexOf(File.separator));
    TemplateLocation loc=new TemplateLocation(_storage,path);
    try {
      if (!loc.load()) {
        s_logger.warn(""String_Node_Str"" + path);
        _storage.cleanup(path,templateDir);
        continue;
      }
    }
 catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + path,e);
      try {
        _storage.cleanup(path,templateDir);
      }
 catch (      IOException e1) {
        s_logger.warn(""String_Node_Str"" + path,e1);
      }
      continue;
    }
    TemplateInfo tInfo=loc.getTemplateInfo();
    result.put(tInfo.templateName,tInfo);
    s_logger.debug(""String_Node_Str"" + tInfo.templateName + ""String_Node_Str""+ tmplt);
  }
  return result;
}","@Override public Map<String,TemplateInfo> gatherTemplateInfo(String rootDir){
  Map<String,TemplateInfo> result=new HashMap<String,TemplateInfo>();
  String templateDir=rootDir + File.separator + _templateDir;
  if (!_storage.exists(templateDir)) {
    _storage.mkdirs(templateDir);
  }
  List<String> publicTmplts=listTemplates(templateDir);
  for (  String tmplt : publicTmplts) {
    String path=tmplt.substring(0,tmplt.lastIndexOf(File.separator));
    TemplateLocation loc=new TemplateLocation(_storage,path);
    try {
      if (!loc.load()) {
        s_logger.warn(""String_Node_Str"" + path);
        _storage.cleanup(path,templateDir);
        continue;
      }
    }
 catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + path,e);
      try {
        _storage.cleanup(path,templateDir);
      }
 catch (      IOException e1) {
        s_logger.warn(""String_Node_Str"" + path,e1);
      }
      continue;
    }
    TemplateInfo tInfo=loc.getTemplateInfo();
    result.put(tInfo.templateName,tInfo);
    s_logger.debug(""String_Node_Str"" + tInfo.templateName + ""String_Node_Str""+ tmplt);
  }
  return result;
}",0.9646626893070216
107020,"protected Status investigate(AgentAttache agent){
  Long hostId=agent.getId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  try {
    Request req=new Request(hostId,_nodeId,new CheckHealthCommand(),true);
    Answer[] answers=agent.send(req,50 * 1000);
    if (answers != null && answers[0] != null) {
      Status status=answers[0].getResult() ? Status.Up : Status.Down;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ status);
      }
      return status;
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"");
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage());
  }
  return _haMgr.investigate(hostId);
}","protected Status investigate(AgentAttache agent){
  Long hostId=agent.getId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  try {
    Request req=new Request(hostId,_nodeId,new CheckHealthCommand(),true);
    req.setSequence(agent.getNextSequence());
    Answer[] answers=agent.send(req,50 * 1000);
    if (answers != null && answers[0] != null) {
      Status status=answers[0].getResult() ? Status.Up : Status.Down;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ status);
      }
      return status;
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"");
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage());
  }
  return _haMgr.investigate(hostId);
}",0.9726190476190476
107021,"@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() != Version.v1.ordinal()) {
      s_logger.warn(""String_Node_Str"");
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}","@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() != Version.v1.ordinal() && ver.ordinal() != Version.v3.ordinal()) {
      s_logger.warn(""String_Node_Str"");
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}",0.9934598819588452
107022,"protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.debug(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    TreeMap<String,List<DbUpgrade>> upgradedVersions=new TreeMap<String,List<DbUpgrade>>();
    for (    DbUpgrade upgrade : upgrades) {
      String upgradedVerson=upgrade.getUpgradedVersion();
      List<DbUpgrade> upgradeList=upgradedVersions.get(upgradedVerson);
      if (upgradeList == null) {
        upgradeList=new ArrayList<DbUpgrade>();
      }
      upgradeList.add(upgrade);
      upgradedVersions.put(upgradedVerson,upgradeList);
    }
    for (    String upgradedVersion : upgradedVersions.keySet()) {
      List<DbUpgrade> versionUpgrades=upgradedVersions.get(upgradedVersion);
      VersionVO version=_dao.findByVersion(upgradedVersion,Step.Upgrade);
      s_logger.debug(""String_Node_Str"" + upgradedVersion + ""String_Node_Str"");
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        if (version != null) {
          for (          DbUpgrade upgrade : versionUpgrades) {
            s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
            txn.start();
            File[] scripts=upgrade.getCleanupScripts();
            if (scripts != null) {
              for (              File script : scripts) {
                runScript(script);
                s_logger.debug(""String_Node_Str"" + script.getAbsolutePath() + ""String_Node_Str"");
              }
            }
            txn.commit();
          }
          txn.start();
          version.setStep(Step.Complete);
          s_logger.debug(""String_Node_Str"" + upgradedVersion);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
      }
  finally {
        txn.close();
      }
    }
  }
}","protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.debug(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(conn,script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    TreeMap<String,List<DbUpgrade>> upgradedVersions=new TreeMap<String,List<DbUpgrade>>();
    for (    DbUpgrade upgrade : upgrades) {
      String upgradedVerson=upgrade.getUpgradedVersion();
      List<DbUpgrade> upgradeList=upgradedVersions.get(upgradedVerson);
      if (upgradeList == null) {
        upgradeList=new ArrayList<DbUpgrade>();
      }
      upgradeList.add(upgrade);
      upgradedVersions.put(upgradedVerson,upgradeList);
    }
    for (    String upgradedVersion : upgradedVersions.keySet()) {
      List<DbUpgrade> versionUpgrades=upgradedVersions.get(upgradedVersion);
      VersionVO version=_dao.findByVersion(upgradedVersion,Step.Upgrade);
      s_logger.debug(""String_Node_Str"" + upgradedVersion + ""String_Node_Str"");
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        if (version != null) {
          for (          DbUpgrade upgrade : versionUpgrades) {
            s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
            txn.start();
            Connection conn;
            try {
              conn=txn.getConnection();
            }
 catch (            SQLException e) {
              s_logger.error(""String_Node_Str"",e);
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
            File[] scripts=upgrade.getCleanupScripts();
            if (scripts != null) {
              for (              File script : scripts) {
                runScript(conn,script);
                s_logger.debug(""String_Node_Str"" + script.getAbsolutePath() + ""String_Node_Str"");
              }
            }
            txn.commit();
          }
          txn.start();
          version.setStep(Step.Complete);
          s_logger.debug(""String_Node_Str"" + upgradedVersion);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
      }
  finally {
        txn.close();
      }
    }
  }
}",0.9715324046032708
107023,"protected void runScript(File file){
  try {
    FileReader reader=new FileReader(file);
    Connection conn=Transaction.getStandaloneConnection();
    ScriptRunner runner=new ScriptRunner(conn,false,true);
    runner.runScript(reader);
  }
 catch (  FileNotFoundException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  IOException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  SQLException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
}","protected void runScript(Connection conn,File file){
  try {
    FileReader reader=new FileReader(file);
    ScriptRunner runner=new ScriptRunner(conn,false,true);
    runner.runScript(reader);
  }
 catch (  FileNotFoundException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  IOException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  SQLException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
}",0.9512670565302144
107024,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainIdAndIsSystem(domainId,issystem);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainIdAndIsSystem(domainId,issystem);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,issystem);
  return _offeringsDao.search(sc,searchFilter);
}",0.997609854752712
107025,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  s_logger.debug(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
  s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(vm.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(vm.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  s_logger.debug(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
  s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(vm.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}",0.9996825732726696
107026,"@Override public <T extends VMInstanceVO>T advanceReboot(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  T rebootedVm=null;
  DataCenter dc=_configMgr.getZone(vm.getDataCenterId());
  HostPodVO pod=_configMgr.getPod(vm.getPodId());
  Host host=_hostDao.findById(vm.getHostId());
  Cluster cluster=null;
  if (host != null) {
    cluster=_configMgr.getCluster(host.getClusterId());
  }
  DeployDestination dest=new DeployDestination(dc,pod,cluster,host);
  try {
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new RebootCommand(vm.getInstanceName()));
    _agentMgr.send(host.getId(),cmds);
    Answer rebootAnswer=cmds.getAnswer(RebootAnswer.class);
    if (rebootAnswer != null && rebootAnswer.getResult()) {
      rebootedVm=vm;
      return rebootedVm;
    }
    s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest.getHost()+ ""String_Node_Str""+ (rebootAnswer == null ? ""String_Node_Str"" : rebootAnswer.getDetails()));
  }
 catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ vm+ ""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost());
  }
  return rebootedVm;
}","@Override public <T extends VMInstanceVO>T advanceReboot(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  T rebootedVm=null;
  DataCenter dc=_configMgr.getZone(vm.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  Cluster cluster=null;
  if (host != null) {
    cluster=_configMgr.getCluster(host.getClusterId());
  }
  HostPodVO pod=_configMgr.getPod(host.getPodId());
  DeployDestination dest=new DeployDestination(dc,pod,cluster,host);
  try {
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new RebootCommand(vm.getInstanceName()));
    _agentMgr.send(host.getId(),cmds);
    Answer rebootAnswer=cmds.getAnswer(RebootAnswer.class);
    if (rebootAnswer != null && rebootAnswer.getResult()) {
      rebootedVm=vm;
      return rebootedVm;
    }
    s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest.getHost()+ ""String_Node_Str""+ (rebootAnswer == null ? ""String_Node_Str"" : rebootAnswer.getDetails()));
  }
 catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ vm+ ""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost());
  }
  return rebootedVm;
}",0.9617404351087772
107027,"@Override @DB public boolean backupSnapshotToSecondaryStorage(SnapshotVO ss){
  long snapshotId=ss.getId();
  SnapshotVO snapshot=_snapshotDao.acquireInLockTable(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + ss);
  }
  try {
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    HostVO secHost=getSecHost(volumeId,volume.getDataCenterId());
    String secondaryStoragePoolUrl=secHost.getStorageUrl();
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    SwiftVO swift=_swiftDao.findById(1L);
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findByIdIncludingRemoved(prevSnapshotId);
      if (prevSnapshot.getBackupSnapshotId() != null && swift == null) {
        if (prevSnapshot.getVersion() != null && prevSnapshot.getVersion().equals(""String_Node_Str"")) {
          prevBackupUuid=prevSnapshot.getBackupSnapshotId();
          prevSnapshotUuid=prevSnapshot.getPath();
        }
      }
 else       if (prevSnapshot.getSwiftName() != null && swift != null) {
        prevBackupUuid=prevSnapshot.getSwiftName();
        prevSnapshotUuid=prevSnapshot.getPath();
      }
    }
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,snapshot.getId(),volume.getPath(),snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,isVolumeInactive,vmName);
    if (swift != null) {
      backupSnapshotCommand.setSwift(toSwiftTO(swift));
    }
    String backedUpSnapshotUuid=null;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)sendToPool(volume,backupSnapshotCommand);
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    if (backedUp) {
      if (backupSnapshotCommand.getSwift() != null) {
        snapshot.setSwiftId(1L);
        snapshot.setSwiftName(backedUpSnapshotUuid);
      }
 else {
        snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      }
      if (answer.isFull()) {
        snapshot.setPrevSnapshotId(0);
      }
      snapshot.setStatus(Snapshot.Status.BackedUp);
      _snapshotDao.update(snapshotId,snapshot);
      if (snapshot.getType() == Type.RECURRING) {
        _accountMgr.incrementResourceCount(snapshot.getAccountId(),ResourceType.snapshot);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,0L);
      _usageEventDao.persist(usageEvent);
      _snapshotDao.remove(snapshotId);
    }
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}","@Override @DB public boolean backupSnapshotToSecondaryStorage(SnapshotVO ss){
  long snapshotId=ss.getId();
  SnapshotVO snapshot=_snapshotDao.acquireInLockTable(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + ss);
  }
  try {
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    HostVO secHost=getSecHost(volumeId,volume.getDataCenterId());
    String secondaryStoragePoolUrl=secHost.getStorageUrl();
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    SwiftVO swift=_swiftDao.findById(1L);
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findByIdIncludingRemoved(prevSnapshotId);
      if (prevSnapshot.getBackupSnapshotId() != null && swift == null) {
        if (prevSnapshot.getVersion() != null && prevSnapshot.getVersion().equals(""String_Node_Str"")) {
          prevBackupUuid=prevSnapshot.getBackupSnapshotId();
          prevSnapshotUuid=prevSnapshot.getPath();
        }
      }
 else       if (prevSnapshot.getSwiftName() != null && swift != null) {
        prevBackupUuid=prevSnapshot.getSwiftName();
        prevSnapshotUuid=prevSnapshot.getPath();
      }
    }
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,snapshot.getId(),volume.getPath(),snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,isVolumeInactive,vmName);
    if (swift != null) {
      backupSnapshotCommand.setSwift(toSwiftTO(swift));
    }
    String backedUpSnapshotUuid=null;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)sendToPool(volume,backupSnapshotCommand);
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    if (backedUp) {
      if (backupSnapshotCommand.getSwift() != null) {
        snapshot.setSwiftId(1L);
        snapshot.setSwiftName(backedUpSnapshotUuid);
      }
 else {
        snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      }
      if (answer.isFull()) {
        snapshot.setPrevSnapshotId(0);
      }
      snapshot.setStatus(Snapshot.Status.BackedUp);
      _snapshotDao.update(snapshotId,snapshot);
      if (snapshot.isRecursive()) {
        _accountMgr.incrementResourceCount(snapshot.getAccountId(),ResourceType.snapshot);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,0L);
      _usageEventDao.persist(usageEvent);
      _snapshotDao.remove(snapshotId);
    }
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}",0.9947310038824182
107028,"@Override public void performDataMigration(Connection conn){
  createSecurityGroups(conn);
}","@Override public void performDataMigration(Connection conn){
  createSecurityGroups(conn);
  dropKeysIfExist(conn);
  dropTableColumnsIfExist(conn);
  addMissingKeys(conn);
  addMissingOvsAccount(conn);
}",0.6216216216216216
107029,"@Override public File[] getCleanupScripts(){
  return null;
}","@Override public File[] getCleanupScripts(){
  String file=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (file == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return new File[]{new File(file)};
}",0.3378378378378378
107030,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof DownloadProgressCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadProgressCommand)cmd);
  }
 else   if (cmd instanceof DownloadCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return new CheckHealthAnswer((CheckHealthCommand)cmd,true);
  }
 else   if (cmd instanceof SecStorageSetupCommand) {
    return new Answer(cmd,true,""String_Node_Str"");
  }
 else   if (cmd instanceof ReadyCommand) {
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof ListTemplateCommand) {
    return execute((ListTemplateCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof DownloadProgressCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadProgressCommand)cmd);
  }
 else   if (cmd instanceof DownloadCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return new CheckHealthAnswer((CheckHealthCommand)cmd,true);
  }
 else   if (cmd instanceof SecStorageSetupCommand) {
    return new Answer(cmd,true,""String_Node_Str"");
  }
 else   if (cmd instanceof ReadyCommand) {
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof ListTemplateCommand) {
    return execute((ListTemplateCommand)cmd);
  }
 else   if (cmd instanceof ComputeChecksumCommand) {
    return execute((ComputeChecksumCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}",0.9368295589988082
107031,"private List<HostVO> searchForServers(Long startIndex,Long pageSize,Object name,Object type,Object state,Object zone,Object pod,Object cluster,Object id,Object keyword,Object allocationState){
  Filter searchFilter=new Filter(HostVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
  if (keyword != null) {
    SearchCriteria<HostVO> ssc=_hostDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (zone != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zone);
  }
  if (pod != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,pod);
  }
  if (cluster != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,cluster);
  }
  if (allocationState != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,allocationState);
  }
  return _hostDao.search(sc,searchFilter);
}","private List<HostVO> searchForServers(Long startIndex,Long pageSize,Object name,Object type,Object state,Object zone,Object pod,Object cluster,Object id,Object keyword,Object allocationState){
  Filter searchFilter=new Filter(HostVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
  if (keyword != null) {
    SearchCriteria<HostVO> ssc=_hostDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (zone != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zone);
  }
  if (pod != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,pod);
  }
  if (cluster != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,cluster);
  }
  if (allocationState != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,allocationState);
  }
  return _hostDao.search(sc,searchFilter);
}",0.8712629652226968
107032,"@Override public HostVO getSecondaryStorageHost(long zoneId){
  List<HostVO> hosts=_hostDao.listSecondaryStorageHosts(zoneId);
  if (hosts == null || hosts.size() == 0) {
    return null;
  }
  int size=hosts.size();
  Random rn=new Random();
  int index=rn.nextInt(size);
  return hosts.get(index);
}","@Override public HostVO getSecondaryStorageHost(long zoneId){
  List<HostVO> hosts=_hostDao.listSecondaryStorageHosts(zoneId);
  if (hosts == null || hosts.size() == 0) {
    hosts=_hostDao.listLocalSecondaryStorageHosts(zoneId);
    if (hosts.isEmpty()) {
      return null;
    }
  }
  int size=hosts.size();
  Random rn=new Random();
  int index=rn.nextInt(size);
  return hosts.get(index);
}",0.8275862068965517
107033,"@Override public boolean downloadTemplateToStorage(Long templateId,Long zoneId){
  List<DataCenterVO> dcs=new ArrayList<DataCenterVO>();
  if (zoneId == null) {
    dcs.addAll(_dcDao.listAll());
  }
 else {
    dcs.add(_dcDao.findById(zoneId));
  }
  for (  DataCenterVO dc : dcs) {
    List<HostVO> ssHosts=_hostDao.listBy(Host.Type.SecondaryStorage,dc.getId());
    for (    HostVO ssHost : ssHosts) {
      if (isTemplateUpdateable(ssHost.getId(),templateId)) {
        initiateTemplateDownload(templateId,ssHost);
      }
    }
  }
  return true;
}","@Override public boolean downloadTemplateToStorage(Long templateId,Long zoneId){
  List<DataCenterVO> dcs=new ArrayList<DataCenterVO>();
  if (zoneId == null) {
    dcs.addAll(_dcDao.listAll());
  }
 else {
    dcs.add(_dcDao.findById(zoneId));
  }
  for (  DataCenterVO dc : dcs) {
    List<HostVO> ssHosts=_hostDao.listAllSecondaryStorageHosts(dc.getId());
    for (    HostVO ssHost : ssHosts) {
      if (isTemplateUpdateable(ssHost.getId(),templateId)) {
        initiateTemplateDownload(templateId,ssHost);
      }
    }
  }
  return true;
}",0.9790718835304822
107034,"@Override public void handleTemplateSync(HostVO ssHost){
  Long sserverId=ssHost.getId();
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  if (ssHost.getType() != Host.Type.SecondaryStorage) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  long zoneId=ssHost.getDataCenterId();
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(ssHost.getDataCenterId());
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setErrorString(""String_Node_Str"");
          toBeDownloaded.add(tmplt);
          s_logger.info(""String_Node_Str"" + tmplt + ""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            String msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(ssHost.getDataCenterId());
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(ssHost.getId(),tmplt.getId());
        if (tmpltHost != null) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setDownloadPercent(0);
          tmpltHost.setErrorString(""String_Node_Str"");
          _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
        }
        continue;
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    long result=_agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    if (result == -1) {
      String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(description);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str""+ result;
    s_logger.info(description);
  }
  checksumSync(sserverId);
}","@Override public void handleTemplateSync(HostVO ssHost){
  Long sserverId=ssHost.getId();
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  if (!(ssHost.getType() == Host.Type.SecondaryStorage || ssHost.getType() == Host.Type.LocalSecondaryStorage)) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  long zoneId=ssHost.getDataCenterId();
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(ssHost.getDataCenterId());
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setErrorString(""String_Node_Str"");
          toBeDownloaded.add(tmplt);
          s_logger.info(""String_Node_Str"" + tmplt + ""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            String msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(ssHost.getDataCenterId());
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(ssHost.getId(),tmplt.getId());
        if (tmpltHost != null) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setDownloadPercent(0);
          tmpltHost.setErrorString(""String_Node_Str"");
          _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
        }
        continue;
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    long result=_agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    if (result == -1) {
      String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(description);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str""+ result;
    s_logger.info(description);
  }
  if (ssHost.getType() == Host.Type.SecondaryStorage)   checksumSync(sserverId);
}",0.9907014681892332
107035,"@Override public String getChecksum(Long hostId,String templatePath){
  HostVO ssHost=_hostDao.findById(hostId);
  Host.Type type=ssHost.getType();
  if (type != Host.Type.SecondaryStorage && type != Host.Type.LocalSecondaryStorage) {
    return null;
  }
  String secUrl=ssHost.getStorageUrl();
  Answer answer;
  answer=_agentMgr.sendToSecStorage(ssHost,new ComputeChecksumCommand(secUrl,templatePath));
  if (answer.getResult()) {
    return answer.getDetails();
  }
  return null;
}","@Override public String getChecksum(Long hostId,String templatePath){
  HostVO ssHost=_hostDao.findById(hostId);
  Host.Type type=ssHost.getType();
  if (type != Host.Type.SecondaryStorage && type != Host.Type.LocalSecondaryStorage) {
    return null;
  }
  String secUrl=ssHost.getStorageUrl();
  Answer answer;
  answer=_agentMgr.sendToSecStorage(ssHost,new ComputeChecksumCommand(secUrl,templatePath));
  if (answer != null && answer.getResult()) {
    return answer.getDetails();
  }
  return null;
}",0.9818181818181818
107036,"@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null && volume.getState() != Volume.State.Destroy) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getHostName());
    UserVm userVm=ApiDBUtils.findUserVmById(vm.getId());
    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());
    volResponse.setVirtualMachineState(vm.getState().toString());
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getState().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);
  VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
  boolean isExtractable=template != null && template.isExtractable() && !(template.getTemplateType() == TemplateType.SYSTEM);
  volResponse.setExtractable(isExtractable);
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}","@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null && volume.getState() != Volume.State.Destroy) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getHostName());
    UserVm userVm=ApiDBUtils.findUserVmById(vm.getId());
    if (userVm != null) {
      volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());
      volResponse.setVirtualMachineState(vm.getState().toString());
    }
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getState().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);
  VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
  boolean isExtractable=template != null && template.isExtractable() && !(template.getTemplateType() == TemplateType.SYSTEM);
  volResponse.setExtractable(isExtractable);
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}",0.9948111847794754
107037,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().isSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().isSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}",0.97553319176438
107038,"private void dropTableColumnsIfExist(Connection conn,String tableName,List<String> columns){
  try {
    for (    String column : columns) {
      try {
        PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        pstmt.executeQuery();
      }
 catch (      SQLException e) {
        s_logger.trace(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        continue;
      }
      PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ column);
      pstmt.executeUpdate();
      s_logger.debug(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
      pstmt.close();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void dropTableColumnsIfExist(Connection conn,String tableName,List<String> columns){
  PreparedStatement pstmt=null;
  try {
    for (    String column : columns) {
      try {
        pstmt=conn.prepareStatement(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        pstmt.executeQuery();
      }
 catch (      SQLException e) {
        s_logger.trace(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        continue;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ column);
      pstmt.executeUpdate();
      s_logger.debug(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
      pstmt.close();
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"" + pstmt + ""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9172749391727494
107039,"@Override public long getEntityOwnerId(){
  VirtualMachineTemplate iso=_responseGenerator.findTemplateById(getId());
  if (iso == null) {
    return Account.ACCOUNT_ID_SYSTEM;
  }
  return iso.getAccountId();
}","@Override public long getEntityOwnerId(){
  UserVm vm=_entityMgr.findById(UserVm.class,getVirtualMachineId());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + getVirtualMachineId());
  }
  return vm.getAccountId();
}",0.531317494600432
107040,"@Override public long getEntityOwnerId(){
  UserVm vm=_entityMgr.findById(UserVm.class,getVirtualMachineId());
  if (vm != null) {
    return vm.getAccountId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  UserVm vm=_entityMgr.findById(UserVm.class,getVirtualMachineId());
  if (vm != null) {
    return vm.getAccountId();
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + getVirtualMachineId());
  }
}",0.7377398720682303
107041,"@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if (isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ getDomainId());
      }
    }
  }
  return account.getId();
}",0.731948565776459
107042,"@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if (isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ getDomainId());
      }
    }
  }
  return account.getId();
}",0.731948565776459
107043,"private Long accountAndUserValidation(Account account,Long userId,UserVmVO vmInstanceCheck,VMTemplateVO template,String msg) throws PermissionDeniedException {
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if ((vmInstanceCheck != null) && (account.getId() != vmInstanceCheck.getAccountId())) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
      if ((template != null) && (!template.isPublicTemplate() && (account.getId() != template.getAccountId()) && (template.getTemplateType() != TemplateType.PERHOST))) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
    }
 else {
      if ((vmInstanceCheck != null) && !_domainDao.isChildDomain(account.getDomainId(),vmInstanceCheck.getDomainId())) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
      if (template != null) {
        Account templateOwner=_accountDao.findById(template.getAccountId());
        if ((templateOwner != null) && !_domainDao.isChildDomain(account.getDomainId(),templateOwner.getDomainId())) {
          throw new PermissionDeniedException(msg + ""String_Node_Str"");
        }
      }
    }
  }
  if (userId == null) {
    userId=new Long(1);
  }
  return userId;
}","private Long accountAndUserValidation(Account caller,Long userId,UserVmVO userVm,VMTemplateVO template,String msg) throws PermissionDeniedException {
  if (caller != null) {
    if (!isAdmin(caller.getType())) {
      if ((userVm != null) && (caller.getId() != userVm.getAccountId())) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
      if ((template != null) && (!template.isPublicTemplate() && (caller.getId() != template.getAccountId()) && (template.getTemplateType() != TemplateType.PERHOST))) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
    }
 else {
      if (userVm != null) {
        _accountMgr.checkAccess(caller,userVm);
      }
      if (template != null && !template.isPublicTemplate()) {
        Account templateOwner=_accountDao.findById(template.getAccountId());
        _accountMgr.checkAccess(caller,templateOwner);
      }
    }
  }
  return userId;
}",0.6502507979936161
107044,"@Override public boolean attachIso(AttachIsoCmd cmd){
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vmInstanceCheck=_userVmDao.findById(vmId);
  if (vmInstanceCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + isoId);
  }
  State vmState=vmInstanceCheck.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(account,userId,vmInstanceCheck,iso,errMsg);
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vmInstanceCheck.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstanceCheck.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}","@Override public boolean attachIso(AttachIsoCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vm=_userVmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + isoId);
  }
  State vmState=vm.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(caller,userId,vm,iso,errMsg);
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vm.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vm.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}",0.952983725135624
107045,"@Override public void handleSysTemplateDownload(HostVO host){
  List<HypervisorType> hypers=_hostDao.getAvailHypervisorInZone(host.getId(),host.getDataCenterId());
  HypervisorType hostHyper=host.getHypervisorType();
  if (hypers.contains(hostHyper)) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<HostVO> ssHosts=_hostDao.listBy(Host.Type.SecondaryStorage,host.getDataCenterId());
  if (ssHosts == null || ssHosts.isEmpty()) {
    return;
  }
  HostVO sshost=ssHosts.get(0);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  for (  VMTemplateVO rtngTmplt : rtngTmplts) {
    if (rtngTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(rtngTmplt);
    }
  }
  for (  VMTemplateVO builtinTmplt : defaultBuiltin) {
    if (builtinTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(builtinTmplt);
    }
  }
  for (  VMTemplateVO template : toBeDownloaded) {
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sshost.getId(),template.getId());
    if (tmpltHost == null || tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      downloadTemplateToStorage(template,sshost);
    }
  }
}","@Override public void handleSysTemplateDownload(HostVO host){
  List<HypervisorType> hypers=_hostDao.getAvailHypervisorInZone(host.getId(),host.getDataCenterId());
  HypervisorType hostHyper=host.getHypervisorType();
  if (hypers.contains(hostHyper)) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<HostVO> ssHosts=_hostDao.listBy(Host.Type.SecondaryStorage,host.getDataCenterId());
  if (ssHosts == null || ssHosts.isEmpty()) {
    return;
  }
  HostVO sshost=ssHosts.get(0);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  for (  VMTemplateVO rtngTmplt : rtngTmplts) {
    if (rtngTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(rtngTmplt);
    }
  }
  for (  VMTemplateVO builtinTmplt : defaultBuiltin) {
    if (builtinTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(builtinTmplt);
    }
  }
  for (  VMTemplateVO template : toBeDownloaded) {
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sshost.getId(),template.getId());
    if (tmpltHost == null || tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      if (_vmTemplateZoneDao.findByZoneTemplate(sshost.getDataCenterId(),template.getId()) == null) {
        _templateDao.addTemplateToZone(template,sshost.getDataCenterId());
      }
      downloadTemplateToStorage(template,sshost);
    }
  }
}",0.9325555960627052
107046,"protected void upgradeDomR(Connection conn,long dcId,long domrId,Long publicNetworkId,long guestNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + domrId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domrId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    throw new CloudRuntimeException(""String_Node_Str"" + domrId);
  }
  long id=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String vnet=rs.getString(12);
  String gateway=rs.getString(13);
  String type=rs.getString(14);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
 else {
    insertNic(conn,publicNetworkId,domrId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",null,vnet,""String_Node_Str"",false,0,""String_Node_Str"",null);
  }
}","protected void upgradeDomR(Connection conn,long dcId,long domrId,Long publicNetworkId,long guestNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + domrId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domrId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    throw new CloudRuntimeException(""String_Node_Str"" + domrId);
  }
  long id=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String vnet=rs.getString(12);
  String gateway=rs.getString(13);
  String type=rs.getString(14);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
 else   if (publicIp != null) {
    insertNic(conn,publicNetworkId,domrId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",null,vnet,""String_Node_Str"",false,0,""String_Node_Str"",null);
  }
}",0.9957142857142856
107047,"private UsageEventVO convertSnapshotEvent(EventVO event,Connection conn) throws IOException, SQLException {
  Properties snapEventParams=new Properties();
  long snapId=-1L;
  long snapSize=-1L;
  Long zoneId=null;
  UsageEventVO usageEvent=null;
  snapEventParams.load(new StringReader(event.getParameters()));
  snapId=Long.parseLong(snapEventParams.getProperty(""String_Node_Str""));
  String snapshotName=snapEventParams.getProperty(""String_Node_Str"");
  String size=snapEventParams.getProperty(""String_Node_Str"");
  if (size != null) {
    snapSize=Long.parseLong(size);
  }
  String zoneString=snapEventParams.getProperty(""String_Node_Str"");
  if (zoneString != null) {
    zoneId=Long.parseLong(zoneString);
  }
  Long accountId=event.getAccountId();
  if (accountId.longValue() == 0L || zoneId == null) {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,snapId);
    s_logger.debug(""String_Node_Str"" + pstmt);
    ResultSet rs=pstmt.executeQuery();
    if (rs.next()) {
      zoneId=rs.getLong(1);
      accountId=rs.getLong(2);
    }
    rs.close();
    pstmt.close();
  }
  if (EventTypes.EVENT_SNAPSHOT_CREATE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE,accountId,zoneId,snapId,snapshotName,null,null,snapSize);
  }
 else   if (EventTypes.EVENT_SNAPSHOT_DELETE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,accountId,zoneId,snapId,snapshotName,null,null,0L);
  }
  return usageEvent;
}","private UsageEventVO convertSnapshotEvent(EventVO event,Connection conn) throws IOException, SQLException {
  Properties snapEventParams=new Properties();
  long snapId=-1L;
  long snapSize=-1L;
  Long zoneId=0L;
  UsageEventVO usageEvent=null;
  snapEventParams.load(new StringReader(event.getParameters()));
  snapId=Long.parseLong(snapEventParams.getProperty(""String_Node_Str""));
  String snapshotName=snapEventParams.getProperty(""String_Node_Str"");
  String size=snapEventParams.getProperty(""String_Node_Str"");
  if (size != null) {
    snapSize=Long.parseLong(size);
  }
  String zoneString=snapEventParams.getProperty(""String_Node_Str"");
  if (zoneString != null) {
    zoneId=Long.parseLong(zoneString);
  }
  Long accountId=event.getAccountId();
  if (accountId.longValue() == 0L || zoneId.longValue() == 0L) {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,snapId);
    s_logger.debug(""String_Node_Str"" + pstmt);
    ResultSet rs=pstmt.executeQuery();
    if (rs.next()) {
      zoneId=rs.getLong(1);
      accountId=rs.getLong(2);
    }
    rs.close();
    pstmt.close();
  }
  if (EventTypes.EVENT_SNAPSHOT_CREATE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE,accountId,zoneId,snapId,snapshotName,null,null,snapSize);
  }
 else   if (EventTypes.EVENT_SNAPSHOT_DELETE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,accountId,zoneId,snapId,snapshotName,null,null,0L);
  }
  return usageEvent;
}",0.989562948467058
107048,"@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=null;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (accountId != null && accountId == 1) {
    List<AccountVO> emptyList=new ArrayList<AccountVO>();
    return emptyList;
  }
  if ((account == null) || isAdmin(account.getType())) {
    accountName=cmd.getSearchName();
    if (domainId == null) {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
 else     if (account != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
  }
 else {
    accountId=account.getId();
    accountName=account.getAccountName();
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null) && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + accountName + ""String_Node_Str"");
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
    sc.setParameters(""String_Node_Str"",1L);
  }
 else {
    sc.setParameters(""String_Node_Str"",1L);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  return _accountDao.search(sc,searchFilter);
}","@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (accountId != null && accountId.longValue() == 1L) {
    List<AccountVO> emptyList=new ArrayList<AccountVO>();
    return emptyList;
  }
  if (isAdmin(caller.getType())) {
    if (domainId == null) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
 else {
      Domain domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        _accountMgr.checkAccess(caller,account);
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  if ((domainId != null) && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
    sc.setParameters(""String_Node_Str"",1L);
  }
 else {
    sc.setParameters(""String_Node_Str"",1L);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  return _accountDao.search(sc,searchFilter);
}",0.5539605229428352
107049,"@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
 else   if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else {
    nic.setStrategy(ReservationStrategy.Create);
  }
  getIp(nic,dc,vm,network);
  if (network.isSecurityGroupEnabled() && nic.getIp4Address() != null) {
    nic.setStrategy(ReservationStrategy.Create);
  }
  return nic;
}","@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
 else   if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else {
    nic.setStrategy(ReservationStrategy.Create);
  }
  getIp(nic,dc,vm,network);
  nic.setStrategy(ReservationStrategy.Create);
  return nic;
}",0.9079025549613784
107050,"@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    getIp(nic,dest.getDataCenter(),vm,network);
  }
}","@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    getIp(nic,dest.getDataCenter(),vm,network);
    nic.setStrategy(ReservationStrategy.Create);
  }
}",0.938364779874214
107051,"public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.962531933011638
107052,"@Override public List<? extends Cluster> discoverCluster(AddClusterCmd cmd) throws IllegalArgumentException, DiscoveryException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  url=URLDecoder.decode(url);
  URI uri=null;
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(cmd.getHypervisor());
  if (hypervisorType == null) {
    s_logger.error(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
  }
  Cluster.ClusterType clusterType=null;
  if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {
    clusterType=Cluster.ClusterType.valueOf(cmd.getClusterType());
  }
  if (clusterType == null) {
    clusterType=Cluster.ClusterType.CloudManaged;
  }
  Grouping.AllocationState allocationState=null;
  if (cmd.getAllocationState() != null && !cmd.getAllocationState().isEmpty()) {
    try {
      allocationState=Grouping.AllocationState.valueOf(cmd.getAllocationState());
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getAllocationState() + ""String_Node_Str"");
    }
  }
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled;
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor());
  }
  List<ClusterVO> result=new ArrayList<ClusterVO>();
  long clusterId=0;
  ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
  cluster.setHypervisorType(cmd.getHypervisor());
  cluster.setClusterType(clusterType);
  cluster.setAllocationState(allocationState);
  try {
    cluster=_clusterDao.persist(cluster);
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
  }
  clusterId=cluster.getId();
  result.add(cluster);
  if (clusterType == Cluster.ClusterType.CloudManaged) {
    return result;
  }
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",url);
  details.put(""String_Node_Str"",username);
  details.put(""String_Node_Str"",password);
  _clusterDetailsDao.persist(cluster.getId(),details);
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
 else       if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + ""String_Node_Str"");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        if (hypervisorType == Hypervisor.HypervisorType.Hyperv) {
          break;
        }
        AgentAttache attache=simulateStart(resource,entry.getValue(),true,null,null);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info(""String_Node_Str"" + discoverer.getName());
      success=true;
      return result;
    }
    s_logger.warn(""String_Node_Str"" + url);
    throw new DiscoveryException(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    throw new DiscoveryException(""String_Node_Str"");
  }
 finally {
    if (!success) {
      _clusterDetailsDao.deleteDetails(clusterId);
      _clusterDao.remove(clusterId);
    }
  }
}","@Override public List<? extends Cluster> discoverCluster(AddClusterCmd cmd) throws IllegalArgumentException, DiscoveryException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  if (url != null)   url=URLDecoder.decode(url);
  URI uri=null;
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(cmd.getHypervisor());
  if (hypervisorType == null) {
    s_logger.error(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
  }
  Cluster.ClusterType clusterType=null;
  if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {
    clusterType=Cluster.ClusterType.valueOf(cmd.getClusterType());
  }
  if (clusterType == null) {
    clusterType=Cluster.ClusterType.CloudManaged;
  }
  Grouping.AllocationState allocationState=null;
  if (cmd.getAllocationState() != null && !cmd.getAllocationState().isEmpty()) {
    try {
      allocationState=Grouping.AllocationState.valueOf(cmd.getAllocationState());
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getAllocationState() + ""String_Node_Str"");
    }
  }
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled;
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor());
  }
  List<ClusterVO> result=new ArrayList<ClusterVO>();
  long clusterId=0;
  ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
  cluster.setHypervisorType(cmd.getHypervisor());
  cluster.setClusterType(clusterType);
  cluster.setAllocationState(allocationState);
  try {
    cluster=_clusterDao.persist(cluster);
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
  }
  clusterId=cluster.getId();
  result.add(cluster);
  if (clusterType == Cluster.ClusterType.CloudManaged) {
    return result;
  }
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",url);
  details.put(""String_Node_Str"",username);
  details.put(""String_Node_Str"",password);
  _clusterDetailsDao.persist(cluster.getId(),details);
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
 else       if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + ""String_Node_Str"");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        if (hypervisorType == Hypervisor.HypervisorType.Hyperv) {
          break;
        }
        AgentAttache attache=simulateStart(resource,entry.getValue(),true,null,null);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info(""String_Node_Str"" + discoverer.getName());
      success=true;
      return result;
    }
    s_logger.warn(""String_Node_Str"" + url);
    throw new DiscoveryException(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    throw new DiscoveryException(""String_Node_Str"");
  }
 finally {
    if (!success) {
      _clusterDetailsDao.deleteDetails(clusterId);
      _clusterDao.remove(clusterId);
    }
  }
}",0.99826214213848
107053,"public static void main(String[] args){
  String newFile=null;
  String oldFile=null;
  String dirName=""String_Node_Str"";
  LinkedHashMap<String,Command> commands=new LinkedHashMap<String,Command>();
  LinkedHashMap<String,Command> oldCommands=new LinkedHashMap<String,Command>();
  ArrayList<Command> addedCommands=new ArrayList<Command>();
  ArrayList<Command> removedCommands=new ArrayList<Command>();
  HashMap<String,Command> stableCommands=new HashMap<String,Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias(""String_Node_Str"",Command.class);
  xs.alias(""String_Node_Str"",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      newFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      oldFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  try {
    try {
      ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile));
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try {
      ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile));
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  String key : commands.keySet()) {
    if (!oldCommands.containsKey(key)) {
      addedCommands.add(commands.get(key));
    }
 else {
      stableCommands.put(commands.get(key).getName(),commands.get(key));
    }
  }
  for (  String key : oldCommands.keySet()) {
    if (!commands.containsKey(key)) {
      removedCommands.add(oldCommands.get(key));
      if (stableCommands.get(key) != null) {
        stableCommands.remove(key);
      }
    }
  }
  try {
    FileWriter fstream=new FileWriter(dirName + ""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"");
    for (    Command c : addedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Command c : removedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      if (commands.get(key).isAsync() != oldCommands.get(key).isAsync()) {
        String type=""String_Node_Str"";
        if (commands.get(key).isAsync()) {
          type=""String_Node_Str"";
        }
        out.write(""String_Node_Str"" + stableCommands.get(key).getName() + ""String_Node_Str""+ type);
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      ArrayList<Argument> newReqArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedReqArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableReqArgs=new HashMap<String,Argument>();
      ArrayList<Argument> newRespArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedRespArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableRespArgs=new HashMap<String,Argument>();
      Command newCommand=commands.get(key);
      Command oldCommand=oldCommands.get(key);
      for (      Argument arg : newCommand.getRequest()) {
        if (oldCommand.getReqArgByName(arg.getName()) == null) {
          newReqArgs.add(arg);
        }
 else {
          stableReqArgs.put(arg.getName(),arg);
        }
      }
      for (      Argument arg : oldCommand.getRequest()) {
        if (newCommand.getReqArgByName(arg.getName()) == null) {
          removedReqArgs.add(arg);
          if (stableReqArgs.get(arg.getName()) != null) {
            stableReqArgs.remove(arg.getName());
          }
        }
      }
      for (Iterator<String> i=stableReqArgs.keySet().iterator(); i.hasNext(); ) {
        String argName=i.next();
        if (oldCommand.getReqArgByName(argName).isRequired() == newCommand.getReqArgByName(argName).isRequired()) {
          i.remove();
        }
      }
      if (newCommand.getResponse() != null && oldCommand.getResponse() != null) {
        for (        Argument arg : newCommand.getResponse()) {
          if (oldCommand.getResArgByName(arg.getName()) == null) {
            newRespArgs.add(arg);
          }
        }
        for (        Argument arg : oldCommand.getResponse()) {
          if (newCommand.getResArgByName(arg.getName()) == null) {
            removedRespArgs.add(arg);
          }
        }
      }
      if (newReqArgs.size() != 0 || newRespArgs.size() != 0 || removedReqArgs.size() != 0 || removedRespArgs.size() != 0 || stableReqArgs.size() != 0 || stableReqArgs.size() != 0) {
        StringBuffer commandInfo=new StringBuffer();
        commandInfo.append(""String_Node_Str"" + key);
        out.write(commandInfo.toString());
        out.write(""String_Node_Str"");
        if (newReqArgs.size() != 0 || removedReqArgs.size() != 0) {
          StringBuffer request=new StringBuffer();
          request.append(""String_Node_Str"");
          out.write(request.toString());
          if (newReqArgs.size() != 0) {
            StringBuffer newParameters=new StringBuffer();
            newParameters.append(""String_Node_Str"");
            for (            Argument newArg : newReqArgs) {
              String isRequiredParam=""String_Node_Str"";
              if (newArg.isRequired()) {
                isRequiredParam=""String_Node_Str"";
              }
              newParameters.append(newArg.getName() + ""String_Node_Str"" + isRequiredParam+ ""String_Node_Str"");
            }
            newParameters.delete(newParameters.length() - 2,newParameters.length() - 1);
            out.write(newParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (removedReqArgs.size() != 0) {
            StringBuffer removedParameters=new StringBuffer();
            removedParameters.append(""String_Node_Str"");
            for (            Argument removedArg : removedReqArgs) {
              removedParameters.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedParameters.delete(removedParameters.length() - 2,removedParameters.length() - 1);
            out.write(removedParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (stableReqArgs.size() != 0) {
            StringBuffer changedParameters=new StringBuffer();
            changedParameters.append(""String_Node_Str"");
            for (            Argument stableArg : stableReqArgs.values()) {
              String newRequired=""String_Node_Str"";
              String oldRequired=""String_Node_Str"";
              if (oldCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               oldRequired=""String_Node_Str"";
              if (newCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               newRequired=""String_Node_Str"";
              changedParameters.append(stableArg.getName() + ""String_Node_Str"" + oldRequired+ ""String_Node_Str""+ newRequired+ ""String_Node_Str"");
            }
            changedParameters.delete(changedParameters.length() - 2,changedParameters.length() - 1);
            out.write(changedParameters.toString());
            out.write(""String_Node_Str"");
          }
        }
        if (newRespArgs.size() != 0 || removedRespArgs.size() != 0) {
          StringBuffer changedResponseParams=new StringBuffer();
          changedResponseParams.append(""String_Node_Str"");
          out.write(changedResponseParams.toString());
          if (newRespArgs.size() != 0) {
            StringBuffer newRespParams=new StringBuffer();
            newRespParams.append(""String_Node_Str"");
            for (            Argument newArg : newRespArgs) {
              newRespParams.append(newArg.getName() + ""String_Node_Str"");
            }
            newRespParams.delete(newRespParams.length() - 2,newRespParams.length() - 1);
            out.write(newRespParams.toString());
            out.write(""String_Node_Str"");
          }
          if (removedRespArgs.size() != 0) {
            StringBuffer removedRespParams=new StringBuffer();
            removedRespParams.append(""String_Node_Str"");
            for (            Argument removedArg : removedRespArgs) {
              removedRespParams.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedRespParams.delete(removedRespParams.length() - 2,removedRespParams.length() - 1);
            out.write(removedRespParams.toString());
            out.write(""String_Node_Str"");
          }
        }
      }
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  String newFile=null;
  String oldFile=null;
  String dirName=""String_Node_Str"";
  LinkedHashMap<String,Command> commands=new LinkedHashMap<String,Command>();
  LinkedHashMap<String,Command> oldCommands=new LinkedHashMap<String,Command>();
  ArrayList<Command> addedCommands=new ArrayList<Command>();
  ArrayList<Command> removedCommands=new ArrayList<Command>();
  HashMap<String,Command> stableCommands=new HashMap<String,Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias(""String_Node_Str"",Command.class);
  xs.alias(""String_Node_Str"",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      newFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      oldFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  try {
    try {
      ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile));
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try {
      ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile));
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  String key : commands.keySet()) {
    if (!oldCommands.containsKey(key)) {
      addedCommands.add(commands.get(key));
    }
 else {
      stableCommands.put(commands.get(key).getName(),commands.get(key));
    }
  }
  for (  String key : oldCommands.keySet()) {
    if (!commands.containsKey(key)) {
      removedCommands.add(oldCommands.get(key));
      if (stableCommands.get(key) != null) {
        stableCommands.remove(key);
      }
    }
  }
  try {
    FileWriter fstream=new FileWriter(dirName + ""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"");
    for (    Command c : addedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Command c : removedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      if (commands.get(key).isAsync() != oldCommands.get(key).isAsync()) {
        String type=""String_Node_Str"";
        if (commands.get(key).isAsync()) {
          type=""String_Node_Str"";
        }
        out.write(""String_Node_Str"" + stableCommands.get(key).getName() + ""String_Node_Str""+ type);
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      ArrayList<Argument> newReqArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedReqArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableReqArgs=new HashMap<String,Argument>();
      ArrayList<Argument> newRespArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedRespArgs=new ArrayList<Argument>();
      Command newCommand=commands.get(key);
      Command oldCommand=oldCommands.get(key);
      for (      Argument arg : newCommand.getRequest()) {
        if (oldCommand.getReqArgByName(arg.getName()) == null) {
          if (!(arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str""))) {
            newReqArgs.add(arg);
          }
        }
 else {
          stableReqArgs.put(arg.getName(),arg);
        }
      }
      for (      Argument arg : oldCommand.getRequest()) {
        if (newCommand.getReqArgByName(arg.getName()) == null) {
          removedReqArgs.add(arg);
          if (stableReqArgs.get(arg.getName()) != null) {
            stableReqArgs.remove(arg.getName());
          }
        }
      }
      for (Iterator<String> i=stableReqArgs.keySet().iterator(); i.hasNext(); ) {
        String argName=i.next();
        if (oldCommand.getReqArgByName(argName).isRequired() == newCommand.getReqArgByName(argName).isRequired()) {
          i.remove();
        }
      }
      if (newCommand.getResponse() != null && oldCommand.getResponse() != null) {
        for (        Argument arg : newCommand.getResponse()) {
          if (oldCommand.getResArgByName(arg.getName()) == null) {
            newRespArgs.add(arg);
          }
        }
        for (        Argument arg : oldCommand.getResponse()) {
          if (newCommand.getResArgByName(arg.getName()) == null) {
            removedRespArgs.add(arg);
          }
        }
      }
      if (newReqArgs.size() != 0 || newRespArgs.size() != 0 || removedReqArgs.size() != 0 || removedRespArgs.size() != 0 || stableReqArgs.size() != 0 || stableReqArgs.size() != 0) {
        StringBuffer commandInfo=new StringBuffer();
        commandInfo.append(""String_Node_Str"" + key);
        out.write(commandInfo.toString());
        out.write(""String_Node_Str"");
        if (newReqArgs.size() != 0 || removedReqArgs.size() != 0 || stableReqArgs.size() != 0) {
          StringBuffer request=new StringBuffer();
          request.append(""String_Node_Str"");
          out.write(request.toString());
          if (newReqArgs.size() != 0) {
            StringBuffer newParameters=new StringBuffer();
            newParameters.append(""String_Node_Str"");
            for (            Argument newArg : newReqArgs) {
              String isRequiredParam=""String_Node_Str"";
              if (newArg.isRequired()) {
                isRequiredParam=""String_Node_Str"";
              }
              newParameters.append(newArg.getName() + ""String_Node_Str"" + isRequiredParam+ ""String_Node_Str"");
            }
            newParameters.delete(newParameters.length() - 2,newParameters.length() - 1);
            out.write(newParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (removedReqArgs.size() != 0) {
            StringBuffer removedParameters=new StringBuffer();
            removedParameters.append(""String_Node_Str"");
            for (            Argument removedArg : removedReqArgs) {
              removedParameters.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedParameters.delete(removedParameters.length() - 2,removedParameters.length() - 1);
            out.write(removedParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (stableReqArgs.size() != 0) {
            StringBuffer changedParameters=new StringBuffer();
            changedParameters.append(""String_Node_Str"");
            for (            Argument stableArg : stableReqArgs.values()) {
              String newRequired=""String_Node_Str"";
              String oldRequired=""String_Node_Str"";
              if (oldCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               oldRequired=""String_Node_Str"";
              if (newCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               newRequired=""String_Node_Str"";
              changedParameters.append(stableArg.getName() + ""String_Node_Str"" + oldRequired+ ""String_Node_Str""+ newRequired+ ""String_Node_Str"");
            }
            changedParameters.delete(changedParameters.length() - 2,changedParameters.length() - 1);
            out.write(changedParameters.toString());
            out.write(""String_Node_Str"");
          }
        }
        if (newRespArgs.size() != 0 || removedRespArgs.size() != 0) {
          StringBuffer changedResponseParams=new StringBuffer();
          changedResponseParams.append(""String_Node_Str"");
          out.write(changedResponseParams.toString());
          if (newRespArgs.size() != 0) {
            StringBuffer newRespParams=new StringBuffer();
            newRespParams.append(""String_Node_Str"");
            for (            Argument newArg : newRespArgs) {
              newRespParams.append(newArg.getName() + ""String_Node_Str"");
            }
            newRespParams.delete(newRespParams.length() - 2,newRespParams.length() - 1);
            out.write(newRespParams.toString());
            out.write(""String_Node_Str"");
          }
          if (removedRespArgs.size() != 0) {
            StringBuffer removedRespParams=new StringBuffer();
            removedRespParams.append(""String_Node_Str"");
            for (            Argument removedArg : removedRespArgs) {
              removedRespParams.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedRespParams.delete(removedRespParams.length() - 2,removedRespParams.length() - 1);
            out.write(removedRespParams.toString());
            out.write(""String_Node_Str"");
          }
        }
      }
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8068284875966925
107054,"protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    for (    DbUpgrade upgrade : upgrades) {
      s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
      VersionVO version=_dao.findByVersion(upgrade.getUpgradedVersion(),Step.Upgrade);
      if (version != null) {
        Transaction txn=Transaction.open(""String_Node_Str"");
        txn.start();
        try {
          File[] scripts=upgrade.getCleanupScripts();
          if (scripts != null) {
            for (            File script : scripts) {
              runScript(script);
            }
          }
          version.setStep(Step.Complete);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
  finally {
          txn.close();
        }
      }
    }
  }
}","protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    TreeMap<String,List<DbUpgrade>> upgradedVersions=new TreeMap<String,List<DbUpgrade>>();
    for (    DbUpgrade upgrade : upgrades) {
      String upgradedVerson=upgrade.getUpgradedVersion();
      List<DbUpgrade> upgradeList=upgradedVersions.get(upgradedVerson);
      if (upgradeList == null) {
        upgradeList=new ArrayList<DbUpgrade>();
      }
      upgradeList.add(upgrade);
      upgradedVersions.put(upgradedVerson,upgradeList);
    }
    for (    String upgradedVersion : upgradedVersions.keySet()) {
      List<DbUpgrade> versionUpgrades=upgradedVersions.get(upgradedVersion);
      VersionVO version=_dao.findByVersion(upgradedVersion,Step.Upgrade);
      s_logger.debug(""String_Node_Str"" + upgradedVersion + ""String_Node_Str"");
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        if (version != null) {
          for (          DbUpgrade upgrade : versionUpgrades) {
            s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
            txn.start();
            File[] scripts=upgrade.getCleanupScripts();
            if (scripts != null) {
              for (              File script : scripts) {
                runScript(script);
                s_logger.debug(""String_Node_Str"" + script.getAbsolutePath() + ""String_Node_Str"");
              }
            }
            txn.commit();
          }
          txn.start();
          version.setStep(Step.Complete);
          s_logger.debug(""String_Node_Str"" + upgradedVersion);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
      }
  finally {
        txn.close();
      }
    }
  }
}",0.7974261748822246
107055,"public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
}","public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new UpgradeSnapshot223to224(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new UpgradeSnapshot223to224(),new Upgrade222to224()});
}",0.948051948051948
107056,"@Override public Pair<AfterScanAction,Object> scanPool(Long pool){
  long dataCenterId=pool.longValue();
  ConsoleProxyLoadInfo proxyInfo=this._zoneProxyCountMap.get(dataCenterId);
  if (proxyInfo == null)   return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
  ConsoleProxyLoadInfo vmInfo=this._zoneVmCountMap.get(dataCenterId);
  if (vmInfo == null)   vmInfo=new ConsoleProxyLoadInfo();
  if (!checkCapacity(proxyInfo,vmInfo)) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + proxyInfo.getName());
    return new Pair<AfterScanAction,Object>(AfterScanAction.expand,null);
  }
  return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
}","@Override public Pair<AfterScanAction,Object> scanPool(Long pool){
  long dataCenterId=pool.longValue();
  ConsoleProxyLoadInfo proxyInfo=this._zoneProxyCountMap.get(dataCenterId);
  if (proxyInfo == null) {
    return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
  }
  ConsoleProxyLoadInfo vmInfo=this._zoneVmCountMap.get(dataCenterId);
  if (vmInfo == null) {
    vmInfo=new ConsoleProxyLoadInfo();
  }
  if (!checkCapacity(proxyInfo,vmInfo)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + proxyInfo.getName());
    }
    return new Pair<AfterScanAction,Object>(AfterScanAction.expand,null);
  }
  return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
}",0.9815078236130867
107057,"@Override public boolean isPoolReadyForScan(Long pool){
  long dataCenterId=pool.longValue();
  if (!isZoneReady(_zoneHostInfoMap,dataCenterId)) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
    return false;
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
  return true;
}","@Override public boolean isPoolReadyForScan(Long pool){
  long dataCenterId=pool.longValue();
  if (!isZoneReady(_zoneHostInfoMap,dataCenterId)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
    }
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
  }
  return true;
}",0.9779411764705882
107058,"private boolean reserveStandbyCapacity(){
  ConsoleProxyManagementState state=getManagementState();
  if (state == null || state != ConsoleProxyManagementState.Auto)   return false;
  return true;
}","private boolean reserveStandbyCapacity(){
  ConsoleProxyManagementState state=getManagementState();
  if (state == null || state != ConsoleProxyManagementState.Auto) {
    return false;
  }
  return true;
}",0.9801980198019802
107059,"@Override @DB public String uploadCertificate(UploadCustomCertificateCmd cmd){
  if (!_ksMgr.validateCertificate(cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix()))   throw new InvalidParameterValueException(""String_Node_Str"");
  _ksMgr.saveCertificate(ConsoleProxyManager.CERTIFICATE_NAME,cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix());
  _consoleProxyMgr.setManagementState(ConsoleProxyManagementState.ResetSuspending);
  return ""String_Node_Str"";
}","@Override @DB public String uploadCertificate(UploadCustomCertificateCmd cmd){
  if (!_ksMgr.validateCertificate(cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _ksMgr.saveCertificate(ConsoleProxyManager.CERTIFICATE_NAME,cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix());
  _consoleProxyMgr.setManagementState(ConsoleProxyManagementState.ResetSuspending);
  return ""String_Node_Str"";
}",0.9917525773195875
107060,"@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"" + clusterId,HostPodVO.class,podId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  boolean success=false;
  for (  HostVO h : allHosts) {
    success=createStoragePool(h.getId(),pool);
    if (success) {
      break;
    }
  }
  if (!success) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    try {
      addPoolToHost(h.getId(),pool);
      poolHosts.add(h);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + h + ""String_Node_Str""+ pool,e);
    }
  }
  if (poolHosts.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}","@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"" + clusterId,HostPodVO.class,podId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  boolean success=false;
  for (  HostVO h : allHosts) {
    success=createStoragePool(h.getId(),pool);
    if (success) {
      break;
    }
  }
  if (!success) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    try {
      connectHostToSharedPool(h.getId(),pool);
      poolHosts.add(h);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + h + ""String_Node_Str""+ pool,e);
    }
  }
  if (poolHosts.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}",0.9983639567077774
107061,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_hostDao,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}",0.9986782200029372
107062,"public StoragePoolMonitor(StorageManager mgr,HostDao hostDao,StoragePoolDao poolDao){
  this._storageManager=mgr;
  this._hostDao=hostDao;
  this._poolDao=poolDao;
}","public StoragePoolMonitor(StorageManagerImpl mgr,StoragePoolDao poolDao){
  this._storageManager=mgr;
  this._poolDao=poolDao;
}",0.8464163822525598
107063,"@Override public void processConnect(HostVO host,StartupCommand cmd) throws ConnectionException {
  if (cmd instanceof StartupRoutingCommand) {
    StartupRoutingCommand scCmd=(StartupRoutingCommand)cmd;
    if (scCmd.getHypervisorType() == HypervisorType.XenServer || scCmd.getHypervisorType() == HypervisorType.KVM || scCmd.getHypervisorType() == HypervisorType.VMware) {
      List<StoragePoolVO> pools=_poolDao.listBy(host.getDataCenterId(),host.getPodId(),host.getClusterId());
      for (      StoragePoolVO pool : pools) {
        Long hostId=host.getId();
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
        try {
          _storageManager.addPoolToHost(hostId,pool);
          _storageManager.createCapacityEntry(pool);
        }
 catch (        Exception e) {
          throw new ConnectionException(true,""String_Node_Str"" + pool,e);
        }
      }
    }
  }
}","@Override public void processConnect(HostVO host,StartupCommand cmd) throws ConnectionException {
  if (cmd instanceof StartupRoutingCommand) {
    StartupRoutingCommand scCmd=(StartupRoutingCommand)cmd;
    if (scCmd.getHypervisorType() == HypervisorType.XenServer || scCmd.getHypervisorType() == HypervisorType.KVM || scCmd.getHypervisorType() == HypervisorType.VMware) {
      List<StoragePoolVO> pools=_poolDao.listBy(host.getDataCenterId(),host.getPodId(),host.getClusterId());
      for (      StoragePoolVO pool : pools) {
        if (!pool.getPoolType().isShared()) {
          continue;
        }
        Long hostId=host.getId();
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
        try {
          _storageManager.connectHostToSharedPool(hostId,pool);
          _storageManager.createCapacityEntry(pool);
        }
 catch (        Exception e) {
          throw new ConnectionException(true,""String_Node_Str"" + pool,e);
        }
      }
    }
  }
}",0.9459745762711864
107064,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    StoragePool assignedPool=null;
    if (dest.getStorageForDisks() != null) {
      assignedPool=dest.getStorageForDisks().get(vol);
    }
    if (assignedPool != null) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated) {
        recreateVols.add(vol);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool);
          }
          throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ vol.getPoolId()+ ""String_Node_Str"");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      vm.addDisk(new VolumeTO(vol,pool));
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol,vm);
      newVol.setRecreatable(true);
      if (dest.getStorageForDisks() != null && dest.getStorageForDisks().containsKey(vol)) {
        StoragePool poolWithOldVol=dest.getStorageForDisks().get(vol);
        dest.getStorageForDisks().put(newVol,poolWithOldVol);
        dest.getStorageForDisks().remove(vol);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    StoragePool assignedPool=null;
    if (dest.getStorageForDisks() != null) {
      assignedPool=dest.getStorageForDisks().get(vol);
    }
    if (assignedPool != null) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated) {
        recreateVols.add(vol);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool);
          }
          throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ vol.getPoolId()+ ""String_Node_Str"");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      vm.addDisk(new VolumeTO(vol,pool));
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol,vm);
      if (dest.getStorageForDisks() != null && dest.getStorageForDisks().containsKey(vol)) {
        StoragePool poolWithOldVol=dest.getStorageForDisks().get(vol);
        dest.getStorageForDisks().put(newVol,poolWithOldVol);
        dest.getStorageForDisks().remove(vol);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}",0.9915114658558216
107065,"VolumeVO allocateDuplicateVolume(VolumeVO oldVol,Long templateId){
  VolumeVO newVol=new VolumeVO(oldVol.getVolumeType(),oldVol.getName(),oldVol.getDataCenterId(),oldVol.getDomainId(),oldVol.getAccountId(),oldVol.getDiskOfferingId(),oldVol.getSize());
  if (templateId != null) {
    newVol.setTemplateId(templateId);
  }
 else {
    newVol.setTemplateId(oldVol.getTemplateId());
  }
  newVol.setDeviceId(oldVol.getDeviceId());
  newVol.setInstanceId(oldVol.getInstanceId());
  return _volsDao.persist(newVol);
}","VolumeVO allocateDuplicateVolume(VolumeVO oldVol,Long templateId){
  VolumeVO newVol=new VolumeVO(oldVol.getVolumeType(),oldVol.getName(),oldVol.getDataCenterId(),oldVol.getDomainId(),oldVol.getAccountId(),oldVol.getDiskOfferingId(),oldVol.getSize());
  if (templateId != null) {
    newVol.setTemplateId(templateId);
  }
 else {
    newVol.setTemplateId(oldVol.getTemplateId());
  }
  newVol.setDeviceId(oldVol.getDeviceId());
  newVol.setInstanceId(oldVol.getInstanceId());
  newVol.setRecreatable(oldVol.isRecreatable());
  return _volsDao.persist(newVol);
}",0.9543336439888164
107066,"public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
}","public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
}",0.9403254972875226
107067,"@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
  updateTotalCPUInOpHostCapacity(conn);
  upgradeGuestOs(conn);
  upgradeAccountVlanMap(conn);
}","@Override public void performDataMigration(Connection conn){
  try {
    updateClusterIdInOpHostCapacity(conn);
    updateGuestOsType(conn);
    updateNicsWithMode(conn);
    updateUserStatsWithNetwork(conn);
    dropIndexIfExists(conn);
    fixBasicZoneNicCount(conn);
    updateTotalCPUInOpHostCapacity(conn);
    upgradeGuestOs(conn);
    upgradeAccountVlanMap(conn);
    fixRecreatableVolumesProblem(conn);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.812206572769953
107068,"@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
  updateTotalCPUInOpHostCapacity(conn);
}","@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
  updateTotalCPUInOpHostCapacity(conn);
  upgradeGuestOs(conn);
  upgradeAccountVlanMap(conn);
}",0.913657770800628
107069,"@Override public String getCurrentVersion(){
  Connection conn=null;
  try {
    s_logger.debug(""String_Node_Str"");
    conn=Transaction.getStandaloneConnection();
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      rs.close();
      pstmt.close();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (!rs.next()) {
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        try {
          pstmt.executeQuery();
          return ""String_Node_Str"";
        }
 catch (        SQLException e) {
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          return ""String_Node_Str"";
        }
 finally {
          pstmt.close();
        }
      }
 else {
        rs.close();
        pstmt.close();
        s_logger.debug(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        try {
          pstmt.executeQuery();
          return ""String_Node_Str"";
        }
 catch (        SQLException e) {
          s_logger.debug(""String_Node_Str"");
          return ""String_Node_Str"";
        }
 finally {
          pstmt.close();
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
  SearchCriteria<String> sc=CurrentVersionSearch.create();
  sc.setParameters(""String_Node_Str"",Step.Complete);
  Filter filter=new Filter(VersionVO.class,""String_Node_Str"",false,0l,1l);
  List<String> vers=customSearch(sc,filter);
  return vers.get(0);
}","@Override public String getCurrentVersion(){
  Connection conn=null;
  try {
    s_logger.debug(""String_Node_Str"");
    conn=Transaction.getStandaloneConnection();
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      rs.close();
      pstmt.close();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (!rs.next()) {
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        try {
          pstmt.executeQuery();
          return ""String_Node_Str"";
        }
 catch (        SQLException e) {
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          return ""String_Node_Str"";
        }
 finally {
          pstmt.close();
        }
      }
 else {
        rs.close();
        pstmt.close();
        s_logger.debug(""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
    SearchCriteria<String> sc=CurrentVersionSearch.create();
    sc.setParameters(""String_Node_Str"",Step.Complete);
    Filter filter=new Filter(VersionVO.class,""String_Node_Str"",false,0l,1l);
    List<String> upgradedVersions=customSearch(sc,filter);
    if (upgradedVersions.isEmpty()) {
      filter=new Filter(VersionVO.class,""String_Node_Str"",false,0l,1l);
      sc=CurrentVersionSearch.create();
      List<String> vers=customSearch(sc,filter);
      if (!vers.isEmpty()) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      try {
        s_logger.debug(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.executeQuery();
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
 catch (      SQLException e) {
        s_logger.debug(""String_Node_Str"");
        return ""String_Node_Str"";
      }
 finally {
        rs.close();
        pstmt.close();
      }
    }
 else {
      return upgradedVersions.get(0);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}",0.6684518013631938
107070,"private void upadteUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      s_logger.debug(""String_Node_Str"" + pstmt);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void upadteUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9744258872651356
107071,"protected void upgradeBasicUserVms(Connection conn,long domainRouterId,long networkId,String gateway,String vnet) throws SQLException {
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  ResultSet rs=pstmt.executeQuery();
  List<Object[]> vms=new ArrayList<Object[]>();
  while (rs.next()) {
    Object[] vm=new Object[10];
    vm[0]=rs.getLong(1);
    vm[1]=rs.getString(2);
    vm[2]=rs.getString(3);
    vm[3]=rs.getString(4);
    vm[4]=rs.getString(5);
    vm[5]=rs.getString(6);
    vms.add(vm);
  }
  rs.close();
  pstmt.close();
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ domainRouterId);
  int count=0;
  for (  Object[] vm : vms) {
    String state=(String)vm[4];
    boolean running=false;
    if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
      running=true;
      count++;
    }
    insertNic(conn,networkId,(Long)vm[0],running,(String)vm[1],(String)vm[2],(String)vm[3],""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  rs=pstmt.executeQuery();
  rs.next();
  String state=rs.getString(1);
  if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
    count++;
  }
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,count);
  if (count == 0) {
    pstmt.setBoolean(2,false);
  }
 else {
    pstmt.setBoolean(2,true);
  }
  pstmt.setLong(3,networkId);
  pstmt.executeUpdate();
  pstmt.close();
}","protected void upgradeBasicUserVms(Connection conn,long domainRouterId,long networkId,String gateway,String vnet) throws SQLException {
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  ResultSet rs=pstmt.executeQuery();
  List<Object[]> vms=new ArrayList<Object[]>();
  while (rs.next()) {
    Object[] vm=new Object[10];
    vm[0]=rs.getLong(1);
    vm[1]=rs.getString(2);
    vm[2]=rs.getString(3);
    vm[3]=rs.getString(4);
    vm[4]=rs.getString(5);
    vm[5]=rs.getString(6);
    vms.add(vm);
  }
  rs.close();
  pstmt.close();
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ domainRouterId);
  int count=0;
  for (  Object[] vm : vms) {
    String state=(String)vm[4];
    boolean running=false;
    if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
      running=true;
      String type=(String)vm[5];
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        count++;
      }
    }
    insertNic(conn,networkId,(Long)vm[0],running,(String)vm[1],(String)vm[2],(String)vm[3],""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  rs=pstmt.executeQuery();
  rs.next();
  String state=rs.getString(1);
  if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
    count++;
  }
  rs.close();
  pstmt.close();
  Long originalNicsCount=0L;
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,networkId);
  ResultSet originalCountRs=pstmt.executeQuery();
  if (originalCountRs.next()) {
    originalNicsCount=originalCountRs.getLong(1);
  }
  Long resultCount=originalNicsCount + count;
  originalCountRs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,resultCount);
  if (count == 0) {
    pstmt.setBoolean(2,false);
  }
 else {
    pstmt.setBoolean(2,true);
  }
  pstmt.setLong(3,networkId);
  pstmt.executeUpdate();
  pstmt.close();
}",0.7884717080909571
107072,"@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
}","@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
}",0.9364406779661016
107073,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  List<Long> avoidNetworks=new ArrayList<Long>();
  List<Long> allowedSharedNetworks=new ArrayList<Long>();
  if (isSystem == null) {
    isSystem=false;
  }
  if (isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountMgr.getActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      DomainVO domain=_domainDao.findById(account.getDomainId());
      if (domain != null) {
        path=domain.getPath();
      }
    }
  }
 else {
    accountName=account.getAccountName();
    domainId=account.getDomainId();
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (path != null) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (!isSystem) {
    if (accountName != null && domainId != null) {
      if (isShared == null) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else       if (!isShared) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
      if (isShared == null || isShared) {
        List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
        for (        NetworkVO network : allNetworks) {
          if (!isNetworkAvailableInDomain(network.getId(),domainId)) {
            avoidNetworks.add(network.getId());
          }
 else {
            allowedSharedNetworks.add(network.getId());
          }
        }
      }
    }
 else     if (isShared != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isShared);
    }
  }
  if (domainId != null && accountName == null) {
    List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
    for (    NetworkVO network : allNetworks) {
      if (!isNetworkAvailableInDomain(network.getId(),domainId)) {
        avoidNetworks.add(network.getId());
      }
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  }
  for (  Long avoidNetwork : avoidNetworks) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NOTIN,avoidNetwork);
  }
  for (  Long allowerdSharedNetwork : allowedSharedNetworks) {
    sc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,allowerdSharedNetwork);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (!isSystem && path != null && (isShared == null || !isShared)) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",path + ""String_Node_Str"");
  }
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  List<Long> avoidNetworks=new ArrayList<Long>();
  List<Long> allowedSharedNetworks=new ArrayList<Long>();
  if (isSystem == null) {
    isSystem=false;
  }
  if (isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountMgr.getActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      DomainVO domain=_domainDao.findById(account.getDomainId());
      if (domain != null) {
        path=domain.getPath();
      }
    }
  }
 else {
    accountName=account.getAccountName();
    domainId=account.getDomainId();
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (path != null) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (!isSystem) {
    if (accountName != null && domainId != null) {
      if (isShared == null) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else       if (!isShared) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
      if (isShared == null || isShared) {
        List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
        for (        NetworkVO network : allNetworks) {
          NetworkOffering offering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
          if (!isNetworkAvailableInDomain(network.getId(),domainId) || offering.isSystemOnly()) {
            avoidNetworks.add(network.getId());
          }
 else {
            allowedSharedNetworks.add(network.getId());
          }
        }
      }
    }
 else     if (isShared != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isShared);
    }
  }
  if (domainId != null && accountName == null) {
    List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
    for (    NetworkVO network : allNetworks) {
      if (!isNetworkAvailableInDomain(network.getId(),domainId)) {
        avoidNetworks.add(network.getId());
      }
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  }
  for (  Long avoidNetwork : avoidNetworks) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NOTIN,avoidNetwork);
  }
  for (  Long allowerdSharedNetwork : allowedSharedNetworks) {
    sc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,allowerdSharedNetwork);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (!isSystem && path != null && (isShared == null || !isShared)) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",path + ""String_Node_Str"");
  }
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}",0.9892399070327969
107074,"protected HashMap<String,VmStatsEntry> getVmStats(Connection conn,GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows)) * 100);
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}","protected HashMap<String,VmStatsEntry> getVmStats(Connection conn,GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows))));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
  }
  return vmResponseMap;
}",0.7061393926152502
107075,"public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,id);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,protocol);
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        String privateIp=(String)rule[3];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId);
        }
        long instanceId=rs.getLong(1);
        ;
        rs.close();
        pstmt.close();
        String privatePort=(String)rule[4];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,id);
        pstmt.setLong(2,instanceId);
        pstmt.setString(3,privateIp);
        pstmt.setInt(4,Integer.valueOf(privatePort));
        pstmt.setInt(5,Integer.valueOf(privatePort));
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.error(""String_Node_Str"" + publicIp);
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        String privateIp=(String)rule[3];
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
 else {
          long instanceId=rs.getLong(1);
          s_logger.debug(""String_Node_Str"" + instanceId);
          s_logger.trace(""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setInt(2,ipAddressId);
          pstmt.setInt(3,Integer.valueOf(sourcePort.trim()));
          pstmt.setInt(4,Integer.valueOf(sourcePort.trim()));
          pstmt.setString(5,protocol);
          pstmt.setLong(6,accountId);
          pstmt.setLong(7,domainId);
          pstmt.setLong(8,networkId);
          pstmt.setString(9,UUID.randomUUID().toString());
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
          rs.close();
          pstmt.close();
          String privatePort=(String)rule[4];
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setLong(2,instanceId);
          pstmt.setString(3,privateIp);
          pstmt.setInt(4,Integer.valueOf(privatePort.trim()));
          pstmt.setInt(5,Integer.valueOf(privatePort.trim()));
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.7830172847793254
107076,"protected void upgradeSsvm(Connection conn,long dataCenterId,long publicNetworkId,long managementNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + dataCenterId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  long ssvmId=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String gateway=rs.getString(12);
  String type=rs.getString(13);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  String podGateway=rs.getString(1);
  rs.close();
  pstmt.close();
  s_logger.debug(""String_Node_Str"" + podGateway);
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  rs.close();
  pstmt.close();
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
 else {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
  long controlNicId=insertNic(conn,controlNetworkId,ssvmId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,0,""String_Node_Str"",guestIp != null ? (ssvmId + guestIp) : null);
  if (guestIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,controlNicId);
    pstmt.setString(2,guestIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
  long mgmtNicId=insertNic(conn,managementNetworkId,ssvmId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",podGateway,null,""String_Node_Str"",false,1,""String_Node_Str"",null);
  if (privateIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,mgmtNicId);
    pstmt.setString(2,privateIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
}","protected void upgradeSsvm(Connection conn,long dataCenterId,long publicNetworkId,long managementNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + dataCenterId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  long ssvmId=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String gateway=rs.getString(12);
  String type=rs.getString(13);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  String podGateway=rs.getString(1);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  rs.close();
  pstmt.close();
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
 else {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
  long controlNicId=insertNic(conn,controlNetworkId,ssvmId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,0,""String_Node_Str"",guestIp != null ? (ssvmId + guestIp) : null);
  if (guestIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,controlNicId);
    pstmt.setString(2,guestIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
  long mgmtNicId=insertNic(conn,managementNetworkId,ssvmId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",podGateway,null,""String_Node_Str"",false,1,""String_Node_Str"",null);
  if (privateIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,mgmtNicId);
    pstmt.setString(2,privateIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
}",0.9912679008033533
107077,"@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
  if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
    _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  }
  txn.commit();
}","@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  Long instanceId=volume.getInstanceId();
  VMInstanceVO vmInstance=null;
  if (instanceId != null) {
    vmInstance=_vmInstanceDao.findById(instanceId);
  }
  if (instanceId == null || (vmInstance.getType().equals(VirtualMachine.Type.User))) {
    _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  }
  txn.commit();
}",0.8662640207075065
107078,"@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}","@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}",0.9796747967479674
107079,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}",0.99275887038378
107080,"@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}","@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}",0.9796747967479674
107081,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}",0.99275887038378
107082,"@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findById(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}","@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findByIdIncludingRemoved(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}",0.976470588235294
107083,"@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findById(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}","@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findByIdIncludingRemoved(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}",0.976470588235294
107084,"protected AgentAttache(final long id,boolean maintenance){
  _id=id;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
}","protected AgentAttache(AgentManager agentMgr,final long id,boolean maintenance){
  _id=id;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
  _agentMgr=agentMgr;
}",0.9079497907949792
107085,"public boolean processAnswers(final long seq,final Response resp){
  resp.log(_id,""String_Node_Str"");
  final Answer[] answers=resp.getAnswers();
  boolean processed=false;
  Listener monitor=getListener(seq);
  if (monitor == null) {
    if (answers[0] != null && answers[0].getResult()) {
      processed=true;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(seq,""String_Node_Str""));
    }
  }
 else {
    processed=monitor.processAnswers(_id,seq,answers);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(log(seq,(processed ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""));
    }
    if (!monitor.isRecurring()) {
      unregisterListener(seq);
    }
  }
  if (resp.executeInSequence()) {
    sendNext(seq);
  }
  return processed;
}","public boolean processAnswers(final long seq,final Response resp){
  resp.log(_id,""String_Node_Str"");
  final Answer[] answers=resp.getAnswers();
  boolean processed=false;
  Listener monitor=getListener(seq);
  if (monitor == null) {
    if (answers[0] != null && answers[0].getResult()) {
      processed=true;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(seq,""String_Node_Str""));
    }
  }
 else {
    processed=monitor.processAnswers(_id,seq,answers);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(log(seq,(processed ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""));
    }
    if (!monitor.isRecurring()) {
      unregisterListener(seq);
    }
  }
  if (resp.executeInSequence()) {
    sendNext(seq);
  }
  _agentMgr.notifyAnswersFromAttache(_id,seq,answers);
  return processed;
}",0.9659020458772474
107086,"protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource || resource instanceof KvmDummyResourceBase) {
    return new DummyAttache(id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new DirectAgentAttache(id,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}","protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource || resource instanceof KvmDummyResourceBase) {
    return new DummyAttache(this,id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new DirectAgentAttache(this,id,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}",0.9927431059506532
107087,"public ClusteredAgentAttache(long id,Link link,boolean maintenance){
  super(id,link,maintenance);
  _forward=link == null;
}","public ClusteredAgentAttache(AgentManager agentMgr,long id,Link link,boolean maintenance){
  super(agentMgr,id,link,maintenance);
  _forward=link == null;
}",0.8896797153024911
107088,"@Override protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource) {
    return new DummyAttache(id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new ClusteredDirectAgentAttache(id,_nodeId,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}","@Override protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource) {
    return new DummyAttache(this,id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new ClusteredDirectAgentAttache(this,id,_nodeId,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}",0.9925595238095238
107089,"public ClusteredDirectAgentAttache(long id,long mgmtId,ServerResource resource,boolean maintenance,ClusteredAgentManagerImpl mgr){
  super(id,resource,maintenance,mgr);
  _mgr=mgr;
  _nodeId=mgmtId;
}","public ClusteredDirectAgentAttache(AgentManager agentMgr,long id,long mgmtId,ServerResource resource,boolean maintenance,ClusteredAgentManagerImpl mgr){
  super(agentMgr,id,resource,maintenance,mgr);
  _mgr=mgr;
  _nodeId=mgmtId;
}",0.9280742459396752
107090,"public ConnectedAgentAttache(final long id,final Link link,boolean maintenance){
  super(id,maintenance);
  _link=link;
}","public ConnectedAgentAttache(AgentManager agentMgr,final long id,final Link link,boolean maintenance){
  super(agentMgr,id,maintenance);
  _link=link;
}",0.8864468864468864
107091,"public DirectAgentAttache(long id,ServerResource resource,boolean maintenance,AgentManagerImpl mgr){
  super(id,maintenance);
  _resource=resource;
  _mgr=mgr;
}","public DirectAgentAttache(AgentManager agentMgr,long id,ServerResource resource,boolean maintenance,AgentManagerImpl mgr){
  super(agentMgr,id,maintenance);
  _resource=resource;
  _mgr=mgr;
}",0.9121813031161472
107092,"public DummyAttache(long id,boolean maintenance){
  super(id,maintenance);
}","public DummyAttache(AgentManager agentMgr,long id,boolean maintenance){
  super(agentMgr,id,maintenance);
}",0.8306010928961749
107093,"@Override public List<Long> listRunningSecStorageOrderByLoad(SecondaryStorageVm.Role role,long zoneId){
  List<Long> l=new ArrayList<Long>();
  Transaction txn=Transaction.currentTxn();
  ;
  PreparedStatement pstmt=null;
  try {
    String sql;
    if (role == null)     sql=""String_Node_Str"" + ""String_Node_Str"";
 else     sql=""String_Node_Str"" + ""String_Node_Str"";
    pstmt=txn.prepareAutoCloseStatement(sql);
    if (role == null) {
      pstmt.setLong(1,zoneId);
    }
 else {
      pstmt.setLong(1,zoneId);
      pstmt.setString(2,role.toString());
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      l.add(rs.getLong(1));
    }
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return l;
}","@Override public List<Long> listRunningSecStorageOrderByLoad(SecondaryStorageVm.Role role,long zoneId){
  List<Long> l=new ArrayList<Long>();
  Transaction txn=Transaction.currentTxn();
  ;
  PreparedStatement pstmt=null;
  try {
    String sql;
    if (role == null)     sql=""String_Node_Str"";
 else     sql=""String_Node_Str"";
    pstmt=txn.prepareAutoCloseStatement(sql);
    if (role == null) {
      pstmt.setLong(1,zoneId);
    }
 else {
      pstmt.setLong(1,zoneId);
      pstmt.setString(2,role.toString());
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      l.add(rs.getLong(1));
    }
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return l;
}",0.9725651577503428
107094,"@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}","@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=OutstandingWorkSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}",0.9607843137254902
107095,"protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.NEQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}","protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}",0.9995956328346138
107096,"@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}","@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=OutstandingWorkSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}",0.9607843137254902
107097,"protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.NEQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}","protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}",0.9995956328346138
107098,"/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
public IAgentControl getAgentControl();","/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
IAgentControl getAgentControl();",0.9743589743589745
107099,"/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
public void disconnected();","/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
void disconnected();",0.9814323607427056
107100,public void setAgentControl(IAgentControl agentControl);,void setAgentControl(IAgentControl agentControl);,0.9333333333333332
107101,"/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
public StartupCommand[] initialize();","/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
StartupCommand[] initialize();",0.9814323607427056
107102,"/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
public PingCommand getCurrentStatus(long id);","/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
PingCommand getCurrentStatus(long id);",0.972972972972973
107103,"/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
public Answer executeRequest(Command cmd);","/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
Answer executeRequest(Command cmd);",0.977635782747604
107104,"@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findById(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}","@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}",0.9977839335180057
107105,"@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findById(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}","@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}",0.9977839335180057
107106,"/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
public IAgentControl getAgentControl();","/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
IAgentControl getAgentControl();",0.9743589743589745
107107,"/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
public void disconnected();","/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
void disconnected();",0.9814323607427056
107108,public void setAgentControl(IAgentControl agentControl);,void setAgentControl(IAgentControl agentControl);,0.9333333333333332
107109,"/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
public StartupCommand[] initialize();","/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
StartupCommand[] initialize();",0.9814323607427056
107110,"/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
public PingCommand getCurrentStatus(long id);","/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
PingCommand getCurrentStatus(long id);",0.972972972972973
107111,"/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
public Answer executeRequest(Command cmd);","/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
Answer executeRequest(Command cmd);",0.977635782747604
107112,"@Override public Answer executeRequest(Command cmd){
  try {
    if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      return execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      return execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      return execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      return execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckStateCommand) {
      return executeRequest(cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      return execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      return execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      return execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      return execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      return execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      return execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      return execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      return execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof CheckConsoleProxyLoadCommand) {
      return execute((CheckConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof WatchConsoleProxyLoadCommand) {
      return execute((WatchConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      return execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      return execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      return execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof CreateCommand) {
      return execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      return execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      return execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      return execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      return execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      return execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotBackupCommand) {
      return execute((DeleteSnapshotBackupCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotsDirCommand) {
      return execute((DeleteSnapshotsDirCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      return execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      return execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      return execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof SecurityIngressRulesCmd) {
      return execute((SecurityIngressRulesCmd)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      return execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof FenceCommand) {
      return execute((FenceCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      return execute((StartCommand)cmd);
    }
 else     if (cmd instanceof NetworkElementCommand) {
      return _virtRouterResource.executeRequest(cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      return execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      return execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof NetworkRulesSystemVmCommand) {
      return execute((NetworkRulesSystemVmCommand)cmd);
    }
 else     if (cmd instanceof CleanupNetworkRulesCmd) {
      return execute((CleanupNetworkRulesCmd)cmd);
    }
 else {
      s_logger.warn(""String_Node_Str"");
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
  }
 catch (  final IllegalArgumentException e) {
    return new Answer(cmd,false,e.getMessage());
  }
}","@Override public Answer executeRequest(Command cmd){
  try {
    if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      return execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      return execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      return execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      return execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckStateCommand) {
      return executeRequest(cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      return execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      return execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      return execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      return execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      return execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      return execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      return execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      return execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof CheckConsoleProxyLoadCommand) {
      return execute((CheckConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof WatchConsoleProxyLoadCommand) {
      return execute((WatchConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      return execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      return execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      return execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof CreateCommand) {
      return execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      return execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      return execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      return execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      return execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      return execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotBackupCommand) {
      return execute((DeleteSnapshotBackupCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotsDirCommand) {
      return execute((DeleteSnapshotsDirCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      return execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      return execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      return execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof SecurityIngressRulesCmd) {
      return execute((SecurityIngressRulesCmd)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      return execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof FenceCommand) {
      return execute((FenceCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      return execute((StartCommand)cmd);
    }
 else     if (cmd instanceof NetworkElementCommand) {
      return _virtRouterResource.executeRequest(cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      return execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      return execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof NetworkRulesSystemVmCommand) {
      return execute((NetworkRulesSystemVmCommand)cmd);
    }
 else     if (cmd instanceof CleanupNetworkRulesCmd) {
      return execute((CleanupNetworkRulesCmd)cmd);
    }
 else {
      s_logger.warn(""String_Node_Str"");
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
  }
 catch (  final IllegalArgumentException e) {
    return new Answer(cmd,false,e.getMessage());
  }
}",0.9881680946552428
107113,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof CreateStoragePoolCommand) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}",0.9906207366984994
107114,"protected SR getNfsSR(Connection conn,StorageFilerTO pool){
  Map<String,String> deviceConfig=new HashMap<String,String>();
  try {
    String server=pool.getHost();
    String serverpath=pool.getPath();
    serverpath=serverpath.replace(""String_Node_Str"",""String_Node_Str"");
    Set<SR> srs=SR.getAll(conn);
    for (    SR sr : srs) {
      if (!SRType.NFS.equals(sr.getType(conn))) {
        continue;
      }
      Set<PBD> pbds=sr.getPBDs(conn);
      if (pbds.isEmpty()) {
        continue;
      }
      PBD pbd=pbds.iterator().next();
      Map<String,String> dc=pbd.getDeviceConfig(conn);
      if (dc == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (server.equals(dc.get(""String_Node_Str"")) && serverpath.equals(dc.get(""String_Node_Str""))) {
        if (checkSR(conn,sr)) {
          return sr;
        }
        throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
      }
    }
    deviceConfig.put(""String_Node_Str"",server);
    deviceConfig.put(""String_Node_Str"",serverpath);
    Host host=Host.getByUuid(conn,_host.uuid);
    SR sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),Long.toString(pool.getId()),SRType.NFS.toString(),""String_Node_Str"",true,new HashMap<String,String>());
    sr.scan(conn);
    return sr;
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
catch (  XmlRpcException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
}","protected SR getNfsSR(Connection conn,StorageFilerTO pool){
  Map<String,String> deviceConfig=new HashMap<String,String>();
  try {
    String server=pool.getHost();
    String serverpath=pool.getPath();
    serverpath=serverpath.replace(""String_Node_Str"",""String_Node_Str"");
    Set<SR> srs=SR.getAll(conn);
    for (    SR sr : srs) {
      if (!SRType.NFS.equals(sr.getType(conn))) {
        continue;
      }
      Set<PBD> pbds=sr.getPBDs(conn);
      if (pbds.isEmpty()) {
        continue;
      }
      PBD pbd=pbds.iterator().next();
      Map<String,String> dc=pbd.getDeviceConfig(conn);
      if (dc == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (server.equals(dc.get(""String_Node_Str"")) && serverpath.equals(dc.get(""String_Node_Str""))) {
        throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ pool.getUuid()+ ""String_Node_Str""+ _host.uuid);
      }
    }
    deviceConfig.put(""String_Node_Str"",server);
    deviceConfig.put(""String_Node_Str"",serverpath);
    Host host=Host.getByUuid(conn,_host.uuid);
    SR sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),Long.toString(pool.getId()),SRType.NFS.toString(),""String_Node_Str"",true,new HashMap<String,String>());
    sr.scan(conn);
    return sr;
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
catch (  XmlRpcException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
}",0.953204172876304
107115,"protected SR getStorageRepository(Connection conn,StorageFilerTO pool){
  Set<SR> srs;
  try {
    srs=SR.getByNameLabel(conn,pool.getUuid());
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.toString(),e);
  }
catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.getMessage(),e);
  }
  if (srs.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid());
  }
 else   if (srs.size() == 1) {
    SR sr=srs.iterator().next();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId());
    }
    if (checkSR(conn,sr)) {
      return sr;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
  }
 else {
    if (pool.getType() == StoragePoolType.NetworkFilesystem) {
      return getNfsSR(conn,pool);
    }
 else     if (pool.getType() == StoragePoolType.IscsiLUN) {
      return getIscsiSR(conn,pool);
    }
 else     if (pool.getType() == StoragePoolType.PreSetup) {
      throw new CloudRuntimeException(""String_Node_Str"" + pool.getType().name() + ""String_Node_Str""+ pool.getUuid()+ ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + pool.getType().name() + ""String_Node_Str"");
    }
  }
}","protected SR getStorageRepository(Connection conn,StorageFilerTO pool){
  Set<SR> srs;
  try {
    srs=SR.getByNameLabel(conn,pool.getUuid());
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.toString(),e);
  }
catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.getMessage(),e);
  }
  if (srs.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid());
  }
 else   if (srs.size() == 1) {
    SR sr=srs.iterator().next();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId());
    }
    if (checkSR(conn,sr)) {
      return sr;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
  }
}",0.7955988150655946
107116,"protected SR getIscsiSR(Connection conn,StorageFilerTO pool){
synchronized (pool.getUuid().intern()) {
    Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      String target=pool.getHost();
      String path=pool.getPath();
      if (path.endsWith(""String_Node_Str"")) {
        path=path.substring(0,path.length() - 1);
      }
      String tmp[]=path.split(""String_Node_Str"");
      if (tmp.length != 3) {
        String msg=""String_Node_Str"" + pool.getPath() + ""String_Node_Str"";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      String targetiqn=tmp[1].trim();
      String lunid=tmp[2].trim();
      String scsiid=""String_Node_Str"";
      Set<SR> srs=SR.getByNameLabel(conn,pool.getUuid());
      for (      SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (target.equals(dc.get(""String_Node_Str"")) && targetiqn.equals(dc.get(""String_Node_Str"")) && lunid.equals(dc.get(""String_Node_Str""))) {
          if (checkSR(conn,sr)) {
            return sr;
          }
          throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
        }
      }
      deviceConfig.put(""String_Node_Str"",target);
      deviceConfig.put(""String_Node_Str"",targetiqn);
      Host host=Host.getByUuid(conn,_host.uuid);
      Map<String,String> smConfig=new HashMap<String,String>();
      String type=SRType.LVMOISCSI.toString();
      String poolId=Long.toString(pool.getId());
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 catch (      XenAPIException e) {
        String errmsg=e.toString();
        if (errmsg.contains(""String_Node_Str"")) {
          String lun[]=errmsg.split(""String_Node_Str"");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            int blunindex=lun[i].indexOf(""String_Node_Str"") + 7;
            int elunindex=lun[i].indexOf(""String_Node_Str"");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              int bscsiindex=lun[i].indexOf(""String_Node_Str"") + 8;
              int escsiindex=lun[i].indexOf(""String_Node_Str"");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            String msg=""String_Node_Str"" + lunid + ""String_Node_Str""+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put(""String_Node_Str"",scsiid);
      String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf(""String_Node_Str"") != -1) {
        pooluuid=result.substring(result.indexOf(""String_Node_Str"") + 6,result.indexOf(""String_Node_Str"")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 else {
        sr=SR.introduce(conn,pooluuid,pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
        PBD.Record rec=new PBD.Record();
        rec.deviceConfig=deviceConfig;
        rec.host=host;
        rec.SR=sr;
        PBD pbd=PBD.create(conn,rec);
        pbd.plug(conn);
      }
      sr.scan(conn);
      return sr;
    }
 catch (    XenAPIException e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    Exception e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}","protected SR getIscsiSR(Connection conn,StorageFilerTO pool){
synchronized (pool.getUuid().intern()) {
    Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      String target=pool.getHost();
      String path=pool.getPath();
      if (path.endsWith(""String_Node_Str"")) {
        path=path.substring(0,path.length() - 1);
      }
      String tmp[]=path.split(""String_Node_Str"");
      if (tmp.length != 3) {
        String msg=""String_Node_Str"" + pool.getPath() + ""String_Node_Str"";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      String targetiqn=tmp[1].trim();
      String lunid=tmp[2].trim();
      String scsiid=""String_Node_Str"";
      Set<SR> srs=SR.getByNameLabel(conn,pool.getUuid());
      for (      SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (target.equals(dc.get(""String_Node_Str"")) && targetiqn.equals(dc.get(""String_Node_Str"")) && lunid.equals(dc.get(""String_Node_Str""))) {
          throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ pool.getUuid()+ ""String_Node_Str""+ _host.uuid);
        }
      }
      deviceConfig.put(""String_Node_Str"",target);
      deviceConfig.put(""String_Node_Str"",targetiqn);
      Host host=Host.getByUuid(conn,_host.uuid);
      Map<String,String> smConfig=new HashMap<String,String>();
      String type=SRType.LVMOISCSI.toString();
      String poolId=Long.toString(pool.getId());
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 catch (      XenAPIException e) {
        String errmsg=e.toString();
        if (errmsg.contains(""String_Node_Str"")) {
          String lun[]=errmsg.split(""String_Node_Str"");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            int blunindex=lun[i].indexOf(""String_Node_Str"") + 7;
            int elunindex=lun[i].indexOf(""String_Node_Str"");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              int bscsiindex=lun[i].indexOf(""String_Node_Str"") + 8;
              int escsiindex=lun[i].indexOf(""String_Node_Str"");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            String msg=""String_Node_Str"" + lunid + ""String_Node_Str""+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put(""String_Node_Str"",scsiid);
      String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf(""String_Node_Str"") != -1) {
        pooluuid=result.substring(result.indexOf(""String_Node_Str"") + 6,result.indexOf(""String_Node_Str"")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 else {
        sr=SR.introduce(conn,pooluuid,pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
        PBD.Record rec=new PBD.Record();
        rec.deviceConfig=deviceConfig;
        rec.host=host;
        rec.SR=sr;
        PBD pbd=PBD.create(conn,rec);
        pbd.plug(conn);
      }
      sr.scan(conn);
      return sr;
    }
 catch (    XenAPIException e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    Exception e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}",0.9776446678789176
107117,"@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"",HostPodVO.class,podId);
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  if (allHosts.isEmpty()) {
    return pool;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    boolean success=addPoolToHost(h.getId(),pool);
    if (success) {
      poolHosts.add(h);
    }
  }
  if (poolHosts.isEmpty()) {
    _storagePoolDao.expunge(pool.getId());
    pool=null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}","@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"" + clusterId,HostPodVO.class,podId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  if (allHosts.isEmpty()) {
    return pool;
  }
  boolean success=false;
  for (  HostVO h : allHosts) {
    success=createStoragePool(h.getId(),pool);
    if (success) {
      break;
    }
  }
  if (!success) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    return null;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    success=addPoolToHost(h.getId(),pool);
    if (success) {
      poolHosts.add(h);
    }
  }
  if (poolHosts.isEmpty()) {
    _storagePoolDao.expunge(pool.getId());
    pool=null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}",0.9554698227947428
107118,"@Override public boolean addPoolToHost(long hostId,StoragePoolVO pool){
  s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ hostId);
  if (pool.getPoolType() != StoragePoolType.NetworkFilesystem && pool.getPoolType() != StoragePoolType.Filesystem && pool.getPoolType() != StoragePoolType.IscsiLUN && pool.getPoolType() != StoragePoolType.Iscsi && pool.getPoolType() != StoragePoolType.VMFS && pool.getPoolType() != StoragePoolType.SharedMountPoint && pool.getPoolType() != StoragePoolType.PreSetup) {
    s_logger.warn(""String_Node_Str"" + pool.getPoolType());
    return true;
  }
  ModifyStoragePoolCommand cmd=new ModifyStoragePoolCommand(true,pool);
  final Answer answer=_agentMgr.easySend(hostId,cmd);
  if (answer != null) {
    if (answer.getResult() == false) {
      String msg=""String_Node_Str"" + answer.getDetails();
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,pool.getDataCenterId(),pool.getPodId(),msg,msg);
      s_logger.warn(msg);
      return false;
    }
    if (answer instanceof ModifyStoragePoolAnswer) {
      ModifyStoragePoolAnswer mspAnswer=(ModifyStoragePoolAnswer)answer;
      StoragePoolHostVO poolHost=_poolHostDao.findByPoolHost(pool.getId(),hostId);
      if (poolHost == null) {
        poolHost=new StoragePoolHostVO(pool.getId(),hostId,mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
        _poolHostDao.persist(poolHost);
      }
 else {
        poolHost.setLocalPath(mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      pool.setAvailableBytes(mspAnswer.getPoolInfo().getAvailableBytes());
      pool.setCapacityBytes(mspAnswer.getPoolInfo().getCapacityBytes());
      _storagePoolDao.update(pool.getId(),pool);
      return true;
    }
  }
 else {
    return false;
  }
  return false;
}","@Override public boolean addPoolToHost(long hostId,StoragePoolVO pool){
  s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ hostId);
  if (pool.getPoolType() != StoragePoolType.NetworkFilesystem && pool.getPoolType() != StoragePoolType.Filesystem && pool.getPoolType() != StoragePoolType.IscsiLUN && pool.getPoolType() != StoragePoolType.Iscsi && pool.getPoolType() != StoragePoolType.VMFS && pool.getPoolType() != StoragePoolType.SharedMountPoint && pool.getPoolType() != StoragePoolType.PreSetup) {
    s_logger.warn(""String_Node_Str"" + pool.getPoolType());
    return false;
  }
  ModifyStoragePoolCommand cmd=new ModifyStoragePoolCommand(true,pool);
  final Answer answer=_agentMgr.easySend(hostId,cmd);
  if (answer != null) {
    if (answer.getResult() == false) {
      String msg=""String_Node_Str"" + answer.getDetails();
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,pool.getDataCenterId(),pool.getPodId(),msg,msg);
      s_logger.warn(msg);
      return false;
    }
    if (answer instanceof ModifyStoragePoolAnswer) {
      ModifyStoragePoolAnswer mspAnswer=(ModifyStoragePoolAnswer)answer;
      StoragePoolHostVO poolHost=_poolHostDao.findByPoolHost(pool.getId(),hostId);
      if (poolHost == null) {
        poolHost=new StoragePoolHostVO(pool.getId(),hostId,mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
        _poolHostDao.persist(poolHost);
      }
 else {
        poolHost.setLocalPath(mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      pool.setAvailableBytes(mspAnswer.getPoolInfo().getAvailableBytes());
      pool.setCapacityBytes(mspAnswer.getPoolInfo().getCapacityBytes());
      _storagePoolDao.update(pool.getId(),pool);
      return true;
    }
  }
 else {
    return false;
  }
  return false;
}",0.9981065728969436
107119,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainId(domainId);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findById(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainId(domainId);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  return _offeringsDao.search(sc,searchFilter);
}",0.9969052224371372
107120,"@Override @ActionEvent(eventType=EventTypes.EVENT_VM_UPGRADE,eventDescription=""String_Node_Str"") public UserVm upgradeVirtualMachine(UpgradeVMCmd cmd){
  Long virtualMachineId=cmd.getId();
  Long serviceOfferingId=cmd.getServiceOfferingId();
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vmInstance=_vmDao.findById(virtualMachineId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + virtualMachineId);
  }
  userId=accountAndUserValidation(virtualMachineId,account,userId,vmInstance);
  ServiceOfferingVO newServiceOffering=_offeringDao.findById(serviceOfferingId);
  if (newServiceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  if (!(vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Running))) {
    s_logger.warn(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState());
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState()+ ""String_Node_Str"");
  }
  if (vmInstance.getServiceOfferingId() == newServiceOffering.getId()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
  }
  ServiceOfferingVO currentServiceOffering=_offeringDao.findById(vmInstance.getServiceOfferingId());
  if (currentServiceOffering.getUseLocalStorage() != newServiceOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ currentServiceOffering.getUseLocalStorage()+ ""String_Node_Str""+ newServiceOffering.getUseLocalStorage());
  }
  if (!_agentMgr.isVirtualMachineUpgradable(vmInstance,newServiceOffering)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newServiceOffering.getCpu() + ""String_Node_Str""+ newServiceOffering.getSpeed()+ ""String_Node_Str""+ newServiceOffering.getRamSize()+ ""String_Node_Str"");
  }
  List<String> currentTags=_configMgr.csvTagsToList(currentServiceOffering.getTags());
  List<String> newTags=_configMgr.csvTagsToList(newServiceOffering.getTags());
  if (!newTags.containsAll(currentTags)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + currentTags + ""String_Node_Str""+ ""String_Node_Str""+ newTags);
  }
  UserVmVO vmForUpdate=_vmDao.createForUpdate();
  vmForUpdate.setServiceOfferingId(serviceOfferingId);
  vmForUpdate.setHaEnabled(_serviceOfferingDao.findById(serviceOfferingId).getOfferHA());
  _vmDao.update(vmInstance.getId(),vmForUpdate);
  return _vmDao.findById(vmInstance.getId());
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VM_UPGRADE,eventDescription=""String_Node_Str"") public UserVm upgradeVirtualMachine(UpgradeVMCmd cmd){
  Long virtualMachineId=cmd.getId();
  Long serviceOfferingId=cmd.getServiceOfferingId();
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vmInstance=_vmDao.findById(virtualMachineId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + virtualMachineId);
  }
  userId=accountAndUserValidation(virtualMachineId,account,userId,vmInstance);
  ServiceOfferingVO newServiceOffering=_offeringDao.findById(serviceOfferingId);
  if (newServiceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  if (!(vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Running))) {
    s_logger.warn(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState());
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState()+ ""String_Node_Str"");
  }
  if (vmInstance.getServiceOfferingId() == newServiceOffering.getId()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
  }
  ServiceOfferingVO currentServiceOffering=_offeringDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
  if (currentServiceOffering.getUseLocalStorage() != newServiceOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ currentServiceOffering.getUseLocalStorage()+ ""String_Node_Str""+ newServiceOffering.getUseLocalStorage());
  }
  if (!_agentMgr.isVirtualMachineUpgradable(vmInstance,newServiceOffering)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newServiceOffering.getCpu() + ""String_Node_Str""+ newServiceOffering.getSpeed()+ ""String_Node_Str""+ newServiceOffering.getRamSize()+ ""String_Node_Str"");
  }
  List<String> currentTags=_configMgr.csvTagsToList(currentServiceOffering.getTags());
  List<String> newTags=_configMgr.csvTagsToList(newServiceOffering.getTags());
  if (!newTags.containsAll(currentTags)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + currentTags + ""String_Node_Str""+ ""String_Node_Str""+ newTags);
  }
  UserVmVO vmForUpdate=_vmDao.createForUpdate();
  vmForUpdate.setServiceOfferingId(serviceOfferingId);
  vmForUpdate.setHaEnabled(_serviceOfferingDao.findById(serviceOfferingId).getOfferHA());
  _vmDao.update(vmInstance.getId(),vmForUpdate);
  return _vmDao.findById(vmInstance.getId());
}",0.9972908906197088
107121,"public static ObjectName registerMBean(String objTypeName,String objInstanceName,Object mbean) throws MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  String name=""String_Node_Str"" + objTypeName;
  if (objInstanceName != null && !objInstanceName.isEmpty())   name+=""String_Node_Str"" + objInstanceName;
  ObjectName objectName=new ObjectName(name);
  ArrayList<MBeanServer> server=MBeanServerFactory.findMBeanServer(null);
  if (server.size() > 0) {
    MBeanServer mBeanServer=server.get(0);
    mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
 else {
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
}","public static ObjectName registerMBean(String objTypeName,String objInstanceName,Object mbean) throws MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  String name=""String_Node_Str"" + objTypeName;
  if (objInstanceName != null && !objInstanceName.isEmpty())   name+=""String_Node_Str"" + objInstanceName;
  ObjectName objectName=new ObjectName(name);
  ArrayList<MBeanServer> server=MBeanServerFactory.findMBeanServer(null);
  if (server.size() > 0) {
    MBeanServer mBeanServer=server.get(0);
    if (!mBeanServer.isRegistered(objectName))     mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
 else {
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    if (!mBeanServer.isRegistered(objectName))     mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
}",0.9443127962085308
107122,"@Override @DB public boolean deleteZone(DeleteZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  Long zoneId=cmd.getId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  checkIfZoneIsDeletable(zoneId);
  boolean success=_zoneDao.expunge(zoneId);
  try {
    _zoneDao.deleteVnet(zoneId);
    List<NetworkVO> networks=_networkDao.listByZone(zoneId);
    if (networks != null && !networks.isEmpty()) {
      for (      NetworkVO network : networks) {
        _networkDao.remove(network.getId());
      }
    }
    List<VlanVO> vlans=_vlanDao.listByZone(zoneId);
    for (    VlanVO vlan : vlans) {
      _vlanDao.remove(vlan.getId());
    }
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"" + zoneId);
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
  }
  if (success) {
    return true;
  }
 else {
    return false;
  }
}","@Override @DB public boolean deleteZone(DeleteZoneCmd cmd){
  Transaction txn=Transaction.currentTxn();
  boolean success=false;
  Long userId=UserContext.current().getCallerUserId();
  Long zoneId=cmd.getId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  checkIfZoneIsDeletable(zoneId);
  txn.start();
  _zoneDao.deleteVnet(zoneId);
  List<VlanVO> vlans=_vlanDao.listByZone(zoneId);
  for (  VlanVO vlan : vlans) {
    _vlanDao.remove(vlan.getId());
  }
  List<NetworkVO> networks=_networkDao.listByZoneIncludingRemoved(zoneId);
  if (networks != null && !networks.isEmpty()) {
    for (    NetworkVO network : networks) {
      _networkDao.expunge(network.getId());
    }
  }
  success=_zoneDao.expunge(zoneId);
  txn.commit();
  return success;
}",0.5607476635514018
107123,"@Override public boolean deleteVlanIpRange(DeleteVlanIpRangeCmd cmd) throws InvalidParameterValueException {
  Long vlanDbId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return deleteVlanAndPublicIpRange(userId,vlanDbId);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VLAN_IP_RANGE_DELETE,eventDescription=""String_Node_Str"",async=false) public boolean deleteVlanIpRange(DeleteVlanIpRangeCmd cmd) throws InvalidParameterValueException {
  Long vlanDbId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return deleteVlanAndPublicIpRange(userId,vlanDbId);
}",0.8923988153998026
107124,"@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    List<NetworkVO> networks=_networkDao.listByOwner(owner.getId());
    NetworkVO guestVirtualNetwork=null;
    for (    NetworkVO network : networks) {
      if (!network.isShared() && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Virtual) {
        guestVirtualNetwork=network;
        break;
      }
    }
    if (guestVirtualNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + owner.getId() + ""String_Node_Str"");
    }
    networkList.add(guestVirtualNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,caller,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller);
}","@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    List<NetworkVO> networks=_networkDao.listByOwner(owner.getId());
    NetworkVO guestVirtualNetwork=null;
    for (    NetworkVO network : networks) {
      if (!network.isShared() && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Virtual) {
        guestVirtualNetwork=network;
        break;
      }
    }
    if (guestVirtualNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + owner.getId() + ""String_Node_Str"");
    }
    networkList.add(guestVirtualNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller);
}",0.9986809873751648
107125,"@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  NetworkVO defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(defaultNetwork);
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,caller,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller);
}","@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  NetworkVO defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(defaultNetwork);
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller);
}",0.9967845659163987
107126,"private void checkConflicts() throws ConfigurationException {
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> peers=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  for (  ManagementServerHostVO peer : peers) {
    if (_mshostId == peer.getMsid()) {
      continue;
    }
    if (_clusterNodeIP.equals(peer.getServiceIP().trim())) {
      if (""String_Node_Str"".equals(_clusterNodeIP)) {
        throw new ConfigurationException(""String_Node_Str"");
      }
 else {
        if (!pingManagementNode(peer.getId())) {
          throw new ConfigurationException(""String_Node_Str"" + peer.getServiceIP() + ""String_Node_Str"");
        }
      }
    }
  }
}","private void checkConflicts() throws ConfigurationException {
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> peers=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  for (  ManagementServerHostVO peer : peers) {
    String peerIP=peer.getServiceIP().trim();
    if (_clusterNodeIP.equals(peerIP)) {
      if (""String_Node_Str"".equals(_clusterNodeIP)) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new ConfigurationException(msg);
      }
 else {
        if (!pingManagementNode(peer.getMsid())) {
          String msg=""String_Node_Str"" + peer.getServiceIP() + ""String_Node_Str"";
          s_logger.error(msg);
          throw new ConfigurationException(msg);
        }
      }
    }
  }
}",0.6247464503042597
107127,"@Override public String getSelfPeerName(){
  return Long.toString(_id);
}","@Override public String getSelfPeerName(){
  return Long.toString(_msid);
}",0.9864864864864864
107128,"private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      if (!isIdInList(entry.getKey(),currentList)) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
    }
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost.getId())) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
  }
  if (newNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeJoined(newNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
  if (removedNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeLeft(removedNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
}","private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      if (!isIdInList(entry.getKey(),currentList)) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
    }
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost.getMsid())) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
  }
  if (newNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeJoined(newNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
  if (removedNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeLeft(removedNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
}",0.9993098688750862
107129,"@Override @DB public boolean start(){
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _id);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    final Class<?> c=this.getClass();
    String version=c.getPackage().getImplementationVersion();
    ManagementServerHostVO mshost=_mshostDao.findByMsid(_id);
    if (mshost == null) {
      mshost=new ManagementServerHostVO();
      mshost.setMsid(_id);
      mshost.setName(NetUtils.getHostName());
      mshost.setVersion(version);
      mshost.setServiceIP(_clusterNodeIP);
      mshost.setServicePort(_currentServiceAdapter.getServicePort());
      mshost.setLastUpdateTime(DateUtil.currentGMTTime());
      mshost.setRemoved(null);
      mshost.setAlertCount(0);
      _mshostDao.persist(mshost);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _id + ""String_Node_Str"");
      }
    }
 else {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _id + ""String_Node_Str"");
      }
      _mshostDao.update(mshost.getId(),NetUtils.getHostName(),version,_clusterNodeIP,_currentServiceAdapter.getServicePort(),DateUtil.currentGMTTime());
    }
    txn.commit();
    _mshostId=mshost.getId();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + _mshostId + ""String_Node_Str""+ _clusterNodeIP+ ""String_Node_Str""+ _currentServiceAdapter.getServicePort());
    }
    _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
    _peerScanScheduler.scheduleAtFixedRate(getPeerScanTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}","@Override @DB public boolean start(){
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _msid);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    final Class<?> c=this.getClass();
    String version=c.getPackage().getImplementationVersion();
    ManagementServerHostVO mshost=_mshostDao.findByMsid(_msid);
    if (mshost == null) {
      mshost=new ManagementServerHostVO();
      mshost.setMsid(_msid);
      mshost.setName(NetUtils.getHostName());
      mshost.setVersion(version);
      mshost.setServiceIP(_clusterNodeIP);
      mshost.setServicePort(_currentServiceAdapter.getServicePort());
      mshost.setLastUpdateTime(DateUtil.currentGMTTime());
      mshost.setRemoved(null);
      mshost.setAlertCount(0);
      _mshostDao.persist(mshost);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _msid + ""String_Node_Str"");
      }
    }
 else {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _msid + ""String_Node_Str"");
      }
      _mshostDao.update(mshost.getId(),NetUtils.getHostName(),version,_clusterNodeIP,_currentServiceAdapter.getServicePort(),DateUtil.currentGMTTime());
    }
    txn.commit();
    _mshostId=mshost.getId();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + _mshostId + ""String_Node_Str""+ _clusterNodeIP+ ""String_Node_Str""+ _currentServiceAdapter.getServicePort());
    }
    _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
    _peerScanScheduler.scheduleAtFixedRate(getPeerScanTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}",0.9974025974025974
107130,"@Override public long getManagementNodeId(){
  return _id;
}","@Override public long getManagementNodeId(){
  return _msid;
}",0.9836065573770492
107131,"@Override public boolean pingManagementNode(long msid){
  ManagementServerHostVO mshost=_mshostDao.findById(msid);
  if (mshost == null)   return false;
  String targetIp=mshost.getServiceIP();
  if (""String_Node_Str"".equals(targetIp) || ""String_Node_Str"".equals(targetIp)) {
    s_logger.info(""String_Node_Str"");
    return false;
  }
  String targetPeer=String.valueOf(msid);
  ClusterService peerService=null;
  for (int i=0; i < 2; i++) {
    try {
      peerService=getPeerService(targetPeer);
    }
 catch (    RemoteException e) {
      s_logger.error(""String_Node_Str"" + targetPeer + ""String_Node_Str"");
    }
    if (peerService != null) {
      try {
        return peerService.ping(getSelfPeerName());
      }
 catch (      RemoteException e) {
        s_logger.warn(""String_Node_Str"",e);
        invalidatePeerService(targetPeer);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"" + msid + ""String_Node_Str"");
    }
  }
  return false;
}","@Override public boolean pingManagementNode(long msid){
  ManagementServerHostVO mshost=_mshostDao.findByMsid(msid);
  if (mshost == null)   return false;
  String targetIp=mshost.getServiceIP();
  if (""String_Node_Str"".equals(targetIp) || ""String_Node_Str"".equals(targetIp)) {
    s_logger.info(""String_Node_Str"");
    return false;
  }
  String targetPeer=String.valueOf(msid);
  ClusterService peerService=null;
  for (int i=0; i < 2; i++) {
    try {
      peerService=getPeerService(targetPeer);
    }
 catch (    RemoteException e) {
      s_logger.error(""String_Node_Str"" + targetPeer + ""String_Node_Str"");
    }
    if (peerService != null) {
      try {
        return peerService.ping(getSelfPeerName());
      }
 catch (      RemoteException e) {
        s_logger.warn(""String_Node_Str"",e);
        invalidatePeerService(targetPeer);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"" + msid + ""String_Node_Str"");
    }
  }
  return false;
}",0.9979166666666668
107132,"@Override public ClusterService getPeerService(String strPeer) throws RemoteException {
  String serviceUrl=getServiceEndpointName(strPeer);
  return new ClusterServiceServletImpl(serviceUrl);
}","@Override public ClusterService getPeerService(String strPeer) throws RemoteException {
  String serviceUrl=getServiceEndpointName(strPeer);
  if (serviceUrl == null)   return null;
  return new ClusterServiceServletImpl(serviceUrl);
}",0.9044289044289044
107133,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}",0.9903237367100703
107134,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    VMTemplateVO templateInPool=_templateDao.findById(templatePoolVO.getTemplateId());
    if ((template != null) && !tmpinstalled && (templateInPool.getId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}",0.8784801051499582
107135,"protected ClusterDaoImpl(){
  super();
  HyTypeWithoutGuidSearch=createSearchBuilder();
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getGuid(),SearchCriteria.Op.NULL);
  HyTypeWithoutGuidSearch.done();
  ZoneHyTypeSearch=createSearchBuilder();
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.done();
  PodSearch=createSearchBuilder();
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getName(),SearchCriteria.Op.EQ);
  PodSearch.done();
  ZoneSearch=createSearchBuilder();
  ZoneSearch.and(""String_Node_Str"",ZoneSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  ZoneSearch.done();
  AvailHyperSearch=createSearchBuilder();
  AvailHyperSearch.and(""String_Node_Str"",AvailHyperSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AvailHyperSearch.groupBy(AvailHyperSearch.entity().getHypervisorType());
  AvailHyperSearch.done();
}","protected ClusterDaoImpl(){
  super();
  HyTypeWithoutGuidSearch=createSearchBuilder();
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getGuid(),SearchCriteria.Op.NULL);
  HyTypeWithoutGuidSearch.done();
  ZoneHyTypeSearch=createSearchBuilder();
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.done();
  PodSearch=createSearchBuilder();
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getName(),SearchCriteria.Op.EQ);
  PodSearch.done();
  ZoneSearch=createSearchBuilder();
  ZoneSearch.and(""String_Node_Str"",ZoneSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZoneSearch.done();
  AvailHyperSearch=createSearchBuilder();
  AvailHyperSearch.and(""String_Node_Str"",AvailHyperSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AvailHyperSearch.groupBy(AvailHyperSearch.entity().getHypervisorType());
  AvailHyperSearch.done();
}",0.9948919449901767
107136,"@Override public String[] getHypervisors(ListHypervisorsCmd cmd){
  Long zoneId=cmd.getZoneId();
  if (zoneId == null) {
    String hypers=_configDao.getValue(Config.HypervisorList.key());
    if (hypers == ""String_Node_Str"" || hypers == null) {
      return null;
    }
    return hypers.split(""String_Node_Str"");
  }
 else {
    String[] result=null;
    List<ClusterVO> clustersForZone=_clusterDao.listByZoneId(zoneId);
    if (clustersForZone != null && clustersForZone.size() > 0) {
      result=new String[clustersForZone.size()];
      int i=0;
      for (      ClusterVO cluster : clustersForZone) {
        result[i++]=cluster.getHypervisorType().toString();
      }
    }
    return result;
  }
}","@Override public String[] getHypervisors(ListHypervisorsCmd cmd){
  Long zoneId=cmd.getZoneId();
  if (zoneId == null) {
    String hypers=_configDao.getValue(Config.HypervisorList.key());
    if (hypers == ""String_Node_Str"" || hypers == null) {
      return null;
    }
    return hypers.split(""String_Node_Str"");
  }
 else {
    int i=0;
    List<ClusterVO> clustersForZone=_clusterDao.listByZoneId(zoneId);
    if (clustersForZone != null && clustersForZone.size() > 0) {
      Set<String> result=new HashSet<String>();
      for (      ClusterVO cluster : clustersForZone) {
        result.add(cluster.getHypervisorType().toString());
      }
      String[] resultArray=new String[result.size()];
      for (      String entity : result) {
        resultArray[i++]=entity;
      }
      return resultArray;
    }
  }
  return null;
}",0.7569669475048607
107137,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteNetwork(long networkId){
  int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Account owner=_accountMgr.getAccount(network.getAccountId());
  if (!_accountMgr.isAdmin(caller.getType())) {
    if (network.getAccountId() != caller.getId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str""+ networkId+ ""String_Node_Str"");
    }
  }
 else {
    _accountMgr.checkAccess(caller,owner);
  }
  List<UserVmVO> userVms=_vmDao.listByNetworkId(networkId);
  for (  UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Error || (vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null))) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  User callerUser=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,owner);
  return deleteNetworkInternal(networkId,context);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteNetwork(long networkId){
  Account caller=UserContext.current().getCaller();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Account owner=_accountMgr.getAccount(network.getAccountId());
  if (!_accountMgr.isAdmin(caller.getType())) {
    if (network.getAccountId() != caller.getId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str""+ networkId+ ""String_Node_Str"");
    }
  }
 else {
    _accountMgr.checkAccess(caller,owner);
  }
  User callerUser=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,owner);
  return destroyNetwork(networkId,context);
}",0.7858037578288101
107138,"@Override @DB public boolean destroyNetwork(long networkId,ReservationContext context){
  Account callerAccount=_accountMgr.getAccount(context.getCaller().getAccountId());
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return false;
  }
  shutdownNetwork(networkId,context);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug(""String_Node_Str"" + network.getState());
    return false;
  }
  boolean success=true;
  cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId());
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.destroy(network);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Account owner=_accountMgr.getAccount(network.getAccountId());
    Transaction txn=Transaction.currentTxn();
    txn.start();
    guru.trash(network,_networkOfferingDao.findById(network.getNetworkOfferingId()),owner);
    if (!deleteVlansInNetwork(network.getId(),context.getCaller().getId())) {
      success=false;
      s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"");
    }
 else {
      network.setState(Network.State.Destroy);
      _networksDao.update(network.getId(),network);
      _networksDao.remove(network.getId());
      txn.commit();
    }
  }
  return success;
}","@Override @DB public boolean destroyNetwork(long networkId,ReservationContext context){
  Account callerAccount=_accountMgr.getAccount(context.getCaller().getAccountId());
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return false;
  }
  int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    return false;
  }
  List<UserVmVO> userVms=_vmDao.listByNetworkId(networkId);
  for (  UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Error || (vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null))) {
      s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
      return false;
    }
  }
  shutdownNetwork(networkId,context);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug(""String_Node_Str"" + network.getState());
    return false;
  }
  boolean success=true;
  cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId());
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.destroy(network);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Account owner=_accountMgr.getAccount(network.getAccountId());
    Transaction txn=Transaction.currentTxn();
    txn.start();
    guru.trash(network,_networkOfferingDao.findById(network.getNetworkOfferingId()),owner);
    if (!deleteVlansInNetwork(network.getId(),context.getCaller().getId())) {
      success=false;
      s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"");
    }
 else {
      network.setState(Network.State.Destroy);
      _networksDao.update(network.getId(),network);
      _networksDao.remove(network.getId());
      txn.commit();
    }
  }
  return success;
}",0.8874625588361147
107139,"@Override public boolean applyFirewallRules(Network network,List<? extends FirewallRule> rules) throws ResourceUnavailableException {
  DomainRouterVO router=_routerDao.findByNetwork(network.getId());
  if (router == null) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  if (router.getState() == State.Running) {
    if (rules != null && !rules.isEmpty()) {
      if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {
        List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(network.getId());
        List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
        for (        LoadBalancerVO lb : lbs) {
          List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
          LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
          lbRules.add(loadBalancing);
        }
        return applyLBRules(router,lbRules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.PortForwarding) {
        return applyPortForwardingRules(router,(List<PortForwardingRule>)rules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.StaticNat) {
        return applyStaticNatRules(router,(List<StaticNatRule>)rules);
      }
 else {
        s_logger.warn(""String_Node_Str"" + rules.get(0).getPurpose());
        return false;
      }
    }
 else {
      return true;
    }
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getState() + ""String_Node_Str"");
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + router.getState());
    throw new CloudRuntimeException(""String_Node_Str"" + router.getState());
  }
}","@Override public boolean applyFirewallRules(Network network,List<? extends FirewallRule> rules) throws ResourceUnavailableException {
  DomainRouterVO router=_routerDao.findByNetwork(network.getId());
  if (router == null) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  if (router.getState() == State.Running) {
    if (rules != null && !rules.isEmpty()) {
      if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {
        List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(network.getId());
        List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
        for (        LoadBalancerVO lb : lbs) {
          List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
          LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
          lbRules.add(loadBalancing);
        }
        return applyLBRules(router,lbRules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.PortForwarding) {
        return applyPortForwardingRules(router,(List<PortForwardingRule>)rules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.StaticNat) {
        return applyStaticNatRules(router,(List<StaticNatRule>)rules);
      }
 else {
        s_logger.warn(""String_Node_Str"" + rules.get(0).getPurpose());
        return false;
      }
    }
 else {
      return true;
    }
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getState() + ""String_Node_Str"");
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + router.getState());
    throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
  }
}",0.977961432506887
107140,"@Override public boolean revokePortForwardingRulesForVm(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    applyPortForwardingRules(ipId,true,_accountMgr.getSystemAccount());
  }
  return true;
}","@Override public boolean revokePortForwardingRulesForVm(long vmId){
  boolean success=true;
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    if (!applyPortForwardingRules(ipId,true,_accountMgr.getSystemAccount())) {
      s_logger.warn(""String_Node_Str"" + ipId);
      success=false;
    }
  }
  return success;
}",0.9192982456140352
107141,"@Override public boolean revokeStaticNatRulesForVm(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<FirewallRuleVO> rules=_firewallDao.listStaticNatByVmId(vm.getId());
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  FirewallRuleVO rule : rules) {
    revokeStaticNatRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    applyStaticNatRules(ipId,true,_accountMgr.getSystemAccount());
  }
  return true;
}","@Override public boolean revokeStaticNatRulesForVm(long vmId){
  boolean success=true;
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<FirewallRuleVO> rules=_firewallDao.listStaticNatByVmId(vm.getId());
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  FirewallRuleVO rule : rules) {
    revokeStaticNatRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    if (!applyStaticNatRules(ipId,true,_accountMgr.getSystemAccount())) {
      success=false;
      s_logger.warn(""String_Node_Str"" + ipId);
    }
  }
  return success;
}",0.9181494661921707
107142,"boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException ;","boolean cleanupAccount(AccountVO account,long callerUserId,Account caller);",0.6912442396313364
107143,"@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str"",e);
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
      _usageEventDao.persist(usageEvent);
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        _storageMgr.destroyVolume(volume);
        if (volume.getPoolId() != null) {
          UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
          _usageEventDao.persist(usageEvent);
        }
      }
    }
    List<RemoteAccessVpnVO> remoteAccessVpns=_remoteAccessVpnDao.findByAccount(accountId);
    List<VpnUserVO> vpnUsers=_vpnUser.listByAccount(accountId);
    for (    VpnUserVO vpnUser : vpnUsers) {
      _remoteAccessVpnMgr.removeVpnUser(accountId,vpnUser.getUsername());
    }
    for (    RemoteAccessVpnVO vpn : remoteAccessVpns) {
      _remoteAccessVpnMgr.destroyRemoteAccessVpn(vpn.getServerAddressId());
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        ReservationContext context=new ReservationContextImpl(null,null,getActiveUser(callerUserId),account);
        if (!_networkMgr.deleteNetworkInternal(network.getId(),context)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}","@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller){
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str"",e);
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
      _usageEventDao.persist(usageEvent);
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        try {
          _storageMgr.destroyVolume(volume);
          if (volume.getPoolId() != null) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException ex) {
          s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str"",ex);
          accountCleanupNeeded=true;
        }
      }
    }
    List<RemoteAccessVpnVO> remoteAccessVpns=_remoteAccessVpnDao.findByAccount(accountId);
    List<VpnUserVO> vpnUsers=_vpnUser.listByAccount(accountId);
    for (    VpnUserVO vpnUser : vpnUsers) {
      _remoteAccessVpnMgr.removeVpnUser(accountId,vpnUser.getUsername());
    }
    try {
      for (      RemoteAccessVpnVO vpn : remoteAccessVpns) {
        _remoteAccessVpnMgr.destroyRemoteAccessVpn(vpn.getServerAddressId());
      }
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str"",ex);
      accountCleanupNeeded=true;
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        ReservationContext context=new ReservationContextImpl(null,null,getActiveUser(callerUserId),account);
        if (!_networkMgr.destroyNetwork(network.getId(),context)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}",0.9449035812672176
107144,"@Override public boolean deleteAccount(AccountVO account,long callerUserId,Account caller){
  long accountId=account.getId();
  try {
    if (!_accountDao.remove(accountId)) {
      s_logger.error(""String_Node_Str"" + accountId);
      return false;
    }
    List<UserVO> users=_userDao.listByAccount(accountId);
    for (    UserVO user : users) {
      _userDao.remove(user.getId());
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId);
    }
    cleanupAccount(account,callerUserId,caller);
    return true;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + accountId,e);
    return false;
  }
}","@Override public boolean deleteAccount(AccountVO account,long callerUserId,Account caller){
  long accountId=account.getId();
  if (!_accountDao.remove(accountId)) {
    s_logger.error(""String_Node_Str"" + accountId);
    return false;
  }
  List<UserVO> users=_userDao.listByAccount(accountId);
  for (  UserVO user : users) {
    _userDao.remove(user.getId());
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + accountId);
  }
  return cleanupAccount(account,callerUserId,caller);
}",0.8034188034188035
107145,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _host.uuid=(String)params.get(""String_Node_Str"");
  try {
    _dcId=Long.parseLong((String)params.get(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(""String_Node_Str"" + params.get(""String_Node_Str""));
  }
  _name=_host.uuid;
  _host.ip=(String)params.get(""String_Node_Str"");
  _host.pool=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _privateNetworkName=(String)params.get(""String_Node_Str"");
  _publicNetworkName=(String)params.get(""String_Node_Str"");
  _guestNetworkName=(String)params.get(""String_Node_Str"");
  _linkLocalPrivateNetworkName=(String)params.get(""String_Node_Str"");
  if (_linkLocalPrivateNetworkName == null) {
    _linkLocalPrivateNetworkName=""String_Node_Str"";
  }
  _storageNetworkName1=(String)params.get(""String_Node_Str"");
  _storageNetworkName2=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  _wait=NumbersUtil.parseInt(value,600);
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_username == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_password == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _host.uuid=(String)params.get(""String_Node_Str"");
  try {
    _dcId=Long.parseLong((String)params.get(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(""String_Node_Str"" + params.get(""String_Node_Str""));
  }
  _name=_host.uuid;
  _host.ip=(String)params.get(""String_Node_Str"");
  _host.pool=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _privateNetworkName=(String)params.get(""String_Node_Str"");
  _publicNetworkName=(String)params.get(""String_Node_Str"");
  _guestNetworkName=(String)params.get(""String_Node_Str"");
  _instance=(String)params.get(""String_Node_Str"");
  _linkLocalPrivateNetworkName=(String)params.get(""String_Node_Str"");
  if (_linkLocalPrivateNetworkName == null) {
    _linkLocalPrivateNetworkName=""String_Node_Str"";
  }
  _storageNetworkName1=(String)params.get(""String_Node_Str"");
  _storageNetworkName2=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  _wait=NumbersUtil.parseInt(value,600);
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_username == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_password == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  return true;
}",0.9853993701689092
107146,"private boolean default_network_rules_for_systemvm(Connect conn,String vmName){
  if (!_can_bridge_firewall) {
    return false;
  }
  List<InterfaceDef> intfs=getInterfaces(conn,vmName);
  if (intfs.size() < 1) {
    return false;
  }
  InterfaceDef intf=intfs.get(intfs.size() - 1);
  String brname=intf.getBrName();
  Script cmd=new Script(_securityGroupPath,_timeout,s_logger);
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"",vmName);
  cmd.add(""String_Node_Str"",brname);
  String result=cmd.execute();
  if (result != null) {
    return false;
  }
  return true;
}","private boolean default_network_rules_for_systemvm(Connect conn,String vmName){
  if (!_can_bridge_firewall) {
    return false;
  }
  List<InterfaceDef> intfs=getInterfaces(conn,vmName);
  if (intfs.size() < 1) {
    return false;
  }
  String brname=null;
  if (vmName.startsWith(""String_Node_Str"")) {
    InterfaceDef intf=intfs.get(0);
    brname=intf.getBrName();
  }
 else {
    InterfaceDef intf=intfs.get(intfs.size() - 1);
    brname=intf.getBrName();
  }
  Script cmd=new Script(_securityGroupPath,_timeout,s_logger);
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"",vmName);
  cmd.add(""String_Node_Str"",brname);
  String result=cmd.execute();
  if (result != null) {
    return false;
  }
  return true;
}",0.8788343558282209
107147,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  State state=State.Allocated;
  if (offering.isSystemOnly()) {
    state=State.Setup;
  }
  NetworkVO config=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),state);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    config.setSecurityGroupEnabled(userSpecified.isSecurityGroupEnabled());
    if (userSpecified.getCidr() != null) {
      config.setCidr(userSpecified.getCidr());
      config.setGateway(userSpecified.getGateway());
    }
    if (userSpecified.getBroadcastUri() != null) {
      config.setBroadcastUri(userSpecified.getBroadcastUri());
      config.setState(State.Setup);
    }
    if (userSpecified.getBroadcastDomainType() != null) {
      config.setBroadcastDomainType(userSpecified.getBroadcastDomainType());
    }
  }
  return config;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  State state=State.Allocated;
  if (offering.isSystemOnly()) {
    state=State.Setup;
  }
  NetworkVO config=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),state);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    config.setSecurityGroupEnabled(userSpecified.isSecurityGroupEnabled());
    if (userSpecified.getCidr() != null) {
      config.setCidr(userSpecified.getCidr());
      config.setGateway(userSpecified.getGateway());
    }
    if (userSpecified.getBroadcastUri() != null) {
      config.setBroadcastUri(userSpecified.getBroadcastUri());
      config.setState(State.Setup);
    }
    if (userSpecified.getBroadcastDomainType() != null) {
      config.setBroadcastDomainType(userSpecified.getBroadcastDomainType());
    }
  }
  if (config.isSecurityGroupEnabled()) {
    config.setName(""String_Node_Str"");
    config.setDisplayText(""String_Node_Str"");
  }
  return config;
}",0.9423929098966026
107148,"protected void handleVmMigrated(VMInstanceVO vm){
  if (vm.getType() == VirtualMachine.Type.User)   return;
  NetworkRulesSystemVmCommand nrc=new NetworkRulesSystemVmCommand(vm.getInstanceName(),vm.getType());
  Commands cmds=new Commands(nrc);
  try {
    _agentMgr.send(vm.getHostId(),cmds);
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(e.toString());
  }
}","protected void handleVmMigrated(VMInstanceVO vm){
  if (vm.getType() == VirtualMachine.Type.User || !isVmSecurityGroupEnabled(vm.getId()))   return;
  NetworkRulesSystemVmCommand nrc=new NetworkRulesSystemVmCommand(vm.getInstanceName(),vm.getType());
  Commands cmds=new Commands(nrc);
  try {
    _agentMgr.send(vm.getHostId(),cmds);
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(e.toString());
  }
}",0.9570680628272252
107149,"private static String getResetResultMessage(){
  ExceptionResponse resultObject=new ExceptionResponse();
  resultObject.setErrorCode(BaseCmd.INTERNAL_ERROR);
  resultObject.setErrorText(""String_Node_Str"");
  return ApiSerializerHelper.toSerializedStringOld(resultObject);
}","private static String getResetResultMessage(String messageText){
  ExceptionResponse resultObject=new ExceptionResponse();
  resultObject.setErrorCode(BaseCmd.INTERNAL_ERROR);
  resultObject.setErrorText(messageText);
  return ApiSerializerHelper.toSerializedStringOld(resultObject);
}",0.9175627240143368
107150,"@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getResetResultMessage());
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}","@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}",0.9874538745387452
107151,"private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))         completeAsyncJob(item.getContentId(),2,0,""String_Node_Str"");
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}","private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))         completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}",0.9878627968337732
107152,"private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled())       s_logger.info(""String_Node_Str"" + item.toString());
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,""String_Node_Str"");
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}","private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled())       s_logger.info(""String_Node_Str"" + item.toString());
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,getResetResultMessage(""String_Node_Str""));
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}",0.9819324430479184
107153,"@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))             completeAsyncJob(item.getContentId(),2,0,""String_Node_Str"");
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}","@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))             completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}",0.992330776925642
107154,"@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getResetResultMessage());
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}","@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}",0.986212489862125
107155,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile){
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile){
  NicProfile managementNic=null;
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Management) {
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}",0.5695732838589982
107156,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  return true;
}",0.855
107157,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}",0.9620882535736482
107158,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  DomainRouterVO router=profile.getVirtualMachine();
  NetworkVO network=_networkDao.findById(router.getNetworkId());
  String type=null;
  String dhcpRange=null;
  DataCenter dc=dest.getDataCenter();
  if (dc.getNetworkType() == NetworkType.Advanced) {
    String cidr=network.getCidr();
    if (cidr != null) {
      dhcpRange=NetUtils.getDhcpRange(cidr);
    }
  }
  if (router.getRole() == Role.DHCP_USERDATA) {
    type=""String_Node_Str"";
  }
 else {
    type=""String_Node_Str"";
  }
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"" + type);
  buf.append(""String_Node_Str"").append(profile.getHostName());
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
      if (dc.getNetworkType() == NetworkType.Basic) {
        long cidrSize=NetUtils.getCidrSize(nic.getNetmask());
        String cidr=NetUtils.getCidrSubNet(nic.getGateway(),cidrSize);
        if (cidr != null) {
          dhcpRange=NetUtils.getIpRangeStartIpFromCidr(cidr,cidrSize);
        }
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info(""String_Node_Str"" + dest.getPod().getCidrAddress() + ""String_Node_Str""+ dest.getPod().getCidrSize()+ ""String_Node_Str""+ dest.getPod().getGateway()+ ""String_Node_Str""+ _mgmt_host);
        }
        if (!NetUtils.sameSubnetCIDR(_mgmt_host,dest.getPod().getGateway(),dest.getPod().getCidrSize())) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
          buf.append(""String_Node_Str"").append(_mgmt_host);
          buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
        }
 else {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
        }
      }
      controlNic=nic;
    }
  }
  if (dhcpRange != null) {
    buf.append(""String_Node_Str"" + dhcpRange);
  }
  String domain=network.getNetworkDomain();
  if (domain != null) {
    buf.append(""String_Node_Str"" + domain);
  }
  if (!network.isDefault() && network.getGuestType() == GuestIpType.Direct) {
    buf.append(""String_Node_Str"");
  }
 else {
    buf.append(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ buf.toString());
  }
  if (controlNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  DomainRouterVO router=profile.getVirtualMachine();
  NetworkVO network=_networkDao.findById(router.getNetworkId());
  String type=null;
  String dhcpRange=null;
  DataCenter dc=dest.getDataCenter();
  if (dc.getNetworkType() == NetworkType.Advanced) {
    String cidr=network.getCidr();
    if (cidr != null) {
      dhcpRange=NetUtils.getDhcpRange(cidr);
    }
  }
  if (router.getRole() == Role.DHCP_USERDATA) {
    type=""String_Node_Str"";
  }
 else {
    type=""String_Node_Str"";
  }
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"" + type);
  buf.append(""String_Node_Str"").append(profile.getHostName());
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
      if (dc.getNetworkType() == NetworkType.Basic) {
        long cidrSize=NetUtils.getCidrSize(nic.getNetmask());
        String cidr=NetUtils.getCidrSubNet(nic.getGateway(),cidrSize);
        if (cidr != null) {
          dhcpRange=NetUtils.getIpRangeStartIpFromCidr(cidr,cidrSize);
        }
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info(""String_Node_Str"" + dest.getPod().getCidrAddress() + ""String_Node_Str""+ dest.getPod().getCidrSize()+ ""String_Node_Str""+ dest.getPod().getGateway()+ ""String_Node_Str""+ _mgmt_host);
        }
        if (!NetUtils.sameSubnetCIDR(_mgmt_host,dest.getPod().getGateway(),dest.getPod().getCidrSize())) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
          buf.append(""String_Node_Str"").append(_mgmt_host);
          buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
        }
 else {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
        }
      }
      controlNic=nic;
    }
  }
  if (dhcpRange != null) {
    buf.append(""String_Node_Str"" + dhcpRange);
  }
  String domain=network.getNetworkDomain();
  if (domain != null) {
    buf.append(""String_Node_Str"" + domain);
  }
  if (!network.isDefault() && network.getGuestType() == GuestIpType.Direct) {
    buf.append(""String_Node_Str"");
  }
 else {
    buf.append(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ buf.toString());
  }
  if (controlNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return true;
}",0.9887707740679742
107159,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<SecondaryStorageVmVO> profile){
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<SecondaryStorageVmVO> profile){
  NicProfile managementNic=null;
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Management) {
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}",0.5889908256880734
107160,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStorageVmVO> profile,DeployDestination dest,ReservationContext context){
  HostVO secHost=_hostDao.findSecondaryStorageHost(dest.getDataCenter().getId());
  assert(secHost != null);
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(secHost.getGuid());
  String nfsMountPoint=null;
  try {
    nfsMountPoint=NfsUtils.url2Mount(secHost.getStorageUrl());
  }
 catch (  Exception e) {
  }
  buf.append(""String_Node_Str"").append(nfsMountPoint);
  if (_configDao.isPremium())   buf.append(""String_Node_Str"");
 else   buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(Boolean.toString(_useSSlCopy));
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
 else     if (nic.getTrafficType() == TrafficType.Public) {
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  DataCenterVO dc=_dcDao.findById(profile.getVirtualMachine().getDataCenterId());
  buf.append(""String_Node_Str"").append(dc.getInternalDns1());
  if (dc.getInternalDns2() != null) {
    buf.append(""String_Node_Str"").append(dc.getInternalDns2());
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStorageVmVO> profile,DeployDestination dest,ReservationContext context){
  HostVO secHost=_hostDao.findSecondaryStorageHost(dest.getDataCenter().getId());
  assert(secHost != null);
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(secHost.getGuid());
  String nfsMountPoint=null;
  try {
    nfsMountPoint=NfsUtils.url2Mount(secHost.getStorageUrl());
  }
 catch (  Exception e) {
  }
  buf.append(""String_Node_Str"").append(nfsMountPoint);
  if (_configDao.isPremium())   buf.append(""String_Node_Str"");
 else   buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(Boolean.toString(_useSSlCopy));
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
 else     if (nic.getTrafficType() == TrafficType.Public) {
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  DataCenterVO dc=_dcDao.findById(profile.getVirtualMachine().getDataCenterId());
  buf.append(""String_Node_Str"").append(dc.getInternalDns1());
  if (dc.getInternalDns2() != null) {
    buf.append(""String_Node_Str"").append(dc.getInternalDns2());
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  return true;
}",0.9363665287941456
107161,"List<FirewallRuleVO> listByIpAndPurpose(long ipAddressId,FirewallRule.Purpose purpose);","List<? extends FirewallRule> listByIpAndPurpose(long ipAddressId,FirewallRule.Purpose purpose);",0.934065934065934
107162,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<? extends PortForwardingRule> pfRules=null;
      List<? extends FirewallRule> staticNatFirewallRules=null;
      for (      PublicIpAddress ip : publicIps) {
        pfRules=_pfRulesDao.listForApplication(ip.getId());
        staticNatFirewallRules=_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat);
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}",0.9792467332820908
107163,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      if (v.getInstanceId() == null) {
        returnableVolumes.add(v);
      }
 else {
        if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          VMInstanceVO owningVm=_vmInstanceDao.findById(v.getInstanceId());
          if (owningVm != null && owningVm.getType().equals(VirtualMachine.Type.User) && owningVm.getState().equals(VirtualMachine.State.Destroyed)) {
          }
 else {
            returnableVolumes.add(v);
          }
        }
 else {
          returnableVolumes.add(v);
        }
      }
    }
  }
  return returnableVolumes;
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}",0.9191842900302116
107164,"private boolean canHandle(GuestIpType ipType,DeployDestination dest,TrafficType trafficType){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  if (provider.equals(Provider.VirtualRouter.getName())) {
    if (dc.getNetworkType() == NetworkType.Basic) {
      return (ipType == GuestIpType.Direct && trafficType == TrafficType.Guest);
    }
 else {
      return (ipType == GuestIpType.Direct);
    }
  }
 else {
    return (ipType == GuestIpType.Virtual);
  }
}","private boolean canHandle(GuestIpType ipType,DeployDestination dest,TrafficType trafficType){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  if (provider.equalsIgnoreCase(Provider.JuniperSRX.getName()) && ipType == GuestIpType.Virtual) {
    return true;
  }
 else {
    if (dc.getNetworkType() == NetworkType.Basic) {
      return (ipType == GuestIpType.Direct && trafficType == TrafficType.Guest);
    }
 else {
      return (ipType == GuestIpType.Direct);
    }
  }
}",0.6026026026026026
107165,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _hostCapacityCheckerDelay=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerWait.key()),3600);
  _hostCapacityCheckerInterval=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerInterval.key()),3600);
  _vmCapacityReleaseInterval=NumbersUtil.parseInt(_configDao.getValue(Config.VmHostCapacityReleaseInterval.key()),86400);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _hostCapacityCheckerDelay=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerWait.key()),3600);
  _hostCapacityCheckerInterval=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerInterval.key()),3600);
  _vmCapacityReleaseInterval=NumbersUtil.parseInt(_configDao.getValue(Config.VmHostCapacityReleaseInterval.key()),86400);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  VirtualMachine.State.getStateMachine().registerListener(this);
  return true;
}",0.929440389294404
107166,"@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status){
  if (!_isEnabled || !status || (vm.getType() != VirtualMachine.Type.User && vm.getType() != VirtualMachine.Type.DomainRouter)) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    _mgr.handleVmStateTransition((VMInstanceVO)vm,State.Running);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
  }
  return true;
}","@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status,Long oldHostId){
  if (!_isEnabled || !status || (vm.getType() != VirtualMachine.Type.User && vm.getType() != VirtualMachine.Type.DomainRouter)) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    _mgr.handleVmStateTransition((VMInstanceVO)vm,State.Running);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
  }
  return true;
}",0.9855072463768116
107167,"@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status){
  if (!status) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    handleVmStarted((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmStopped(oldState,event,newState)) {
    handleVmStopped((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
    handleVmMigrated((VMInstanceVO)vm);
  }
  return true;
}","@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status,Long oldHostId){
  if (!status) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    handleVmStarted((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmStopped(oldState,event,newState)) {
    handleVmStopped((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
    handleVmMigrated((VMInstanceVO)vm);
  }
  return true;
}",0.985941893158388
107168,"@Override public boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId){
  return _stateMachine.transitTo(vm,e,hostId,_vmDao);
}","@Override public boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId){
  State oldState=vm.getState();
  if (oldState == State.Starting) {
    if (e == Event.OperationSucceeded) {
      vm.setLastHostId(hostId);
    }
  }
  return _stateMachine.transitTo(vm,e,hostId,_vmDao);
}",0.6621923937360179
107169,"@Override public boolean configure(String name,Map<String,Object> xmlParams) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  Map<String,String> params=configDao.getConfiguration(xmlParams);
  _retry=NumbersUtil.parseInt(params.get(Config.StartRetry.key()),10);
  ReservationContextImpl.setComponents(_userDao,_domainDao,_accountDao);
  VirtualMachineProfileImpl.setComponents(_offeringDao,_templateDao,_accountDao);
  Adapters<HypervisorGuru> hvGurus=locator.getAdapters(HypervisorGuru.class);
  for (  HypervisorGuru guru : hvGurus) {
    _hvGurus.put(guru.getHypervisorType(),guru);
  }
  _cancelWait=NumbersUtil.parseLong(params.get(Config.VmOpCancelInterval.key()),3600);
  _cleanupWait=NumbersUtil.parseLong(params.get(Config.VmOpCleanupWait.key()),3600);
  _cleanupInterval=NumbersUtil.parseLong(params.get(Config.VmOpCleanupInterval.key()),86400) * 1000;
  _opWaitInterval=NumbersUtil.parseLong(params.get(Config.VmOpWaitInterval.key()),120) * 1000;
  _lockStateRetry=NumbersUtil.parseInt(params.get(Config.VmOpLockStateRetry.key()),5);
  _operationTimeout=NumbersUtil.parseInt(params.get(Config.Wait.key()),1800) * 2;
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _nodeId=_clusterMgr.getId();
  _stateMachine.registerListener(this);
  _agentMgr.registerForHostEvents(this,true,true,true);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> xmlParams) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  Map<String,String> params=configDao.getConfiguration(xmlParams);
  _retry=NumbersUtil.parseInt(params.get(Config.StartRetry.key()),10);
  ReservationContextImpl.setComponents(_userDao,_domainDao,_accountDao);
  VirtualMachineProfileImpl.setComponents(_offeringDao,_templateDao,_accountDao);
  Adapters<HypervisorGuru> hvGurus=locator.getAdapters(HypervisorGuru.class);
  for (  HypervisorGuru guru : hvGurus) {
    _hvGurus.put(guru.getHypervisorType(),guru);
  }
  _cancelWait=NumbersUtil.parseLong(params.get(Config.VmOpCancelInterval.key()),3600);
  _cleanupWait=NumbersUtil.parseLong(params.get(Config.VmOpCleanupWait.key()),3600);
  _cleanupInterval=NumbersUtil.parseLong(params.get(Config.VmOpCleanupInterval.key()),86400) * 1000;
  _opWaitInterval=NumbersUtil.parseLong(params.get(Config.VmOpWaitInterval.key()),120) * 1000;
  _lockStateRetry=NumbersUtil.parseInt(params.get(Config.VmOpLockStateRetry.key()),5);
  _operationTimeout=NumbersUtil.parseInt(params.get(Config.Wait.key()),1800) * 2;
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _nodeId=_clusterMgr.getId();
  _agentMgr.registerForHostEvents(this,true,true,true);
  return true;
}",0.9864314789687924
107170,"/** 
 * Event is triggered after state machine transition finished
 * @param oldState VM's old state
 * @param event that triggered this VM state change
 * @param newState VM's new state
 * @param vo the VM instance
 * @param status the state transition is allowed or not
 * @return
 */
public boolean postStateTransitionEvent(S oldState,E event,S newState,V vo,boolean status);","/** 
 * Event is triggered after state machine transition finished
 * @param oldState VM's old state
 * @param event that triggered this VM state change
 * @param newState VM's new state
 * @param vo the VM instance
 * @param status the state transition is allowed or not
 * @return
 */
public boolean postStateTransitionEvent(S oldState,E event,S newState,V vo,boolean status,Long id);",0.9895287958115184
107171,"public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao){
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus);
  }
  return transitionStatus;
}","public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao){
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return transitionStatus;
}",0.9663799843627834
107172,"private List<ServiceOfferingVO> searchServiceOfferingsInternal(Account account,Object name,Object id,Long vmId,Object keyword,Filter searchFilter){
  List<ServiceOfferingVO> sol=new ArrayList<ServiceOfferingVO>();
  DomainVO domainRecord=_domainDao.findById(account.getDomainId());
  boolean includePublicOfferings=true;
  if (domainRecord != null) {
    while (true) {
      SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
      if (keyword != null) {
        includePublicOfferings=false;
        SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
      }
 else       if (vmId != null) {
        includePublicOfferings=false;
        UserVmVO vmInstance=_userVmDao.findById(vmId);
        if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
        }
        if ((account != null) && !isAdmin(account.getType())) {
          if (account.getId() != vmInstance.getAccountId()) {
            throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
          }
        }
        ServiceOfferingVO offering=_offeringsDao.findById(vmInstance.getServiceOfferingId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getGuestIpType());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
      }
      if (id != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
      }
      if (name != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainRecord.getId());
      sol.addAll(_offeringsDao.search(sc,searchFilter));
      if (domainRecord.getParent() != null) {
        domainRecord=_domainDao.findById(domainRecord.getParent());
      }
 else {
        break;
      }
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + account.getAccountName());
    throw new CloudAuthenticationException(""String_Node_Str"" + account.getAccountName());
  }
  if (includePublicOfferings) {
    sol.addAll(_offeringsDao.findPublicServiceOfferings());
  }
  return sol;
}","private List<ServiceOfferingVO> searchServiceOfferingsInternal(Account account,Object name,Object id,Long vmId,Object keyword,Filter searchFilter){
  List<ServiceOfferingVO> sol=new ArrayList<ServiceOfferingVO>();
  DomainVO domainRecord=_domainDao.findById(account.getDomainId());
  boolean includePublicOfferings=true;
  if (domainRecord != null) {
    while (true) {
      SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
      if (keyword != null) {
        includePublicOfferings=false;
        SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
      }
 else       if (vmId != null) {
        UserVmVO vmInstance=_userVmDao.findById(vmId);
        if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
        }
        if ((account != null) && !isAdmin(account.getType())) {
          if (account.getId() != vmInstance.getAccountId()) {
            throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
          }
        }
        ServiceOfferingVO offering=_offeringsDao.findById(vmInstance.getServiceOfferingId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getGuestIpType());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
      }
      if (id != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
      }
      if (name != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainRecord.getId());
      sol.addAll(_offeringsDao.search(sc,searchFilter));
      if (domainRecord.getParent() != null) {
        domainRecord=_domainDao.findById(domainRecord.getParent());
      }
 else {
        break;
      }
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + account.getAccountName());
    throw new CloudAuthenticationException(""String_Node_Str"" + account.getAccountName());
  }
  if (includePublicOfferings) {
    sol.addAll(_offeringsDao.findPublicServiceOfferings());
  }
  return sol;
}",0.9929733727810652
107173,"@Override public boolean attachIso(AttachIsoCmd cmd){
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vmInstanceCheck=_userVmDao.findById(vmId);
  if (vmInstanceCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + isoId);
  }
  State vmState=vmInstanceCheck.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(account,userId,vmInstanceCheck,iso,errMsg);
  VMInstanceVO vm=ApiDBUtils.findVMInstanceById(vmId);
  VMTemplateVO vmTemplate=ApiDBUtils.findTemplateById(vm.getTemplateId());
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vmTemplate.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmTemplate.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}","@Override public boolean attachIso(AttachIsoCmd cmd){
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vmInstanceCheck=_userVmDao.findById(vmId);
  if (vmInstanceCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + isoId);
  }
  State vmState=vmInstanceCheck.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(account,userId,vmInstanceCheck,iso,errMsg);
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vmInstanceCheck.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstanceCheck.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}",0.7158154859967051
107174,"public String assignPublicIpAddress(final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask){
  final Script command=new Script(_ipassocPath,_timeout,s_logger);
  if (add) {
    command.add(""String_Node_Str"");
  }
 else {
    command.add(""String_Node_Str"");
  }
  if (sourceNat) {
    command.add(""String_Node_Str"");
  }
  command.add(""String_Node_Str"",privateIpAddress);
  command.add(""String_Node_Str"",publicIpAddress);
  command.add(""String_Node_Str"",vmName);
  command.add(""String_Node_Str"",vlanNetmask);
  command.add(""String_Node_Str"",""String_Node_Str"");
  if (vlanId != null) {
    command.add(""String_Node_Str"",vlanId);
    command.add(""String_Node_Str"",vlanGateway);
  }
  return command.execute();
}","protected String assignPublicIpAddress(final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean firstIP,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask,final String vifMacAddress,String guestIp){
  final Script command=new Script(_ipassocPath,_timeout,s_logger);
  command.add(privateIpAddress);
  if (add) {
    command.add(""String_Node_Str"");
  }
 else {
    command.add(""String_Node_Str"");
  }
  String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
  if (sourceNat) {
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"",publicIpAddress + ""String_Node_Str"" + cidrSize);
  }
 else   if (firstIP) {
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"",publicIpAddress + ""String_Node_Str"" + cidrSize);
  }
 else {
    command.add(""String_Node_Str"",publicIpAddress);
  }
  command.add(""String_Node_Str"",""String_Node_Str"");
  return command.execute();
}",0.0553745928338762
107175,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_DELETE,eventDescription=""String_Node_Str"") public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
  }
  try {
    expungeVolume(volume);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return false;
  }
  return true;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_DELETE,eventDescription=""String_Node_Str"") public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volumeId,volume.getName(),null,null,null);
    _usageEventDao.persist(usageEvent);
  }
  try {
    expungeVolume(volume);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return false;
  }
  return true;
}",0.9438386041439476
107176,"@Override @DB public void cleanupVolumes(long vmId) throws ConcurrentOperationException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  List<VolumeVO> toBeExpunged=new ArrayList<VolumeVO>();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  for (  VolumeVO vol : volumesForVm) {
    if (vol.getVolumeType().equals(VolumeType.ROOT)) {
      if (!vol.getState().equals(Volume.State.Destroy))       destroyVolume(vol);
      toBeExpunged.add(vol);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol);
      }
      _volsDao.detachVolume(vol.getId());
    }
  }
  txn.commit();
  for (  VolumeVO expunge : toBeExpunged) {
    expungeVolume(expunge);
  }
}","@Override @DB public void cleanupVolumes(long vmId) throws ConcurrentOperationException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  List<VolumeVO> toBeExpunged=new ArrayList<VolumeVO>();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  for (  VolumeVO vol : volumesForVm) {
    if (vol.getVolumeType().equals(VolumeType.ROOT)) {
      if (!vol.getState().equals(Volume.State.Destroy)) {
        destroyVolume(vol);
        VMInstanceVO vm=_vmInstanceDao.findById(vmId);
        if (vm.getType() == VirtualMachine.Type.User) {
          UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),null,null,null);
          _usageEventDao.persist(usageEvent);
        }
      }
      toBeExpunged.add(vol);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol);
      }
      _volsDao.detachVolume(vol.getId());
    }
  }
  txn.commit();
  for (  VolumeVO expunge : toBeExpunged) {
    expungeVolume(expunge);
  }
}",0.8249619482496194
107177,"@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  if (volume.getPoolId() != null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volumeId,volume.getName(),null,null,null);
    _usageEventDao.persist(usageEvent);
  }
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  txn.commit();
}","@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  txn.commit();
}",0.4851485148514851
107178,"@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        _storageMgr.destroyVolume(volume);
      }
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetworkInternal(network.getId(),callerUserId)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}","@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
      _usageEventDao.persist(usageEvent);
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        _storageMgr.destroyVolume(volume);
        if (volume.getPoolId() != null) {
          UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),null,null,null);
          _usageEventDao.persist(usageEvent);
        }
      }
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetworkInternal(network.getId(),callerUserId)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}",0.9256657887035412
107179,"@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  try {
    status=_itMgr.destroy(vm,caller,account);
  }
 catch (  OperationTimedoutException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
  if (status) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}","@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  try {
    status=_itMgr.destroy(vm,caller,account);
  }
 catch (  OperationTimedoutException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(VolumeType.ROOT)) {
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),null,null,null);
        _usageEventDao.persist(usageEvent);
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}",0.8463338533541341
107180,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstanceIdDestroyed(vmId);
  for (  VolumeVO volume : volumes) {
    Long templateId=volume.getTemplateId();
    Long diskOfferingId=volume.getDiskOfferingId();
    Long offeringId=null;
    if (diskOfferingId != null) {
      DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
      if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
        offeringId=offering.getId();
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(VolumeType.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}",0.8883756735950731
107181,"private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          _storageMgr.destroyVolume(volume);
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
    }
  }
}","private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          _storageMgr.destroyVolume(volume);
          if ((volume.getStatus() == AsyncInstanceCreateStatus.Created) && (volume.getVolumeType().equals(VolumeType.ROOT))) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),null,null,null);
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
    }
  }
}",0.7719080174021131
107182,"@Override public <T extends VMInstanceVO>boolean advanceExpunge(T vm,User caller,Account account) throws ResourceUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  if (vm == null || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (!this.advanceStop(vm,false,caller,account)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
  }
  if (!stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,vm.getHostId())) {
    s_logger.debug(""String_Node_Str"" + vm.toString());
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  _networkMgr.cleanupNics(profile);
  _storageMgr.cleanupVolumes(vm.getId());
  VirtualMachineGuru<T> guru=getVmGuru(vm);
  guru.finalizeExpunge(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  return true;
}","@Override public <T extends VMInstanceVO>boolean advanceExpunge(T vm,User caller,Account account) throws ResourceUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  if (vm == null || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (!this.advanceStop(vm,false,caller,account)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
  }
  if (!stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,vm.getHostId())) {
    s_logger.debug(""String_Node_Str"" + vm.toString());
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  _networkMgr.cleanupNics(profile);
  _storageMgr.cleanupVolumes(vm.getId());
  VirtualMachineGuru<T> guru=getVmGuru(vm);
  guru.finalizeExpunge(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return true;
}",0.9040274207369324
107183,"@SuppressWarnings(""String_Node_Str"") private String getLoginSuccessResponse(HttpSession session,String responseType){
  StringBuffer sb=new StringBuffer();
  int inactiveInterval=session.getMaxInactiveInterval();
  if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
    sb.append(""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if ((attrObj instanceof String) || (attrObj instanceof Long)) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attrObj.toString()+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        String attr=(String)session.getAttribute(attrName);
        sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attr+ ""String_Node_Str""+ attrName+ ""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","@SuppressWarnings(""String_Node_Str"") private String getLoginSuccessResponse(HttpSession session,String responseType){
  StringBuffer sb=new StringBuffer();
  int inactiveInterval=session.getMaxInactiveInterval();
  if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
    sb.append(""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if ((attrObj instanceof String) || (attrObj instanceof Long)) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attrObj.toString()+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if (attrObj instanceof String || attrObj instanceof Long || attrObj instanceof Short) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attrObj.toString()+ ""String_Node_Str""+ attrName+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9265839758632248
107184,"public static DomainVO findDomainById(Long domainId){
  return _domainDao.findById(domainId);
}","public static DomainVO findDomainById(Long domainId){
  return _domainDao.findByIdIncludingRemoved(domainId);
}",0.9223300970873788
107185,"public static HostVO findHostById(Long hostId){
  return _hostDao.findById(hostId);
}","public static HostVO findHostById(Long hostId){
  return _hostDao.findByIdIncludingRemoved(hostId);
}",0.913978494623656
107186,"public static GuestOS findGuestOSById(Long id){
  return _guestOSDao.findById(id);
}","public static GuestOS findGuestOSById(Long id){
  return _guestOSDao.findByIdIncludingRemoved(id);
}",0.9130434782608696
107187,"public static DomainRouterVO findDomainRouterById(Long routerId){
  return _domainRouterDao.findById(routerId);
}","public static DomainRouterVO findDomainRouterById(Long routerId){
  return _domainRouterDao.findByIdIncludingRemoved(routerId);
}",0.9338842975206612
107188,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (!validateVolumeSizeRange(diskOffering.getDiskSize() / 1024)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=(diskOffering.getDiskSize() * 1024 * 1024);
    }
 else {
      if (!validateVolumeSizeRange(size)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
      }
      size=(size * 1024 * 1024* 1024);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  return volume;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (!validateVolumeSizeRange(diskOffering.getDiskSize() / 1024)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=(diskOffering.getDiskSize() * 1024 * 1024);
    }
 else {
      if (!validateVolumeSizeRange(size)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
      }
      size=(size * 1024 * 1024* 1024);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  return volume;
}",0.9999083661687896
107189,"@Override public boolean revokePortForwardingRule(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRule(rule.getId(),true);
  }
  return true;
}","@Override public boolean revokePortForwardingRule(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  if (rules == null || rules.isEmpty()) {
    return true;
  }
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRule(rule.getId(),true);
  }
  return true;
}",0.9147496617050068
107190,"@Override public boolean expunge(UserVmVO vm,long callerUserId,Account caller){
  try {
    if (!_itMgr.advanceExpunge(vm,_accountMgr.getSystemUser(),caller)) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
    _networkGroupMgr.removeInstanceFromGroups(vm.getId());
    removeInstanceFromInstanceGroup(vm.getId());
    long vmId=vm.getId();
    if (_rulesMgr.revokePortForwardingRule(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedVmId(vmId);
    if (ips != null) {
      for (      IPAddressVO ip : ips) {
        ip.setOneToOneNat(false);
        ip.setAssociatedWithVmId(null);
        _ipAddressDao.update(ip.getId(),ip);
        s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ vm+ ""String_Node_Str"");
      }
    }
    _itMgr.remove(vm,_accountMgr.getSystemUser(),caller);
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
}","@Override public boolean expunge(UserVmVO vm,long callerUserId,Account caller){
  UserContext ctx=UserContext.current();
  ctx.setAccountId(vm.getAccountId());
  try {
    if (!_itMgr.advanceExpunge(vm,_accountMgr.getSystemUser(),caller)) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
    _networkGroupMgr.removeInstanceFromGroups(vm.getId());
    removeInstanceFromInstanceGroup(vm.getId());
    long vmId=vm.getId();
    if (_rulesMgr.revokePortForwardingRule(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedVmId(vmId);
    if (ips != null) {
      for (      IPAddressVO ip : ips) {
        ip.setOneToOneNat(false);
        ip.setAssociatedWithVmId(null);
        _ipAddressDao.update(ip.getId(),ip);
        s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ vm+ ""String_Node_Str"");
      }
    }
    _itMgr.remove(vm,_accountMgr.getSystemUser(),caller);
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
}",0.974731522425774
107191,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),null,null);
  HypervisorGuru hvGuru=_hvGurus.get(vm.getHypervisorType());
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,null,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        dest=planner.plan(vmProfile,plan,avoids);
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
        throw new ConcurrentOperationException(""String_Node_Str"");
      }
      try {
        _storageMgr.prepare(vmProfile,dest);
        _networkMgr.prepare(vmProfile,dest,ctx);
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Revert);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Start);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
        }
        avoids.addHost(destHostId);
        continue;
      }
catch (      ResourceUnavailableException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      InsufficientCapacityException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      RuntimeException e) {
        s_logger.warn(""String_Node_Str"" + vm,e);
        throw e;
      }
 finally {
        if (startedVm == null) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      changeState(vm,Event.OperationFailed,null,work,Step.Done);
    }
  }
  return startedVm;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),null,null);
  HypervisorGuru hvGuru=_hvGurus.get(vm.getHypervisorType());
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,null,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        dest=planner.plan(vmProfile,plan,avoids);
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
        throw new ConcurrentOperationException(""String_Node_Str"");
      }
      try {
        _storageMgr.prepare(vmProfile,dest);
        _networkMgr.prepare(vmProfile,dest,ctx);
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Revert);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Start);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
        }
        avoids.addHost(destHostId);
        continue;
      }
catch (      ResourceUnavailableException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      InsufficientCapacityException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      RuntimeException e) {
        s_logger.warn(""String_Node_Str"" + vm,e);
        throw e;
      }
 finally {
        if (startedVm == null) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      changeState(vm,Event.OperationFailed,null,work,Step.Done);
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
  return startedVm;
}",0.9933340387260609
107192,"private boolean cleanupDomain(Long domainId,Long ownerId) throws ConcurrentOperationException, ResourceUnavailableException {
  boolean success=true;
{
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<DomainVO> domains=_domainDao.search(sc,null);
    for (    DomainVO domain : domains) {
      success=(success && cleanupDomain(domain.getId(),domain.getAccountId()));
    }
  }
{
    SearchCriteria<AccountVO> sc=_accountDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<AccountVO> accounts=_accountDao.search(sc,null);
    for (    AccountVO account : accounts) {
      success=(success && _accountMgr.cleanupAccount(account,UserContext.current().getCallerUserId(),UserContext.current().getCaller()));
    }
  }
  boolean deleteDomainSuccess=_domainDao.remove(domainId);
  return success && deleteDomainSuccess;
}","private boolean cleanupDomain(Long domainId,Long ownerId) throws ConcurrentOperationException, ResourceUnavailableException {
  boolean success=true;
{
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<DomainVO> domains=_domainDao.search(sc,null);
    for (    DomainVO domain : domains) {
      success=(success && cleanupDomain(domain.getId(),domain.getAccountId()));
      if (!success) {
        s_logger.warn(""String_Node_Str"" + domain.getId());
      }
    }
  }
{
    SearchCriteria<AccountVO> sc=_accountDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<AccountVO> accounts=_accountDao.search(sc,null);
    for (    AccountVO account : accounts) {
      success=(success && _accountMgr.deleteAccount(account,UserContext.current().getCallerUserId(),UserContext.current().getCaller()));
      if (!success) {
        s_logger.warn(""String_Node_Str"" + account.getId() + ""String_Node_Str"");
      }
    }
  }
  boolean deleteDomainSuccess=_domainDao.remove(domainId);
  return success && deleteDomainSuccess;
}",0.8996212121212122
107193,"@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy))       _storageMgr.destroyVolume(volume);
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetwork(network.getId())) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}","@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy))       _storageMgr.destroyVolume(volume);
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetwork(network.getId())) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}",0.9916237113402062
107194,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      if (vol.getPoolId() == null) {
        s_logger.warn(""String_Node_Str"" + vol.getId() + ""String_Node_Str"");
        throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else     if (state == Volume.State.Creating && vol.isRecreatable()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      newVol.setRecreatable(true);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else     if (state == Volume.State.Creating && vol.isRecreatable()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId() != null ? vol.getPoolId() : null);
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      newVol.setRecreatable(true);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}",0.9653163886682552
107195,"@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  setupServer(conn);
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  Map<String,State> changes=null;
synchronized (_vms) {
    _vms.clear();
    changes=sync(conn);
  }
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setChanges(changes);
  cmd.setCluster(_cluster);
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}","@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  setupServer(conn);
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  try {
    cleanupHaltedVms(conn);
  }
 catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  XmlRpcException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  Map<String,State> changes=null;
synchronized (_vms) {
    _vms.clear();
    changes=sync(conn);
  }
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setChanges(changes);
  cmd.setCluster(_cluster);
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}",0.8607120549656465
107196,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Integer.parseInt(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_hostDao,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  PoolsUsedByVmSearch=_storagePoolDao.createSearchBuilder();
  SearchBuilder<VolumeVO> volSearch=_volsDao.createSearchBuilder();
  PoolsUsedByVmSearch.join(""String_Node_Str"",volSearch,volSearch.entity().getPoolId(),PoolsUsedByVmSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  volSearch.and(""String_Node_Str"",volSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  volSearch.and(""String_Node_Str"",volSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  volSearch.done();
  PoolsUsedByVmSearch.done();
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Integer.parseInt(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_hostDao,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  PoolsUsedByVmSearch=_storagePoolDao.createSearchBuilder();
  SearchBuilder<VolumeVO> volSearch=_volsDao.createSearchBuilder();
  PoolsUsedByVmSearch.join(""String_Node_Str"",volSearch,volSearch.entity().getPoolId(),PoolsUsedByVmSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  volSearch.and(""String_Node_Str"",volSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  volSearch.and(""String_Node_Str"",volSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  volSearch.done();
  PoolsUsedByVmSearch.done();
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}",0.9315340909090908
107197,"public SavePasswordCommand(String password,String vmIpAddress,String routerPrivateIpAddress,String vmName){
  this.password=password;
  this.vmIpAddress=vmIpAddress;
  this.routerPrivateIpAddress=routerPrivateIpAddress;
  this.vmName=vmName;
}","public SavePasswordCommand(String password,String vmIpAddress,String vmName){
  this.password=password;
  this.vmIpAddress=vmIpAddress;
  this.vmName=vmName;
}",0.7910447761194029
107198,"@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException {
  password=Long.toHexString(_rand.nextLong());
  UserVm result=_userVmService.resetVMPassword(this,password);
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException {
  password=_mgr.generateRandomPassword();
  UserVm result=_userVmService.resetVMPassword(this,password);
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9416581371545548
107199,"void setParameter(String name,Object value);","void setParameter(Param name,Object value);",0.896551724137931
107200,"/** 
 * @return parameter specific for this type of virtual machine.
 */
Object getParameter(String name);","/** 
 * @return parameter specific for this type of virtual machine.
 */
Object getParameter(Param name);",0.957345971563981
107201,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(""String_Node_Str"",controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}",0.9893801892257192
107202,"@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(""String_Node_Str"");
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  ConsoleProxyVO proxy=profile.getVirtualMachine();
  DataCenter dc=dest.getDataCenter();
  List<NicVO> nics=_nicDao.listBy(proxy.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if ((network.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced) || (network.getTrafficType() == TrafficType.Guest && dc.getNetworkType() == NetworkType.Basic)) {
      proxy.setPublicIpAddress(nic.getIp4Address());
      proxy.setPublicNetmask(nic.getNetmask());
      proxy.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Management) {
      proxy.setPrivateIpAddress(nic.getIp4Address());
      proxy.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  _consoleProxyDao.update(proxy.getId(),proxy);
  return true;
}","@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  ConsoleProxyVO proxy=profile.getVirtualMachine();
  DataCenter dc=dest.getDataCenter();
  List<NicVO> nics=_nicDao.listBy(proxy.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if ((network.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced) || (network.getTrafficType() == TrafficType.Guest && dc.getNetworkType() == NetworkType.Basic)) {
      proxy.setPublicIpAddress(nic.getIp4Address());
      proxy.setPublicNetmask(nic.getNetmask());
      proxy.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Management) {
      proxy.setPrivateIpAddress(nic.getIp4Address());
      proxy.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  _consoleProxyDao.update(proxy.getId(),proxy);
  return true;
}",0.9778850020104544
107203,"protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}","protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}",0.9540867810292634
107204,"protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}","protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}",0.9540867810292634
107205,"@Override public void execute(){
  try {
    Vlan result=_configService.createVlanAndPublicIpRange(this);
    if (result != null) {
      VlanIpRangeResponse response=_responseGenerator.createVlanIpRangeResponse(result);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}","@Override public void execute() throws ResourceUnavailableException {
  try {
    Vlan result=_configService.createVlanAndPublicIpRange(this);
    if (result != null) {
      VlanIpRangeResponse response=_responseGenerator.createVlanIpRangeResponse(result);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}",0.9755129053606882
107206,"/** 
 * Adds a VLAN to the database, along with an IP address range. Can add three types of VLANs: (1) zone-wide VLANs on the virtual public network (2) pod-wide direct attached VLANs (3) account-specific direct attached VLANs
 * @param userId
 * @param vlanType - either ""DomR"" (VLAN for a virtual public network) or ""DirectAttached"" (VLAN for IPs that will be directly attached to UserVMs)
 * @param zoneId
 * @param accountId
 * @param podId
 * @param add
 * @param vlanId
 * @param gateway
 * @param startIP
 * @param endIP
 * @throws 
     * @return The new Vlan object
 */
Vlan createVlanAndPublicIpRange(CreateVlanIpRangeCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException ;","/** 
 * Adds a VLAN to the database, along with an IP address range. Can add three types of VLANs: (1) zone-wide VLANs on the virtual public network (2) pod-wide direct attached VLANs (3) account-specific direct attached VLANs
 * @param userId
 * @param vlanType - either ""DomR"" (VLAN for a virtual public network) or ""DirectAttached"" (VLAN for IPs that will be directly attached to UserVMs)
 * @param zoneId
 * @param accountId
 * @param podId
 * @param add
 * @param vlanId
 * @param gateway
 * @param startIP
 * @param endIP
 * @throws 
     * @return The new Vlan object
 */
Vlan createVlanAndPublicIpRange(CreateVlanIpRangeCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException, ResourceUnavailableException ;",0.9800531914893617
107207,"Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException ;","Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException, ResourceUnavailableException ;",0.953125
107208,"@Override public Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException {
  if (podId != null && ((_podDao.findById(podId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (podId != null && _podDao.findById(podId).getDataCenterId() != zoneId) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ zoneId);
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Advanced && vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
 else   if (zone.getNetworkType() == NetworkType.Basic && !(vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
  if (zone.getVnet() == null && forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str"");
  }
  VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
  checkAccess(account,zone);
  boolean associateIpRangeToAccount=false;
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (account != null) {
      long ipResourceLimit=_accountMgr.findCorrectResourceLimit((AccountVO)account,ResourceType.public_ip);
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange);
      }
      if (ipResourceLimit != -1 && accountIpRange > ipResourceLimit) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange+ ""String_Node_Str"");
      }
      associateIpRangeToAccount=true;
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (account != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  if (guestNetworkCidr != null) {
    String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
    String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
    long guestCidrSize=Long.parseLong(cidrPair[1]);
    long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
    long cidrSizeToUse=-1;
    if (vlanCidrSize < guestCidrSize) {
      cidrSizeToUse=vlanCidrSize;
    }
 else {
      cidrSizeToUse=guestCidrSize;
    }
    String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
    if (newVlanSubnet.equals(guestSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
    }
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  if (zone.getNetworkType() == NetworkType.Basic && vlanId.equalsIgnoreCase(Vlan.UNTAGGED) && podId != null) {
    List<VlanVO> podVlans=_vlanDao.listVlansForPodByType(podId,VlanType.DirectAttached);
    if (podVlans != null && !podVlans.isEmpty()) {
      VlanVO podVlan=podVlans.get(0);
      if (!podVlan.getVlanNetmask().equals(vlanNetmask)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
 else       if (!podVlan.getVlanGateway().equals(vlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
    }
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange,networkId);
  vlan=_vlanDao.persist(vlan);
  if (account != null && vlanType.equals(VlanType.VirtualNetwork)) {
    if (!savePublicIPRangeForAccount(startIP,endIP,zoneId,vlan.getId(),account.getId(),account.getDomainId())) {
      deletePublicIPRange(vlan.getId());
      _vlanDao.expunge(vlan.getId());
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else   if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (account != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(account.getId(),vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  if (associateIpRangeToAccount) {
    associateIpAddressListToAccount(userId,account.getId(),zoneId,vlan.getId());
  }
  return vlan;
}","@Override public Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException, ResourceUnavailableException {
  if (podId != null && ((_podDao.findById(podId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (podId != null && _podDao.findById(podId).getDataCenterId() != zoneId) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ zoneId);
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Advanced && vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
 else   if (zone.getNetworkType() == NetworkType.Basic && !(vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
  if (zone.getVnet() == null && forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str"");
  }
  VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
  checkAccess(account,zone);
  boolean associateIpRangeToAccount=false;
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (account != null) {
      long ipResourceLimit=_accountMgr.findCorrectResourceLimit((AccountVO)account,ResourceType.public_ip);
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange);
      }
      if (ipResourceLimit != -1 && accountIpRange > ipResourceLimit) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange+ ""String_Node_Str"");
      }
      associateIpRangeToAccount=true;
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (account != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  if (guestNetworkCidr != null) {
    String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
    String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
    long guestCidrSize=Long.parseLong(cidrPair[1]);
    long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
    long cidrSizeToUse=-1;
    if (vlanCidrSize < guestCidrSize) {
      cidrSizeToUse=vlanCidrSize;
    }
 else {
      cidrSizeToUse=guestCidrSize;
    }
    String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
    if (newVlanSubnet.equals(guestSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
    }
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  if (zone.getNetworkType() == NetworkType.Basic && vlanId.equalsIgnoreCase(Vlan.UNTAGGED) && podId != null) {
    List<VlanVO> podVlans=_vlanDao.listVlansForPodByType(podId,VlanType.DirectAttached);
    if (podVlans != null && !podVlans.isEmpty()) {
      VlanVO podVlan=podVlans.get(0);
      if (!podVlan.getVlanNetmask().equals(vlanNetmask)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
 else       if (!podVlan.getVlanGateway().equals(vlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
    }
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange,networkId);
  vlan=_vlanDao.persist(vlan);
  if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (account != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(account.getId(),vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  if (associateIpRangeToAccount) {
    long ipCount=_publicIpAddressDao.countIPs(zoneId,vlan.getId(),false);
    _accountMgr.incrementResourceCount(account.getId(),ResourceType.public_ip,ipCount);
    s_logger.trace(""String_Node_Str"" + ResourceType.public_ip + ""String_Node_Str""+ ipCount+ ""String_Node_Str""+ account);
    _networkMgr.associateIpAddressListToAccount(userId,account.getId(),zoneId,vlan.getId());
  }
  return vlan;
}",0.8880736081993944
107209,"@Override public boolean deleteVlanAndPublicIpRange(long userId,long vlanDbId) throws InvalidParameterValueException {
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_publicIpAddressDao.countIPs(vlan.getDataCenterId(),vlanDbId,true) > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_domrDao.listByVlanDbId(vlanDbId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!deletePublicIPRange(vlanDbId)) {
    return false;
  }
  return _vlanDao.expunge(vlanDbId);
}","@Override public boolean deleteVlanAndPublicIpRange(long userId,long vlanDbId) throws InvalidParameterValueException {
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_publicIpAddressDao.countIPs(vlan.getDataCenterId(),vlanDbId,true) > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!deletePublicIPRange(vlanDbId)) {
    return false;
  }
  return _vlanDao.expunge(vlanDbId);
}",0.7400177462289264
107210,"@Override public List<UserAccountVO> searchForUsers(ListUsersCmd cmd) throws PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
  }
 else {
    domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
  }
  Filter searchFilter=new Filter(UserAccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Long id=cmd.getId();
  Object username=cmd.getUsername();
  Object type=cmd.getAccountType();
  Object accountName=cmd.getAccountName();
  Object state=cmd.getState();
  Object keyword=cmd.getKeyword();
  SearchBuilder<UserAccountVO> sb=_userAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.LIKE);
  if (id != null && id == 1) {
    List<UserAccountVO> emptyList=new ArrayList<UserAccountVO>();
    return emptyList;
  }
 else   if (id != null) {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  }
 else {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  }
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  if ((accountName == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<UserAccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<UserAccountVO> ssc=_userAccountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
 else {
    sc.setParameters(""String_Node_Str"",1);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + accountName + ""String_Node_Str"");
    if (domainId != null) {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
 else   if (domainId != null) {
    DomainVO domainVO=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainVO.getPath() + ""String_Node_Str"");
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  return _userAccountDao.search(sc,searchFilter);
}","@Override public List<UserAccountVO> searchForUsers(ListUsersCmd cmd) throws PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
  }
 else {
    domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
  }
  Filter searchFilter=new Filter(UserAccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Long id=cmd.getId();
  Object username=cmd.getUsername();
  Object type=cmd.getAccountType();
  Object accountName=cmd.getAccountName();
  Object state=cmd.getState();
  Object keyword=cmd.getKeyword();
  SearchBuilder<UserAccountVO> sb=_userAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.LIKE);
  if (id != null && id == 1) {
    List<UserAccountVO> emptyList=new ArrayList<UserAccountVO>();
    return emptyList;
  }
 else   if (id != null) {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  }
 else {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  }
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  if ((accountName == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<UserAccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<UserAccountVO> ssc=_userAccountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
 else {
    sc.setParameters(""String_Node_Str"",1);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
    if (domainId != null) {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
 else   if (domainId != null) {
    DomainVO domainVO=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainVO.getPath() + ""String_Node_Str"");
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  return _userAccountDao.search(sc,searchFilter);
}",0.8394351464435147
107211,"@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  long userId=UserContext.current().getCallerUserId();
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(userId,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
    _accountMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  return toDiskProfile(vol,offering);
}","@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  long userId=UserContext.current().getCallerUserId();
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
 else {
    size=(size * 1024 * 1024* 1024);
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(userId,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
    _accountMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  return toDiskProfile(vol,offering);
}",0.9791932059447984
107212,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.startRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}",0.9995541685242978
107213,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.startRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              setPoolStateToError(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              setPoolStateToError(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.startRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              setPoolStateToError(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException || e instanceof ResourceUnavailableException) {
      s_logger.error(""String_Node_Str"",e);
      setPoolStateToError(primaryStorage);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      setPoolStateToError(primaryStorage);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    if (e instanceof InsufficientCapacityException) {
      s_logger.error(""String_Node_Str"",e);
      setPoolStateToError(primaryStorage);
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    setPoolStateToError(primaryStorage);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}",0.9020030539836522
107214,"@Override @DB public synchronized StoragePoolVO cancelPrimaryStorageForMaintenance(CancelPrimaryStorageMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (primaryStorage.getStatus().equals(Status.Up) || primaryStorage.getStatus().equals(Status.PrepareForMaintenance)) {
      throw new StorageUnavailableException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString(),primaryStorageId);
    }
    primaryStorage.setStatus(Status.CancelMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      if ((!volume.destroyed) && (volume.removed == null)) {
        VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
        if (vmInstance.getState().equals(State.Stopping) || vmInstance.getState().equals(State.Stopped)) {
          if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
            try {
              if (_userVmMgr.startUserVm(vmInstance.getId()) == null) {
                String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
                s_logger.warn(msg);
                throw new ExecutionException(msg);
              }
            }
 catch (            StorageUnavailableException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            InsufficientCapacityException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            ConcurrentOperationException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new ExecutionException(msg);
            }
catch (            ExecutionException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
          }
        }
      }
    }
    try {
      _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
    }
 catch (    InvalidParameterValueException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
    primaryStorage.setStatus(Status.Up);
    _storagePoolDao.persist(primaryStorage);
    return primaryStorage;
  }
 catch (  Exception e) {
    primaryStorage.setStatus(Status.ErrorInMaintenance);
    _storagePoolDao.persist(primaryStorage);
    if (e instanceof ExecutionException) {
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO cancelPrimaryStorageForMaintenance(CancelPrimaryStorageMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (primaryStorage.getStatus().equals(Status.Up) || primaryStorage.getStatus().equals(Status.PrepareForMaintenance)) {
      throw new StorageUnavailableException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString(),primaryStorageId);
    }
    primaryStorage.setStatus(Status.CancelMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      if ((!volume.destroyed) && (volume.removed == null)) {
        VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
        if (vmInstance.getState().equals(State.Stopping) || vmInstance.getState().equals(State.Stopped)) {
          if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
            try {
              if (_userVmMgr.startUserVm(vmInstance.getId()) == null) {
                String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
                s_logger.warn(msg);
                throw new ExecutionException(msg);
              }
            }
 catch (            StorageUnavailableException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            InsufficientCapacityException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            ConcurrentOperationException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              setPoolStateToError(primaryStorage);
              throw new ExecutionException(msg);
            }
catch (            ExecutionException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
          }
        }
      }
    }
    try {
      _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
    }
 catch (    InvalidParameterValueException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
    primaryStorage.setStatus(Status.Up);
    _storagePoolDao.persist(primaryStorage);
    return primaryStorage;
  }
 catch (  Exception e) {
    setPoolStateToError(primaryStorage);
    if (e instanceof ExecutionException) {
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}",0.9790739091718612
107215,"@Override public SecondaryStorageVmVO startSecStorageVm(long secStorageVmId){
  boolean started=false;
  long startEventId=EventUtils.saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId);
  try {
    SecondaryStorageVmVO ssvm=start(secStorageVmId);
    started=true;
    return ssvm;
  }
 catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ResourceUnavailableException e) {
    return null;
  }
 finally {
    if (started) {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_INFO,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
 else {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_ERROR,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
  }
}","@Override public SecondaryStorageVmVO startSecStorageVm(long secStorageVmId){
  boolean started=false;
  long startEventId=EventUtils.saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId);
  try {
    SecondaryStorageVmVO ssvm=start(secStorageVmId);
    started=true;
    return ssvm;
  }
 catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (started) {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_INFO,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
 else {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_ERROR,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
  }
}",0.9472796288485872
107216,"@Override @DB public Pair<NetworkGuru,NetworkVO> implementNetwork(long networkId,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  Transaction.currentTxn();
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.acquireInLockTable(networkId);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + networkId);
  }
  try {
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Network.State state=network.getState();
    if (state == Network.State.Implemented || state == Network.State.Setup) {
      implemented.set(guru,network);
      return implemented;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + guru + ""String_Node_Str""+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setState(Network.State.Implementing);
    network.setReservationId(context.getReservationId());
    _networksDao.update(networkId,network);
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setDns1(result.getDns1());
    network.setDns2(result.getDns2());
    network.setMode(result.getMode());
    _networksDao.update(networkId,network);
    for (    NetworkElement element : _networkElements) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ network);
      }
      element.implement(network,offering,dest,context);
    }
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
  finally {
    if (implemented.first() == null) {
      s_logger.debug(""String_Node_Str"" + network);
    }
    _networksDao.releaseFromLockTable(networkId);
  }
}","@Override @DB public Pair<NetworkGuru,NetworkVO> implementNetwork(long networkId,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  Transaction.currentTxn();
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.acquireInLockTable(networkId);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + networkId);
  }
  try {
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Network.State state=network.getState();
    if (state == Network.State.Implemented || state == Network.State.Setup) {
      implemented.set(guru,network);
      return implemented;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + guru + ""String_Node_Str""+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setState(Network.State.Implementing);
    _networksDao.update(networkId,network);
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setDns1(result.getDns1());
    network.setDns2(result.getDns2());
    network.setMode(result.getMode());
    _networksDao.update(networkId,network);
    for (    NetworkElement element : _networkElements) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ network);
      }
      element.implement(network,offering,dest,context);
    }
    network.setReservationId(context.getReservationId());
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
  finally {
    if (implemented.first() == null) {
      s_logger.debug(""String_Node_Str"" + network);
    }
    _networksDao.releaseFromLockTable(networkId);
  }
}",0.9722488038277513
107217,"@Override public void run(){
  try {
    List<Long> shutdownList=new ArrayList<Long>();
    long currentTime=System.currentTimeMillis() >> 10;
    HashMap<Long,Long> stillFree=new HashMap<Long,Long>();
    List<Long> networkIds=_networksDao.findNetworksToGarbageCollect();
    for (    Long networkId : networkIds) {
      Long time=_lastNetworkIdsToFree.remove(networkId);
      if (time == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ currentTime);
        }
        stillFree.put(networkId,currentTime);
      }
 else       if (time < (currentTime + _networkGcWait)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ time);
        }
        stillFree.put(networkId,time);
      }
 else {
        shutdownList.add(networkId);
      }
    }
    _lastNetworkIdsToFree=stillFree;
    for (    Long networkId : shutdownList) {
      try {
        shutdownNetwork(networkId);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + networkId);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    List<Long> shutdownList=new ArrayList<Long>();
    long currentTime=System.currentTimeMillis() >> 10;
    HashMap<Long,Long> stillFree=new HashMap<Long,Long>();
    List<Long> networkIds=_networksDao.findNetworksToGarbageCollect();
    for (    Long networkId : networkIds) {
      Long time=_lastNetworkIdsToFree.remove(networkId);
      if (time == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ currentTime);
        }
        stillFree.put(networkId,currentTime);
      }
 else       if (time > (currentTime - _networkGcWait)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ time);
        }
        stillFree.put(networkId,time);
      }
 else {
        shutdownList.add(networkId);
      }
    }
    _lastNetworkIdsToFree=stillFree;
    for (    Long networkId : shutdownList) {
      try {
        shutdownNetwork(networkId);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + networkId);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
}",0.9983361064891848
107218,"@DB public void shutdownNetwork(long networkId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkVO network=_networksDao.lockRow(networkId,true);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return;
  }
  if (network.getState() != Network.State.Implemented && network.getState() != Network.State.Destroying) {
    s_logger.debug(""String_Node_Str"" + network);
    return;
  }
  network.setState(Network.State.Destroying);
  _networksDao.update(network.getId(),network);
  txn.commit();
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.shutdown(network,null);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  txn.start();
  if (success) {
    if (s_logger.isDebugEnabled()) {
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    guru.destroy(network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
    network.setState(Network.State.Allocated);
    _networksDao.update(network.getId(),network);
    _networksDao.clearCheckForGc(networkId);
  }
 else {
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
  }
  txn.commit();
}","@DB public void shutdownNetwork(long networkId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkVO network=_networksDao.lockRow(networkId,true);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return;
  }
  if (network.getState() != Network.State.Implemented && network.getState() != Network.State.Destroying) {
    s_logger.debug(""String_Node_Str"" + network);
    return;
  }
  network.setState(Network.State.Destroying);
  _networksDao.update(network.getId(),network);
  txn.commit();
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.shutdown(network,null);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  txn.start();
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    guru.destroy(network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
    network.setState(Network.State.Allocated);
    _networksDao.update(network.getId(),network);
    _networksDao.clearCheckForGc(networkId);
  }
 else {
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
  }
  txn.commit();
}",0.9784851164161508
107219,"@Override public void destroy(Network network,NetworkOffering offering){
  _dcDao.releaseVnet(network.getBroadcastUri().getHost(),network.getDataCenterId(),network.getAccountId(),network.getReservationId());
}","@Override public void destroy(Network network,NetworkOffering offering){
  s_logger.debug(""String_Node_Str"" + network.getId());
  _dcDao.releaseVnet(network.getBroadcastUri().getHost(),network.getDataCenterId(),network.getAccountId(),network.getReservationId());
  _networkMgr.resetBroadcastUri(network.getId());
}",0.7992351816443595
107220,"private void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  for (  VolumeTO volume : vmSpec.getDisks()) {
    String volPath=getVolumePath(conn,volume);
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == VolumeType.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=0;
      if (volume.getType() == VolumeType.ROOT) {
        devId=0;
      }
 else {
        devId=1;
      }
      disk.defFileBasedDisk(volume.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
    }
    if (volume.getType() == VolumeType.DATADISK && diskBusType != DiskDef.diskBus.VIRTIO) {
      disk.setAttachDeferred(true);
    }
    if (!disk.isAttachDeferred()) {
      vm.getDevices().addDevice(disk);
    }
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    DiskDef iso=new DiskDef();
    iso.defISODisk(_sysvmISOPath);
    vm.getDevices().addDevice(iso);
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}","private void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  for (  VolumeTO volume : vmSpec.getDisks()) {
    String volPath=getVolumePath(conn,volume);
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == VolumeType.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      disk.defFileBasedDisk(volume.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
    }
    if (volume.getType() == VolumeType.DATADISK && diskBusType != DiskDef.diskBus.VIRTIO) {
      disk.setAttachDeferred(true);
    }
    if (!disk.isAttachDeferred()) {
      vm.getDevices().addDevice(disk);
    }
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    DiskDef iso=new DiskDef();
    iso.defISODisk(_sysvmISOPath);
    vm.getDevices().addDevice(iso);
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}",0.9406593406593406
107221,"private String getDevLabel(int devId,diskBus bus){
  char suffix=(char)('a' + devId);
  if (bus == diskBus.SCSI) {
    return ""String_Node_Str"" + suffix;
  }
 else   if (bus == diskBus.VIRTIO) {
    return ""String_Node_Str"" + suffix;
  }
  return ""String_Node_Str"" + suffix;
}","private String getDevLabel(int devId,diskBus bus){
  if (devId >= 2) {
    devId++;
  }
  char suffix=(char)('a' + devId);
  if (bus == diskBus.SCSI) {
    return ""String_Node_Str"" + suffix;
  }
 else   if (bus == diskBus.VIRTIO) {
    return ""String_Node_Str"" + suffix;
  }
  return ""String_Node_Str"" + suffix;
}",0.9371816638370118
107222,"@Override @DB public boolean deletePool(DeletePoolCmd command) throws InvalidParameterValueException {
  Long id=command.getId();
  boolean deleteFlag=false;
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (sPool.getPoolType().equals(StoragePoolType.LVM)) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(id);
  if (hostPoolRecords.size() == 0) {
    sPool.setUuid(null);
    _storagePoolDao.update(id,sPool);
    _storagePoolDao.remove(id);
    return true;
  }
 else {
    Pair<Long,Long> volumeRecords=_volsDao.getCountAndTotalByPool(id);
    if (volumeRecords.first() > 0) {
      s_logger.warn(""String_Node_Str"" + sPool.getName() + ""String_Node_Str"");
      return false;
    }
 else {
      StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
      try {
        if (lock == null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + sPool.getId());
          }
          return false;
        }
        for (        StoragePoolHostVO host : hostPoolRecords) {
          DeleteStoragePoolCommand cmd=new DeleteStoragePoolCommand(sPool);
          final Answer answer=_agentMgr.easySend(host.getHostId(),cmd);
          if (answer != null && answer.getResult()) {
            deleteFlag=true;
            break;
          }
        }
      }
  finally {
        if (lock != null) {
          _storagePoolDao.releaseFromLockTable(lock.getId());
        }
      }
      if (deleteFlag) {
        for (        StoragePoolHostVO host : hostPoolRecords) {
          _storagePoolHostDao.deleteStoragePoolHostDetails(host.getHostId(),host.getPoolId());
        }
        sPool.setUuid(null);
        _storagePoolDao.update(id,sPool);
        _storagePoolDao.remove(id);
        return true;
      }
    }
  }
  return false;
}","@Override @DB public boolean deletePool(DeletePoolCmd command) throws InvalidParameterValueException {
  Long id=command.getId();
  boolean deleteFlag=false;
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (sPool.getPoolType().equals(StoragePoolType.LVM)) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(id);
  if (hostPoolRecords.size() == 0) {
    sPool.setUuid(null);
    _storagePoolDao.update(id,sPool);
    _storagePoolDao.remove(id);
    return true;
  }
 else {
    Pair<Long,Long> volumeRecords=_volsDao.getCountAndTotalByPool(id);
    if (volumeRecords.first() > 0) {
      s_logger.warn(""String_Node_Str"" + sPool.getName() + ""String_Node_Str"");
      return false;
    }
 else {
      StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
      try {
        if (lock == null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + sPool.getId());
          }
          return false;
        }
        for (        StoragePoolHostVO host : hostPoolRecords) {
          DeleteStoragePoolCommand cmd=new DeleteStoragePoolCommand(sPool);
          final Answer answer=_agentMgr.easySend(host.getHostId(),cmd);
          if (answer != null && answer.getResult()) {
            deleteFlag=true;
            break;
          }
        }
      }
  finally {
        if (lock != null) {
          _storagePoolDao.releaseFromLockTable(lock.getId());
        }
      }
      if (deleteFlag) {
        for (        StoragePoolHostVO host : hostPoolRecords) {
          _storagePoolHostDao.deleteStoragePoolHostDetails(host.getHostId(),host.getPoolId());
        }
        sPool.setUuid(null);
        sPool.setStatus(Status.Removed);
        _storagePoolDao.update(id,sPool);
        _storagePoolDao.remove(id);
        return true;
      }
    }
  }
  return false;
}",0.9902171319494154
107223,"/** 
 * Creates a User VM in the database and returns the VM to the caller.
 * @param cmd Command to deploy.
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws PermissionDeniedException if the caller doesn't have any access rights to the VM.
 * @throws InvalidParameterValueException if the parameters are incorrect. 
 */
UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException ;","/** 
 * Creates a User VM in the database and returns the VM to the caller.
 * @param cmd Command to deploy.
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException 
 * @throws PermissionDeniedException if the caller doesn't have any access rights to the VM.
 * @throws InvalidParameterValueException if the parameters are incorrect. 
 */
UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException ;",0.9563106796116504
107224,"public void dispatchCreateCmd(BaseAsyncCreateCmd cmd,Map<String,String> params){
  String errorMsg=""String_Node_Str"";
  setupParameters(cmd,params);
  try {
    cmd.create();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(""String_Node_Str"" + t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(""String_Node_Str"",t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + ""String_Node_Str"" + ((ServerApiException)t).getDescription());
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
 else {
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
  }
}","public void dispatchCreateCmd(BaseAsyncCreateCmd cmd,Map<String,String> params){
  String errorMsg=""String_Node_Str"";
  setupParameters(cmd,params);
  try {
    cmd.create();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(""String_Node_Str"" + t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(""String_Node_Str"",t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + ""String_Node_Str"" + ((ServerApiException)t).getDescription());
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg.length() > 0 ? errorMsg : ((ServerApiException)t).getDescription());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
 else {
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
  }
}",0.9854569133926634
107225,"@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  String group=cmd.getGroup();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String sshPublicKey=null;
  if (cmd.getSSHKeyPairName() != null && !cmd.getSSHKeyPairName().equals(""String_Node_Str"")) {
    Account account=UserContext.current().getCaller();
    SSHKeyPair pair=_sshKeyPairDao.findByName(account.getAccountId(),account.getDomainId(),cmd.getSSHKeyPairName());
    if (pair == null)     throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSSHKeyPairName() + ""String_Node_Str"");
    sshPublicKey=pair.getPublicKey();
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(dc.getId(),TrafficType.Guest);
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      networkList.add(defaultNetwork.getId());
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  short defaultNetworkNumber=0;
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      if (network.isDefault()) {
        defaultNetworkNumber++;
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  if (defaultNetworkNumber == 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (defaultNetworkNumber > 1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  HypervisorType hypervisorType=null;
  if (template == null || template.getHypervisorType() == null || template.getHypervisorType() == HypervisorType.None) {
    hypervisorType=cmd.getHypervisor();
  }
 else {
    hypervisorType=template.getHypervisorType();
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (sshPublicKey != null)   vm.setDetail(""String_Node_Str"",sshPublicKey);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  _vmDao.saveDetails(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  try {
    if (group != null) {
      boolean addToGroup=addInstanceToGroup(Long.valueOf(id),group);
      if (!addToGroup) {
        throw new CloudRuntimeException(""String_Node_Str"" + group);
      }
    }
  }
 catch (  Exception ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + group);
  }
  return vm;
}","@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException, StorageUnavailableException {
  Account caller=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  String group=cmd.getGroup();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  List<StoragePoolVO> availablePools=_storagePoolDao.listPoolsByStatus(com.cloud.host.Status.Up);
  if (availablePools == null || availablePools.size() < 1) {
    throw new StorageUnavailableException(""String_Node_Str"",-1);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String sshPublicKey=null;
  if (cmd.getSSHKeyPairName() != null && !cmd.getSSHKeyPairName().equals(""String_Node_Str"")) {
    Account account=UserContext.current().getCaller();
    SSHKeyPair pair=_sshKeyPairDao.findByName(account.getAccountId(),account.getDomainId(),cmd.getSSHKeyPairName());
    if (pair == null)     throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSSHKeyPairName() + ""String_Node_Str"");
    sshPublicKey=pair.getPublicKey();
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(dc.getId(),TrafficType.Guest);
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      networkList.add(defaultNetwork.getId());
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  short defaultNetworkNumber=0;
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      if (network.isDefault()) {
        defaultNetworkNumber++;
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  if (defaultNetworkNumber == 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (defaultNetworkNumber > 1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  HypervisorType hypervisorType=null;
  if (template == null || template.getHypervisorType() == null || template.getHypervisorType() == HypervisorType.None) {
    hypervisorType=cmd.getHypervisor();
  }
 else {
    hypervisorType=template.getHypervisorType();
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (sshPublicKey != null)   vm.setDetail(""String_Node_Str"",sshPublicKey);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  _vmDao.saveDetails(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  try {
    if (group != null) {
      boolean addToGroup=addInstanceToGroup(Long.valueOf(id),group);
      if (!addToGroup) {
        throw new CloudRuntimeException(""String_Node_Str"" + group);
      }
    }
  }
 catch (  Exception ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + group);
  }
  return vm;
}",0.9851402139346632
107226,"protected VDI getVDIbyUuid(Connection conn,String uuid){
  try {
    return VDI.getByUuid(conn,uuid);
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg,e);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + uuid + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg,e);
  }
}","protected VDI getVDIbyUuid(Connection conn,String uuid){
  try {
    return VDI.getByUuid(conn,uuid);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ e.toString();
    s_logger.debug(msg);
    throw new CloudRuntimeException(msg,e);
  }
}",0.5121019108280255
107227,"@Override public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
  }
  expungeVolume(volume);
  return true;
}","@Override public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
  }
  try {
    expungeVolume(volume);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e);
    return false;
  }
  return true;
}",0.9446589446589446
107228,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      if (vol.getPoolId() == null) {
        s_logger.warn(""String_Node_Str"" + vol.getId() + ""String_Node_Str"");
        throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      if (vol.getPoolId() == null) {
        s_logger.warn(""String_Node_Str"" + vol.getId() + ""String_Node_Str"");
        throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}",0.9965137358806304
107229,"public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
  this.deviceId=volume.getDeviceId();
}","public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
  if (volume.getDeviceId() != null)   this.deviceId=volume.getDeviceId();
}",0.9320594479830148
107230,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerCfgCommand) {
    return execute((LoadBalancerCfgCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof ShareCommand) {
    return execute((ShareCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerCfgCommand) {
    return execute((LoadBalancerCfgCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof ShareCommand) {
    return execute((ShareCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}",0.9785867237687366
107231,"/** 
 * @return the type of IP address to allocate as the primary ip address to a guest
 */
NetworkOffering.GuestIpType getGuestIpType();","/** 
 * @return the type of IP address to allocate as the primary ip address to a guest
 */
Network.GuestIpType getGuestIpType();",0.9699248120300752
107232,"/** 
 * Creates a new network offering
 * @param name
 * @param displayText
 * @param type
 * @param trafficType
 * @param tags
 * @param maxConnections
 * @param id
 * @param specifyVlan;
 * @return network offering object
 */
NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,GuestIpType type,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability);","/** 
 * Creates a new network offering
 * @param name
 * @param displayText
 * @param trafficType
 * @param tags
 * @param maxConnections
 * @param id
 * @param specifyVlan;
 * @return network offering object
 */
NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability);",0.9617224880382776
107233,"@Override public NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,GuestIpType type,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,false,specifyVlan,networkRate,multicastRate,maxConnections,false,availability,false,false,false,false,false,false,false);
  if ((offering=_networkOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_NETWORK_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + displayText,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}","@Override public NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,false,specifyVlan,networkRate,multicastRate,maxConnections,false,availability,false,false,false,false,false,false,false);
  if ((offering=_networkOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_NETWORK_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + displayText,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}",0.992407324698526
107234,"@Override public ServiceOfferingVO createServiceOffering(long userId,String name,int cpu,int ramSize,int speed,String displayText,boolean localStorageRequired,boolean offerHA,boolean useVirtualNetwork,String tags,Long domainId){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  NetworkOffering.GuestIpType guestIpType=useVirtualNetwork ? NetworkOffering.GuestIpType.Virtual : NetworkOffering.GuestIpType.Direct;
  tags=cleanupTags(tags);
  ServiceOfferingVO offering=new ServiceOfferingVO(name,cpu,ramSize,speed,networkRate,multicastRate,offerHA,displayText,guestIpType,localStorageRequired,false,tags,false,domainId);
  if ((offering=_serviceOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + cpu,""String_Node_Str"" + ramSize,""String_Node_Str"" + speed,""String_Node_Str"" + displayText,""String_Node_Str"" + guestIpType,""String_Node_Str"" + localStorageRequired,""String_Node_Str"" + offerHA,""String_Node_Str"" + useVirtualNetwork,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}","@Override public ServiceOfferingVO createServiceOffering(long userId,String name,int cpu,int ramSize,int speed,String displayText,boolean localStorageRequired,boolean offerHA,boolean useVirtualNetwork,String tags,Long domainId){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  Network.GuestIpType guestIpType=useVirtualNetwork ? Network.GuestIpType.Virtual : Network.GuestIpType.Direct;
  tags=cleanupTags(tags);
  ServiceOfferingVO offering=new ServiceOfferingVO(name,cpu,ramSize,speed,networkRate,multicastRate,offerHA,displayText,guestIpType,localStorageRequired,false,tags,false,domainId);
  if ((offering=_serviceOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + cpu,""String_Node_Str"" + ramSize,""String_Node_Str"" + speed,""String_Node_Str"" + displayText,""String_Node_Str"" + guestIpType,""String_Node_Str"" + localStorageRequired,""String_Node_Str"" + offerHA,""String_Node_Str"" + useVirtualNetwork,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}",0.9917412250516172
107235,"@Override public ServiceOffering updateServiceOffering(UpdateServiceOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getServiceOfferingName();
  Boolean ha=cmd.getOfferHa();
  Long userId=UserContext.current().getCallerUserId();
  Long domainId=cmd.getDomainId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  ServiceOfferingVO offeringHandle=_serviceOfferingDao.findById(id);
  ;
  if (offeringHandle == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  boolean updateNeeded=(name != null || displayText != null || ha != null || domainId != null);
  if (!updateNeeded) {
    return _serviceOfferingDao.findById(id);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (ha != null) {
    offering.setOfferHA(ha);
  }
  if (domainId != null) {
    offering.setDomainId(domainId);
  }
  if (_serviceOfferingDao.update(id,offering)) {
    offering=_serviceOfferingDao.findById(id);
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_EDIT,""String_Node_Str"" + offering.getName() + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + offering.getName(),""String_Node_Str"" + offering.getDisplayText(),""String_Node_Str"" + offering.getOfferHA(),""String_Node_Str"" + (offering.getGuestIpType() == NetworkOffering.GuestIpType.Virtual),""String_Node_Str"" + offering.getTags(),""String_Node_Str"" + offering.getDomainId());
    return offering;
  }
 else {
    return null;
  }
}","@Override public ServiceOffering updateServiceOffering(UpdateServiceOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getServiceOfferingName();
  Boolean ha=cmd.getOfferHa();
  Long userId=UserContext.current().getCallerUserId();
  Long domainId=cmd.getDomainId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  ServiceOfferingVO offeringHandle=_serviceOfferingDao.findById(id);
  ;
  if (offeringHandle == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  boolean updateNeeded=(name != null || displayText != null || ha != null || domainId != null);
  if (!updateNeeded) {
    return _serviceOfferingDao.findById(id);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (ha != null) {
    offering.setOfferHA(ha);
  }
  if (domainId != null) {
    offering.setDomainId(domainId);
  }
  if (_serviceOfferingDao.update(id,offering)) {
    offering=_serviceOfferingDao.findById(id);
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_EDIT,""String_Node_Str"" + offering.getName() + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + offering.getName(),""String_Node_Str"" + offering.getDisplayText(),""String_Node_Str"" + offering.getOfferHA(),""String_Node_Str"" + (offering.getGuestIpType() == Network.GuestIpType.Virtual),""String_Node_Str"" + offering.getTags(),""String_Node_Str"" + offering.getDomainId());
    return offering;
  }
 else {
    return null;
  }
}",0.9976176295413935
107236,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  _proxyRamSize=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_VM_RAMSIZE);
  String value=configs.get(""String_Node_Str"");
  _proxyCmdPort=NumbersUtil.parseInt(value,DEFAULT_PROXY_CMD_PORT);
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _sslEnabled=true;
  }
  value=configs.get(""String_Node_Str"");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _capacityPerProxy=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_STANDBY_CAPACITY);
  _proxySessionTimeoutValue=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_SESSION_TIMEOUT);
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyUrlPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);
  }
  value=configs.get(Config.ConsoleProxyDisableRpFilter.key());
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _disable_rp_filter=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_lvm=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_storage_vm=true;
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _capacityPerProxy);
    s_logger.info(""String_Node_Str"" + _standbyCapacity);
  }
  _domain=configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  _instance=configs.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  value=(String)params.get(""String_Node_Str"");
  _ssh_sleep=NumbersUtil.parseInt(value,5) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _ssh_retry=NumbersUtil.parseInt(value,3);
  Map<String,String> agentMgrConfigs=configDao.getConfiguration(""String_Node_Str"",params);
  _mgmt_host=agentMgrConfigs.get(""String_Node_Str"");
  if (_mgmt_host == null) {
    s_logger.warn(""String_Node_Str"");
  }
  value=agentMgrConfigs.get(""String_Node_Str"");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _consoleProxyAllocators=locator.getAdapters(ConsoleProxyAllocator.class);
  if (_consoleProxyAllocators == null || !_consoleProxyAllocators.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _listener=new ConsoleProxyListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.ConsoleProxy,this);
  }
  _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO(""String_Node_Str"",1,_proxyRamSize,0,0,0,true,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null,true);
  _serviceOffering.setUniqueName(""String_Node_Str"");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  _proxyRamSize=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_VM_RAMSIZE);
  String value=configs.get(""String_Node_Str"");
  _proxyCmdPort=NumbersUtil.parseInt(value,DEFAULT_PROXY_CMD_PORT);
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _sslEnabled=true;
  }
  value=configs.get(""String_Node_Str"");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _capacityPerProxy=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_STANDBY_CAPACITY);
  _proxySessionTimeoutValue=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_SESSION_TIMEOUT);
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyUrlPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);
  }
  value=configs.get(Config.ConsoleProxyDisableRpFilter.key());
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _disable_rp_filter=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_lvm=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_storage_vm=true;
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _capacityPerProxy);
    s_logger.info(""String_Node_Str"" + _standbyCapacity);
  }
  _domain=configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  _instance=configs.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  value=(String)params.get(""String_Node_Str"");
  _ssh_sleep=NumbersUtil.parseInt(value,5) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _ssh_retry=NumbersUtil.parseInt(value,3);
  Map<String,String> agentMgrConfigs=configDao.getConfiguration(""String_Node_Str"",params);
  _mgmt_host=agentMgrConfigs.get(""String_Node_Str"");
  if (_mgmt_host == null) {
    s_logger.warn(""String_Node_Str"");
  }
  value=agentMgrConfigs.get(""String_Node_Str"");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _consoleProxyAllocators=locator.getAdapters(ConsoleProxyAllocator.class);
  if (_consoleProxyAllocators == null || !_consoleProxyAllocators.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _listener=new ConsoleProxyListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.ConsoleProxy,this);
  }
  _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO(""String_Node_Str"",1,_proxyRamSize,0,0,0,true,null,Network.GuestIpType.Virtual,useLocalStorage,true,null,true);
  _serviceOffering.setUniqueName(""String_Node_Str"");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}",0.9990496555001188
107237,"private void migrateServiceOfferings(){
  System.out.println(""String_Node_Str"");
  long seq=getServiceOfferingStartSequence();
  List<ServiceOffering20VO> oldServiceOfferings=_serviceOffering20Dao.listAllIncludingRemoved();
  for (  ServiceOffering20VO so20 : oldServiceOfferings) {
    ServiceOffering21VO so21=new ServiceOffering21VO(so20.getName(),so20.getCpu(),so20.getRamSize(),so20.getSpeed(),so20.getRateMbps(),so20.getMulticastRateMbps(),so20.getOfferHA(),so20.getDisplayText(),so20.getGuestIpType(),so20.getUseLocalStorage(),false,null);
    so21.setId(seq++);
    so21.setDiskSize(0);
    so21=_serviceOffering21Dao.persist(so21);
    if (so20.getId().longValue() != so21.getId()) {
      updateServiceOfferingReferences(so20.getId().longValue(),so21.getId());
    }
  }
  boolean useLocalStorage=Boolean.parseBoolean(_configDao.getValue(Config.SystemVMUseLocalStorage.key()));
  int proxyRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.ConsoleProxyRamSize.key()),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  ServiceOffering21VO soConsoleProxy=new ServiceOffering21VO(""String_Node_Str"",1,proxyRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null);
  soConsoleProxy.setId(seq++);
  soConsoleProxy.setUniqueName(""String_Node_Str"");
  soConsoleProxy=_serviceOffering21Dao.persist(soConsoleProxy);
  _consoleProxyServiceOfferingId=soConsoleProxy.getId();
  int secStorageVmRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageVmRamSize.key()),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  ServiceOffering21VO soSecondaryVm=new ServiceOffering21VO(""String_Node_Str"",1,secStorageVmRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null);
  soSecondaryVm.setId(seq++);
  soSecondaryVm.setUniqueName(""String_Node_Str"");
  soSecondaryVm=_serviceOffering21Dao.persist(soSecondaryVm);
  _secStorageServiceOfferingId=soSecondaryVm.getId();
  int routerRamSize=NumbersUtil.parseInt(_configDao.getValue(""String_Node_Str""),128);
  ServiceOffering21VO soDomainRouter=new ServiceOffering21VO(""String_Node_Str"",1,routerRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null);
  soDomainRouter.setId(seq++);
  soDomainRouter.setUniqueName(""String_Node_Str"");
  soDomainRouter=_serviceOffering21Dao.persist(soDomainRouter);
  _domRServiceOfferingId=soDomainRouter.getId();
  System.out.println(""String_Node_Str"");
}","private void migrateServiceOfferings(){
  System.out.println(""String_Node_Str"");
  long seq=getServiceOfferingStartSequence();
  List<ServiceOffering20VO> oldServiceOfferings=_serviceOffering20Dao.listAllIncludingRemoved();
  for (  ServiceOffering20VO so20 : oldServiceOfferings) {
    ServiceOffering21VO so21=new ServiceOffering21VO(so20.getName(),so20.getCpu(),so20.getRamSize(),so20.getSpeed(),so20.getRateMbps(),so20.getMulticastRateMbps(),so20.getOfferHA(),so20.getDisplayText(),so20.getGuestIpType(),so20.getUseLocalStorage(),false,null);
    so21.setId(seq++);
    so21.setDiskSize(0);
    so21=_serviceOffering21Dao.persist(so21);
    if (so20.getId().longValue() != so21.getId()) {
      updateServiceOfferingReferences(so20.getId().longValue(),so21.getId());
    }
  }
  boolean useLocalStorage=Boolean.parseBoolean(_configDao.getValue(Config.SystemVMUseLocalStorage.key()));
  int proxyRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.ConsoleProxyRamSize.key()),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  ServiceOffering21VO soConsoleProxy=new ServiceOffering21VO(""String_Node_Str"",1,proxyRamSize,0,0,0,false,null,Network.GuestIpType.Virtual,useLocalStorage,true,null);
  soConsoleProxy.setId(seq++);
  soConsoleProxy.setUniqueName(""String_Node_Str"");
  soConsoleProxy=_serviceOffering21Dao.persist(soConsoleProxy);
  _consoleProxyServiceOfferingId=soConsoleProxy.getId();
  int secStorageVmRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageVmRamSize.key()),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  ServiceOffering21VO soSecondaryVm=new ServiceOffering21VO(""String_Node_Str"",1,secStorageVmRamSize,0,0,0,false,null,Network.GuestIpType.Virtual,useLocalStorage,true,null);
  soSecondaryVm.setId(seq++);
  soSecondaryVm.setUniqueName(""String_Node_Str"");
  soSecondaryVm=_serviceOffering21Dao.persist(soSecondaryVm);
  _secStorageServiceOfferingId=soSecondaryVm.getId();
  int routerRamSize=NumbersUtil.parseInt(_configDao.getValue(""String_Node_Str""),128);
  ServiceOffering21VO soDomainRouter=new ServiceOffering21VO(""String_Node_Str"",1,routerRamSize,0,0,0,false,null,Network.GuestIpType.Virtual,useLocalStorage,true,null);
  soDomainRouter.setId(seq++);
  soDomainRouter.setUniqueName(""String_Node_Str"");
  soDomainRouter=_serviceOffering21Dao.persist(soDomainRouter);
  _domRServiceOfferingId=soDomainRouter.getId();
  System.out.println(""String_Node_Str"");
}",0.9950454170107348
107238,"public NetworkOffering.GuestIpType getGuestIpType(){
  return guestIpType;
}","public Network.GuestIpType getGuestIpType(){
  return guestIpType;
}",0.9444444444444444
107239,"public void setGuestIpType(NetworkOffering.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}","public void setGuestIpType(Network.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}",0.9591836734693876
107240,"public ServiceOffering20VO(Long id,String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,NetworkOffering.GuestIpType guestIpType,boolean useLocalStorage){
  this.id=id;
  this.name=name;
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.displayText=displayText;
  this.guestIpType=guestIpType;
  this.useLocalStorage=useLocalStorage;
}","public ServiceOffering20VO(Long id,String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,Network.GuestIpType guestIpType,boolean useLocalStorage){
  this.id=id;
  this.name=name;
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.displayText=displayText;
  this.guestIpType=guestIpType;
  this.useLocalStorage=useLocalStorage;
}",0.992
107241,"@Override public NetworkOffering.GuestIpType getGuestIpType(){
  return guestIpType;
}","@Override public Network.GuestIpType getGuestIpType(){
  return guestIpType;
}",0.951219512195122
107242,"public ServiceOffering21VO(String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,NetworkOffering.GuestIpType guestIpType,boolean useLocalStorage,boolean recreatable,String tags){
  super(name,displayText,false,tags,recreatable,useLocalStorage);
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.guestIpType=guestIpType;
}","public ServiceOffering21VO(String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,Network.GuestIpType guestIpType,boolean useLocalStorage,boolean recreatable,String tags){
  super(name,displayText,false,tags,recreatable,useLocalStorage);
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.guestIpType=guestIpType;
}",0.9917695473251028
107243,"public void setGuestIpType(NetworkOffering.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}","public void setGuestIpType(Network.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}",0.9591836734693876
107244,"@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(""String_Node_Str"" + req.getRemoteAddr());
  auditTrailSb.append(""String_Node_Str"" + req.getMethod() + ""String_Node_Str"");
  String responseType=BaseCmd.RESPONSE_TYPE_XML;
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  try {
    HttpSession session=req.getSession(false);
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute(""String_Node_Str"");
          Account account=(Account)session.getAttribute(""String_Node_Str"");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,""String_Node_Str"" + userId + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append(""String_Node_Str"");
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),HttpServletResponse.SC_OK,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        auditTrailSb.append(""String_Node_Str"");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(""String_Node_Str"" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(""String_Node_Str"" + domain);
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,""String_Node_Str"" + session.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ ((Account)session.getAttribute(""String_Node_Str"")).getId()+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,HttpServletResponse.SC_OK,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(""String_Node_Str"" + BaseCmd.ACCOUNT_ERROR + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(BaseCmd.ACCOUNT_ERROR,ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,BaseCmd.ACCOUNT_ERROR,responseType);
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount(),null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      Long domainId=(Long)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str""+ ""String_Node_Str"");
          String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"",params,responseType);
          writeResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,""String_Node_Str"" + UserContext.current().getCallerUserId() + ""String_Node_Str""+ UserContext.current().getCaller().getId()+ ""String_Node_Str""+ (session != null ? session.getId() : null)+ ""String_Node_Str"");
      try {
        String response=_apiServer.handleRequest(params,true,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",HttpServletResponse.SC_OK,responseType);
      }
 catch (      ServerApiException se) {
        String serializedResponseText=_apiServer.getSerializedApiError(se.getErrorCode(),se.getDescription(),params,responseType);
        writeResponse(resp,serializedResponseText,se.getErrorCode(),responseType);
        auditTrailSb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
      writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  InvalidParameterException ipe) {
    auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ipe.getMessage());
    String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage(),params,responseType);
    writeResponse(resp,serializedResponse,HttpServletResponse.SC_NOT_FOUND,responseType);
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
    auditTrailSb.append(""String_Node_Str"");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}","@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(""String_Node_Str"" + req.getRemoteAddr());
  auditTrailSb.append(""String_Node_Str"" + req.getMethod() + ""String_Node_Str"");
  String responseType=BaseCmd.RESPONSE_TYPE_XML;
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  try {
    HttpSession session=req.getSession(false);
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute(""String_Node_Str"");
          Account account=(Account)session.getAttribute(""String_Node_Str"");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,""String_Node_Str"" + userId + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append(""String_Node_Str"");
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),HttpServletResponse.SC_OK,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        auditTrailSb.append(""String_Node_Str"");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(""String_Node_Str"" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(""String_Node_Str"" + domain);
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,""String_Node_Str"" + session.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ ((Account)session.getAttribute(""String_Node_Str"")).getId()+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,HttpServletResponse.SC_OK,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(""String_Node_Str"" + BaseCmd.ACCOUNT_ERROR + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(BaseCmd.ACCOUNT_ERROR,ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,BaseCmd.ACCOUNT_ERROR,responseType);
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount(),null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      Long domainId=(Long)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str""+ ""String_Node_Str"");
          String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"",params,responseType);
          writeResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,""String_Node_Str"" + UserContext.current().getCallerUserId() + ""String_Node_Str""+ UserContext.current().getCaller().getId()+ ""String_Node_Str""+ (session != null ? session.getId() : null)+ ""String_Node_Str"");
      try {
        String response=_apiServer.handleRequest(params,false,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",HttpServletResponse.SC_OK,responseType);
      }
 catch (      ServerApiException se) {
        String serializedResponseText=_apiServer.getSerializedApiError(se.getErrorCode(),se.getDescription(),params,responseType);
        writeResponse(resp,serializedResponseText,se.getErrorCode(),responseType);
        auditTrailSb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
      writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  InvalidParameterException ipe) {
    auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ipe.getMessage());
    String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage(),params,responseType);
    writeResponse(resp,serializedResponse,HttpServletResponse.SC_NOT_FOUND,responseType);
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
    auditTrailSb.append(""String_Node_Str"");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}",0.9996292961923424
107245,"public Long getNetworkId(){
}","public Long getNetworkId(){
  Network network=_networkService.getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
 else {
    return network.getId();
  }
}",0.2222222222222222
107246,"public long getEntityOwnerId(){
}","public long getEntityOwnerId(){
  return _networkService.getNetwork(networkId).getAccountId();
}",0.5116279069767442
107247,"@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (vnetRange != null && zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  if (dnsUpdate) {
    List<DomainRouterVO> DomainRouters=_domrDao.listByDataCenter(zoneId);
    for (    DomainRouterVO domR : DomainRouters) {
      domR.setDns1(dns1);
      domR.setDns2(dns2);
      _domrDao.update(domR.getId(),domR);
    }
    List<VMInstanceVO> ConsoleProxies=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.ConsoleProxy);
    for (    VMInstanceVO consoleVm : ConsoleProxies) {
      ConsoleProxyVO proxy=_consoleDao.findById(consoleVm.getId());
      if (proxy != null) {
        proxy.setDns1(dns1);
        proxy.setDns2(dns2);
        _consoleDao.update(proxy.getId(),proxy);
      }
    }
    List<VMInstanceVO> storageVms=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.SecondaryStorageVm);
    for (    VMInstanceVO storageVm : storageVms) {
      SecondaryStorageVmVO secStorageVm=_secStorageDao.findById(storageVm.getId());
      if (secStorageVm != null) {
        secStorageVm.setDns1(dns1);
        secStorageVm.setDns2(dns2);
        _secStorageDao.update(secStorageVm.getId(),secStorageVm);
      }
    }
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_ZONE_EDIT,""String_Node_Str"" + zone.getName() + ""String_Node_Str"",""String_Node_Str"" + zone.getId(),""String_Node_Str"" + dns1,""String_Node_Str"" + dns2,""String_Node_Str"" + internalDns1,""String_Node_Str"" + internalDns2,""String_Node_Str"" + vnetRange,""String_Node_Str"" + guestCidr);
  return zone;
}","@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (vnetRange != null && zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  if (dnsUpdate) {
    List<DomainRouterVO> DomainRouters=_domrDao.listByDataCenter(zoneId);
    for (    DomainRouterVO domR : DomainRouters) {
      domR.setDns1(dns1);
      domR.setDns2(dns2);
      _domrDao.update(domR.getId(),domR);
    }
    List<VMInstanceVO> ConsoleProxies=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.ConsoleProxy);
    for (    VMInstanceVO consoleVm : ConsoleProxies) {
      ConsoleProxyVO proxy=_consoleDao.findById(consoleVm.getId());
      if (proxy != null) {
        proxy.setDns1(dns1);
        proxy.setDns2(dns2);
        _consoleDao.update(proxy.getId(),proxy);
      }
    }
    List<VMInstanceVO> storageVms=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.SecondaryStorageVm);
    for (    VMInstanceVO storageVm : storageVms) {
      SecondaryStorageVmVO secStorageVm=_secStorageDao.findById(storageVm.getId());
      if (secStorageVm != null) {
        secStorageVm.setDns1(dns1);
        secStorageVm.setDns2(dns2);
        _secStorageDao.update(secStorageVm.getId(),secStorageVm);
      }
    }
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_ZONE_EDIT,""String_Node_Str"" + zone.getName() + ""String_Node_Str"",""String_Node_Str"" + zone.getId(),""String_Node_Str"" + dns1,""String_Node_Str"" + dns2,""String_Node_Str"" + internalDns1,""String_Node_Str"" + internalDns2,""String_Node_Str"" + vnetRange,""String_Node_Str"" + guestCidr);
  return zone;
}",0.8898183556405354
107248,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouterInternal(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.stopRouterInternal(vmInstance.getId())) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (!_routerMgr.stopRouterInternal(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (!_routerMgr.stopRouterInternal(vmInstance.getId())) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}",0.999820143884892
107249,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  Boolean isSystem=cmd.getIsSystem();
  Long accountId=null;
  if (isSystem == null) {
    isSystem=false;
  }
  if (isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (!isSystem) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",true);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TrafficType.Public);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",NetworkType.Advanced.toString());
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
  if (accountName == null && domainId == null) {
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,1L);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  Boolean isSystem=cmd.getIsSystem();
  Long accountId=null;
  if (isSystem == null) {
    isSystem=false;
  }
  if (isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (!isSystem) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",true);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TrafficType.Public);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",NetworkType.Advanced.toString());
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (account.getType() != Account.ACCOUNT_TYPE_ADMIN || (accountName != null && domainId != null)) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
  }
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}",0.9401072705601908
107250,"@Override public void reserve(NicProfile nic,Network config,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  Pod pod=dest.getPod();
  Pair<String,Long> ip=_dcDao.allocatePrivateIpAddress(dest.getDataCenter().getId(),dest.getPod().getId(),nic.getId(),context.getReservationId());
  if (ip == null) {
    throw new InsufficientAddressCapacityException(""String_Node_Str"",Pod.class,pod.getId());
  }
  nic.setIp4Address(ip.first());
  nic.setMacAddress(NetUtils.long2Mac(ip.second()));
  nic.setGateway(pod.getGateway());
  nic.setFormat(AddressFormat.Ip4);
  String netmask=NetUtils.getCidrSubNet(pod.getCidrAddress(),pod.getCidrSize());
  nic.setNetmask(netmask);
  nic.setBroadcastType(BroadcastDomainType.Native);
  nic.setBroadcastUri(null);
  nic.setIsolationUri(null);
  nic.setFormat(AddressFormat.Ip4);
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
}","@Override public void reserve(NicProfile nic,Network config,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  Pod pod=dest.getPod();
  Pair<String,Long> ip=_dcDao.allocatePrivateIpAddress(dest.getDataCenter().getId(),dest.getPod().getId(),nic.getId(),context.getReservationId());
  if (ip == null) {
    throw new InsufficientAddressCapacityException(""String_Node_Str"",Pod.class,pod.getId());
  }
  nic.setIp4Address(ip.first());
  nic.setMacAddress(NetUtils.long2Mac(ip.second()));
  nic.setGateway(pod.getGateway());
  nic.setFormat(AddressFormat.Ip4);
  String netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
  nic.setNetmask(netmask);
  nic.setBroadcastType(BroadcastDomainType.Native);
  nic.setBroadcastUri(null);
  nic.setIsolationUri(null);
  nic.setFormat(AddressFormat.Ip4);
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
}",0.9851632047477744
107251,"@DB(txn=false) protected void prepareAttribute(final int j,final PreparedStatement pstmt,final Attribute attr,Object value) throws SQLException {
  if (attr.is(Attribute.Flag.DaoGenerated) && value == null) {
    value=generateValue(attr);
    if (attr.field == null) {
      pstmt.setObject(j,value);
      return;
    }
  }
  if (attr.field.getType() == String.class) {
    final String str=(String)value;
    if (str == null) {
      pstmt.setString(j,null);
      return;
    }
    final Column column=attr.field.getAnnotation(Column.class);
    final int length=column != null ? column.length() : 255;
    if (length < str.length()) {
      try {
        pstmt.setBytes(j,str.substring(0,column.length()).getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
 else {
      try {
        pstmt.setBytes(j,str.getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
 else   if (attr.field.getType() == Date.class) {
    final Date date=(Date)value;
    if (date == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
  }
 else   if (attr.field.getType() == Calendar.class) {
    final Calendar cal=(Calendar)value;
    if (cal == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
  }
 else   if (attr.field.getType().isEnum()) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.STRING : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setInt(j,value == null ? null : ((Enum<?>)value).ordinal());
    }
  }
 else   if (attr.field.getType() == URI.class) {
    pstmt.setString(j,value == null ? null : value.toString());
  }
 else   if (attr.field.getType() == URL.class) {
    pstmt.setURL(j,(URL)value);
  }
 else   if (attr.field.getType() == byte[].class) {
    pstmt.setBytes(j,(byte[])value);
  }
 else   if (attr.field.getType() == Ip.class) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.ORDINAL : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setLong(j,value == null ? null : ((Ip)value).longValue());
    }
  }
 else {
    pstmt.setObject(j,value);
  }
}","@DB(txn=false) protected void prepareAttribute(final int j,final PreparedStatement pstmt,final Attribute attr,Object value) throws SQLException {
  if (attr.is(Attribute.Flag.DaoGenerated) && value == null) {
    value=generateValue(attr);
    if (attr.field == null) {
      pstmt.setObject(j,value);
      return;
    }
  }
  if (attr.field.getType() == String.class) {
    final String str=(String)value;
    if (str == null) {
      pstmt.setString(j,null);
      return;
    }
    final Column column=attr.field.getAnnotation(Column.class);
    final int length=column != null ? column.length() : 255;
    if (length < str.length()) {
      try {
        pstmt.setBytes(j,str.substring(0,column.length()).getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
 else {
      try {
        pstmt.setBytes(j,str.getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
 else   if (attr.field.getType() == Date.class) {
    final Date date=(Date)value;
    if (date == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
  }
 else   if (attr.field.getType() == Calendar.class) {
    final Calendar cal=(Calendar)value;
    if (cal == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
  }
 else   if (attr.field.getType().isEnum()) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.STRING : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setInt(j,value == null ? null : ((Enum<?>)value).ordinal());
    }
  }
 else   if (attr.field.getType() == URI.class) {
    pstmt.setString(j,value == null ? null : value.toString());
  }
 else   if (attr.field.getType() == URL.class) {
    pstmt.setURL(j,(URL)value);
  }
 else   if (attr.field.getType() == byte[].class) {
    pstmt.setBytes(j,(byte[])value);
  }
 else   if (attr.field.getType() == Ip.class) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.ORDINAL : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setLong(j,value == null ? null : (value instanceof Ip) ? ((Ip)value).longValue() : NetUtils.ip2Long((String)value));
    }
  }
 else {
    pstmt.setObject(j,value);
  }
}",0.9918411748708186
107252,"public SnapshotVO(long id,long accountId,long volumeId,String path,String name,short snapshotType,String typeDescription){
  this.id=id;
  this.accountId=accountId;
  this.volumeId=volumeId;
  this.path=path;
  this.name=name;
  this.snapshotType=snapshotType;
  this.typeDescription=typeDescription;
  this.status=Status.Creating;
  this.prevSnapshotId=0;
}","public SnapshotVO(long id,long accountId,long volumeId,String path,String name,short snapshotType,String typeDescription,HypervisorType hypervisorType){
  this.id=id;
  this.accountId=accountId;
  this.volumeId=volumeId;
  this.path=path;
  this.name=name;
  this.snapshotType=snapshotType;
  this.typeDescription=typeDescription;
  this.status=Status.Creating;
  this.prevSnapshotId=0;
  this.hypervisorType=hypervisorType;
}",0.9132653061224488
107253,"@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Long origVolumeId=snapshot.getVolumeId();
  VolumeVO originalVolume=_volsDao.findById(origVolumeId);
  VMTemplateVO template=null;
  if (originalVolume != null) {
    template=_templateDao.findById(originalVolume.getTemplateId());
  }
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot,template,originalVolume.getSize());
  createdVolume=volumeDetails.first();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long templateId=originalVolume.getTemplateId();
  ;
  Long diskOfferingId=originalVolume.getDiskOfferingId();
  long sizeMB=createdVolume.getSize() / (1024 * 1024);
  if (createdVolume.getPath() != null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,templateId,sizeMB);
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}","@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Long origVolumeId=snapshot.getVolumeId();
  VolumeVO originalVolume=_volsDao.findById(origVolumeId);
  VMTemplateVO template=null;
  if (originalVolume != null) {
    template=_templateDao.findById(originalVolume.getTemplateId());
  }
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot,originalVolume.getSize());
  createdVolume=volumeDetails.first();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long templateId=originalVolume.getTemplateId();
  ;
  Long diskOfferingId=originalVolume.getDiskOfferingId();
  long sizeMB=createdVolume.getSize() / (1024 * 1024);
  if (createdVolume.getPath() != null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,templateId,sizeMB);
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}",0.9959035047792444
107254,"@Override @DB public VMTemplateVO createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  SnapshotVO snapshot=null;
  if (snapshotId != null) {
    snapshot=_snapshotDao.findById(snapshotId);
    volumeId=snapshot.getVolumeId();
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  String vmName=_storageMgr.getVmNameOnVolume(volume);
  if (snapshotId == null && !_storageMgr.volumeInactive(volume)) {
    String msg=""String_Node_Str"" + volume.getName() + ""String_Node_Str"";
    if (s_logger.isInfoEnabled()) {
      s_logger.info(msg);
    }
    throw new CloudRuntimeException(msg);
  }
  SnapshotCommand cmd=null;
  VMTemplateVO privateTemplate=null;
  long zoneId=volume.getDataCenterId();
  String uniqueName=getRandomPrivateTemplateName();
  HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  if (secondaryStorageHost == null || secondaryStorageURL == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
  }
  if (snapshotId != null) {
    volume=_volsDao.findById(volumeId);
    StringBuilder userFolder=new StringBuilder();
    Formatter userFolderFormat=new Formatter(userFolder);
    userFolderFormat.format(""String_Node_Str"",snapshot.getAccountId());
    String name=command.getTemplateName();
    String backupSnapshotUUID=snapshot.getBackupSnapshotId();
    if (backupSnapshotUUID == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    String origTemplateInstallPath=null;
    cmd=new CreatePrivateTemplateFromSnapshotCommand(_storageMgr.getPrimaryStorageNameLabel(volume),secondaryStorageURL,dcId,accountId,snapshot.getVolumeId(),backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,templateId,name);
  }
 else   if (volumeId != null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId);
    }
    if (volume.getPoolId() == null) {
      _templateDao.remove(templateId);
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=_vmDao.findById(instanceId);
      State vmState=vm.getState();
      if (!vmState.equals(State.Stopped) && !vmState.equals(State.Destroyed)) {
        throw new CloudRuntimeException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
      }
    }
    cmd=new CreatePrivateTemplateFromVolumeCommand(secondaryStorageURL,templateId,volume.getAccountId(),command.getTemplateName(),uniqueName,volume.getPath(),vmName);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  CreatePrivateTemplateAnswer answer=(CreatePrivateTemplateAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,null);
  if ((answer != null) && answer.getResult()) {
    privateTemplate=_templateDao.findById(templateId);
    Long origTemplateId=volume.getTemplateId();
    VMTemplateVO origTemplate=null;
    if (origTemplateId != null) {
      origTemplate=_templateDao.findById(origTemplateId);
    }
    if ((origTemplate != null) && !Storage.ImageFormat.ISO.equals(origTemplate.getFormat())) {
      privateTemplate.setRequiresHvm(origTemplate.requiresHvm());
      privateTemplate.setBits(origTemplate.getBits());
    }
 else {
      privateTemplate.setRequiresHvm(true);
      privateTemplate.setBits(64);
    }
    String answerUniqueName=answer.getUniqueName();
    if (answerUniqueName != null) {
      privateTemplate.setUniqueName(answerUniqueName);
    }
 else {
      privateTemplate.setUniqueName(uniqueName);
    }
    ImageFormat format=answer.getImageFormat();
    if (format != null) {
      privateTemplate.setFormat(format);
    }
 else {
      privateTemplate.setFormat(ImageFormat.RAW);
    }
    _templateDao.update(templateId,privateTemplate);
    _templateDao.addTemplateToZone(privateTemplate,zoneId);
    VMTemplateHostVO templateHostVO=new VMTemplateHostVO(secondaryStorageHost.getId(),templateId);
    templateHostVO.setDownloadPercent(100);
    templateHostVO.setDownloadState(Status.DOWNLOADED);
    templateHostVO.setInstallPath(answer.getPath());
    templateHostVO.setLastUpdated(new Date());
    templateHostVO.setSize(answer.getVirtualSize());
    templateHostVO.setPhysicalSize(answer.getphysicalSize());
    _templateHostDao.persist(templateHostVO);
    _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.template);
  }
 else {
    _templateDao.remove(templateId);
    throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
  }
  return privateTemplate;
}","@Override @DB public VMTemplateVO createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  SnapshotVO snapshot=null;
  if (snapshotId != null) {
    snapshot=_snapshotDao.findById(snapshotId);
    volumeId=snapshot.getVolumeId();
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  String vmName=_storageMgr.getVmNameOnVolume(volume);
  if (snapshotId == null && !_storageMgr.volumeInactive(volume)) {
    String msg=""String_Node_Str"" + volume.getName() + ""String_Node_Str"";
    if (s_logger.isInfoEnabled()) {
      s_logger.info(msg);
    }
    throw new CloudRuntimeException(msg);
  }
  SnapshotCommand cmd=null;
  VMTemplateVO privateTemplate=null;
  long zoneId=volume.getDataCenterId();
  String uniqueName=getRandomPrivateTemplateName();
  HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  if (secondaryStorageHost == null || secondaryStorageURL == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
  }
  if (snapshotId != null) {
    volume=_volsDao.findById(volumeId);
    StringBuilder userFolder=new StringBuilder();
    Formatter userFolderFormat=new Formatter(userFolder);
    userFolderFormat.format(""String_Node_Str"",snapshot.getAccountId());
    String name=command.getTemplateName();
    String backupSnapshotUUID=snapshot.getBackupSnapshotId();
    if (backupSnapshotUUID == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    String origTemplateInstallPath=null;
    cmd=new CreatePrivateTemplateFromSnapshotCommand(_storageMgr.getPrimaryStorageNameLabel(volume),secondaryStorageURL,dcId,accountId,snapshot.getVolumeId(),backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,templateId,name);
  }
 else   if (volumeId != null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId);
    }
    if (volume.getPoolId() == null) {
      _templateDao.remove(templateId);
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=_vmDao.findById(instanceId);
      State vmState=vm.getState();
      if (!vmState.equals(State.Stopped) && !vmState.equals(State.Destroyed)) {
        throw new CloudRuntimeException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
      }
    }
    cmd=new CreatePrivateTemplateFromVolumeCommand(secondaryStorageURL,templateId,volume.getAccountId(),command.getTemplateName(),uniqueName,volume.getPath(),vmName);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  CreatePrivateTemplateAnswer answer=(CreatePrivateTemplateAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,null);
  if ((answer != null) && answer.getResult()) {
    privateTemplate=_templateDao.findById(templateId);
    Long origTemplateId=volume.getTemplateId();
    VMTemplateVO origTemplate=null;
    if (origTemplateId != null) {
      origTemplate=_templateDao.findById(origTemplateId);
    }
    if ((origTemplate != null) && !Storage.ImageFormat.ISO.equals(origTemplate.getFormat())) {
      privateTemplate.setRequiresHvm(origTemplate.requiresHvm());
      privateTemplate.setBits(origTemplate.getBits());
    }
 else {
      privateTemplate.setRequiresHvm(true);
      privateTemplate.setBits(64);
    }
    String answerUniqueName=answer.getUniqueName();
    if (answerUniqueName != null) {
      privateTemplate.setUniqueName(answerUniqueName);
    }
 else {
      privateTemplate.setUniqueName(uniqueName);
    }
    ImageFormat format=answer.getImageFormat();
    if (format != null) {
      privateTemplate.setFormat(format);
    }
 else {
      privateTemplate.setFormat(ImageFormat.RAW);
    }
    if (snapshot != null)     privateTemplate.setHypervisorType(snapshot.getHypervisorType());
    _templateDao.update(templateId,privateTemplate);
    _templateDao.addTemplateToZone(privateTemplate,zoneId);
    VMTemplateHostVO templateHostVO=new VMTemplateHostVO(secondaryStorageHost.getId(),templateId);
    templateHostVO.setDownloadPercent(100);
    templateHostVO.setDownloadState(Status.DOWNLOADED);
    templateHostVO.setInstallPath(answer.getPath());
    templateHostVO.setLastUpdated(new Date());
    templateHostVO.setSize(answer.getVirtualSize());
    templateHostVO.setPhysicalSize(answer.getphysicalSize());
    _templateHostDao.persist(templateHostVO);
    _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.template);
  }
 else {
    _templateDao.remove(templateId);
    throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
  }
  return privateTemplate;
}",0.9906339347333136
107255,"private UserAccount getUserAccount(String username,String password,Long domainId){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
  }
  UserAccount userAccount=_userAccountDao.getUserAccount(username,domainId);
  if (userAccount == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    }
    return null;
  }
  DomainVO domain=_domainDao.findById(domainId);
  String domainName=null;
  if (domain != null) {
    domainName=domain.getName();
  }
  if (!userAccount.getState().equals(""String_Node_Str"") || !userAccount.getAccountState().equals(""String_Node_Str"")) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
    throw new CloudAuthenticationException(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
  }
  Enumeration<UserAuthenticator> en=_userAuthenticators.enumeration();
  UserAuthenticator authenticator=en.nextElement();
  boolean authenticated=authenticator.authenticate(username,password,domainId);
  if (authenticated) {
    return userAccount;
  }
 else {
    return null;
  }
}","private UserAccount getUserAccount(String username,String password,Long domainId){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
  }
  UserAccount userAccount=_userAccountDao.getUserAccount(username,domainId);
  if (userAccount == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    }
    return null;
  }
  DomainVO domain=_domainDao.findById(domainId);
  String domainName=null;
  if (domain != null) {
    domainName=domain.getName();
  }
  if (!userAccount.getState().equalsIgnoreCase(Account.State.Enabled.toString()) || !userAccount.getAccountState().equalsIgnoreCase(Account.State.Enabled.toString())) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
    throw new CloudAuthenticationException(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
  }
  Enumeration<UserAuthenticator> en=_userAuthenticators.enumeration();
  UserAuthenticator authenticator=en.nextElement();
  boolean authenticated=authenticator.authenticate(username,password,domainId);
  if (authenticated) {
    return userAccount;
  }
 else {
    return null;
  }
}",0.9527498063516654
107256,"@Override public void create(){
  long id=_snapshotService.getNextInSequence(this);
  this.setEntityId(id);
}","@Override public void create(){
  Long id=_snapshotService.getNextInSequence(this);
  this.setEntityId(id);
}",0.9908256880733946
107257,"@Override public void execute(){
  try {
    Snapshot snapshot=_snapshotService.createSnapshot(this);
    if (snapshot != null) {
      SnapshotResponse response=_responseGenerator.createSnapshotResponse(snapshot);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volumeId);
    }
  }
 catch (  ResourceAllocationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,ex.getMessage());
  }
}","@Override public void execute(){
  try {
    if (this.getEntityId() == null) {
      Long id=_snapshotService.getNextInSequence(this);
      this.setEntityId(id);
    }
    Snapshot snapshot=_snapshotService.createSnapshot(this);
    if (snapshot != null) {
      SnapshotResponse response=_responseGenerator.createSnapshotResponse(snapshot);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volumeId);
    }
  }
 catch (  ResourceAllocationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,ex.getMessage());
  }
}",0.9025875190258752
107258,"@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId) throws ResourceAllocationException {
  VolumeVO v=_volsDao.findById(volumeId);
  if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
    UserVmVO uservm=_vmDao.findById(v.getInstanceId());
    if (uservm != null) {
      UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
      if (vm == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  Long poolId=v.getPoolId();
  if (poolId == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}","@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId) throws ResourceAllocationException {
  VolumeVO v=_volsDao.findById(volumeId);
  if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
    UserVmVO uservm=_vmDao.findById(v.getInstanceId());
    if (uservm != null) {
      UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
      if (vm == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  Long poolId=v.getPoolId();
  if (poolId == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    if (snapshotId != null) {
      postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    }
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}",0.9925373134328358
107259,"@DB protected void scheduleSnapshots(){
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + displayTime);
  List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + snapshotsToBeExecuted.size() + ""String_Node_Str""+ displayTime);
  long userId=1;
  for (  SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    long policyId=snapshotToBeExecuted.getPolicyId();
    long volumeId=snapshotToBeExecuted.getVolumeId();
    if (s_logger.isDebugEnabled()) {
      Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
      displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
      s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ snapshotToBeExecuted.getId()+ ""String_Node_Str""+ displayTime);
    }
    long snapshotScheId=snapshotToBeExecuted.getId();
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    try {
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquireInLockTable(snapshotScheId);
      Map<String,String> params=new HashMap<String,String>();
      params.put(""String_Node_Str"",""String_Node_Str"" + volumeId);
      params.put(""String_Node_Str"",""String_Node_Str"" + policyId);
      AsyncJobVO job=new AsyncJobVO();
      job.setUserId(userId);
      job.setAccountId(1L);
      job.setCmd(CreateSnapshotCmd.class.getName());
      job.setCmdInfo(GsonHelper.getBuilder().create().toJson(params));
      long jobId=_asyncMgr.submitAsyncJob(job);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
  finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(snapshotScheId);
      }
    }
  }
}","@DB protected void scheduleSnapshots(){
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + displayTime);
  List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + snapshotsToBeExecuted.size() + ""String_Node_Str""+ displayTime);
  long userId=1;
  for (  SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    long policyId=snapshotToBeExecuted.getPolicyId();
    long volumeId=snapshotToBeExecuted.getVolumeId();
    if (s_logger.isDebugEnabled()) {
      Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
      displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
      s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ snapshotToBeExecuted.getId()+ ""String_Node_Str""+ displayTime);
    }
    long snapshotScheId=snapshotToBeExecuted.getId();
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    try {
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquireInLockTable(snapshotScheId);
      Map<String,String> params=new HashMap<String,String>();
      params.put(""String_Node_Str"",""String_Node_Str"" + volumeId);
      params.put(""String_Node_Str"",""String_Node_Str"" + policyId);
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
      AsyncJobVO job=new AsyncJobVO();
      job.setUserId(userId);
      job.setAccountId(1L);
      job.setCmd(CreateSnapshotCmd.class.getName());
      job.setCmdInfo(GsonHelper.getBuilder().create().toJson(params));
      long jobId=_asyncMgr.submitAsyncJob(job);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
  finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(snapshotScheId);
      }
    }
  }
}",0.9715173485240808
107260,"protected T findById(ID id,boolean removed,Boolean lock){
  StringBuilder sql=new StringBuilder(_selectByIdSql);
  if (!removed && _removed != null) {
    sql.append(""String_Node_Str"").append(_removed.first());
  }
  if (lock != null) {
    sql.append(lock ? FOR_UPDATE_CLAUSE : SHARE_MODE_CLAUSE);
  }
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    if (_idField.getAnnotation(EmbeddedId.class) == null) {
      pstmt.setObject(1,id);
    }
    ResultSet rs=pstmt.executeQuery();
    return rs.next() ? toEntityBean(rs,true) : null;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","protected T findById(ID id,boolean removed,Boolean lock){
  StringBuilder sql=new StringBuilder(_selectByIdSql);
  if (!removed && _removed != null) {
    sql.append(""String_Node_Str"").append(_removed.first());
  }
  if (lock != null) {
    sql.append(lock ? FOR_UPDATE_CLAUSE : SHARE_MODE_CLAUSE);
  }
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    if (_idField.getAnnotation(EmbeddedId.class) == null) {
      prepareAttribute(1,pstmt,_idAttributes.get(_table)[0],id);
    }
    ResultSet rs=pstmt.executeQuery();
    return rs.next() ? toEntityBean(rs,true) : null;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}",0.9596879063719116
107261,"boolean mark(long dcId,String ip);","boolean mark(long dcId,Ip ip);",0.875
107262,"@Override public boolean mark(long dcId,String ip){
  SearchCriteria<IPAddressVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",dcId);
  sc.setParameters(""String_Node_Str"",ip);
  IPAddressVO vo=createForUpdate();
  vo.setAllocatedTime(new Date());
  vo.setState(State.Allocated);
  return update(vo,sc) >= 1;
}","@Override public boolean mark(long dcId,Ip ip){
  SearchCriteria<IPAddressVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",dcId);
  sc.setParameters(""String_Node_Str"",ip);
  IPAddressVO vo=createForUpdate();
  vo.setAllocatedTime(new Date());
  vo.setState(State.Allocated);
  return update(vo,sc) >= 1;
}",0.9878048780487804
107263,"private boolean canHandle(GuestIpType ipType,DeployDestination dest){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  if (!dc.getDhcpProvider().equals(Provider.VirtualRouter.getName())) {
    return false;
  }
  return ((ipType == GuestIpType.Virtual && !provider.equals(Provider.VirtualRouter.getName())) || (ipType == GuestIpType.Direct || ipType == GuestIpType.DirectPodBased));
}","private boolean canHandle(GuestIpType ipType,DeployDestination dest){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  return ((ipType == GuestIpType.Virtual && !provider.equals(Provider.VirtualRouter.getName())) || (provider.equals(Provider.VirtualRouter.getName()) && (ipType == GuestIpType.Direct || ipType == GuestIpType.DirectPodBased)));
}",0.8130489335006273
107264,"@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Ip ipAddress=new Ip(cmd.getIpAddress());
  Account caller=UserContext.current().getAccount();
  IPAddressVO ipAddressVO=_ipAddressDao.findById(ipAddress.addr());
  if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress);
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByIpAndNotRevoked(ipAddress);
  _accountMgr.checkAccess(caller,rules.toArray(new PortForwardingRuleVO[rules.size()]));
  return rules;
}","@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Ip ipAddress=new Ip(cmd.getIpAddress());
  Account caller=UserContext.current().getAccount();
  IPAddressVO ipAddressVO=_ipAddressDao.findById(ipAddress.addr());
  if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress);
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByIp(ipAddress);
  _accountMgr.checkAccess(caller,rules.toArray(new PortForwardingRuleVO[rules.size()]));
  return rules;
}",0.8581024349286314
107265,"@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(User.UID_SYSTEM,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
  }
  return toDiskProfile(vol,offering);
}","@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  long userId=UserContext.current().getUserId();
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(userId,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
    _accountMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  return toDiskProfile(vol,offering);
}",0.9314942528735632
107266,"@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters(""String_Node_Str"",BroadcastDomainType.Native);
    sc.setParameters(""String_Node_Str"",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && networks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  return vm;
}","@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters(""String_Node_Str"",BroadcastDomainType.Native);
    sc.setParameters(""String_Node_Str"",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && networks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  return vm;
}",0.9943204868154158
107267,"@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  status=_itMgr.destroy(vm,caller,account);
  if (status) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}","@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  status=_itMgr.destroy(vm,caller,account);
  if (status) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}",0.9563794983642312
107268,"@Override @DB public boolean destroyVirtualMachine(long userId,long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getState() == State.Destroyed || vm.getState() == State.Expunging || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  long startEventId=EventUtils.saveStartedEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId);
  if (!stop(userId,vm)) {
    s_logger.error(""String_Node_Str"" + vmId);
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
    return false;
  }
 else {
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
  if (!destroy(vm)) {
    return false;
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  cleanNetworkRules(userId,vmId);
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    _storageMgr.destroyVolume(volume);
  }
  txn.commit();
  return true;
}","@Override @DB public boolean destroyVirtualMachine(long userId,long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getState() == State.Destroyed || vm.getState() == State.Expunging || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  long startEventId=EventUtils.saveStartedEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId);
  if (!stop(userId,vm)) {
    s_logger.error(""String_Node_Str"" + vmId);
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
    return false;
  }
 else {
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (!destroy(vm)) {
    return false;
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  cleanNetworkRules(userId,vmId);
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    _storageMgr.destroyVolume(volume);
  }
  txn.commit();
  return true;
}",0.9739478957915833
107269,"@SuppressWarnings(""String_Node_Str"") public String handleRequest(Map params,boolean decode,String responseType,StringBuffer auditTrailSb) throws ServerApiException {
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get(""String_Node_Str"");
    if (command == null) {
      s_logger.error(""String_Node_Str"");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace(""String_Node_Str"" + keyStr + ""String_Node_Str""+ ((value == null) ? ""String_Node_Str"" : value[0]));
        }
      }
      throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,""String_Node_Str"");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if (""String_Node_Str"".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        String decodedValue=null;
        if (decode) {
          try {
            decodedValue=URLDecoder.decode(value[0],""String_Node_Str"");
          }
 catch (          UnsupportedEncodingException usex) {
            s_logger.warn(key + ""String_Node_Str"" + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + ""String_Node_Str"" + value[0]);
          }
        }
 else {
          decodedValue=value[0];
        }
        paramMap.put(key,decodedValue);
      }
      String cmdClassName=_apiCommands.getProperty(command[0]);
      if (cmdClassName != null) {
        Class<?> cmdClass=Class.forName(cmdClassName);
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj.setResponseType(responseType);
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        String errorString=""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]);
        s_logger.warn(errorString);
        auditTrailSb.append(""String_Node_Str"" + errorString);
        throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,errorString);
      }
    }
  }
 catch (  Exception ex) {
    if (ex instanceof ServerApiException) {
      throw (ServerApiException)ex;
    }
 else {
      s_logger.error(""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]),ex);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  return response;
}","@SuppressWarnings(""String_Node_Str"") public String handleRequest(Map params,boolean decode,String responseType,StringBuffer auditTrailSb) throws ServerApiException {
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get(""String_Node_Str"");
    if (command == null) {
      s_logger.error(""String_Node_Str"");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace(""String_Node_Str"" + keyStr + ""String_Node_Str""+ ((value == null) ? ""String_Node_Str"" : value[0]));
        }
      }
      throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,""String_Node_Str"");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if (""String_Node_Str"".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        String decodedValue=null;
        if (decode) {
          try {
            decodedValue=URLDecoder.decode(value[0],""String_Node_Str"");
          }
 catch (          UnsupportedEncodingException usex) {
            s_logger.warn(key + ""String_Node_Str"" + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + ""String_Node_Str"" + value[0]);
          }
catch (          IllegalArgumentException iae) {
            s_logger.warn(key + ""String_Node_Str"" + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + ""String_Node_Str"" + value[0]+ ""String_Node_Str"");
          }
        }
 else {
          decodedValue=value[0];
        }
        paramMap.put(key,decodedValue);
      }
      String cmdClassName=_apiCommands.getProperty(command[0]);
      if (cmdClassName != null) {
        Class<?> cmdClass=Class.forName(cmdClassName);
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj.setResponseType(responseType);
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        String errorString=""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]);
        s_logger.warn(errorString);
        auditTrailSb.append(""String_Node_Str"" + errorString);
        throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,errorString);
      }
    }
  }
 catch (  Exception ex) {
    if (ex instanceof ServerApiException) {
      throw (ServerApiException)ex;
    }
 else {
      s_logger.error(""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]),ex);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  return response;
}",0.9566936208445642
107270,"@DB protected void checkIfPodIsDeletable(long podId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  List<String> alert=new ArrayList<String>();
  alert.add(0,""String_Node_Str"");
  alert.add(1,""String_Node_Str"");
  alert.add(2,""String_Node_Str"");
  tablesToCheck.add(alert);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      dbName=""String_Node_Str"";
    }
 else {
      dbName=""String_Node_Str"";
    }
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,podId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}","@DB protected void checkIfPodIsDeletable(long podId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      dbName=""String_Node_Str"";
    }
 else {
      dbName=""String_Node_Str"";
    }
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,podId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}",0.9302214813050728
107271,"private void setStateMachine(){
  _stateMachine=new StateMachine2<State,VirtualMachine.Event,VMInstanceVO>();
  _stateMachine.addTransition(null,VirtualMachine.Event.CreateRequested,State.Creating);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StartRequested,State.Starting);
  _stateMachine.addTransition(State.Error,VirtualMachine.Event.DestroyRequested,State.Expunging);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.DestroyRequested,State.Destroyed);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StopRequested,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationRetry,State.Starting);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationFailed,State.Stopped);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.RecoveryRequested,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.MigrationRequested,State.Destroyed);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnSource,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnDest,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.OperationFailed,State.Expunging);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.registerListeners(_stateListner);
}","private void setStateMachine(){
  _stateMachine=new StateMachine2<State,VirtualMachine.Event,VMInstanceVO>();
  _stateMachine.addTransition(null,VirtualMachine.Event.CreateRequested,State.Creating);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StartRequested,State.Starting);
  _stateMachine.addTransition(State.Error,VirtualMachine.Event.DestroyRequested,State.Expunging);
  _stateMachine.addTransition(State.Error,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.DestroyRequested,State.Destroyed);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StopRequested,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationRetry,State.Starting);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationFailed,State.Stopped);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.RecoveryRequested,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.MigrationRequested,State.Destroyed);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnSource,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnDest,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.OperationFailed,State.Expunging);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.registerListeners(_stateListner);
}",0.9867781975175391
107272,"@Override public void cleanupVolumes(Long vmId){
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  for (  VolumeVO vol : volumesForVm) {
    destroyVolume(vol);
  }
}","@Override public void cleanupVolumes(Long vmId){
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  for (  VolumeVO vol : volumesForVm) {
    if (vol.getVolumeType().equals(VolumeType.ROOT)) {
      destroyVolume(vol);
    }
 else {
      _volsDao.detachVolume(vol.getId());
    }
  }
}",0.7379454926624738
107273,"@DB protected void checkIfZoneIsDeletable(long zoneId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  List<String> alert=new ArrayList<String>();
  alert.add(0,""String_Node_Str"");
  alert.add(1,""String_Node_Str"");
  alert.add(2,""String_Node_Str"");
  tablesToCheck.add(alert);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,""String_Node_Str"");
  hostPodRef.add(1,""String_Node_Str"");
  hostPodRef.add(2,""String_Node_Str"");
  tablesToCheck.add(hostPodRef);
  List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,""String_Node_Str"");
  privateIP.add(1,""String_Node_Str"");
  privateIP.add(2,""String_Node_Str"");
  tablesToCheck.add(privateIP);
  List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,""String_Node_Str"");
  publicIP.add(1,""String_Node_Str"");
  publicIP.add(2,""String_Node_Str"");
  tablesToCheck.add(publicIP);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> vnet=new ArrayList<String>();
  vnet.add(0,""String_Node_Str"");
  vnet.add(1,""String_Node_Str"");
  vnet.add(2,""String_Node_Str"");
  tablesToCheck.add(vnet);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName=""String_Node_Str"";
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,zoneId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}","@DB protected void checkIfZoneIsDeletable(long zoneId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  List<String> alert=new ArrayList<String>();
  alert.add(0,""String_Node_Str"");
  alert.add(1,""String_Node_Str"");
  alert.add(2,""String_Node_Str"");
  tablesToCheck.add(alert);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,""String_Node_Str"");
  hostPodRef.add(1,""String_Node_Str"");
  hostPodRef.add(2,""String_Node_Str"");
  tablesToCheck.add(hostPodRef);
  List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,""String_Node_Str"");
  privateIP.add(1,""String_Node_Str"");
  privateIP.add(2,""String_Node_Str"");
  tablesToCheck.add(privateIP);
  List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,""String_Node_Str"");
  publicIP.add(1,""String_Node_Str"");
  publicIP.add(2,""String_Node_Str"");
  tablesToCheck.add(publicIP);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> vnet=new ArrayList<String>();
  vnet.add(0,""String_Node_Str"");
  vnet.add(1,""String_Node_Str"");
  vnet.add(2,""String_Node_Str"");
  tablesToCheck.add(vnet);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName=""String_Node_Str"";
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,zoneId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}",0.9647245342845818
107274,"@Override public boolean applyLBRules(Network network,List<? extends FirewallRule> rules){
}","@Override public boolean applyLBRules(Network network,List<? extends FirewallRule> rules){
  DomainRouterVO router=_routerDao.findByNetworkConfiguration(network.getId());
  if (router == null) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"");
  }
  String routerControlIpAddress=router.getPrivateIpAddress();
  if (router.getState() == State.Running || router.getState() == State.Starting) {
    Commands cmds=new Commands(OnError.Continue);
    LoadBalancerTO[] lbs=new LoadBalancerTO[rules.size()];
    int i=0;
    for (    FirewallRule fwRule : rules) {
      LoadBalancingRule rule=(LoadBalancingRule)fwRule;
      boolean revoked=(rule.getState().equals(FirewallRule.State.Revoke));
      String protocol=rule.getProtocol();
      String algorithm=rule.getAlgorithm();
      String srcIp=rule.getSourceIpAddress().addr();
      int srcPort=rule.getSourcePortStart();
      List<LbDestination> destinations=rule.getDestinations();
      LoadBalancerTO lb=new LoadBalancerTO(srcIp,srcPort,protocol,algorithm,revoked,false,destinations);
      lbs[i++]=lb;
    }
    LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(lbs);
    cmd.setAccessDetail(RoutingCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(RoutingCommand.ROUTER_NAME,router.getInstanceName());
    cmds.addCommand(cmd);
    return sendCommandsToRouter(router,cmds);
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getState() + ""String_Node_Str"");
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + router.getState());
    throw new ResourceUnavailableException(""String_Node_Str"" + router.getState());
  }
}",0.0980810234541577
107275,"public <T>URI toUri(T value){
  try {
    return new URI(scheme + ""String_Node_Str"" + value.toString());
  }
 catch (  URISyntaxException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + value);
  }
}","public <T>URI toUri(T value){
}",0.2551440329218107
107276,"protected void getIp(NicProfile nic,DataCenter dc,VirtualMachineProfile<? extends VirtualMachine> vm,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    PublicIp ip=_networkMgr.assignPublicIpAddress(dc.getId(),vm.getOwner(),VlanType.VirtualNetwork,null);
    nic.setIp4Address(ip.getAddress());
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
    nic.setBroadcastType(BroadcastDomainType.Vlan);
    nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
    nic.setFormat(AddressFormat.Ip4);
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}","protected void getIp(NicProfile nic,DataCenter dc,VirtualMachineProfile<? extends VirtualMachine> vm,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    PublicIp ip=_networkMgr.assignPublicIpAddress(dc.getId(),vm.getOwner(),dc.getNetworkType().equals(NetworkType.Basic) ? VlanType.DirectAttached : VlanType.VirtualNetwork,null);
    nic.setIp4Address(ip.getAddress());
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
    nic.setBroadcastType(BroadcastDomainType.Vlan);
    nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
    nic.setFormat(AddressFormat.Ip4);
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}",0.960172228202368
107277,"private Discoverer getMatchingDiscover(String hypervisorType){
  Enumeration<Discoverer> en=_discoverers.enumeration();
  while (en.hasMoreElements()) {
    Discoverer discoverer=en.nextElement();
    if (discoverer.matchHypervisor(hypervisorType))     return discoverer;
  }
  return null;
}","private Discoverer getMatchingDiscover(Hypervisor.HypervisorType hypervisorType){
  Enumeration<Discoverer> en=_discoverers.enumeration();
  while (en.hasMoreElements()) {
    Discoverer discoverer=en.nextElement();
    if (discoverer.getHypervisorType() == hypervisorType)     return discoverer;
  }
  return null;
}",0.8834154351395731
107278,"@Override public List<? extends Host> discoverExternalCluster(AddExternalClusterCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  URI uri=null;
  if (_dcDao.findById(dcId) == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.valueOf(cmd.getHypervisor());
  if (hypervisorType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Discoverer discoverer=getMatchingDiscover(cmd.getHypervisor());
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long clusterId=0;
  if (clusterName != null) {
    ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
    cluster.setHypervisorType(cmd.getHypervisor());
    cluster.setClusterType(Cluster.ClusterType.ExternalManaged);
    try {
      cluster=_clusterDao.persist(cluster);
    }
 catch (    Exception e) {
      cluster=_clusterDao.findBy(clusterName,podId);
      if (cluster == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
      }
    }
    clusterId=cluster.getId();
  }
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  List<HostVO> hosts=new ArrayList<HostVO>();
  Map<? extends ServerResource,Map<String,String>> resources=null;
  try {
    resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
  }
 catch (  Exception e) {
    s_logger.info(""String_Node_Str"" + discoverer.getName());
  }
  if (resources != null) {
    for (    Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
      ServerResource resource=entry.getKey();
      AgentAttache attache=simulateStart(resource,entry.getValue(),true);
      if (attache != null) {
        hosts.add(_hostDao.findById(attache.getId()));
      }
      discoverer.postDiscovery(hosts,_nodeId);
    }
    s_logger.info(""String_Node_Str"" + discoverer.getName());
    return hosts;
  }
  s_logger.warn(""String_Node_Str"" + url);
  throw new DiscoveryException(""String_Node_Str"");
}","@Override public List<? extends Host> discoverExternalCluster(AddExternalClusterCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  URI uri=null;
  if (_dcDao.findById(dcId) == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.valueOf(cmd.getHypervisor());
  if (hypervisorType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long clusterId=0;
  if (clusterName != null) {
    ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
    cluster.setHypervisorType(cmd.getHypervisor());
    cluster.setClusterType(Cluster.ClusterType.ExternalManaged);
    try {
      cluster=_clusterDao.persist(cluster);
    }
 catch (    Exception e) {
      cluster=_clusterDao.findBy(clusterName,podId);
      if (cluster == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
      }
    }
    clusterId=cluster.getId();
  }
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
 else       if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + ""String_Node_Str"");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        AgentAttache attache=simulateStart(resource,entry.getValue(),true);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info(""String_Node_Str"" + discoverer.getName());
      success=true;
      return hosts;
    }
    s_logger.warn(""String_Node_Str"" + url);
    throw new DiscoveryException(""String_Node_Str"");
  }
  finally {
    if (!success) {
      _clusterDao.remove(clusterId);
    }
  }
}",0.9667442178732722
107279,"@Override public AccountVO updateAccount(UpdateAccountCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  boolean success=false;
  Account account=_accountDao.findAccount(accountName,domainId);
  if (account == null) {
    s_logger.error(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account adminAccount=UserContext.current().getAccount();
  if ((adminAccount != null) && (adminAccount.getType() != Account.ACCOUNT_TYPE_ADMIN) && _domainDao.isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
  }
  Account duplicateAcccount=_accountDao.findAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {
    throw new PermissionDeniedException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (account.getAccountName().equals(newAccountName)) {
    success=true;
  }
 else {
    AccountVO acctForUpdate=_accountDao.createForUpdate();
    acctForUpdate.setAccountName(newAccountName);
    success=_accountDao.update(Long.valueOf(account.getId()),acctForUpdate);
  }
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
}","@Override public AccountVO updateAccount(UpdateAccountCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  boolean success=false;
  Account account=_accountDao.findAccount(accountName,domainId);
  if (account == null) {
    s_logger.error(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account adminAccount=UserContext.current().getAccount();
  if ((adminAccount != null) && (adminAccount.getType() != Account.ACCOUNT_TYPE_ADMIN) && _domainDao.isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
  }
  Account duplicateAcccount=_accountDao.findAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getRemoved() == null && duplicateAcccount.getId() != account.getId()) {
    throw new PermissionDeniedException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (account.getAccountName().equals(newAccountName)) {
    success=true;
  }
 else {
    AccountVO acctForUpdate=_accountDao.createForUpdate();
    acctForUpdate.setAccountName(newAccountName);
    success=_accountDao.update(Long.valueOf(account.getId()),acctForUpdate);
  }
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
}",0.9885745375408052
107280,"private String validateConfigurationValue(String name,String value) throws InvalidParameterValueException {
  if (value == null) {
    return null;
  }
  Config c=Config.getConfig(name);
  value=value.trim();
  if (c == null) {
    s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Class<?> type=c.getType();
  if (type.equals(Boolean.class)) {
    if (!(value.equals(""String_Node_Str"") || value.equals(""String_Node_Str""))) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ value);
      return ""String_Node_Str"";
    }
    return null;
  }
  String range=c.getRange();
  if (range == null) {
    return null;
  }
  if (type.equals(String.class)) {
    if (range.equals(""String_Node_Str"")) {
      try {
        if (!NetUtils.isSiteLocalAddress(value)) {
          s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
          return ""String_Node_Str"";
        }
      }
 catch (      NullPointerException e) {
        s_logger.error(""String_Node_Str"" + name);
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      if (!NetUtils.isValidNetmask(value)) {
        s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
        return ""String_Node_Str"";
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      String[] hypervisors=value.split(""String_Node_Str"");
      if (hypervisors == null) {
        return ""String_Node_Str"";
      }
      for (      String hypervisor : hypervisors) {
        if (HypervisorType.getType(hypervisor) == HypervisorType.Any || HypervisorType.getType(hypervisor) == HypervisorType.None) {
          return ""String_Node_Str"";
        }
      }
    }
 else {
      String[] options=range.split(""String_Node_Str"");
      for (      String option : options) {
        if (option.trim().equals(value)) {
          return null;
        }
      }
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
 else   if (type.equals(Integer.class)) {
    String[] options=range.split(""String_Node_Str"");
    if (options.length != 2) {
      String msg=""String_Node_Str"" + range + ""String_Node_Str""+ name+ ""String_Node_Str"";
      s_logger.error(msg);
      return msg;
    }
    int min=Integer.parseInt(options[0]);
    int max=Integer.parseInt(options[1]);
    int val=Integer.parseInt(value);
    if (val < min || val > max) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
  return null;
}","private String validateConfigurationValue(String name,String value) throws InvalidParameterValueException {
  if (value == null) {
    return null;
  }
  Config c=Config.getConfig(name);
  value=value.trim();
  if (c == null) {
    s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Class<?> type=c.getType();
  if (type.equals(Boolean.class)) {
    if (!(value.equals(""String_Node_Str"") || value.equals(""String_Node_Str""))) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ value);
      return ""String_Node_Str"";
    }
    return null;
  }
  if (type.equals(Integer.class) && configValuesForValidation.contains(name)) {
    try {
      int val=Integer.parseInt(value);
      if (val <= 0) {
        throw new InvalidParameterValueException(""String_Node_Str"" + name);
      }
    }
 catch (    NumberFormatException e) {
      s_logger.error(""String_Node_Str"" + name);
      throw new InvalidParameterValueException(""String_Node_Str"" + name);
    }
  }
  String range=c.getRange();
  if (range == null) {
    return null;
  }
  if (type.equals(String.class)) {
    if (range.equals(""String_Node_Str"")) {
      try {
        if (!NetUtils.isSiteLocalAddress(value)) {
          s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
          return ""String_Node_Str"";
        }
      }
 catch (      NullPointerException e) {
        s_logger.error(""String_Node_Str"" + name);
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      if (!NetUtils.isValidNetmask(value)) {
        s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
        return ""String_Node_Str"";
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      String[] hypervisors=value.split(""String_Node_Str"");
      if (hypervisors == null) {
        return ""String_Node_Str"";
      }
      for (      String hypervisor : hypervisors) {
        if (HypervisorType.getType(hypervisor) == HypervisorType.Any || HypervisorType.getType(hypervisor) == HypervisorType.None) {
          return ""String_Node_Str"";
        }
      }
    }
 else {
      String[] options=range.split(""String_Node_Str"");
      for (      String option : options) {
        if (option.trim().equals(value)) {
          return null;
        }
      }
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
 else   if (type.equals(Integer.class)) {
    String[] options=range.split(""String_Node_Str"");
    if (options.length != 2) {
      String msg=""String_Node_Str"" + range + ""String_Node_Str""+ name+ ""String_Node_Str"";
      s_logger.error(msg);
      return msg;
    }
    int min=Integer.parseInt(options[0]);
    int max=Integer.parseInt(options[1]);
    int val=Integer.parseInt(value);
    if (val < min || val > max) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
  return null;
}",0.7834797891036906
107281,"@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _name=name;
  String maxVolumeSizeInGbString=_configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  return true;
}","@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _name=name;
  String maxVolumeSizeInGbString=_configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  populateConfigValuesForValidationSet();
  return true;
}",0.9333333333333332
107282,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}",0.9886596824711092
107283,"@Override public StoragePool allocateToPool(DiskProfile dskCh,DataCenterVO dc,HostPodVO pod,Long clusterId,VMInstanceVO vm,VMTemplateVO template,Set<? extends StoragePool> avoid){
  if (!allocatorIsCorrectType(dskCh,vm)) {
    return null;
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dc.getId(),pod.getId(),clusterId,dskCh.getTags(),null);
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pod.getId());
    }
    return null;
  }
  StatsCollector sc=StatsCollector.getInstance();
  Collections.shuffle(pools);
  for (  StoragePoolVO pool : pools) {
    if (checkPool(avoid,pool,dskCh,template,null,vm,sc)) {
      return pool;
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  if (_dontMatter && pools.size() > 0) {
    return pools.get(0);
  }
 else {
    return null;
  }
}","@Override public StoragePool allocateToPool(DiskProfile dskCh,DataCenterVO dc,HostPodVO pod,Long clusterId,VMInstanceVO vm,VMTemplateVO template,Set<? extends StoragePool> avoid){
  if (!allocatorIsCorrectType(dskCh,vm)) {
    return null;
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dc.getId(),pod.getId(),clusterId,dskCh.getTags(),null);
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pod.getId());
    }
    return null;
  }
  StatsCollector sc=StatsCollector.getInstance();
  Collections.shuffle(pools);
  for (  StoragePoolVO pool : pools) {
    if (checkPool(avoid,pool,dskCh,template,null,vm,sc)) {
      return pool;
    }
 else {
      pools.remove(pool);
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  if (_dontMatter && pools.size() > 0) {
    return pools.get(0);
  }
 else {
    return null;
  }
}",0.9780461031833152
107284,"private void initialize(UserVm vm,ServiceOffering offering,int networkRate,int multicastRate,VirtualRouter router,String imagePath,String guestNetworkId,int utilization,int cpuWeight,int bits,String isoPath,boolean bootFromISO,String guestOSDescription){
  id=vm.getId();
  guestIpAddress=vm.getGuestIpAddress();
  if (router != null)   gateway=router.getPrivateIpAddress();
  ramSize=offering.getRamSize();
  cpu=offering.getCpu();
  this.utilization=utilization;
  this.cpuWeight=cpuWeight;
  this.imagePath=imagePath;
  this.guestNetworkId=guestNetworkId;
  guestMacAddress=vm.getGuestMacAddress();
  vncPassword=vm.getVncPassword();
  hostName=vm.getHostName();
  networkRateMbps=networkRate;
  networkRateMulticastMbps=multicastRate;
  if (bits == 32) {
    arch=""String_Node_Str"";
  }
 else {
    arch=""String_Node_Str"";
  }
  this.isoPath=isoPath;
  this.bootFromISO=bootFromISO;
  this.guestOSDescription=guestOSDescription;
}","private void initialize(UserVm vm,ServiceOffering offering,int networkRate,int multicastRate,VirtualRouter router,String imagePath,String guestNetworkId,int utilization,int cpuWeight,int bits,String isoPath,boolean bootFromISO,String guestOSDescription){
  id=vm.getId();
  guestIpAddress=vm.getGuestIpAddress();
  if (router != null)   gateway=router.getPrivateIpAddress();
  ramSize=offering.getRamSize();
  cpu=offering.getCpu();
  this.utilization=utilization;
  this.cpuWeight=cpuWeight;
  this.imagePath=imagePath;
  this.guestNetworkId=guestNetworkId;
  guestMacAddress=vm.getGuestMacAddress();
  vncPassword=vm.getVncPassword();
  hostName=vm.getName();
  networkRateMbps=networkRate;
  networkRateMulticastMbps=multicastRate;
  if (bits == 32) {
    arch=""String_Node_Str"";
  }
 else {
    arch=""String_Node_Str"";
  }
  this.isoPath=isoPath;
  this.bootFromISO=bootFromISO;
  this.guestOSDescription=guestOSDescription;
}",0.9978540772532188
107285,"public String getBootArgs(){
  String eth1Ip=(proxy.getPrivateIpAddress() == null) ? ""String_Node_Str"" : proxy.getPrivateIpAddress();
  String eth1NetMask=(proxy.getPrivateNetmask() == null) ? ""String_Node_Str"" : proxy.getPrivateNetmask();
  String eth2Ip=(proxy.getPublicIpAddress() == null) ? ""String_Node_Str"" : proxy.getPublicIpAddress();
  String eth2NetMask=(proxy.getPublicNetmask() == null) ? ""String_Node_Str"" : proxy.getPublicNetmask();
  String gateWay=(proxy.getGateway() == null) ? ""String_Node_Str"" : proxy.getGateway();
  String basic=""String_Node_Str"" + proxy.getGuestIpAddress() + ""String_Node_Str""+ proxy.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ proxy.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str"";
  if (proxy.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + proxy.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  if (sslEnabled)   basic=basic + ""String_Node_Str"";
  if (proxy.getPrivateIpAddress() == null || proxy.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}","public String getBootArgs(){
  String eth1Ip=(proxy.getPrivateIpAddress() == null) ? ""String_Node_Str"" : proxy.getPrivateIpAddress();
  String eth1NetMask=(proxy.getPrivateNetmask() == null) ? ""String_Node_Str"" : proxy.getPrivateNetmask();
  String eth2Ip=(proxy.getPublicIpAddress() == null) ? ""String_Node_Str"" : proxy.getPublicIpAddress();
  String eth2NetMask=(proxy.getPublicNetmask() == null) ? ""String_Node_Str"" : proxy.getPublicNetmask();
  String gateWay=(proxy.getGateway() == null) ? ""String_Node_Str"" : proxy.getGateway();
  String basic=""String_Node_Str"" + proxy.getGuestIpAddress() + ""String_Node_Str""+ proxy.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ proxy.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getName()+ ""String_Node_Str"";
  if (proxy.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + proxy.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  if (sslEnabled)   basic=basic + ""String_Node_Str"";
  if (proxy.getPrivateIpAddress() == null || proxy.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}",0.9984164687252574
107286,"public String getBootArgs(){
  String eth2Ip=router.getPublicIpAddress() == null ? ""String_Node_Str"" : router.getPublicIpAddress();
  String basic=""String_Node_Str"" + router.getGuestIpAddress() + ""String_Node_Str""+ router.getGuestNetmask()+ ""String_Node_Str""+ router.getPrivateIpAddress()+ ""String_Node_Str""+ router.getPrivateNetmask()+ ""String_Node_Str""+ router.getGateway()+ ""String_Node_Str""+ router.getDns1()+ ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ mgmt_host;
  if (!router.getPublicMacAddress().equalsIgnoreCase(""String_Node_Str"")) {
    basic=basic + ""String_Node_Str"" + eth2Ip+ ""String_Node_Str""+ router.getPublicNetmask();
  }
  if (router.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + router.getDns2();
  }
  if (getDhcpRange() != null) {
    basic=basic + ""String_Node_Str"" + getDhcpRange();
  }
  if (router.getRole() == Role.DHCP_FIREWALL_LB_PASSWD_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
 else   if (router.getRole() == Role.DHCP_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
  if (router.getDomain() != null) {
    basic+=""String_Node_Str"" + router.getDomain();
  }
  return basic;
}","public String getBootArgs(){
  String eth2Ip=router.getPublicIpAddress() == null ? ""String_Node_Str"" : router.getPublicIpAddress();
  String basic=""String_Node_Str"" + router.getGuestIpAddress() + ""String_Node_Str""+ router.getGuestNetmask()+ ""String_Node_Str""+ router.getPrivateIpAddress()+ ""String_Node_Str""+ router.getPrivateNetmask()+ ""String_Node_Str""+ router.getGateway()+ ""String_Node_Str""+ router.getDns1()+ ""String_Node_Str""+ router.getName()+ ""String_Node_Str""+ mgmt_host;
  if (!router.getPublicMacAddress().equalsIgnoreCase(""String_Node_Str"")) {
    basic=basic + ""String_Node_Str"" + eth2Ip+ ""String_Node_Str""+ router.getPublicNetmask();
  }
  if (router.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + router.getDns2();
  }
  if (getDhcpRange() != null) {
    basic=basic + ""String_Node_Str"" + getDhcpRange();
  }
  if (router.getRole() == Role.DHCP_FIREWALL_LB_PASSWD_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
 else   if (router.getRole() == Role.DHCP_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
  if (router.getDomain() != null) {
    basic+=""String_Node_Str"" + router.getDomain();
  }
  return basic;
}",0.9982593559617058
107287,"public String getBootArgs(){
  String eth1Ip=(secStorageVm.getPrivateIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateIpAddress();
  String eth1NetMask=(secStorageVm.getPrivateNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateNetmask();
  String eth2Ip=(secStorageVm.getPublicIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPublicIpAddress();
  String eth2NetMask=(secStorageVm.getPublicNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPublicNetmask();
  String gateWay=(secStorageVm.getGateway() == null) ? ""String_Node_Str"" : secStorageVm.getGateway();
  String basic=""String_Node_Str"" + secStorageVm.getGuestIpAddress() + ""String_Node_Str""+ secStorageVm.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ secStorageVm.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ secStorageVm.getHostName()+ ""String_Node_Str"";
  if (secStorageVm.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + secStorageVm.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  String mountStr=null;
  try {
    mountStr=NfsUtils.url2Mount(secStorageVm.getNfsShare());
  }
 catch (  URISyntaxException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + secStorageVm.getNfsShare());
  }
  basic=basic + ""String_Node_Str"" + mountStr+ ""String_Node_Str""+ secStorageVm.getGuid();
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"" + Boolean.toString(sslCopy);
  if (secStorageVm.getPrivateIpAddress() == null || secStorageVm.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}","public String getBootArgs(){
  String eth1Ip=(secStorageVm.getPrivateIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateIpAddress();
  String eth1NetMask=(secStorageVm.getPrivateNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateNetmask();
  String eth2Ip=(secStorageVm.getPublicIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPublicIpAddress();
  String eth2NetMask=(secStorageVm.getPublicNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPublicNetmask();
  String gateWay=(secStorageVm.getGateway() == null) ? ""String_Node_Str"" : secStorageVm.getGateway();
  String basic=""String_Node_Str"" + secStorageVm.getGuestIpAddress() + ""String_Node_Str""+ secStorageVm.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ secStorageVm.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ secStorageVm.getName()+ ""String_Node_Str"";
  if (secStorageVm.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + secStorageVm.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  String mountStr=null;
  try {
    mountStr=NfsUtils.url2Mount(secStorageVm.getNfsShare());
  }
 catch (  URISyntaxException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + secStorageVm.getNfsShare());
  }
  basic=basic + ""String_Node_Str"" + mountStr+ ""String_Node_Str""+ secStorageVm.getGuid();
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"" + Boolean.toString(sslCopy);
  if (secStorageVm.getPrivateIpAddress() == null || secStorageVm.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}",0.9988757729061272
107288,"@Override public UserVmResponse createUserVmResponse(UserVm userVm){
  UserVmResponse userVmResponse=new UserVmResponse();
  Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
  if ((acct != null) && (acct.getRemoved() == null)) {
    userVmResponse.setAccountName(acct.getAccountName());
    userVmResponse.setDomainId(acct.getDomainId());
    userVmResponse.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
 else {
    return null;
  }
  userVmResponse.setId(userVm.getId());
  userVmResponse.setName(userVm.getHostName());
  userVmResponse.setCreated(userVm.getCreated());
  if (userVm.getState() != null) {
    userVmResponse.setState(userVm.getState().toString());
  }
  userVmResponse.setHaEnable(userVm.isHaEnabled());
  if (userVm.getDisplayName() != null) {
    userVmResponse.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmResponse.setDisplayName(userVm.getHostName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
  if (group != null) {
    userVmResponse.setGroup(group.getName());
    userVmResponse.setGroupId(group.getId());
  }
  userVmResponse.setZoneId(userVm.getDataCenterId());
  userVmResponse.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
  Account account=UserContext.current().getAccount();
  if (((account == null) || (account.getType() == Account.ACCOUNT_TYPE_ADMIN)) && (userVm.getHostId() != null)) {
    userVmResponse.setHostId(userVm.getHostId());
    userVmResponse.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
  if (template != null) {
    userVmResponse.setTemplateId(userVm.getTemplateId());
    userVmResponse.setTemplateName(template.getName());
    userVmResponse.setTemplateDisplayText(template.getDisplayText());
    userVmResponse.setPasswordEnabled(template.getEnablePassword());
  }
 else {
    userVmResponse.setTemplateId(-1L);
    userVmResponse.setTemplateName(""String_Node_Str"");
    userVmResponse.setTemplateDisplayText(""String_Node_Str"");
    userVmResponse.setPasswordEnabled(false);
  }
  if (userVm.getPassword() != null) {
    userVmResponse.setPassword(userVm.getPassword());
  }
  if (userVm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(userVm.getIsoId());
    if (iso != null) {
      userVmResponse.setIsoId(userVm.getIsoId());
      userVmResponse.setIsoName(iso.getName());
    }
  }
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingName(offering.getName());
  userVmResponse.setCpuNumber(offering.getCpu());
  userVmResponse.setCpuSpeed(offering.getSpeed());
  userVmResponse.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(userVm.getId());
  if (rootVolume != null) {
    userVmResponse.setRootDeviceId(rootVolume.getDeviceId());
    String rootDeviceType=""String_Node_Str"";
    if (rootVolume.getPoolId() != null) {
      StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
      rootDeviceType=storagePool.getPoolType().toString();
    }
    userVmResponse.setRootDeviceType(rootDeviceType);
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  String cpuUsed=null;
  VmStats vmStats=ApiDBUtils.getVmStatistics(userVm.getId());
  if (vmStats != null) {
    float cpuUtil=(float)vmStats.getCPUUtilization();
    cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
    userVmResponse.setCpuUsed(cpuUsed);
    Long networkKbRead=Double.doubleToLongBits(vmStats.getNetworkReadKBs());
    userVmResponse.setNetworkKbsRead(networkKbRead);
    Long networkKbWrite=Double.doubleToLongBits(vmStats.getNetworkWriteKBs());
    userVmResponse.setNetworkKbsWrite(networkKbWrite);
  }
  userVmResponse.setGuestOsId(userVm.getGuestOSId());
  userVmResponse.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
  List<? extends Nic> nics=ApiDBUtils.getNics(userVm);
  List<NicResponse> nicResponses=new ArrayList<NicResponse>();
  for (  Nic singleNic : nics) {
    NicResponse nicResponse=new NicResponse();
    nicResponse.setId(singleNic.getId());
    nicResponse.setIpaddress(singleNic.getIp4Address());
    nicResponse.setGateway(singleNic.getGateway());
    nicResponse.setNetmask(singleNic.getNetmask());
    nicResponse.setNetworkid(singleNic.getNetworkId());
    if (acct.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (singleNic.getBroadcastUri() != null) {
        nicResponse.setBroadcastUri(singleNic.getBroadcastUri().toString());
      }
      if (singleNic.getIsolationUri() != null) {
        nicResponse.setIsolationUri(singleNic.getIsolationUri().toString());
      }
    }
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    nicResponse.setTrafficType(network.getTrafficType().toString());
    NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
    if (networkOffering.getGuestIpType() != null) {
      nicResponse.setType(networkOffering.getGuestIpType().toString());
    }
    nicResponse.setObjectName(""String_Node_Str"");
    nicResponses.add(nicResponse);
  }
  userVmResponse.setNics(nicResponses);
  userVmResponse.setObjectName(""String_Node_Str"");
  return userVmResponse;
}","@Override public UserVmResponse createUserVmResponse(UserVm userVm){
  UserVmResponse userVmResponse=new UserVmResponse();
  Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
  if ((acct != null) && (acct.getRemoved() == null)) {
    userVmResponse.setAccountName(acct.getAccountName());
    userVmResponse.setDomainId(acct.getDomainId());
    userVmResponse.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
 else {
    return null;
  }
  userVmResponse.setId(userVm.getId());
  userVmResponse.setName(userVm.getName());
  userVmResponse.setCreated(userVm.getCreated());
  if (userVm.getState() != null) {
    userVmResponse.setState(userVm.getState().toString());
  }
  userVmResponse.setHaEnable(userVm.isHaEnabled());
  if (userVm.getDisplayName() != null) {
    userVmResponse.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmResponse.setDisplayName(userVm.getName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
  if (group != null) {
    userVmResponse.setGroup(group.getName());
    userVmResponse.setGroupId(group.getId());
  }
  userVmResponse.setZoneId(userVm.getDataCenterId());
  userVmResponse.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
  Account account=UserContext.current().getAccount();
  if (((account == null) || (account.getType() == Account.ACCOUNT_TYPE_ADMIN)) && (userVm.getHostId() != null)) {
    userVmResponse.setHostId(userVm.getHostId());
    userVmResponse.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
  if (template != null) {
    userVmResponse.setTemplateId(userVm.getTemplateId());
    userVmResponse.setTemplateName(template.getName());
    userVmResponse.setTemplateDisplayText(template.getDisplayText());
    userVmResponse.setPasswordEnabled(template.getEnablePassword());
  }
 else {
    userVmResponse.setTemplateId(-1L);
    userVmResponse.setTemplateName(""String_Node_Str"");
    userVmResponse.setTemplateDisplayText(""String_Node_Str"");
    userVmResponse.setPasswordEnabled(false);
  }
  if (userVm.getPassword() != null) {
    userVmResponse.setPassword(userVm.getPassword());
  }
  if (userVm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(userVm.getIsoId());
    if (iso != null) {
      userVmResponse.setIsoId(userVm.getIsoId());
      userVmResponse.setIsoName(iso.getName());
    }
  }
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingName(offering.getName());
  userVmResponse.setCpuNumber(offering.getCpu());
  userVmResponse.setCpuSpeed(offering.getSpeed());
  userVmResponse.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(userVm.getId());
  if (rootVolume != null) {
    userVmResponse.setRootDeviceId(rootVolume.getDeviceId());
    String rootDeviceType=""String_Node_Str"";
    if (rootVolume.getPoolId() != null) {
      StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
      rootDeviceType=storagePool.getPoolType().toString();
    }
    userVmResponse.setRootDeviceType(rootDeviceType);
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  String cpuUsed=null;
  VmStats vmStats=ApiDBUtils.getVmStatistics(userVm.getId());
  if (vmStats != null) {
    float cpuUtil=(float)vmStats.getCPUUtilization();
    cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
    userVmResponse.setCpuUsed(cpuUsed);
    Long networkKbRead=Double.doubleToLongBits(vmStats.getNetworkReadKBs());
    userVmResponse.setNetworkKbsRead(networkKbRead);
    Long networkKbWrite=Double.doubleToLongBits(vmStats.getNetworkWriteKBs());
    userVmResponse.setNetworkKbsWrite(networkKbWrite);
  }
  userVmResponse.setGuestOsId(userVm.getGuestOSId());
  userVmResponse.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
  List<? extends Nic> nics=ApiDBUtils.getNics(userVm);
  List<NicResponse> nicResponses=new ArrayList<NicResponse>();
  for (  Nic singleNic : nics) {
    NicResponse nicResponse=new NicResponse();
    nicResponse.setId(singleNic.getId());
    nicResponse.setIpaddress(singleNic.getIp4Address());
    nicResponse.setGateway(singleNic.getGateway());
    nicResponse.setNetmask(singleNic.getNetmask());
    nicResponse.setNetworkid(singleNic.getNetworkId());
    if (acct.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (singleNic.getBroadcastUri() != null) {
        nicResponse.setBroadcastUri(singleNic.getBroadcastUri().toString());
      }
      if (singleNic.getIsolationUri() != null) {
        nicResponse.setIsolationUri(singleNic.getIsolationUri().toString());
      }
    }
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    nicResponse.setTrafficType(network.getTrafficType().toString());
    NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
    if (networkOffering.getGuestIpType() != null) {
      nicResponse.setType(networkOffering.getGuestIpType().toString());
    }
    nicResponse.setObjectName(""String_Node_Str"");
    nicResponses.add(nicResponse);
  }
  userVmResponse.setNics(nicResponses);
  userVmResponse.setObjectName(""String_Node_Str"");
  return userVmResponse;
}",0.999266458830002
107289,"@Override public DomainRouterResponse createDomainRouterResponse(VirtualRouter router){
  DomainRouterResponse routerResponse=new DomainRouterResponse();
  routerResponse.setId(router.getId());
  routerResponse.setZoneId(router.getDataCenterId());
  routerResponse.setName(router.getHostName());
  routerResponse.setPodId(router.getPodId());
  routerResponse.setTemplateId(router.getTemplateId());
  routerResponse.setCreated(router.getCreated());
  routerResponse.setState(router.getState());
  routerResponse.setNetworkDomain(router.getDomain());
  if (router.getHostId() != null) {
    routerResponse.setHostId(router.getHostId());
    routerResponse.setHostName(ApiDBUtils.findHostById(router.getHostId()).getName());
  }
  Account accountTemp=ApiDBUtils.findAccountById(router.getAccountId());
  if (accountTemp != null) {
    routerResponse.setAccountName(accountTemp.getAccountName());
    routerResponse.setDomainId(accountTemp.getDomainId());
    routerResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  List<? extends Nic> nics=ApiDBUtils.getNics(router);
  for (  Nic singleNic : nics) {
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    if (network != null) {
      if (network.getTrafficType() == TrafficType.Public) {
        routerResponse.setPublicIp(singleNic.getIp4Address());
        routerResponse.setPublicMacAddress(singleNic.getMacAddress());
        routerResponse.setPublicNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Control) {
        routerResponse.setPrivateIp(singleNic.getIp4Address());
        routerResponse.setPrivateMacAddress(singleNic.getMacAddress());
        routerResponse.setPrivateNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Guest) {
        routerResponse.setGuestIpAddress(singleNic.getIp4Address());
        routerResponse.setGuestMacAddress(singleNic.getMacAddress());
        routerResponse.setGuestNetmask(singleNic.getNetmask());
      }
    }
  }
  DataCenter zone=ApiDBUtils.findZoneById(router.getDataCenterId());
  if (zone != null) {
    routerResponse.setZoneName(zone.getName());
    routerResponse.setDns1(zone.getDns1());
    routerResponse.setDns2(zone.getDns2());
  }
  routerResponse.setObjectName(""String_Node_Str"");
  return routerResponse;
}","@Override public DomainRouterResponse createDomainRouterResponse(VirtualRouter router){
  DomainRouterResponse routerResponse=new DomainRouterResponse();
  routerResponse.setId(router.getId());
  routerResponse.setZoneId(router.getDataCenterId());
  routerResponse.setName(router.getName());
  routerResponse.setPodId(router.getPodId());
  routerResponse.setTemplateId(router.getTemplateId());
  routerResponse.setCreated(router.getCreated());
  routerResponse.setState(router.getState());
  routerResponse.setNetworkDomain(router.getDomain());
  if (router.getHostId() != null) {
    routerResponse.setHostId(router.getHostId());
    routerResponse.setHostName(ApiDBUtils.findHostById(router.getHostId()).getName());
  }
  Account accountTemp=ApiDBUtils.findAccountById(router.getAccountId());
  if (accountTemp != null) {
    routerResponse.setAccountName(accountTemp.getAccountName());
    routerResponse.setDomainId(accountTemp.getDomainId());
    routerResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  List<? extends Nic> nics=ApiDBUtils.getNics(router);
  for (  Nic singleNic : nics) {
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    if (network != null) {
      if (network.getTrafficType() == TrafficType.Public) {
        routerResponse.setPublicIp(singleNic.getIp4Address());
        routerResponse.setPublicMacAddress(singleNic.getMacAddress());
        routerResponse.setPublicNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Control) {
        routerResponse.setPrivateIp(singleNic.getIp4Address());
        routerResponse.setPrivateMacAddress(singleNic.getMacAddress());
        routerResponse.setPrivateNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Guest) {
        routerResponse.setGuestIpAddress(singleNic.getIp4Address());
        routerResponse.setGuestMacAddress(singleNic.getMacAddress());
        routerResponse.setGuestNetmask(singleNic.getNetmask());
      }
    }
  }
  DataCenter zone=ApiDBUtils.findZoneById(router.getDataCenterId());
  if (zone != null) {
    routerResponse.setZoneName(zone.getName());
    routerResponse.setDns1(zone.getDns1());
    routerResponse.setDns2(zone.getDns2());
  }
  routerResponse.setObjectName(""String_Node_Str"");
  return routerResponse;
}",0.9991593106347204
107290,"@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getHostName());
    volResponse.setVirtualMachineDisplayName(vm.getHostName());
    volResponse.setVirtualMachineState(vm.getState().toString());
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getStatus().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setSourceId(volume.getSourceId());
  if (volume.getSourceType() != null) {
    volResponse.setSourceType(volume.getSourceType().toString());
  }
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getDestroyed());
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}","@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getName());
    volResponse.setVirtualMachineDisplayName(vm.getName());
    volResponse.setVirtualMachineState(vm.getState().toString());
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getStatus().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setSourceId(volume.getSourceId());
  if (volume.getSourceType() != null) {
    volResponse.setSourceType(volume.getSourceType().toString());
  }
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getDestroyed());
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}",0.998766193707588
107291,"@Override public FirewallRuleResponse createFirewallRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicIpAddress(fwRule.getSourceIpAddress().toString());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getHostName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createFirewallRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicIpAddress(fwRule.getSourceIpAddress().toString());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9981566820276496
107292,"@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(PortForwardingRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getId());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicIpAddress(fwRule.getSourceIpAddress().addr());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getHostName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(PortForwardingRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getId());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicIpAddress(fwRule.getSourceIpAddress().addr());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.997883597883598
107293,"@Override public SystemVmResponse createSystemVmResponse(VirtualMachine systemVM){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (systemVM instanceof SystemVm) {
    SystemVm vm=(SystemVm)systemVM;
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterId());
    vmResponse.setNetworkDomain(vm.getDomain());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodId());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    String instanceType=""String_Node_Str"";
    if (systemVM instanceof SecondaryStorageVmVO) {
      instanceType=""String_Node_Str"";
    }
    if (systemVM instanceof ConsoleProxyVO) {
      ConsoleProxyVO proxy=(ConsoleProxyVO)systemVM;
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterId());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<? extends Nic> nics=ApiDBUtils.getNics(systemVM);
    for (    Nic singleNic : nics) {
      Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
      if (network != null) {
        if (network.getTrafficType() == TrafficType.Public) {
          vmResponse.setPublicIp(singleNic.getIp4Address());
          vmResponse.setPublicMacAddress(singleNic.getMacAddress());
          vmResponse.setPublicNetmask(singleNic.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setPrivateIp(singleNic.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNic.getMacAddress());
          vmResponse.setPrivateNetmask(singleNic.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}","@Override public SystemVmResponse createSystemVmResponse(VirtualMachine systemVM){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (systemVM instanceof SystemVm) {
    SystemVm vm=(SystemVm)systemVM;
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterId());
    vmResponse.setNetworkDomain(vm.getDomain());
    vmResponse.setName(vm.getName());
    vmResponse.setPodId(vm.getPodId());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    String instanceType=""String_Node_Str"";
    if (systemVM instanceof SecondaryStorageVmVO) {
      instanceType=""String_Node_Str"";
    }
    if (systemVM instanceof ConsoleProxyVO) {
      ConsoleProxyVO proxy=(ConsoleProxyVO)systemVM;
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterId());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<? extends Nic> nics=ApiDBUtils.getNics(systemVM);
    for (    Nic singleNic : nics) {
      Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
      if (network != null) {
        if (network.getTrafficType() == TrafficType.Public) {
          vmResponse.setPublicIp(singleNic.getIp4Address());
          vmResponse.setPublicMacAddress(singleNic.getMacAddress());
          vmResponse.setPublicNetmask(singleNic.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setPrivateIp(singleNic.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNic.getMacAddress());
          vmResponse.setPrivateNetmask(singleNic.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}",0.9990954319312528
107294,"public static ConsoleProxyOperationResultObject composeResultObject(ManagementServer managementServer,ConsoleProxyVO proxy){
  ConsoleProxyOperationResultObject result=new ConsoleProxyOperationResultObject();
  result.setId(proxy.getId());
  result.setName(proxy.getHostName());
  result.setZoneId(proxy.getDataCenterId());
  result.setZoneName(managementServer.findDataCenterById(proxy.getDataCenterId()).getName());
  result.setDns1(proxy.getDns1());
  result.setDns2(proxy.getDns2());
  result.setNetworkDomain(proxy.getDomain());
  result.setGateway(proxy.getGateway());
  result.setPodId(proxy.getPodId());
  result.setHostId(proxy.getHostId());
  if (proxy.getHostId() != null)   result.setHostName(managementServer.getHostBy(proxy.getHostId()).getName());
  result.setPrivateIp(proxy.getPrivateIpAddress());
  result.setPrivateMac(proxy.getPrivateMacAddress());
  result.setPrivateNetmask(proxy.getPrivateNetmask());
  result.setPublicIp(proxy.getPublicIpAddress());
  result.setPublicMac(proxy.getPublicMacAddress());
  result.setPublicNetmask(proxy.getPublicNetmask());
  result.setTemplateId(proxy.getTemplateId());
  result.setCreated(proxy.getCreated());
  result.setActionSessions(proxy.getActiveSession());
  result.setState(proxy.getState().toString());
  return result;
}","public static ConsoleProxyOperationResultObject composeResultObject(ManagementServer managementServer,ConsoleProxyVO proxy){
  ConsoleProxyOperationResultObject result=new ConsoleProxyOperationResultObject();
  result.setId(proxy.getId());
  result.setName(proxy.getName());
  result.setZoneId(proxy.getDataCenterId());
  result.setZoneName(managementServer.findDataCenterById(proxy.getDataCenterId()).getName());
  result.setDns1(proxy.getDns1());
  result.setDns2(proxy.getDns2());
  result.setNetworkDomain(proxy.getDomain());
  result.setGateway(proxy.getGateway());
  result.setPodId(proxy.getPodId());
  result.setHostId(proxy.getHostId());
  if (proxy.getHostId() != null)   result.setHostName(managementServer.getHostBy(proxy.getHostId()).getName());
  result.setPrivateIp(proxy.getPrivateIpAddress());
  result.setPrivateMac(proxy.getPrivateMacAddress());
  result.setPrivateNetmask(proxy.getPrivateNetmask());
  result.setPublicIp(proxy.getPublicIpAddress());
  result.setPublicMac(proxy.getPublicMacAddress());
  result.setPublicNetmask(proxy.getPublicNetmask());
  result.setTemplateId(proxy.getTemplateId());
  result.setCreated(proxy.getCreated());
  result.setActionSessions(proxy.getActiveSession());
  result.setState(proxy.getState().toString());
  return result;
}",0.998443579766537
107295,"private DeployVMResultObject composeResultObject(long userId,UserVm vm,DeployVMParam param){
  DeployVMResultObject resultObject=new DeployVMResultObject();
  if (vm == null)   return resultObject;
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getHostName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(getAsyncJobMgr().getExecutorContext().getManagementServer().findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getHostName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  ManagementServer managementServer=getAsyncJobMgr().getExecutorContext().getManagementServer();
  InstanceGroupVO group=managementServer.getGroupForVm(vm.getId());
  if (group != null) {
    resultObject.setGroupId(group.getId());
    resultObject.setGroup(group.getName());
  }
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  User userExecutingCmd=managementServer.getUser(userId);
  Account acctForUserExecutingCmd=managementServer.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (vm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null))) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    resultObject.setPassword(param.getPassword());
  }
  Long isoId=vm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=getAsyncJobMgr().getExecutorContext().getManagementServer().findTemplateById(isoId.longValue());
    if (iso != null) {
      resultObject.setIsoId(isoId.longValue());
      resultObject.setIsoName(iso.getName());
      resultObject.setTemplateId(isoId.longValue());
      resultObject.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      resultObject.setIsoDisplayText(templateDisplayText);
      resultObject.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    resultObject.setTemplateId(vm.getTemplateId());
    resultObject.setTemplateName(templateName);
    resultObject.setTemplateDisplayText(templateDisplayText);
    resultObject.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}","private DeployVMResultObject composeResultObject(long userId,UserVm vm,DeployVMParam param){
  DeployVMResultObject resultObject=new DeployVMResultObject();
  if (vm == null)   return resultObject;
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(getAsyncJobMgr().getExecutorContext().getManagementServer().findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  ManagementServer managementServer=getAsyncJobMgr().getExecutorContext().getManagementServer();
  InstanceGroupVO group=managementServer.getGroupForVm(vm.getId());
  if (group != null) {
    resultObject.setGroupId(group.getId());
    resultObject.setGroup(group.getName());
  }
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  User userExecutingCmd=managementServer.getUser(userId);
  Account acctForUserExecutingCmd=managementServer.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (vm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null))) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    resultObject.setPassword(param.getPassword());
  }
  Long isoId=vm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=getAsyncJobMgr().getExecutorContext().getManagementServer().findTemplateById(isoId.longValue());
    if (iso != null) {
      resultObject.setIsoId(isoId.longValue());
      resultObject.setIsoName(iso.getName());
      resultObject.setTemplateId(isoId.longValue());
      resultObject.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      resultObject.setIsoDisplayText(templateDisplayText);
      resultObject.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    resultObject.setTemplateId(vm.getTemplateId());
    resultObject.setTemplateName(templateName);
    resultObject.setTemplateDisplayText(templateDisplayText);
    resultObject.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}",0.9989373007438896
107296,"private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_DESTROY);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_DESTROY);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}",0.9967105263157896
107297,"@Override @DB public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getChildEventId());
      Transaction txn=Transaction.currentTxn();
      txn.start();
      asyncMgr.getExecutorContext().getAccountMgr().decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      if (!asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,VirtualMachine.Event.DestroyRequested,vm.getHostId())) {
        s_logger.debug(""String_Node_Str"" + vm.toString());
        txn.rollback();
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,""String_Node_Str"");
        return;
      }
      asyncMgr.getExecutorContext().getVmMgr().cleanNetworkRules(param.getUserId(),vm.getId());
      List<VolumeVO> volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.ROOT);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getStorageMgr().destroyVolume(volume);
      }
      volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.DATADISK);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getVolumeDao().detachVolume(volume.getId());
      }
      txn.commit();
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,""String_Node_Str"");
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + vm.getHostName());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","@Override @DB public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getChildEventId());
      Transaction txn=Transaction.currentTxn();
      txn.start();
      asyncMgr.getExecutorContext().getAccountMgr().decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      if (!asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,VirtualMachine.Event.DestroyRequested,vm.getHostId())) {
        s_logger.debug(""String_Node_Str"" + vm.toString());
        txn.rollback();
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,""String_Node_Str"");
        return;
      }
      asyncMgr.getExecutorContext().getVmMgr().cleanNetworkRules(param.getUserId(),vm.getId());
      List<VolumeVO> volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.ROOT);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getStorageMgr().destroyVolume(volume);
      }
      volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.DATADISK);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getVolumeDao().detachVolume(volume.getId());
      }
      txn.commit();
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,""String_Node_Str"");
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + vm.getName());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}",0.9984276729559748
107298,"private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_REBOOT);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_REBOOT);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}",0.9967078189300412
107299,"public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  boolean jobStatusUpdated=false;
  try {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
    if (answer != null) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (answer != null) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  boolean jobStatusUpdated=false;
  try {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
    if (answer != null) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getName(),params,param.getEventId());
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (answer != null) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}",0.9969574036511156
107300,"public static RouterOperationResultObject composeResultObject(ManagementServer managementServer,VirtualRouter router){
  RouterOperationResultObject resultObject=new RouterOperationResultObject();
  resultObject.setId(router.getId());
  resultObject.setZoneId(router.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(router.getDataCenterId()).getName());
  resultObject.setDns1(router.getDns1());
  resultObject.setDns2(router.getDns2());
  resultObject.setNetworkDomain(router.getDomain());
  resultObject.setGateway(router.getGateway());
  resultObject.setName(router.getHostName());
  resultObject.setPodId(router.getPodId());
  resultObject.setPrivateIp(router.getPrivateIpAddress());
  resultObject.setPrivateMacAddress(router.getPrivateMacAddress());
  resultObject.setPrivateNetMask(router.getPrivateNetmask());
  resultObject.setPublicIp(router.getPublicIpAddress());
  resultObject.setPublicMacAddress(router.getPublicMacAddress());
  resultObject.setPublicNetMask(router.getPrivateNetmask());
  resultObject.setGuestIp(router.getGuestIpAddress());
  resultObject.setGuestMacAddress(router.getGuestMacAddress());
  resultObject.setTemplateId(router.getTemplateId());
  resultObject.setCreated(router.getCreated());
  resultObject.setGuestNetmask(router.getGuestNetmask());
  if (router.getHostId() != null) {
    resultObject.setHostname(managementServer.getHostBy(router.getHostId()).getName());
    resultObject.setHostId(router.getHostId());
  }
  Account acct=managementServer.findAccountById(Long.valueOf(router.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (router.getState() != null)   resultObject.setState(router.getState().toString());
  return resultObject;
}","public static RouterOperationResultObject composeResultObject(ManagementServer managementServer,VirtualRouter router){
  RouterOperationResultObject resultObject=new RouterOperationResultObject();
  resultObject.setId(router.getId());
  resultObject.setZoneId(router.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(router.getDataCenterId()).getName());
  resultObject.setDns1(router.getDns1());
  resultObject.setDns2(router.getDns2());
  resultObject.setNetworkDomain(router.getDomain());
  resultObject.setGateway(router.getGateway());
  resultObject.setName(router.getName());
  resultObject.setPodId(router.getPodId());
  resultObject.setPrivateIp(router.getPrivateIpAddress());
  resultObject.setPrivateMacAddress(router.getPrivateMacAddress());
  resultObject.setPrivateNetMask(router.getPrivateNetmask());
  resultObject.setPublicIp(router.getPublicIpAddress());
  resultObject.setPublicMacAddress(router.getPublicMacAddress());
  resultObject.setPublicNetMask(router.getPrivateNetmask());
  resultObject.setGuestIp(router.getGuestIpAddress());
  resultObject.setGuestMacAddress(router.getGuestMacAddress());
  resultObject.setTemplateId(router.getTemplateId());
  resultObject.setCreated(router.getCreated());
  resultObject.setGuestNetmask(router.getGuestNetmask());
  if (router.getHostId() != null) {
    resultObject.setHostname(managementServer.getHostBy(router.getHostId()).getName());
    resultObject.setHostId(router.getHostId());
  }
  Account acct=managementServer.findAccountById(Long.valueOf(router.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (router.getState() != null)   resultObject.setState(router.getState().toString());
  return resultObject;
}",0.9988980716253444
107301,"private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_STOP);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  asyncMgr.getExecutorContext().getEventDao().persist(event);
  asyncMgr.releaseSyncSource(this);
}","private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_STOP);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  asyncMgr.getExecutorContext().getEventDao().persist(event);
  asyncMgr.releaseSyncSource(this);
}",0.995609220636663
107302,"public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  boolean jobStatusUpdated=false;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getEventId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (stopped) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
        EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  boolean jobStatusUpdated=false;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getEventId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (stopped) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
        EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getName(),params,param.getEventId());
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}",0.9973637961335676
107303,"private Object composeResultObject(ManagementServer managementServer,VMInstanceVO vm){
  SystemVmOperationResultObject result=new SystemVmOperationResultObject();
  if (vm instanceof SecondaryStorageVmVO) {
    SecondaryStorageVmVO ssVm=(SecondaryStorageVmVO)vm;
    result.setId(ssVm.getId());
    result.setName(vm.getHostName());
    result.setZoneId(ssVm.getDataCenterId());
    result.setZoneName(managementServer.findDataCenterById(ssVm.getDataCenterId()).getName());
    result.setDns1(ssVm.getDns1());
    result.setDns2(ssVm.getDns2());
    result.setNetworkDomain(ssVm.getDomain());
    result.setGateway(ssVm.getGateway());
    result.setPodId(ssVm.getPodId());
    result.setHostId(ssVm.getHostId());
    if (ssVm.getHostId() != null)     result.setHostName(managementServer.getHostBy(ssVm.getHostId()).getName());
    result.setPrivateIp(ssVm.getPrivateIpAddress());
    result.setPrivateMac(ssVm.getPrivateMacAddress());
    result.setPrivateNetmask(ssVm.getPrivateNetmask());
    result.setPublicIp(ssVm.getPublicIpAddress());
    result.setPublicMac(ssVm.getPublicMacAddress());
    result.setPublicNetmask(ssVm.getPublicNetmask());
    result.setTemplateId(ssVm.getTemplateId());
    result.setCreated(ssVm.getCreated());
    result.setState(ssVm.getState().toString());
  }
  return result;
}","private Object composeResultObject(ManagementServer managementServer,VMInstanceVO vm){
  SystemVmOperationResultObject result=new SystemVmOperationResultObject();
  if (vm instanceof SecondaryStorageVmVO) {
    SecondaryStorageVmVO ssVm=(SecondaryStorageVmVO)vm;
    result.setId(ssVm.getId());
    result.setName(vm.getName());
    result.setZoneId(ssVm.getDataCenterId());
    result.setZoneName(managementServer.findDataCenterById(ssVm.getDataCenterId()).getName());
    result.setDns1(ssVm.getDns1());
    result.setDns2(ssVm.getDns2());
    result.setNetworkDomain(ssVm.getDomain());
    result.setGateway(ssVm.getGateway());
    result.setPodId(ssVm.getPodId());
    result.setHostId(ssVm.getHostId());
    if (ssVm.getHostId() != null)     result.setHostName(managementServer.getHostBy(ssVm.getHostId()).getName());
    result.setPrivateIp(ssVm.getPrivateIpAddress());
    result.setPrivateMac(ssVm.getPrivateMacAddress());
    result.setPrivateNetmask(ssVm.getPrivateNetmask());
    result.setPublicIp(ssVm.getPublicIpAddress());
    result.setPublicMac(ssVm.getPublicMacAddress());
    result.setPublicNetmask(ssVm.getPublicNetmask());
    result.setTemplateId(ssVm.getTemplateId());
    result.setCreated(ssVm.getCreated());
    result.setState(ssVm.getState().toString());
  }
  return result;
}",0.9984709480122324
107304,"public static VMOperationResultObject composeResultObject(ManagementServer managementServer,UserVmVO vm,String vmPassword){
  VMOperationResultObject resultObject=new VMOperationResultObject();
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getHostName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getHostName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  resultObject.setTemplateId(vm.getTemplateId());
  resultObject.setTemplateName(templateName);
  resultObject.setTemplateDisplayText(templateDisplayText);
  resultObject.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled)   resultObject.setPassword(vmPassword);
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=managementServer.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  resultObject.setIsoId(vm.getIsoId());
  resultObject.setIsoName(isoName);
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}","public static VMOperationResultObject composeResultObject(ManagementServer managementServer,UserVmVO vm,String vmPassword){
  VMOperationResultObject resultObject=new VMOperationResultObject();
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  resultObject.setTemplateId(vm.getTemplateId());
  resultObject.setTemplateName(templateName);
  resultObject.setTemplateDisplayText(templateDisplayText);
  resultObject.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled)   resultObject.setPassword(vmPassword);
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=managementServer.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  resultObject.setIsoId(vm.getIsoId());
  resultObject.setIsoName(isoName);
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}",0.9985601151907848
107305,"private AttachVolumeOperationResultObject composeAttachResultObject(UserVm instance,VolumeVO vol){
  AttachVolumeOperationResultObject resultObject=new AttachVolumeOperationResultObject();
  resultObject.setVmName(instance.getHostName());
  resultObject.setVmDisplayName(instance.getDisplayName());
  resultObject.setVirtualMachineId(instance.getId());
  resultObject.setVmState(instance.getState().toString());
  resultObject.setStorageType(""String_Node_Str"");
  resultObject.setVolumeId(vol.getId());
  resultObject.setVolumeName(vol.getName());
  return resultObject;
}","private AttachVolumeOperationResultObject composeAttachResultObject(UserVm instance,VolumeVO vol){
  AttachVolumeOperationResultObject resultObject=new AttachVolumeOperationResultObject();
  resultObject.setVmName(instance.getName());
  resultObject.setVmDisplayName(instance.getDisplayName());
  resultObject.setVirtualMachineId(instance.getId());
  resultObject.setVmState(instance.getState().toString());
  resultObject.setStorageType(""String_Node_Str"");
  resultObject.setVolumeId(vol.getId());
  resultObject.setVolumeName(vol.getName());
  return resultObject;
}",0.9964912280701754
107306,"public int getVncPort(VMInstanceVO vm){
  if (vm.getHostId() == null) {
    return -1;
  }
  GetVncPortAnswer answer=(GetVncPortAnswer)_agentMgr.easySend(vm.getHostId(),new GetVncPortCommand(vm.getId(),vm.getHostName()));
  return answer == null ? -1 : answer.getPort();
}","public int getVncPort(VMInstanceVO vm){
  if (vm.getHostId() == null) {
    return -1;
  }
  GetVncPortAnswer answer=(GetVncPortAnswer)_agentMgr.easySend(vm.getHostId(),new GetVncPortCommand(vm.getId(),vm.getName()));
  return answer == null ? -1 : answer.getPort();
}",0.9925925925925926
107307,"@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId,Long startEventId) throws ResourceAllocationException {
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot,startEventId);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}","@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId,Long startEventId) throws ResourceAllocationException {
  VolumeVO v=_volsDao.findById(volumeId);
  if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
    UserVmVO uservm=_vmDao.findById(v.getInstanceId());
    if (uservm != null) {
      UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
      if (vm == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot,startEventId);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}",0.8990950226244344
107308,"protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null)   vbdr.VDI=vdi;
 else {
    vbdr.empty=true;
  }
  if (type == VolumeType.ROOT) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}","protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm,BootloaderType bootLoaderType) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null)   vbdr.VDI=vdi;
 else {
    vbdr.empty=true;
  }
  if (type == VolumeType.ROOT && bootLoaderType == BootloaderType.PyGrub) {
    vbdr.bootable=true;
  }
 else   if (type == VolumeType.ISO && bootLoaderType == BootloaderType.CD) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}",0.8191126279863481
107309,"@Override public VirtualMachineTemplate registerTemplate(RegisterTemplateCmd cmd) throws URISyntaxException, ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  Integer bits=cmd.getBits();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean requiresHVM=cmd.getRequiresHvm();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Boolean isExtractable=cmd.isExtractable();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Long zoneId=cmd.getZoneId();
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (bits == null) {
    bits=Integer.valueOf(64);
  }
  if (passwordEnabled == null) {
    passwordEnabled=false;
  }
  if (requiresHVM == null) {
    requiresHVM=true;
  }
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (isExtractable == null) {
    isExtractable=Boolean.TRUE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (null == accountId) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"") && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"")))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + format.toLowerCase());
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,format,""String_Node_Str"",url,null,requiresHVM,bits,passwordEnabled,guestOSId,true,hypervisorType);
}","@Override public VirtualMachineTemplate registerTemplate(RegisterTemplateCmd cmd) throws URISyntaxException, ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  Integer bits=cmd.getBits();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean requiresHVM=cmd.getRequiresHvm();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Boolean isExtractable=cmd.isExtractable();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Long zoneId=cmd.getZoneId();
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (bits == null) {
    bits=Integer.valueOf(64);
  }
  if (passwordEnabled == null) {
    passwordEnabled=false;
  }
  if (requiresHVM == null) {
    requiresHVM=true;
  }
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (isExtractable == null) {
    isExtractable=Boolean.TRUE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (null == accountId) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"") && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"")))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + format.toLowerCase());
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,format,TemplateType.USER,url,null,requiresHVM,bits,passwordEnabled,guestOSId,true,hypervisorType);
}",0.9954799255517148
107310,"@Override public VirtualMachineTemplate registerIso(RegisterIsoCmd cmd) throws ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getIsoName();
  String displayText=cmd.getDisplayText();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Long guestOSId=cmd.getOsTypeId();
  Boolean bootable=cmd.isBootable();
  Long zoneId=cmd.getZoneId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (bootable == null) {
    bootable=Boolean.TRUE;
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic.booleanValue(),featured.booleanValue(),true,ImageFormat.ISO.toString(),null,url,null,true,64,false,guestOSId,bootable,HypervisorType.None);
}","@Override public VirtualMachineTemplate registerIso(RegisterIsoCmd cmd) throws ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getIsoName();
  String displayText=cmd.getDisplayText();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Long guestOSId=cmd.getOsTypeId();
  Boolean bootable=cmd.isBootable();
  Long zoneId=cmd.getZoneId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (bootable == null) {
    bootable=Boolean.TRUE;
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic.booleanValue(),featured.booleanValue(),true,ImageFormat.ISO.toString(),TemplateType.USER,url,null,true,64,false,guestOSId,bootable,HypervisorType.None);
}",0.9966057863261678
107311,"private VMTemplateVO createTemplateOrIso(long userId,Long accountId,Long zoneId,String name,String displayText,boolean isPublic,boolean featured,boolean isExtractable,String format,String diskType,String url,String chksum,boolean requiresHvm,int bits,boolean enablePassword,long guestOSId,boolean bootable,HypervisorType hypervisorType) throws IllegalArgumentException, ResourceAllocationException {
  try {
    if (name.length() > 32) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
    if (imgfmt == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
      throw new IllegalArgumentException(""String_Node_Str"" + url);
    }
    int port=uri.getPort();
    if (!(port == 80 || port == 443 || port == -1)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException(""String_Node_Str"" + host);
    }
    UserVO user=_userDao.findById(userId);
    if (user == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + userId);
    }
    AccountVO account=_accountDao.findById(accountId);
    if (_accountMgr.resourceLimitExceeded(account,ResourceType.template)) {
      ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      rae.setResourceType(""String_Node_Str"");
      throw rae;
    }
    if (zoneId != null) {
      if (_dcDao.findById(zoneId) == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    VMTemplateVO systemvmTmplt=_tmpltDao.findRoutingTemplate();
    if (systemvmTmplt.getName().equalsIgnoreCase(name) || systemvmTmplt.getDisplayText().equalsIgnoreCase(displayText)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return create(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,imgfmt,null,uri,chksum,requiresHvm,bits,enablePassword,guestOSId,bootable,hypervisorType);
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
}","private VMTemplateVO createTemplateOrIso(long userId,Long accountId,Long zoneId,String name,String displayText,boolean isPublic,boolean featured,boolean isExtractable,String format,TemplateType diskType,String url,String chksum,boolean requiresHvm,int bits,boolean enablePassword,long guestOSId,boolean bootable,HypervisorType hypervisorType) throws IllegalArgumentException, ResourceAllocationException {
  try {
    if (name.length() > 32) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
    if (imgfmt == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
      throw new IllegalArgumentException(""String_Node_Str"" + url);
    }
    int port=uri.getPort();
    if (!(port == 80 || port == 443 || port == -1)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException(""String_Node_Str"" + host);
    }
    UserVO user=_userDao.findById(userId);
    if (user == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + userId);
    }
    AccountVO account=_accountDao.findById(accountId);
    if (_accountMgr.resourceLimitExceeded(account,ResourceType.template)) {
      ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      rae.setResourceType(""String_Node_Str"");
      throw rae;
    }
    if (zoneId != null) {
      if (_dcDao.findById(zoneId) == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    VMTemplateVO systemvmTmplt=_tmpltDao.findRoutingTemplate();
    if (systemvmTmplt.getName().equalsIgnoreCase(name) || systemvmTmplt.getDisplayText().equalsIgnoreCase(displayText)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return create(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,imgfmt,diskType,uri,chksum,requiresHvm,bits,enablePassword,guestOSId,bootable,hypervisorType);
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
}",0.9949426837491572
107312,"@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(""String_Node_Str"");
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  return true;
}","@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(""String_Node_Str"");
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  DomainRouterVO router=profile.getVirtualMachine();
  List<NicVO> nics=_nicDao.listBy(router.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Public) {
      router.setPublicIpAddress(nic.getIp4Address());
      router.setPublicNetmask(nic.getNetmask());
      router.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Guest) {
      router.setGuestIpAddress(nic.getIp4Address());
      router.setGuestMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Control) {
      router.setPrivateIpAddress(nic.getIp4Address());
      router.setPrivateNetmask(nic.getNetmask());
      router.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  final List<IPAddressVO> ipAddrs=_networkMgr.listPublicIpAddressesInVirtualNetwork(router.getAccountId(),router.getDataCenterId(),null);
  final List<String> ipAddrList=new ArrayList<String>();
  for (  final IPAddressVO ipVO : ipAddrs) {
    ipAddrList.add(ipVO.getAddress());
  }
  if (!ipAddrList.isEmpty()) {
    _networkMgr.getAssociateIPCommands(router,ipAddrList,true,0,cmds);
  }
  return true;
}",0.36493374108053
107313,"@Override public boolean finalizeStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  CheckSshAnswer answer=(CheckSshAnswer)cmds.getAnswer(""String_Node_Str"");
  if (!answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + answer.getDetails());
    return false;
  }
  DomainRouterVO router=profile.getVirtualMachine();
  List<NicVO> nics=_nicDao.listBy(router.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Public) {
      router.setPublicIpAddress(nic.getIp4Address());
      router.setPublicNetmask(nic.getNetmask());
      router.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Guest) {
      router.setGuestIpAddress(nic.getIp4Address());
      router.setGuestMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Control) {
      router.setPrivateIpAddress(nic.getIp4Address());
      router.setPrivateNetmask(nic.getNetmask());
      router.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  return true;
}","@Override public boolean finalizeStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  CheckSshAnswer answer=(CheckSshAnswer)cmds.getAnswer(""String_Node_Str"");
  if (!answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + answer.getDetails());
    return false;
  }
  return true;
}",0.4450227716330514
107314,"public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
}","public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
  this.deviceId=volume.getDeviceId().intValue();
}",0.944254835039818
107315,"public String getHypervisor(){
  return hypervisor;
}","public HypervisorType getHypervisor(){
  return HypervisorType.getType(hypervisor);
}",0.7101449275362319
107316,"protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  vbdr.VDI=vdi;
  if (type == VolumeType.ROOT) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}","protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null)   vbdr.VDI=vdi;
 else {
    vbdr.empty=true;
  }
  if (type == VolumeType.ROOT) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}",0.9659685863874344
107317,"protected Map<String,Object> createProxyInstance2(long dataCenterId) throws ConcurrentOperationException {
  long id=_consoleProxyDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getConsoleProxyName(id,_instance);
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
  for (  NetworkOfferingVO offering : offerings) {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
  }
  ConsoleProxyVO proxy=new ConsoleProxyVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0);
  try {
    proxy=_itMgr.allocate(proxy,_template,_serviceOffering,networks,plan,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodId());
  context.put(""String_Node_Str"",pod);
  context.put(""String_Node_Str"",proxy.getId());
  return context;
}","protected Map<String,Object> createProxyInstance2(long dataCenterId) throws ConcurrentOperationException {
  long id=_consoleProxyDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getConsoleProxyName(id,_instance);
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
  for (  NetworkOfferingVO offering : offerings) {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
  }
  ConsoleProxyVO proxy=new ConsoleProxyVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0);
  try {
    proxy=_itMgr.allocate(proxy,_template,_serviceOffering,networks,plan,null,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodId());
  context.put(""String_Node_Str"",pod);
  context.put(""String_Node_Str"",proxy.getId());
  return context;
}",0.998880680546228
107318,"public ConsoleProxyVO start2(long proxyVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException {
  if (!_useNewNetworking) {
    return start(proxyVmId,startEventId);
  }
  ConsoleProxyVO proxy=_consoleProxyDao.findById(proxyVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(proxy,null,systemUser,systemAcct);
}","public ConsoleProxyVO start2(long proxyVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException {
  if (!_useNewNetworking) {
    return start(proxyVmId,startEventId);
  }
  ConsoleProxyVO proxy=_consoleProxyDao.findById(proxyVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(proxy,null,systemUser,systemAcct,null);
}",0.9941520467836256
107319,"@Override public <T extends VirtualMachine>VirtualMachineTO implement(VirtualMachineProfile<T> vm){
  VirtualMachineTemplate template=vm.getTemplate();
  BootloaderType bt=BootloaderType.PyGrub;
  if (template.getFormat() == Storage.ImageFormat.ISO || template.isRequiresHvm()) {
    bt=BootloaderType.HVM;
  }
  VirtualMachineTO to=toVirtualMachineTO(vm);
  to.setBootloader(bt);
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  return to;
}","@Override public <T extends VirtualMachine>VirtualMachineTO implement(VirtualMachineProfile<T> vm){
  BootloaderType bt=BootloaderType.PyGrub;
  if (vm.getBootLoaderType() != null) {
    bt=vm.getBootLoaderType();
  }
  VirtualMachineTO to=toVirtualMachineTO(vm);
  to.setBootloader(bt);
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  return to;
}",0.6759358288770053
107320,"public DomainRouterVO start(DomainRouterVO router,User user,Account caller) throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  return _itMgr.start(router,null,user,caller);
}","public DomainRouterVO start(DomainRouterVO router,User user,Account caller) throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  return _itMgr.start(router,null,user,caller,null);
}",0.9902152641878668
107321,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol);
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol);
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}",0.9898210980876002
107322,"protected Map<String,Object> createSecStorageVmInstance2(long dataCenterId){
  long startEventId=saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,""String_Node_Str"" + dataCenterId,0);
  HostVO secHost=_hostDao.findSecondaryStorageHost(dataCenterId);
  if (secHost == null) {
    String msg=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    s_logger.warn(msg);
    saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,msg,startEventId);
    throw new CloudRuntimeException(msg);
  }
  _secHostUuid=secHost.getGuid();
  _nfsShare=secHost.getStorageUrl();
  long id=_secStorageVmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getSystemVmName(id,_instance,""String_Node_Str"").intern();
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  try {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
    for (    NetworkOfferingVO offering : offerings) {
      networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
    }
  }
 catch (  ConcurrentOperationException e) {
    s_logger.info(""String_Node_Str"" + e);
    return new HashMap<String,Object>();
  }
  SecondaryStorageVmVO secStorageVm=new SecondaryStorageVmVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId());
  try {
    secStorageVm=_itMgr.allocate(secStorageVm,_template,_serviceOffering,networks,plan,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",secStorageVm.getId());
  return context;
}","protected Map<String,Object> createSecStorageVmInstance2(long dataCenterId){
  long startEventId=saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,""String_Node_Str"" + dataCenterId,0);
  HostVO secHost=_hostDao.findSecondaryStorageHost(dataCenterId);
  if (secHost == null) {
    String msg=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    s_logger.warn(msg);
    saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,msg,startEventId);
    throw new CloudRuntimeException(msg);
  }
  _secHostUuid=secHost.getGuid();
  _nfsShare=secHost.getStorageUrl();
  long id=_secStorageVmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getSystemVmName(id,_instance,""String_Node_Str"").intern();
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  try {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
    for (    NetworkOfferingVO offering : offerings) {
      networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
    }
  }
 catch (  ConcurrentOperationException e) {
    s_logger.info(""String_Node_Str"" + e);
    return new HashMap<String,Object>();
  }
  SecondaryStorageVmVO secStorageVm=new SecondaryStorageVmVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId());
  try {
    secStorageVm=_itMgr.allocate(secStorageVm,_template,_serviceOffering,networks,plan,null,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",secStorageVm.getId());
  return context;
}",0.9990578481251178
107323,"public SecondaryStorageVmVO start2(long secStorageVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException, ConcurrentOperationException {
  if (!_useNewNetworking) {
    return start(secStorageVmId,startEventId);
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findById(secStorageVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(secStorageVm,null,systemUser,systemAcct);
}","public SecondaryStorageVmVO start2(long secStorageVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException, ConcurrentOperationException {
  if (!_useNewNetworking) {
    return start(secStorageVmId,startEventId);
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findById(secStorageVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(secStorageVm,null,systemUser,systemAcct,null);
}",0.9949849548645938
107324,"@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters(""String_Node_Str"",BroadcastDomainType.Native);
    sc.setParameters(""String_Node_Str"",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && !networks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
 else       if (network.getTrafficType() != TrafficType.Guest) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getTrafficType() + ""String_Node_Str""+ ""String_Node_Str"");
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  UserVmVO vm=new UserVmVO(id,VirtualMachineName.getVmName(id,owner.getId(),_instance),cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData);
  try {
    if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,owner) == null) {
      return null;
    }
  }
  finally {
    updateVmStateForFailedVmCreation(id);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return vm;
}","@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters(""String_Node_Str"",BroadcastDomainType.Native);
    sc.setParameters(""String_Node_Str"",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && !networks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
 else       if (network.getTrafficType() != TrafficType.Guest) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getTrafficType() + ""String_Node_Str""+ ""String_Node_Str"");
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  UserVmVO vm=new UserVmVO(id,VirtualMachineName.getVmName(id,owner.getId(),_instance),cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData);
  try {
    if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
      return null;
    }
  }
  finally {
    updateVmStateForFailedVmCreation(id);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return vm;
}",0.998529195469922
107325,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vo=profile.getVirtualMachine();
  VirtualMachineTemplate template=profile.getTemplate();
  if (template.getFormat() == ImageFormat.ISO && template.isBootable()) {
  }
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vo=profile.getVirtualMachine();
  VirtualMachineTemplate template=profile.getTemplate();
  if (vo.getIsoId() != null) {
    template=_templateDao.findById(vo.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && template.isBootable()) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vo.getDataCenterId());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    profile.setBootLoaderType(BootloaderType.CD);
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.VolumeType.ISO,StorageResourceType.STORAGE_POOL,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
    vo.setIsoId(template.getId());
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.VolumeType.ISO,StorageResourceType.STORAGE_POOL,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}",0.3613550815558344
107326,"@Override public UserVm startVirtualMachine(long vmId) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  if (account != null && account.getRemoved() != null) {
    throw new PermissionDeniedException(""String_Node_Str"" + account.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  long eventId=EventUtils.saveScheduledEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_START,""String_Node_Str"" + vmId);
  userId=accountAndUserValidation(vmId,account,userId,vm);
  UserVO user=_userDao.findById(userId);
  return _itMgr.start(vm,null,user,account);
}","@Override public UserVm startVirtualMachine(long vmId) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  if (account != null && account.getRemoved() != null) {
    throw new PermissionDeniedException(""String_Node_Str"" + account.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  long eventId=EventUtils.saveScheduledEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_START,""String_Node_Str"" + vmId);
  userId=accountAndUserValidation(vmId,account,userId,vm);
  UserVO user=_userDao.findById(userId);
  VolumeVO disk=_volsDao.findByInstance(vmId).get(0);
  HypervisorType hyperType=_volsDao.getHypervisorType(disk.getId());
  return _itMgr.start(vm,null,user,account,hyperType);
}",0.9254901960784314
107327,"<T extends VMInstanceVO>T allocate(T vm,VMTemplateVO template,ServiceOfferingVO serviceOffering,List<Pair<NetworkVO,NicProfile>> networkProfiles,DeploymentPlan plan,Account owner) throws InsufficientCapacityException, ResourceUnavailableException ;","<T extends VMInstanceVO>T allocate(T vm,VMTemplateVO template,ServiceOfferingVO serviceOffering,List<Pair<NetworkVO,NicProfile>> networkProfiles,DeploymentPlan plan,HypervisorType hyperType,Account owner) throws InsufficientCapacityException, ResourceUnavailableException ;",0.9520153550863724
107328,"<T extends VMInstanceVO>T start(T vm,Map<String,Object> params,User caller,Account account) throws InsufficientCapacityException, ResourceUnavailableException ;","<T extends VMInstanceVO>T start(T vm,Map<String,Object> params,User caller,Account account,HypervisorType hyperType) throws InsufficientCapacityException, ResourceUnavailableException ;",0.927536231884058
107329,"<T extends VMInstanceVO>T advanceStart(T vm,Map<String,Object> params,User caller,Account account) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException, OperationTimedoutException ;","<T extends VMInstanceVO>T advanceStart(T vm,Map<String,Object> params,User caller,Account account,HypervisorType hyperType) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException, OperationTimedoutException ;",0.9473684210526316
107330,"@Override public <T extends VMInstanceVO>T start(T vm,Map<String,Object> params,User caller,Account account) throws InsufficientCapacityException, ResourceUnavailableException {
  try {
    return advanceStart(vm,params,caller,account);
  }
 catch (  ConcurrentOperationException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","@Override public <T extends VMInstanceVO>T start(T vm,Map<String,Object> params,User caller,Account account,HypervisorType hyperType) throws InsufficientCapacityException, ResourceUnavailableException {
  try {
    return advanceStart(vm,params,caller,account,hyperType);
  }
 catch (  ConcurrentOperationException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9521203830369356
107331,"@Override public <T extends VMInstanceVO>T allocate(T vm,VMTemplateVO template,ServiceOfferingVO serviceOffering,List<Pair<NetworkVO,NicProfile>> networks,DeploymentPlan plan,Account owner) throws InsufficientCapacityException {
  return allocate(vm,template,serviceOffering,new Pair<DiskOfferingVO,Long>(serviceOffering,null),null,networks,null,plan,owner);
}","@Override public <T extends VMInstanceVO>T allocate(T vm,VMTemplateVO template,ServiceOfferingVO serviceOffering,List<Pair<NetworkVO,NicProfile>> networks,DeploymentPlan plan,HypervisorType hyperType,Account owner) throws InsufficientCapacityException {
  return allocate(vm,template,serviceOffering,new Pair<DiskOfferingVO,Long>(serviceOffering,null),null,networks,null,plan,hyperType,owner);
}",0.9536423841059604
107332,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<String,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  State state=vm.getState();
  if (state == State.Starting || state == State.Running) {
    s_logger.debug(""String_Node_Str"" + vm);
    return vm;
  }
  if (state != State.Stopped) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,ItWorkVO.Type.Start);
  work=_workDao.persist(work);
  ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),null,null);
  HypervisorGuru hvGuru=_hvGurus.get(template.getHypervisorType());
  @SuppressWarnings(""String_Node_Str"") VirtualMachineGuru<T> vmGuru=(VirtualMachineGuru<T>)_vmGurus.get(vm.getType());
  vm.setReservationId(work.getId());
  if (!stateTransitTo(vm,Event.StartRequested,null)) {
    throw new ConcurrentOperationException(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  ExcludeList avoids=new ExcludeList();
  int retry=_retry;
  DeployDestination dest=null;
  while (retry-- != 0) {
    if (retry < (_retry - 1)) {
      stateTransitTo(vm,Event.OperationRetry,dest.getHost().getId());
    }
    VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,null,params);
    for (    DeploymentPlanner planner : _planners) {
      dest=planner.plan(vmProfile,plan,avoids);
      if (dest != null) {
        avoids.addHost(dest.getHost().getId());
        journal.record(""String_Node_Str"",vmProfile,dest);
        break;
      }
    }
    if (dest == null) {
      stateTransitTo(vm,Event.OperationFailed,null);
      throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
    }
    vm.setDataCenterId(dest.getDataCenter().getId());
    vm.setPodId(dest.getPod().getId());
    try {
      _storageMgr.prepare(vmProfile,dest);
    }
 catch (    ConcurrentOperationException e) {
      stateTransitTo(vm,Event.OperationFailed,dest.getHost().getId());
      throw e;
    }
catch (    StorageUnavailableException e) {
      s_logger.warn(""String_Node_Str"",e);
      avoids.addCluster(dest.getCluster().getId());
      continue;
    }
    _networkMgr.prepare(vmProfile,dest,context);
    vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,context);
    VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new Start2Command(vmTO));
    vmGuru.finalizeDeployment(cmds,vmProfile,dest,context);
    try {
      Answer[] answers=_agentMgr.send(dest.getHost().getId(),cmds);
      if (answers[0].getResult() && vmGuru.finalizeStart(cmds,vmProfile,dest,context)) {
        if (!stateTransitTo(vm,Event.OperationSucceeded,dest.getHost().getId())) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
        return vm;
      }
      s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ answers[0].getDetails());
    }
 catch (    AgentUnavailableException e) {
      s_logger.debug(""String_Node_Str"" + dest.getHost());
      continue;
    }
catch (    OperationTimedoutException e) {
      s_logger.debug(""String_Node_Str"" + dest.getHost());
      continue;
    }
  }
  stateTransitTo(vm,Event.OperationFailed,dest.getHost().getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return null;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<String,Object> params,User caller,Account account,HypervisorType hyperType) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  State state=vm.getState();
  if (state == State.Starting || state == State.Running) {
    s_logger.debug(""String_Node_Str"" + vm);
    return vm;
  }
  if (state != State.Stopped) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,ItWorkVO.Type.Start);
  work=_workDao.persist(work);
  ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),null,null);
  HypervisorGuru hvGuru;
  if (hyperType != null && !hyperType.equals(HypervisorType.None)) {
    hvGuru=_hvGurus.get(hyperType);
  }
 else {
    hvGuru=_hvGurus.get(template.getHypervisorType());
  }
  @SuppressWarnings(""String_Node_Str"") VirtualMachineGuru<T> vmGuru=(VirtualMachineGuru<T>)_vmGurus.get(vm.getType());
  vm.setReservationId(work.getId());
  if (!stateTransitTo(vm,Event.StartRequested,null)) {
    throw new ConcurrentOperationException(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  ExcludeList avoids=new ExcludeList();
  int retry=_retry;
  DeployDestination dest=null;
  while (retry-- != 0) {
    if (retry < (_retry - 1)) {
      stateTransitTo(vm,Event.OperationRetry,dest.getHost().getId());
    }
    VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,null,params,hyperType);
    for (    DeploymentPlanner planner : _planners) {
      dest=planner.plan(vmProfile,plan,avoids);
      if (dest != null) {
        avoids.addHost(dest.getHost().getId());
        journal.record(""String_Node_Str"",vmProfile,dest);
        break;
      }
    }
    if (dest == null) {
      stateTransitTo(vm,Event.OperationFailed,null);
      throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
    }
    vm.setDataCenterId(dest.getDataCenter().getId());
    vm.setPodId(dest.getPod().getId());
    try {
      _storageMgr.prepare(vmProfile,dest);
    }
 catch (    ConcurrentOperationException e) {
      stateTransitTo(vm,Event.OperationFailed,dest.getHost().getId());
      throw e;
    }
catch (    StorageUnavailableException e) {
      s_logger.warn(""String_Node_Str"",e);
      avoids.addCluster(dest.getCluster().getId());
      continue;
    }
    _networkMgr.prepare(vmProfile,dest,context);
    vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,context);
    VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new Start2Command(vmTO));
    vmGuru.finalizeDeployment(cmds,vmProfile,dest,context);
    try {
      Answer[] answers=_agentMgr.send(dest.getHost().getId(),cmds);
      if (answers[0].getResult() && vmGuru.finalizeStart(cmds,vmProfile,dest,context)) {
        if (!stateTransitTo(vm,Event.OperationSucceeded,dest.getHost().getId())) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
        return vm;
      }
      s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ answers[0].getDetails());
    }
 catch (    AgentUnavailableException e) {
      s_logger.debug(""String_Node_Str"" + dest.getHost());
      continue;
    }
catch (    OperationTimedoutException e) {
      s_logger.debug(""String_Node_Str"" + dest.getHost());
      continue;
    }
  }
  stateTransitTo(vm,Event.OperationFailed,dest.getHost().getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return null;
}",0.972132371236626
107333,"@SuppressWarnings(""String_Node_Str"") private <T extends VMInstanceVO>VirtualMachineGuru<T> getVmGuru(T vm){
  return (VirtualMachineGuru<T>)_vmGurus.get(vm);
}","@SuppressWarnings(""String_Node_Str"") private <T extends VMInstanceVO>VirtualMachineGuru<T> getVmGuru(T vm){
  return (VirtualMachineGuru<T>)_vmGurus.get(vm.getType());
}",0.9695121951219512
107334,"public void update(Long id,String domainName);","public void update(Long id,String domainName,String domainPath);",0.8363636363636363
107335,"public void update(Long id,String domainName){
  DomainVO ub=createForUpdate();
  ub.setName(domainName);
  update(id,ub);
}","public void update(Long id,String domainName,String domainPath){
  DomainVO ub=createForUpdate();
  ub.setName(domainName);
  ub.setPath(domainPath);
  update(id,ub);
}",0.8493150684931506
107336,"@Override public DomainVO updateDomain(UpdateDomainCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
  }
 else   if (domain.getParent() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=UserContext.current().getAccount();
  if ((account != null) && !isChildDomain(account.getDomainId(),domain.getId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
  }
  if (domainName == null || domainName.equals(domain.getName())) {
    return _domainDao.findById(domainId);
  }
  SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainName);
  List<DomainVO> domains=_domainDao.search(sc,null);
  if ((domains == null) || domains.isEmpty()) {
    _domainDao.update(domainId,domainName);
    domain=_domainDao.findById(domainId);
    EventUtils.saveEvent(new Long(1),domain.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_DOMAIN_UPDATE,""String_Node_Str"" + domainName + ""String_Node_Str"");
    return _domainDao.findById(domainId);
  }
 else {
    domain=_domainDao.findById(domainId);
    EventUtils.saveEvent(new Long(1),domain.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_DOMAIN_UPDATE,""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    s_logger.error(""String_Node_Str"" + domainName + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + domainId);
  }
}","@Override public DomainVO updateDomain(UpdateDomainCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
  }
 else   if (domain.getParent() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=UserContext.current().getAccount();
  if ((account != null) && !isChildDomain(account.getDomainId(),domain.getId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
  }
  if (domainName == null || domainName.equals(domain.getName())) {
    return _domainDao.findById(domainId);
  }
  SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainName);
  List<DomainVO> domains=_domainDao.search(sc,null);
  if ((domains == null) || domains.isEmpty()) {
    domain=_domainDao.findById(domainId);
    String updatedDomainPath=getUpdatedDomainPath(domain.getPath(),domainName);
    updateDomainChildren(domain,updatedDomainPath);
    _domainDao.update(domainId,domainName,updatedDomainPath);
    EventUtils.saveEvent(new Long(1),domain.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_DOMAIN_UPDATE,""String_Node_Str"" + domainName + ""String_Node_Str"");
    return _domainDao.findById(domainId);
  }
 else {
    domain=_domainDao.findById(domainId);
    EventUtils.saveEvent(new Long(1),domain.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_DOMAIN_UPDATE,""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    s_logger.error(""String_Node_Str"" + domainName + ""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"" + domainId);
  }
}",0.933852140077821
107337,"public List<FirewallRuleVO> updateFirewallRules(final HostVO host,final String routerName,final String routerIp,final List<FirewallRuleVO> fwRules){
  final List<FirewallRuleVO> result=new ArrayList<FirewallRuleVO>();
  if (fwRules.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return result;
  }
  Commands cmds=new Commands(OnError.Continue);
  final List<FirewallRuleVO> lbRules=new ArrayList<FirewallRuleVO>();
  final List<FirewallRuleVO> fwdRules=new ArrayList<FirewallRuleVO>();
  int i=0;
  for (  FirewallRuleVO rule : fwRules) {
    IPAddressVO ip=_ipAddressDao.findById(rule.getPublicIpAddress());
    VlanVO vlan=_vlanDao.findById(new Long(ip.getVlanDbId()));
    String vlanNetmask=vlan.getVlanNetmask();
    rule.setVlanNetmask(vlanNetmask);
    if (rule.isForwarding()) {
      fwdRules.add(rule);
      final SetFirewallRuleCommand cmd=new SetFirewallRuleCommand(routerName,routerIp,rule,false);
      cmds.addCommand(cmd);
    }
 else     if (rule.getGroupId() != null) {
      lbRules.add(rule);
    }
  }
  if (lbRules.size() > 0) {
    final LoadBalancerConfigurator cfgrtr=new HAProxyConfigurator();
    final String[] cfg=cfgrtr.generateConfiguration(fwRules);
    final String[][] addRemoveRules=cfgrtr.generateFwRules(fwRules);
    final LoadBalancerCfgCommand cmd=new LoadBalancerCfgCommand(cfg,addRemoveRules,routerName,routerIp);
    cmds.addCommand(cmd);
  }
  if (cmds.size() == 0) {
    return result;
  }
  Answer[] answers=null;
  try {
    answers=_agentMgr.send(host.getId(),cmds);
  }
 catch (  final AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
catch (  final OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  if (answers == null) {
    return result;
  }
  i=0;
  for (  final FirewallRuleVO rule : fwdRules) {
    final Answer ans=answers[i++];
    if (ans != null) {
      if (ans.getResult()) {
        result.add(rule);
      }
 else {
        s_logger.warn(""String_Node_Str"" + rule.toString());
      }
    }
  }
  if (i == (answers.length - 1)) {
    final Answer lbAnswer=answers[i];
    if (lbAnswer.getResult()) {
      result.addAll(lbRules);
    }
 else {
      s_logger.warn(""String_Node_Str"");
    }
  }
  return result;
}","public List<FirewallRuleVO> updateFirewallRules(final HostVO host,final String routerName,final String routerIp,final List<FirewallRuleVO> fwRules){
  final List<FirewallRuleVO> result=new ArrayList<FirewallRuleVO>();
  if (fwRules.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return result;
  }
  Commands cmds=new Commands(OnError.Continue);
  final List<FirewallRuleVO> lbRules=new ArrayList<FirewallRuleVO>();
  final List<FirewallRuleVO> fwdRules=new ArrayList<FirewallRuleVO>();
  int i=0;
  for (  FirewallRuleVO rule : fwRules) {
    IPAddressVO ip=_ipAddressDao.findById(rule.getPublicIpAddress());
    VlanVO vlan=_vlanDao.findById(new Long(ip.getVlanDbId()));
    String vlanNetmask=vlan.getVlanNetmask();
    rule.setVlanNetmask(vlanNetmask);
    if (rule.isForwarding()) {
      fwdRules.add(rule);
      final SetFirewallRuleCommand cmd=new SetFirewallRuleCommand(routerName,routerIp,rule,true);
      cmds.addCommand(cmd);
    }
 else     if (rule.getGroupId() != null) {
      lbRules.add(rule);
    }
  }
  if (lbRules.size() > 0) {
    final LoadBalancerConfigurator cfgrtr=new HAProxyConfigurator();
    final String[] cfg=cfgrtr.generateConfiguration(fwRules);
    final String[][] addRemoveRules=cfgrtr.generateFwRules(fwRules);
    final LoadBalancerCfgCommand cmd=new LoadBalancerCfgCommand(cfg,addRemoveRules,routerName,routerIp);
    cmds.addCommand(cmd);
  }
  if (cmds.size() == 0) {
    return result;
  }
  Answer[] answers=null;
  try {
    answers=_agentMgr.send(host.getId(),cmds);
  }
 catch (  final AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
catch (  final OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  if (answers == null) {
    return result;
  }
  i=0;
  for (  final FirewallRuleVO rule : fwdRules) {
    final Answer ans=answers[i++];
    if (ans != null) {
      if (ans.getResult()) {
        result.add(rule);
      }
 else {
        s_logger.warn(""String_Node_Str"" + rule.toString());
      }
    }
  }
  if (i == (answers.length - 1)) {
    final Answer lbAnswer=answers[i];
    if (lbAnswer.getResult()) {
      result.addAll(lbRules);
    }
 else {
      s_logger.warn(""String_Node_Str"");
    }
  }
  return result;
}",0.9984385456167744
107338,"@Override public void execute(){
  Volume result=_userVmService.attachVolumeToVM(this);
  if (result != null) {
    VolumeResponse response=_responseGenerator.createVolumeResponse(result);
    response.setResponseName(getName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  try {
    Thread.sleep(2000);
  }
 catch (  Exception e) {
  }
  Volume result=_userVmService.attachVolumeToVM(this);
  if (result != null) {
    VolumeResponse response=_responseGenerator.createVolumeResponse(result);
    response.setResponseName(getName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9174078780177892
107339,"@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(FirewallRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(fwRule.getPrivatePort());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(fwRule.getPublicPort());
  response.setPublicIpAddress(fwRule.getPublicIpAddress());
  if (fwRule.getPublicIpAddress() != null && fwRule.getPrivateIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmByPublicIpAndGuestIp(fwRule.getPublicIpAddress(),fwRule.getPrivateIpAddress());
    response.setVirtualMachineId(vm.getId());
    response.setVirtualMachineName(vm.getHostName());
    response.setVirtualMachineDisplayName(vm.getDisplayName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(FirewallRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(fwRule.getPrivatePort());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(fwRule.getPublicPort());
  response.setPublicIpAddress(fwRule.getPublicIpAddress());
  if (fwRule.getPublicIpAddress() != null && fwRule.getPrivateIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmByPublicIpAndGuestIp(fwRule.getPublicIpAddress(),fwRule.getPrivateIpAddress());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getHostName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9801169590643276
107340,"@Override public FirewallRuleResponse createFirewallRuleResponse(FirewallRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(fwRule.getPrivatePort());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(fwRule.getPublicPort());
  response.setPublicIpAddress(fwRule.getPublicIpAddress());
  if (fwRule.getPublicIpAddress() != null && fwRule.getPrivateIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmByPublicIpAndGuestIp(fwRule.getPublicIpAddress(),fwRule.getPrivateIpAddress());
    response.setVirtualMachineId(vm.getId());
    response.setVirtualMachineName(vm.getHostName());
    response.setVirtualMachineDisplayName(vm.getDisplayName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createFirewallRuleResponse(FirewallRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(fwRule.getPrivatePort());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(fwRule.getPublicPort());
  response.setPublicIpAddress(fwRule.getPublicIpAddress());
  if (fwRule.getPublicIpAddress() != null && fwRule.getPrivateIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmByPublicIpAndGuestIp(fwRule.getPublicIpAddress(),fwRule.getPrivateIpAddress());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getHostName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9797377830750894
107341,"@Override public void execute(){
  List<? extends IngressRule> ingressRules=_networkGroupMgr.authorizeNetworkGroupIngress(this);
  ListResponse<IngressRuleResponse> response=new ListResponse<IngressRuleResponse>();
  if ((ingressRules != null) && !ingressRules.isEmpty()) {
    List<IngressRuleResponse> responses=new ArrayList<IngressRuleResponse>();
    for (    IngressRule ingressRule : ingressRules) {
      IngressRuleResponse ingressData=new IngressRuleResponse();
      ingressData.setRuleId(ingressRule.getId());
      ingressData.setProtocol(ingressRule.getProtocol());
      if (""String_Node_Str"".equalsIgnoreCase(ingressRule.getProtocol())) {
        ingressData.setIcmpType(ingressRule.getStartPort());
        ingressData.setIcmpCode(ingressRule.getEndPort());
      }
 else {
        ingressData.setStartPort(ingressRule.getStartPort());
        ingressData.setEndPort(ingressRule.getEndPort());
      }
      if (ingressRule.getAllowedNetworkGroup() != null) {
        ingressData.setNetworkGroupName(ingressRule.getAllowedNetworkGroup());
        ingressData.setAccountName(ingressRule.getAllowedNetGrpAcct());
      }
 else {
        ingressData.setCidr(ingressRule.getAllowedSourceIpCidr());
      }
      ingressData.setObjectName(""String_Node_Str"");
      responses.add(ingressData);
    }
    response.setResponses(responses);
    response.setResponseName(""String_Node_Str"");
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  List<? extends IngressRule> ingressRules=_networkGroupMgr.authorizeNetworkGroupIngress(this);
  if (ingressRules != null && !ingressRules.isEmpty()) {
    NetworkGroupResponse response=_responseGenerator.createNetworkGroupResponseFromIngressRule(ingressRules);
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.3619631901840491
107342,"private static void serializeResponseObjFieldsXML(StringBuilder sb,ResponseObject obj){
  boolean isAsync=false;
  if (obj instanceof AsyncJobResponse)   isAsync=true;
  Field[] fields=obj.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
      continue;
    }
    SerializedName serializedName=field.getAnnotation(SerializedName.class);
    if (serializedName == null) {
      continue;
    }
    String propName=field.getName();
    Method method=getGetMethod(obj,propName);
    if (method != null) {
      try {
        Object fieldValue=method.invoke(obj);
        if (fieldValue != null) {
          if (fieldValue instanceof ResponseObject) {
            ResponseObject subObj=(ResponseObject)fieldValue;
            if (isAsync) {
              sb.append(""String_Node_Str"");
            }
            serializeResponseObjXML(sb,subObj);
            if (isAsync) {
              sb.append(""String_Node_Str"");
            }
          }
 else           if (fieldValue instanceof ArrayList<?>) {
            ArrayList<?> subResponseList=(ArrayList<Object>)fieldValue;
            for (            Object value : subResponseList) {
              if (value instanceof ResponseObject) {
                ResponseObject subObj=(ResponseObject)value;
                serializeResponseObjXML(sb,subObj);
              }
            }
          }
 else           if (fieldValue instanceof Date) {
            sb.append(""String_Node_Str"" + serializedName.value() + ""String_Node_Str""+ BaseCmd.getDateString((Date)fieldValue)+ ""String_Node_Str""+ serializedName.value()+ ""String_Node_Str"");
          }
 else {
            sb.append(""String_Node_Str"" + serializedName.value() + ""String_Node_Str""+ fieldValue.toString()+ ""String_Node_Str""+ serializedName.value()+ ""String_Node_Str"");
          }
        }
      }
 catch (      IllegalArgumentException e) {
        s_logger.error(""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ propName);
      }
catch (      IllegalAccessException e) {
        s_logger.error(""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ propName);
      }
catch (      InvocationTargetException e) {
        s_logger.error(""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ propName);
      }
    }
  }
}","private static void serializeResponseObjFieldsXML(StringBuilder sb,ResponseObject obj){
  boolean isAsync=false;
  if (obj instanceof AsyncJobResponse)   isAsync=true;
  Field[] fields=obj.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if ((field.getModifiers() & Modifier.TRANSIENT) != 0) {
      continue;
    }
    SerializedName serializedName=field.getAnnotation(SerializedName.class);
    if (serializedName == null) {
      continue;
    }
    String propName=field.getName();
    Method method=getGetMethod(obj,propName);
    if (method != null) {
      try {
        Object fieldValue=method.invoke(obj);
        if (fieldValue != null) {
          if (fieldValue instanceof ResponseObject) {
            ResponseObject subObj=(ResponseObject)fieldValue;
            if (isAsync) {
              sb.append(""String_Node_Str"");
            }
            serializeResponseObjXML(sb,subObj);
            if (isAsync) {
              sb.append(""String_Node_Str"");
            }
          }
 else           if (fieldValue instanceof List<?>) {
            List<?> subResponseList=(List<Object>)fieldValue;
            for (            Object value : subResponseList) {
              if (value instanceof ResponseObject) {
                ResponseObject subObj=(ResponseObject)value;
                if (serializedName != null) {
                  subObj.setObjectName(serializedName.value());
                }
                serializeResponseObjXML(sb,subObj);
              }
            }
          }
 else           if (fieldValue instanceof Date) {
            sb.append(""String_Node_Str"" + serializedName.value() + ""String_Node_Str""+ BaseCmd.getDateString((Date)fieldValue)+ ""String_Node_Str""+ serializedName.value()+ ""String_Node_Str"");
          }
 else {
            sb.append(""String_Node_Str"" + serializedName.value() + ""String_Node_Str""+ fieldValue.toString()+ ""String_Node_Str""+ serializedName.value()+ ""String_Node_Str"");
          }
        }
      }
 catch (      IllegalArgumentException e) {
        s_logger.error(""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ propName);
      }
catch (      IllegalAccessException e) {
        s_logger.error(""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ propName);
      }
catch (      InvocationTargetException e) {
        s_logger.error(""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ propName);
      }
    }
  }
}",0.9702021254428006
107343,"@Override @DB @SuppressWarnings(""String_Node_Str"") public boolean revokeNetworkGroupIngress(RevokeNetworkGroupIngressCmd cmd){
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  Long domainId=cmd.getDomainId();
  Integer startPort=cmd.getStartPort();
  Integer endPort=cmd.getEndPort();
  Integer icmpType=cmd.getIcmpType();
  Integer icmpCode=cmd.getIcmpCode();
  String protocol=cmd.getProtocol();
  String networkGroup=cmd.getNetworkGroupName();
  String cidrList=cmd.getCidrList();
  Map groupList=cmd.getUserNetworkGroupList();
  String[] cidrs=null;
  Long accountId=null;
  Integer startPortOrType=null;
  Integer endPortOrCode=null;
  if (protocol == null) {
    protocol=""String_Node_Str"";
  }
  if (!NetUtils.isValidNetworkGroupProto(protocol)) {
    s_logger.debug(""String_Node_Str"" + protocol);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + protocol);
  }
  if (""String_Node_Str"".equalsIgnoreCase(protocol)) {
    if ((icmpType == null) || (icmpCode == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + icmpType + ""String_Node_Str""+ icmpCode);
    }
    if (icmpType == -1 && icmpCode != -1) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (icmpCode > 255) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    startPortOrType=icmpType;
    endPortOrCode=icmpCode;
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    if ((startPort != null) || (endPort != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    startPortOrType=0;
    endPortOrCode=0;
  }
 else {
    if ((startPort == null) || (endPort == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + startPort + ""String_Node_Str""+ endPort);
    }
    if (startPort == 0 && endPort == 0) {
      endPort=65535;
    }
    if (startPort > endPort) {
      s_logger.debug(""String_Node_Str"" + startPort + ""String_Node_Str""+ endPort);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (startPort > 65535 || endPort > 65535 || startPort < -1 || endPort < -1) {
      s_logger.debug(""String_Node_Str"" + startPort + ""String_Node_Str""+ endPort);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (startPort < 0 || endPort < 0) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    startPortOrType=startPort;
    endPortOrCode=endPort;
  }
  if ((account == null) || isAdmin(account.getType())) {
    if ((account.getAccountName() != null) && (domainId != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkGroup + ""String_Node_Str"");
        }
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + networkGroup + ""String_Node_Str"");
      }
      Account groupOwner=_accountDao.findActiveAccount(account.getAccountName(),domainId);
      if (groupOwner == null) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ domainId);
      }
      accountId=groupOwner.getId();
    }
 else {
      if (account != null) {
        accountId=account.getId();
        domainId=account.getDomainId();
      }
    }
  }
 else {
    if (account != null) {
      accountId=account.getId();
      domainId=account.getDomainId();
    }
  }
  if (accountId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + networkGroup + ""String_Node_Str"");
  }
  NetworkGroupVO sg=_networkGroupDao.findByAccountAndName(accountId,networkGroup);
  if (sg == null) {
    s_logger.debug(""String_Node_Str"" + networkGroup);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + networkGroup);
  }
  if (cidrList == null && groupList == null) {
    s_logger.debug(""String_Node_Str"");
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  List<String> authorizedCidrs=new ArrayList<String>();
  if (cidrList != null) {
    if (protocol.equals(""String_Node_Str"")) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    cidrs=cidrList.split(""String_Node_Str"");
    for (    String cidr : cidrs) {
      if (!NetUtils.isValidCIDR(cidr)) {
        s_logger.debug(""String_Node_Str"" + cidr + ""String_Node_Str"");
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cidr + ""String_Node_Str"");
      }
      authorizedCidrs.add(cidr);
    }
  }
  List<NetworkGroupVO> authorizedGroups=new ArrayList<NetworkGroupVO>();
  if (groupList != null) {
    Collection userGroupCollection=groupList.values();
    Iterator iter=userGroupCollection.iterator();
    while (iter.hasNext()) {
      HashMap userGroup=(HashMap)iter.next();
      String group=(String)userGroup.get(""String_Node_Str"");
      String authorizedAccountName=(String)userGroup.get(""String_Node_Str"");
      if ((group == null) || (authorizedAccountName == null)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      }
      Account authorizedAccount=_accountDao.findActiveAccount(authorizedAccountName,domainId);
      if (authorizedAccount == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + authorizedAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ networkGroup+ ""String_Node_Str""+ protocol+ ""String_Node_Str""+ startPortOrType+ ""String_Node_Str""+ endPortOrCode);
        }
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + authorizedAccountName + ""String_Node_Str""+ networkGroup+ ""String_Node_Str""+ protocol+ ""String_Node_Str""+ startPortOrType+ ""String_Node_Str""+ endPortOrCode);
      }
      NetworkGroupVO groupVO=_networkGroupDao.findByAccountAndName(authorizedAccount.getId(),group);
      if (groupVO == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ group);
        }
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + userGroup + ""String_Node_Str"");
      }
      authorizedGroups.add(groupVO);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (!_enabled) {
    return false;
  }
  int numDeleted=0;
  final int numToDelete=cidrList.length() + authorizedGroups.size();
  final Transaction txn=Transaction.currentTxn();
  NetworkGroupVO networkGroupHandle=_networkGroupDao.findByAccountAndName(accountId,networkGroup);
  if (networkGroupHandle == null) {
    s_logger.warn(""String_Node_Str"" + networkGroup);
    return false;
  }
  try {
    txn.start();
    networkGroupHandle=_networkGroupDao.acquireInLockTable(networkGroupHandle.getId());
    if (networkGroupHandle == null) {
      s_logger.warn(""String_Node_Str"" + networkGroup);
      return false;
    }
    for (    final NetworkGroupVO ngVO : authorizedGroups) {
      numDeleted+=_ingressRuleDao.deleteByPortProtoAndGroup(networkGroupHandle.getId(),protocol,startPort,endPort,ngVO.getId());
    }
    for (    final String cidr : cidrs) {
      numDeleted+=_ingressRuleDao.deleteByPortProtoAndCidr(networkGroupHandle.getId(),protocol,startPort,endPort,cidr);
    }
    s_logger.debug(""String_Node_Str"" + networkGroup + ""String_Node_Str""+ numToDelete+ ""String_Node_Str""+ numDeleted);
    final Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.addAll(_networkGroupVMMapDao.listVmIdsByNetworkGroup(networkGroupHandle.getId()));
    scheduleRulesetUpdateToHosts(affectedVms,true,null);
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (networkGroup != null) {
      _networkGroupDao.releaseFromLockTable(networkGroupHandle.getId());
    }
    txn.commit();
  }
}","@Override @DB @SuppressWarnings(""String_Node_Str"") public boolean revokeNetworkGroupIngress(RevokeNetworkGroupIngressCmd cmd){
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Integer startPort=cmd.getStartPort();
  Integer endPort=cmd.getEndPort();
  Integer icmpType=cmd.getIcmpType();
  Integer icmpCode=cmd.getIcmpCode();
  String protocol=cmd.getProtocol();
  String networkGroup=cmd.getNetworkGroupName();
  String cidrList=cmd.getCidrList();
  Map groupList=cmd.getUserNetworkGroupList();
  String[] cidrs=null;
  Long accountId=null;
  Integer startPortOrType=null;
  Integer endPortOrCode=null;
  if (protocol == null) {
    protocol=""String_Node_Str"";
  }
  if (!NetUtils.isValidNetworkGroupProto(protocol)) {
    s_logger.debug(""String_Node_Str"" + protocol);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + protocol);
  }
  if (""String_Node_Str"".equalsIgnoreCase(protocol)) {
    if ((icmpType == null) || (icmpCode == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + icmpType + ""String_Node_Str""+ icmpCode);
    }
    if (icmpType == -1 && icmpCode != -1) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (icmpCode > 255) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    startPortOrType=icmpType;
    endPortOrCode=icmpCode;
  }
 else   if (protocol.equals(""String_Node_Str"")) {
    if ((startPort != null) || (endPort != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    startPortOrType=0;
    endPortOrCode=0;
  }
 else {
    if ((startPort == null) || (endPort == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + startPort + ""String_Node_Str""+ endPort);
    }
    if (startPort == 0 && endPort == 0) {
      endPort=65535;
    }
    if (startPort > endPort) {
      s_logger.debug(""String_Node_Str"" + startPort + ""String_Node_Str""+ endPort);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (startPort > 65535 || endPort > 65535 || startPort < -1 || endPort < -1) {
      s_logger.debug(""String_Node_Str"" + startPort + ""String_Node_Str""+ endPort);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (startPort < 0 || endPort < 0) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    startPortOrType=startPort;
    endPortOrCode=endPort;
  }
  if ((account == null) || isAdmin(account.getType())) {
    if ((accountName != null) && (domainId != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkGroup + ""String_Node_Str"");
        }
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + networkGroup + ""String_Node_Str"");
      }
      Account groupOwner=_accountDao.findActiveAccount(accountName,domainId);
      if (groupOwner == null) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      accountId=groupOwner.getId();
    }
 else {
      if (account != null) {
        accountId=account.getId();
        domainId=account.getDomainId();
      }
    }
  }
 else {
    if (account != null) {
      accountId=account.getId();
      domainId=account.getDomainId();
    }
  }
  if (accountId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + networkGroup + ""String_Node_Str"");
  }
  NetworkGroupVO sg=_networkGroupDao.findByAccountAndName(accountId,networkGroup);
  if (sg == null) {
    s_logger.debug(""String_Node_Str"" + networkGroup);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + networkGroup);
  }
  if (cidrList == null && groupList == null) {
    s_logger.debug(""String_Node_Str"");
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  List<String> authorizedCidrs=new ArrayList<String>();
  if (cidrList != null) {
    if (protocol.equals(""String_Node_Str"")) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    cidrs=cidrList.split(""String_Node_Str"");
    for (    String cidr : cidrs) {
      if (!NetUtils.isValidCIDR(cidr)) {
        s_logger.debug(""String_Node_Str"" + cidr + ""String_Node_Str"");
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cidr + ""String_Node_Str"");
      }
      authorizedCidrs.add(cidr);
    }
  }
  List<NetworkGroupVO> authorizedGroups=new ArrayList<NetworkGroupVO>();
  if (groupList != null) {
    Collection userGroupCollection=groupList.values();
    Iterator iter=userGroupCollection.iterator();
    while (iter.hasNext()) {
      HashMap userGroup=(HashMap)iter.next();
      String group=(String)userGroup.get(""String_Node_Str"");
      String authorizedAccountName=(String)userGroup.get(""String_Node_Str"");
      if ((group == null) || (authorizedAccountName == null)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      }
      Account authorizedAccount=_accountDao.findActiveAccount(authorizedAccountName,domainId);
      if (authorizedAccount == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + authorizedAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ networkGroup+ ""String_Node_Str""+ protocol+ ""String_Node_Str""+ startPortOrType+ ""String_Node_Str""+ endPortOrCode);
        }
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + authorizedAccountName + ""String_Node_Str""+ networkGroup+ ""String_Node_Str""+ protocol+ ""String_Node_Str""+ startPortOrType+ ""String_Node_Str""+ endPortOrCode);
      }
      NetworkGroupVO groupVO=_networkGroupDao.findByAccountAndName(authorizedAccount.getId(),group);
      if (groupVO == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ group);
        }
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + userGroup + ""String_Node_Str"");
      }
      authorizedGroups.add(groupVO);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (!_enabled) {
    return false;
  }
  int numDeleted=0;
  final int numToDelete=cidrList.length() + authorizedGroups.size();
  final Transaction txn=Transaction.currentTxn();
  NetworkGroupVO networkGroupHandle=_networkGroupDao.findByAccountAndName(accountId,networkGroup);
  if (networkGroupHandle == null) {
    s_logger.warn(""String_Node_Str"" + networkGroup);
    return false;
  }
  try {
    txn.start();
    networkGroupHandle=_networkGroupDao.acquireInLockTable(networkGroupHandle.getId());
    if (networkGroupHandle == null) {
      s_logger.warn(""String_Node_Str"" + networkGroup);
      return false;
    }
    for (    final NetworkGroupVO ngVO : authorizedGroups) {
      numDeleted+=_ingressRuleDao.deleteByPortProtoAndGroup(networkGroupHandle.getId(),protocol,startPort,endPort,ngVO.getId());
    }
    for (    final String cidr : cidrs) {
      numDeleted+=_ingressRuleDao.deleteByPortProtoAndCidr(networkGroupHandle.getId(),protocol,startPort,endPort,cidr);
    }
    s_logger.debug(""String_Node_Str"" + networkGroup + ""String_Node_Str""+ numToDelete+ ""String_Node_Str""+ numDeleted);
    final Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.addAll(_networkGroupVMMapDao.listVmIdsByNetworkGroup(networkGroupHandle.getId()));
    scheduleRulesetUpdateToHosts(affectedVms,true,null);
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (networkGroup != null) {
      _networkGroupDao.releaseFromLockTable(networkGroupHandle.getId());
    }
    txn.commit();
  }
}",0.9933939922722174
107344,"public void setPool(StoragePoolVO pool){
  this.pool=pool;
}","public void setPool(StoragePoolVO pool){
  this.pool=new StoragePoolVO(pool);
}",0.8633093525179856
107345,"public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    s_logger.info(""String_Node_Str"");
    return new JsonNull();
  }
  Gson json=s_gBuilder.create();
  s_logger.debug(""String_Node_Str"");
  return json.toJsonTree(src,listType);
}","public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    s_logger.info(""String_Node_Str"");
    return new JsonNull();
  }
  Gson json=s_gBuilder.create();
  s_logger.debug(""String_Node_Str"");
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(json.toJsonTree(pc));
  }
  return array;
}",0.8167388167388168
107346,"public List<PortConfig> deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  if (json.isJsonNull()) {
    return new ArrayList<PortConfig>();
  }
  Gson jsonp=s_gBuilder.create();
  List<PortConfig> pcs=jsonp.fromJson(json,listType);
  return pcs;
}","public List<PortConfig> deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  if (json.isJsonNull()) {
    return new ArrayList<PortConfig>();
  }
  Gson jsonp=s_gBuilder.create();
  List<PortConfig> pcs=new ArrayList<PortConfig>();
  JsonArray array=json.getAsJsonArray();
  Iterator<JsonElement> it=array.iterator();
  while (it.hasNext()) {
    JsonElement element=it.next();
    pcs.add(jsonp.fromJson(element,PortConfig.class));
  }
  return pcs;
}",0.7028360049321825
107347,"protected Answer execute(final SetFirewallRuleCommand cmd){
  final String result=setFirewallRules(cmd.isEnable(),cmd.getRouterName(),cmd.getRouterIpAddress(),cmd.getProtocol().toLowerCase(),cmd.getPublicIpAddress(),cmd.getPublicPort(),cmd.getPrivateIpAddress(),cmd.getPrivatePort(),cmd.getOldPrivateIP(),cmd.getOldPrivatePort(),cmd.getVlanNetmask());
  return new Answer(cmd,result == null,result);
}","protected Answer execute(final SetFirewallRuleCommand cmd){
  String args;
  if (cmd.isNat()) {
    if (cmd.isCreate())     args=""String_Node_Str"";
 else     args=""String_Node_Str"";
    args+=""String_Node_Str"" + cmd.getPublicIpAddress();
    args+=""String_Node_Str"" + cmd.getRouterIpAddress();
    args+=""String_Node_Str"" + cmd.getPrivateIpAddress();
    args+=""String_Node_Str"" + cmd.getProtocol();
  }
 else {
    if (cmd.isEnable()) {
      args=""String_Node_Str"";
    }
 else {
      args=""String_Node_Str"";
    }
    args+=""String_Node_Str"" + cmd.getProtocol().toLowerCase();
    args+=""String_Node_Str"" + cmd.getPublicIpAddress();
    args+=""String_Node_Str"" + cmd.getPublicPort();
    args+=""String_Node_Str"" + cmd.getRouterName();
    args+=""String_Node_Str"" + cmd.getRouterIpAddress();
    args+=""String_Node_Str"" + cmd.getPrivateIpAddress();
    args+=""String_Node_Str"" + cmd.getPrivatePort();
    args+=""String_Node_Str"" + cmd.getVlanNetmask();
    String oldPrivateIP=cmd.getOldPrivateIP();
    String oldPrivatePort=cmd.getOldPrivatePort();
    if (oldPrivateIP != null) {
      args+=""String_Node_Str"" + oldPrivateIP;
    }
    if (oldPrivatePort != null) {
      args+=""String_Node_Str"" + oldPrivatePort;
    }
  }
  final Script command=new Script(_firewallPath,_timeout,s_logger);
  String[] argsArray=args.split(""String_Node_Str"");
  for (  String param : argsArray) {
    command.add(param);
  }
  String result=command.execute();
  return new Answer(cmd,result == null,result);
}",0.1326315789473684
107348,"@Override @DB public boolean assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd) throws NetworkRuleConflictException {
  Long loadBalancerId=cmd.getLoadBalancerId();
  Long instanceIdParam=cmd.getVirtualMachineId();
  List<Long> instanceIds=cmd.getVirtualMachineIds();
  if ((instanceIdParam == null) && (instanceIds == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  if ((instanceIds == null) && (instanceIdParam != null)) {
    instanceIds=new ArrayList<Long>();
    instanceIds.add(instanceIdParam);
  }
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  DomainRouterVO syncObject=_routerMgr.getRouter(loadBalancer.getIpAddress());
  if (syncObject == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str""+ loadBalancer.getIpAddress());
  }
 else {
    cmd.synchronizeCommand(""String_Node_Str"",syncObject.getId());
  }
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
    }
 else     if (account.getType() != Account.ACCOUNT_TYPE_ADMIN && account.getId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  List<FirewallRuleVO> firewallRulesToApply=new ArrayList<FirewallRuleVO>();
  long accountId=0;
  DomainRouterVO router=null;
  List<LoadBalancerVMMapVO> mappedInstances=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,false);
  Set<Long> mappedInstanceIds=new HashSet<Long>();
  if (mappedInstances != null) {
    for (    LoadBalancerVMMapVO mappedInstance : mappedInstances) {
      mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
    }
  }
  List<Long> finalInstanceIds=new ArrayList<Long>();
  for (  Long instanceId : instanceIds) {
    if (mappedInstanceIds.contains(instanceId)) {
      continue;
    }
 else {
      finalInstanceIds.add(instanceId);
    }
    UserVmVO userVm=_vmDao.findById(instanceId);
    if (userVm == null) {
      s_logger.warn(""String_Node_Str"" + instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId);
    }
 else {
      ServiceOfferingVO offering=_serviceOfferingDao.findById(userVm.getServiceOfferingId());
      if ((offering == null) || !GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
        _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,Boolean.TRUE);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
        }
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
      }
    }
    if (accountId == 0) {
      accountId=userVm.getAccountId();
    }
 else     if (accountId != userVm.getAccountId()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
    }
    DomainRouterVO nextRouter=null;
    if (userVm.getDomainRouterId() != null)     nextRouter=_routerMgr.getRouter(userVm.getDomainRouterId());
    if (nextRouter == null) {
      s_logger.warn(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
    }
    if (router == null) {
      router=nextRouter;
      if (router.getAccountId() != loadBalancer.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getAccountId()+ ""String_Node_Str"");
      }
    }
 else     if (router.getId() != nextRouter.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ nextRouter.getHostName()+ ""String_Node_Str""+ router.getHostName());
    }
    String ipAddress=loadBalancer.getIpAddress();
    String privateIpAddress=userVm.getGuestIpAddress();
    List<FirewallRuleVO> existingRulesOnPubIp=_rulesDao.listIPForwarding(ipAddress);
    if (existingRulesOnPubIp != null) {
      for (      FirewallRuleVO fwRule : existingRulesOnPubIp) {
        if (!((fwRule.isForwarding() == false) && (fwRule.getGroupId() != null) && (fwRule.getGroupId() == loadBalancer.getId()))) {
          if (fwRule.getPublicPort().equals(loadBalancer.getPublicPort())) {
            throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ loadBalancer.getPublicPort()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getId()+ ""String_Node_Str""+ userVm.getHostName()+ ""String_Node_Str"");
          }
        }
 else         if (fwRule.getPrivateIpAddress().equals(privateIpAddress) && fwRule.getPrivatePort().equals(loadBalancer.getPrivatePort()) && fwRule.isEnabled()) {
          continue;
        }
      }
    }
    FirewallRuleVO newFwRule=new FirewallRuleVO();
    newFwRule.setAlgorithm(loadBalancer.getAlgorithm());
    newFwRule.setEnabled(true);
    newFwRule.setForwarding(false);
    newFwRule.setPrivatePort(loadBalancer.getPrivatePort());
    newFwRule.setPublicPort(loadBalancer.getPublicPort());
    newFwRule.setPublicIpAddress(loadBalancer.getIpAddress());
    newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
    newFwRule.setGroupId(loadBalancer.getId());
    firewallRulesToApply.add(newFwRule);
  }
  if (firewallRulesToApply.isEmpty()) {
    return true;
  }
  IPAddressVO ipAddr=_ipAddressDao.findById(loadBalancer.getIpAddress());
  List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(accountId,ipAddr.getDataCenterId(),null);
  for (  IPAddressVO ipv : ipAddrs) {
    List<FirewallRuleVO> rules=_rulesDao.listIpForwardingRulesForLoadBalancers(ipv.getAddress());
    firewallRulesToApply.addAll(rules);
  }
  txn.start();
  List<FirewallRuleVO> updatedRules=null;
  if (router.getState().equals(State.Starting)) {
    updatedRules=firewallRulesToApply;
  }
 else {
    updatedRules=updateFirewallRules(loadBalancer.getIpAddress(),firewallRulesToApply,router);
  }
  String description;
  String type=EventTypes.EVENT_NET_RULE_ADD;
  String ruleName=""String_Node_Str"";
  String level=EventVO.LEVEL_INFO;
  LoadBalancerVO loadBalancerLock=null;
  try {
    loadBalancerLock=_loadBalancerDao.acquireInLockTable(loadBalancerId);
    if (loadBalancerLock == null) {
      s_logger.warn(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
    if ((updatedRules != null) && (updatedRules.size() == firewallRulesToApply.size())) {
      for (      Long addedInstanceId : finalInstanceIds) {
        LoadBalancerVMMapVO mappedVM=new LoadBalancerVMMapVO(loadBalancerId,addedInstanceId);
        _loadBalancerVMMapDao.persist(mappedVM);
      }
      for (      FirewallRuleVO updatedRule : updatedRules) {
        _rulesDao.persist(updatedRule);
        description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ updatedRule.getPublicIpAddress()+ ""String_Node_Str""+ updatedRule.getPublicPort()+ ""String_Node_Str""+ updatedRule.getPrivateIpAddress()+ ""String_Node_Str""+ updatedRule.getPrivatePort()+ ""String_Node_Str""+ ""String_Node_Str""+ updatedRule.getProtocol();
        EventUtils.saveEvent(UserContext.current().getUserId(),loadBalancer.getAccountId(),level,type,description);
      }
      txn.commit();
      return true;
    }
 else {
      _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,null);
      txn.commit();
      s_logger.warn(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
      throw new CloudRuntimeException(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
    }
  }
  finally {
    if (loadBalancerLock != null) {
      _loadBalancerDao.releaseFromLockTable(loadBalancerId);
    }
  }
}","@Override @DB public boolean assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd) throws NetworkRuleConflictException {
  Long loadBalancerId=cmd.getLoadBalancerId();
  Long instanceIdParam=cmd.getVirtualMachineId();
  List<Long> instanceIds=cmd.getVirtualMachineIds();
  if ((instanceIdParam == null) && (instanceIds == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  if ((instanceIds == null) && (instanceIdParam != null)) {
    instanceIds=new ArrayList<Long>();
    instanceIds.add(instanceIdParam);
  }
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
    }
 else     if (account.getType() != Account.ACCOUNT_TYPE_ADMIN && account.getId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  List<FirewallRuleVO> firewallRulesToApply=new ArrayList<FirewallRuleVO>();
  long accountId=0;
  DomainRouterVO router=null;
  List<LoadBalancerVMMapVO> mappedInstances=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,false);
  Set<Long> mappedInstanceIds=new HashSet<Long>();
  if (mappedInstances != null) {
    for (    LoadBalancerVMMapVO mappedInstance : mappedInstances) {
      mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
    }
  }
  List<Long> finalInstanceIds=new ArrayList<Long>();
  for (  Long instanceId : instanceIds) {
    if (mappedInstanceIds.contains(instanceId)) {
      continue;
    }
 else {
      finalInstanceIds.add(instanceId);
    }
    UserVmVO userVm=_vmDao.findById(instanceId);
    if (userVm == null) {
      s_logger.warn(""String_Node_Str"" + instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId);
    }
 else {
      ServiceOfferingVO offering=_serviceOfferingDao.findById(userVm.getServiceOfferingId());
      if ((offering == null) || !GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
        _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,Boolean.TRUE);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
        }
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
      }
    }
    if (accountId == 0) {
      accountId=userVm.getAccountId();
    }
 else     if (accountId != userVm.getAccountId()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
    }
    DomainRouterVO nextRouter=null;
    if (userVm.getDomainRouterId() != null)     nextRouter=_routerMgr.getRouter(userVm.getDomainRouterId());
    if (nextRouter == null) {
      s_logger.warn(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
    }
    if (router == null) {
      router=nextRouter;
      if (router.getAccountId() != loadBalancer.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getAccountId()+ ""String_Node_Str"");
      }
    }
 else     if (router.getId() != nextRouter.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ nextRouter.getHostName()+ ""String_Node_Str""+ router.getHostName());
    }
    String ipAddress=loadBalancer.getIpAddress();
    String privateIpAddress=userVm.getGuestIpAddress();
    List<FirewallRuleVO> existingRulesOnPubIp=_rulesDao.listIPForwarding(ipAddress);
    if (existingRulesOnPubIp != null) {
      for (      FirewallRuleVO fwRule : existingRulesOnPubIp) {
        if (!((fwRule.isForwarding() == false) && (fwRule.getGroupId() != null) && (fwRule.getGroupId() == loadBalancer.getId()))) {
          if (fwRule.getPublicPort().equals(loadBalancer.getPublicPort())) {
            throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ loadBalancer.getPublicPort()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getId()+ ""String_Node_Str""+ userVm.getHostName()+ ""String_Node_Str"");
          }
        }
 else         if (fwRule.getPrivateIpAddress().equals(privateIpAddress) && fwRule.getPrivatePort().equals(loadBalancer.getPrivatePort()) && fwRule.isEnabled()) {
          continue;
        }
      }
    }
    FirewallRuleVO newFwRule=new FirewallRuleVO();
    newFwRule.setAlgorithm(loadBalancer.getAlgorithm());
    newFwRule.setEnabled(true);
    newFwRule.setForwarding(false);
    newFwRule.setPrivatePort(loadBalancer.getPrivatePort());
    newFwRule.setPublicPort(loadBalancer.getPublicPort());
    newFwRule.setPublicIpAddress(loadBalancer.getIpAddress());
    newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
    newFwRule.setGroupId(loadBalancer.getId());
    firewallRulesToApply.add(newFwRule);
  }
  if (firewallRulesToApply.isEmpty()) {
    return true;
  }
  if (router == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str""+ loadBalancer.getIpAddress());
  }
 else {
    cmd.synchronizeCommand(""String_Node_Str"",router.getId());
  }
  IPAddressVO ipAddr=_ipAddressDao.findById(loadBalancer.getIpAddress());
  List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(accountId,ipAddr.getDataCenterId(),null);
  for (  IPAddressVO ipv : ipAddrs) {
    List<FirewallRuleVO> rules=_rulesDao.listIpForwardingRulesForLoadBalancers(ipv.getAddress());
    firewallRulesToApply.addAll(rules);
  }
  txn.start();
  List<FirewallRuleVO> updatedRules=null;
  if (router.getState().equals(State.Starting)) {
    updatedRules=firewallRulesToApply;
  }
 else {
    updatedRules=updateFirewallRules(loadBalancer.getIpAddress(),firewallRulesToApply,router);
  }
  String description;
  String type=EventTypes.EVENT_NET_RULE_ADD;
  String ruleName=""String_Node_Str"";
  String level=EventVO.LEVEL_INFO;
  LoadBalancerVO loadBalancerLock=null;
  try {
    loadBalancerLock=_loadBalancerDao.acquireInLockTable(loadBalancerId);
    if (loadBalancerLock == null) {
      s_logger.warn(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
    if ((updatedRules != null) && (updatedRules.size() == firewallRulesToApply.size())) {
      for (      Long addedInstanceId : finalInstanceIds) {
        LoadBalancerVMMapVO mappedVM=new LoadBalancerVMMapVO(loadBalancerId,addedInstanceId);
        _loadBalancerVMMapDao.persist(mappedVM);
      }
      for (      FirewallRuleVO updatedRule : updatedRules) {
        _rulesDao.persist(updatedRule);
        description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ updatedRule.getPublicIpAddress()+ ""String_Node_Str""+ updatedRule.getPublicPort()+ ""String_Node_Str""+ updatedRule.getPrivateIpAddress()+ ""String_Node_Str""+ updatedRule.getPrivatePort()+ ""String_Node_Str""+ ""String_Node_Str""+ updatedRule.getProtocol();
        EventUtils.saveEvent(UserContext.current().getUserId(),loadBalancer.getAccountId(),level,type,description);
      }
      txn.commit();
      return true;
    }
 else {
      _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,null);
      txn.commit();
      s_logger.warn(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
      throw new CloudRuntimeException(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
    }
  }
  finally {
    if (loadBalancerLock != null) {
      _loadBalancerDao.releaseFromLockTable(loadBalancerId);
    }
  }
}",0.9692179237406068
107349,"public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  Gson json=s_gBuilder.create();
  String result=json.toJson(src,listType);
  return new JsonPrimitive(result);
}","public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  Gson json=s_gBuilder.create();
  s_logger.debug(""String_Node_Str"");
  return json.toJsonTree(src,listType);
}",0.7688679245283019
107350,"public List<PortConfig> deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  String jsonString=json.toString();
  Gson jsonp=new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
  List<PortConfig> pcs=jsonp.fromJson(jsonString,listType);
  return pcs;
}","public List<PortConfig> deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  Gson jsonp=s_gBuilder.create();
  List<PortConfig> pcs=jsonp.fromJson(json,listType);
  return pcs;
}",0.5405405405405406
107351,"public void dispatch(BaseCmd cmd,Map<String,String> params){
  setupParameters(cmd,params);
  try {
    cmd.execute();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.warn(t);
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t);
      throw new ServerApiException(((ServerApiException)t).getErrorCode(),((ServerApiException)t).getDescription());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else {
      s_logger.warn(t);
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getAccount() == null || UserContext.current().getAccount().getType() == Account.ACCOUNT_TYPE_ADMIN)       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
 else       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
    }
  }
}","public void dispatch(BaseCmd cmd,Map<String,String> params){
  setupParameters(cmd,params);
  try {
    cmd.execute();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.warn(t);
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + ""String_Node_Str"" + ((ServerApiException)t).getDescription());
      throw new ServerApiException(((ServerApiException)t).getErrorCode(),((ServerApiException)t).getDescription());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else {
      s_logger.warn(t);
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getAccount() == null || UserContext.current().getAccount().getType() == Account.ACCOUNT_TYPE_ADMIN)       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
 else       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
    }
  }
}",0.9811896288764616
107352,"public void dispatchCreateCmd(BaseAsyncCreateCmd cmd,Map<String,String> params){
  setupParameters(cmd,params);
  try {
    cmd.callCreate();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t);
      throw new ServerApiException(((ServerApiException)t).getErrorCode(),((ServerApiException)t).getDescription());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else {
      s_logger.warn(t);
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getAccount() == null || UserContext.current().getAccount().getType() == Account.ACCOUNT_TYPE_ADMIN)       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
 else       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
    }
  }
}","public void dispatchCreateCmd(BaseAsyncCreateCmd cmd,Map<String,String> params){
  setupParameters(cmd,params);
  try {
    cmd.callCreate();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.info(t);
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + ""String_Node_Str"" + ((ServerApiException)t).getDescription());
      throw new ServerApiException(((ServerApiException)t).getErrorCode(),((ServerApiException)t).getDescription());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else {
      s_logger.warn(t);
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getAccount() == null || UserContext.current().getAccount().getType() == Account.ACCOUNT_TYPE_ADMIN)       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
 else       throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
    }
  }
}",0.9814070351758792
107353,"@Override public boolean attachISOToVM(long vmId,long isoId,boolean attach){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    return false;
  }
 else   if (vm.getState() != State.Running) {
    return true;
  }
  Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(isoId,vm.getDataCenterId());
  String isoPath;
  String isoName=_templateDao.findById(isoId).getName();
  if (isoPathPair == null) {
    if (isoName.startsWith(""String_Node_Str""))     isoPath=isoName;
 else     return false;
  }
 else {
    isoPath=isoPathPair.first();
  }
  String vmName=vm.getInstanceName();
  HostVO host=_hostDao.findById(vm.getHostId());
  if (host == null)   return false;
  AttachIsoCommand cmd=new AttachIsoCommand(vmName,isoPath,attach);
  if (isoPathPair != null)   cmd.setStoreUrl(isoPathPair.second());
  Answer a=_agentMgr.easySend(vm.getHostId(),cmd);
  return (a != null);
}","@Override public boolean attachISOToVM(long vmId,long isoId,boolean attach){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    return false;
  }
 else   if (vm.getState() != State.Running) {
    return true;
  }
  Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(isoId,vm.getDataCenterId());
  String isoPath;
  String isoName=_templateDao.findById(isoId).getName();
  if (isoPathPair == null) {
    if (isoName.startsWith(""String_Node_Str""))     isoPath=isoName;
 else {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
  }
 else {
    isoPath=isoPathPair.first();
  }
  String vmName=vm.getInstanceName();
  HostVO host=_hostDao.findById(vm.getHostId());
  if (host == null)   return false;
  AttachIsoCommand cmd=new AttachIsoCommand(vmName,isoPath,attach);
  if (isoPathPair != null)   cmd.setStoreUrl(isoPathPair.second());
  Answer a=_agentMgr.easySend(vm.getHostId(),cmd);
  return (a != null);
}",0.9543478260869566
107354,"private StoragePool getStoragePool(Connect conn,StoragePoolVO pool){
  StoragePool sp=null;
  try {
    sp=conn.storagePoolLookupByUUIDString(pool.getUuid());
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
      sp=createNfsStoragePool(conn,pool);
    }
    if (sp == null) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
  }
  try {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
  }
 catch (  LibvirtException e) {
  }
  return sp;
}","private Object getStoragePool(String uuid){
synchronized (_storagePools) {
    if (!_storagePools.containsKey(uuid)) {
      addStoragePool(uuid);
    }
    return _storagePools.get(uuid);
  }
}",0.3423645320197044
107355,"private StoragePool createNfsStoragePool(Connect conn,StoragePoolVO pool){
  String targetPath=_mountPoint + File.separator + pool.getUuid();
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.NFS,pool.getUuid(),pool.getUuid(),pool.getHostAddress(),pool.getPath(),targetPath);
  _storage.mkdir(targetPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}","private StoragePool createNfsStoragePool(Connect conn,StoragePoolVO pool){
  String targetPath=_mountPoint + File.separator + pool.getUuid();
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.NFS,pool.getUuid(),pool.getUuid(),pool.getHostAddress(),pool.getPath(),targetPath);
  _storage.mkdir(targetPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    addStoragePool(pool.getUuid());
synchronized (getStoragePool(pool.getUuid())) {
      sp=conn.storagePoolDefineXML(spd.toString(),0);
      sp.create(0);
    }
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}",0.9413965087281796
107356,"private StoragePool getNfsSPbyURI(Connect conn,URI uri) throws LibvirtException {
  String sourcePath=uri.getPath();
  sourcePath=sourcePath.replace(""String_Node_Str"",""String_Node_Str"");
  String sourceHost=uri.getHost();
  String uuid=UUID.nameUUIDFromBytes(new String(sourceHost + sourcePath).getBytes()).toString();
  String targetPath=_mountPoint + File.separator + uuid;
  StoragePool sp=null;
  try {
    sp=conn.storagePoolLookupByUUIDString(uuid);
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    try {
      _storage.mkdir(targetPath);
      LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.NFS,uuid,uuid,sourceHost,sourcePath,targetPath);
      s_logger.debug(spd.toString());
      sp=conn.storagePoolDefineXML(spd.toString(),0);
      if (sp == null) {
        s_logger.debug(""String_Node_Str"");
        return null;
      }
      sp.create(0);
      return sp;
    }
 catch (    LibvirtException e) {
      try {
        if (sp != null) {
          sp.undefine();
          sp.free();
        }
      }
 catch (      LibvirtException l) {
      }
      throw e;
    }
  }
 else {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
    return sp;
  }
}","private StoragePool getNfsSPbyURI(Connect conn,URI uri) throws LibvirtException {
  String sourcePath=uri.getPath();
  sourcePath=sourcePath.replace(""String_Node_Str"",""String_Node_Str"");
  String sourceHost=uri.getHost();
  String uuid=UUID.nameUUIDFromBytes(new String(sourceHost + sourcePath).getBytes()).toString();
  String targetPath=_mountPoint + File.separator + uuid;
  StoragePool sp=null;
  try {
    sp=conn.storagePoolLookupByUUIDString(uuid);
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    try {
      _storage.mkdir(targetPath);
      LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.NFS,uuid,uuid,sourceHost,sourcePath,targetPath);
      s_logger.debug(spd.toString());
      addStoragePool(uuid);
synchronized (getStoragePool(uuid)) {
        sp=conn.storagePoolDefineXML(spd.toString(),0);
        if (sp == null) {
          s_logger.debug(""String_Node_Str"");
          return null;
        }
        sp.create(0);
      }
      return sp;
    }
 catch (    LibvirtException e) {
      try {
        if (sp != null) {
          sp.undefine();
          sp.free();
        }
      }
 catch (      LibvirtException l) {
      }
      throw e;
    }
  }
 else {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
    return sp;
  }
}",0.9573495811119572
107357,"private StorageVol getVolume(String volKey) throws LibvirtException {
  StorageVol vol=null;
  try {
    vol=_conn.storageVolLookupByKey(volKey);
  }
 catch (  LibvirtException e) {
  }
  if (vol == null) {
    StoragePool pool=null;
    String token[]=volKey.split(""String_Node_Str"");
    if (token.length <= 2) {
      s_logger.debug(""String_Node_Str"" + volKey);
      return null;
    }
    String poolUUID=token[token.length - 2];
    pool=_conn.storagePoolLookupByUUIDString(poolUUID);
    pool.refresh(0);
    vol=_conn.storageVolLookupByKey(volKey);
  }
  return vol;
}","private StorageVol getVolume(String volKey) throws LibvirtException {
  StorageVol vol=null;
  try {
    vol=_conn.storageVolLookupByKey(volKey);
  }
 catch (  LibvirtException e) {
  }
  if (vol == null) {
    StoragePool pool=null;
    String token[]=volKey.split(""String_Node_Str"");
    if (token.length <= 2) {
      s_logger.debug(""String_Node_Str"" + volKey);
      return null;
    }
    String poolUUID=token[token.length - 2];
    pool=_conn.storagePoolLookupByUUIDString(poolUUID);
synchronized (getStoragePool(poolUUID)) {
      pool.refresh(0);
    }
    vol=_conn.storageVolLookupByKey(volKey);
  }
  return vol;
}",0.9584026622296172
107358,"private Long extract(Account account,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=""String_Node_Str"";
  if (isISO) {
    desc=""String_Node_Str"";
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getId() < 201) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (template.getAccountId() != account.getId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId+ ""String_Node_Str""+ account.getAccountName());
      }
    }
 else {
      Account userAccount=_accountDao.findById(template.getAccountId());
      if ((userAccount == null) || !_domainDao.isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId+ ""String_Node_Str"");
      }
    }
  }
  HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (secondaryStorageHost != null) {
    tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
    if (tmpltHostRef != null && tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
      throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
    }
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + Upload.Mode.values());
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  long userId=UserContext.current().getUserId();
  long accountId=template.getAccountId();
  String event=isISO ? EventTypes.EVENT_ISO_EXTRACT : EventTypes.EVENT_TEMPLATE_EXTRACT;
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    EventUtils.saveStartedEvent(userId,accountId,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ extractMode.toString(),eventId);
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  EventUtils.saveStartedEvent(userId,accountId,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ extractMode.toString(),eventId);
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    ExtractJobResultObject resultObject=new ExtractJobResultObject(template.getAccountId(),template.getName(),Upload.Status.DOWNLOAD_URL_CREATED.toString(),vo.getId(),url);
    mgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_SUCCEEDED,1,resultObject);
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_INFO,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ mode,null,eventId);
    return vo.getId();
  }
 else {
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ mode,null,eventId);
    mgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_FAILED,2,null);
    return null;
  }
}","private Long extract(Account account,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=""String_Node_Str"";
  if (isISO) {
    desc=""String_Node_Str"";
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (template.getAccountId() != account.getId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId+ ""String_Node_Str""+ account.getAccountName());
      }
    }
 else {
      Account userAccount=_accountDao.findById(template.getAccountId());
      if ((userAccount == null) || !_domainDao.isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId+ ""String_Node_Str"");
      }
    }
  }
  HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (secondaryStorageHost != null) {
    tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
    if (tmpltHostRef != null && tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
      throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
    }
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + Upload.Mode.values());
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  long userId=UserContext.current().getUserId();
  long accountId=template.getAccountId();
  String event=isISO ? EventTypes.EVENT_ISO_EXTRACT : EventTypes.EVENT_TEMPLATE_EXTRACT;
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    EventUtils.saveStartedEvent(userId,accountId,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ extractMode.toString(),eventId);
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  EventUtils.saveStartedEvent(userId,accountId,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ extractMode.toString(),eventId);
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    ExtractJobResultObject resultObject=new ExtractJobResultObject(template.getAccountId(),template.getName(),Upload.Status.DOWNLOAD_URL_CREATED.toString(),vo.getId(),url);
    mgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_SUCCEEDED,1,resultObject);
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_INFO,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ mode,null,eventId);
    return vo.getId();
  }
 else {
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,event,""String_Node_Str"" + template.getName() + ""String_Node_Str""+ mode,null,eventId);
    mgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_FAILED,2,null);
    return null;
  }
}",0.9945387746996326
107359,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  PublicSearch=createSearchBuilder();
  PublicSearch.and(""String_Node_Str"",PublicSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  routerTmpltName=(String)params.get(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + routerTmpltName);
  if (routerTmpltName == null) {
    routerTmpltName=""String_Node_Str"";
  }
  consoleProxyTmpltName=(String)params.get(""String_Node_Str"");
  if (consoleProxyTmpltName == null)   consoleProxyTmpltName=""String_Node_Str"";
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + consoleProxyTmpltName);
  UniqueNameSearch=createSearchBuilder();
  UniqueNameSearch.and(""String_Node_Str"",UniqueNameSearch.entity().getUniqueName(),SearchCriteria.Op.EQ);
  NameSearch=createSearchBuilder();
  NameSearch.and(""String_Node_Str"",NameSearch.entity().getName(),SearchCriteria.Op.EQ);
  NameAccountIdSearch=createSearchBuilder();
  NameAccountIdSearch.and(""String_Node_Str"",NameAccountIdSearch.entity().getName(),SearchCriteria.Op.EQ);
  NameAccountIdSearch.and(""String_Node_Str"",NameAccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  XenToolsIsoSearch=createSearchBuilder();
  XenToolsIsoSearch.and(""String_Node_Str"",XenToolsIsoSearch.entity().getName(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch=createSearchBuilder();
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  tmpltTypeSearch=createSearchBuilder();
  tmpltTypeSearch.and(""String_Node_Str"",tmpltTypeSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  AccountIdSearch=createSearchBuilder();
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  AccountIdSearch.done();
  SearchBuilder<VMTemplateZoneVO> tmpltZoneSearch=_templateZoneDao.createSearchBuilder();
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getZoneId(),SearchCriteria.Op.EQ);
  TmpltsInZoneSearch=createSearchBuilder();
  TmpltsInZoneSearch.and(""String_Node_Str"",TmpltsInZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  TmpltsInZoneSearch.join(""String_Node_Str"",tmpltZoneSearch,tmpltZoneSearch.entity().getTemplateId(),TmpltsInZoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  tmpltZoneSearch.done();
  TmpltsInZoneSearch.done();
  _defaultHyperType=HypervisorType.getType(_configDao.getValue(""String_Node_Str""));
  return result;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  PublicSearch=createSearchBuilder();
  PublicSearch.and(""String_Node_Str"",PublicSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  routerTmpltName=(String)params.get(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + routerTmpltName);
  if (routerTmpltName == null) {
    routerTmpltName=""String_Node_Str"";
  }
  consoleProxyTmpltName=(String)params.get(""String_Node_Str"");
  if (consoleProxyTmpltName == null)   consoleProxyTmpltName=""String_Node_Str"";
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + consoleProxyTmpltName);
  UniqueNameSearch=createSearchBuilder();
  UniqueNameSearch.and(""String_Node_Str"",UniqueNameSearch.entity().getUniqueName(),SearchCriteria.Op.EQ);
  NameSearch=createSearchBuilder();
  NameSearch.and(""String_Node_Str"",NameSearch.entity().getName(),SearchCriteria.Op.EQ);
  NameAccountIdSearch=createSearchBuilder();
  NameAccountIdSearch.and(""String_Node_Str"",NameAccountIdSearch.entity().getName(),SearchCriteria.Op.EQ);
  NameAccountIdSearch.and(""String_Node_Str"",NameAccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  PublicIsoSearch=createSearchBuilder();
  PublicIsoSearch.and(""String_Node_Str"",PublicIsoSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  PublicIsoSearch.and(""String_Node_Str"",PublicIsoSearch.entity().getFormat(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch=createSearchBuilder();
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  tmpltTypeSearch=createSearchBuilder();
  tmpltTypeSearch.and(""String_Node_Str"",tmpltTypeSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  AccountIdSearch=createSearchBuilder();
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  AccountIdSearch.done();
  SearchBuilder<VMTemplateZoneVO> tmpltZoneSearch=_templateZoneDao.createSearchBuilder();
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getZoneId(),SearchCriteria.Op.EQ);
  TmpltsInZoneSearch=createSearchBuilder();
  TmpltsInZoneSearch.and(""String_Node_Str"",TmpltsInZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  TmpltsInZoneSearch.join(""String_Node_Str"",tmpltZoneSearch,tmpltZoneSearch.entity().getTemplateId(),TmpltsInZoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  tmpltZoneSearch.done();
  TmpltsInZoneSearch.done();
  _defaultHyperType=HypervisorType.getType(_configDao.getValue(""String_Node_Str""));
  return result;
}",0.9717514124293786
107360,"@Override public List<VMTemplateVO> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Account account,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  List<VMTemplateVO> templates=new ArrayList<VMTemplateVO>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    short accountType;
    String accountId=null;
    if (account != null) {
      accountType=account.getType();
      accountId=Long.toString(account.getId());
    }
 else {
      accountType=Account.ACCOUNT_TYPE_ADMIN;
    }
    String guestOSJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    String sql=SELECT_ALL + guestOSJoin;
    String whereClause=""String_Node_Str"";
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=""String_Node_Str"";
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + accountId;
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str""+ ""String_Node_Str""+ accountId+ ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.executable && accountId != null) {
      whereClause+=""String_Node_Str"" + accountId + ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.all && accountType == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=""String_Node_Str"";
    }
 else     if (accountType != Account.ACCOUNT_TYPE_ADMIN) {
      return templates;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType) + getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      VMTemplateVO tmplt=toEntityBean(rs,false);
      if (zoneId != null) {
        VMTemplateZoneVO vtzvo=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (vtzvo != null) {
          templates.add(tmplt);
        }
      }
 else {
        templates.add(tmplt);
      }
    }
    if (isIso && (account.getType() == Account.ACCOUNT_TYPE_NORMAL)) {
      List<VMTemplateVO> xenToolsIso=xenToolsIsoSearch();
      templates.addAll(xenToolsIso);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templates;
}","@Override public List<VMTemplateVO> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Account account,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  List<VMTemplateVO> templates=new ArrayList<VMTemplateVO>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    short accountType;
    String accountId=null;
    if (account != null) {
      accountType=account.getType();
      accountId=Long.toString(account.getId());
    }
 else {
      accountType=Account.ACCOUNT_TYPE_ADMIN;
    }
    String guestOSJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    String sql=SELECT_ALL + guestOSJoin;
    String whereClause=""String_Node_Str"";
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=""String_Node_Str"";
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + accountId;
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str""+ ""String_Node_Str""+ accountId+ ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.executable && accountId != null) {
      whereClause+=""String_Node_Str"" + accountId + ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.all && accountType == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=""String_Node_Str"";
    }
 else     if (accountType != Account.ACCOUNT_TYPE_ADMIN) {
      return templates;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType) + getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      VMTemplateVO tmplt=toEntityBean(rs,false);
      if (zoneId != null) {
        VMTemplateZoneVO vtzvo=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (vtzvo != null) {
          templates.add(tmplt);
        }
      }
 else {
        templates.add(tmplt);
      }
    }
    if (isIso && (account.getType() == Account.ACCOUNT_TYPE_NORMAL)) {
      List<VMTemplateVO> publicIsos=publicIsoSearch();
      templates.addAll(publicIsos);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templates;
}",0.993400286944046
107361,"@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (!parse) {
    if (qName.equals(_serverName)) {
      parse=true;
      parent=getAttribute(atts,""String_Node_Str"");
      String implementationClass=getAttribute(atts,""String_Node_Str"");
      try {
        componentClass=Class.forName(implementationClass);
      }
 catch (      ClassNotFoundException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + implementationClass,e);
      }
      library=getAttribute(atts,""String_Node_Str"");
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    lst=new ArrayList<ComponentInfo<Adapter>>();
    String key=getAttribute(atts,""String_Node_Str"");
    if (key == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    adapters.put(key,lst);
  }
 else   if (qName.equals(""String_Node_Str"")) {
    ComponentInfo<Adapter> info=new ComponentInfo<Adapter>();
    fillInfo(atts,Adapter.class,info);
    lst.add(info);
    currentInfo=info;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    ComponentInfo<Manager> info=new ComponentInfo<Manager>();
    fillInfo(atts,Manager.class,info);
    s_logger.info(""String_Node_Str"" + info.name);
    for (    String key : info.keys) {
      s_logger.info(""String_Node_Str"" + key + ""String_Node_Str""+ info.name);
      managers.put(key,info);
    }
    currentInfo=info;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    paramName=getAttribute(atts,""String_Node_Str"");
    value=new StringBuilder();
  }
 else   if (qName.equals(""String_Node_Str"")) {
    ComponentInfo<GenericDao<?,?>> info=new ComponentInfo<GenericDao<?,?>>();
    fillInfo(atts,GenericDao.class,info);
    for (    String key : info.keys) {
      daos.put(key,info);
    }
    currentInfo=info;
  }
 else {
  }
}","@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (!parse) {
    if (qName.equals(_serverName)) {
      parse=true;
      parent=getAttribute(atts,""String_Node_Str"");
      String implementationClass=getAttribute(atts,""String_Node_Str"");
      if (implementationClass != null) {
        try {
          componentClass=Class.forName(implementationClass);
        }
 catch (        ClassNotFoundException e) {
          throw new CloudRuntimeException(""String_Node_Str"" + implementationClass,e);
        }
      }
      library=getAttribute(atts,""String_Node_Str"");
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    lst=new ArrayList<ComponentInfo<Adapter>>();
    String key=getAttribute(atts,""String_Node_Str"");
    if (key == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    adapters.put(key,lst);
  }
 else   if (qName.equals(""String_Node_Str"")) {
    ComponentInfo<Adapter> info=new ComponentInfo<Adapter>();
    fillInfo(atts,Adapter.class,info);
    lst.add(info);
    currentInfo=info;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    ComponentInfo<Manager> info=new ComponentInfo<Manager>();
    fillInfo(atts,Manager.class,info);
    s_logger.info(""String_Node_Str"" + info.name);
    for (    String key : info.keys) {
      s_logger.info(""String_Node_Str"" + key + ""String_Node_Str""+ info.name);
      managers.put(key,info);
    }
    currentInfo=info;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    paramName=getAttribute(atts,""String_Node_Str"");
    value=new StringBuilder();
  }
 else   if (qName.equals(""String_Node_Str"")) {
    ComponentInfo<GenericDao<?,?>> info=new ComponentInfo<GenericDao<?,?>>();
    fillInfo(atts,GenericDao.class,info);
    for (    String key : info.keys) {
      daos.put(key,info);
    }
    currentInfo=info;
  }
 else {
  }
}",0.9836854774003744
107362,"protected void parse(String filename){
  Pair<XmlHandler,HashMap<String,List<ComponentInfo<Adapter>>>> result=parse2(filename);
  if (result == null) {
    s_logger.info(""String_Node_Str"" + filename);
    return;
  }
  XmlHandler handler=result.first();
  HashMap<String,List<ComponentInfo<Adapter>>> adapters=result.second();
  try {
    startDaos();
    instantiateAdapters(adapters);
    instantiateManagers();
    _component=createInstance(handler.componentClass,true,true);
    configureManagers();
    configureAdapters();
    startManagers();
    startAdapters();
  }
 catch (  CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"" + _serverName + ""String_Node_Str""+ filename,e);
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + _serverName + ""String_Node_Str""+ filename,e);
    System.exit(1);
  }
}","protected void parse(String filename){
  Pair<XmlHandler,HashMap<String,List<ComponentInfo<Adapter>>>> result=parse2(filename);
  if (result == null) {
    s_logger.info(""String_Node_Str"" + filename);
    return;
  }
  XmlHandler handler=result.first();
  HashMap<String,List<ComponentInfo<Adapter>>> adapters=result.second();
  try {
    startDaos();
    instantiateAdapters(adapters);
    instantiateManagers();
    if (handler.componentClass != null) {
      _component=createInstance(handler.componentClass,true,true);
    }
    configureManagers();
    configureAdapters();
    startManagers();
    startAdapters();
  }
 catch (  CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"" + _serverName + ""String_Node_Str""+ filename,e);
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + _serverName + ""String_Node_Str""+ filename,e);
    System.exit(1);
  }
}",0.9602272727272728
107363,"@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(""String_Node_Str"" + req.getRemoteAddr());
  auditTrailSb.append(""String_Node_Str"" + req.getMethod() + ""String_Node_Str"");
  try {
    Map<String,Object[]> params=new HashMap<String,Object[]>();
    params.putAll(req.getParameterMap());
    HttpSession session=req.getSession(false);
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute(""String_Node_Str"");
          Account account=(Account)session.getAttribute(""String_Node_Str"");
          auditTrailSb.insert(0,""String_Node_Str"" + userId + ""String_Node_Str""+ account == null ? null : account.getId() + ""String_Node_Str"" + session.getId()+ ""String_Node_Str"");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append(""String_Node_Str"");
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),false,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        auditTrailSb.append(""String_Node_Str"");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(""String_Node_Str"" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(""String_Node_Str"" + domain);
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,""String_Node_Str"" + session.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ ((Account)session.getAttribute(""String_Node_Str"")).getId()+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,false,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(null,null,null,null,null,null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      Long domainId=(Long)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str""+ ""String_Node_Str"");
          resp.sendError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"");
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,account,((Account)accountObj).getId(),domainId,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,""String_Node_Str"" + UserContext.current().getUserId() + ""String_Node_Str""+ UserContext.current().getAccountId()+ ""String_Node_Str""+ (session != null ? session.getId() : null)+ ""String_Node_Str"");
      try {
        String response=_apiServer.handleRequest(params,true,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",false,responseType);
      }
 catch (      ServerApiException se) {
        auditTrailSb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
        resp.sendError(se.getErrorCode(),se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + ioex);
    }
    auditTrailSb.append(""String_Node_Str"");
  }
catch (  InvalidParameterException ipe) {
    auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ipe.getMessage());
    try {
      resp.sendError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage());
    }
 catch (    IOException e) {
      s_logger.error(""String_Node_Str"");
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ""String_Node_Str""+ ipe.getMessage());
    }
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
    auditTrailSb.append(""String_Node_Str"");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}","@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(""String_Node_Str"" + req.getRemoteAddr());
  auditTrailSb.append(""String_Node_Str"" + req.getMethod() + ""String_Node_Str"");
  try {
    Map<String,Object[]> params=new HashMap<String,Object[]>();
    params.putAll(req.getParameterMap());
    HttpSession session=req.getSession(false);
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute(""String_Node_Str"");
          Account account=(Account)session.getAttribute(""String_Node_Str"");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,""String_Node_Str"" + userId + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append(""String_Node_Str"");
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),false,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        auditTrailSb.append(""String_Node_Str"");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(""String_Node_Str"" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(""String_Node_Str"" + domain);
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,""String_Node_Str"" + session.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ ((Account)session.getAttribute(""String_Node_Str"")).getId()+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,false,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(null,null,null,null,null,null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      Long domainId=(Long)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str""+ ""String_Node_Str"");
          resp.sendError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"");
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,account,((Account)accountObj).getId(),domainId,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,""String_Node_Str"" + UserContext.current().getUserId() + ""String_Node_Str""+ UserContext.current().getAccountId()+ ""String_Node_Str""+ (session != null ? session.getId() : null)+ ""String_Node_Str"");
      try {
        String response=_apiServer.handleRequest(params,true,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",false,responseType);
      }
 catch (      ServerApiException se) {
        auditTrailSb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
        resp.sendError(se.getErrorCode(),se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + ioex);
    }
    auditTrailSb.append(""String_Node_Str"");
  }
catch (  InvalidParameterException ipe) {
    auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ipe.getMessage());
    try {
      resp.sendError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage());
    }
 catch (    IOException e) {
      s_logger.error(""String_Node_Str"");
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ""String_Node_Str""+ ipe.getMessage());
    }
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
    auditTrailSb.append(""String_Node_Str"");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}",0.9912982126058324
107364,"private VMTemplateVO findSystemVMTemplate(){
  SearchCriteria<VMTemplateVO> sc=tmpltTypeHyperSearch.create();
  sc.setParameters(""String_Node_Str"",Storage.TemplateType.SYSTEM);
  sc.setParameters(""String_Node_Str"",_defaultHyperType.toString());
  VMTemplateVO tmplt=findOneBy(sc);
  if (tmplt == null) {
    if (_defaultHyperType != HypervisorType.XenServer) {
      sc=tmpltTypeHyperSearch.create();
      sc.setParameters(""String_Node_Str"",Storage.TemplateType.SYSTEM);
      sc.setParameters(""String_Node_Str"",HypervisorType.XenServer);
      tmplt=findOneBy(sc);
      if (tmplt == null) {
        sc=tmpltTypeSearch.create();
        sc.setParameters(""String_Node_Str"",Storage.TemplateType.SYSTEM);
        tmplt=findOneBy(sc);
      }
    }
  }
  return tmplt;
}","private VMTemplateVO findSystemVMTemplate(){
  SearchCriteria<VMTemplateVO> sc=tmpltTypeHyperSearch.create();
  sc.setParameters(""String_Node_Str"",Storage.TemplateType.SYSTEM);
  sc.setParameters(""String_Node_Str"",_defaultHyperType.toString());
  VMTemplateVO tmplt=findOneBy(sc);
  if (tmplt == null) {
    if (_defaultHyperType != HypervisorType.XenServer) {
      sc=tmpltTypeHyperSearch.create();
      sc.setParameters(""String_Node_Str"",Storage.TemplateType.SYSTEM);
      sc.setParameters(""String_Node_Str"",HypervisorType.XenServer.toString());
      tmplt=findOneBy(sc);
      if (tmplt == null) {
        sc=tmpltTypeSearch.create();
        sc.setParameters(""String_Node_Str"",Storage.TemplateType.SYSTEM);
        tmplt=findOneBy(sc);
      }
    }
  }
  return tmplt;
}",0.9928894634776988
107365,"public static IPAddressResponse createIPAddressResponse(IPAddressVO ipAddress){
  VlanVO vlan=ApiDBUtils.findVlanById(ipAddress.getVlanDbId());
  boolean forVirtualNetworks=vlan.getVlanType().equals(VlanType.VirtualNetwork);
  IPAddressResponse ipResponse=new IPAddressResponse();
  ipResponse.setIpAddress(ipAddress.getAddress());
  if (ipAddress.getAllocated() != null) {
    ipResponse.setAllocated(ipAddress.getAllocated());
  }
  ipResponse.setZoneId(ipAddress.getDataCenterId());
  ipResponse.setZoneName(ApiDBUtils.findZoneById(ipAddress.getDataCenterId()).getName());
  ipResponse.setSourceNat(ipAddress.isSourceNat());
  Account accountTemp=ApiDBUtils.findAccountById(ipAddress.getAccountId());
  if (accountTemp != null) {
    ipResponse.setAccountName(accountTemp.getAccountName());
    ipResponse.setDomainId(accountTemp.getDomainId());
    ipResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  ipResponse.setForVirtualNetwork(forVirtualNetworks);
  ipResponse.setOneToOneNat(ipAddress.isOneToOneNat());
  Account account=UserContext.current().getAccount();
  if ((account == null) || account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
    ipResponse.setVlanId(ipAddress.getVlanDbId());
    ipResponse.setVlanName(ApiDBUtils.findVlanById(ipAddress.getVlanDbId()).getVlanId());
  }
  ipResponse.setObjectName(""String_Node_Str"");
  return ipResponse;
}","public static IPAddressResponse createIPAddressResponse(IPAddressVO ipAddress){
  VlanVO vlan=ApiDBUtils.findVlanById(ipAddress.getVlanDbId());
  boolean forVirtualNetworks=vlan.getVlanType().equals(VlanType.VirtualNetwork);
  IPAddressResponse ipResponse=new IPAddressResponse();
  ipResponse.setIpAddress(ipAddress.getAddress());
  if (ipAddress.getAllocated() != null) {
    ipResponse.setAllocated(ipAddress.getAllocated());
  }
  ipResponse.setZoneId(ipAddress.getDataCenterId());
  ipResponse.setZoneName(ApiDBUtils.findZoneById(ipAddress.getDataCenterId()).getName());
  ipResponse.setSourceNat(ipAddress.isSourceNat());
  Account accountTemp=ApiDBUtils.findAccountById(ipAddress.getAccountId());
  if (accountTemp != null) {
    ipResponse.setAccountName(accountTemp.getAccountName());
    ipResponse.setDomainId(accountTemp.getDomainId());
    ipResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  ipResponse.setForVirtualNetwork(forVirtualNetworks);
  ipResponse.setStaticNat(ipAddress.isOneToOneNat());
  Account account=UserContext.current().getAccount();
  if ((account == null) || account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
    ipResponse.setVlanId(ipAddress.getVlanDbId());
    ipResponse.setVlanName(ApiDBUtils.findVlanById(ipAddress.getVlanDbId()).getVlanId());
  }
  ipResponse.setObjectName(""String_Node_Str"");
  return ipResponse;
}",0.9950106913756236
107366,"@Override public void execute() throws ServerApiException, InvalidParameterValueException, PermissionDeniedException, InsufficientAddressCapacityException, InsufficientCapacityException, ConcurrentOperationException {
  boolean result=BaseCmd._networkMgr.deletePortForwardingRule(this);
  if (result) {
    SuccessResponse response=new SuccessResponse(getName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ServerApiException, InvalidParameterValueException, PermissionDeniedException, InsufficientAddressCapacityException, InsufficientCapacityException, ConcurrentOperationException {
  boolean result=BaseCmd._networkMgr.deletePortForwardingRule(id,false);
  if (result) {
    SuccessResponse response=new SuccessResponse(getName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9879275653923542
107367,public boolean deletePortForwardingRule(DeletePortForwardingRuleCmd cmd);,"public boolean deletePortForwardingRule(Long id,boolean sysContext);",0.6666666666666666
107368,"@Override @DB public boolean deletePortForwardingRule(DeletePortForwardingRuleCmd cmd){
  Long ruleId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  Account account=UserContext.current().getAccount();
  FirewallRuleVO rule=_firewallRulesDao.findById(ruleId);
  if (rule == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ruleId);
  }
  String publicIp=rule.getPublicIpAddress();
  String privateIp=rule.getPrivateIpAddress();
  IPAddressVO ipAddress=_ipAddressDao.findById(publicIp);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ruleId);
  }
  String privatePort=rule.getPrivatePort();
  String publicPort=rule.getPublicPort();
  if (!NetUtils.isValidPort(publicPort) || !NetUtils.isValidPort(privatePort)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String proto=rule.getProtocol();
  if (!NetUtils.isValidProto(proto)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account ruleOwner=_accountDao.findById(ipAddress.getAccountId());
  if (ruleOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ruleId);
  }
  if (account != null) {
    if (isAdmin(account.getType())) {
      if (!_domainDao.isChildDomain(account.getDomainId(),ruleOwner.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + ruleId + ""String_Node_Str"");
      }
    }
 else     if (account.getId() != ruleOwner.getId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + ruleId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  boolean locked=false;
  boolean success=false;
  try {
    IPAddressVO ipVO=_ipAddressDao.acquireInLockTable(publicIp);
    if (ipVO == null) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    locked=true;
    txn.start();
    List<FirewallRuleVO> fwdings=_firewallRulesDao.listIPForwardingForUpdate(publicIp,publicPort,proto);
    FirewallRuleVO fwRule=null;
    if (fwdings.size() == 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (fwdings.size() == 1) {
      fwRule=fwdings.get(0);
      if (fwRule.getPrivateIpAddress().equalsIgnoreCase(privateIp) && fwRule.getPrivatePort().equals(privatePort)) {
        _firewallRulesDao.expunge(fwRule.getId());
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    fwRule.setEnabled(false);
    success=updateFirewallRule(fwRule,null,null);
    String description;
    String type=EventTypes.EVENT_NET_RULE_DELETE;
    String level=EventVO.LEVEL_INFO;
    String ruleName=rule.isForwarding() ? ""String_Node_Str"" : ""String_Node_Str"";
    if (success) {
      description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ publicIp+ ""String_Node_Str""+ rule.getPublicPort()+ ""String_Node_Str""+ rule.getPrivateIpAddress()+ ""String_Node_Str""+ rule.getPrivatePort()+ ""String_Node_Str""+ rule.getProtocol();
    }
 else {
      level=EventVO.LEVEL_ERROR;
      description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ publicIp+ ""String_Node_Str""+ rule.getPublicPort()+ ""String_Node_Str""+ rule.getPrivateIpAddress()+ ""String_Node_Str""+ rule.getPrivatePort()+ ""String_Node_Str""+ rule.getProtocol();
    }
    EventUtils.saveEvent(userId,ipAddress.getAccountId(),level,type,description);
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.error(""String_Node_Str"" + ruleId,ex);
    return false;
  }
 finally {
    if (locked) {
      _ipAddressDao.releaseFromLockTable(publicIp);
    }
    txn.close();
  }
  return success;
}","@Override @DB public boolean deletePortForwardingRule(Long id,boolean sysContext){
  Long ruleId=id;
  Long userId=null;
  Account account=null;
  if (sysContext) {
    userId=User.UID_SYSTEM;
    account=_accountDao.findById(User.UID_SYSTEM);
  }
 else {
    userId=UserContext.current().getUserId();
    account=UserContext.current().getAccount();
  }
  FirewallRuleVO rule=_firewallRulesDao.findById(ruleId);
  if (rule == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ruleId);
  }
  String publicIp=rule.getPublicIpAddress();
  String privateIp=rule.getPrivateIpAddress();
  IPAddressVO ipAddress=_ipAddressDao.findById(publicIp);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ruleId);
  }
  String privatePort=rule.getPrivatePort();
  String publicPort=rule.getPublicPort();
  if (!NetUtils.isValidPort(publicPort) || !NetUtils.isValidPort(privatePort)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String proto=rule.getProtocol();
  if (!NetUtils.isValidProto(proto)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account ruleOwner=_accountDao.findById(ipAddress.getAccountId());
  if (ruleOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ruleId);
  }
  if (account != null) {
    if (isAdmin(account.getType())) {
      if (!_domainDao.isChildDomain(account.getDomainId(),ruleOwner.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + ruleId + ""String_Node_Str"");
      }
    }
 else     if (account.getId() != ruleOwner.getId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + ruleId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  boolean locked=false;
  boolean success=false;
  try {
    IPAddressVO ipVO=_ipAddressDao.acquireInLockTable(publicIp);
    if (ipVO == null) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    locked=true;
    txn.start();
    List<FirewallRuleVO> fwdings=_firewallRulesDao.listIPForwardingForUpdate(publicIp,publicPort,proto);
    FirewallRuleVO fwRule=null;
    if (fwdings.size() == 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (fwdings.size() == 1) {
      fwRule=fwdings.get(0);
      if (fwRule.getPrivateIpAddress().equalsIgnoreCase(privateIp) && fwRule.getPrivatePort().equals(privatePort)) {
        _firewallRulesDao.expunge(fwRule.getId());
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    fwRule.setEnabled(false);
    success=updateFirewallRule(fwRule,null,null);
    String description;
    String type=EventTypes.EVENT_NET_RULE_DELETE;
    String level=EventVO.LEVEL_INFO;
    String ruleName=rule.isForwarding() ? ""String_Node_Str"" : ""String_Node_Str"";
    if (success) {
      description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ publicIp+ ""String_Node_Str""+ rule.getPublicPort()+ ""String_Node_Str""+ rule.getPrivateIpAddress()+ ""String_Node_Str""+ rule.getPrivatePort()+ ""String_Node_Str""+ rule.getProtocol();
    }
 else {
      level=EventVO.LEVEL_ERROR;
      description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ publicIp+ ""String_Node_Str""+ rule.getPublicPort()+ ""String_Node_Str""+ rule.getPrivateIpAddress()+ ""String_Node_Str""+ rule.getPrivatePort()+ ""String_Node_Str""+ rule.getProtocol();
    }
    EventUtils.saveEvent(userId,ipAddress.getAccountId(),level,type,description);
    txn.commit();
  }
 catch (  Exception ex) {
    txn.rollback();
    s_logger.error(""String_Node_Str"" + ruleId,ex);
    return false;
  }
 finally {
    if (locked) {
      _ipAddressDao.releaseFromLockTable(publicIp);
    }
    txn.close();
  }
  return success;
}",0.9479936642027456
107369,"@DB public void expunge(){
  List<UserVmVO> vms=_vmDao.findDestroyedVms(new Date(System.currentTimeMillis() - ((long)_expungeDelay << 10)));
  s_logger.info(""String_Node_Str"" + vms.size() + ""String_Node_Str"");
  for (  UserVmVO vm : vms) {
    long vmId=vm.getId();
    releaseGuestIpAddress(vm);
    vm.setGuestNetmask(null);
    vm.setGuestMacAddress(null);
    if (!_vmDao.updateIf(vm,Event.ExpungeOperation,null)) {
      s_logger.info(""String_Node_Str"" + vmId + ""String_Node_Str"");
      continue;
    }
    List<VolumeVO> vols=null;
    try {
      vols=_volsDao.findByInstanceIdDestroyed(vmId);
      _storageMgr.destroy(vm,vols);
      _vmDao.remove(vm.getId());
      _networkGroupMgr.removeInstanceFromGroups(vm.getId());
      removeInstanceFromGroup(vm.getId());
      s_logger.debug(""String_Node_Str"");
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + vmId + ""String_Node_Str""+ e.getMessage());
    }
  }
  List<VolumeVO> destroyedVolumes=_volsDao.findByDetachedDestroyed();
  s_logger.info(""String_Node_Str"" + destroyedVolumes.size() + ""String_Node_Str"");
  _storageMgr.destroy(null,destroyedVolumes);
}","@DB public void expunge(){
  List<UserVmVO> vms=_vmDao.findDestroyedVms(new Date(System.currentTimeMillis() - ((long)_expungeDelay << 10)));
  s_logger.info(""String_Node_Str"" + vms.size() + ""String_Node_Str"");
  for (  UserVmVO vm : vms) {
    boolean deleteRules=true;
    String privateIpAddress=vm.getPrivateIpAddress();
    long vmId=vm.getId();
    releaseGuestIpAddress(vm);
    vm.setGuestNetmask(null);
    vm.setGuestMacAddress(null);
    if (!_vmDao.updateIf(vm,Event.ExpungeOperation,null)) {
      s_logger.info(""String_Node_Str"" + vmId + ""String_Node_Str"");
      continue;
    }
    if (VirtualMachineName.isValidRouterName(vm.getHostName()) && !vm.getState().equals(State.Running)) {
      deleteRules=false;
    }
    if (deleteRules) {
      List<FirewallRuleVO> forwardingRules=null;
      forwardingRules=_rulesDao.listByPrivateIp(privateIpAddress);
      for (      FirewallRuleVO rule : forwardingRules) {
        try {
          IPAddressVO publicIp=_ipAddressDao.findById(rule.getPublicIpAddress());
          if (publicIp != null) {
            if ((publicIp.getAccountId().longValue() == vm.getAccountId())) {
              _networkMgr.deletePortForwardingRule(rule.getId(),true);
              if (s_logger.isDebugEnabled())               s_logger.debug(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str"");
            }
          }
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ vm.getHostName());
        }
      }
    }
    List<VolumeVO> vols=null;
    try {
      vols=_volsDao.findByInstanceIdDestroyed(vmId);
      _storageMgr.destroy(vm,vols);
      _vmDao.remove(vm.getId());
      _networkGroupMgr.removeInstanceFromGroups(vm.getId());
      removeInstanceFromGroup(vm.getId());
      s_logger.debug(""String_Node_Str"");
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + vmId + ""String_Node_Str""+ e.getMessage());
    }
  }
  List<VolumeVO> destroyedVolumes=_volsDao.findByDetachedDestroyed();
  s_logger.info(""String_Node_Str"" + destroyedVolumes.size() + ""String_Node_Str"");
  _storageMgr.destroy(null,destroyedVolumes);
}",0.5208520852085209
107370,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String emailAddressList=configs.get(""String_Node_Str"");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(""String_Node_Str"");
  }
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  _emailAlert=null;
  String storageCapacityThreshold=configs.get(""String_Node_Str"");
  String cpuCapacityThreshold=configs.get(""String_Node_Str"");
  String memoryCapacityThreshold=configs.get(""String_Node_Str"");
  String storageAllocCapacityThreshold=configs.get(""String_Node_Str"");
  String publicIPCapacityThreshold=configs.get(""String_Node_Str"");
  String privateIPCapacityThreshold=configs.get(""String_Node_Str"");
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  String capacityCheckPeriodStr=configs.get(""String_Node_Str"");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
  }
  String cpuOverProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer(""String_Node_Str"");
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String emailAddressList=configs.get(""String_Node_Str"");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(""String_Node_Str"");
  }
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  String storageCapacityThreshold=configs.get(""String_Node_Str"");
  String cpuCapacityThreshold=configs.get(""String_Node_Str"");
  String memoryCapacityThreshold=configs.get(""String_Node_Str"");
  String storageAllocCapacityThreshold=configs.get(""String_Node_Str"");
  String publicIPCapacityThreshold=configs.get(""String_Node_Str"");
  String privateIPCapacityThreshold=configs.get(""String_Node_Str"");
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  String capacityCheckPeriodStr=configs.get(""String_Node_Str"");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
  }
  String cpuOverProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer(""String_Node_Str"");
  return true;
}",0.996654399464704
107371,"@Override @DB public boolean deletePod(DeletePodCmd cmd){
  Long podId=cmd.getId();
  Long userId=1L;
  if (UserContext.current() != null)   userId=UserContext.current().getUserId();
  if (!validPod(podId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str"");
  }
  checkIfPodIsDeletable(podId);
  HostPodVO pod=_podDao.findById(podId);
  DataCenterVO zone=_zoneDao.findById(pod.getDataCenterId());
  if (_podDao.expunge(podId) && _privateIpAddressDao.deleteIpAddressByPod(podId)) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_POD_DELETE,""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"",""String_Node_Str"" + podId,""String_Node_Str"" + zone.getId());
    return true;
  }
 else {
    return false;
  }
}","@Override @DB public boolean deletePod(DeletePodCmd cmd){
  Long podId=cmd.getId();
  Long userId=1L;
  if (UserContext.current() != null)   userId=UserContext.current().getUserId();
  if (!validPod(podId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str"");
  }
  checkIfPodIsDeletable(podId);
  HostPodVO pod=_podDao.findById(podId);
  DataCenterVO zone=_zoneDao.findById(pod.getDataCenterId());
  List<DataCenterIpAddressVO> privateIps=_privateIpAddressDao.listByPodIdDcId(Long.valueOf(podId),pod.getDataCenterId());
  if (privateIps != null && privateIps.size() != 0) {
    if (!(_privateIpAddressDao.deleteIpAddressByPod(podId))) {
      throw new CloudRuntimeException(""String_Node_Str"" + podId);
    }
  }
  if (!(_LinkLocalIpAllocDao.deleteIpAddressByPod(podId))) {
    throw new CloudRuntimeException(""String_Node_Str"" + podId);
  }
  if (!(_podDao.expunge(podId))) {
    throw new CloudRuntimeException(""String_Node_Str"" + podId);
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_POD_DELETE,""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"",""String_Node_Str"" + podId,""String_Node_Str"" + zone.getId());
  return true;
}",0.7004470938897168
107372,"@Override @DB public boolean deletePool(DeletePoolCmd command) throws InvalidParameterValueException {
  Long id=command.getId();
  boolean deleteFlag=false;
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (sPool.getPoolType().equals(StoragePoolType.LVM)) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(id);
  if (hostPoolRecords.size() == 0) {
    sPool.setUuid(null);
    _storagePoolDao.update(id,sPool);
    _storagePoolDao.remove(id);
    return true;
  }
 else {
    Pair<Long,Long> volumeRecords=_volsDao.getCountAndTotalByPool(id);
    if (volumeRecords.first() > 0) {
      s_logger.warn(""String_Node_Str"" + sPool.getName() + ""String_Node_Str"");
      return false;
    }
 else {
      StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + sPool.getId());
          return false;
        }
        for (        StoragePoolHostVO host : hostPoolRecords) {
          DeleteStoragePoolCommand cmd=new DeleteStoragePoolCommand(sPool);
          final Answer answer=_agentMgr.easySend(host.getHostId(),cmd);
          if (answer != null) {
            if (answer.getResult() == true) {
              deleteFlag=true;
              break;
            }
          }
        }
      }
  finally {
        if (lock != null) {
          _storagePoolDao.releaseFromLockTable(lock.getId());
        }
      }
      if (deleteFlag) {
        for (        StoragePoolHostVO host : hostPoolRecords) {
          _storagePoolHostDao.deleteStoragePoolHostDetails(host.getHostId(),host.getPoolId());
        }
        sPool.setUuid(null);
        _storagePoolDao.update(id,sPool);
        _storagePoolDao.remove(id);
        return true;
      }
    }
  }
  return false;
}","@Override @DB public boolean deletePool(DeletePoolCmd command) throws InvalidParameterValueException {
  Long id=command.getId();
  boolean deleteFlag=false;
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (sPool.getPoolType().equals(StoragePoolType.LVM)) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(id);
  if (hostPoolRecords.size() == 0) {
    sPool.setUuid(null);
    _storagePoolDao.update(id,sPool);
    _storagePoolDao.remove(id);
    return true;
  }
 else {
    Pair<Long,Long> volumeRecords=_volsDao.getCountAndTotalByPool(id);
    if (volumeRecords.first() > 0) {
      s_logger.warn(""String_Node_Str"" + sPool.getName() + ""String_Node_Str"");
      return false;
    }
 else {
      StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
      try {
        if (lock == null) {
          if (s_logger.isDebugEnabled())           s_logger.debug(""String_Node_Str"" + sPool.getId());
          return false;
        }
        for (        StoragePoolHostVO host : hostPoolRecords) {
          DeleteStoragePoolCommand cmd=new DeleteStoragePoolCommand(sPool);
          final Answer answer=_agentMgr.easySend(host.getHostId(),cmd);
          if (answer != null) {
            if (answer.getResult() == true) {
              deleteFlag=true;
              break;
            }
          }
        }
      }
  finally {
        if (lock != null) {
          _storagePoolDao.releaseFromLockTable(lock.getId());
        }
      }
      if (deleteFlag) {
        for (        StoragePoolHostVO host : hostPoolRecords) {
          _storagePoolHostDao.deleteStoragePoolHostDetails(host.getHostId(),host.getPoolId());
        }
        sPool.setUuid(null);
        _storagePoolDao.update(id,sPool);
        _storagePoolDao.remove(id);
        return true;
      }
    }
  }
  return false;
}",0.99014659937515
107373,"@DB protected List<VolumeVO> create(Account account,VMInstanceVO vm,VMTemplateVO template,DataCenterVO dc,HostPodVO pod,ServiceOfferingVO offering,DiskOfferingVO diskOffering,List<StoragePoolVO> avoids,long size){
  ArrayList<VolumeVO> vols=new ArrayList<VolumeVO>(2);
  VolumeVO dataVol=null;
  VolumeVO rootVol=null;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (Storage.ImageFormat.ISO == template.getFormat()) {
    rootVol=new VolumeVO(VolumeType.ROOT,vm.getId(),vm.getInstanceName() + ""String_Node_Str"",dc.getId(),pod.getId(),account.getId(),account.getDomainId(),(size > 0) ? size : diskOffering.getDiskSizeInBytes());
    createStartedEvent(account,rootVol);
    rootVol.setDiskOfferingId(diskOffering.getId());
    rootVol.setSourceType(SourceType.Template);
    rootVol.setSourceId(template.getId());
    rootVol.setDeviceId(0l);
    rootVol=_volsDao.persist(rootVol);
  }
 else {
    rootVol=new VolumeVO(VolumeType.ROOT,vm.getId(),template.getId(),vm.getInstanceName() + ""String_Node_Str"",dc.getId(),pod.getId(),account.getId(),account.getDomainId(),offering.isRecreatable());
    createStartedEvent(account,rootVol);
    rootVol.setDiskOfferingId(offering.getId());
    rootVol.setTemplateId(template.getId());
    rootVol.setSourceId(template.getId());
    rootVol.setSourceType(SourceType.Template);
    rootVol.setDeviceId(0l);
    rootVol=_volsDao.persist(rootVol);
    if ((diskOffering != null && diskOffering.getDiskSizeInBytes() > 0)) {
      dataVol=new VolumeVO(VolumeType.DATADISK,vm.getId(),vm.getInstanceName() + ""String_Node_Str"",dc.getId(),pod.getId(),account.getId(),account.getDomainId(),(size > 0) ? size : diskOffering.getDiskSizeInBytes());
      createStartedEvent(account,dataVol);
      dataVol.setDiskOfferingId(diskOffering.getId());
      dataVol.setSourceType(SourceType.DiskOffering);
      dataVol.setSourceId(diskOffering.getId());
      dataVol.setDeviceId(1l);
      dataVol=_volsDao.persist(dataVol);
    }
  }
  txn.commit();
  VolumeVO dataCreated=null;
  VolumeVO rootCreated=null;
  try {
    rootCreated=createVolume(rootVol,vm,template,dc,pod,null,offering,diskOffering,avoids,size,template.getHypervisorType());
    if (rootCreated == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + rootVol);
    }
    vols.add(rootCreated);
    if (dataVol != null) {
      StoragePoolVO pool=_storagePoolDao.findById(rootCreated.getPoolId());
      dataCreated=createVolume(dataVol,vm,null,dc,pod,pool.getClusterId(),offering,diskOffering,avoids,size,template.getHypervisorType());
      if (dataCreated == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + dataVol);
      }
      vols.add(dataCreated);
    }
    return vols;
  }
 catch (  Exception e) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(e.getMessage());
    }
    if (rootCreated != null) {
      destroyVolume(rootCreated);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
}","@DB protected List<VolumeVO> create(Account account,VMInstanceVO vm,VMTemplateVO template,DataCenterVO dc,HostPodVO pod,ServiceOfferingVO offering,DiskOfferingVO diskOffering,List<StoragePoolVO> avoids,long size){
  ArrayList<VolumeVO> vols=new ArrayList<VolumeVO>(2);
  VolumeVO dataVol=null;
  VolumeVO rootVol=null;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (Storage.ImageFormat.ISO == template.getFormat()) {
    rootVol=new VolumeVO(VolumeType.ROOT,vm.getId(),vm.getInstanceName() + ""String_Node_Str"",dc.getId(),pod.getId(),account.getId(),account.getDomainId(),(size > 0) ? size : diskOffering.getDiskSizeInBytes());
    createStartedEvent(account,rootVol);
    rootVol.setDiskOfferingId(diskOffering.getId());
    rootVol.setSourceType(SourceType.Template);
    rootVol.setSourceId(template.getId());
    rootVol.setDeviceId(0l);
    rootVol=_volsDao.persist(rootVol);
  }
 else {
    rootVol=new VolumeVO(VolumeType.ROOT,vm.getId(),template.getId(),vm.getInstanceName() + ""String_Node_Str"",dc.getId(),pod.getId(),account.getId(),account.getDomainId(),offering.isRecreatable());
    createStartedEvent(account,rootVol);
    rootVol.setDiskOfferingId(offering.getId());
    rootVol.setTemplateId(template.getId());
    rootVol.setSourceId(template.getId());
    rootVol.setSourceType(SourceType.Template);
    rootVol.setDeviceId(0l);
    rootVol=_volsDao.persist(rootVol);
    if ((diskOffering != null && diskOffering.getDiskSizeInBytes() > 0) || (diskOffering != null && diskOffering.isCustomized())) {
      dataVol=new VolumeVO(VolumeType.DATADISK,vm.getId(),vm.getInstanceName() + ""String_Node_Str"",dc.getId(),pod.getId(),account.getId(),account.getDomainId(),(size > 0) ? size : diskOffering.getDiskSizeInBytes());
      createStartedEvent(account,dataVol);
      dataVol.setDiskOfferingId(diskOffering.getId());
      dataVol.setSourceType(SourceType.DiskOffering);
      dataVol.setSourceId(diskOffering.getId());
      dataVol.setDeviceId(1l);
      dataVol=_volsDao.persist(dataVol);
    }
  }
  txn.commit();
  VolumeVO dataCreated=null;
  VolumeVO rootCreated=null;
  try {
    rootCreated=createVolume(rootVol,vm,template,dc,pod,null,offering,diskOffering,avoids,size,template.getHypervisorType());
    if (rootCreated == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + rootVol);
    }
    vols.add(rootCreated);
    if (dataVol != null) {
      StoragePoolVO pool=_storagePoolDao.findById(rootCreated.getPoolId());
      dataCreated=createVolume(dataVol,vm,null,dc,pod,pool.getClusterId(),offering,diskOffering,avoids,size,template.getHypervisorType());
      if (dataCreated == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + dataVol);
      }
      vols.add(dataCreated);
    }
    return vols;
  }
 catch (  Exception e) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(e.getMessage());
    }
    if (rootCreated != null) {
      destroyVolume(rootCreated);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
}",0.990495247623812
107374,"@Override public Object execute() throws ServerApiException, InvalidParameterValueException, PermissionDeniedException, InsufficientAddressCapacityException, InsufficientCapacityException, ConcurrentOperationException {
  VirtualMachine result=_mgr.startSystemVm(this);
  return result;
}","@Override public void execute() throws ServerApiException, InvalidParameterValueException, PermissionDeniedException, InsufficientAddressCapacityException, InsufficientCapacityException, ConcurrentOperationException {
  VirtualMachine instance=_mgr.startSystemVm(this);
  SystemVmResponse response=ApiResponseHelper.createSystemVmResponse((VMInstanceVO)instance);
  response.setResponseName(getName());
  this.setResponseObject(response);
}",0.0714285714285714
107375,"@Override public Object execute() throws ServerApiException, InvalidParameterValueException, PermissionDeniedException, InsufficientAddressCapacityException, InsufficientCapacityException, ConcurrentOperationException {
  VirtualMachine result=_mgr.stopSystemVm(this);
  return result;
}","@Override public void execute() throws ServerApiException, InvalidParameterValueException, PermissionDeniedException, InsufficientAddressCapacityException, InsufficientCapacityException, ConcurrentOperationException {
  VirtualMachine instance=_mgr.stopSystemVm(this);
  SystemVmResponse response=ApiResponseHelper.createSystemVmResponse((VMInstanceVO)instance);
  response.setResponseName(getName());
}",0.7623188405797101
107376,"boolean isDirectAttachedNetwork(String type){
  if (""String_Node_Str"".equalsIgnoreCase(type))   return true;
 else   return false;
}","boolean isDirectAttachedNetwork(String type){
  if (""String_Node_Str"".equalsIgnoreCase(type))   return true;
 else {
    try {
      Long vnetId=Long.valueOf(type);
    }
 catch (    NumberFormatException e) {
      return true;
    }
    return false;
  }
}",0.5948717948717949
107377,"@Override public List<VMTemplateVO> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Account account,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  List<VMTemplateVO> templates=new ArrayList<VMTemplateVO>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    short accountType;
    String accountId=null;
    if (account != null) {
      accountType=account.getType();
      accountId=Long.toString(account.getId());
    }
 else {
      accountType=Account.ACCOUNT_TYPE_ADMIN;
    }
    String guestOSJoin=""String_Node_Str"";
    if (isIso) {
      guestOSJoin=""String_Node_Str"";
    }
    String sql=SELECT_ALL + guestOSJoin;
    String whereClause=""String_Node_Str"";
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=""String_Node_Str"";
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + accountId;
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str""+ ""String_Node_Str""+ accountId+ ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.executable && accountId != null) {
      whereClause+=""String_Node_Str"" + accountId + ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.all && accountType == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=""String_Node_Str"";
    }
 else     if (accountType != Account.ACCOUNT_TYPE_ADMIN) {
      return templates;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType) + getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      VMTemplateVO tmplt=toEntityBean(rs,false);
      if (zoneId != null) {
        VMTemplateZoneVO vtzvo=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (vtzvo != null) {
          templates.add(tmplt);
        }
      }
 else {
        templates.add(tmplt);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templates;
}","@Override public List<VMTemplateVO> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Account account,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  List<VMTemplateVO> templates=new ArrayList<VMTemplateVO>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    short accountType;
    String accountId=null;
    if (account != null) {
      accountType=account.getType();
      accountId=Long.toString(account.getId());
    }
 else {
      accountType=Account.ACCOUNT_TYPE_ADMIN;
    }
    String guestOSJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    String sql=SELECT_ALL + guestOSJoin;
    String whereClause=""String_Node_Str"";
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=""String_Node_Str"";
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + accountId;
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && accountType != Account.ACCOUNT_TYPE_ADMIN) {
      if (accountType == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str""+ ""String_Node_Str""+ accountId+ ""String_Node_Str"";
      }
 else {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.executable && accountId != null) {
      whereClause+=""String_Node_Str"" + accountId + ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.all && accountType == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=""String_Node_Str"";
    }
 else     if (accountType != Account.ACCOUNT_TYPE_ADMIN) {
      return templates;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType) + getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      VMTemplateVO tmplt=toEntityBean(rs,false);
      if (zoneId != null) {
        VMTemplateZoneVO vtzvo=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (vtzvo != null) {
          templates.add(tmplt);
        }
      }
 else {
        templates.add(tmplt);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templates;
}",0.9936247723132968
107378,"@DB protected boolean updateTemplateOrIsoPermissions(UpdateTemplateOrIsoPermissionsCmd cmd){
  Transaction txn=Transaction.currentTxn();
  Long id=cmd.getId();
  Account account=UserContext.current().getAccount();
  List<String> accountNames=cmd.getAccountNames();
  Long userId=UserContext.current().getUserId();
  Boolean isFeatured=cmd.isFeatured();
  Boolean isPublic=cmd.isPublic();
  String operation=cmd.getOperation();
  String mediaType=""String_Node_Str"";
  VMTemplateVO template=_templateDao.findById(id);
  if (template == null || !templateIsCorrectType(template)) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  if (cmd instanceof UpdateTemplatePermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (template.getFormat().equals(ImageFormat.ISO)) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  if (cmd instanceof UpdateIsoPermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (!template.getFormat().equals(ImageFormat.ISO)) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  if (account != null) {
    if (!isAdmin(account.getType()) && (template.getAccountId() != account.getId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
    }
 else     if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      Long templateOwnerDomainId=findDomainIdByAccountId(template.getAccountId());
      if (!isChildDomain(account.getDomainId(),templateOwnerDomainId)) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
      }
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (template.getRemoved() != null) {
    s_logger.error(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
  }
  if (id == Long.valueOf(1)) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  boolean isAdmin=((account == null) || isAdmin(account.getType()));
  boolean allowPublicUserTemplates=Boolean.parseBoolean(getConfigurationValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic != null && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str"");
  }
  if (accountNames != null) {
    if ((operation == null) || (!operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str""))) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + ""String_Node_Str"" + operation + ""String_Node_Str"");
    }
  }
  Long accountId=template.getAccountId();
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getName());
  }
  VMTemplateVO updatedTemplate=_templateDao.createForUpdate();
  if (isPublic != null) {
    updatedTemplate.setPublicTemplate(isPublic.booleanValue());
  }
  if (isFeatured != null) {
    updatedTemplate.setFeatured(isFeatured.booleanValue());
  }
  _templateDao.update(template.getId(),updatedTemplate);
  Long domainId=account.getDomainId();
  if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    txn.start();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (permittedAccount != null) {
        if (permittedAccount.getId() == account.getId()) {
          continue;
        }
        LaunchPermissionVO existingPermission=_launchPermissionDao.findByTemplateAndAccount(id,permittedAccount.getId());
        if (existingPermission == null) {
          LaunchPermissionVO launchPermission=new LaunchPermissionVO(id,permittedAccount.getId());
          _launchPermissionDao.persist(launchPermission);
        }
      }
 else {
        txn.rollback();
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    txn.commit();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    List<Long> accountIds=new ArrayList<Long>();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (permittedAccount != null) {
        accountIds.add(permittedAccount.getId());
      }
    }
    _launchPermissionDao.removePermissions(id,accountIds);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    updatedTemplate=_templateDao.createForUpdate();
    updatedTemplate.setPublicTemplate(false);
    updatedTemplate.setFeatured(false);
    _templateDao.update(template.getId(),updatedTemplate);
    _launchPermissionDao.removeAllPermissions(id);
  }
  return true;
}","@DB protected boolean updateTemplateOrIsoPermissions(UpdateTemplateOrIsoPermissionsCmd cmd){
  Transaction txn=Transaction.currentTxn();
  Long id=cmd.getId();
  Account account=UserContext.current().getAccount();
  List<String> accountNames=cmd.getAccountNames();
  Long userId=UserContext.current().getUserId();
  Boolean isFeatured=cmd.isFeatured();
  Boolean isPublic=cmd.isPublic();
  String operation=cmd.getOperation();
  String mediaType=""String_Node_Str"";
  VMTemplateVO template=_templateDao.findById(id);
  if (template == null || !templateIsCorrectType(template)) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  if (cmd instanceof UpdateTemplatePermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (template.getFormat().equals(ImageFormat.ISO)) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  if (cmd instanceof UpdateIsoPermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (!template.getFormat().equals(ImageFormat.ISO)) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  if (account != null) {
    if (!isAdmin(account.getType()) && (template.getAccountId() != account.getId())) {
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
    }
 else     if (account.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      Long templateOwnerDomainId=findDomainIdByAccountId(template.getAccountId());
      if (!isChildDomain(account.getDomainId(),templateOwnerDomainId)) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
      }
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (template.getRemoved() != null) {
    s_logger.error(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
  }
  if (id == Long.valueOf(1)) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  boolean isAdmin=((account == null) || isAdmin(account.getType()));
  boolean allowPublicUserTemplates=Boolean.parseBoolean(getConfigurationValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic != null && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + mediaType + ""String_Node_Str"");
  }
  if (accountNames != null) {
    if ((operation == null) || (!operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str""))) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + ""String_Node_Str"" + operation + ""String_Node_Str"");
    }
  }
  Long accountId=template.getAccountId();
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getName());
  }
  VMTemplateVO updatedTemplate=_templateDao.createForUpdate();
  if (isPublic != null) {
    updatedTemplate.setPublicTemplate(isPublic.booleanValue());
  }
  if (isFeatured != null) {
    updatedTemplate.setFeatured(isFeatured.booleanValue());
  }
  _templateDao.update(template.getId(),updatedTemplate);
  Long domainId;
  domainId=(null == account) ? DomainVO.ROOT_DOMAIN : account.getDomainId();
  if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    txn.start();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (permittedAccount != null) {
        if (permittedAccount.getId() == account.getId()) {
          continue;
        }
        LaunchPermissionVO existingPermission=_launchPermissionDao.findByTemplateAndAccount(id,permittedAccount.getId());
        if (existingPermission == null) {
          LaunchPermissionVO launchPermission=new LaunchPermissionVO(id,permittedAccount.getId());
          _launchPermissionDao.persist(launchPermission);
        }
      }
 else {
        txn.rollback();
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    txn.commit();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    List<Long> accountIds=new ArrayList<Long>();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (permittedAccount != null) {
        accountIds.add(permittedAccount.getId());
      }
    }
    _launchPermissionDao.removePermissions(id,accountIds);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    updatedTemplate=_templateDao.createForUpdate();
    updatedTemplate.setPublicTemplate(false);
    updatedTemplate.setFeatured(false);
    _templateDao.update(template.getId(),updatedTemplate);
    _launchPermissionDao.removeAllPermissions(id);
  }
  return true;
}",0.9943603443158208
107379,"protected DataCenterIpAddressDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIpAddress(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIpAddress(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getReservationId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTakenAt(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
  AllIpCount=createSearchBuilder(Integer.class);
  AllIpCount.select(null,Func.COUNT,AllIpCount.entity().getId());
  AllIpCount.and(""String_Node_Str"",AllIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllIpCount.done();
  AllAllocatedIpCount=createSearchBuilder(Integer.class);
  AllAllocatedIpCount.select(null,Func.COUNT,AllIpCount.entity().getId());
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getTakenAt(),SearchCriteria.Op.NNULL);
  AllAllocatedIpCount.done();
}","protected DataCenterIpAddressDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIpAddress(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIpAddress(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getReservationId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTakenAt(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
  AllIpCount=createSearchBuilder(Integer.class);
  AllIpCount.select(null,Func.COUNT,AllIpCount.entity().getId());
  AllIpCount.and(""String_Node_Str"",AllIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllIpCount.done();
  AllAllocatedIpCount=createSearchBuilder(Integer.class);
  AllAllocatedIpCount.select(null,Func.COUNT,AllAllocatedIpCount.entity().getId());
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getTakenAt(),SearchCriteria.Op.NNULL);
  AllAllocatedIpCount.done();
}",0.9969040247678018
107380,"protected DataCenterLinkLocalIpAddressDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIpAddress(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getReservationId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTakenAt(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
  AllIpCount=createSearchBuilder(Integer.class);
  AllIpCount.select(null,Func.COUNT,AllIpCount.entity().getId());
  AllIpCount.and(""String_Node_Str"",AllIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllIpCount.done();
  AllAllocatedIpCount=createSearchBuilder(Integer.class);
  AllAllocatedIpCount.select(null,Func.COUNT,AllIpCount.entity().getId());
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getTakenAt(),SearchCriteria.Op.NNULL);
  AllAllocatedIpCount.done();
}","protected DataCenterLinkLocalIpAddressDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getIpAddress(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getReservationId(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTakenAt(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
  AllIpCount=createSearchBuilder(Integer.class);
  AllIpCount.select(null,Func.COUNT,AllIpCount.entity().getId());
  AllIpCount.and(""String_Node_Str"",AllIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllIpCount.done();
  AllAllocatedIpCount=createSearchBuilder(Integer.class);
  AllAllocatedIpCount.select(null,Func.COUNT,AllAllocatedIpCount.entity().getId());
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getPodId(),SearchCriteria.Op.EQ);
  AllAllocatedIpCount.and(""String_Node_Str"",AllAllocatedIpCount.entity().getTakenAt(),SearchCriteria.Op.NNULL);
  AllAllocatedIpCount.done();
}",0.99668995954395
107381,"public Long getPageSizeVal(){
  Long pageSize=DEFAULT_PAGE_SIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null) {
    if (pageSizeInt.longValue() == -1) {
      pageSize=null;
    }
 else {
      pageSize=pageSizeInt.longValue();
    }
  }
  return pageSize;
}","public Long getPageSizeVal(){
  Long pageSize=null;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null) {
    if (pageSizeInt.longValue() == -1) {
      pageSize=null;
    }
 else {
      pageSize=pageSizeInt.longValue();
    }
  }
  return pageSize;
}",0.9611829944547134
107382,List<DomainVO> findAllChildren(String path);,"List<DomainVO> findAllChildren(String path,Long parentId);",0.8627450980392157
107383,"@Override public List<DomainVO> findAllChildren(String path){
  SearchCriteria<DomainVO> sc=FindAllChildrenSearch.create();
  sc.setParameters(""String_Node_Str"",path);
  return listBy(sc);
}","@Override public List<DomainVO> findAllChildren(String path,Long parentId){
  SearchCriteria<DomainVO> sc=FindAllChildrenSearch.create();
  sc.setParameters(""String_Node_Str"",""String_Node_Str"" + path + ""String_Node_Str"");
  sc.setParameters(""String_Node_Str"",parentId);
  return listBy(sc);
}",0.7717842323651453
107384,"public DomainDaoImpl(){
  DomainNameLikeSearch=createSearchBuilder();
  DomainNameLikeSearch.and(""String_Node_Str"",DomainNameLikeSearch.entity().getName(),SearchCriteria.Op.LIKE);
  DomainNameLikeSearch.done();
  ParentDomainNameLikeSearch=createSearchBuilder();
  ParentDomainNameLikeSearch.and(""String_Node_Str"",ParentDomainNameLikeSearch.entity().getName(),SearchCriteria.Op.LIKE);
  ParentDomainNameLikeSearch.and(""String_Node_Str"",ParentDomainNameLikeSearch.entity().getName(),SearchCriteria.Op.EQ);
  ParentDomainNameLikeSearch.done();
  DomainPairSearch=createSearchBuilder();
  DomainPairSearch.and(""String_Node_Str"",DomainPairSearch.entity().getId(),SearchCriteria.Op.IN);
  DomainPairSearch.done();
  ImmediateChildDomainSearch=createSearchBuilder();
  ImmediateChildDomainSearch.and(""String_Node_Str"",ImmediateChildDomainSearch.entity().getParent(),SearchCriteria.Op.EQ);
  ImmediateChildDomainSearch.done();
  FindAllChildrenSearch=createSearchBuilder();
  FindAllChildrenSearch.and(""String_Node_Str"",FindAllChildrenSearch.entity().getPath(),SearchCriteria.Op.LIKE);
  FindAllChildrenSearch.done();
}","public DomainDaoImpl(){
  DomainNameLikeSearch=createSearchBuilder();
  DomainNameLikeSearch.and(""String_Node_Str"",DomainNameLikeSearch.entity().getName(),SearchCriteria.Op.LIKE);
  DomainNameLikeSearch.done();
  ParentDomainNameLikeSearch=createSearchBuilder();
  ParentDomainNameLikeSearch.and(""String_Node_Str"",ParentDomainNameLikeSearch.entity().getName(),SearchCriteria.Op.LIKE);
  ParentDomainNameLikeSearch.and(""String_Node_Str"",ParentDomainNameLikeSearch.entity().getName(),SearchCriteria.Op.EQ);
  ParentDomainNameLikeSearch.done();
  DomainPairSearch=createSearchBuilder();
  DomainPairSearch.and(""String_Node_Str"",DomainPairSearch.entity().getId(),SearchCriteria.Op.IN);
  DomainPairSearch.done();
  ImmediateChildDomainSearch=createSearchBuilder();
  ImmediateChildDomainSearch.and(""String_Node_Str"",ImmediateChildDomainSearch.entity().getParent(),SearchCriteria.Op.EQ);
  ImmediateChildDomainSearch.done();
  FindAllChildrenSearch=createSearchBuilder();
  FindAllChildrenSearch.and(""String_Node_Str"",FindAllChildrenSearch.entity().getPath(),SearchCriteria.Op.LIKE);
  FindAllChildrenSearch.and(""String_Node_Str"",FindAllChildrenSearch.entity().getId(),SearchCriteria.Op.NEQ);
  FindAllChildrenSearch.done();
}",0.9532790398628376
107385,"@Override public List<DomainVO> searchForDomains(ListDomainsCmd cmd) throws PermissionDeniedException {
  Long domainId=cmd.getId();
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else {
      domainId=account.getDomainId();
    }
  }
  Filter searchFilter=new Filter(DomainVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  String domainName=cmd.getDomainName();
  Integer level=cmd.getLevel();
  Object keyword=cmd.getKeyword();
  SearchBuilder<DomainVO> sb=_domainDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.LIKE);
  SearchCriteria<DomainVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<DomainVO> ssc=_domainDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (domainName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + domainName + ""String_Node_Str"");
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (domainId != null) {
    sc.setParameters(""String_Node_Str"",domainId);
  }
  return _domainDao.search(sc,searchFilter);
}","@Override public List<DomainVO> searchForDomains(ListDomainsCmd cmd) throws PermissionDeniedException {
  Long domainId=cmd.getId();
  Account account=UserContext.current().getAccount();
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
    return _domainDao.listAll();
  }
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else {
      domainId=account.getDomainId();
    }
  }
  Filter searchFilter=new Filter(DomainVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  String domainName=cmd.getDomainName();
  Integer level=cmd.getLevel();
  Object keyword=cmd.getKeyword();
  SearchBuilder<DomainVO> sb=_domainDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.LIKE);
  SearchCriteria<DomainVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<DomainVO> ssc=_domainDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (domainName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + domainName + ""String_Node_Str"");
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (domainId != null) {
    sc.setParameters(""String_Node_Str"",domainId);
  }
  return _domainDao.search(sc,searchFilter);
}",0.967463288223438
107386,"@Override public List<DataCenterVO> listDataCenters(ListZonesByCmd cmd){
  Account account=UserContext.current().getAccount();
  List<DataCenterVO> dcs=null;
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    dcs=_dcDao.findZonesByDomainId(domainId);
  }
 else   if ((account == null || account.getType() == Account.ACCOUNT_TYPE_ADMIN)) {
    dcs=_dcDao.listAll();
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(domainRecord.getId()));
        if (domainRecord.getParent() != null)         domainRecord=_domainDao.findById(domainRecord.getParent());
 else         break;
      }
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      DomainVO localRecord=domainRecord;
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(localRecord.getId()));
        if (localRecord.getParent() != null)         localRecord=_domainDao.findById(localRecord.getParent());
 else         break;
      }
    }
    if (domainRecord != null) {
      List<DomainVO> allChildDomains=_domainDao.findAllChildren(domainRecord.getPath());
      List<Long> allChildDomainIds=new ArrayList<Long>();
      for (      DomainVO domain : allChildDomains) {
        allChildDomainIds.add(domain.getId());
      }
      List<DataCenterVO> childZones=_dcDao.findChildZones((allChildDomainIds.toArray()));
      dcs.addAll(childZones);
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
  Boolean available=cmd.isAvailable();
  if (account != null) {
    if ((available != null) && Boolean.FALSE.equals(available)) {
      List<DomainRouterVO> routers=_routerDao.listBy(account.getId());
      for (Iterator<DataCenterVO> iter=dcs.iterator(); iter.hasNext(); ) {
        DataCenterVO dc=iter.next();
        boolean found=false;
        for (        DomainRouterVO router : routers) {
          if (dc.getId() == router.getDataCenterId()) {
            found=true;
            break;
          }
        }
        if (!found)         iter.remove();
      }
    }
  }
  return dcs;
}","@Override public List<DataCenterVO> listDataCenters(ListZonesByCmd cmd){
  Account account=UserContext.current().getAccount();
  List<DataCenterVO> dcs=null;
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    dcs=_dcDao.findZonesByDomainId(domainId);
  }
 else   if ((account == null || account.getType() == Account.ACCOUNT_TYPE_ADMIN)) {
    dcs=_dcDao.listAll();
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(domainRecord.getId()));
        if (domainRecord.getParent() != null)         domainRecord=_domainDao.findById(domainRecord.getParent());
 else         break;
      }
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      DomainVO localRecord=domainRecord;
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(localRecord.getId()));
        if (localRecord.getParent() != null)         localRecord=_domainDao.findById(localRecord.getParent());
 else         break;
      }
    }
    if (domainRecord != null) {
      List<DomainVO> allChildDomains=_domainDao.findAllChildren(domainRecord.getPath(),domainRecord.getId());
      List<Long> allChildDomainIds=new ArrayList<Long>();
      for (      DomainVO domain : allChildDomains) {
        allChildDomainIds.add(domain.getId());
      }
      List<DataCenterVO> childZones=_dcDao.findChildZones((allChildDomainIds.toArray()));
      dcs.addAll(childZones);
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
  Boolean available=cmd.isAvailable();
  if (account != null) {
    if ((available != null) && Boolean.FALSE.equals(available)) {
      List<DomainRouterVO> routers=_routerDao.listBy(account.getId());
      for (Iterator<DataCenterVO> iter=dcs.iterator(); iter.hasNext(); ) {
        DataCenterVO dc=iter.next();
        boolean found=false;
        for (        DomainRouterVO router : routers) {
          if (dc.getId() == router.getDataCenterId()) {
            found=true;
            break;
          }
        }
        if (!found)         iter.remove();
      }
    }
  }
  return dcs;
}",0.9956745623069
107387,"@Override public List<DomainVO> searchForDomainChildren(ListDomainChildrenCmd cmd) throws PermissionDeniedException {
  Filter searchFilter=new Filter(DomainVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  Object keyword=cmd.getKeyword();
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else {
      domainId=account.getDomainId();
    }
  }
  SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
  if (keyword != null) {
    SearchCriteria<DomainVO> ssc=_domainDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (domainName != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + domainName + ""String_Node_Str"");
  }
  return _domainDao.search(sc,searchFilter);
}","private List<DomainVO> searchForDomainChildren(Filter searchFilter,Long domainId,String domainName,Object keyword){
  SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
  if (keyword != null) {
    SearchCriteria<DomainVO> ssc=_domainDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (domainName != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + domainName + ""String_Node_Str"");
  }
  return _domainDao.search(sc,searchFilter);
}",0.6623505976095617
107388,"public static String toSerializedStringOld(Object result){
  if (result != null) {
    Class<?> clz=result.getClass();
    Gson gson=ApiGsonHelper.getBuilder().create();
    if (result instanceof ResponseObject) {
      return clz.getName() + token + ((ResponseObject)result).getResponseName()+ token+ gson.toJson(result);
    }
 else {
      return clz.getName() + token + gson.toJson(result);
    }
  }
  return null;
}","public static String toSerializedStringOld(Object result){
  if (result != null) {
    Class<?> clz=result.getClass();
    Gson gson=ApiGsonHelper.getBuilder().create();
    if (result instanceof ResponseObject) {
      return clz.getName() + token + ((ResponseObject)result).getObjectName()+ token+ gson.toJson(result);
    }
 else {
      return clz.getName() + token + gson.toJson(result);
    }
  }
  return null;
}",0.9833333333333332
107389,"public static Object fromSerializedString(String result){
  try {
    if (result != null && !result.isEmpty()) {
      String[] serializedParts=result.split(token);
      if (serializedParts.length < 2) {
        return null;
      }
      String clzName=serializedParts[0];
      String nameField=null;
      String content=null;
      if (serializedParts.length == 2) {
        content=serializedParts[1];
      }
 else {
        nameField=serializedParts[1];
        int index=result.indexOf(token + nameField + token);
        content=result.substring(index + nameField.length() + 2);
      }
      Class<?> clz;
      try {
        clz=Class.forName(clzName);
      }
 catch (      ClassNotFoundException e) {
        return null;
      }
      Gson gson=ApiGsonHelper.getBuilder().create();
      Object obj=gson.fromJson(content,clz);
      if (nameField != null) {
        ((ResponseObject)obj).setResponseName(nameField);
      }
      return obj;
    }
    return null;
  }
 catch (  RuntimeException e) {
    s_logger.error(""String_Node_Str"" + result);
    throw e;
  }
}","public static Object fromSerializedString(String result){
  try {
    if (result != null && !result.isEmpty()) {
      String[] serializedParts=result.split(token);
      if (serializedParts.length < 2) {
        return null;
      }
      String clzName=serializedParts[0];
      String nameField=null;
      String content=null;
      if (serializedParts.length == 2) {
        content=serializedParts[1];
      }
 else {
        nameField=serializedParts[1];
        int index=result.indexOf(token + nameField + token);
        content=result.substring(index + nameField.length() + 2);
      }
      Class<?> clz;
      try {
        clz=Class.forName(clzName);
      }
 catch (      ClassNotFoundException e) {
        return null;
      }
      Gson gson=ApiGsonHelper.getBuilder().create();
      Object obj=gson.fromJson(content,clz);
      if (nameField != null) {
        ((ResponseObject)obj).setObjectName(nameField);
      }
      return obj;
    }
    return null;
  }
 catch (  RuntimeException e) {
    s_logger.error(""String_Node_Str"" + result);
    throw e;
  }
}",0.9574468085106383
107390,"@Override public List<DomainVO> searchForDomains(ListDomainsCmd cmd) throws PermissionDeniedException {
  Long domainId=cmd.getId();
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else {
      domainId=account.getDomainId();
    }
  }
  Filter searchFilter=new Filter(DomainVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  String domainName=cmd.getDomainName();
  Integer level=cmd.getLevel();
  Object keyword=cmd.getKeyword();
  SearchBuilder<DomainVO> sb=_domainDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.LIKE);
  SearchCriteria<DomainVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<DomainVO> ssc=_domainDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (domainName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + domainName + ""String_Node_Str"");
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if ((domainName == null) && (level == null) && (domainId != null)) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain != null) {
      sc.setParameters(""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
  }
  return _domainDao.search(sc,searchFilter);
}","@Override public List<DomainVO> searchForDomains(ListDomainsCmd cmd) throws PermissionDeniedException {
  Long domainId=cmd.getId();
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else {
      domainId=account.getDomainId();
    }
  }
  Filter searchFilter=new Filter(DomainVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  String domainName=cmd.getDomainName();
  Integer level=cmd.getLevel();
  Object keyword=cmd.getKeyword();
  SearchBuilder<DomainVO> sb=_domainDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.LIKE);
  SearchCriteria<DomainVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<DomainVO> ssc=_domainDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (domainName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + domainName + ""String_Node_Str"");
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (domainId != null) {
    sc.setParameters(""String_Node_Str"",domainId);
  }
  return _domainDao.search(sc,searchFilter);
}",0.8793503480278422
107391,"@Override public UserVm deployVirtualMachine(DeployVMCmd cmd) throws ResourceAllocationException, InsufficientStorageCapacityException, ExecutionException, StorageUnavailableException, ConcurrentOperationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long accountId=null;
  long dataCenterId=cmd.getZoneId();
  long serviceOfferingId=cmd.getServiceOfferingId();
  long templateId=cmd.getTemplateId();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String domain=null;
  String password=generateRandomPassword();
  String displayName=cmd.getDisplayName();
  String group=cmd.getGroup();
  String userData=cmd.getUserData();
  String[] networkGroups=null;
  Long sizeObj=cmd.getSize();
  long size=(sizeObj == null) ? 0 : sizeObj;
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataCenterId);
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId == null) {
    domainId=dc.getDomainId();
    if (domainId == null) {
    }
 else {
      if (!_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
  }
  List<String> netGrpList=cmd.getNetworkGroupList();
  if ((netGrpList != null) && !netGrpList.isEmpty()) {
    networkGroups=netGrpList.toArray(new String[netGrpList.size()]);
  }
  AccountVO account=_accountDao.findById(accountId);
  if (account == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
  }
  ServiceOfferingVO offering=_offeringsDao.findById(serviceOfferingId);
  if (offering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VMTemplateVO template=_templateDao.findById(templateId);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isIso=Storage.ImageFormat.ISO.equals(template.getFormat());
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DiskOfferingVO diskOffering=null;
  if (diskOfferingId != null) {
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
  }
  if (isIso && diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (isIso) {
    template.setHypervisorType(HypervisorType.getType(cmd.getHypervisor()));
  }
  if (diskOffering != null && diskOffering.isCustomized() && size <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (diskOffering != null && diskOffering.isCustomized() && size > _maxVolumeSizeInGb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInGb);
  }
  if (!template.isPublicTemplate()) {
    Long templateOwner=template.getAccountId();
    if (!BaseCmd.isAdmin(account.getType()) && ((templateOwner == null) || (templateOwner.longValue() != accountId))) {
      LaunchPermissionVO permission=_launchPermissionDao.findByTemplateAndAccount(templateId,account.getId());
      if (permission == null) {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ template.getName());
      }
    }
  }
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized) {
    _networkGroupMgr.createDefaultNetworkGroup(accountId);
  }
  if (networkGroups != null) {
    if (offering.getGuestIpType() == NetworkOffering.GuestIpType.Virtualized) {
      throw new InvalidParameterValueException(""String_Node_Str"" + offering.getName());
    }
    Set<String> nameSet=new HashSet<String>();
    nameSet.addAll(Arrays.asList(networkGroups));
    nameSet.add(NetworkGroupManager.DEFAULT_GROUP_NAME);
    networkGroups=nameSet.toArray(new String[nameSet.size()]);
    List<NetworkGroupVO> networkGroupVOs=_networkSecurityGroupDao.findByAccountAndNames(accountId,networkGroups);
    if (networkGroupVOs.size() != nameSet.size()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized && _networkGroupsEnabled) {
      networkGroups=new String[]{NetworkGroupManager.DEFAULT_GROUP_NAME};
    }
  }
  Long eventId=cmd.getStartEventId();
  try {
    return deployVirtualMachineImpl(userId,accountId,dataCenterId,serviceOfferingId,template,diskOfferingId,domain,password,displayName,group,userData,networkGroups,eventId,size);
  }
 catch (  ResourceAllocationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ExecutionException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InvalidParameterValueException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InsufficientStorageCapacityException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  PermissionDeniedException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ConcurrentOperationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
}","@Override public UserVm deployVirtualMachine(DeployVMCmd cmd) throws ResourceAllocationException, InsufficientStorageCapacityException, ExecutionException, StorageUnavailableException, ConcurrentOperationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long accountId=null;
  long dataCenterId=cmd.getZoneId();
  long serviceOfferingId=cmd.getServiceOfferingId();
  long templateId=cmd.getTemplateId();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String domain=null;
  String password=generateRandomPassword();
  String displayName=cmd.getDisplayName();
  String group=cmd.getGroup();
  String userData=cmd.getUserData();
  String[] networkGroups=null;
  Long sizeObj=cmd.getSize();
  long size=(sizeObj == null) ? 0 : sizeObj;
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataCenterId);
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId == null) {
    domainId=dc.getDomainId();
    if (domainId == null) {
    }
 else {
      if (ctxAccount != null) {
        if ((ctxAccount.getType() == Account.ACCOUNT_TYPE_NORMAL) || ctxAccount.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
          if (domainId == ctxAccount.getDomainId()) {
          }
 else           if ((!_domainDao.isChildDomain(domainId,ctxAccount.getDomainId()))) {
            throw new PermissionDeniedException(""String_Node_Str"" + domainId);
          }
        }
      }
    }
  }
  List<String> netGrpList=cmd.getNetworkGroupList();
  if ((netGrpList != null) && !netGrpList.isEmpty()) {
    networkGroups=netGrpList.toArray(new String[netGrpList.size()]);
  }
  AccountVO account=_accountDao.findById(accountId);
  if (account == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
  }
  ServiceOfferingVO offering=_offeringsDao.findById(serviceOfferingId);
  if (offering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VMTemplateVO template=_templateDao.findById(templateId);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isIso=Storage.ImageFormat.ISO.equals(template.getFormat());
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DiskOfferingVO diskOffering=null;
  if (diskOfferingId != null) {
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
  }
  if (isIso && diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (isIso) {
    template.setHypervisorType(HypervisorType.getType(cmd.getHypervisor()));
  }
  if (diskOffering != null && diskOffering.isCustomized() && size <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (diskOffering != null && diskOffering.isCustomized() && size > _maxVolumeSizeInGb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInGb);
  }
  if (!template.isPublicTemplate()) {
    Long templateOwner=template.getAccountId();
    if (!BaseCmd.isAdmin(account.getType()) && ((templateOwner == null) || (templateOwner.longValue() != accountId))) {
      LaunchPermissionVO permission=_launchPermissionDao.findByTemplateAndAccount(templateId,account.getId());
      if (permission == null) {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ template.getName());
      }
    }
  }
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized) {
    _networkGroupMgr.createDefaultNetworkGroup(accountId);
  }
  if (networkGroups != null) {
    if (offering.getGuestIpType() == NetworkOffering.GuestIpType.Virtualized) {
      throw new InvalidParameterValueException(""String_Node_Str"" + offering.getName());
    }
    Set<String> nameSet=new HashSet<String>();
    nameSet.addAll(Arrays.asList(networkGroups));
    nameSet.add(NetworkGroupManager.DEFAULT_GROUP_NAME);
    networkGroups=nameSet.toArray(new String[nameSet.size()]);
    List<NetworkGroupVO> networkGroupVOs=_networkSecurityGroupDao.findByAccountAndNames(accountId,networkGroups);
    if (networkGroupVOs.size() != nameSet.size()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized && _networkGroupsEnabled) {
      networkGroups=new String[]{NetworkGroupManager.DEFAULT_GROUP_NAME};
    }
  }
  Long eventId=cmd.getStartEventId();
  try {
    return deployVirtualMachineImpl(userId,accountId,dataCenterId,serviceOfferingId,template,diskOfferingId,domain,password,displayName,group,userData,networkGroups,eventId,size);
  }
 catch (  ResourceAllocationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ExecutionException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InvalidParameterValueException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InsufficientStorageCapacityException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  PermissionDeniedException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ConcurrentOperationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
}",0.9808075772681956
107392,"@Override public List<DataCenterVO> listDataCenters(ListZonesByCmd cmd){
  Account account=UserContext.current().getAccount();
  List<DataCenterVO> dcs=null;
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    dcs=_dcDao.findZonesByDomainId(domainId);
  }
 else   if ((account == null || account.getType() == Account.ACCOUNT_TYPE_ADMIN)) {
    dcs=_dcDao.listAll();
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(domainRecord.getId()));
        if (domainRecord.getParent() != null)         domainRecord=_domainDao.findById(domainRecord.getParent());
 else         break;
      }
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      DomainVO localRecord=domainRecord;
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(localRecord.getId()));
        if (localRecord.getParent() != null)         localRecord=_domainDao.findById(localRecord.getParent());
 else         break;
      }
    }
    if (domainRecord != null) {
      DomainVO localParent=domainRecord;
      DomainVO immediateChild=null;
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(localParent.getId()));
        immediateChild=_domainDao.findImmediateChildForParent(localParent.getId());
        if (immediateChild != null) {
          dcs.addAll(_dcDao.findZonesByDomainId(immediateChild.getId()));
          localParent=immediateChild;
        }
 else {
          break;
        }
      }
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
  Boolean available=cmd.isAvailable();
  if (account != null) {
    if ((available != null) && Boolean.FALSE.equals(available)) {
      List<DomainRouterVO> routers=_routerDao.listBy(account.getId());
      for (Iterator<DataCenterVO> iter=dcs.iterator(); iter.hasNext(); ) {
        DataCenterVO dc=iter.next();
        boolean found=false;
        for (        DomainRouterVO router : routers) {
          if (dc.getId() == router.getDataCenterId()) {
            found=true;
            break;
          }
        }
        if (!found)         iter.remove();
      }
    }
  }
  return dcs;
}","@Override public List<DataCenterVO> listDataCenters(ListZonesByCmd cmd){
  Account account=UserContext.current().getAccount();
  List<DataCenterVO> dcs=null;
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    dcs=_dcDao.findZonesByDomainId(domainId);
  }
 else   if ((account == null || account.getType() == Account.ACCOUNT_TYPE_ADMIN)) {
    dcs=_dcDao.listAll();
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(domainRecord.getId()));
        if (domainRecord.getParent() != null)         domainRecord=_domainDao.findById(domainRecord.getParent());
 else         break;
      }
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
 else   if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    dcs=new ArrayList<DataCenterVO>();
    DomainVO domainRecord=_domainDao.findById(account.getDomainId());
    if (domainRecord != null) {
      DomainVO localRecord=domainRecord;
      while (true) {
        dcs.addAll(_dcDao.findZonesByDomainId(localRecord.getId()));
        if (localRecord.getParent() != null)         localRecord=_domainDao.findById(localRecord.getParent());
 else         break;
      }
    }
    if (domainRecord != null) {
      DomainVO localParent=domainRecord;
      DomainVO immediateChild=null;
      while (true) {
        immediateChild=_domainDao.findImmediateChildForParent(localParent.getId());
        if (immediateChild != null) {
          dcs.addAll(_dcDao.findZonesByDomainId(immediateChild.getId()));
          localParent=immediateChild;
        }
 else {
          break;
        }
      }
    }
    dcs.addAll(_dcDao.listPublicZones());
  }
  Boolean available=cmd.isAvailable();
  if (account != null) {
    if ((available != null) && Boolean.FALSE.equals(available)) {
      List<DomainRouterVO> routers=_routerDao.listBy(account.getId());
      for (Iterator<DataCenterVO> iter=dcs.iterator(); iter.hasNext(); ) {
        DataCenterVO dc=iter.next();
        boolean found=false;
        for (        DomainRouterVO router : routers) {
          if (dc.getId() == router.getDataCenterId()) {
            found=true;
            break;
          }
        }
        if (!found)         iter.remove();
      }
    }
  }
  return dcs;
}",0.9859784596626702
107393,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=null;
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    type=cmd.getType();
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && template.getUniqueName().startsWith(""String_Node_Str"")) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=null;
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    type=cmd.getType();
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}",0.9915930616154092
107394,"@Override public void evictTemplateFromStoragePool(VMTemplateStoragePoolVO templatePoolVO){
  StoragePoolVO pool=_poolDao.findById(templatePoolVO.getPoolId());
  VMTemplateVO template=_tmpltDao.findById(templatePoolVO.getTemplateId());
  long hostId;
  List<StoragePoolHostVO> poolHostVOs=_poolHostDao.listByPoolId(pool.getId());
  if (poolHostVOs.isEmpty()) {
    return;
  }
 else {
    hostId=poolHostVOs.get(0).getHostId();
  }
  DestroyCommand cmd=new DestroyCommand(pool,templatePoolVO);
  Answer answer=_agentMgr.easySend(hostId,cmd);
  if (answer != null && answer.getResult()) {
    if (_tmpltPoolDao.remove(templatePoolVO.getId())) {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ pool.getName());
    }
  }
}","@Override public void evictTemplateFromStoragePool(VMTemplateStoragePoolVO templatePoolVO){
  StoragePoolVO pool=_poolDao.findById(templatePoolVO.getPoolId());
  VMTemplateVO template=_tmpltDao.findByIdIncludingRemoved(templatePoolVO.getTemplateId());
  long hostId;
  List<StoragePoolHostVO> poolHostVOs=_poolHostDao.listByPoolId(pool.getId());
  if (poolHostVOs.isEmpty()) {
    return;
  }
 else {
    hostId=poolHostVOs.get(0).getHostId();
  }
  DestroyCommand cmd=new DestroyCommand(pool,templatePoolVO);
  Answer answer=_agentMgr.easySend(hostId,cmd);
  if (answer != null && answer.getResult()) {
    if (_tmpltPoolDao.remove(templatePoolVO.getId())) {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ pool.getName());
    }
  }
}",0.9894875164257556
107395,"@Override public boolean deleteTemplate(DeleteTemplateCmd cmd){
  Long templateId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  Account account=UserContext.current().getAccount();
  Long zoneId=cmd.getZoneId();
  VMTemplateVO template=_tmpltDao.findById(templateId.longValue());
  if (template == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + templateId);
  }
  userId=accountAndUserValidation(account,userId,null,template,""String_Node_Str"");
  UserVO user=_userDao.findById(userId);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (template.getFormat() == ImageFormat.ISO) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (template.getUniqueName().equals(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zoneId != null && (_hostDao.findSecondaryStorageHost(zoneId) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return delete(userId,templateId,zoneId);
}","@Override public boolean deleteTemplate(DeleteTemplateCmd cmd){
  Long templateId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  Account account=UserContext.current().getAccount();
  Long zoneId=cmd.getZoneId();
  VMTemplateVO template=_tmpltDao.findById(templateId.longValue());
  if (template == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + templateId);
  }
  userId=accountAndUserValidation(account,userId,null,template,""String_Node_Str"");
  UserVO user=_userDao.findById(userId);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (template.getFormat() == ImageFormat.ISO) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (template.getTemplateType() == TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zoneId != null && (_hostDao.findSecondaryStorageHost(zoneId) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return delete(userId,templateId,zoneId);
}",0.9648382559774964
107396,"@Override public boolean templateIsDeleteable(VMTemplateHostVO templateHostRef){
  VMTemplateVO template=_tmpltDao.findById(templateHostRef.getTemplateId());
  long templateId=template.getId();
  HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
  long zoneId=secondaryStorageHost.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  List<VMInstanceVO> nonExpungedVms=_vmInstanceDao.listNonExpungedByZoneAndTemplate(zoneId,templateId);
  if (!nonExpungedVms.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    return false;
  }
  List<VolumeVO> volumes=_volumeDao.findByTemplateAndZone(templateId,zoneId);
  for (  VolumeVO volume : volumes) {
    List<SnapshotVO> snapshots=_snapshotDao.listByVolumeId(volume.getId());
    if (!snapshots.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
      return false;
    }
  }
  return true;
}","@Override public boolean templateIsDeleteable(VMTemplateHostVO templateHostRef){
  VMTemplateVO template=_tmpltDao.findByIdIncludingRemoved(templateHostRef.getTemplateId());
  long templateId=template.getId();
  HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
  long zoneId=secondaryStorageHost.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  List<VMInstanceVO> nonExpungedVms=_vmInstanceDao.listNonExpungedByZoneAndTemplate(zoneId,templateId);
  if (!nonExpungedVms.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    return false;
  }
  List<VolumeVO> volumes=_volumeDao.findByTemplateAndZone(templateId,zoneId);
  for (  VolumeVO volume : volumes) {
    List<SnapshotVO> snapshots=_snapshotDao.listByVolumeId(volume.getId());
    if (!snapshots.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
      return false;
    }
  }
  return true;
}",0.9923224568138196
107397,"@Override public List<VMTemplateStoragePoolVO> getUnusedTemplatesInPool(StoragePoolVO pool){
  List<VMTemplateStoragePoolVO> unusedTemplatesInPool=new ArrayList<VMTemplateStoragePoolVO>();
  List<VMTemplateStoragePoolVO> allTemplatesInPool=_tmpltPoolDao.listByPoolId(pool.getId());
  for (  VMTemplateStoragePoolVO templatePoolVO : allTemplatesInPool) {
    VMTemplateVO template=_tmpltDao.findById(templatePoolVO.getTemplateId());
    if (template.getUniqueName().equals(""String_Node_Str"")) {
      continue;
    }
    if (templatePoolVO.getDownloadState() != Status.DOWNLOADED) {
      continue;
    }
    if (template.getFormat() != ImageFormat.ISO && !_volumeDao.isAnyVolumeActivelyUsingTemplateOnPool(template.getId(),pool.getId())) {
      unusedTemplatesInPool.add(templatePoolVO);
    }
  }
  return unusedTemplatesInPool;
}","@Override public List<VMTemplateStoragePoolVO> getUnusedTemplatesInPool(StoragePoolVO pool){
  List<VMTemplateStoragePoolVO> unusedTemplatesInPool=new ArrayList<VMTemplateStoragePoolVO>();
  List<VMTemplateStoragePoolVO> allTemplatesInPool=_tmpltPoolDao.listByPoolId(pool.getId());
  for (  VMTemplateStoragePoolVO templatePoolVO : allTemplatesInPool) {
    VMTemplateVO template=_tmpltDao.findByIdIncludingRemoved(templatePoolVO.getTemplateId());
    if (template.getTemplateType() == TemplateType.SYSTEM) {
      continue;
    }
    if (templatePoolVO.getDownloadState() != Status.DOWNLOADED) {
      continue;
    }
    if (template.getFormat() != ImageFormat.ISO && !_volumeDao.isAnyVolumeActivelyUsingTemplateOnPool(template.getId(),pool.getId())) {
      unusedTemplatesInPool.add(templatePoolVO);
    }
  }
  return unusedTemplatesInPool;
}",0.9458010720667064
107398,"@Override @DB public void assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd) throws NetworkRuleConflictException {
  Long loadBalancerId=cmd.getLoadBalancerId();
  Long instanceIdParam=cmd.getVirtualMachineId();
  List<Long> instanceIds=cmd.getVirtualMachineIds();
  if ((instanceIdParam == null) && (instanceIds == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  if ((instanceIds == null) && (instanceIdParam != null)) {
    instanceIds=new ArrayList<Long>();
    instanceIds.add(instanceIdParam);
  }
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  DomainRouterVO syncObject=_routerMgr.getRouter(loadBalancer.getIpAddress());
  cmd.synchronizeCommand(""String_Node_Str"",syncObject.getId());
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if ((account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (account.getType() == Account.ACCOUNT_TYPE_READ_ONLY_ADMIN)) {
      if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
    }
 else     if (account.getId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  List<FirewallRuleVO> firewallRulesToApply=new ArrayList<FirewallRuleVO>();
  long accountId=0;
  DomainRouterVO router=null;
  List<LoadBalancerVMMapVO> mappedInstances=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,false);
  Set<Long> mappedInstanceIds=new HashSet<Long>();
  if (mappedInstances != null) {
    for (    LoadBalancerVMMapVO mappedInstance : mappedInstances) {
      mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
    }
  }
  List<Long> finalInstanceIds=new ArrayList<Long>();
  for (  Long instanceId : instanceIds) {
    if (mappedInstanceIds.contains(instanceId)) {
      continue;
    }
 else {
      finalInstanceIds.add(instanceId);
    }
    UserVmVO userVm=_vmDao.findById(instanceId);
    if (userVm == null) {
      s_logger.warn(""String_Node_Str"" + instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId);
    }
 else {
      ServiceOfferingVO offering=_serviceOfferingDao.findById(userVm.getServiceOfferingId());
      if ((offering == null) || !GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
        _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,Boolean.TRUE);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
        }
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
      }
    }
    if (accountId == 0) {
      accountId=userVm.getAccountId();
    }
 else     if (accountId != userVm.getAccountId()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
    }
    DomainRouterVO nextRouter=null;
    if (userVm.getDomainRouterId() != null)     nextRouter=_routerMgr.getRouter(userVm.getDomainRouterId());
    if (nextRouter == null) {
      s_logger.warn(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
    }
    if (router == null) {
      router=nextRouter;
      if (router.getAccountId() != loadBalancer.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getAccountId()+ ""String_Node_Str"");
      }
    }
 else     if (router.getId() != nextRouter.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ nextRouter.getHostName()+ ""String_Node_Str""+ router.getHostName());
    }
    String ipAddress=loadBalancer.getIpAddress();
    String privateIpAddress=userVm.getGuestIpAddress();
    List<FirewallRuleVO> existingRulesOnPubIp=_rulesDao.listIPForwarding(ipAddress);
    if (existingRulesOnPubIp != null) {
      for (      FirewallRuleVO fwRule : existingRulesOnPubIp) {
        if (!((fwRule.isForwarding() == false) && (fwRule.getGroupId() != null) && (fwRule.getGroupId() == loadBalancer.getId().longValue()))) {
          if (fwRule.getPublicPort().equals(loadBalancer.getPublicPort())) {
            throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ loadBalancer.getPublicPort()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getId()+ ""String_Node_Str""+ userVm.getHostName()+ ""String_Node_Str"");
          }
        }
 else         if (fwRule.getPrivateIpAddress().equals(privateIpAddress) && fwRule.getPrivatePort().equals(loadBalancer.getPrivatePort()) && fwRule.isEnabled()) {
          continue;
        }
      }
    }
    FirewallRuleVO newFwRule=new FirewallRuleVO();
    newFwRule.setAlgorithm(loadBalancer.getAlgorithm());
    newFwRule.setEnabled(true);
    newFwRule.setForwarding(false);
    newFwRule.setPrivatePort(loadBalancer.getPrivatePort());
    newFwRule.setPublicPort(loadBalancer.getPublicPort());
    newFwRule.setPublicIpAddress(loadBalancer.getIpAddress());
    newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
    newFwRule.setGroupId(loadBalancer.getId());
    firewallRulesToApply.add(newFwRule);
  }
  if (firewallRulesToApply.isEmpty()) {
    return;
  }
  IPAddressVO ipAddr=_ipAddressDao.findById(loadBalancer.getIpAddress());
  List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(accountId,ipAddr.getDataCenterId(),null);
  for (  IPAddressVO ipv : ipAddrs) {
    List<FirewallRuleVO> rules=_rulesDao.listIPForwarding(ipv.getAddress(),false);
    firewallRulesToApply.addAll(rules);
  }
  txn.start();
  List<FirewallRuleVO> updatedRules=null;
  if (router.getState().equals(State.Starting)) {
    updatedRules=firewallRulesToApply;
  }
 else {
    updatedRules=updateFirewallRules(loadBalancer.getIpAddress(),firewallRulesToApply,router);
  }
  String description;
  String type=EventTypes.EVENT_NET_RULE_ADD;
  String ruleName=""String_Node_Str"";
  String level=EventVO.LEVEL_INFO;
  LoadBalancerVO loadBalancerLock=null;
  try {
    loadBalancerLock=_loadBalancerDao.acquireInLockTable(loadBalancerId);
    if (loadBalancerLock == null) {
      s_logger.warn(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
    if ((updatedRules != null) && (updatedRules.size() == firewallRulesToApply.size())) {
      for (      Long addedInstanceId : finalInstanceIds) {
        LoadBalancerVMMapVO mappedVM=new LoadBalancerVMMapVO(loadBalancerId,addedInstanceId);
        _loadBalancerVMMapDao.persist(mappedVM);
      }
      for (      FirewallRuleVO updatedRule : updatedRules) {
        if (updatedRule.getId() == null) {
          _rulesDao.persist(updatedRule);
          description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ updatedRule.getPublicIpAddress()+ ""String_Node_Str""+ updatedRule.getPublicPort()+ ""String_Node_Str""+ updatedRule.getPrivateIpAddress()+ ""String_Node_Str""+ updatedRule.getPrivatePort()+ ""String_Node_Str""+ ""String_Node_Str""+ updatedRule.getProtocol();
          EventUtils.saveEvent(UserContext.current().getUserId(),loadBalancer.getAccountId(),level,type,description);
        }
      }
    }
 else {
      _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,null);
      txn.commit();
      s_logger.warn(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
      throw new CloudRuntimeException(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
    }
  }
  finally {
    if (loadBalancerLock != null) {
      _loadBalancerDao.releaseFromLockTable(loadBalancerId);
    }
  }
}","@Override @DB public void assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd) throws NetworkRuleConflictException {
  Long loadBalancerId=cmd.getLoadBalancerId();
  Long instanceIdParam=cmd.getVirtualMachineId();
  List<Long> instanceIds=cmd.getVirtualMachineIds();
  if ((instanceIdParam == null) && (instanceIds == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  if ((instanceIds == null) && (instanceIdParam != null)) {
    instanceIds=new ArrayList<Long>();
    instanceIds.add(instanceIdParam);
  }
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  DomainRouterVO syncObject=_routerMgr.getRouter(loadBalancer.getIpAddress());
  if (syncObject == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str""+ loadBalancer.getIpAddress());
  }
 else {
    cmd.synchronizeCommand(""String_Node_Str"",syncObject.getId());
  }
  Account account=UserContext.current().getAccount();
  if (account != null) {
    if ((account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (account.getType() == Account.ACCOUNT_TYPE_READ_ONLY_ADMIN)) {
      if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
    }
 else     if (account.getId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  List<FirewallRuleVO> firewallRulesToApply=new ArrayList<FirewallRuleVO>();
  long accountId=0;
  DomainRouterVO router=null;
  List<LoadBalancerVMMapVO> mappedInstances=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,false);
  Set<Long> mappedInstanceIds=new HashSet<Long>();
  if (mappedInstances != null) {
    for (    LoadBalancerVMMapVO mappedInstance : mappedInstances) {
      mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
    }
  }
  List<Long> finalInstanceIds=new ArrayList<Long>();
  for (  Long instanceId : instanceIds) {
    if (mappedInstanceIds.contains(instanceId)) {
      continue;
    }
 else {
      finalInstanceIds.add(instanceId);
    }
    UserVmVO userVm=_vmDao.findById(instanceId);
    if (userVm == null) {
      s_logger.warn(""String_Node_Str"" + instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId);
    }
 else {
      ServiceOfferingVO offering=_serviceOfferingDao.findById(userVm.getServiceOfferingId());
      if ((offering == null) || !GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
        _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,Boolean.TRUE);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
        }
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
      }
    }
    if (accountId == 0) {
      accountId=userVm.getAccountId();
    }
 else     if (accountId != userVm.getAccountId()) {
      s_logger.warn(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
    }
    DomainRouterVO nextRouter=null;
    if (userVm.getDomainRouterId() != null)     nextRouter=_routerMgr.getRouter(userVm.getDomainRouterId());
    if (nextRouter == null) {
      s_logger.warn(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
    }
    if (router == null) {
      router=nextRouter;
      if (router.getAccountId() != loadBalancer.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getAccountId()+ ""String_Node_Str"");
      }
    }
 else     if (router.getId() != nextRouter.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getHostName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ nextRouter.getHostName()+ ""String_Node_Str""+ router.getHostName());
    }
    String ipAddress=loadBalancer.getIpAddress();
    String privateIpAddress=userVm.getGuestIpAddress();
    List<FirewallRuleVO> existingRulesOnPubIp=_rulesDao.listIPForwarding(ipAddress);
    if (existingRulesOnPubIp != null) {
      for (      FirewallRuleVO fwRule : existingRulesOnPubIp) {
        if (!((fwRule.isForwarding() == false) && (fwRule.getGroupId() != null) && (fwRule.getGroupId() == loadBalancer.getId().longValue()))) {
          if (fwRule.getPublicPort().equals(loadBalancer.getPublicPort())) {
            throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ loadBalancer.getPublicPort()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getId()+ ""String_Node_Str""+ userVm.getHostName()+ ""String_Node_Str"");
          }
        }
 else         if (fwRule.getPrivateIpAddress().equals(privateIpAddress) && fwRule.getPrivatePort().equals(loadBalancer.getPrivatePort()) && fwRule.isEnabled()) {
          continue;
        }
      }
    }
    FirewallRuleVO newFwRule=new FirewallRuleVO();
    newFwRule.setAlgorithm(loadBalancer.getAlgorithm());
    newFwRule.setEnabled(true);
    newFwRule.setForwarding(false);
    newFwRule.setPrivatePort(loadBalancer.getPrivatePort());
    newFwRule.setPublicPort(loadBalancer.getPublicPort());
    newFwRule.setPublicIpAddress(loadBalancer.getIpAddress());
    newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
    newFwRule.setGroupId(loadBalancer.getId());
    firewallRulesToApply.add(newFwRule);
  }
  if (firewallRulesToApply.isEmpty()) {
    return;
  }
  IPAddressVO ipAddr=_ipAddressDao.findById(loadBalancer.getIpAddress());
  List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(accountId,ipAddr.getDataCenterId(),null);
  for (  IPAddressVO ipv : ipAddrs) {
    List<FirewallRuleVO> rules=_rulesDao.listIPForwarding(ipv.getAddress(),false);
    firewallRulesToApply.addAll(rules);
  }
  txn.start();
  List<FirewallRuleVO> updatedRules=null;
  if (router.getState().equals(State.Starting)) {
    updatedRules=firewallRulesToApply;
  }
 else {
    updatedRules=updateFirewallRules(loadBalancer.getIpAddress(),firewallRulesToApply,router);
  }
  String description;
  String type=EventTypes.EVENT_NET_RULE_ADD;
  String ruleName=""String_Node_Str"";
  String level=EventVO.LEVEL_INFO;
  LoadBalancerVO loadBalancerLock=null;
  try {
    loadBalancerLock=_loadBalancerDao.acquireInLockTable(loadBalancerId);
    if (loadBalancerLock == null) {
      s_logger.warn(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
    if ((updatedRules != null) && (updatedRules.size() == firewallRulesToApply.size())) {
      for (      Long addedInstanceId : finalInstanceIds) {
        LoadBalancerVMMapVO mappedVM=new LoadBalancerVMMapVO(loadBalancerId,addedInstanceId);
        _loadBalancerVMMapDao.persist(mappedVM);
      }
      for (      FirewallRuleVO updatedRule : updatedRules) {
        if (updatedRule.getId() == null) {
          _rulesDao.persist(updatedRule);
          description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ updatedRule.getPublicIpAddress()+ ""String_Node_Str""+ updatedRule.getPublicPort()+ ""String_Node_Str""+ updatedRule.getPrivateIpAddress()+ ""String_Node_Str""+ updatedRule.getPrivatePort()+ ""String_Node_Str""+ ""String_Node_Str""+ updatedRule.getProtocol();
          EventUtils.saveEvent(UserContext.current().getUserId(),loadBalancer.getAccountId(),level,type,description);
        }
      }
    }
 else {
      _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,null);
      txn.commit();
      s_logger.warn(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
      throw new CloudRuntimeException(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
    }
  }
  finally {
    if (loadBalancerLock != null) {
      _loadBalancerDao.releaseFromLockTable(loadBalancerId);
    }
  }
}",0.9848780760002231
107399,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ResourceUnavailableException(msg);
    }
    primaryStorage=_storagePoolDao.findById(primaryStorageId);
    if (primaryStorage == null) {
      s_logger.warn(""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0)     restart=false;
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null)       continue;
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Stopping)|| vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId(),eventId1) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId(),eventId1)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + vmInstance.getId());
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          long eventId2=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_ROUTER_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_networkMgr.stopRouter(vmInstance.getId(),eventId2)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            if (_networkMgr.startRouter(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ResourceUnavailableException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof CloudRuntimeException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ResourceUnavailableException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0)     restart=false;
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null)       continue;
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId(),eventId1) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId(),eventId1)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + vmInstance.getId());
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          long eventId2=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_ROUTER_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_networkMgr.stopRouter(vmInstance.getId(),eventId2)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            if (_networkMgr.startRouter(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ResourceUnavailableException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof CloudRuntimeException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}",0.9646126126126128
107400,"@Override public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if ((diskOfferingId == null) && (size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if ((diskOfferingId == null) && (size != null)) {
      boolean ok=validateCustomVolumeSizeRange(size);
      if (!ok) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size);
      }
      List<DiskOfferingVO> privateTemplateList=_diskOfferingDao.findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
 else {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
      if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      size=(diskOffering.getDiskSize() * 1024 * 1024);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setMirrorState(MirrorState.NOT_MIRRORED);
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  return volume;
}","@Override public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if ((diskOfferingId == null) && (size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if ((diskOfferingId == null) && (size != null)) {
      boolean ok=validateCustomVolumeSizeRange(size);
      if (!ok) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size);
      }
      List<DiskOfferingVO> privateTemplateList=_diskOfferingDao.findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
 else {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
      if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (diskOffering.getDiskSize() > 0)       size=(diskOffering.getDiskSize() * 1024 * 1024);
 else       size=(size * 1024 * 1024);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setMirrorState(MirrorState.NOT_MIRRORED);
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  return volume;
}",0.9913998549373122
107401,"@Override public UserVm deployVirtualMachine(DeployVMCmd cmd) throws ResourceAllocationException, InsufficientStorageCapacityException, ExecutionException, StorageUnavailableException, ConcurrentOperationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long accountId=null;
  long dataCenterId=cmd.getZoneId();
  long serviceOfferingId=cmd.getServiceOfferingId();
  long templateId=cmd.getTemplateId();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String domain=null;
  String password=generateRandomPassword();
  String displayName=cmd.getDisplayName();
  String group=cmd.getGroup();
  String userData=cmd.getUserData();
  String[] networkGroups=null;
  Long sizeObj=cmd.getSize();
  long size=(sizeObj == null) ? 0 : sizeObj;
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataCenterId);
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId == null) {
    domainId=dc.getDomainId();
    if (domainId == null) {
    }
 else {
      if (!_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
  }
  List<String> netGrpList=cmd.getNetworkGroupList();
  if ((netGrpList != null) && !netGrpList.isEmpty()) {
    networkGroups=netGrpList.toArray(new String[netGrpList.size()]);
  }
  AccountVO account=_accountDao.findById(accountId);
  if (account == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
  }
  ServiceOfferingVO offering=_offeringsDao.findById(serviceOfferingId);
  if (offering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VMTemplateVO template=_templateDao.findById(templateId);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isIso=Storage.ImageFormat.ISO.equals(template.getFormat());
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DiskOfferingVO diskOffering=null;
  if (diskOfferingId != null) {
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
  }
  if (isIso && diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (diskOffering.isCustomized() && size <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!template.isPublicTemplate()) {
    Long templateOwner=template.getAccountId();
    if (!BaseCmd.isAdmin(account.getType()) && ((templateOwner == null) || (templateOwner.longValue() != accountId))) {
      LaunchPermissionVO permission=_launchPermissionDao.findByTemplateAndAccount(templateId,account.getId());
      if (permission == null) {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ template.getName());
      }
    }
  }
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized) {
    _networkGroupMgr.createDefaultNetworkGroup(accountId);
  }
  if (networkGroups != null) {
    if (offering.getGuestIpType() == NetworkOffering.GuestIpType.Virtualized) {
      throw new InvalidParameterValueException(""String_Node_Str"" + offering.getName());
    }
    Set<String> nameSet=new HashSet<String>();
    nameSet.addAll(Arrays.asList(networkGroups));
    nameSet.add(NetworkGroupManager.DEFAULT_GROUP_NAME);
    networkGroups=nameSet.toArray(new String[nameSet.size()]);
    List<NetworkGroupVO> networkGroupVOs=_networkSecurityGroupDao.findByAccountAndNames(accountId,networkGroups);
    if (networkGroupVOs.size() != nameSet.size()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized && _networkGroupsEnabled) {
      networkGroups=new String[]{NetworkGroupManager.DEFAULT_GROUP_NAME};
    }
  }
  Long eventId=cmd.getStartEventId();
  try {
    return deployVirtualMachineImpl(userId,accountId,dataCenterId,serviceOfferingId,templateId,diskOfferingId,domain,password,displayName,group,userData,networkGroups,eventId,size);
  }
 catch (  ResourceAllocationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ExecutionException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InvalidParameterValueException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InsufficientStorageCapacityException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  PermissionDeniedException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ConcurrentOperationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
}","@Override public UserVm deployVirtualMachine(DeployVMCmd cmd) throws ResourceAllocationException, InsufficientStorageCapacityException, ExecutionException, StorageUnavailableException, ConcurrentOperationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long accountId=null;
  long dataCenterId=cmd.getZoneId();
  long serviceOfferingId=cmd.getServiceOfferingId();
  long templateId=cmd.getTemplateId();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String domain=null;
  String password=generateRandomPassword();
  String displayName=cmd.getDisplayName();
  String group=cmd.getGroup();
  String userData=cmd.getUserData();
  String[] networkGroups=null;
  Long sizeObj=cmd.getSize();
  long size=(sizeObj == null) ? 0 : sizeObj;
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataCenterId);
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=userAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId == null) {
    domainId=dc.getDomainId();
    if (domainId == null) {
    }
 else {
      if (!_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
  }
  List<String> netGrpList=cmd.getNetworkGroupList();
  if ((netGrpList != null) && !netGrpList.isEmpty()) {
    networkGroups=netGrpList.toArray(new String[netGrpList.size()]);
  }
  AccountVO account=_accountDao.findById(accountId);
  if (account == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
  }
  ServiceOfferingVO offering=_offeringsDao.findById(serviceOfferingId);
  if (offering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  VMTemplateVO template=_templateDao.findById(templateId);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isIso=Storage.ImageFormat.ISO.equals(template.getFormat());
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DiskOfferingVO diskOffering=null;
  if (diskOfferingId != null) {
    diskOffering=_diskOfferingDao.findById(diskOfferingId);
  }
  if (isIso && diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (diskOffering != null && diskOffering.isCustomized() && size <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (diskOffering != null && diskOffering.isCustomized() && size > _maxVolumeSizeInGb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInGb);
  }
  if (!template.isPublicTemplate()) {
    Long templateOwner=template.getAccountId();
    if (!BaseCmd.isAdmin(account.getType()) && ((templateOwner == null) || (templateOwner.longValue() != accountId))) {
      LaunchPermissionVO permission=_launchPermissionDao.findByTemplateAndAccount(templateId,account.getId());
      if (permission == null) {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ template.getName());
      }
    }
  }
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > UserVmManager.MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized) {
    _networkGroupMgr.createDefaultNetworkGroup(accountId);
  }
  if (networkGroups != null) {
    if (offering.getGuestIpType() == NetworkOffering.GuestIpType.Virtualized) {
      throw new InvalidParameterValueException(""String_Node_Str"" + offering.getName());
    }
    Set<String> nameSet=new HashSet<String>();
    nameSet.addAll(Arrays.asList(networkGroups));
    nameSet.add(NetworkGroupManager.DEFAULT_GROUP_NAME);
    networkGroups=nameSet.toArray(new String[nameSet.size()]);
    List<NetworkGroupVO> networkGroupVOs=_networkSecurityGroupDao.findByAccountAndNames(accountId,networkGroups);
    if (networkGroupVOs.size() != nameSet.size()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (offering.getGuestIpType() != NetworkOffering.GuestIpType.Virtualized && _networkGroupsEnabled) {
      networkGroups=new String[]{NetworkGroupManager.DEFAULT_GROUP_NAME};
    }
  }
  Long eventId=cmd.getStartEventId();
  try {
    return deployVirtualMachineImpl(userId,accountId,dataCenterId,serviceOfferingId,templateId,diskOfferingId,domain,password,displayName,group,userData,networkGroups,eventId,size);
  }
 catch (  ResourceAllocationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ExecutionException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InvalidParameterValueException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  InsufficientStorageCapacityException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  PermissionDeniedException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  ConcurrentOperationException e) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + e.getMessage());
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_CREATE,""String_Node_Str"",null,eventId);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
}",0.9846852693056456
107402,"protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _poolHostDao=locator.getDao(StoragePoolHostDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _vmGroupDao=locator.getDao(InstanceGroupDao.class);
  _groupVMMapDao=locator.getDao(InstanceGroupVMMapDao.class);
  _uploadDao=locator.getDao(UploadDao.class);
  _certDao=locator.getDao(CertificateDao.class);
  _remoteAccessVpnDao=locator.getDao(RemoteAccessVpnDao.class);
  _vpnUsersDao=locator.getDao(VpnUserDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _uploadMonitor=locator.getManager(UploadMonitor.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
}","protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _poolHostDao=locator.getDao(StoragePoolHostDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _vmGroupDao=locator.getDao(InstanceGroupDao.class);
  _groupVMMapDao=locator.getDao(InstanceGroupVMMapDao.class);
  _uploadDao=locator.getDao(UploadDao.class);
  _certDao=locator.getDao(CertificateDao.class);
  _remoteAccessVpnDao=locator.getDao(RemoteAccessVpnDao.class);
  _vpnUsersDao=locator.getDao(VpnUserDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _uploadMonitor=locator.getManager(UploadMonitor.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String maxVolumeSizeInGbString=_configDao.getValue(""String_Node_Str"");
  int maxVolumeSizeGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  _maxVolumeSizeInGb=maxVolumeSizeGb;
}",0.9824794014584716
107403,"@Override @DB public StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd){
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ResourceUnavailableException(msg);
    }
    primaryStorage=_storagePoolDao.findById(primaryStorageId);
    if (primaryStorage == null) {
      s_logger.warn(""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0)     restart=false;
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null)       continue;
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Stopping)|| vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId(),eventId1) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId(),eventId1)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + vmInstance.getId());
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          long eventId2=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_ROUTER_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_networkMgr.stopRouter(vmInstance.getId(),eventId2)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            if (_networkMgr.startRouter(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ResourceUnavailableException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof CloudRuntimeException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd){
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ResourceUnavailableException(msg);
    }
    primaryStorage=_storagePoolDao.findById(primaryStorageId);
    if (primaryStorage == null) {
      s_logger.warn(""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0)     restart=false;
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null)       continue;
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Stopping)|| vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId(),eventId1) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId(),eventId)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          long eventId1=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId(),eventId1)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + vmInstance.getId());
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          long eventId2=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_ROUTER_STOP,""String_Node_Str"" + vmInstance.getId());
          if (!_networkMgr.stopRouter(vmInstance.getId(),eventId2)) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_START,""String_Node_Str"" + vmInstance.getId());
            if (_networkMgr.startRouter(vmInstance.getId(),eventId) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ResourceUnavailableException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    if (e instanceof CloudRuntimeException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.PREPARE_STORAGE_MAINTENANCE_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}",0.9990606257677578
107404,"/** 
 * Get notified of change of job status. Executed in context of uploader thread
 * @param jobId the id of the job
 * @param status the status of the job
 */
public void setUploadStatus(String jobId,Status status){
  UploadJob uj=jobs.get(jobId);
  if (uj == null) {
    s_logger.warn(""String_Node_Str"" + jobId + ""String_Node_Str""+ status+ ""String_Node_Str"");
    return;
  }
  TemplateUploader tu=uj.getTemplateUploader();
  s_logger.warn(""String_Node_Str"" + jobId + ""String_Node_Str""+ status);
  s_logger.warn(""String_Node_Str"" + tu.getUploadedBytes() + ""String_Node_Str""+ tu.getUploadError()+ ""String_Node_Str""+ tu.getUploadPercent());
switch (status) {
case ABORTED:
case NOT_STARTED:
case UNRECOVERABLE_ERROR:
    uj.cleanup();
  break;
case UNKNOWN:
return;
case IN_PROGRESS:
s_logger.info(""String_Node_Str"" + jobId + ""String_Node_Str""+ status);
tu.setResume(true);
threadPool.execute(tu);
break;
case RECOVERABLE_ERROR:
threadPool.execute(tu);
break;
case UPLOAD_FINISHED:
tu.setUploadError(""String_Node_Str"");
String result=postUpload(jobId);
if (result != null) {
s_logger.error(""String_Node_Str"" + result);
tu.setStatus(Status.UNRECOVERABLE_ERROR);
tu.setUploadError(""String_Node_Str"" + result);
}
 else {
s_logger.warn(""String_Node_Str"" + new SimpleDateFormat().format(new Date()));
tu.setStatus(Status.POST_UPLOAD_FINISHED);
tu.setUploadError(""String_Node_Str"" + new SimpleDateFormat().format(new Date()));
}
uj.cleanup();
break;
default :
break;
}
}","/** 
 * Get notified of change of job status. Executed in context of uploader thread
 * @param jobId the id of the job
 * @param status the status of the job
 */
public void setUploadStatus(String jobId,Status status){
  UploadJob uj=jobs.get(jobId);
  if (uj == null) {
    s_logger.warn(""String_Node_Str"" + jobId + ""String_Node_Str""+ status+ ""String_Node_Str"");
    return;
  }
  TemplateUploader tu=uj.getTemplateUploader();
  s_logger.warn(""String_Node_Str"" + jobId + ""String_Node_Str""+ status);
  s_logger.warn(""String_Node_Str"" + tu.getUploadedBytes() + ""String_Node_Str""+ tu.getUploadError()+ ""String_Node_Str""+ tu.getUploadPercent());
switch (status) {
case ABORTED:
case NOT_STARTED:
case UNRECOVERABLE_ERROR:
    if (uj.getTemplateUploader().getUploadLocalPath().indexOf(""String_Node_Str"") > -1) {
      uj.cleanup();
    }
  break;
case UNKNOWN:
return;
case IN_PROGRESS:
s_logger.info(""String_Node_Str"" + jobId + ""String_Node_Str""+ status);
tu.setResume(true);
threadPool.execute(tu);
break;
case RECOVERABLE_ERROR:
threadPool.execute(tu);
break;
case UPLOAD_FINISHED:
tu.setUploadError(""String_Node_Str"");
String result=postUpload(jobId);
if (result != null) {
s_logger.error(""String_Node_Str"" + result);
tu.setStatus(Status.UNRECOVERABLE_ERROR);
tu.setUploadError(""String_Node_Str"" + result);
}
 else {
s_logger.warn(""String_Node_Str"" + new SimpleDateFormat().format(new Date()));
tu.setStatus(Status.POST_UPLOAD_FINISHED);
tu.setUploadError(""String_Node_Str"" + new SimpleDateFormat().format(new Date()));
}
if (uj.getTemplateUploader().getUploadLocalPath().indexOf(""String_Node_Str"") > -1) {
uj.cleanup();
}
break;
default :
break;
}
}",0.9242618741976892
107405,"public static String getStaticName(){
  return ""String_Node_Str"";
}","public static String getStaticName(){
  return s_name;
}",0.8455284552845529
107406,"@Override @SuppressWarnings(""String_Node_Str"") public ExtractResponse getResponse(){
  Long uploadId=(Long)getResponseObject();
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setResponseName(getName());
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(getAccountId());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ExtractResponse getResponse(){
  Long uploadId=(Long)getResponseObject();
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setResponseName(getName());
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(getAccountId());
  response.setUrl(uploadInfo.getUploadUrl().replaceAll(""String_Node_Str"",""String_Node_Str""));
  return response;
}",0.9315866084425036
107407,"public static String getStaticName(){
  return ""String_Node_Str"";
}","public static String getStaticName(){
  return s_name;
}",0.8455284552845529
107408,"@Override @SuppressWarnings(""String_Node_Str"") public ExtractResponse getResponse(){
  Long uploadId=(Long)getResponseObject();
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setResponseName(getName());
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(getAccountId());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ExtractResponse getResponse(){
  Long uploadId=(Long)getResponseObject();
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setResponseName(getName());
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(getAccountId());
  response.setUrl(uploadInfo.getUploadUrl().replaceAll(""String_Node_Str"",""String_Node_Str""));
  return response;
}",0.9315866084425036
107409,"public static String getStaticName(){
  return ""String_Node_Str"";
}","public static String getStaticName(){
  return s_name;
}",0.8455284552845529
107410,"@Override @SuppressWarnings(""String_Node_Str"") public ExtractResponse getResponse(){
  Long uploadId=(Long)getResponseObject();
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setResponseName(getName());
  response.setId(id);
  response.setName(ApiDBUtils.findVolumeById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(getAccountId());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ExtractResponse getResponse(){
  Long uploadId=(Long)getResponseObject();
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setResponseName(getName());
  response.setId(id);
  response.setName(ApiDBUtils.findVolumeById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(getAccountId());
  response.setUrl(uploadInfo.getUploadUrl().replaceAll(""String_Node_Str"",""String_Node_Str""));
  return response;
}",0.9313868613138686
107411,"public ExtractResponse(Long volumeId,String volName,long accountId,String state,Long uploadId){
  this.id=volumeId;
  this.name=volName;
  this.accountId=accountId;
  this.state=state;
  this.uploadId=uploadId;
}","public ExtractResponse(Long typeId,String typeName,long accountId,String state,Long uploadId){
  this.id=typeId;
  this.name=typeName;
  this.accountId=accountId;
  this.state=state;
  this.uploadId=uploadId;
}",0.8530805687203792
107412,"@Override public Long extractVolume(ExtractVolumeCmd cmd) throws URISyntaxException {
  Long volumeId=cmd.getId();
  String url=cmd.getUrl();
  Long zoneId=cmd.getZoneId();
  AsyncJobVO job=cmd.getJob();
  String mode=cmd.getMode();
  Account account=UserContext.current().getAccount();
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (volume.getInstanceId() != null && ApiDBUtils.findVMInstanceById(volume.getInstanceId()).getState() != State.Stopped) {
    s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (volume.getAccountId() != account.getId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
      }
    }
 else {
      Account userAccount=_accountDao.findById(volume.getAccountId());
      if ((userAccount == null) || !_domainDao.isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
      throw new IllegalArgumentException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(volumeId,Type.VOLUME)) {
      throw new IllegalArgumentException(volume.getName() + ""String_Node_Str"");
    }
  }
  long userId=UserContext.current().getUserId();
  long accountId=volume.getAccountId();
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  StoragePoolVO srcPool=_poolDao.findById(volume.getPoolId());
  Long sourceHostId=_storageMgr.findHostIdForStoragePool(srcPool);
  List<HostVO> storageServers=_hostDao.listByTypeDataCenter(Host.Type.SecondaryStorage,zoneId);
  HostVO sserver=storageServers.get(0);
  EventUtils.saveStartedEvent(userId,accountId,cmd.getEventType(),""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ mode,cmd.getStartEventId());
  List<UploadVO> extractURLList=_uploadDao.listByTypeUploadStatus(volumeId,Upload.Type.VOLUME,UploadVO.Status.DOWNLOAD_URL_CREATED);
  if (extractMode == Upload.Mode.HTTP_DOWNLOAD && extractURLList.size() > 0) {
    return extractURLList.get(0).getId();
  }
 else {
    UploadVO uploadJob=_uploadMonitor.createNewUploadEntry(sserver.getId(),volumeId,UploadVO.Status.COPY_IN_PROGRESS,Type.VOLUME,url,extractMode);
    s_logger.debug(""String_Node_Str"" + uploadJob.getMode());
    uploadJob=_uploadDao.createForUpdate(uploadJob.getId());
    ExtractResponse resultObj=new ExtractResponse(volumeId,volume.getName(),accountId,UploadVO.Status.COPY_IN_PROGRESS.toString(),uploadJob.getId());
    resultObj.setResponseName(cmd.getName());
    _asyncMgr.updateAsyncJobAttachment(job.getId(),Type.VOLUME.toString(),volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),AsyncJobResult.STATUS_IN_PROGRESS,resultObj);
    CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volume.getPath(),srcPool,secondaryStorageURL,true);
    CopyVolumeAnswer cvAnswer=(CopyVolumeAnswer)_agentMgr.easySend(sourceHostId,cvCmd);
    if (cvAnswer == null || !cvAnswer.getResult()) {
      String errorString=""String_Node_Str"";
      resultObj.setResultString(errorString);
      resultObj.setUploadStatus(UploadVO.Status.COPY_ERROR.toString());
      _asyncMgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_FAILED,0,resultObj);
      uploadJob.setUploadState(UploadVO.Status.COPY_ERROR);
      uploadJob.setErrorString(errorString);
      uploadJob.setLastUpdated(new Date());
      _uploadDao.update(uploadJob.getId(),uploadJob);
      EventUtils.saveEvent(userId,accountId,EventTypes.EVENT_VOLUME_UPLOAD,errorString);
      throw new CloudRuntimeException(errorString);
    }
    String volumeLocalPath=""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ cvAnswer.getVolumePath()+ ""String_Node_Str"";
    uploadJob.setUploadState(UploadVO.Status.COPY_COMPLETE);
    uploadJob.setLastUpdated(new Date());
    uploadJob.setInstallPath(volumeLocalPath);
    _uploadDao.update(uploadJob.getId(),uploadJob);
    if (extractMode == Mode.FTP_UPLOAD) {
      _uploadMonitor.extractVolume(uploadJob,sserver,volume,url,zoneId,volumeLocalPath,cmd.getStartEventId(),job.getId(),_asyncMgr);
      return uploadJob.getId();
    }
 else {
      _uploadMonitor.createVolumeDownloadURL(volumeId,volumeLocalPath,Type.VOLUME,zoneId,uploadJob.getId());
      EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_INFO,cmd.getEventType(),""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ mode,null,cmd.getStartEventId());
      return uploadJob.getId();
    }
  }
}","@Override public Long extractVolume(ExtractVolumeCmd cmd) throws URISyntaxException {
  Long volumeId=cmd.getId();
  String url=cmd.getUrl();
  Long zoneId=cmd.getZoneId();
  AsyncJobVO job=cmd.getJob();
  String mode=cmd.getMode();
  Account account=UserContext.current().getAccount();
  VolumeVO volume=_volumeDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (volume.getPoolId() == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (volume.getInstanceId() != null && ApiDBUtils.findVMInstanceById(volume.getInstanceId()).getState() != State.Stopped) {
    s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (volume.getAccountId() != account.getId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
      }
    }
 else {
      Account userAccount=_accountDao.findById(volume.getAccountId());
      if ((userAccount == null) || !_domainDao.isChildDomain(account.getDomainId(),userAccount.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
      throw new IllegalArgumentException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(volumeId,Type.VOLUME)) {
      throw new IllegalArgumentException(volume.getName() + ""String_Node_Str"");
    }
  }
  long userId=UserContext.current().getUserId();
  long accountId=volume.getAccountId();
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  StoragePoolVO srcPool=_poolDao.findById(volume.getPoolId());
  Long sourceHostId=_storageMgr.findHostIdForStoragePool(srcPool);
  List<HostVO> storageServers=_hostDao.listByTypeDataCenter(Host.Type.SecondaryStorage,zoneId);
  HostVO sserver=storageServers.get(0);
  EventUtils.saveStartedEvent(userId,accountId,cmd.getEventType(),""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ mode,cmd.getStartEventId());
  List<UploadVO> extractURLList=_uploadDao.listByTypeUploadStatus(volumeId,Upload.Type.VOLUME,UploadVO.Status.DOWNLOAD_URL_CREATED);
  if (extractMode == Upload.Mode.HTTP_DOWNLOAD && extractURLList.size() > 0) {
    return extractURLList.get(0).getId();
  }
 else {
    UploadVO uploadJob=_uploadMonitor.createNewUploadEntry(sserver.getId(),volumeId,UploadVO.Status.COPY_IN_PROGRESS,Type.VOLUME,url,extractMode);
    s_logger.debug(""String_Node_Str"" + uploadJob.getMode());
    uploadJob=_uploadDao.createForUpdate(uploadJob.getId());
    ExtractResponse resultObj=new ExtractResponse(volumeId,volume.getName(),accountId,UploadVO.Status.COPY_IN_PROGRESS.toString(),uploadJob.getId());
    resultObj.setResponseName(cmd.getName());
    _asyncMgr.updateAsyncJobAttachment(job.getId(),Type.VOLUME.toString(),volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),AsyncJobResult.STATUS_IN_PROGRESS,resultObj);
    CopyVolumeCommand cvCmd=new CopyVolumeCommand(volume.getId(),volume.getPath(),srcPool,secondaryStorageURL,true);
    CopyVolumeAnswer cvAnswer=(CopyVolumeAnswer)_agentMgr.easySend(sourceHostId,cvCmd);
    if (cvAnswer == null || !cvAnswer.getResult()) {
      String errorString=""String_Node_Str"";
      resultObj.setResultString(errorString);
      resultObj.setUploadStatus(UploadVO.Status.COPY_ERROR.toString());
      _asyncMgr.completeAsyncJob(job.getId(),AsyncJobResult.STATUS_FAILED,0,resultObj);
      uploadJob.setUploadState(UploadVO.Status.COPY_ERROR);
      uploadJob.setErrorString(errorString);
      uploadJob.setLastUpdated(new Date());
      _uploadDao.update(uploadJob.getId(),uploadJob);
      EventUtils.saveEvent(userId,accountId,EventTypes.EVENT_VOLUME_UPLOAD,errorString);
      throw new CloudRuntimeException(errorString);
    }
    String volumeLocalPath=""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ cvAnswer.getVolumePath()+ ""String_Node_Str"";
    uploadJob.setUploadState(UploadVO.Status.COPY_COMPLETE);
    uploadJob.setLastUpdated(new Date());
    uploadJob.setInstallPath(volumeLocalPath);
    _uploadDao.update(uploadJob.getId(),uploadJob);
    if (extractMode == Mode.FTP_UPLOAD) {
      _uploadMonitor.extractVolume(uploadJob,sserver,volume,url,zoneId,volumeLocalPath,cmd.getStartEventId(),job.getId(),_asyncMgr);
      return uploadJob.getId();
    }
 else {
      _uploadMonitor.createVolumeDownloadURL(volumeId,volumeLocalPath,Type.VOLUME,zoneId,uploadJob.getId());
      EventUtils.saveEvent(userId,accountId,EventVO.LEVEL_INFO,cmd.getEventType(),""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ mode,null,cmd.getStartEventId());
      return uploadJob.getId();
    }
  }
}",0.9906634718664794
107413,"public synchronized void updateDatabase(UploadAnswer answer){
  if (answer.getErrorString().startsWith(""String_Node_Str"")) {
    answer.setErrorString(answer.getErrorString().concat(""String_Node_Str""));
  }
  resultObj.setResult_string(answer.getErrorString());
  resultObj.setState(answer.getUploadStatus().toString());
  resultObj.setUploadPercent(answer.getUploadPct());
  if (answer.getUploadStatus() == Status.UPLOAD_IN_PROGRESS) {
    asyncMgr.updateAsyncJobAttachment(asyncJobId,type.toString(),1L);
    asyncMgr.updateAsyncJobStatus(asyncJobId,AsyncJobResult.STATUS_IN_PROGRESS,resultObj);
  }
 else   if (answer.getUploadStatus() == Status.UPLOADED) {
    asyncMgr.completeAsyncJob(asyncJobId,AsyncJobResult.STATUS_SUCCEEDED,1,resultObj);
  }
 else {
    asyncMgr.completeAsyncJob(asyncJobId,AsyncJobResult.STATUS_FAILED,2,resultObj);
  }
  UploadVO updateBuilder=uploadDao.createForUpdate();
  updateBuilder.setUploadPercent(answer.getUploadPct());
  updateBuilder.setUploadState(answer.getUploadStatus());
  updateBuilder.setLastUpdated(new Date());
  updateBuilder.setErrorString(answer.getErrorString());
  updateBuilder.setJobId(answer.getJobId());
  uploadDao.update(getUploadId(),updateBuilder);
}","public synchronized void updateDatabase(UploadAnswer answer){
  if (answer.getErrorString().startsWith(""String_Node_Str"")) {
    answer.setErrorString(answer.getErrorString().concat(""String_Node_Str""));
  }
  resultObj.setResultString(answer.getErrorString());
  resultObj.setState(answer.getUploadStatus().toString());
  resultObj.setUploadPercent(answer.getUploadPct());
  if (answer.getUploadStatus() == Status.UPLOAD_IN_PROGRESS) {
    asyncMgr.updateAsyncJobAttachment(asyncJobId,type.toString(),1L);
    asyncMgr.updateAsyncJobStatus(asyncJobId,AsyncJobResult.STATUS_IN_PROGRESS,resultObj);
  }
 else   if (answer.getUploadStatus() == Status.UPLOADED) {
    resultObj.setResultString(""String_Node_Str"");
    asyncMgr.completeAsyncJob(asyncJobId,AsyncJobResult.STATUS_SUCCEEDED,1,resultObj);
  }
 else {
    asyncMgr.completeAsyncJob(asyncJobId,AsyncJobResult.STATUS_FAILED,2,resultObj);
  }
  UploadVO updateBuilder=uploadDao.createForUpdate();
  updateBuilder.setUploadPercent(answer.getUploadPct());
  updateBuilder.setUploadState(answer.getUploadStatus());
  updateBuilder.setLastUpdated(new Date());
  updateBuilder.setErrorString(answer.getErrorString());
  updateBuilder.setJobId(answer.getJobId());
  uploadDao.update(getUploadId(),updateBuilder);
}",0.9785858585858586
107414,"public void extractTemplate(VMTemplateVO template,String url,VMTemplateHostVO tmpltHostRef,Long dataCenterId,long eventId,long asyncJobId,AsyncJobManager asyncMgr);","public Long extractTemplate(VMTemplateVO template,String url,VMTemplateHostVO tmpltHostRef,Long dataCenterId,long eventId,long asyncJobId,AsyncJobManager asyncMgr);",0.9817073170731708
107415,"public String getEvent(Type type){
  if (type == Type.TEMPLATE)   return EventTypes.EVENT_TEMPLATE_UPLOAD;
  if (type == Type.ISO)   return EventTypes.EVENT_ISO_UPLOAD;
  if (type == Type.VOLUME)   return EventTypes.EVENT_VOLUME_UPLOAD;
  return null;
}","public String getEvent(Type type){
  if (type == Type.TEMPLATE)   return EventTypes.EVENT_TEMPLATE_EXTRACT;
  if (type == Type.ISO)   return EventTypes.EVENT_ISO_EXTRACT;
  if (type == Type.VOLUME)   return EventTypes.EVENT_VOLUME_EXTRACT;
  return null;
}",0.7072691552062869
107416,"@Override public void extractVolume(UploadVO uploadVolumeObj,HostVO sserver,VolumeVO volume,String url,Long dataCenterId,String installPath,long eventId,long asyncJobId,AsyncJobManager asyncMgr){
  uploadVolumeObj.setUploadState(Upload.Status.NOT_UPLOADED);
  _uploadDao.update(uploadVolumeObj.getId(),uploadVolumeObj);
  start();
  UploadCommand ucmd=new UploadCommand(url,volume.getId(),volume.getSize(),installPath,Type.VOLUME);
  UploadListener ul=new UploadListener(sserver,_timer,_uploadDao,uploadVolumeObj.getId(),this,ucmd,volume.getAccountId(),volume.getName(),Type.VOLUME,eventId,asyncJobId,asyncMgr);
  _listenerMap.put(uploadVolumeObj,ul);
  long result=send(sserver.getId(),ucmd,ul);
  if (result == -1) {
    s_logger.warn(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ sserver.getName()+ ""String_Node_Str""+ url);
    ul.setDisconnected();
    ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);
  }
}","@Override public void extractVolume(UploadVO uploadVolumeObj,HostVO sserver,VolumeVO volume,String url,Long dataCenterId,String installPath,long eventId,long asyncJobId,AsyncJobManager asyncMgr){
  uploadVolumeObj.setUploadState(Upload.Status.NOT_UPLOADED);
  _uploadDao.update(uploadVolumeObj.getId(),uploadVolumeObj);
  start();
  UploadCommand ucmd=new UploadCommand(url,volume.getId(),volume.getSize(),installPath,Type.VOLUME);
  UploadListener ul=new UploadListener(sserver,_timer,_uploadDao,uploadVolumeObj,this,ucmd,volume.getAccountId(),volume.getName(),Type.VOLUME,eventId,asyncJobId,asyncMgr);
  _listenerMap.put(uploadVolumeObj,ul);
  long result=send(sserver.getId(),ucmd,ul);
  if (result == -1) {
    s_logger.warn(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ sserver.getName()+ ""String_Node_Str""+ url);
    ul.setDisconnected();
    ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);
  }
}",0.9956616052060736
107417,"@Override public UploadVO createEntityDownloadURL(VMTemplateVO template,VMTemplateHostVO vmTemplateHost,Long dataCenterId,long eventId){
  List<HostVO> storageServers=_serverDao.listByTypeDataCenter(Host.Type.SecondaryStorage,dataCenterId);
  if (storageServers == null)   throw new CloudRuntimeException(""String_Node_Str"" + dataCenterId);
  Type type=(template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;
  List<UploadVO> extractURLList=_uploadDao.listByTypeUploadStatus(template.getId(),type,UploadVO.Status.DOWNLOAD_URL_CREATED);
  if (extractURLList.size() > 0)   return extractURLList.get(0);
  HostVO sserver=storageServers.get(0);
  UploadVO uploadTemplateObj=new UploadVO(sserver.getId(),template.getId(),new Date(),Status.DOWNLOAD_URL_NOT_CREATED,0,type,Mode.HTTP_DOWNLOAD);
  uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());
  _uploadDao.persist(uploadTemplateObj);
  CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(vmTemplateHost.getInstallPath());
  long result=send(sserver.getId(),cmd,null);
  if (result == -1) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<SecondaryStorageVmVO> ssVms=_secStorageVmDao.getSecStorageVmListInStates(dataCenterId,State.Running);
  if (ssVms.size() > 0) {
    SecondaryStorageVmVO ssVm=ssVms.get(0);
    if (ssVm.getPublicIpAddress() == null) {
      s_logger.warn(""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String extractURL=generateCopyUrl(ssVm.getPublicIpAddress(),vmTemplateHost.getInstallPath());
    UploadVO vo=_uploadDao.createForUpdate();
    vo.setLastUpdated(new Date());
    vo.setUploadUrl(extractURL);
    vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
    if (extractURL == null) {
      vo.setUploadState(Status.ERROR);
      vo.setErrorString(""String_Node_Str"");
    }
    _uploadDao.update(uploadTemplateObj.getId(),vo);
    return _uploadDao.findById(uploadTemplateObj.getId(),true);
  }
  throw new CloudRuntimeException(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
}","@Override public UploadVO createEntityDownloadURL(VMTemplateVO template,VMTemplateHostVO vmTemplateHost,Long dataCenterId,long eventId){
  String errorString=""String_Node_Str"";
  boolean success=false;
  List<HostVO> storageServers=_serverDao.listByTypeDataCenter(Host.Type.SecondaryStorage,dataCenterId);
  if (storageServers == null)   throw new CloudRuntimeException(""String_Node_Str"" + dataCenterId);
  Type type=(template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;
  List<UploadVO> extractURLList=_uploadDao.listByTypeUploadStatus(template.getId(),type,UploadVO.Status.DOWNLOAD_URL_CREATED);
  if (extractURLList.size() > 0)   return extractURLList.get(0);
  HostVO sserver=storageServers.get(0);
  UploadVO uploadTemplateObj=new UploadVO(sserver.getId(),template.getId(),new Date(),Status.DOWNLOAD_URL_NOT_CREATED,0,type,Mode.HTTP_DOWNLOAD);
  uploadTemplateObj.setInstallPath(vmTemplateHost.getInstallPath());
  _uploadDao.persist(uploadTemplateObj);
  try {
    CreateEntityDownloadURLCommand cmd=new CreateEntityDownloadURLCommand(vmTemplateHost.getInstallPath());
    long result=send(sserver.getId(),cmd,null);
    if (result == -1) {
      errorString=""String_Node_Str"" + type + ""String_Node_Str""+ template.getId();
      s_logger.error(errorString);
      throw new CloudRuntimeException(errorString);
    }
    List<SecondaryStorageVmVO> ssVms=_secStorageVmDao.getSecStorageVmListInStates(dataCenterId,State.Running);
    if (ssVms.size() > 0) {
      SecondaryStorageVmVO ssVm=ssVms.get(0);
      if (ssVm.getPublicIpAddress() == null) {
        errorString=""String_Node_Str"";
        s_logger.error(errorString);
        throw new CloudRuntimeException(errorString);
      }
      String extractURL=generateCopyUrl(ssVm.getPublicIpAddress(),vmTemplateHost.getInstallPath());
      UploadVO vo=_uploadDao.createForUpdate();
      vo.setLastUpdated(new Date());
      vo.setUploadUrl(extractURL);
      vo.setUploadState(Status.DOWNLOAD_URL_CREATED);
      _uploadDao.update(uploadTemplateObj.getId(),vo);
      success=true;
      return _uploadDao.findById(uploadTemplateObj.getId(),true);
    }
    errorString=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    throw new CloudRuntimeException(errorString);
  }
  finally {
    if (!success) {
      UploadVO uploadJob=_uploadDao.createForUpdate(uploadTemplateObj.getId());
      uploadJob.setLastUpdated(new Date());
      uploadJob.setErrorString(errorString);
      uploadJob.setUploadState(Status.ERROR);
      _uploadDao.update(uploadTemplateObj.getId(),uploadJob);
    }
  }
}",0.7680136839854608
107418,"@Override public void extractTemplate(VMTemplateVO template,String url,VMTemplateHostVO vmTemplateHost,Long dataCenterId,long eventId,long asyncJobId,AsyncJobManager asyncMgr){
  Type type=(template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;
  List<HostVO> storageServers=_serverDao.listByTypeDataCenter(Host.Type.SecondaryStorage,dataCenterId);
  HostVO sserver=storageServers.get(0);
  UploadVO uploadTemplateObj=new UploadVO(sserver.getId(),template.getId(),new Date(),Upload.Status.NOT_UPLOADED,type,url,Mode.FTP_UPLOAD);
  _uploadDao.persist(uploadTemplateObj);
  if (vmTemplateHost != null) {
    start();
    UploadCommand ucmd=new UploadCommand(template,url,vmTemplateHost);
    UploadListener ul=new UploadListener(sserver,_timer,_uploadDao,uploadTemplateObj.getId(),this,ucmd,template.getAccountId(),template.getName(),type,eventId,asyncJobId,asyncMgr);
    _listenerMap.put(uploadTemplateObj,ul);
    long result=send(sserver.getId(),ucmd,ul);
    if (result == -1) {
      s_logger.warn(""String_Node_Str"" + template.getUniqueName() + ""String_Node_Str""+ sserver.getName()+ ""String_Node_Str""+ url);
      ul.setDisconnected();
      ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);
    }
  }
}","@Override public Long extractTemplate(VMTemplateVO template,String url,VMTemplateHostVO vmTemplateHost,Long dataCenterId,long eventId,long asyncJobId,AsyncJobManager asyncMgr){
  Type type=(template.getFormat() == ImageFormat.ISO) ? Type.ISO : Type.TEMPLATE;
  List<HostVO> storageServers=_serverDao.listByTypeDataCenter(Host.Type.SecondaryStorage,dataCenterId);
  HostVO sserver=storageServers.get(0);
  UploadVO uploadTemplateObj=new UploadVO(sserver.getId(),template.getId(),new Date(),Upload.Status.NOT_UPLOADED,type,url,Mode.FTP_UPLOAD);
  _uploadDao.persist(uploadTemplateObj);
  if (vmTemplateHost != null) {
    start();
    UploadCommand ucmd=new UploadCommand(template,url,vmTemplateHost);
    UploadListener ul=new UploadListener(sserver,_timer,_uploadDao,uploadTemplateObj,this,ucmd,template.getAccountId(),template.getName(),type,eventId,asyncJobId,asyncMgr);
    _listenerMap.put(uploadTemplateObj,ul);
    long result=send(sserver.getId(),ucmd,ul);
    if (result == -1) {
      s_logger.warn(""String_Node_Str"" + template.getUniqueName() + ""String_Node_Str""+ sserver.getName()+ ""String_Node_Str""+ url);
      ul.setDisconnected();
      ul.scheduleStatusCheck(RequestType.GET_OR_RESTART);
    }
    return uploadTemplateObj.getId();
  }
  return null;
}",0.972300281011642
107419,Long extract(ExtractTemplateCmd cmd);,"/** 
 * Extracts a Template
 * @param cmd - the command specifying the mode and id of the template
 * @return extractId.
 * @throws InvalidParameterValueException , InternalErrorException, PermissionDeniedException
 */
Long extract(ExtractTemplateCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, InternalErrorException ;",0.1932114882506527
107420,"@Override public DataCenterVO createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  String domain=cmd.getDomain();
  Long domainId=cmd.getDomainId();
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domain != null ? domain : domainVO.getName(),domainId);
}","@Override public DataCenterVO createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  String domain=cmd.getDomain();
  Long domainId=cmd.getDomainId();
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId);
}",0.96524064171123
107421,"public static String toSerializedStringOld(Object result){
  if (result != null) {
    Class<?> clz=result.getClass();
    Gson gson=GsonHelper.getBuilder().create();
    if (result instanceof ResponseObject) {
      return clz.getName() + ""String_Node_Str"" + ((ResponseObject)result).getResponseName()+ ""String_Node_Str""+ gson.toJson(result);
    }
 else {
      return clz.getName() + ""String_Node_Str"" + gson.toJson(result);
    }
  }
  return null;
}","public static String toSerializedStringOld(Object result){
  if (result != null) {
    Class<?> clz=result.getClass();
    Gson gson=GsonHelper.getBuilder().create();
    if (result instanceof ResponseObject) {
      return clz.getName() + token + ((ResponseObject)result).getResponseName()+ token+ gson.toJson(result);
    }
 else {
      return clz.getName() + token + gson.toJson(result);
    }
  }
  return null;
}",0.7362385321100917
107422,"public static Object fromSerializedString(String result){
  try {
    if (result != null && !result.isEmpty()) {
      String[] serializedParts=result.split(""String_Node_Str"");
      if (serializedParts.length < 2) {
        return null;
      }
      String clzName=serializedParts[0];
      String nameField=null;
      String content=null;
      if (serializedParts.length == 2) {
        content=serializedParts[1];
      }
 else {
        nameField=serializedParts[1];
        content=serializedParts[2];
      }
      Class<?> clz;
      try {
        clz=Class.forName(clzName);
      }
 catch (      ClassNotFoundException e) {
        return null;
      }
      Gson gson=GsonHelper.getBuilder().create();
      Object obj=gson.fromJson(content,clz);
      if (nameField != null) {
        ((ResponseObject)obj).setResponseName(nameField);
      }
      return obj;
    }
    return null;
  }
 catch (  RuntimeException e) {
    s_logger.error(""String_Node_Str"" + result);
    throw e;
  }
}","public static Object fromSerializedString(String result){
  try {
    if (result != null && !result.isEmpty()) {
      String[] serializedParts=result.split(token);
      if (serializedParts.length < 2) {
        return null;
      }
      String clzName=serializedParts[0];
      String nameField=null;
      String content=null;
      if (serializedParts.length == 2) {
        content=serializedParts[1];
      }
 else {
        nameField=serializedParts[1];
        int index=result.indexOf(token + nameField + token);
        content=result.substring(index + nameField.length() + 2);
      }
      Class<?> clz;
      try {
        clz=Class.forName(clzName);
      }
 catch (      ClassNotFoundException e) {
        return null;
      }
      Gson gson=GsonHelper.getBuilder().create();
      Object obj=gson.fromJson(content,clz);
      if (nameField != null) {
        ((ResponseObject)obj).setResponseName(nameField);
      }
      return obj;
    }
    return null;
  }
 catch (  RuntimeException e) {
    s_logger.error(""String_Node_Str"" + result);
    throw e;
  }
}",0.9215969215969216
107423,"@Override public String getEventDescription(){
  User user=ApiDBUtils.findUserById(getId());
  return ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getId()+ ""String_Node_Str""+ user.getAccountId();
}","@Override public String getEventDescription(){
  User user=ApiDBUtils.findUserById(getId());
  return (user != null ? (""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getId()+ ""String_Node_Str""+ user.getAccountId()) : ""String_Node_Str"");
}",0.9175475687103594
107424,"@SuppressWarnings(""String_Node_Str"") public SuccessResponse getResponse(){
  SuccessResponse response=new SuccessResponse();
  DiskOfferingVO responseObject=(DiskOfferingVO)getResponseObject();
  if (responseObject != null) {
    response.setSuccess(Boolean.TRUE);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public DiskOfferingResponse getResponse(){
  DiskOfferingVO offering=(DiskOfferingVO)getResponseObject();
  DiskOfferingResponse response=new DiskOfferingResponse();
  response.setId(offering.getId());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setCreated(offering.getCreated());
  response.setDiskSize(offering.getDiskSize());
  if (offering.getDomainId() != null) {
    response.setDomain(ApiDBUtils.findDomainById(offering.getDomainId()).getName());
    response.setDomainId(offering.getDomainId());
  }
  response.setMirrored(offering.isMirrored());
  response.setTags(offering.getTags());
  response.setResponseName(getName());
  return response;
}",0.2019704433497537
107425,"@Override public DiskOfferingVO updateDiskOffering(UpdateDiskOfferingCmd cmd) throws InvalidParameterValueException {
  Long diskOfferingId=cmd.getId();
  String name=cmd.getName();
  String displayText=cmd.getDisplayText();
  String tags=cmd.getTags();
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
  if (diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
  }
  boolean updateNeeded=(name != null || displayText != null || tags != null);
  if (!updateNeeded) {
    return _diskOfferingDao.findById(diskOfferingId);
  }
  diskOffering=_diskOfferingDao.createForUpdate(diskOfferingId);
  if (name != null) {
    diskOffering.setName(name);
  }
  if (displayText != null) {
    diskOffering.setDisplayText(displayText);
  }
  if (tags != null) {
    if (tags.trim().isEmpty()) {
      diskOffering.setTagsArray(csvTagsToList(null));
    }
 else {
      diskOffering.setTagsArray(csvTagsToList(tags));
    }
  }
  if (_diskOfferingDao.update(diskOfferingId,diskOffering)) {
    saveConfigurationEvent(UserContext.current().getUserId(),null,EventTypes.EVENT_DISK_OFFERING_EDIT,""String_Node_Str"" + diskOffering.getName() + ""String_Node_Str"",""String_Node_Str"" + diskOffering.getId(),""String_Node_Str"" + diskOffering.getName(),""String_Node_Str"" + diskOffering.getDisplayText(),""String_Node_Str"" + diskOffering.getDiskSize(),""String_Node_Str"" + diskOffering.getTags());
    return _diskOfferingDao.findById(diskOfferingId);
  }
 else {
    return null;
  }
}","@Override public DiskOfferingVO updateDiskOffering(UpdateDiskOfferingCmd cmd) throws InvalidParameterValueException {
  Long diskOfferingId=cmd.getId();
  String name=cmd.getDiskOfferingName();
  String displayText=cmd.getDisplayText();
  String tags=cmd.getTags();
  DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
  if (diskOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
  }
  boolean updateNeeded=(name != null || displayText != null || tags != null);
  if (!updateNeeded) {
    return _diskOfferingDao.findById(diskOfferingId);
  }
  diskOffering=_diskOfferingDao.createForUpdate(diskOfferingId);
  if (name != null) {
    diskOffering.setName(name);
  }
  if (displayText != null) {
    diskOffering.setDisplayText(displayText);
  }
  if (tags != null) {
    if (tags.trim().isEmpty()) {
      diskOffering.setTagsArray(csvTagsToList(null));
    }
 else {
      diskOffering.setTagsArray(csvTagsToList(tags));
    }
  }
  if (_diskOfferingDao.update(diskOfferingId,diskOffering)) {
    saveConfigurationEvent(UserContext.current().getUserId(),null,EventTypes.EVENT_DISK_OFFERING_EDIT,""String_Node_Str"" + diskOffering.getName() + ""String_Node_Str"",""String_Node_Str"" + diskOffering.getId(),""String_Node_Str"" + diskOffering.getName(),""String_Node_Str"" + diskOffering.getDisplayText(),""String_Node_Str"" + diskOffering.getDiskSize(),""String_Node_Str"" + diskOffering.getTags());
    return _diskOfferingDao.findById(diskOfferingId);
  }
 else {
    return null;
  }
}",0.9960988296488946
107426,"@Override public List<DomainRouterVO> listByVlanDbId(Long vlanDbId){
  SearchCriteria<DomainRouterVO> sc=VlanDbIdSearch.create();
  sc.setParameters(""String_Node_Str"",vlanDbId);
  return listActiveBy(sc);
}","@Override public List<DomainRouterVO> listByVlanDbId(Long vlanDbId){
  SearchCriteria<DomainRouterVO> sc=VlanDbIdSearch.create();
  sc.setParameters(""String_Node_Str"",vlanDbId);
  return listBy(sc);
}",0.9852216748768472
107427,"@Override @DB public boolean completeMigration(UserVmVO vm,HostVO host) throws AgentUnavailableException, OperationTimedoutException {
  CheckVirtualMachineCommand cvm=new CheckVirtualMachineCommand(vm.getInstanceName());
  CheckVirtualMachineAnswer answer=(CheckVirtualMachineAnswer)_agentMgr.send(host.getId(),cvm);
  if (!answer.getResult()) {
    s_logger.debug(""String_Node_Str"" + vm.toString());
    _vmDao.updateIf(vm,Event.AgentReportStopped,null);
    return false;
  }
  State state=answer.getState();
  if (state == State.Stopped) {
    s_logger.warn(""String_Node_Str"" + host.toString());
    _vmDao.updateIf(vm,Event.AgentReportStopped,null);
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + answer.getVncPort() + ""String_Node_Str""+ host.getId());
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    _vmDao.updateIf(vm,Event.OperationSucceeded,host.getId());
    txn.commit();
    _networkGroupManager.handleVmStateTransition(vm,State.Running);
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + vm.toString());
    return false;
  }
}","@Override @DB public boolean completeMigration(UserVmVO vm,HostVO host) throws AgentUnavailableException, OperationTimedoutException {
  CheckVirtualMachineCommand cvm=new CheckVirtualMachineCommand(vm.getInstanceName());
  CheckVirtualMachineAnswer answer=(CheckVirtualMachineAnswer)_agentMgr.send(host.getId(),cvm);
  if (!answer.getResult()) {
    s_logger.debug(""String_Node_Str"" + vm.toString());
    _vmDao.updateIf(vm,Event.AgentReportStopped,null);
    return false;
  }
  State state=answer.getState();
  if (state == State.Stopped) {
    s_logger.warn(""String_Node_Str"" + host.toString());
    _vmDao.updateIf(vm,Event.AgentReportStopped,null);
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + answer.getVncPort() + ""String_Node_Str""+ host.getId());
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    _vmDao.updateIf(vm,Event.OperationSucceeded,host.getId());
    txn.commit();
    _networkGroupMgr.handleVmStateTransition(vm,State.Running);
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + vm.toString());
    return false;
  }
}",0.997391304347826
107428,"public UpdateCertificateCommand(String certificate){
  this.certificate=certificate;
}","public UpdateCertificateCommand(String certificate,boolean forNewProxy){
  this.certificate=certificate;
  this.forNewProxy=forNewProxy;
}",0.7678571428571429
107429,"@Override public boolean applyCustomCertToNewProxy(StartupProxyCommand cmd){
  CertificateVO cert=_certDao.listAll().get(0);
  if (cert.getUpdated().equals(""String_Node_Str"")) {
    String certStr=cert.getCertificate();
    long proxyVmId=(cmd).getProxyVmId();
    ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(proxyVmId);
    if (consoleProxy != null) {
      HostVO consoleProxyHost=_hostDao.findConsoleProxyHost(consoleProxy.getName(),Type.ConsoleProxy);
      UpdateCertificateCommand certCmd=new UpdateCertificateCommand(certStr);
      try {
        Answer updateCertAns=_agentMgr.send(consoleProxyHost.getId(),certCmd);
        if (updateCertAns.getResult() == true) {
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_REBOOT,""String_Node_Str"" + consoleProxy.getId());
          rebootProxy(consoleProxy.getId(),eventId);
          s_logger.info(""String_Node_Str"" + cmd.getProxyVmId());
          return true;
        }
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + cmd.getProxyVmId(),e);
        return false;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + cmd.getProxyVmId(),e);
        return false;
      }
    }
  }
 else {
    return false;
  }
  return false;
}","@Override public boolean applyCustomCertToNewProxy(StartupProxyCommand cmd){
  CertificateVO cert=_certDao.listAll().get(0);
  if (cert.getUpdated().equals(""String_Node_Str"")) {
    String certStr=cert.getCertificate();
    long proxyVmId=(cmd).getProxyVmId();
    ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(proxyVmId);
    if (consoleProxy != null) {
      HostVO consoleProxyHost=_hostDao.findConsoleProxyHost(consoleProxy.getName(),Type.ConsoleProxy);
      UpdateCertificateCommand certCmd=new UpdateCertificateCommand(certStr,true);
      try {
        Answer updateCertAns=_agentMgr.send(consoleProxyHost.getId(),certCmd);
        if (updateCertAns.getResult() == true) {
          long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_REBOOT,""String_Node_Str"" + consoleProxy.getId());
          rebootProxy(consoleProxy.getId(),eventId);
          s_logger.info(""String_Node_Str"" + cmd.getProxyVmId());
          return true;
        }
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + cmd.getProxyVmId(),e);
        return false;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + cmd.getProxyVmId(),e);
        return false;
      }
    }
  }
 else {
    return false;
  }
  return false;
}",0.9981336319522208
107430,"@Override @DB public String uploadCertificate(UploadCustomCertificateCmd cmd) throws ServerApiException {
  try {
    CertificateVO cert=_certDao.listAll().get(0);
    if (cert.getUpdated().equals(""String_Node_Str"")) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"");
    }
    String certificatePath=cmd.getPath();
    CertificateVO lockedCert=_certDao.acquire(cert.getId());
    Long certVOId=_certDao.persistCustomCertToDb(certificatePath,lockedCert);
    if (certVOId != null && certVOId != 0) {
      List<ConsoleProxyVO> cpList=_consoleProxyDao.listAll();
      if (cpList.size() == 0) {
        throw new ServerApiException(BaseCmd.CUSTOM_CERT_UPDATE_ERROR,""String_Node_Str"");
      }
      List<HostVO> cpHosts=_hostDao.listByType(com.cloud.host.Host.Type.ConsoleProxy);
      if (cpHosts.size() == 0) {
        throw new ServerApiException(BaseCmd.CUSTOM_CERT_UPDATE_ERROR,""String_Node_Str"");
      }
      Map<String,Long> hostNameToHostIdMap=new HashMap<String,Long>();
      List<Long> updatedCpIdList=new ArrayList<Long>();
      for (      HostVO cpHost : cpHosts) {
        hostNameToHostIdMap.put(cpHost.getName(),cpHost.getId());
      }
      for (      ConsoleProxyVO cp : cpList) {
        Long cpHostId=hostNameToHostIdMap.get(cp.getName());
        UpdateCertificateCommand certCmd=new UpdateCertificateCommand(_certDao.findById(certVOId).getCertificate());
        try {
          Answer updateCertAns=_agentMgr.send(cpHostId,certCmd);
          if (updateCertAns.getResult() == true) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_REBOOT,""String_Node_Str"" + cp.getId());
            _consoleProxyMgr.rebootProxy(cp.getId(),eventId);
            if (s_logger.isDebugEnabled())             s_logger.debug(""String_Node_Str"" + cp.getId() + ""String_Node_Str""+ cpHostId);
            updatedCpIdList.add(cp.getId());
          }
        }
 catch (        AgentUnavailableException e) {
          s_logger.warn(""String_Node_Str"" + cp.getId() + ""String_Node_Str""+ cpHostId,e);
        }
catch (        OperationTimedoutException e) {
          s_logger.warn(""String_Node_Str"" + cp.getId() + ""String_Node_Str""+ cpHostId,e);
        }
      }
      _certDao.release(lockedCert.getId());
      return (""String_Node_Str"" + updatedCpIdList.size() + ""String_Node_Str""+ cpList.size()+ ""String_Node_Str"");
    }
 else {
      return null;
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"");
  }
  return null;
}","@Override @DB public String uploadCertificate(UploadCustomCertificateCmd cmd) throws ServerApiException {
  try {
    CertificateVO cert=_certDao.listAll().get(0);
    if (cert.getUpdated().equals(""String_Node_Str"")) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"");
    }
    String certificatePath=cmd.getPath();
    CertificateVO lockedCert=_certDao.acquire(cert.getId());
    Long certVOId=_certDao.persistCustomCertToDb(certificatePath,lockedCert);
    if (certVOId != null && certVOId != 0) {
      List<ConsoleProxyVO> cpList=_consoleProxyDao.listAll();
      if (cpList.size() == 0) {
        throw new ServerApiException(BaseCmd.CUSTOM_CERT_UPDATE_ERROR,""String_Node_Str"");
      }
      List<HostVO> cpHosts=_hostDao.listByType(com.cloud.host.Host.Type.ConsoleProxy);
      if (cpHosts.size() == 0) {
        throw new ServerApiException(BaseCmd.CUSTOM_CERT_UPDATE_ERROR,""String_Node_Str"");
      }
      Map<String,Long> hostNameToHostIdMap=new HashMap<String,Long>();
      List<Long> updatedCpIdList=new ArrayList<Long>();
      for (      HostVO cpHost : cpHosts) {
        hostNameToHostIdMap.put(cpHost.getName(),cpHost.getId());
      }
      for (      ConsoleProxyVO cp : cpList) {
        Long cpHostId=hostNameToHostIdMap.get(cp.getName());
        UpdateCertificateCommand certCmd=new UpdateCertificateCommand(_certDao.findById(certVOId).getCertificate(),false);
        try {
          Answer updateCertAns=_agentMgr.send(cpHostId,certCmd);
          if (updateCertAns.getResult() == true) {
            long eventId=saveScheduledEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_PROXY_REBOOT,""String_Node_Str"" + cp.getId());
            _consoleProxyMgr.rebootProxy(cp.getId(),eventId);
            if (s_logger.isDebugEnabled())             s_logger.debug(""String_Node_Str"" + cp.getId() + ""String_Node_Str""+ cpHostId);
            updatedCpIdList.add(cp.getId());
          }
        }
 catch (        AgentUnavailableException e) {
          s_logger.warn(""String_Node_Str"" + cp.getId() + ""String_Node_Str""+ cpHostId,e);
        }
catch (        OperationTimedoutException e) {
          s_logger.warn(""String_Node_Str"" + cp.getId() + ""String_Node_Str""+ cpHostId,e);
        }
      }
      _certDao.release(lockedCert.getId());
      return (""String_Node_Str"" + updatedCpIdList.size() + ""String_Node_Str""+ cpList.size()+ ""String_Node_Str"");
    }
 else {
      return null;
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"");
  }
  return null;
}",0.9988584474885844
107431,"@Override public void markForCleanup(long accountId){
  AccountVO account=findById(accountId);
  if (!account.getNeedsCleanup()) {
    account.setNeedsCleanup(true);
    update(accountId,account);
  }
}","@Override public void markForCleanup(long accountId){
  AccountVO account=findByIdIncludingRemoved(accountId);
  if (!account.getNeedsCleanup()) {
    account.setNeedsCleanup(true);
    update(accountId,account);
  }
}",0.961904761904762
107432,"@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<ResourceLimitResponse> getResponse(){
  List<ResourceLimitVO> limits=(List<ResourceLimitVO>)getResponseObject();
  ListResponse<ResourceLimitResponse> response=new ListResponse<ResourceLimitResponse>();
  List<ResourceLimitResponse> limitResponses=new ArrayList<ResourceLimitResponse>();
  for (  ResourceLimitVO limit : limits) {
    ResourceLimitResponse resourceLimitResponse=new ResourceLimitResponse();
    if (limit.getDomainId() != null) {
      resourceLimitResponse.setDomainId(limit.getDomainId());
      resourceLimitResponse.setDomainName(ApiDBUtils.findDomainById(limit.getDomainId()).getName());
    }
    if (limit.getAccountId() != null) {
      Account accountTemp=ApiDBUtils.findAccountById(limit.getAccountId());
      if (accountTemp != null) {
        resourceLimitResponse.setAccountName(accountTemp.getAccountName());
        resourceLimitResponse.setDomainId(accountTemp.getDomainId());
        resourceLimitResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
      }
    }
    resourceLimitResponse.setResourceType(limit.getType().ordinal());
    resourceLimitResponse.setMax(limit.getMax());
    resourceLimitResponse.setResponseName(""String_Node_Str"");
    limitResponses.add(resourceLimitResponse);
  }
  response.setResponses(limitResponses);
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<ResourceLimitResponse> getResponse(){
  List<ResourceLimitVO> limits=(List<ResourceLimitVO>)getResponseObject();
  ListResponse<ResourceLimitResponse> response=new ListResponse<ResourceLimitResponse>();
  List<ResourceLimitResponse> limitResponses=new ArrayList<ResourceLimitResponse>();
  for (  ResourceLimitVO limit : limits) {
    ResourceLimitResponse resourceLimitResponse=new ResourceLimitResponse();
    if (limit.getDomainId() != null) {
      resourceLimitResponse.setDomainId(limit.getDomainId());
      resourceLimitResponse.setDomainName(ApiDBUtils.findDomainById(limit.getDomainId()).getName());
    }
    if (limit.getAccountId() != null) {
      Account accountTemp=ApiDBUtils.findAccountById(limit.getAccountId());
      if (accountTemp != null) {
        resourceLimitResponse.setAccountName(accountTemp.getAccountName());
        resourceLimitResponse.setDomainId(accountTemp.getDomainId());
        resourceLimitResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
      }
    }
    resourceLimitResponse.setResourceType(Integer.valueOf(limit.getType().ordinal()).toString());
    resourceLimitResponse.setMax(limit.getMax());
    resourceLimitResponse.setResponseName(""String_Node_Str"");
    limitResponses.add(resourceLimitResponse);
  }
  response.setResponses(limitResponses);
  response.setResponseName(getName());
  return response;
}",0.9903314917127072
107433,"@Override @SuppressWarnings(""String_Node_Str"") public ResourceLimitResponse getResponse(){
  ResourceLimitVO limit=(ResourceLimitVO)getResponseObject();
  ResourceLimitResponse response=new ResourceLimitResponse();
  if (limit.getDomainId() != null) {
    response.setDomainId(limit.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(limit.getDomainId()).getName());
  }
  if (limit.getAccountId() != null) {
    Account accountTemp=ApiDBUtils.findAccountById(limit.getAccountId());
    if (accountTemp != null) {
      response.setAccountName(accountTemp.getAccountName());
      response.setDomainId(accountTemp.getDomainId());
      response.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
    }
  }
  response.setResourceType(limit.getType().ordinal());
  response.setMax(limit.getMax());
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ResourceLimitResponse getResponse(){
  ResourceLimitVO limit=(ResourceLimitVO)getResponseObject();
  ResourceLimitResponse response=new ResourceLimitResponse();
  if (limit.getDomainId() != null) {
    response.setDomainId(limit.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(limit.getDomainId()).getName());
  }
  if (limit.getAccountId() != null) {
    Account accountTemp=ApiDBUtils.findAccountById(limit.getAccountId());
    if (accountTemp != null) {
      response.setAccountName(accountTemp.getAccountName());
      response.setDomainId(accountTemp.getDomainId());
      response.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
    }
  }
  response.setResourceType(Integer.valueOf(limit.getType().ordinal()).toString());
  response.setMax(limit.getMax());
  response.setResponseName(getName());
  return response;
}",0.9846994535519126
107434,"public Integer getResourceType(){
  return resourceType;
}","public String getResourceType(){
  return resourceType;
}",0.9217391304347826
107435,"public void setResourceType(Integer resourceType){
  this.resourceType=resourceType;
}","public void setResourceType(String resourceType){
  this.resourceType=resourceType;
}",0.9473684210526316
107436,"@Override public ResourceLimitVO updateResourceLimit(UpdateResourceLimitCmd cmd) throws InvalidParameterValueException {
  Account account=(Account)UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  Long max=cmd.getMax();
  Integer type=cmd.getResourceType();
  Long accountId=null;
  if (max == null) {
    max=new Long(-1);
  }
 else   if (max < -1) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  ResourceType resourceType;
  try {
    resourceType=ResourceType.values()[type];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + ((account.getAccountName() == null) ? ""String_Node_Str"" : ""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"") + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
      }
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      domainId=DomainVO.ROOT_DOMAIN;
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      if ((domainId != null) && (account.getAccountName() == null) && domainId.equals(account.getDomainId())) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + ((account.getAccountName() == null) ? ""String_Node_Str"" : ""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"") + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
      }
      Criteria c=new Criteria();
      c.addCriteria(Criteria.DOMAINID,DomainVO.ROOT_DOMAIN);
      c.addCriteria(Criteria.TYPE,resourceType);
      List<ResourceLimitVO> currentRootDomainLimits=searchForLimits(c);
      ResourceLimitVO currentRootDomainLimit=(currentRootDomainLimits.size() == 0) ? null : currentRootDomainLimits.get(0);
      if (currentRootDomainLimit != null) {
        long currentRootDomainMax=currentRootDomainLimits.get(0).getMax();
        if ((max == -1 && currentRootDomainMax != -1) || max > currentRootDomainMax) {
          throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + resourceType + ""String_Node_Str""+ currentRootDomainMax+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (domainId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
 else   if (account != null) {
    if (account.getAccountName() != null) {
      Account userAccount=_accountDao.findActiveAccount(account.getAccountName(),domainId);
      if (userAccount == null) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ domainId);
      }
      accountId=userAccount.getId();
      domainId=userAccount.getDomainId();
    }
  }
  if (accountId != null)   domainId=null;
  if ((domainId == null) && (accountId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVO accountHandle=_accountDao.findById(accountId);
    if (accountHandle == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (accountHandle.getRemoved() != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_ADMIN || accountHandle.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DomainVO domain=_domainDao.findById(account.getDomainId());
    long parentMaximum=findCorrectResourceLimit(domain,resourceType);
    if ((parentMaximum >= 0) && ((max.longValue() == -1) || (max.longValue() > parentMaximum))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ type+ ""String_Node_Str""+ parentMaximum);
    }
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (domain.getRemoved() != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimit(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ type+ ""String_Node_Str""+ parentMaximum);
      }
    }
  }
  if (type == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Filter searchFilter=new Filter(ResourceLimitVO.class,null,false,null,null);
  SearchCriteria<ResourceLimitVO> sc=_resourceLimitDao.createSearchCriteria();
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (accountId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  List<ResourceLimitVO> limits=_resourceLimitDao.search(sc,searchFilter);
  if (limits.size() == 1) {
    ResourceLimitVO limit=limits.get(0);
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(domainId,accountId,resourceType,max));
  }
}","@Override public ResourceLimitVO updateResourceLimit(UpdateResourceLimitCmd cmd) throws InvalidParameterValueException {
  Account account=(Account)UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long max=cmd.getMax();
  Integer type=cmd.getResourceType();
  Long accountId=null;
  if (max == null) {
    max=new Long(-1);
  }
 else   if (max < -1) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  ResourceType resourceType;
  try {
    resourceType=ResourceType.values()[type];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (account != null) {
    if (domainId != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + ((account.getAccountName() == null) ? ""String_Node_Str"" : ""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"") + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
      }
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      domainId=DomainVO.ROOT_DOMAIN;
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      if ((domainId != null) && (accountName == null) && domainId.equals(account.getDomainId())) {
        throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      Criteria c=new Criteria();
      c.addCriteria(Criteria.DOMAINID,DomainVO.ROOT_DOMAIN);
      c.addCriteria(Criteria.TYPE,resourceType);
      List<ResourceLimitVO> currentRootDomainLimits=searchForLimits(c);
      ResourceLimitVO currentRootDomainLimit=(currentRootDomainLimits.size() == 0) ? null : currentRootDomainLimits.get(0);
      if (currentRootDomainLimit != null) {
        long currentRootDomainMax=currentRootDomainLimits.get(0).getMax();
        if ((max == -1 && currentRootDomainMax != -1) || max > currentRootDomainMax) {
          throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + resourceType + ""String_Node_Str""+ currentRootDomainMax+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (domainId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
 else   if (accountName != null) {
    Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
    if (userAccount == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ domainId);
    }
    accountId=userAccount.getId();
  }
  if (accountId != null)   domainId=null;
  if ((domainId == null) && (accountId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVO accountHandle=_accountDao.findById(accountId);
    if (accountHandle == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (accountHandle.getRemoved() != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (account.getType() == Account.ACCOUNT_TYPE_ADMIN || accountHandle.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DomainVO domain=_domainDao.findById(account.getDomainId());
    long parentMaximum=findCorrectResourceLimit(domain,resourceType);
    if ((parentMaximum >= 0) && ((max.longValue() == -1) || (max.longValue() > parentMaximum))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ type+ ""String_Node_Str""+ parentMaximum);
    }
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (domain.getRemoved() != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimit(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ type+ ""String_Node_Str""+ parentMaximum);
      }
    }
  }
  if (type == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Filter searchFilter=new Filter(ResourceLimitVO.class,null,false,null,null);
  SearchCriteria<ResourceLimitVO> sc=_resourceLimitDao.createSearchCriteria();
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (accountId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  List<ResourceLimitVO> limits=_resourceLimitDao.search(sc,searchFilter);
  if (limits.size() == 1) {
    ResourceLimitVO limit=limits.get(0);
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(domainId,accountId,resourceType,max));
  }
}",0.9534657836644592
107437,"@DB(txn=false) protected void addJoins(StringBuilder str,Collection<JoinBuilder<SearchCriteria<?>>> joins){
  int fromIndex=str.lastIndexOf(""String_Node_Str"");
  if (fromIndex == -1) {
    fromIndex=str.length();
    str.append(""String_Node_Str"");
  }
 else {
    str.append(""String_Node_Str"");
  }
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    StringBuilder onClause=new StringBuilder();
    onClause.append(""String_Node_Str"").append(join.getType().getName()).append(""String_Node_Str"").append(join.getSecondAttribute().table).append(""String_Node_Str"").append(join.getFirstAttribute().table).append(""String_Node_Str"").append(join.getFirstAttribute().columnName).append(""String_Node_Str"").append(join.getSecondAttribute().table).append(""String_Node_Str"").append(join.getSecondAttribute().columnName).append(""String_Node_Str"");
    str.insert(fromIndex,onClause);
    str.append(""String_Node_Str"").append(join.getT().getWhereClause()).append(""String_Node_Str"");
    fromIndex+=onClause.length();
  }
  str.delete(str.length() - 4,str.length());
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    if (join.getT().getJoins() != null) {
      addJoins(str,join.getT().getJoins());
    }
  }
}","@DB(txn=false) protected void addJoins(StringBuilder str,Collection<JoinBuilder<SearchCriteria<?>>> joins){
  int fromIndex=str.lastIndexOf(""String_Node_Str"");
  if (fromIndex == -1) {
    fromIndex=str.length();
    str.append(""String_Node_Str"");
  }
 else {
    str.append(""String_Node_Str"");
  }
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    StringBuilder onClause=new StringBuilder();
    onClause.append(""String_Node_Str"").append(join.getType().getName()).append(""String_Node_Str"").append(join.getSecondAttribute().table).append(""String_Node_Str"").append(join.getFirstAttribute().table).append(""String_Node_Str"").append(join.getFirstAttribute().columnName).append(""String_Node_Str"").append(join.getSecondAttribute().table).append(""String_Node_Str"").append(join.getSecondAttribute().columnName).append(""String_Node_Str"");
    str.insert(fromIndex,onClause);
    String whereClause=join.getT().getWhereClause();
    if ((whereClause != null) && !""String_Node_Str"".equals(whereClause)) {
      str.append(""String_Node_Str"").append(whereClause).append(""String_Node_Str"");
    }
    fromIndex+=onClause.length();
  }
  str.delete(str.length() - 4,str.length());
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    if (join.getT().getJoins() != null) {
      addJoins(str,join.getT().getJoins());
    }
  }
}",0.9027176053564396
107438,"@Override @SuppressWarnings(""String_Node_Str"") @DB public <M>List<M> searchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      for (      JoinBuilder<SearchCriteria<?>> join : joins) {
        for (        final Pair<Attribute,Object> value : join.getT().getValues()) {
          prepareAttribute(++i,pstmt,value.first(),value.second());
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + pstmt.toString());
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") @DB public <M>List<M> searchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}",0.9147101102060372
107439,"@DB(txn=false) protected int addJoinAttributes(int count,PreparedStatement pstmt,List<Ternary<SearchCriteria<?>,Attribute,Attribute>> joins) throws SQLException {
  for (  Ternary<SearchCriteria<?>,Attribute,Attribute> join : joins) {
    for (    final Pair<Attribute,Object> value : join.first().getValues()) {
      prepareAttribute(++count,pstmt,value.first(),value.second());
    }
  }
  for (  Ternary<SearchCriteria<?>,Attribute,Attribute> join : joins) {
    if (join.first().getJoins() != null) {
      count=addJoinAttributes(count,pstmt,joins);
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + pstmt.toString());
  }
  return count;
}","@DB(txn=false) protected int addJoinAttributes(int count,PreparedStatement pstmt,Collection<JoinBuilder<SearchCriteria<?>>> joins) throws SQLException {
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    for (    final Pair<Attribute,Object> value : join.getT().getValues()) {
      prepareAttribute(++count,pstmt,value.first(),value.second());
    }
  }
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    if (join.getT().getJoins() != null) {
      count=addJoinAttributes(count,pstmt,join.getT().getJoins());
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + pstmt.toString());
  }
  return count;
}",0.8747186796699175
107440,"@Override public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=(Account)UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded((Account)targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  if (cmd.getSnapshotId() == null) {
    Long zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Long diskOfferingId=cmd.getDiskOfferingId();
    Long size=cmd.getSize();
    if ((diskOfferingId == null) && (size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if ((diskOfferingId == null) && (size != null)) {
      boolean ok=validateCustomVolumeSizeRange(size);
      if (!ok) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size);
      }
      List<DiskOfferingVO> privateTemplateList=_diskOfferingDao.findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
 else {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
      if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setMirrorState(MirrorState.NOT_MIRRORED);
  volume.setDiskOfferingId(cmd.getDiskOfferingId());
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  return volume;
}","@Override public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=(Account)UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded((Account)targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if ((diskOfferingId == null) && (size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if ((diskOfferingId == null) && (size != null)) {
      boolean ok=validateCustomVolumeSizeRange(size);
      if (!ok) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size);
      }
      List<DiskOfferingVO> privateTemplateList=_diskOfferingDao.findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
 else {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
      if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      size=diskOffering.getDiskSize();
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setMirrorState(MirrorState.NOT_MIRRORED);
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  return volume;
}",0.9483577991340164
107441,"@Override @SuppressWarnings(""String_Node_Str"") public UserVmResponse getResponse(){
  UserVm userVm=(UserVm)getResponseObject();
  UserVmResponse response=new UserVmResponse();
  response.setId(userVm.getId());
  response.setName(userVm.getName());
  response.setCreated(userVm.getCreated());
  response.setZoneId(userVm.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
  response.setIpAddress(userVm.getPrivateIpAddress());
  response.setServiceOfferingId(userVm.getServiceOfferingId());
  response.setHaEnable(userVm.isHaEnabled());
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
  if (group != null) {
    response.setGroup(group.getName());
    response.setGroupId(group.getId());
  }
  if (userVm.getDisplayName() == null || userVm.getDisplayName().length() == 0) {
    response.setDisplayName(userVm.getName());
  }
 else {
    response.setDisplayName(userVm.getDisplayName());
  }
  if (userVm.getState() != null) {
    response.setState(userVm.getState().toString());
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
  Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
  if (acct != null) {
    response.setAccountName(acct.getAccountName());
    response.setDomainId(acct.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
  Long userId=UserContext.current().getUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  User userExecutingCmd=ApiDBUtils.findUserById(userId);
  Account acctForUserExecutingCmd=ApiDBUtils.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (userVm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (userVm.getHostId() != null))) {
    response.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
    response.setHostId(userVm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    response.setPassword(getPassword());
  }
  Long isoId=userVm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(isoId.longValue());
    if (iso != null) {
      response.setIsoId(isoId.longValue());
      response.setIsoName(iso.getName());
      response.setTemplateId(isoId.longValue());
      response.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      response.setIsoDisplayText(templateDisplayText);
      response.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    response.setTemplateId(userVm.getTemplateId());
    response.setTemplateName(templateName);
    response.setTemplateDisplayText(templateDisplayText);
    response.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
  response.setServiceOfferingId(userVm.getServiceOfferingId());
  response.setServiceOfferingName(offering.getName());
  response.setCpuNumber(offering.getCpu());
  response.setCpuSpeed(offering.getSpeed());
  response.setMemory(offering.getRamSize());
  response.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public UserVmResponse getResponse(){
  UserVm userVm=(UserVm)getResponseObject();
  UserVmResponse response=new UserVmResponse();
  response.setId(userVm.getId());
  response.setName(userVm.getName());
  response.setCreated(userVm.getCreated());
  response.setZoneId(userVm.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
  response.setIpAddress(userVm.getPrivateIpAddress());
  response.setServiceOfferingId(userVm.getServiceOfferingId());
  response.setHaEnable(userVm.isHaEnabled());
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
  if (group != null) {
    response.setGroup(group.getName());
    response.setGroupId(group.getId());
  }
  if (userVm.getDisplayName() == null || userVm.getDisplayName().length() == 0) {
    response.setDisplayName(userVm.getName());
  }
 else {
    response.setDisplayName(userVm.getDisplayName());
  }
  if (userVm.getState() != null) {
    response.setState(userVm.getState().toString());
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
  Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
  if (acct != null) {
    response.setAccountName(acct.getAccountName());
    response.setDomainId(acct.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
  Long userId=UserContext.current().getUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  User userExecutingCmd=ApiDBUtils.findUserById(userId);
  Account acctForUserExecutingCmd=ApiDBUtils.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (userVm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (userVm.getHostId() != null))) {
    response.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
    response.setHostId(userVm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    response.setPassword(getPassword());
  }
  Long isoId=userVm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(isoId.longValue());
    if (iso != null) {
      response.setIsoId(isoId.longValue());
      response.setIsoName(iso.getName());
      response.setTemplateId(isoId.longValue());
      response.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      response.setIsoDisplayText(templateDisplayText);
      response.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    response.setTemplateId(userVm.getTemplateId());
    response.setTemplateName(templateName);
    response.setTemplateDisplayText(templateDisplayText);
    response.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
  response.setServiceOfferingId(userVm.getServiceOfferingId());
  response.setServiceOfferingName(offering.getName());
  response.setCpuNumber(offering.getCpu());
  response.setCpuSpeed(offering.getSpeed());
  response.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(userVm.getId());
  if (rootVolume != null) {
    response.setRootDeviceId(rootVolume.getDeviceId());
    StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
    response.setRootDeviceType(storagePool.getPoolType().toString());
  }
  response.setGuestOsId(userVm.getGuestOSId());
  response.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
  response.setResponseName(getName());
  return response;
}",0.9545396663695404
107442,"@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<UserVmResponse> getResponse(){
  List<UserVmVO> userVms=(List<UserVmVO>)getResponseObject();
  ListResponse<UserVmResponse> response=new ListResponse<UserVmResponse>();
  List<UserVmResponse> vmResponses=new ArrayList<UserVmResponse>();
  for (  UserVmVO userVm : userVms) {
    UserVmResponse userVmResponse=new UserVmResponse();
    userVmResponse.setId(userVm.getId());
    AsyncJobVO asyncJob=ApiDBUtils.findInstancePendingAsyncJob(""String_Node_Str"",userVm.getId());
    if (asyncJob != null) {
      userVmResponse.setJobId(asyncJob.getId());
      userVmResponse.setJobStatus(asyncJob.getStatus());
    }
    userVmResponse.setName(userVm.getName());
    userVmResponse.setCreated(userVm.getCreated());
    userVmResponse.setIpAddress(userVm.getPrivateIpAddress());
    if (userVm.getState() != null) {
      userVmResponse.setState(userVm.getState().toString());
    }
    Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
    if (acct != null) {
      userVmResponse.setAccountName(acct.getAccountName());
      userVmResponse.setDomainId(acct.getDomainId());
      userVmResponse.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
    }
    userVmResponse.setHaEnable(userVm.isHaEnabled());
    if (userVm.getDisplayName() != null) {
      userVmResponse.setDisplayName(userVm.getDisplayName());
    }
 else {
      userVmResponse.setDisplayName(userVm.getName());
    }
    InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
    if (group != null) {
      userVmResponse.setGroup(group.getName());
      userVmResponse.setGroupId(group.getId());
    }
    userVmResponse.setZoneId(userVm.getDataCenterId());
    userVmResponse.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
    Account account=(Account)UserContext.current().getAccount();
    if (((account == null) || isAdmin(account.getType())) && (userVm.getHostId() != null)) {
      userVmResponse.setHostId(userVm.getHostId());
      userVmResponse.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
    }
    VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
    if (template != null) {
      userVmResponse.setTemplateId(userVm.getTemplateId());
      userVmResponse.setTemplateName(template.getName());
      userVmResponse.setTemplateDisplayText(template.getDisplayText());
      userVmResponse.setPasswordEnabled(template.getEnablePassword());
    }
 else {
      userVmResponse.setTemplateId(-1L);
      userVmResponse.setTemplateName(""String_Node_Str"");
      userVmResponse.setTemplateDisplayText(""String_Node_Str"");
      userVmResponse.setPasswordEnabled(false);
    }
    if (userVm.getIsoId() != null) {
      VMTemplateVO iso=ApiDBUtils.findTemplateById(userVm.getIsoId().longValue());
      if (iso != null) {
        userVmResponse.setIsoId(userVm.getIsoId());
        userVmResponse.setIsoName(iso.getName());
      }
    }
    ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
    userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
    userVmResponse.setServiceOfferingName(offering.getName());
    userVmResponse.setCpuNumber(offering.getCpu());
    userVmResponse.setCpuSpeed(offering.getSpeed());
    userVmResponse.setMemory(offering.getRamSize());
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    String cpuUsed=null;
    VmStats vmStats=ApiDBUtils.getVmStatistics(userVm.getId());
    if (vmStats != null) {
      float cpuUtil=(float)vmStats.getCPUUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
      userVmResponse.setCpuUsed(cpuUsed);
      long networkKbRead=(long)vmStats.getNetworkReadKBs();
      userVmResponse.setNetworkKbsRead(networkKbRead);
      long networkKbWrite=(long)vmStats.getNetworkWriteKBs();
      userVmResponse.setNetworkKbsWrite(networkKbWrite);
    }
    userVmResponse.setOsTypeId(userVm.getGuestOSId());
    userVmResponse.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
    userVmResponse.setResponseName(""String_Node_Str"");
    vmResponses.add(userVmResponse);
  }
  response.setResponses(vmResponses);
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<UserVmResponse> getResponse(){
  List<UserVmVO> userVms=(List<UserVmVO>)getResponseObject();
  ListResponse<UserVmResponse> response=new ListResponse<UserVmResponse>();
  List<UserVmResponse> vmResponses=new ArrayList<UserVmResponse>();
  for (  UserVmVO userVm : userVms) {
    UserVmResponse userVmResponse=new UserVmResponse();
    userVmResponse.setId(userVm.getId());
    AsyncJobVO asyncJob=ApiDBUtils.findInstancePendingAsyncJob(""String_Node_Str"",userVm.getId());
    if (asyncJob != null) {
      userVmResponse.setJobId(asyncJob.getId());
      userVmResponse.setJobStatus(asyncJob.getStatus());
    }
    userVmResponse.setName(userVm.getName());
    userVmResponse.setCreated(userVm.getCreated());
    userVmResponse.setIpAddress(userVm.getPrivateIpAddress());
    if (userVm.getState() != null) {
      userVmResponse.setState(userVm.getState().toString());
    }
    Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
    if (acct != null) {
      userVmResponse.setAccountName(acct.getAccountName());
      userVmResponse.setDomainId(acct.getDomainId());
      userVmResponse.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
    }
    userVmResponse.setHaEnable(userVm.isHaEnabled());
    if (userVm.getDisplayName() != null) {
      userVmResponse.setDisplayName(userVm.getDisplayName());
    }
 else {
      userVmResponse.setDisplayName(userVm.getName());
    }
    InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
    if (group != null) {
      userVmResponse.setGroup(group.getName());
      userVmResponse.setGroupId(group.getId());
    }
    userVmResponse.setZoneId(userVm.getDataCenterId());
    userVmResponse.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
    Account account=(Account)UserContext.current().getAccount();
    if (((account == null) || isAdmin(account.getType())) && (userVm.getHostId() != null)) {
      userVmResponse.setHostId(userVm.getHostId());
      userVmResponse.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
    }
    VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
    if (template != null) {
      userVmResponse.setTemplateId(userVm.getTemplateId());
      userVmResponse.setTemplateName(template.getName());
      userVmResponse.setTemplateDisplayText(template.getDisplayText());
      userVmResponse.setPasswordEnabled(template.getEnablePassword());
    }
 else {
      userVmResponse.setTemplateId(-1L);
      userVmResponse.setTemplateName(""String_Node_Str"");
      userVmResponse.setTemplateDisplayText(""String_Node_Str"");
      userVmResponse.setPasswordEnabled(false);
    }
    if (userVm.getIsoId() != null) {
      VMTemplateVO iso=ApiDBUtils.findTemplateById(userVm.getIsoId().longValue());
      if (iso != null) {
        userVmResponse.setIsoId(userVm.getIsoId());
        userVmResponse.setIsoName(iso.getName());
      }
    }
    ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
    userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
    userVmResponse.setServiceOfferingName(offering.getName());
    userVmResponse.setCpuNumber(offering.getCpu());
    userVmResponse.setCpuSpeed(offering.getSpeed());
    userVmResponse.setMemory(offering.getRamSize());
    VolumeVO rootVolume=ApiDBUtils.findRootVolume(userVm.getId());
    if (rootVolume != null) {
      userVmResponse.setRootDeviceId(rootVolume.getDeviceId());
      StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
      userVmResponse.setRootDeviceType(storagePool.getPoolType().toString());
    }
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    String cpuUsed=null;
    VmStats vmStats=ApiDBUtils.getVmStatistics(userVm.getId());
    if (vmStats != null) {
      float cpuUtil=(float)vmStats.getCPUUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
      userVmResponse.setCpuUsed(cpuUsed);
      long networkKbRead=(long)vmStats.getNetworkReadKBs();
      userVmResponse.setNetworkKbsRead(networkKbRead);
      long networkKbWrite=(long)vmStats.getNetworkWriteKBs();
      userVmResponse.setNetworkKbsWrite(networkKbWrite);
    }
    userVmResponse.setGuestOsId(userVm.getGuestOSId());
    userVmResponse.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
    userVmResponse.setResponseName(""String_Node_Str"");
    vmResponses.add(userVmResponse);
  }
  response.setResponses(vmResponses);
  response.setResponseName(getName());
  return response;
}",0.9620084425683182
107443,"@Override @SuppressWarnings(""String_Node_Str"") public UserVmResponse getResponse(){
  UserVm vm=(UserVm)getResponseObject();
  UserVmResponse response=new UserVmResponse();
  response.setId(vm.getId());
  response.setName(vm.getName());
  response.setCreated(vm.getCreated());
  response.setZoneId(vm.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(vm.getDataCenterId()).getName());
  response.setIpAddress(vm.getPrivateIpAddress());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setHaEnable(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    response.setDisplayName(vm.getName());
  }
 else {
    response.setDisplayName(vm.getDisplayName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(vm.getId());
  if (group != null) {
    response.setGroup(group.getName());
    response.setGroupId(group.getId());
  }
  if (vm.getState() != null) {
    response.setState(vm.getState().toString());
  }
  Account acct=ApiDBUtils.findAccountById(vm.getAccountId());
  if (acct != null) {
    response.setAccountName(acct.getAccountName());
    response.setDomainId(acct.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    response.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    response.setHostId(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  VMTemplateVO template=ApiDBUtils.findTemplateById(vm.getTemplateId());
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  response.setTemplateId(vm.getTemplateId());
  response.setTemplateName(templateName);
  response.setTemplateDisplayText(templateDisplayText);
  response.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled) {
    response.setPassword(null);
  }
 else {
    response.setPassword(""String_Node_Str"");
  }
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  response.setIsoId(vm.getIsoId());
  response.setIsoName(isoName);
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setServiceOfferingName(offering.getName());
  response.setCpuNumber(offering.getCpu());
  response.setCpuSpeed(offering.getSpeed());
  response.setMemory(offering.getRamSize());
  response.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(vm.getId()));
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public UserVmResponse getResponse(){
  UserVm vm=(UserVm)getResponseObject();
  UserVmResponse response=new UserVmResponse();
  response.setId(vm.getId());
  response.setName(vm.getName());
  response.setCreated(vm.getCreated());
  response.setZoneId(vm.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(vm.getDataCenterId()).getName());
  response.setIpAddress(vm.getPrivateIpAddress());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setHaEnable(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    response.setDisplayName(vm.getName());
  }
 else {
    response.setDisplayName(vm.getDisplayName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(vm.getId());
  if (group != null) {
    response.setGroup(group.getName());
    response.setGroupId(group.getId());
  }
  if (vm.getState() != null) {
    response.setState(vm.getState().toString());
  }
  Account acct=ApiDBUtils.findAccountById(vm.getAccountId());
  if (acct != null) {
    response.setAccountName(acct.getAccountName());
    response.setDomainId(acct.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    response.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    response.setHostId(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  VMTemplateVO template=ApiDBUtils.findTemplateById(vm.getTemplateId());
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  response.setTemplateId(vm.getTemplateId());
  response.setTemplateName(templateName);
  response.setTemplateDisplayText(templateDisplayText);
  response.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled) {
    response.setPassword(null);
  }
 else {
    response.setPassword(""String_Node_Str"");
  }
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  response.setIsoId(vm.getIsoId());
  response.setIsoName(isoName);
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setServiceOfferingName(offering.getName());
  response.setCpuNumber(offering.getCpu());
  response.setCpuSpeed(offering.getSpeed());
  response.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(vm.getId());
  if (rootVolume != null) {
    response.setRootDeviceId(rootVolume.getDeviceId());
    StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
    response.setRootDeviceType(storagePool.getPoolType().toString());
  }
  response.setGuestOsId(vm.getGuestOSId());
  response.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(vm.getId()));
  response.setResponseName(getName());
  return response;
}",0.935438042620363
107444,"@Override @SuppressWarnings(""String_Node_Str"") public UserVmResponse getResponse(){
  UserVm vm=(UserVm)getResponseObject();
  UserVmResponse response=new UserVmResponse();
  response.setId(vm.getId());
  response.setName(vm.getName());
  response.setCreated(vm.getCreated());
  response.setZoneId(vm.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(vm.getDataCenterId()).getName());
  response.setIpAddress(vm.getPrivateIpAddress());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setHaEnable(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    response.setDisplayName(vm.getName());
  }
 else {
    response.setDisplayName(vm.getDisplayName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(vm.getId());
  if (group != null) {
    response.setGroup(group.getName());
    response.setGroupId(group.getId());
  }
  if (vm.getState() != null) {
    response.setState(vm.getState().toString());
  }
  Account acct=ApiDBUtils.findAccountById(vm.getAccountId());
  if (acct != null) {
    response.setAccountName(acct.getAccountName());
    response.setDomainId(acct.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    response.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    response.setHostId(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  VMTemplateVO template=ApiDBUtils.findTemplateById(vm.getTemplateId());
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  response.setTemplateId(vm.getTemplateId());
  response.setTemplateName(templateName);
  response.setTemplateDisplayText(templateDisplayText);
  response.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled) {
    response.setPassword(null);
  }
 else {
    response.setPassword(""String_Node_Str"");
  }
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  response.setIsoId(vm.getIsoId());
  response.setIsoName(isoName);
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setServiceOfferingName(offering.getName());
  response.setCpuNumber(offering.getCpu());
  response.setCpuSpeed(offering.getSpeed());
  response.setMemory(offering.getRamSize());
  response.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(vm.getId()));
  response.setResponseName(getResultObjectName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public UserVmResponse getResponse(){
  UserVm vm=(UserVm)getResponseObject();
  UserVmResponse response=new UserVmResponse();
  response.setId(vm.getId());
  response.setName(vm.getName());
  response.setCreated(vm.getCreated());
  response.setZoneId(vm.getDataCenterId());
  response.setZoneName(ApiDBUtils.findZoneById(vm.getDataCenterId()).getName());
  response.setIpAddress(vm.getPrivateIpAddress());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setHaEnable(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    response.setDisplayName(vm.getName());
  }
 else {
    response.setDisplayName(vm.getDisplayName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(vm.getId());
  if (group != null) {
    response.setGroup(group.getName());
    response.setGroupId(group.getId());
  }
  if (vm.getState() != null) {
    response.setState(vm.getState().toString());
  }
  Account acct=ApiDBUtils.findAccountById(vm.getAccountId());
  if (acct != null) {
    response.setAccountName(acct.getAccountName());
    response.setDomainId(acct.getDomainId());
    response.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    response.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    response.setHostId(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  VMTemplateVO template=ApiDBUtils.findTemplateById(vm.getTemplateId());
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  response.setTemplateId(vm.getTemplateId());
  response.setTemplateName(templateName);
  response.setTemplateDisplayText(templateDisplayText);
  response.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled) {
    response.setPassword(null);
  }
 else {
    response.setPassword(""String_Node_Str"");
  }
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  response.setIsoId(vm.getIsoId());
  response.setIsoName(isoName);
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
  response.setServiceOfferingId(vm.getServiceOfferingId());
  response.setServiceOfferingName(offering.getName());
  response.setCpuNumber(offering.getCpu());
  response.setCpuSpeed(offering.getSpeed());
  response.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(vm.getId());
  if (rootVolume != null) {
    response.setRootDeviceId(rootVolume.getDeviceId());
    StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
    response.setRootDeviceType(storagePool.getPoolType().toString());
  }
  response.setGuestOsId(vm.getGuestOSId());
  response.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(vm.getId()));
  response.setResponseName(getResultObjectName());
  return response;
}",0.93599622582167
107445,"private DeployVMResultObject composeResultObject(long userId,UserVm vm,DeployVMParam param){
  DeployVMResultObject resultObject=new DeployVMResultObject();
  if (vm == null)   return resultObject;
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(getAsyncJobMgr().getExecutorContext().getManagementServer().findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  ManagementServer managementServer=getAsyncJobMgr().getExecutorContext().getManagementServer();
  InstanceGroupVO group=managementServer.getGroupForVm(vm.getId());
  if (group != null) {
    resultObject.setGroupId(group.getId());
    resultObject.setGroup(group.getName());
  }
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  User userExecutingCmd=managementServer.getUser(userId);
  Account acctForUserExecutingCmd=managementServer.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (vm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null))) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    resultObject.setPassword(param.getPassword());
  }
  Long isoId=vm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=getAsyncJobMgr().getExecutorContext().getManagementServer().findTemplateById(isoId.longValue());
    if (iso != null) {
      resultObject.setIsoId(isoId.longValue());
      resultObject.setIsoName(iso.getName());
      resultObject.setTemplateId(isoId.longValue());
      resultObject.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      resultObject.setIsoDisplayText(templateDisplayText);
      resultObject.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    resultObject.setTemplateId(vm.getTemplateId());
    resultObject.setTemplateName(templateName);
    resultObject.setTemplateDisplayText(templateDisplayText);
    resultObject.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  VolumeVO rootVolume=managementServer.findRootVolume(vm.getId());
  if (rootVolume != null) {
    resultObject.setRootDeviceId(rootVolume.getDeviceId());
    StoragePoolVO storagePool=managementServer.findPoolById(rootVolume.getPoolId());
    resultObject.setRootDeviceType(storagePool.getPoolType().toString());
  }
  return resultObject;
}","private DeployVMResultObject composeResultObject(long userId,UserVm vm,DeployVMParam param){
  DeployVMResultObject resultObject=new DeployVMResultObject();
  if (vm == null)   return resultObject;
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(getAsyncJobMgr().getExecutorContext().getManagementServer().findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  ManagementServer managementServer=getAsyncJobMgr().getExecutorContext().getManagementServer();
  InstanceGroupVO group=managementServer.getGroupForVm(vm.getId());
  if (group != null) {
    resultObject.setGroupId(group.getId());
    resultObject.setGroup(group.getName());
  }
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  User userExecutingCmd=managementServer.getUser(userId);
  Account acctForUserExecutingCmd=managementServer.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (vm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null))) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    resultObject.setPassword(param.getPassword());
  }
  Long isoId=vm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=getAsyncJobMgr().getExecutorContext().getManagementServer().findTemplateById(isoId.longValue());
    if (iso != null) {
      resultObject.setIsoId(isoId.longValue());
      resultObject.setIsoName(iso.getName());
      resultObject.setTemplateId(isoId.longValue());
      resultObject.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      resultObject.setIsoDisplayText(templateDisplayText);
      resultObject.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    resultObject.setTemplateId(vm.getTemplateId());
    resultObject.setTemplateName(templateName);
    resultObject.setTemplateDisplayText(templateDisplayText);
    resultObject.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}",0.9540699157948456
107446,"@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<VolumeResponse> getResponse(){
  List<VolumeVO> volumes=(List<VolumeVO>)getResponseObject();
  ListResponse<VolumeResponse> response=new ListResponse<VolumeResponse>();
  List<VolumeResponse> volResponses=new ArrayList<VolumeResponse>();
  for (  VolumeVO volume : volumes) {
    VolumeResponse volResponse=new VolumeResponse();
    volResponse.setId(volume.getId());
    AsyncJobVO asyncJob=ApiDBUtils.findInstancePendingAsyncJob(""String_Node_Str"",volume.getId());
    if (asyncJob != null) {
      volResponse.setJobId(asyncJob.getId());
      volResponse.setJobStatus(asyncJob.getStatus());
    }
    if (volume.getName() != null) {
      volResponse.setName(volume.getName());
    }
 else {
      volResponse.setName(""String_Node_Str"");
    }
    volResponse.setZoneId(volume.getDataCenterId());
    volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
    volResponse.setVolumeType(volume.getVolumeType().toString());
    volResponse.setDeviceId(volume.getDeviceId());
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
      volResponse.setVirtualMachineId(vm.getId());
      volResponse.setVirtualMachineName(vm.getName());
      volResponse.setVirtualMachineDisplayName(vm.getName());
      volResponse.setVirtualMachineState(vm.getState().toString());
    }
    volResponse.setSize(volume.getSize());
    volResponse.setCreated(volume.getCreated());
    volResponse.setState(volume.getStatus().toString());
    Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
    if (accountTemp != null) {
      volResponse.setAccountName(accountTemp.getAccountName());
      volResponse.setDomainId(accountTemp.getDomainId());
      volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
    }
    String storageType;
    try {
      if (volume.getPoolId() == null) {
        if (volume.getState() == Volume.State.Allocated) {
          storageType=""String_Node_Str"";
        }
 else {
          storageType=""String_Node_Str"";
        }
      }
 else {
        storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
      }
    }
 catch (    InvalidParameterValueException e) {
      s_logger.error(e.getMessage(),e);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
    }
    volResponse.setStorageType(storageType);
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
    DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
    Long poolId=volume.getPoolId();
    String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
    volResponse.setStoragePoolName(poolName);
    volResponse.setSourceId(volume.getSourceId());
    volResponse.setSourceType(volume.getSourceType().toString());
    volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
    volResponse.setResponseName(""String_Node_Str"");
    volResponses.add(volResponse);
  }
  response.setResponses(volResponses);
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<VolumeResponse> getResponse(){
  List<VolumeVO> volumes=(List<VolumeVO>)getResponseObject();
  ListResponse<VolumeResponse> response=new ListResponse<VolumeResponse>();
  List<VolumeResponse> volResponses=new ArrayList<VolumeResponse>();
  for (  VolumeVO volume : volumes) {
    VolumeResponse volResponse=new VolumeResponse();
    volResponse.setId(volume.getId());
    AsyncJobVO asyncJob=ApiDBUtils.findInstancePendingAsyncJob(""String_Node_Str"",volume.getId());
    if (asyncJob != null) {
      volResponse.setJobId(asyncJob.getId());
      volResponse.setJobStatus(asyncJob.getStatus());
    }
    if (volume.getName() != null) {
      volResponse.setName(volume.getName());
    }
 else {
      volResponse.setName(""String_Node_Str"");
    }
    volResponse.setZoneId(volume.getDataCenterId());
    volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
    volResponse.setVolumeType(volume.getVolumeType().toString());
    volResponse.setDeviceId(volume.getDeviceId());
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
      volResponse.setVirtualMachineId(vm.getId());
      volResponse.setVirtualMachineName(vm.getName());
      volResponse.setVirtualMachineDisplayName(vm.getName());
      volResponse.setVirtualMachineState(vm.getState().toString());
    }
    volResponse.setSize(volume.getSize());
    volResponse.setCreated(volume.getCreated());
    volResponse.setState(volume.getStatus().toString());
    Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
    if (accountTemp != null) {
      volResponse.setAccountName(accountTemp.getAccountName());
      volResponse.setDomainId(accountTemp.getDomainId());
      volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
    }
    String storageType;
    try {
      if (volume.getPoolId() == null) {
        if (volume.getState() == Volume.State.Allocated) {
          storageType=""String_Node_Str"";
        }
 else {
          storageType=""String_Node_Str"";
        }
      }
 else {
        storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
      }
    }
 catch (    InvalidParameterValueException e) {
      s_logger.error(e.getMessage(),e);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
    }
    volResponse.setStorageType(storageType);
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
    DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
    Long poolId=volume.getPoolId();
    String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
    volResponse.setStoragePoolName(poolName);
    volResponse.setSourceId(volume.getSourceId());
    if (volume.getSourceType() != null) {
      volResponse.setSourceType(volume.getSourceType().toString());
    }
    volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
    volResponse.setResponseName(""String_Node_Str"");
    volResponses.add(volResponse);
  }
  response.setResponses(volResponses);
  response.setResponseName(getName());
  return response;
}",0.9827536648462202
107447,"@Override public void attachVolumeToVM(AttachVolumeCmd command) throws InternalErrorException, InvalidParameterValueException, PermissionDeniedException {
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=UserContext.current().getAccount();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != VolumeType.DATADISK) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getDestroyed()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,""String_Node_Str"");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,VolumeType.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId() != volume.getAccountId())       throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str"");
      if (account.getId() != vm.getAccountId())       throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str"");
    }
 else {
      if (!_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId()) || !_domainDao.isChildDomain(account.getDomainId(),vm.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
      }
    }
  }
  long startEventId=EventUtils.saveScheduledEvent(1L,volume.getAccountId(),EventTypes.EVENT_VOLUME_ATTACH,""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId);
  EventVO event=new EventVO();
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setUserId(1L);
  event.setAccountId(volume.getAccountId());
  event.setState(EventState.Started);
  event.setStartId(startEventId);
  event.setDescription(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId);
  _eventDao.persist(event);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,VolumeType.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new InternalErrorException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(vm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new InternalErrorException(""String_Node_Str"" + vm.getName());
    }
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new InternalErrorException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId());
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId);
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new InternalErrorException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  event=new EventVO();
  event.setAccountId(volume.getAccountId());
  event.setUserId(1L);
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setState(EventState.Completed);
  event.setStartId(startEventId);
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    if (!vm.getName().equals(vm.getDisplayName()))     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getDisplayName()+ ""String_Node_Str"");
 else     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    _eventDao.persist(event);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty())       errorMsg+=""String_Node_Str"" + details;
    }
    throw new InternalErrorException(errorMsg);
  }
}","@Override public void attachVolumeToVM(AttachVolumeCmd command) throws InternalErrorException, InvalidParameterValueException, PermissionDeniedException {
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=UserContext.current().getAccount();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != VolumeType.DATADISK) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!Volume.State.Allocated.equals(volume.getState()) && !_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getDestroyed()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,""String_Node_Str"");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,VolumeType.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if (account.getId() != volume.getAccountId())       throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str"");
      if (account.getId() != vm.getAccountId())       throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str"");
    }
 else {
      if (!_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId()) || !_domainDao.isChildDomain(account.getDomainId(),vm.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
      }
    }
  }
  long startEventId=EventUtils.saveScheduledEvent(1L,volume.getAccountId(),EventTypes.EVENT_VOLUME_ATTACH,""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId);
  EventVO event=new EventVO();
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setUserId(1L);
  event.setAccountId(volume.getAccountId());
  event.setState(EventState.Started);
  event.setStartId(startEventId);
  event.setDescription(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId);
  _eventDao.persist(event);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,VolumeType.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new InternalErrorException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(vm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new InternalErrorException(""String_Node_Str"" + vm.getName());
    }
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new InternalErrorException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId());
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId);
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new InternalErrorException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  event=new EventVO();
  event.setAccountId(volume.getAccountId());
  event.setUserId(1L);
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setState(EventState.Completed);
  event.setStartId(startEventId);
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    if (!vm.getName().equals(vm.getDisplayName()))     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getDisplayName()+ ""String_Node_Str"");
 else     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    _eventDao.persist(event);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty())       errorMsg+=""String_Node_Str"" + details;
    }
    throw new InternalErrorException(errorMsg);
  }
}",0.9970213005114372
107448,"@Override @DB public void assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd) throws NetworkRuleConflictException, InternalErrorException, PermissionDeniedException, InvalidParameterValueException {
  Long loadBalancerId=cmd.getLoadBalancerId();
  Long instanceIdParam=cmd.getVirtualMachineId();
  List<Long> instanceIds=cmd.getVirtualMachineIds();
  if ((instanceIdParam == null) && (instanceIds == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  if ((instanceIds == null) && (instanceIdParam != null)) {
    instanceIds=new ArrayList<Long>();
    instanceIds.add(instanceIdParam);
  }
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  DomainRouterVO syncObject=_routerMgr.getRouter(loadBalancer.getIpAddress());
  cmd.synchronizeCommand(""String_Node_Str"",syncObject.getId());
  Account account=(Account)UserContext.current().getAccountObject();
  if (account != null) {
    if ((account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (account.getType() == Account.ACCOUNT_TYPE_READ_ONLY_ADMIN)) {
      if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
    }
 else     if (account.getId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  try {
    List<FirewallRuleVO> firewallRulesToApply=new ArrayList<FirewallRuleVO>();
    long accountId=0;
    DomainRouterVO router=null;
    List<LoadBalancerVMMapVO> mappedInstances=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,false);
    Set<Long> mappedInstanceIds=new HashSet<Long>();
    if (mappedInstances != null) {
      for (      LoadBalancerVMMapVO mappedInstance : mappedInstances) {
        mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
      }
    }
    for (    Long instanceId : instanceIds) {
      if (mappedInstanceIds.contains(instanceId)) {
        continue;
      }
      UserVmVO userVm=_vmDao.findById(instanceId);
      if (userVm == null) {
        s_logger.warn(""String_Node_Str"" + instanceId);
        throw new InvalidParameterValueException(""String_Node_Str"" + instanceId);
      }
 else {
        ServiceOfferingVO offering=_serviceOfferingDao.findById(userVm.getServiceOfferingId());
        if ((offering == null) || !GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
          _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,Boolean.TRUE);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
          }
          throw new InvalidParameterValueException(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
        }
      }
      if (accountId == 0) {
        accountId=userVm.getAccountId();
      }
 else       if (accountId != userVm.getAccountId()) {
        s_logger.warn(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
      }
      DomainRouterVO nextRouter=null;
      if (userVm.getDomainRouterId() != null)       nextRouter=_routerMgr.getRouter(userVm.getDomainRouterId());
      if (nextRouter == null) {
        s_logger.warn(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
      }
      if (router == null) {
        router=nextRouter;
        if (router.getAccountId() != loadBalancer.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getAccountId()+ ""String_Node_Str"");
        }
      }
 else       if (router.getId() != nextRouter.getId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ nextRouter.getName()+ ""String_Node_Str""+ router.getName());
      }
      String ipAddress=loadBalancer.getIpAddress();
      String privateIpAddress=userVm.getGuestIpAddress();
      List<FirewallRuleVO> existingRulesOnPubIp=_rulesDao.listIPForwarding(ipAddress);
      if (existingRulesOnPubIp != null) {
        for (        FirewallRuleVO fwRule : existingRulesOnPubIp) {
          if (!((fwRule.isForwarding() == false) && (fwRule.getGroupId() != null) && (fwRule.getGroupId() == loadBalancer.getId().longValue()))) {
            if (fwRule.getPublicPort().equals(loadBalancer.getPublicPort())) {
              throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ loadBalancer.getPublicPort()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getId()+ ""String_Node_Str""+ userVm.getName()+ ""String_Node_Str"");
            }
          }
 else           if (fwRule.getPrivateIpAddress().equals(privateIpAddress) && fwRule.getPrivatePort().equals(loadBalancer.getPrivatePort()) && fwRule.isEnabled()) {
            continue;
          }
        }
      }
      FirewallRuleVO newFwRule=new FirewallRuleVO();
      newFwRule.setAlgorithm(loadBalancer.getAlgorithm());
      newFwRule.setEnabled(true);
      newFwRule.setForwarding(false);
      newFwRule.setPrivatePort(loadBalancer.getPrivatePort());
      newFwRule.setPublicPort(loadBalancer.getPublicPort());
      newFwRule.setPublicIpAddress(loadBalancer.getIpAddress());
      newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
      newFwRule.setGroupId(loadBalancer.getId());
      firewallRulesToApply.add(newFwRule);
    }
    if (firewallRulesToApply.isEmpty()) {
      return;
    }
    IPAddressVO ipAddr=_ipAddressDao.findById(loadBalancer.getIpAddress());
    List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(accountId,ipAddr.getDataCenterId(),null);
    for (    IPAddressVO ipv : ipAddrs) {
      List<FirewallRuleVO> rules=_rulesDao.listIPForwarding(ipv.getAddress(),false);
      firewallRulesToApply.addAll(rules);
    }
    txn.start();
    List<FirewallRuleVO> updatedRules=null;
    if (router.getState().equals(State.Starting)) {
      updatedRules=firewallRulesToApply;
    }
 else {
      updatedRules=updateFirewallRules(loadBalancer.getIpAddress(),firewallRulesToApply,router);
    }
    String description;
    String type=EventTypes.EVENT_NET_RULE_ADD;
    String ruleName=""String_Node_Str"";
    String level=EventVO.LEVEL_INFO;
    LoadBalancerVO loadBalancerLock=null;
    try {
      loadBalancerLock=_loadBalancerDao.acquire(loadBalancerId);
      if (loadBalancerLock == null) {
        s_logger.warn(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
      if ((updatedRules != null) && (updatedRules.size() == firewallRulesToApply.size())) {
        List<LoadBalancerVMMapVO> pendingMappedVMs=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,true);
        for (        LoadBalancerVMMapVO pendingMappedVM : pendingMappedVMs) {
          if (instanceIds.contains(pendingMappedVM.getInstanceId())) {
            LoadBalancerVMMapVO pendingMappedVMForUpdate=_loadBalancerVMMapDao.createForUpdate();
            pendingMappedVMForUpdate.setPending(false);
            _loadBalancerVMMapDao.update(pendingMappedVM.getId(),pendingMappedVMForUpdate);
          }
        }
        for (        FirewallRuleVO updatedRule : updatedRules) {
          if (updatedRule.getId() == null) {
            _rulesDao.persist(updatedRule);
            description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ updatedRule.getPublicIpAddress()+ ""String_Node_Str""+ updatedRule.getPublicPort()+ ""String_Node_Str""+ updatedRule.getPrivateIpAddress()+ ""String_Node_Str""+ updatedRule.getPrivatePort()+ ""String_Node_Str""+ ""String_Node_Str""+ updatedRule.getProtocol();
            EventUtils.saveEvent(UserContext.current().getUserId(),loadBalancer.getAccountId(),level,type,description);
          }
        }
      }
 else {
        _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,null);
        txn.commit();
        s_logger.warn(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
        throw new InternalErrorException(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
      }
    }
  finally {
      if (loadBalancerLock != null) {
        _loadBalancerDao.release(loadBalancerId);
      }
    }
    txn.commit();
  }
 catch (  Throwable e) {
    txn.rollback();
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw (InvalidParameterValueException)e;
    }
 else     if (e instanceof PermissionDeniedException) {
      throw (PermissionDeniedException)e;
    }
 else     if (e instanceof InternalErrorException) {
      s_logger.warn(""String_Node_Str"",e);
      throw (InternalErrorException)e;
    }
    s_logger.warn(""String_Node_Str"",e);
  }
}","@Override @DB public void assignToLoadBalancer(AssignToLoadBalancerRuleCmd cmd) throws NetworkRuleConflictException, InternalErrorException, PermissionDeniedException, InvalidParameterValueException {
  Long loadBalancerId=cmd.getLoadBalancerId();
  Long instanceIdParam=cmd.getVirtualMachineId();
  List<Long> instanceIds=cmd.getVirtualMachineIds();
  if ((instanceIdParam == null) && (instanceIds == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  if ((instanceIds == null) && (instanceIdParam != null)) {
    instanceIds=new ArrayList<Long>();
    instanceIds.add(instanceIdParam);
  }
  LoadBalancerVO loadBalancer=_loadBalancerDao.findById(loadBalancerId);
  if (loadBalancer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
  }
  DomainRouterVO syncObject=_routerMgr.getRouter(loadBalancer.getIpAddress());
  cmd.synchronizeCommand(""String_Node_Str"",syncObject.getId());
  Account account=(Account)UserContext.current().getAccountObject();
  if (account != null) {
    if ((account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (account.getType() == Account.ACCOUNT_TYPE_READ_ONLY_ADMIN)) {
      if (!_domainDao.isChildDomain(account.getDomainId(),loadBalancer.getDomainId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
    }
 else     if (account.getId() != loadBalancer.getAccountId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  try {
    List<FirewallRuleVO> firewallRulesToApply=new ArrayList<FirewallRuleVO>();
    long accountId=0;
    DomainRouterVO router=null;
    List<LoadBalancerVMMapVO> mappedInstances=_loadBalancerVMMapDao.listByLoadBalancerId(loadBalancerId,false);
    Set<Long> mappedInstanceIds=new HashSet<Long>();
    if (mappedInstances != null) {
      for (      LoadBalancerVMMapVO mappedInstance : mappedInstances) {
        mappedInstanceIds.add(Long.valueOf(mappedInstance.getInstanceId()));
      }
    }
    List<Long> finalInstanceIds=new ArrayList<Long>();
    for (    Long instanceId : instanceIds) {
      if (mappedInstanceIds.contains(instanceId)) {
        continue;
      }
 else {
        finalInstanceIds.add(instanceId);
      }
      UserVmVO userVm=_vmDao.findById(instanceId);
      if (userVm == null) {
        s_logger.warn(""String_Node_Str"" + instanceId);
        throw new InvalidParameterValueException(""String_Node_Str"" + instanceId);
      }
 else {
        ServiceOfferingVO offering=_serviceOfferingDao.findById(userVm.getServiceOfferingId());
        if ((offering == null) || !GuestIpType.Virtualized.equals(offering.getGuestIpType())) {
          _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,Boolean.TRUE);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
          }
          throw new InvalidParameterValueException(""String_Node_Str"" + userVm.toString() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ ((offering == null) ? ""String_Node_Str"" : offering.getGuestIpType())+ ""String_Node_Str"");
        }
      }
      if (accountId == 0) {
        accountId=userVm.getAccountId();
      }
 else       if (accountId != userVm.getAccountId()) {
        s_logger.warn(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ userVm.getAccountId()+ ""String_Node_Str""+ accountId);
      }
      DomainRouterVO nextRouter=null;
      if (userVm.getDomainRouterId() != null)       nextRouter=_routerMgr.getRouter(userVm.getDomainRouterId());
      if (nextRouter == null) {
        s_logger.warn(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getDomainRouterId() + ""String_Node_Str""+ instanceId);
      }
      if (router == null) {
        router=nextRouter;
        if (router.getAccountId() != loadBalancer.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getAccountId()+ ""String_Node_Str"");
        }
      }
 else       if (router.getId() != nextRouter.getId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + userVm.getName() + ""String_Node_Str""+ userVm.getId()+ ""String_Node_Str""+ nextRouter.getName()+ ""String_Node_Str""+ router.getName());
      }
      String ipAddress=loadBalancer.getIpAddress();
      String privateIpAddress=userVm.getGuestIpAddress();
      List<FirewallRuleVO> existingRulesOnPubIp=_rulesDao.listIPForwarding(ipAddress);
      if (existingRulesOnPubIp != null) {
        for (        FirewallRuleVO fwRule : existingRulesOnPubIp) {
          if (!((fwRule.isForwarding() == false) && (fwRule.getGroupId() != null) && (fwRule.getGroupId() == loadBalancer.getId().longValue()))) {
            if (fwRule.getPublicPort().equals(loadBalancer.getPublicPort())) {
              throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ loadBalancer.getPublicPort()+ ""String_Node_Str""+ loadBalancer.getName()+ ""String_Node_Str""+ loadBalancer.getId()+ ""String_Node_Str""+ userVm.getName()+ ""String_Node_Str"");
            }
          }
 else           if (fwRule.getPrivateIpAddress().equals(privateIpAddress) && fwRule.getPrivatePort().equals(loadBalancer.getPrivatePort()) && fwRule.isEnabled()) {
            continue;
          }
        }
      }
      FirewallRuleVO newFwRule=new FirewallRuleVO();
      newFwRule.setAlgorithm(loadBalancer.getAlgorithm());
      newFwRule.setEnabled(true);
      newFwRule.setForwarding(false);
      newFwRule.setPrivatePort(loadBalancer.getPrivatePort());
      newFwRule.setPublicPort(loadBalancer.getPublicPort());
      newFwRule.setPublicIpAddress(loadBalancer.getIpAddress());
      newFwRule.setPrivateIpAddress(userVm.getGuestIpAddress());
      newFwRule.setGroupId(loadBalancer.getId());
      firewallRulesToApply.add(newFwRule);
    }
    if (firewallRulesToApply.isEmpty()) {
      return;
    }
    IPAddressVO ipAddr=_ipAddressDao.findById(loadBalancer.getIpAddress());
    List<IPAddressVO> ipAddrs=listPublicIpAddressesInVirtualNetwork(accountId,ipAddr.getDataCenterId(),null);
    for (    IPAddressVO ipv : ipAddrs) {
      List<FirewallRuleVO> rules=_rulesDao.listIPForwarding(ipv.getAddress(),false);
      firewallRulesToApply.addAll(rules);
    }
    txn.start();
    List<FirewallRuleVO> updatedRules=null;
    if (router.getState().equals(State.Starting)) {
      updatedRules=firewallRulesToApply;
    }
 else {
      updatedRules=updateFirewallRules(loadBalancer.getIpAddress(),firewallRulesToApply,router);
    }
    String description;
    String type=EventTypes.EVENT_NET_RULE_ADD;
    String ruleName=""String_Node_Str"";
    String level=EventVO.LEVEL_INFO;
    LoadBalancerVO loadBalancerLock=null;
    try {
      loadBalancerLock=_loadBalancerDao.acquire(loadBalancerId);
      if (loadBalancerLock == null) {
        s_logger.warn(""String_Node_Str"" + loadBalancerId + ""String_Node_Str"");
      }
      if ((updatedRules != null) && (updatedRules.size() == firewallRulesToApply.size())) {
        for (        Long addedInstanceId : finalInstanceIds) {
          LoadBalancerVMMapVO mappedVM=new LoadBalancerVMMapVO(loadBalancerId,addedInstanceId);
          _loadBalancerVMMapDao.persist(mappedVM);
        }
        for (        FirewallRuleVO updatedRule : updatedRules) {
          if (updatedRule.getId() == null) {
            _rulesDao.persist(updatedRule);
            description=""String_Node_Str"" + ruleName + ""String_Node_Str""+ updatedRule.getPublicIpAddress()+ ""String_Node_Str""+ updatedRule.getPublicPort()+ ""String_Node_Str""+ updatedRule.getPrivateIpAddress()+ ""String_Node_Str""+ updatedRule.getPrivatePort()+ ""String_Node_Str""+ ""String_Node_Str""+ updatedRule.getProtocol();
            EventUtils.saveEvent(UserContext.current().getUserId(),loadBalancer.getAccountId(),level,type,description);
          }
        }
      }
 else {
        _loadBalancerVMMapDao.remove(loadBalancerId,instanceIds,null);
        txn.commit();
        s_logger.warn(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
        throw new InternalErrorException(""String_Node_Str"" + loadBalancer.getName() + ""String_Node_Str""+ loadBalancerId+ ""String_Node_Str""+ StringUtils.join(instanceIds,""String_Node_Str""));
      }
    }
  finally {
      if (loadBalancerLock != null) {
        _loadBalancerDao.release(loadBalancerId);
      }
    }
    txn.commit();
  }
 catch (  Throwable e) {
    txn.rollback();
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw (InvalidParameterValueException)e;
    }
 else     if (e instanceof PermissionDeniedException) {
      throw (PermissionDeniedException)e;
    }
 else     if (e instanceof InternalErrorException) {
      s_logger.warn(""String_Node_Str"",e);
      throw (InternalErrorException)e;
    }
    s_logger.warn(""String_Node_Str"",e);
  }
}",0.9029381965552178
107449,"@Override @DB public HostPodVO editPod(UpdatePodCmd cmd) throws InvalidParameterValueException, InternalErrorException {
  String cidr=cmd.getCidr();
  String startIp=cmd.getStartIp();
  String endIp=cmd.getEndIp();
  String gateway=cmd.getGateway();
  Long id=cmd.getId();
  String name=cmd.getName();
  Long userId=UserContext.current().getUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  HostPodVO pod=_podDao.findById(id);
  ;
  if (pod == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  long zoneId=pod.getDataCenterId();
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + zoneId);
  }
  if (endIp != null && startIp == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!validPod(id)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  if (gateway != null || cidr != null || startIp != null || endIp != null) {
    if (podHasAllocatedPrivateIPs(id)) {
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
  String oldPodName=pod.getName();
  if (name == null) {
    name=oldPodName;
  }
  if (gateway == null) {
    gateway=pod.getGateway();
  }
  if (cidr == null) {
    cidr=pod.getCidrAddress() + ""String_Node_Str"" + pod.getCidrSize();
  }
  boolean checkForDuplicates=!oldPodName.equals(name);
  checkPodAttributes(id,name,pod.getDataCenterId(),gateway,cidr,startIp,endIp,checkForDuplicates);
  String cidrAddress=getCidrAddress(cidr);
  int cidrSize=getCidrSize(cidr);
  if (startIp != null && endIp == null) {
    endIp=NetUtils.getIpRangeEndIpFromCidr(cidrAddress,cidrSize);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    String ipRange;
    if (startIp != null) {
      _zoneDao.deletePrivateIpAddressByPod(pod.getId());
      _zoneDao.addPrivateIpAddress(zoneId,pod.getId(),startIp,endIp);
      ipRange=startIp + ""String_Node_Str"";
      if (endIp != null) {
        ipRange+=endIp;
      }
    }
 else {
      ipRange=pod.getDescription();
    }
    pod.setName(name);
    pod.setDataCenterId(zoneId);
    pod.setGateway(gateway);
    pod.setCidrAddress(cidrAddress);
    pod.setCidrSize(cidrSize);
    pod.setDescription(ipRange);
    if (!_podDao.update(id,pod)) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    txn.commit();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    txn.rollback();
    throw new InternalErrorException(""String_Node_Str"");
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_POD_EDIT,""String_Node_Str"" + name + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"",""String_Node_Str"" + pod.getId(),""String_Node_Str"" + zone.getId(),""String_Node_Str"" + gateway,""String_Node_Str"" + cidr,""String_Node_Str"" + startIp,""String_Node_Str"" + endIp);
  return pod;
}","@Override @DB public HostPodVO editPod(UpdatePodCmd cmd) throws InvalidParameterValueException, InternalErrorException {
  String cidr=cmd.getCidr();
  String startIp=cmd.getStartIp();
  String endIp=cmd.getEndIp();
  String gateway=cmd.getGateway();
  Long id=cmd.getId();
  String name=cmd.getPodName();
  Long userId=UserContext.current().getUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  HostPodVO pod=_podDao.findById(id);
  ;
  if (pod == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  long zoneId=pod.getDataCenterId();
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + zoneId);
  }
  if (endIp != null && startIp == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!validPod(id)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  if (gateway != null || cidr != null || startIp != null || endIp != null) {
    if (podHasAllocatedPrivateIPs(id)) {
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
  String oldPodName=pod.getName();
  if (name == null) {
    name=oldPodName;
  }
  if (gateway == null) {
    gateway=pod.getGateway();
  }
  if (cidr == null) {
    cidr=pod.getCidrAddress() + ""String_Node_Str"" + pod.getCidrSize();
  }
  boolean checkForDuplicates=!oldPodName.equals(name);
  checkPodAttributes(id,name,pod.getDataCenterId(),gateway,cidr,startIp,endIp,checkForDuplicates);
  String cidrAddress=getCidrAddress(cidr);
  int cidrSize=getCidrSize(cidr);
  if (startIp != null && endIp == null) {
    endIp=NetUtils.getIpRangeEndIpFromCidr(cidrAddress,cidrSize);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    String ipRange;
    if (startIp != null) {
      _zoneDao.deletePrivateIpAddressByPod(pod.getId());
      _zoneDao.addPrivateIpAddress(zoneId,pod.getId(),startIp,endIp);
      ipRange=startIp + ""String_Node_Str"";
      if (endIp != null) {
        ipRange+=endIp;
      }
    }
 else {
      ipRange=pod.getDescription();
    }
    pod.setName(name);
    pod.setDataCenterId(zoneId);
    pod.setGateway(gateway);
    pod.setCidrAddress(cidrAddress);
    pod.setCidrSize(cidrSize);
    pod.setDescription(ipRange);
    if (!_podDao.update(id,pod)) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    txn.commit();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    txn.rollback();
    throw new InternalErrorException(""String_Node_Str"");
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_POD_EDIT,""String_Node_Str"" + name + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"",""String_Node_Str"" + pod.getId(),""String_Node_Str"" + zone.getId(),""String_Node_Str"" + gateway,""String_Node_Str"" + cidr,""String_Node_Str"" + startIp,""String_Node_Str"" + endIp);
  return pod;
}",0.9994948644552956
107450,"public Long getStartIndex(){
  Long startIndex=Long.valueOf(0);
  Long pageSizeVal=getPageSizeVal();
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeVal * (pageNum - 1));
    }
  }
  return startIndex;
}","public Long getStartIndex(){
  Long startIndex=Long.valueOf(0);
  Long pageSizeVal=getPageSizeVal();
  if (pageSizeVal == null) {
    return null;
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeVal * (pageNum - 1));
    }
  }
  return startIndex;
}",0.9155405405405406
107451,"public Long getPageSizeVal(){
  Long pageSize=DEFAULT_PAGE_SIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null) {
    pageSize=pageSizeInt.longValue();
  }
  return pageSize;
}","public Long getPageSizeVal(){
  Long pageSize=DEFAULT_PAGE_SIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null) {
    if (pageSizeInt.longValue() == -1) {
      pageSize=null;
    }
 else {
      pageSize=pageSizeInt.longValue();
    }
  }
  return pageSize;
}",0.7787234042553192
107452,"@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<DomainResponse> getResponse(){
  List<DomainVO> domains=(List<DomainVO>)getResponseObject();
  ListResponse<DomainResponse> response=new ListResponse<DomainResponse>();
  List<DomainResponse> domainResponses=new ArrayList<DomainResponse>();
  for (  DomainVO domain : domains) {
    DomainResponse domainResponse=new DomainResponse();
    domainResponse.setDomainName(domain.getName());
    domainResponse.setId(domain.getId());
    domainResponse.setLevel(domain.getLevel());
    domainResponse.setParentDomainId(domain.getParent());
    if (domain.getParent() != null) {
      domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
    }
    domainResponse.setResponseName(""String_Node_Str"");
    domainResponses.add(domainResponse);
  }
  response.setResponses(domainResponses);
  response.setResponseName(getName());
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public ListResponse<DomainResponse> getResponse(){
  List<DomainVO> domains=(List<DomainVO>)getResponseObject();
  ListResponse<DomainResponse> response=new ListResponse<DomainResponse>();
  List<DomainResponse> domainResponses=new ArrayList<DomainResponse>();
  for (  DomainVO domain : domains) {
    DomainResponse domainResponse=new DomainResponse();
    domainResponse.setDomainName(domain.getName());
    domainResponse.setId(domain.getId());
    domainResponse.setLevel(domain.getLevel());
    domainResponse.setHasChild(domain.getChildCount() > 0);
    domainResponse.setParentDomainId(domain.getParent());
    if (domain.getParent() != null) {
      domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
    }
    domainResponse.setResponseName(""String_Node_Str"");
    domainResponses.add(domainResponse);
  }
  response.setResponses(domainResponses);
  response.setResponseName(getName());
  return response;
}",0.9692622950819672
107453,"private final void setRevertOnError(boolean revertOnError){
  _flags|=(revertOnError ? 1 : 0) << FLAG_REVERT_ON_ERROR;
}","private final void setRevertOnError(boolean revertOnError){
  _flags|=(revertOnError ? FLAG_REVERT_ON_ERROR : 0);
}",0.9361702127659576
107454,"private final void setFromServer(boolean fromServer){
  _flags|=(fromServer ? 1 : 0) << FLAG_FROM_SERVER;
}","private final void setFromServer(boolean fromServer){
  _flags|=(fromServer ? FLAG_FROM_SERVER : 0);
}",0.9282296650717704
107455,"public Hypervisor.Type getHypervisorType(){
  return _hypervisorType;
}","public HypervisorType getHypervisorType(){
  return _hypervisorType;
}",0.9929078014184396
107456,"/** 
 * Creates a new volume in a pool in the specified zone
 * @param accountId
 * @param userId
 * @param name
 * @param dc
 * @param diskOffering
 * @param size
 * @return VolumeVO
 */
VolumeVO createVolume(long volumeId,HypervisorType hyperType);","/** 
 * Creates a new volume in a pool in the specified zone
 * @param accountId
 * @param userId
 * @param name
 * @param dc
 * @param diskOffering
 * @param size
 * @return VolumeVO
 */
public VolumeVO createVolume(VolumeVO volume,VMInstanceVO vm,VMTemplateVO template,DataCenterVO dc,HostPodVO pod,Long clusterId,ServiceOfferingVO offering,DiskOfferingVO diskOffering,List<StoragePoolVO> avoids,long size,HypervisorType hyperType);",0.695906432748538
107457,"public void setState(State st){
  this.state=st;
}","public void setState(State state){
  this.state=state;
}",0.9433962264150944
107458,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  PublicSearch=createSearchBuilder();
  PublicSearch.and(""String_Node_Str"",PublicSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  routerTmpltName=(String)params.get(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + routerTmpltName);
  if (routerTmpltName == null) {
    routerTmpltName=""String_Node_Str"";
  }
  consoleProxyTmpltName=(String)params.get(""String_Node_Str"");
  if (consoleProxyTmpltName == null)   consoleProxyTmpltName=""String_Node_Str"";
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + consoleProxyTmpltName);
  TemplateNameSearch=createSearchBuilder();
  TemplateNameSearch.and(""String_Node_Str"",TemplateNameSearch.entity().getName(),SearchCriteria.Op.EQ);
  UniqueNameSearch=createSearchBuilder();
  UniqueNameSearch.and(""String_Node_Str"",UniqueNameSearch.entity().getUniqueName(),SearchCriteria.Op.EQ);
  NameSearch=createSearchBuilder();
  NameSearch.and(""String_Node_Str"",NameSearch.entity().getName(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch=createSearchBuilder();
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  tmpltTypeSearch=createSearchBuilder();
  tmpltTypeSearch.and(""String_Node_Str"",tmpltTypeSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  AccountIdSearch=createSearchBuilder();
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  AccountIdSearch.done();
  SearchBuilder<VMTemplateZoneVO> tmpltZoneSearch=_templateZoneDao.createSearchBuilder();
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getZoneId(),SearchCriteria.Op.EQ);
  TmpltsInZoneSearch=createSearchBuilder();
  TmpltsInZoneSearch.and(""String_Node_Str"",TmpltsInZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  TmpltsInZoneSearch.join(""String_Node_Str"",tmpltZoneSearch,tmpltZoneSearch.entity().getTemplateId(),TmpltsInZoneSearch.entity().getId());
  tmpltZoneSearch.done();
  TmpltsInZoneSearch.done();
  _defaultHyperType=HypervisorType.getType(_configDao.getValue(""String_Node_Str""));
  return result;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  PublicSearch=createSearchBuilder();
  PublicSearch.and(""String_Node_Str"",PublicSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  routerTmpltName=(String)params.get(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + routerTmpltName);
  if (routerTmpltName == null) {
    routerTmpltName=""String_Node_Str"";
  }
  consoleProxyTmpltName=(String)params.get(""String_Node_Str"");
  if (consoleProxyTmpltName == null)   consoleProxyTmpltName=""String_Node_Str"";
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + consoleProxyTmpltName);
  TemplateNameSearch=createSearchBuilder();
  TemplateNameSearch.and(""String_Node_Str"",TemplateNameSearch.entity().getName(),SearchCriteria.Op.EQ);
  UniqueNameSearch=createSearchBuilder();
  UniqueNameSearch.and(""String_Node_Str"",UniqueNameSearch.entity().getUniqueName(),SearchCriteria.Op.EQ);
  NameSearch=createSearchBuilder();
  NameSearch.and(""String_Node_Str"",NameSearch.entity().getName(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch=createSearchBuilder();
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  tmpltTypeHyperSearch.and(""String_Node_Str"",tmpltTypeHyperSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  tmpltTypeSearch=createSearchBuilder();
  tmpltTypeSearch.and(""String_Node_Str"",tmpltTypeSearch.entity().getTemplateType(),SearchCriteria.Op.EQ);
  AccountIdSearch=createSearchBuilder();
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().getAccountId(),SearchCriteria.Op.EQ);
  AccountIdSearch.and(""String_Node_Str"",AccountIdSearch.entity().isPublicTemplate(),SearchCriteria.Op.EQ);
  AccountIdSearch.done();
  SearchBuilder<VMTemplateZoneVO> tmpltZoneSearch=_templateZoneDao.createSearchBuilder();
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  tmpltZoneSearch.and(""String_Node_Str"",tmpltZoneSearch.entity().getZoneId(),SearchCriteria.Op.EQ);
  TmpltsInZoneSearch=createSearchBuilder();
  TmpltsInZoneSearch.and(""String_Node_Str"",TmpltsInZoneSearch.entity().getRemoved(),SearchCriteria.Op.NULL);
  TmpltsInZoneSearch.join(""String_Node_Str"",tmpltZoneSearch,tmpltZoneSearch.entity().getTemplateId(),TmpltsInZoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  tmpltZoneSearch.done();
  TmpltsInZoneSearch.done();
  _defaultHyperType=HypervisorType.getType(_configDao.getValue(""String_Node_Str""));
  return result;
}",0.9948006932409011
107459,"@Override @SuppressWarnings(""String_Node_Str"") public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  String value=null;
  _storage=(StorageLayer)params.get(StorageLayer.InstanceConfigKey);
  if (_storage == null) {
    value=(String)params.get(StorageLayer.ClassConfigKey);
    if (value == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    Class<StorageLayer> clazz;
    try {
      clazz=(Class<StorageLayer>)Class.forName(value);
    }
 catch (    ClassNotFoundException e) {
      throw new ConfigurationException(""String_Node_Str"" + value);
    }
    _storage=ComponentLocator.inject(clazz);
  }
  String useSsl=(String)params.get(""String_Node_Str"");
  if (useSsl != null) {
    _sslCopy=Boolean.parseBoolean(useSsl);
  }
  configureFolders(name,params);
  String inSystemVM=(String)params.get(""String_Node_Str"");
  if (inSystemVM != null && ""String_Node_Str"".equalsIgnoreCase(inSystemVM)) {
    s_logger.info(""String_Node_Str"");
    startAdditionalServices();
    blockOutgoingOnPrivate();
  }
  value=(String)params.get(""String_Node_Str"");
  this.installTimeoutPerGig=NumbersUtil.parseInt(value,15 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  final int numInstallThreads=NumbersUtil.parseInt(value,10);
  String scriptsDir=(String)params.get(""String_Node_Str"");
  if (scriptsDir == null) {
    scriptsDir=""String_Node_Str"";
  }
  listTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
  if (listTmpltScr == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + listTmpltScr);
  createTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
  if (createTmpltScr == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + createTmpltScr);
  List<Processor> processors=new ArrayList<Processor>();
  _processors=new Adapters<Processor>(""String_Node_Str"",processors);
  Processor processor=new VhdProcessor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  processor=new IsoProcessor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  processor=new QCOW2Processor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  processor=new VmdkProcessor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  threadPool=Executors.newFixedThreadPool(numInstallThreads);
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  String value=null;
  _storage=(StorageLayer)params.get(StorageLayer.InstanceConfigKey);
  if (_storage == null) {
    value=(String)params.get(StorageLayer.ClassConfigKey);
    if (value == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    Class<StorageLayer> clazz;
    try {
      clazz=(Class<StorageLayer>)Class.forName(value);
    }
 catch (    ClassNotFoundException e) {
      throw new ConfigurationException(""String_Node_Str"" + value);
    }
    _storage=ComponentLocator.inject(clazz);
  }
  String useSsl=(String)params.get(""String_Node_Str"");
  if (useSsl != null) {
    _sslCopy=Boolean.parseBoolean(useSsl);
  }
  configureFolders(name,params);
  String inSystemVM=(String)params.get(""String_Node_Str"");
  if (inSystemVM != null && ""String_Node_Str"".equalsIgnoreCase(inSystemVM)) {
    s_logger.info(""String_Node_Str"");
    startAdditionalServices();
    blockOutgoingOnPrivate();
  }
  value=(String)params.get(""String_Node_Str"");
  this.installTimeoutPerGig=NumbersUtil.parseInt(value,15 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  final int numInstallThreads=NumbersUtil.parseInt(value,10);
  String scriptsDir=(String)params.get(""String_Node_Str"");
  if (scriptsDir == null) {
    scriptsDir=""String_Node_Str"";
  }
  listTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
  if (listTmpltScr == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + listTmpltScr);
  createTmpltScr=Script.findScript(scriptsDir,""String_Node_Str"");
  if (createTmpltScr == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  s_logger.info(""String_Node_Str"" + createTmpltScr);
  List<Processor> processors=new ArrayList<Processor>();
  Processor processor=new VhdProcessor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  processor=new IsoProcessor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  processor=new QCOW2Processor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  processor=new VmdkProcessor();
  processor.configure(""String_Node_Str"",params);
  processors.add(processor);
  _processors=new Adapters<Processor>(""String_Node_Str"",processors);
  threadPool=Executors.newFixedThreadPool(numInstallThreads);
  return true;
}",0.9725427775567052
107460,"public boolean execute(){
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  if (getSyncSource() == null) {
    VolumeOperationParam param=gson.fromJson(job.getCmdInfo(),VolumeOperationParam.class);
    asyncMgr.syncAsyncJobExecution(job.getId(),""String_Node_Str"",param.getVolumeId());
    return true;
  }
 else {
    VolumeOperationParam param=gson.fromJson(job.getCmdInfo(),VolumeOperationParam.class);
    boolean success=false;
    String eventType=null;
    String failureDescription=""String_Node_Str"";
    try {
      VolumeVO volume=null;
      VolumeOp op=param.getOp();
      if (op == VolumeOp.Create) {
        eventType=EventTypes.EVENT_VOLUME_CREATE;
        failureDescription=""String_Node_Str"";
        volume=asyncMgr.getExecutorContext().getManagementServer().allocVolume(param.getUserId(),param.getAccountId(),param.getName(),param.getZoneId(),param.getDiskOfferingId(),param.getEventId(),param.getSize());
        if (volume.getStatus() == AsyncInstanceCreateStatus.Corrupted) {
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
        }
 else {
          success=true;
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeResultObject(volume,param));
        }
      }
 else       if (op == VolumeOp.Attach) {
        eventType=EventTypes.EVENT_VOLUME_ATTACH;
        failureDescription=""String_Node_Str"";
        asyncMgr.getExecutorContext().getManagementServer().attachVolumeToVM(param.getVmId(),param.getVolumeId(),param.getDeviceId(),param.getEventId());
        UserVm vmInstance=asyncMgr.getExecutorContext().getManagementServer().findUserVMInstanceById(param.getVmId());
        VolumeVO vol=asyncMgr.getExecutorContext().getManagementServer().findVolumeById(param.getVolumeId());
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeAttachResultObject(vmInstance,vol));
      }
 else       if (op == VolumeOp.Detach) {
        eventType=EventTypes.EVENT_VOLUME_DETACH;
        failureDescription=""String_Node_Str"";
        asyncMgr.getExecutorContext().getManagementServer().detachVolumeFromVM(param.getVolumeId(),param.getEventId(),param.getDeviceId(),param.getVmId());
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,null);
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    InternalErrorException e) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + param.getOp(),e);
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
 finally {
      if (!success) {
        asyncMgr.getExecutorContext().getManagementServer().saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,eventType,failureDescription,null,param.getEventId());
      }
    }
    return true;
  }
}","public boolean execute(){
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  if (getSyncSource() == null) {
    VolumeOperationParam param=gson.fromJson(job.getCmdInfo(),VolumeOperationParam.class);
    asyncMgr.syncAsyncJobExecution(job.getId(),""String_Node_Str"",param.getVolumeId());
    return true;
  }
 else {
    VolumeOperationParam param=gson.fromJson(job.getCmdInfo(),VolumeOperationParam.class);
    boolean success=false;
    String eventType=null;
    String failureDescription=""String_Node_Str"";
    try {
      VolumeVO volume=null;
      VolumeOp op=param.getOp();
      if (op == VolumeOp.Create) {
        eventType=EventTypes.EVENT_VOLUME_CREATE;
        failureDescription=""String_Node_Str"";
        volume=asyncMgr.getExecutorContext().getManagementServer().createVolume(param.getUserId(),param.getAccountId(),param.getName(),param.getZoneId(),param.getDiskOfferingId(),param.getEventId(),param.getSize());
        if (volume.getStatus() == AsyncInstanceCreateStatus.Corrupted) {
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
        }
 else {
          success=true;
          asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeResultObject(volume,param));
        }
      }
 else       if (op == VolumeOp.Attach) {
        eventType=EventTypes.EVENT_VOLUME_ATTACH;
        failureDescription=""String_Node_Str"";
        asyncMgr.getExecutorContext().getManagementServer().attachVolumeToVM(param.getVmId(),param.getVolumeId(),param.getDeviceId(),param.getEventId());
        UserVm vmInstance=asyncMgr.getExecutorContext().getManagementServer().findUserVMInstanceById(param.getVmId());
        VolumeVO vol=asyncMgr.getExecutorContext().getManagementServer().findVolumeById(param.getVolumeId());
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,composeAttachResultObject(vmInstance,vol));
      }
 else       if (op == VolumeOp.Detach) {
        eventType=EventTypes.EVENT_VOLUME_DETACH;
        failureDescription=""String_Node_Str"";
        asyncMgr.getExecutorContext().getManagementServer().detachVolumeFromVM(param.getVolumeId(),param.getEventId(),param.getDeviceId(),param.getVmId());
        success=true;
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,null);
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    InternalErrorException e) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + param.getOp(),e);
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
 finally {
      if (!success) {
        asyncMgr.getExecutorContext().getManagementServer().saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,eventType,failureDescription,null,param.getEventId());
      }
    }
    return true;
  }
}",0.9982625177697046
107461,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password) throws DiscoveryException {
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    sshSession=sshConnection.openSession();
    sshSession.execCommand(""String_Node_Str"");
    if (sshSession.getExitStatus() != 0) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    if (!sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    s_logger.debug(""String_Node_Str"" + _setupAgentPath + ""String_Node_Str"");
    SCPClient scp=new SCPClient(sshConnection);
    scp.put(_setupAgentPath,""String_Node_Str"",""String_Node_Str"");
    sshExecuteCmd(sshConnection,""String_Node_Str"" + ""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ guid+ ""String_Node_Str"",3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guid + ""String_Node_Str"");
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    kvmResource.setRemoteAgent(true);
    resources.put(kvmResource,details);
    ClusterVO clu=_clusterDao.findById(clusterId);
    clu.setHypervisorType(HypervisorType.KVM.toString());
    _clusterDao.update(clusterId,clu);
    return resources;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password) throws DiscoveryException {
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    if (!sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    s_logger.debug(""String_Node_Str"" + _setupAgentPath + ""String_Node_Str"");
    SCPClient scp=new SCPClient(sshConnection);
    scp.put(_setupAgentPath,""String_Node_Str"",""String_Node_Str"");
    sshExecuteCmd(sshConnection,""String_Node_Str"" + ""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ guid+ ""String_Node_Str"",3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guid + ""String_Node_Str"");
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    kvmResource.setRemoteAgent(true);
    resources.put(kvmResource,details);
    ClusterVO clu=_clusterDao.findById(clusterId);
    clu.setHypervisorType(HypervisorType.KVM.toString());
    _clusterDao.update(clusterId,clu);
    return resources;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}",0.9609527528309254
107462,"@Override @DB public VolumeVO allocVolume(long accountId,long userId,String userSpecifiedName,DataCenterVO dc,DiskOfferingVO diskOffering,long startEventId,long size){
  String volumeName=""String_Node_Str"";
  VolumeVO createdVolume=null;
  try {
    volumeName=getRandomVolumeName();
    Account account=_accountDao.findById(accountId);
    VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
    volume.setPoolId(null);
    volume.setDataCenterId(dc.getId());
    volume.setPodId(null);
    volume.setAccountId(accountId);
    volume.setDomainId(account.getDomainId());
    volume.setMirrorState(MirrorState.NOT_MIRRORED);
    volume.setDiskOfferingId(diskOffering.getId());
    volume.setStorageResourceType(Storage.StorageResourceType.STORAGE_POOL);
    volume.setInstanceId(null);
    volume.setUpdated(new Date());
    volume.setStatus(AsyncInstanceCreateStatus.Created);
    volume.setDomainId(account.getDomainId());
    volume.setSourceId(diskOffering.getId());
    volume.setSourceType(SourceType.DiskOffering);
    volume.setState(Volume.State.Allocated);
    volume=_volsDao.persist(volume);
    AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
    if (asyncExecutor != null) {
      AsyncJobVO job=asyncExecutor.getJob();
      if (s_logger.isInfoEnabled())       s_logger.info(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
      _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volume.getId());
      _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volume.getId());
    }
    createdVolume=volume;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + volumeName,e);
  }
  return createdVolume;
}","@Override @DB public VolumeVO allocVolume(long accountId,long userId,String userSpecifiedName,DataCenterVO dc,DiskOfferingVO diskOffering,long startEventId,long size){
  String volumeName=""String_Node_Str"";
  VolumeVO allocatedVolume=null;
  try {
    volumeName=getRandomVolumeName();
    Account account=_accountDao.findById(accountId);
    VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
    volume.setPoolId(null);
    volume.setDataCenterId(dc.getId());
    volume.setPodId(null);
    volume.setAccountId(accountId);
    volume.setDomainId(account.getDomainId());
    volume.setMirrorState(MirrorState.NOT_MIRRORED);
    volume.setDiskOfferingId(diskOffering.getId());
    volume.setStorageResourceType(Storage.StorageResourceType.STORAGE_POOL);
    volume.setInstanceId(null);
    volume.setUpdated(new Date());
    volume.setStatus(AsyncInstanceCreateStatus.Created);
    volume.setDomainId(account.getDomainId());
    volume.setSourceId(diskOffering.getId());
    volume.setSourceType(SourceType.DiskOffering);
    volume.setState(Volume.State.Allocated);
    volume=_volsDao.persist(volume);
    allocatedVolume=volume;
    AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
    if (asyncExecutor != null) {
      AsyncJobVO job=asyncExecutor.getJob();
      if (s_logger.isInfoEnabled())       s_logger.info(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
      _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volume.getId());
      _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volume.getId());
    }
    EventVO event=new EventVO();
    event.setAccountId(accountId);
    event.setType(EventTypes.EVENT_VOLUME_CREATE);
    Transaction txn=Transaction.currentTxn();
    txn.start();
    if (allocatedVolume != null) {
      _accountMgr.incrementResourceCount(accountId,ResourceType.volume);
      long sizeMB=allocatedVolume.getSize() / (1024 * 1024);
      String eventParams=""String_Node_Str"" + allocatedVolume.getId() + ""String_Node_Str""+ diskOffering.getId()+ ""String_Node_Str""+ -1+ ""String_Node_Str""+ dc.getId()+ ""String_Node_Str""+ sizeMB;
      event.setLevel(EventVO.LEVEL_INFO);
      event.setDescription(""String_Node_Str"" + allocatedVolume.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
      event.setParameters(eventParams);
      _eventDao.persist(event);
    }
 else {
      volume.setStatus(AsyncInstanceCreateStatus.Corrupted);
      volume.setDestroyed(true);
      _volsDao.update(volume.getId(),volume);
    }
    txn.commit();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + volumeName,e);
  }
  return allocatedVolume;
}",0.7775340061430452
107463,"@Override public void attachVolumeToVM(long vmId,long volumeId,Long deviceId,long startEventId) throws InternalErrorException {
  VolumeVO volume=_volsDao.findById(volumeId);
  UserVmVO vm=_vmDao.findById(vmId);
  EventVO event=new EventVO();
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setUserId(1L);
  event.setAccountId(volume.getAccountId());
  event.setState(EventState.Started);
  event.setStartId(startEventId);
  event.setDescription(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId);
  _eventDao.persist(event);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,VolumeType.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new InternalErrorException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  if (volume.getState().equals(Volume.State.Allocated)) {
    volume=_storageMgr.createVolume(volumeId,_volsDao.getHypervisorType(rootVolumeOfVm.getId()));
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new InternalErrorException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId());
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId);
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new InternalErrorException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  event=new EventVO();
  event.setAccountId(volume.getAccountId());
  event.setUserId(1L);
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setState(EventState.Completed);
  event.setStartId(startEventId);
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    if (!vm.getName().equals(vm.getDisplayName()))     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getDisplayName()+ ""String_Node_Str"");
 else     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    _eventDao.persist(event);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty())       errorMsg+=""String_Node_Str"" + details;
    }
    throw new InternalErrorException(errorMsg);
  }
}","@Override public void attachVolumeToVM(long vmId,long volumeId,Long deviceId,long startEventId) throws InternalErrorException {
  VolumeVO volume=_volsDao.findById(volumeId);
  UserVmVO vm=_vmDao.findById(vmId);
  EventVO event=new EventVO();
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setUserId(1L);
  event.setAccountId(volume.getAccountId());
  event.setState(EventState.Started);
  event.setStartId(startEventId);
  event.setDescription(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vmId);
  _eventDao.persist(event);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,VolumeType.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new InternalErrorException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(vm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new InternalErrorException(""String_Node_Str"" + vm.getName());
    }
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new InternalErrorException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId());
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId);
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new InternalErrorException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  event=new EventVO();
  event.setAccountId(volume.getAccountId());
  event.setUserId(1L);
  event.setType(EventTypes.EVENT_VOLUME_ATTACH);
  event.setState(EventState.Completed);
  event.setStartId(startEventId);
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    if (!vm.getName().equals(vm.getDisplayName()))     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getDisplayName()+ ""String_Node_Str"");
 else     event.setDescription(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getName());
    event.setLevel(EventVO.LEVEL_INFO);
    _eventDao.persist(event);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty())       errorMsg+=""String_Node_Str"" + details;
    }
    throw new InternalErrorException(errorMsg);
  }
}",0.9328161109276988
107464,"@Override @DB public boolean stop(DomainRouterVO router,long eventId){
  long routerId=router.getId();
  router=_routerDao.acquire(routerId);
  if (router == null) {
    s_logger.debug(""String_Node_Str"" + routerId);
    return false;
  }
  EventVO event=new EventVO();
  event.setUserId(1L);
  event.setAccountId(router.getAccountId());
  event.setType(EventTypes.EVENT_ROUTER_STOP);
  event.setState(EventState.Started);
  event.setDescription(""String_Node_Str"" + routerId);
  event.setStartId(eventId);
  _eventDao.persist(event);
  try {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + routerId + ""String_Node_Str"");
    if (router.getRemoved() != null) {
      s_logger.debug(""String_Node_Str"" + routerId + ""String_Node_Str"");
      return false;
    }
    final Long hostId=router.getHostId();
    final State state=router.getState();
    if (state == State.Stopped || state == State.Destroyed || state == State.Expunging || router.getRemoved() != null) {
      s_logger.debug(""String_Node_Str"");
      return true;
    }
    event=new EventVO();
    event.setUserId(1L);
    event.setAccountId(router.getAccountId());
    event.setType(EventTypes.EVENT_ROUTER_STOP);
    event.setStartId(eventId);
    if (!_routerDao.updateIf(router,Event.StopRequested,hostId)) {
      s_logger.debug(""String_Node_Str"" + router.toString() + ""String_Node_Str"");
      return false;
    }
    if (hostId == null) {
      s_logger.debug(""String_Node_Str"" + router.toString() + ""String_Node_Str"");
      return false;
    }
    final StopCommand stop=new StopCommand(router,router.getInstanceName(),router.getVnet(),router.getPrivateIpAddress());
    Answer answer=null;
    boolean stopped=false;
    try {
      answer=_agentMgr.send(hostId,stop);
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"");
        event.setDescription(""String_Node_Str"" + router.getName());
        event.setLevel(EventVO.LEVEL_ERROR);
        _eventDao.persist(event);
      }
 else {
        stopped=true;
      }
    }
 catch (    AgentUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + router.getId());
    }
catch (    OperationTimedoutException e) {
      s_logger.warn(""String_Node_Str"" + router.getId());
      s_logger.error(""String_Node_Str"");
    }
    if (!stopped) {
      event.setDescription(""String_Node_Str"" + router.getName());
      event.setLevel(EventVO.LEVEL_ERROR);
      _eventDao.persist(event);
      _routerDao.updateIf(router,Event.OperationFailed,router.getHostId());
      return false;
    }
    completeStopCommand(router,Event.OperationSucceeded);
    event.setDescription(""String_Node_Str"" + router.getName());
    _eventDao.persist(event);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + router.toString() + ""String_Node_Str"");
    }
    processStopOrRebootAnswer(router,answer);
  }
  finally {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + routerId + ""String_Node_Str"");
    _routerDao.release(routerId);
  }
  return true;
}","@Override @DB public boolean stop(DomainRouterVO router,long eventId){
  long routerId=router.getId();
  router=_routerDao.acquire(routerId);
  if (router == null) {
    s_logger.debug(""String_Node_Str"" + routerId);
    return false;
  }
  EventVO event=new EventVO();
  event.setUserId(1L);
  event.setAccountId(router.getAccountId());
  event.setType(EventTypes.EVENT_ROUTER_STOP);
  event.setState(EventState.Started);
  event.setDescription(""String_Node_Str"" + routerId);
  event.setStartId(eventId);
  event=_eventDao.persist(event);
  if (eventId == 0) {
    eventId=event.getId();
  }
  try {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + routerId + ""String_Node_Str"");
    if (router.getRemoved() != null) {
      s_logger.debug(""String_Node_Str"" + routerId + ""String_Node_Str"");
      return false;
    }
    final Long hostId=router.getHostId();
    final State state=router.getState();
    if (state == State.Stopped || state == State.Destroyed || state == State.Expunging || router.getRemoved() != null) {
      s_logger.debug(""String_Node_Str"");
      return true;
    }
    event=new EventVO();
    event.setUserId(1L);
    event.setAccountId(router.getAccountId());
    event.setType(EventTypes.EVENT_ROUTER_STOP);
    event.setStartId(eventId);
    if (!_routerDao.updateIf(router,Event.StopRequested,hostId)) {
      s_logger.debug(""String_Node_Str"" + router.toString() + ""String_Node_Str"");
      return false;
    }
    if (hostId == null) {
      s_logger.debug(""String_Node_Str"" + router.toString() + ""String_Node_Str"");
      return false;
    }
    final StopCommand stop=new StopCommand(router,router.getInstanceName(),router.getVnet(),router.getPrivateIpAddress());
    Answer answer=null;
    boolean stopped=false;
    try {
      answer=_agentMgr.send(hostId,stop);
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"");
        event.setDescription(""String_Node_Str"" + router.getName());
        event.setLevel(EventVO.LEVEL_ERROR);
        _eventDao.persist(event);
      }
 else {
        stopped=true;
      }
    }
 catch (    AgentUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + router.getId());
    }
catch (    OperationTimedoutException e) {
      s_logger.warn(""String_Node_Str"" + router.getId());
      s_logger.error(""String_Node_Str"");
    }
    if (!stopped) {
      event.setDescription(""String_Node_Str"" + router.getName());
      event.setLevel(EventVO.LEVEL_ERROR);
      _eventDao.persist(event);
      _routerDao.updateIf(router,Event.OperationFailed,router.getHostId());
      return false;
    }
    completeStopCommand(router,Event.OperationSucceeded);
    event.setDescription(""String_Node_Str"" + router.getName());
    _eventDao.persist(event);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + router.toString() + ""String_Node_Str"");
    }
    processStopOrRebootAnswer(router,answer);
  }
  finally {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + routerId + ""String_Node_Str"");
    _routerDao.release(routerId);
  }
  return true;
}",0.9904236325271872
107465,"@Override public DomainRouterVO addVirtualMachineToGuestNetwork(UserVmVO vm,String password,long startEventId) throws ConcurrentOperationException {
  try {
    DomainRouterVO router=start(vm.getDomainRouterId(),startEventId);
    if (router == null) {
      s_logger.error(""String_Node_Str"" + vm.getName());
      return null;
    }
    if (vm.getGuestMacAddress() == null) {
      String routerGuestMacAddress=null;
      if (USE_POD_VLAN) {
        if ((vm.getPodId() == router.getPodId())) {
          routerGuestMacAddress=router.getGuestMacAddress();
        }
 else {
          routerGuestMacAddress=router.getGuestZoneMacAddress();
        }
        String vmMacAddress=NetUtils.long2Mac((NetUtils.mac2Long(routerGuestMacAddress) & 0xffffffff0000L) | (NetUtils.ip2Long(vm.getGuestIpAddress()) & 0xffff));
        vm.setGuestMacAddress(vmMacAddress);
      }
 else {
        String vmMacAddress=NetUtils.long2Mac((NetUtils.mac2Long(router.getGuestMacAddress()) & 0xffffffff0000L) | (NetUtils.ip2Long(vm.getGuestIpAddress()) & 0xffff));
        vm.setGuestMacAddress(vmMacAddress);
      }
    }
    String userData=vm.getUserData();
    int cmdsLength=(password == null ? 0 : 1) + 1;
    Command[] cmds=new Command[++cmdsLength];
    int cmdIndex=0;
    int passwordIndex=-1;
    int vmDataIndex=-1;
    cmds[cmdIndex]=new DhcpEntryCommand(vm.getGuestMacAddress(),vm.getGuestIpAddress(),router.getPrivateIpAddress(),vm.getName());
    if (password != null) {
      final String encodedPassword=rot13(password);
      cmds[++cmdIndex]=new SavePasswordCommand(encodedPassword,vm.getPrivateIpAddress(),router.getPrivateIpAddress(),vm.getName());
      passwordIndex=cmdIndex;
    }
    String serviceOffering=_serviceOfferingDao.findById(vm.getServiceOfferingId()).getDisplayText();
    String zoneName=_dcDao.findById(vm.getDataCenterId()).getName();
    String routerPublicIpAddress=(router.getPublicIpAddress() != null) ? router.getPublicIpAddress() : vm.getGuestIpAddress();
    cmds[++cmdIndex]=generateVmDataCommand(router.getPrivateIpAddress(),routerPublicIpAddress,vm.getPrivateIpAddress(),userData,serviceOffering,zoneName,vm.getGuestIpAddress(),vm.getName(),vm.getInstanceName(),vm.getId());
    vmDataIndex=cmdIndex;
    Answer[] answers=_agentMgr.send(router.getHostId(),cmds,true);
    if (!answers[0].getResult()) {
      s_logger.error(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ router.getName()+ ""String_Node_Str""+ answers[0].getDetails());
      return null;
    }
    if (password != null && !answers[passwordIndex].getResult()) {
      s_logger.error(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ answers[passwordIndex].getDetails());
      return null;
    }
    if (vmDataIndex > 0 && !answers[vmDataIndex].getResult()) {
      s_logger.error(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ answers[vmDataIndex].getDetails());
      return null;
    }
    return router;
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(""String_Node_Str"" + vm.getDomainRouterId() + ""String_Node_Str"");
    return null;
  }
catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + vm.getDomainRouterId() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getName()+ ""String_Node_Str"");
    return null;
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + vm.getDomainRouterId() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getName()+ ""String_Node_Str"");
    return null;
  }
}","@Override public DomainRouterVO addVirtualMachineToGuestNetwork(UserVmVO vm,String password,long startEventId) throws ConcurrentOperationException {
  try {
    DomainRouterVO router=start(vm.getDomainRouterId(),0);
    if (router == null) {
      s_logger.error(""String_Node_Str"" + vm.getName());
      return null;
    }
    if (vm.getGuestMacAddress() == null) {
      String routerGuestMacAddress=null;
      if (USE_POD_VLAN) {
        if ((vm.getPodId() == router.getPodId())) {
          routerGuestMacAddress=router.getGuestMacAddress();
        }
 else {
          routerGuestMacAddress=router.getGuestZoneMacAddress();
        }
        String vmMacAddress=NetUtils.long2Mac((NetUtils.mac2Long(routerGuestMacAddress) & 0xffffffff0000L) | (NetUtils.ip2Long(vm.getGuestIpAddress()) & 0xffff));
        vm.setGuestMacAddress(vmMacAddress);
      }
 else {
        String vmMacAddress=NetUtils.long2Mac((NetUtils.mac2Long(router.getGuestMacAddress()) & 0xffffffff0000L) | (NetUtils.ip2Long(vm.getGuestIpAddress()) & 0xffff));
        vm.setGuestMacAddress(vmMacAddress);
      }
    }
    String userData=vm.getUserData();
    int cmdsLength=(password == null ? 0 : 1) + 1;
    Command[] cmds=new Command[++cmdsLength];
    int cmdIndex=0;
    int passwordIndex=-1;
    int vmDataIndex=-1;
    cmds[cmdIndex]=new DhcpEntryCommand(vm.getGuestMacAddress(),vm.getGuestIpAddress(),router.getPrivateIpAddress(),vm.getName());
    if (password != null) {
      final String encodedPassword=rot13(password);
      cmds[++cmdIndex]=new SavePasswordCommand(encodedPassword,vm.getPrivateIpAddress(),router.getPrivateIpAddress(),vm.getName());
      passwordIndex=cmdIndex;
    }
    String serviceOffering=_serviceOfferingDao.findById(vm.getServiceOfferingId()).getDisplayText();
    String zoneName=_dcDao.findById(vm.getDataCenterId()).getName();
    String routerPublicIpAddress=(router.getPublicIpAddress() != null) ? router.getPublicIpAddress() : vm.getGuestIpAddress();
    cmds[++cmdIndex]=generateVmDataCommand(router.getPrivateIpAddress(),routerPublicIpAddress,vm.getPrivateIpAddress(),userData,serviceOffering,zoneName,vm.getGuestIpAddress(),vm.getName(),vm.getInstanceName(),vm.getId());
    vmDataIndex=cmdIndex;
    Answer[] answers=_agentMgr.send(router.getHostId(),cmds,true);
    if (!answers[0].getResult()) {
      s_logger.error(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ router.getName()+ ""String_Node_Str""+ answers[0].getDetails());
      return null;
    }
    if (password != null && !answers[passwordIndex].getResult()) {
      s_logger.error(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ answers[passwordIndex].getDetails());
      return null;
    }
    if (vmDataIndex > 0 && !answers[vmDataIndex].getResult()) {
      s_logger.error(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ answers[vmDataIndex].getDetails());
      return null;
    }
    return router;
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(""String_Node_Str"" + vm.getDomainRouterId() + ""String_Node_Str"");
    return null;
  }
catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + vm.getDomainRouterId() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getName()+ ""String_Node_Str"");
    return null;
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + vm.getDomainRouterId() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getName()+ ""String_Node_Str"");
    return null;
  }
}",0.9981846110878368
107466,"@Override public String assignIpAddress(long accountId,long domainId,long vlanDbId,boolean sourceNat){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    SearchCriteria<IPAddressVO> sc=VlanDbIdSearchUnallocated.create();
    sc.setParameters(""String_Node_Str"",vlanDbId);
    IPAddressVO ip=this.lock(sc,true);
    if (ip != null) {
      ip.setAccountId(accountId);
      ip.setAllocated(new Date());
      ip.setDomainId(domainId);
      ip.setSourceNat(sourceNat);
      if (!update(ip.getAddress(),ip)) {
        s_logger.debug(""String_Node_Str"");
        return null;
      }
      txn.commit();
      return ip.getAddress();
    }
 else {
      txn.rollback();
      s_logger.error(""String_Node_Str"" + vlanDbId);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return null;
}","@Override public String assignIpAddress(long accountId,long domainId,long vlanDbId,boolean sourceNat){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    SearchCriteria<IPAddressVO> sc=VlanDbIdSearchUnallocated.create();
    sc.setParameters(""String_Node_Str"",vlanDbId);
    IPAddressVO ip=this.lock(sc,true);
    if (ip != null) {
      ip.setAccountId(accountId);
      ip.setAllocated(new Date());
      ip.setDomainId(domainId);
      ip.setSourceNat(sourceNat);
      if (!update(ip.getAddress(),ip)) {
        s_logger.debug(""String_Node_Str"");
        return null;
      }
      txn.commit();
      return ip.getAddress();
    }
 else {
      txn.rollback();
      s_logger.warn(""String_Node_Str"" + vlanDbId);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return null;
}",0.9946075494307968
107467,"@Override public VlanVO createVlanAndPublicIpRange(long userId,VlanType vlanType,Long zoneId,Long accountId,Long podId,String vlanId,String vlanGateway,String vlanNetmask,String startIP,String endIP) throws InvalidParameterValueException, InternalErrorException {
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new InternalErrorException(""String_Node_Str"");
      }
    }
  }
  if (!vlanId.equals(Vlan.UNTAGGED)) {
    VlanVO vlanHandle=_vlanDao.findByZoneAndVlanId(zoneId,vlanId);
    if (vlanHandle != null && !vlanHandle.getVlanType().equals(vlanType))     throw new InvalidParameterValueException(""String_Node_Str"" + vlanHandle.getVlanType().toString() + ""String_Node_Str""+ vlanType.toString());
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (!(accountId == null && podId == null) && false) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (!((accountId != null && podId == null) || (accountId == null && podId != null))) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (accountId != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      AccountVO account;
      if ((account=_accountDao.findById(accountId)) == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAccountVlanMapsByAccount(accountId);
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      HostPodVO pod=null;
      if (podId != null && ((pod=_podDao.findById(podId)) == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
  String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
  long guestCidrSize=Long.parseLong(cidrPair[1]);
  long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
  long cidrSizeToUse=-1;
  if (vlanCidrSize < guestCidrSize) {
    cidrSizeToUse=vlanCidrSize;
  }
 else {
    cidrSizeToUse=guestCidrSize;
  }
  String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
  if (newVlanSubnet.equals(guestSubnet)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.findByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange);
  vlan=_vlanDao.persist(vlan);
  if (accountId != null && vlanType.equals(VlanType.VirtualNetwork)) {
    if (!savePublicIPRangeForAccount(startIP,endIP,zoneId,vlan.getId(),accountId,_accountDao.findById(accountId).getDomainId())) {
      deletePublicIPRange(vlan.getId());
      _vlanDao.expunge(vlan.getId());
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
 else   if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new InternalErrorException(""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(accountId,vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  saveConfigurationEvent(userId,accountId,EventTypes.EVENT_VLAN_IP_RANGE_CREATE,eventMsg,""String_Node_Str"" + vlanType,""String_Node_Str"" + zoneId,""String_Node_Str"" + accountId,""String_Node_Str"" + podId,""String_Node_Str"" + vlanId,""String_Node_Str"" + vlanGateway,""String_Node_Str"" + vlanNetmask,""String_Node_Str"" + startIP,""String_Node_Str"" + endIP);
  return vlan;
}","@Override public VlanVO createVlanAndPublicIpRange(long userId,VlanType vlanType,Long zoneId,Long accountId,Long podId,String vlanId,String vlanGateway,String vlanNetmask,String startIP,String endIP) throws InvalidParameterValueException, InternalErrorException {
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new InternalErrorException(""String_Node_Str"");
      }
    }
  }
  if (!vlanId.equals(Vlan.UNTAGGED)) {
    VlanVO vlanHandle=_vlanDao.findByZoneAndVlanId(zoneId,vlanId);
    if (vlanHandle != null && !vlanHandle.getVlanType().equals(vlanType))     throw new InvalidParameterValueException(""String_Node_Str"" + vlanHandle.getVlanType().toString() + ""String_Node_Str""+ vlanType.toString());
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (!(accountId == null && podId == null) && false) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (!((accountId != null && podId == null) || (accountId == null && podId != null))) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (accountId != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      AccountVO account;
      if ((account=_accountDao.findById(accountId)) == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      HostPodVO pod=null;
      if (podId != null && ((pod=_podDao.findById(podId)) == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
  String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
  long guestCidrSize=Long.parseLong(cidrPair[1]);
  long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
  long cidrSizeToUse=-1;
  if (vlanCidrSize < guestCidrSize) {
    cidrSizeToUse=vlanCidrSize;
  }
 else {
    cidrSizeToUse=guestCidrSize;
  }
  String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
  if (newVlanSubnet.equals(guestSubnet)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.findByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange);
  vlan=_vlanDao.persist(vlan);
  if (accountId != null && vlanType.equals(VlanType.VirtualNetwork)) {
    if (!savePublicIPRangeForAccount(startIP,endIP,zoneId,vlan.getId(),accountId,_accountDao.findById(accountId).getDomainId())) {
      deletePublicIPRange(vlan.getId());
      _vlanDao.expunge(vlan.getId());
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
 else   if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new InternalErrorException(""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(accountId,vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  saveConfigurationEvent(userId,accountId,EventTypes.EVENT_VLAN_IP_RANGE_CREATE,eventMsg,""String_Node_Str"" + vlanType,""String_Node_Str"" + zoneId,""String_Node_Str"" + accountId,""String_Node_Str"" + podId,""String_Node_Str"" + vlanId,""String_Node_Str"" + vlanGateway,""String_Node_Str"" + vlanNetmask,""String_Node_Str"" + startIP,""String_Node_Str"" + endIP);
  return vlan;
}",0.9684790644532564
107468,"private VmResultObject composeResultObject(UserVmVO vm,ManagementServer ms){
  if (vm == null)   return null;
  VmResultObject resultObj=new VmResultObject();
  Account acct=ms.findAccountById(Long.valueOf(vm.getAccountId()));
  resultObj.setAccount(acct.getAccountName());
  ServiceOfferingVO offering=ms.findServiceOfferingById(vm.getServiceOfferingId());
  resultObj.setCpuSpeed(offering.getSpeed());
  resultObj.setMemory(offering.getRamSize());
  if (offering.getName() != null)   resultObj.setServiceOfferingName(offering.getName());
 else   resultObj.setServiceOfferingName(offering.getDisplayText());
  resultObj.setServiceOfferingId(vm.getServiceOfferingId());
  VmStats vmStats=ms.getVmStatistics(vm.getId());
  if (vmStats != null) {
    resultObj.setCpuUsed((long)vmStats.getCPUUtilization());
    resultObj.setNetworkKbsRead((long)vmStats.getNetworkReadKBs());
    resultObj.setNetworkKbsWrite((long)vmStats.getNetworkWriteKBs());
  }
  resultObj.setCreated(vm.getCreated());
  resultObj.setDisplayName(vm.getDisplayName());
  resultObj.setDomain(ms.findDomainIdById(acct.getDomainId()).getName());
  resultObj.setDomainId(acct.getDomainId());
  resultObj.setHaEnable(vm.isHaEnabled());
  if (vm.getHostId() != null) {
    resultObj.setHostId(vm.getHostId());
    resultObj.setHostName(ms.getHostBy(vm.getHostId()).getName());
  }
  resultObj.setIpAddress(vm.getPrivateIpAddress());
  resultObj.setName(vm.getName());
  resultObj.setState(vm.getState().toString());
  resultObj.setZoneId(vm.getDataCenterId());
  resultObj.setZoneName(ms.findDataCenterById(vm.getDataCenterId()).getName());
  VMTemplateVO template=ms.findTemplateById(vm.getTemplateId());
  resultObj.setPasswordEnabled(template.getEnablePassword());
  resultObj.setTemplateDisplayText(template.getDisplayText());
  resultObj.setTemplateId(template.getId());
  resultObj.setTemplateName(template.getName());
  return resultObj;
}","private VmResultObject composeResultObject(UserVmVO vm,ManagementServer ms){
  if (vm == null)   return null;
  VmResultObject resultObj=new VmResultObject();
  Account acct=ms.findAccountById(Long.valueOf(vm.getAccountId()));
  resultObj.setAccount(acct.getAccountName());
  ServiceOfferingVO offering=ms.findServiceOfferingById(vm.getServiceOfferingId());
  resultObj.setCpuSpeed(offering.getSpeed());
  resultObj.setMemory(offering.getRamSize());
  if (offering.getName() != null)   resultObj.setServiceOfferingName(offering.getName());
 else   resultObj.setServiceOfferingName(offering.getDisplayText());
  resultObj.setServiceOfferingId(vm.getServiceOfferingId());
  VmStats vmStats=ms.getVmStatistics(vm.getId());
  if (vmStats != null) {
    resultObj.setCpuUsed((long)vmStats.getCPUUtilization());
    resultObj.setNetworkKbsRead((long)vmStats.getNetworkReadKBs());
    resultObj.setNetworkKbsWrite((long)vmStats.getNetworkWriteKBs());
  }
  resultObj.setCreated(vm.getCreated());
  resultObj.setDisplayName(vm.getDisplayName());
  resultObj.setDomain(ms.findDomainIdById(acct.getDomainId()).getName());
  resultObj.setDomainId(acct.getDomainId());
  resultObj.setHaEnable(vm.isHaEnabled());
  if (vm.getHostId() != null) {
    resultObj.setHostId(vm.getHostId());
    resultObj.setHostName(ms.getHostBy(vm.getHostId()).getName());
  }
  resultObj.setIpAddress(vm.getPrivateIpAddress());
  resultObj.setName(vm.getName());
  resultObj.setState(vm.getState().toString());
  resultObj.setZoneId(vm.getDataCenterId());
  resultObj.setZoneName(ms.findDataCenterById(vm.getDataCenterId()).getName());
  VMTemplateVO template=ms.findTemplateById(vm.getTemplateId());
  resultObj.setPasswordEnabled(template.getEnablePassword());
  resultObj.setTemplateDisplayText(template.getDisplayText());
  resultObj.setTemplateId(template.getId());
  resultObj.setTemplateName(template.getName());
  resultObj.setId(vm.getId());
  return resultObj;
}",0.9919459599896076
107469,"public long getHostId(){
  return hostId;
}","public Long getHostId(){
  return hostId;
}",0.9767441860465116
107470,"public void setHostId(long hostId){
  this.hostId=hostId;
}","public void setHostId(Long hostId){
  this.hostId=hostId;
}",0.9830508474576272
107471,"private VmResultObject composeResultObject(UserVmVO vm,ManagementServer ms){
  if (vm == null)   return null;
  VmResultObject resultObj=new VmResultObject();
  Account acct=ms.findAccountById(Long.valueOf(vm.getAccountId()));
  resultObj.setAccount(acct.getAccountName());
  ServiceOfferingVO offering=ms.findServiceOfferingById(vm.getServiceOfferingId());
  resultObj.setCpuSpeed(offering.getSpeed());
  resultObj.setMemory(offering.getRamSize());
  if (offering.getDisplayText() != null)   resultObj.setServiceOfferingName(offering.getDisplayText());
 else   resultObj.setServiceOfferingName(offering.getName());
  resultObj.setServiceOfferingId(vm.getServiceOfferingId());
  VmStats vmStats=ms.getVmStatistics(vm.getId());
  if (vmStats != null) {
    resultObj.setCpuUsed((long)vmStats.getCPUUtilization());
    resultObj.setNetworkKbsRead((long)vmStats.getNetworkReadKBs());
    resultObj.setNetworkKbsWrite((long)vmStats.getNetworkWriteKBs());
  }
  resultObj.setCreated(vm.getCreated());
  resultObj.setDisplayName(vm.getDisplayName());
  resultObj.setDomain(ms.findDomainIdById(acct.getDomainId()).getName());
  resultObj.setDomainId(acct.getDomainId());
  resultObj.setHaEnable(vm.isHaEnabled());
  if (vm.getHostId() != null) {
    resultObj.setHostId(vm.getHostId());
    resultObj.setHostName(ms.getHostBy(vm.getHostId()).getName());
  }
  resultObj.setIpAddress(vm.getPrivateIpAddress());
  resultObj.setName(vm.getName());
  resultObj.setState(vm.getState().toString());
  resultObj.setZoneId(vm.getDataCenterId());
  resultObj.setZoneName(ms.findDataCenterById(vm.getDataCenterId()).getName());
  VMTemplateVO template=ms.findTemplateById(vm.getTemplateId());
  resultObj.setPasswordEnabled(template.getEnablePassword());
  resultObj.setTemplateDisplayText(template.getDisplayText());
  resultObj.setTemplateId(template.getId());
  resultObj.setTemplateName(template.getName());
  return resultObj;
}","private VmResultObject composeResultObject(UserVmVO vm,ManagementServer ms){
  if (vm == null)   return null;
  VmResultObject resultObj=new VmResultObject();
  Account acct=ms.findAccountById(Long.valueOf(vm.getAccountId()));
  resultObj.setAccount(acct.getAccountName());
  ServiceOfferingVO offering=ms.findServiceOfferingById(vm.getServiceOfferingId());
  resultObj.setCpuSpeed(offering.getSpeed());
  resultObj.setMemory(offering.getRamSize());
  if (offering.getName() != null)   resultObj.setServiceOfferingName(offering.getName());
 else   resultObj.setServiceOfferingName(offering.getDisplayText());
  resultObj.setServiceOfferingId(vm.getServiceOfferingId());
  VmStats vmStats=ms.getVmStatistics(vm.getId());
  if (vmStats != null) {
    resultObj.setCpuUsed((long)vmStats.getCPUUtilization());
    resultObj.setNetworkKbsRead((long)vmStats.getNetworkReadKBs());
    resultObj.setNetworkKbsWrite((long)vmStats.getNetworkWriteKBs());
  }
  resultObj.setCreated(vm.getCreated());
  resultObj.setDisplayName(vm.getDisplayName());
  resultObj.setDomain(ms.findDomainIdById(acct.getDomainId()).getName());
  resultObj.setDomainId(acct.getDomainId());
  resultObj.setHaEnable(vm.isHaEnabled());
  if (vm.getHostId() != null) {
    resultObj.setHostId(vm.getHostId());
    resultObj.setHostName(ms.getHostBy(vm.getHostId()).getName());
  }
  resultObj.setIpAddress(vm.getPrivateIpAddress());
  resultObj.setName(vm.getName());
  resultObj.setState(vm.getState().toString());
  resultObj.setZoneId(vm.getDataCenterId());
  resultObj.setZoneName(ms.findDataCenterById(vm.getDataCenterId()).getName());
  VMTemplateVO template=ms.findTemplateById(vm.getTemplateId());
  resultObj.setPasswordEnabled(template.getEnablePassword());
  resultObj.setTemplateDisplayText(template.getDisplayText());
  resultObj.setTemplateId(template.getId());
  resultObj.setTemplateName(template.getName());
  return resultObj;
}",0.9328104575163398
107472,"public boolean execute(){
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  DeleteTemplateParam param=gson.fromJson(job.getCmdInfo(),DeleteTemplateParam.class);
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  try {
    boolean success=managementServer.deleteTemplate(param.getUserId(),param.getTemplateId(),param.getZoneId(),param.getEventId());
    if (success) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,null);
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
  return true;
}","public boolean execute(){
  Gson gson=GsonHelper.getBuilder().create();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  AsyncJobVO job=getJob();
  DeleteTemplateParam param=gson.fromJson(job.getCmdInfo(),DeleteTemplateParam.class);
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  try {
    boolean success=managementServer.deleteTemplate(param.getUserId(),param.getTemplateId(),param.getZoneId(),param.getEventId());
    if (success) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,""String_Node_Str"");
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
  return true;
}",0.9888
107473,"protected Object[] getRRDData(int flag){
  String stats=""String_Node_Str"";
  try {
    if (flag == 1)     stats=getHostStatsRawXML();
    if (flag == 2)     stats=getVmStatsRawXML();
  }
 catch (  Exception e1) {
    s_logger.warn(""String_Node_Str"" + e1);
    return null;
  }
  if (stats == null)   return null;
  StringReader statsReader=new StringReader(stats);
  InputSource statsSource=new InputSource(statsReader);
  Document doc=null;
  try {
    doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(statsSource);
  }
 catch (  Exception e) {
  }
  NodeList firstLevelChildren=doc.getChildNodes();
  NodeList secondLevelChildren=(firstLevelChildren.item(0)).getChildNodes();
  Node metaNode=secondLevelChildren.item(0);
  Node dataNode=secondLevelChildren.item(1);
  Integer numRows=0;
  Integer numColumns=0;
  Node legend=null;
  NodeList metaNodeChildren=metaNode.getChildNodes();
  for (int i=0; i < metaNodeChildren.getLength(); i++) {
    Node n=metaNodeChildren.item(i);
    if (n.getNodeName().equals(""String_Node_Str"")) {
      numRows=Integer.valueOf(getXMLNodeValue(n));
    }
 else     if (n.getNodeName().equals(""String_Node_Str"")) {
      numColumns=Integer.valueOf(getXMLNodeValue(n));
    }
 else     if (n.getNodeName().equals(""String_Node_Str"")) {
      legend=n;
    }
  }
  return new Object[]{numRows,numColumns,legend,dataNode};
}","protected Object[] getRRDData(int flag){
  String stats=""String_Node_Str"";
  try {
    if (flag == 1)     stats=getHostStatsRawXML();
    if (flag == 2)     stats=getVmStatsRawXML();
  }
 catch (  Exception e1) {
    s_logger.warn(""String_Node_Str"" + e1);
    return null;
  }
  if (stats == null)   return null;
  StringReader statsReader=new StringReader(stats);
  InputSource statsSource=new InputSource(statsReader);
  Document doc=null;
  try {
    doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(statsSource);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e);
    return null;
  }
  if (doc == null) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
  NodeList firstLevelChildren=doc.getChildNodes();
  NodeList secondLevelChildren=(firstLevelChildren.item(0)).getChildNodes();
  Node metaNode=secondLevelChildren.item(0);
  Node dataNode=secondLevelChildren.item(1);
  Integer numRows=0;
  Integer numColumns=0;
  Node legend=null;
  NodeList metaNodeChildren=metaNode.getChildNodes();
  for (int i=0; i < metaNodeChildren.getLength(); i++) {
    Node n=metaNodeChildren.item(i);
    if (n.getNodeName().equals(""String_Node_Str"")) {
      numRows=Integer.valueOf(getXMLNodeValue(n));
    }
 else     if (n.getNodeName().equals(""String_Node_Str"")) {
      numColumns=Integer.valueOf(getXMLNodeValue(n));
    }
 else     if (n.getNodeName().equals(""String_Node_Str"")) {
      legend=n;
    }
  }
  return new Object[]{numRows,numColumns,legend,dataNode};
}",0.9518531347419468
107474,"/** 
 * Create a disk offering
 * @param domainId the id of the domain in which the disk offering is valid
 * @param name the name of the disk offering
 * @param description a string description of the disk offering
 * @param numGibibytes the number of gibibytes in the disk offering (1 gibibyte = 1024 MB)
 * @param mirrored boolean value of whether or not the offering provides disk mirroring
 * @param tags Comma separated string to indicate special tags for the disk offering.
 * @return the created disk offering, null if failed to create
 */
DiskOfferingVO createDiskOffering(long userId,long domainId,String name,String description,int numGibibytes,String tags) throws InvalidParameterValueException ;","/** 
 * Create a disk offering
 * @param domainId the id of the domain in which the disk offering is valid
 * @param name the name of the disk offering
 * @param description a string description of the disk offering
 * @param numGibibytes the number of gibibytes in the disk offering (1 gibibyte = 1024 MB)
 * @param mirrored boolean value of whether or not the offering provides disk mirroring
 * @param tags Comma separated string to indicate special tags for the disk offering.
 * @return the created disk offering, null if failed to create
 * @throws InternalErrorException 
 */
DiskOfferingVO createDiskOffering(long userId,long domainId,String name,String description,int numGibibytes,String tags) throws InvalidParameterValueException, InternalErrorException ;",0.96
107475,"@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String displayText=(String)params.get(BaseCmd.Properties.DISPLAY_TEXT.getName());
  Long numGB=(Long)params.get(BaseCmd.Properties.DISK_SIZE.getName());
  String tags=(String)params.get(BaseCmd.Properties.TAGS.getName());
  if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DiskOfferingVO diskOffering=null;
  try {
    diskOffering=getManagementServer().createDiskOffering(userId,domainId.longValue(),name,displayText,numGB.intValue(),tags);
  }
 catch (  InvalidParameterValueException ex) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,ex.getMessage());
  }
  if (diskOffering == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(diskOffering.getId())));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),diskOffering.getDomainId()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(diskOffering.getDomainId()).getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),diskOffering.getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_TEXT.getName(),diskOffering.getDisplayText()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE.getName(),diskOffering.getDiskSizeInBytes()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),diskOffering.getCreated()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TAGS.getName(),diskOffering.getTags()));
  return returnValues;
}","@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String displayText=(String)params.get(BaseCmd.Properties.DISPLAY_TEXT.getName());
  Long numGB=(Long)params.get(BaseCmd.Properties.DISK_SIZE.getName());
  String tags=(String)params.get(BaseCmd.Properties.TAGS.getName());
  if (domainId == null) {
    domainId=DomainVO.ROOT_DOMAIN;
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DiskOfferingVO diskOffering=null;
  try {
    diskOffering=getManagementServer().createDiskOffering(userId,domainId.longValue(),name,displayText,numGB.intValue(),tags);
  }
 catch (  InvalidParameterValueException ex) {
    throw new ServerApiException(BaseCmd.VM_INVALID_PARAM_ERROR,ex.getMessage());
  }
catch (  InternalErrorException e) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
  if (diskOffering == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(diskOffering.getId())));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),diskOffering.getDomainId()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(diskOffering.getDomainId()).getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),diskOffering.getName()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_TEXT.getName(),diskOffering.getDisplayText()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.DISK_SIZE.getName(),diskOffering.getDiskSizeInBytes()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),diskOffering.getCreated()));
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.TAGS.getName(),diskOffering.getTags()));
  return returnValues;
}",0.9736842105263158
107476,"@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DiskOfferingVO disk=getManagementServer().findDiskOfferingById(id);
  if (disk == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  if (disk.getName().equals(""String_Node_Str"") && disk.getDisplayText().equals(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  boolean result=getManagementServer().deleteDiskOffering(userId,id);
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),Boolean.valueOf(result).toString()));
  return returnValues;
}","@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DiskOfferingVO disk=getManagementServer().findDiskOfferingById(id);
  if (disk == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  if (disk.getDiskSize() == 0) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  boolean result=getManagementServer().deleteDiskOffering(userId,id);
  List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
  returnValues.add(new Pair<String,Object>(BaseCmd.Properties.SUCCESS.getName(),Boolean.valueOf(result).toString()));
  return returnValues;
}",0.9484304932735426
107477,"public void persistDefaultValues() throws InvalidParameterValueException, InternalErrorException {
  saveUser();
  String init=_configDao.getValue(""String_Node_Str"");
  if (init.equals(""String_Node_Str"")) {
    s_logger.debug(""String_Node_Str"");
    List<String> categories=Config.getCategories();
    for (    String category : categories) {
      if (!_configMgr.isPremium() && category.equals(""String_Node_Str"")) {
        continue;
      }
      List<Config> configs=Config.getConfigs(category);
      for (      Config c : configs) {
        String name=c.key();
        if (_configDao.getValue(name) != null) {
          continue;
        }
        String instance=""String_Node_Str"";
        String component=c.getComponent();
        String value=c.getDefaultValue();
        String description=c.getDescription();
        ConfigurationVO configVO=new ConfigurationVO(category,instance,component,name,value,description);
        _configDao.persist(configVO);
      }
    }
    if (_configMgr.isPremium()) {
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    boolean externalIpAlloator=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
    String hyperVisor=_configDao.getValue(""String_Node_Str"");
    if (hyperVisor.equalsIgnoreCase(""String_Node_Str"") && !externalIpAlloator) {
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
    }
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,512,500,""String_Node_Str"",false,false,false,null);
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,1024,1000,""String_Node_Str"",false,false,false,null);
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,512,500,""String_Node_Str"",false,false,true,null);
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,1024,1000,""String_Node_Str"",false,false,true,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",5,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",20,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",100,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",0,null);
    SnapshotPolicyVO snapPolicy=new SnapshotPolicyVO(0L,""String_Node_Str"",""String_Node_Str"",(short)4,0);
    _snapPolicyDao.persist(snapPolicy);
    String mountParent=getMountParent();
    if (mountParent != null) {
      _configMgr.updateConfiguration(User.UID_SYSTEM,""String_Node_Str"",mountParent);
      s_logger.debug(""String_Node_Str"" + mountParent + ""String_Node_Str"");
    }
 else {
      s_logger.debug(""String_Node_Str"");
    }
    String hostIpAdr=getHost();
    if (hostIpAdr != null) {
      _configMgr.updateConfiguration(User.UID_SYSTEM,""String_Node_Str"",hostIpAdr);
      s_logger.debug(""String_Node_Str"" + hostIpAdr + ""String_Node_Str"");
    }
    String[] gatewayAndNetmask=getGatewayAndNetmask();
    if (gatewayAndNetmask != null) {
      String gateway=gatewayAndNetmask[0];
      String netmask=gatewayAndNetmask[1];
      long cidrSize=NetUtils.getCidrSize(netmask);
      String dns=getDNS();
      if (dns == null) {
        dns=""String_Node_Str"";
      }
      DataCenterVO zone=_configMgr.createZone(User.UID_SYSTEM,""String_Node_Str"",dns,null,dns,null,""String_Node_Str"",""String_Node_Str"");
      String networkType=_configDao.getValue(""String_Node_Str"");
      if (networkType != null && networkType.equals(""String_Node_Str"")) {
        _configMgr.createPod(User.UID_SYSTEM,""String_Node_Str"",zone.getId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
 else {
        _configMgr.createPod(User.UID_SYSTEM,""String_Node_Str"",zone.getId(),gateway,gateway + ""String_Node_Str"" + cidrSize,null,null);
      }
      s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str""+ netmask);
    }
 else {
      s_logger.debug(""String_Node_Str"");
    }
    updateSSOKey();
  }
  updateKeyPairs();
  generateSecStorageVmCopyPassword();
  updateCloudIdentifier();
  _configDao.update(""String_Node_Str"",""String_Node_Str"");
}","public void persistDefaultValues() throws InvalidParameterValueException, InternalErrorException {
  saveUser();
  String init=_configDao.getValue(""String_Node_Str"");
  if (init.equals(""String_Node_Str"")) {
    s_logger.debug(""String_Node_Str"");
    List<String> categories=Config.getCategories();
    for (    String category : categories) {
      if (!_configMgr.isPremium() && category.equals(""String_Node_Str"")) {
        continue;
      }
      List<Config> configs=Config.getConfigs(category);
      for (      Config c : configs) {
        String name=c.key();
        if (_configDao.getValue(name) != null) {
          continue;
        }
        String instance=""String_Node_Str"";
        String component=c.getComponent();
        String value=c.getDefaultValue();
        String description=c.getDescription();
        ConfigurationVO configVO=new ConfigurationVO(category,instance,component,name,value,description);
        _configDao.persist(configVO);
      }
    }
    if (_configMgr.isPremium()) {
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    boolean externalIpAlloator=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
    String hyperVisor=_configDao.getValue(""String_Node_Str"");
    if (hyperVisor.equalsIgnoreCase(""String_Node_Str"") && !externalIpAlloator) {
      _configDao.update(""String_Node_Str"",""String_Node_Str"");
    }
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,512,500,""String_Node_Str"",false,false,false,null);
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,1024,1000,""String_Node_Str"",false,false,false,null);
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,512,500,""String_Node_Str"",false,false,true,null);
    _configMgr.createServiceOffering(User.UID_SYSTEM,""String_Node_Str"",1,1024,1000,""String_Node_Str"",false,false,true,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",5,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",20,null);
    _configMgr.createDiskOffering(User.UID_SYSTEM,DomainVO.ROOT_DOMAIN,""String_Node_Str"",""String_Node_Str"",100,null);
    SnapshotPolicyVO snapPolicy=new SnapshotPolicyVO(0L,""String_Node_Str"",""String_Node_Str"",(short)4,0);
    _snapPolicyDao.persist(snapPolicy);
    String mountParent=getMountParent();
    if (mountParent != null) {
      _configMgr.updateConfiguration(User.UID_SYSTEM,""String_Node_Str"",mountParent);
      s_logger.debug(""String_Node_Str"" + mountParent + ""String_Node_Str"");
    }
 else {
      s_logger.debug(""String_Node_Str"");
    }
    String hostIpAdr=getHost();
    if (hostIpAdr != null) {
      _configMgr.updateConfiguration(User.UID_SYSTEM,""String_Node_Str"",hostIpAdr);
      s_logger.debug(""String_Node_Str"" + hostIpAdr + ""String_Node_Str"");
    }
    String[] gatewayAndNetmask=getGatewayAndNetmask();
    if (gatewayAndNetmask != null) {
      String gateway=gatewayAndNetmask[0];
      String netmask=gatewayAndNetmask[1];
      long cidrSize=NetUtils.getCidrSize(netmask);
      String dns=getDNS();
      if (dns == null) {
        dns=""String_Node_Str"";
      }
      DataCenterVO zone=_configMgr.createZone(User.UID_SYSTEM,""String_Node_Str"",dns,null,dns,null,""String_Node_Str"",""String_Node_Str"");
      String networkType=_configDao.getValue(""String_Node_Str"");
      if (networkType != null && networkType.equals(""String_Node_Str"")) {
        _configMgr.createPod(User.UID_SYSTEM,""String_Node_Str"",zone.getId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
 else {
        _configMgr.createPod(User.UID_SYSTEM,""String_Node_Str"",zone.getId(),gateway,gateway + ""String_Node_Str"" + cidrSize,null,null);
      }
      s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str""+ netmask);
    }
 else {
      s_logger.debug(""String_Node_Str"");
    }
    updateSSOKey();
  }
  updateKeyPairs();
  generateSecStorageVmCopyPassword();
  updateCloudIdentifier();
  _configDao.update(""String_Node_Str"",""String_Node_Str"");
}",0.9874458874458876
107478,"@Override public DiskOfferingVO createDiskOffering(long userId,long domainId,String name,String description,int numGibibytes,String tags) throws InvalidParameterValueException {
  if (numGibibytes != 0 && numGibibytes < 1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (numGibibytes > _maxVolumeSizeInTb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInTb + ""String_Node_Str"");
  }
  return _configMgr.createDiskOffering(userId,domainId,name,description,numGibibytes,tags);
}","@Override public DiskOfferingVO createDiskOffering(long userId,long domainId,String name,String description,int numGibibytes,String tags) throws InvalidParameterValueException, InternalErrorException {
  if (numGibibytes != 0 && numGibibytes < 1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (numGibibytes > _maxVolumeSizeInGb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInGb + ""String_Node_Str"");
  }
  if (numGibibytes == 0) {
    List<DiskOfferingVO> existingOffering=_diskOfferingDao.findPrivateDiskOffering();
    if (existingOffering != null && existingOffering.size() > 0)     throw new InternalErrorException(""String_Node_Str"");
  }
  return _configMgr.createDiskOffering(userId,domainId,name,description,numGibibytes,tags);
}",0.7976278724981468
107479,"protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _securityGroupDao=locator.getDao(SecurityGroupDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _networkRuleConfigDao=locator.getDao(NetworkRuleConfigDao.class);
  _securityGroupVMMapDao=locator.getDao(SecurityGroupVMMapDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _templateHostDao=locator.getDao(VMTemplateHostDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _poolHostDao=locator.getDao(StoragePoolHostDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _vmGroupDao=locator.getDao(InstanceGroupDao.class);
  _groupVMMapDao=locator.getDao(InstanceGroupVMMapDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _snapshotScheduler=locator.getManager(SnapshotScheduler.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  String maxVolumeSizeInTbString=_configs.get(""String_Node_Str"");
  long maxVolumeSizeTb=NumbersUtil.parseLong(maxVolumeSizeInTbString,new Long(""String_Node_Str""));
  _maxVolumeSizeInTb=maxVolumeSizeTb;
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  _isHypervisorSnapshotCapable=hypervisorType.equals(Hypervisor.Type.XenServer.name());
}","protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _securityGroupDao=locator.getDao(SecurityGroupDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _networkRuleConfigDao=locator.getDao(NetworkRuleConfigDao.class);
  _securityGroupVMMapDao=locator.getDao(SecurityGroupVMMapDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _templateHostDao=locator.getDao(VMTemplateHostDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _poolHostDao=locator.getDao(StoragePoolHostDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _vmGroupDao=locator.getDao(InstanceGroupDao.class);
  _groupVMMapDao=locator.getDao(InstanceGroupVMMapDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _snapshotScheduler=locator.getManager(SnapshotScheduler.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  String maxVolumeSizeInTbString=_configs.get(""String_Node_Str"");
  long maxVolumeSizeBytes=NumbersUtil.parseLong(maxVolumeSizeInTbString,new Long(""String_Node_Str""));
  _maxVolumeSizeInGb=maxVolumeSizeBytes / 1000000000;
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  _isHypervisorSnapshotCapable=hypervisorType.equals(Hypervisor.Type.XenServer.name());
}",0.9835101167662
107480,"@Override public boolean validateCustomVolumeSizeRange(long size) throws InvalidParameterValueException {
  if (size < 0 || (size > 0 && size < 2097152)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (size > _maxVolumeSizeInTb) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return true;
}","@Override public boolean validateCustomVolumeSizeRange(long size) throws InvalidParameterValueException {
  if (size < 0 || (size > 0 && size < 2097152)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (size > (_maxVolumeSizeInGb * 1000000000)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return true;
}",0.9762900976290098
107481,"@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long diskOfferingId=(Long)params.get(BaseCmd.Properties.DISK_OFFERING_ID.getName());
  Long snapshotId=(Long)params.get(BaseCmd.Properties.SNAPSHOT_ID.getName());
  Long size=(Long)params.get(BaseCmd.Properties.SIZE.getName());
  if (account == null) {
    if ((accountName == null) || (domainId == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    account=getManagementServer().findActiveAccount(accountName,domainId);
    if (account == null)     throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
 else {
    if (isAdmin(account.getType())) {
      if (domainId != null) {
        if (!getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
        }
        if (accountName != null) {
          account=getManagementServer().findActiveAccount(accountName,domainId);
          if (account == null)           throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
  }
  if (userId == null) {
    userId=Long.valueOf(Account.ACCOUNT_ID_SYSTEM);
  }
  if (size == null) {
    size=Long.valueOf(0);
  }
  boolean useSnapshot=false;
  if (snapshotId == null) {
    if ((zoneId == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (diskOfferingId == null && size == 0) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
 else     if (diskOfferingId == null && size != 0) {
      try {
        boolean ok=getManagementServer().validateCustomVolumeSizeRange(size);
        if (!ok)         throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      }
 catch (      InvalidParameterValueException e) {
        s_logger.warn(""String_Node_Str"");
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + e.getMessage());
      }
      List<DiskOfferingVO> privateTemplateList=getManagementServer().findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
  }
 else {
    useSnapshot=true;
    Snapshot snapshotCheck=getManagementServer().findSnapshotById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=getManagementServer().findAccountById(snapshotCheck.getAccountId());
        if (!getManagementServer().isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  try {
    long jobId=0;
    if (useSnapshot) {
      jobId=getManagementServer().createVolumeFromSnapshotAsync(userId,account.getId(),snapshotId,name);
    }
 else {
      jobId=getManagementServer().createVolumeAsync(userId,account.getId(),name,zoneId,diskOfferingId,size);
    }
    if (jobId == 0) {
      s_logger.warn(""String_Node_Str"");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + jobId);
    }
    long volumeId=waitInstanceCreation(jobId);
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_ID.getName(),Long.valueOf(volumeId)));
    return returnValues;
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"" + (useSnapshot ? (""String_Node_Str"" + snapshotId) : (""String_Node_Str"" + zoneId + ""String_Node_Str""+ diskOfferingId)),ex);
    if (useSnapshot) {
      throw new ServerApiException(BaseCmd.CREATE_VOLUME_FROM_SNAPSHOT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + ex.getMessage());
    }
  }
}","@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long userId=(Long)params.get(BaseCmd.Properties.USER_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long diskOfferingId=(Long)params.get(BaseCmd.Properties.DISK_OFFERING_ID.getName());
  Long snapshotId=(Long)params.get(BaseCmd.Properties.SNAPSHOT_ID.getName());
  Long size=(Long)params.get(BaseCmd.Properties.SIZE.getName());
  if (account == null) {
    if ((accountName == null) || (domainId == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    account=getManagementServer().findActiveAccount(accountName,domainId);
    if (account == null)     throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
 else {
    if (isAdmin(account.getType())) {
      if (domainId != null) {
        if (!getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
        }
        if (accountName != null) {
          account=getManagementServer().findActiveAccount(accountName,domainId);
          if (account == null)           throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
  }
  if (userId == null) {
    userId=Long.valueOf(Account.ACCOUNT_ID_SYSTEM);
  }
  if (size == null) {
    size=Long.valueOf(0);
  }
  if (diskOfferingId != null) {
    DiskOfferingVO dOffering=getManagementServer().findDiskOfferingById(diskOfferingId.longValue());
    if (dOffering == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + diskOfferingId + ""String_Node_Str"");
    }
  }
  boolean useSnapshot=false;
  if (snapshotId == null) {
    if ((zoneId == null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
    if (diskOfferingId == null && size == 0) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
 else     if (diskOfferingId == null && size != 0) {
      try {
        boolean ok=getManagementServer().validateCustomVolumeSizeRange(size);
        if (!ok)         throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
      }
 catch (      InvalidParameterValueException e) {
        s_logger.warn(""String_Node_Str"");
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + e.getMessage());
      }
      List<DiskOfferingVO> privateTemplateList=getManagementServer().findPrivateDiskOffering();
      diskOfferingId=privateTemplateList.get(0).getId();
    }
  }
 else {
    useSnapshot=true;
    Snapshot snapshotCheck=getManagementServer().findSnapshotById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=getManagementServer().findAccountById(snapshotCheck.getAccountId());
        if (!getManagementServer().isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.SNAPSHOT_INVALID_PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  try {
    long jobId=0;
    if (useSnapshot) {
      jobId=getManagementServer().createVolumeFromSnapshotAsync(userId,account.getId(),snapshotId,name);
    }
 else {
      jobId=getManagementServer().createVolumeAsync(userId,account.getId(),name,zoneId,diskOfferingId,size);
    }
    if (jobId == 0) {
      s_logger.warn(""String_Node_Str"");
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + jobId);
    }
    long volumeId=waitInstanceCreation(jobId);
    List<Pair<String,Object>> returnValues=new ArrayList<Pair<String,Object>>();
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),Long.valueOf(jobId)));
    returnValues.add(new Pair<String,Object>(BaseCmd.Properties.VOLUME_ID.getName(),Long.valueOf(volumeId)));
    return returnValues;
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"" + (useSnapshot ? (""String_Node_Str"" + snapshotId) : (""String_Node_Str"" + zoneId + ""String_Node_Str""+ diskOfferingId)),ex);
    if (useSnapshot) {
      throw new ServerApiException(BaseCmd.CREATE_VOLUME_FROM_SNAPSHOT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + ex.getMessage());
    }
  }
}",0.9717806041335452
107482,"protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _securityGroupDao=locator.getDao(SecurityGroupDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _networkRuleConfigDao=locator.getDao(NetworkRuleConfigDao.class);
  _securityGroupVMMapDao=locator.getDao(SecurityGroupVMMapDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _templateHostDao=locator.getDao(VMTemplateHostDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _poolHostDao=locator.getDao(StoragePoolHostDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _snapshotScheduler=locator.getManager(SnapshotScheduler.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  String maxVolumeSizeInGbString=_configs.get(""String_Node_Str"");
  int maxVolumeSizeGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  _maxVolumeSizeInGb=maxVolumeSizeGb;
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  _isHypervisorSnapshotCapable=hypervisorType.equals(Hypervisor.Type.XenServer.name());
}","protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _securityGroupDao=locator.getDao(SecurityGroupDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _networkRuleConfigDao=locator.getDao(NetworkRuleConfigDao.class);
  _securityGroupVMMapDao=locator.getDao(SecurityGroupVMMapDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _templateHostDao=locator.getDao(VMTemplateHostDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _poolHostDao=locator.getDao(StoragePoolHostDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _snapshotScheduler=locator.getManager(SnapshotScheduler.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  String maxVolumeSizeInGbString=_configs.get(""String_Node_Str"");
  int maxVolumeSizeGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2097152000);
  _maxVolumeSizeInGb=maxVolumeSizeGb;
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  _isHypervisorSnapshotCapable=hypervisorType.equals(Hypervisor.Type.XenServer.name());
}",0.9994507506407908
107483,"private String getLoginSuccessResponse(HttpSession session,String responseType){
  StringBuffer sb=new StringBuffer();
  int inactiveInterval=session.getMaxInactiveInterval();
  if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
    sb.append(""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if (attrObj instanceof String) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ (String)attrObj+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        String attr=(String)session.getAttribute(attrName);
        sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attr+ ""String_Node_Str""+ attrName+ ""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","@SuppressWarnings(""String_Node_Str"") private String getLoginSuccessResponse(HttpSession session,String responseType){
  StringBuffer sb=new StringBuffer();
  int inactiveInterval=session.getMaxInactiveInterval();
  if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
    sb.append(""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if (attrObj instanceof String) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ (String)attrObj+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        String attr=(String)session.getAttribute(attrName);
        sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attr+ ""String_Node_Str""+ attrName+ ""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9865990583122056
107484,"@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  try {
    Map<String,Object[]> params=new HashMap<String,Object[]>();
    params.putAll(req.getParameterMap());
    HttpSession session=req.getSession(false);
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          String userIdStr=(String)session.getAttribute(""String_Node_Str"");
          if (userIdStr != null) {
            _apiServer.logoutUser(Long.parseLong(userIdStr));
          }
          session.invalidate();
        }
        writeResponse(resp,getLogoutSuccessResponse(responseType),false,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null)         session.invalidate();
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          List<Pair<String,Object>> sessionParams=_apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
          if (sessionParams != null) {
            for (            Pair<String,Object> sessionParam : sessionParams) {
              session.setAttribute(sessionParam.first(),sessionParam.second());
            }
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,false,responseType);
            return;
          }
 else {
            session.invalidate();
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
            return;
          }
        }
      }
    }
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(null,null,null,null,null,null,false);
    String userId=null;
    if (!isNew) {
      userId=(String)session.getAttribute(BaseCmd.Properties.USER_ID.getName());
      String account=(String)session.getAttribute(BaseCmd.Properties.ACCOUNT.getName());
      String domainId=(String)session.getAttribute(BaseCmd.Properties.DOMAIN_ID.getName());
      Object accountObj=session.getAttribute(BaseCmd.Properties.ACCOUNT_OBJ.getName());
      String sessionKey=(String)session.getAttribute(BaseCmd.Properties.SESSION_KEY.getName());
      String[] sessionKeyParam=(String[])params.get(BaseCmd.Properties.SESSION_KEY.getName());
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        session.invalidate();
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(Long.valueOf(userId))) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          resp.sendError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"");
          return;
        }
        UserContext.updateContext(Long.valueOf(userId),accountObj,account,((Account)accountObj).getId(),Long.valueOf(domainId),session.getId());
      }
 else {
        session.invalidate();
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      try {
        String response=_apiServer.handleRequest(params,false,responseType);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",false,responseType);
      }
 catch (      ServerApiException se) {
        resp.sendError(se.getErrorCode(),se.getDescription());
      }
    }
 else {
      if (session != null) {
        session.invalidate();
      }
      resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + ioex);
    }
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
 finally {
    UserContext.unregisterContext();
  }
}","@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  try {
    Map<String,Object[]> params=new HashMap<String,Object[]>();
    params.putAll(req.getParameterMap());
    HttpSession session=req.getSession(false);
    String responseType=BaseCmd.RESPONSE_TYPE_XML;
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          String userIdStr=(String)session.getAttribute(""String_Node_Str"");
          if (userIdStr != null) {
            _apiServer.logoutUser(Long.parseLong(userIdStr));
          }
          session.invalidate();
        }
        writeResponse(resp,getLogoutSuccessResponse(responseType),false,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null)         session.invalidate();
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          List<Pair<String,Object>> sessionParams=_apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
          if (sessionParams != null) {
            for (            Pair<String,Object> sessionParam : sessionParams) {
              session.setAttribute(sessionParam.first(),sessionParam.second());
            }
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,false,responseType);
            return;
          }
 else {
            session.invalidate();
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
            return;
          }
        }
      }
    }
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(null,null,null,null,null,null,false);
    String userId=null;
    if (!isNew) {
      userId=(String)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      String domainId=(String)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        session.invalidate();
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(Long.valueOf(userId))) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          resp.sendError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"");
          return;
        }
        UserContext.updateContext(Long.valueOf(userId),accountObj,account,((Account)accountObj).getId(),Long.valueOf(domainId),session.getId());
      }
 else {
        session.invalidate();
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      try {
        String response=_apiServer.handleRequest(params,false,responseType);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",false,responseType);
      }
 catch (      ServerApiException se) {
        resp.sendError(se.getErrorCode(),se.getDescription());
      }
    }
 else {
      if (session != null) {
        session.invalidate();
      }
      resp.sendError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"");
    }
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + ioex);
    }
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
 finally {
    UserContext.unregisterContext();
  }
}",0.9502395871728714
107485,"@Override public String getResponse(){
  VolumeVO volume=(VolumeVO)getResponseObject();
  VolumeResponse response=new VolumeResponse();
  response.setId(volume.getId());
  response.setName(param.getName());
  response.setVolumeType(volume.getVolumeType().toString());
  response.setSize(volume.getSize());
  response.setCreated(volume.getCreated());
  response.setState(volume.getStatus().toString());
  response.setAccountName(ggetManagementServer().findAccountById(volume.getAccountId()).getAccountName());
  response.setDomainId(volume.getDomainId());
  response.setDiskOfferingId(volume.getDiskOfferingId());
  if (volume.getDiskOfferingId() != null) {
    response.setDiskOfferingName(getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getName());
    response.setDiskOfferingDisplayText(getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getDisplayText());
  }
  response.setDomain(getManagementServer().findDomainIdById(volume.getDomainId()).getName());
  response.setStorageType(""String_Node_Str"");
  if (volume.getPoolId() != null)   response.setStorage(getManagementServer().findPoolById(volume.getPoolId()).getName());
  response.setZoneId(volume.getDataCenterId());
  response.setZoneName(getManagementServer().getDataCenterBy(volume.getDataCenterId()).getName());
  return SerializerHelper.toSerializedString(response);
}","@Override public String getResponse(){
  VolumeVO volume=(VolumeVO)getResponseObject();
  VolumeResponse response=new VolumeResponse();
  response.setId(volume.getId());
  response.setName(volume.getName());
  response.setVolumeType(volume.getVolumeType().toString());
  response.setSize(volume.getSize());
  response.setCreated(volume.getCreated());
  response.setState(volume.getStatus().toString());
  response.setAccountName(ggetManagementServer().findAccountById(volume.getAccountId()).getAccountName());
  response.setDomainId(volume.getDomainId());
  response.setDiskOfferingId(volume.getDiskOfferingId());
  if (volume.getDiskOfferingId() != null) {
    response.setDiskOfferingName(getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getName());
    response.setDiskOfferingDisplayText(getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getDisplayText());
  }
  response.setDomain(getManagementServer().findDomainIdById(volume.getDomainId()).getName());
  response.setStorageType(""String_Node_Str"");
  if (volume.getPoolId() != null)   response.setStorage(getManagementServer().findPoolById(volume.getPoolId()).getName());
  response.setZoneId(volume.getDataCenterId());
  response.setZoneName(getManagementServer().getDataCenterBy(volume.getDataCenterId()).getName());
  return SerializerHelper.toSerializedString(response);
}",0.9959985449254274
107486,"private ImageFormat getImageFormat(Long volumeId){
  ImageFormat format=null;
  VolumeVO volume=_volsDao.findById(volumeId);
  Long templateId=volume.getTemplateId();
  if (templateId != null) {
    VMTemplateVO template=_templateDao.findById(templateId);
    format=template.getFormat();
  }
  return format;
}","@Override public ImageFormat getImageFormat(Long volumeId){
  ImageFormat format=null;
  VolumeVO volume=_volsDao.findById(volumeId);
  Long templateId=volume.getTemplateId();
  if (templateId != null) {
    VMTemplateVO template=_templateDao.findById(templateId);
    format=template.getFormat();
  }
  return format;
}",0.9635499207606972
107487,"@Override @DB public VMTemplateVO createPrivateTemplate(VMTemplateVO template,Long userId,long snapshotId,String name,String description){
  VMTemplateVO privateTemplate=null;
  long templateId=template.getId();
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot != null) {
    Long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.findById(volumeId);
    StringBuilder userFolder=new StringBuilder();
    Formatter userFolderFormat=new Formatter(userFolder);
    userFolderFormat.format(""String_Node_Str"",snapshot.getAccountId());
    String uniqueName=getRandomPrivateTemplateName();
    long zoneId=volume.getDataCenterId();
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
    String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
    if (secondaryStorageHost == null || secondaryStorageURL == null) {
      s_logger.warn(""String_Node_Str"");
      return null;
    }
    Command cmd=null;
    String backupSnapshotUUID=snapshot.getBackupSnapshotId();
    if (backupSnapshotUUID != null) {
      Long dcId=volume.getDataCenterId();
      Long accountId=volume.getAccountId();
      String origTemplateInstallPath=null;
      Long origTemplateId=volume.getTemplateId();
      if (origTemplateId != null) {
        VMTemplateHostVO vmTemplateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),origTemplateId);
        origTemplateInstallPath=vmTemplateHostVO.getInstallPath();
      }
      cmd=new CreatePrivateTemplateFromSnapshotCommand(_storageMgr.getPrimaryStorageNameLabel(volume),secondaryStorageURL,dcId,accountId,volumeId,backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,templateId,name);
    }
 else {
      cmd=new CreatePrivateTemplateCommand(secondaryStorageURL,templateId,volume.getAccountId(),name,uniqueName,_storageMgr.getPrimaryStorageNameLabel(volume),snapshot.getPath(),snapshot.getName(),userFolder.toString());
    }
    String basicErrMsg=""String_Node_Str"" + snapshot.getName();
    CreatePrivateTemplateAnswer answer=(CreatePrivateTemplateAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,basicErrMsg);
    if ((answer != null) && answer.getResult()) {
      privateTemplate=_templateDao.findById(templateId);
      Long origTemplateId=volume.getTemplateId();
      VMTemplateVO origTemplate=null;
      if (origTemplateId != null) {
        origTemplate=_templateDao.findById(origTemplateId);
      }
      if ((origTemplate != null) && !Storage.ImageFormat.ISO.equals(origTemplate.getFormat())) {
        privateTemplate.setFileSystem(origTemplate.getFileSystem());
        privateTemplate.setRequiresHvm(origTemplate.requiresHvm());
        privateTemplate.setBits(origTemplate.getBits());
      }
 else {
        privateTemplate.setFileSystem(Storage.FileSystem.Unknown);
        privateTemplate.setRequiresHvm(true);
        privateTemplate.setBits(64);
      }
      String answerUniqueName=answer.getUniqueName();
      if (answerUniqueName != null) {
        privateTemplate.setUniqueName(answerUniqueName);
      }
 else {
        privateTemplate.setUniqueName(uniqueName);
      }
      ImageFormat format=answer.getImageFormat();
      if (format != null) {
        privateTemplate.setFormat(format);
      }
 else {
        privateTemplate.setFormat(ImageFormat.RAW);
      }
      _templateDao.update(templateId,privateTemplate);
      _templateDao.addTemplateToZone(privateTemplate,zoneId);
      VMTemplateHostVO templateHostVO=new VMTemplateHostVO(secondaryStorageHost.getId(),templateId);
      templateHostVO.setDownloadPercent(100);
      templateHostVO.setDownloadState(Status.DOWNLOADED);
      templateHostVO.setInstallPath(answer.getPath());
      templateHostVO.setLastUpdated(new Date());
      templateHostVO.setSize(answer.getVirtualSize());
      _templateHostDao.persist(templateHostVO);
      _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.template);
    }
 else {
      _templateDao.remove(templateId);
    }
  }
  return privateTemplate;
}","@Override @DB public VMTemplateVO createPrivateTemplate(VMTemplateVO template,Long userId,long snapshotId,String name,String description){
  VMTemplateVO privateTemplate=null;
  long templateId=template.getId();
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot != null) {
    Long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.findById(volumeId);
    StringBuilder userFolder=new StringBuilder();
    Formatter userFolderFormat=new Formatter(userFolder);
    userFolderFormat.format(""String_Node_Str"",snapshot.getAccountId());
    String uniqueName=getRandomPrivateTemplateName();
    long zoneId=volume.getDataCenterId();
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
    String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
    if (secondaryStorageHost == null || secondaryStorageURL == null) {
      s_logger.warn(""String_Node_Str"");
      return null;
    }
    Command cmd=null;
    String backupSnapshotUUID=snapshot.getBackupSnapshotId();
    if (backupSnapshotUUID != null) {
      Long dcId=volume.getDataCenterId();
      Long accountId=volume.getAccountId();
      String origTemplateInstallPath=null;
      if (ImageFormat.ISO != _snapshotMgr.getImageFormat(volumeId)) {
        Long origTemplateId=volume.getTemplateId();
        VMTemplateHostVO vmTemplateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),origTemplateId);
        origTemplateInstallPath=vmTemplateHostVO.getInstallPath();
      }
      cmd=new CreatePrivateTemplateFromSnapshotCommand(_storageMgr.getPrimaryStorageNameLabel(volume),secondaryStorageURL,dcId,accountId,volumeId,backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,templateId,name);
    }
 else {
      cmd=new CreatePrivateTemplateCommand(secondaryStorageURL,templateId,volume.getAccountId(),name,uniqueName,_storageMgr.getPrimaryStorageNameLabel(volume),snapshot.getPath(),snapshot.getName(),userFolder.toString());
    }
    String basicErrMsg=""String_Node_Str"" + snapshot.getName();
    CreatePrivateTemplateAnswer answer=(CreatePrivateTemplateAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,basicErrMsg);
    if ((answer != null) && answer.getResult()) {
      privateTemplate=_templateDao.findById(templateId);
      Long origTemplateId=volume.getTemplateId();
      VMTemplateVO origTemplate=null;
      if (origTemplateId != null) {
        origTemplate=_templateDao.findById(origTemplateId);
      }
      if ((origTemplate != null) && !Storage.ImageFormat.ISO.equals(origTemplate.getFormat())) {
        privateTemplate.setFileSystem(origTemplate.getFileSystem());
        privateTemplate.setRequiresHvm(origTemplate.requiresHvm());
        privateTemplate.setBits(origTemplate.getBits());
      }
 else {
        privateTemplate.setFileSystem(Storage.FileSystem.Unknown);
        privateTemplate.setRequiresHvm(true);
        privateTemplate.setBits(64);
      }
      String answerUniqueName=answer.getUniqueName();
      if (answerUniqueName != null) {
        privateTemplate.setUniqueName(answerUniqueName);
      }
 else {
        privateTemplate.setUniqueName(uniqueName);
      }
      ImageFormat format=answer.getImageFormat();
      if (format != null) {
        privateTemplate.setFormat(format);
      }
 else {
        privateTemplate.setFormat(ImageFormat.RAW);
      }
      _templateDao.update(templateId,privateTemplate);
      _templateDao.addTemplateToZone(privateTemplate,zoneId);
      VMTemplateHostVO templateHostVO=new VMTemplateHostVO(secondaryStorageHost.getId(),templateId);
      templateHostVO.setDownloadPercent(100);
      templateHostVO.setDownloadState(Status.DOWNLOADED);
      templateHostVO.setInstallPath(answer.getPath());
      templateHostVO.setLastUpdated(new Date());
      templateHostVO.setSize(answer.getVirtualSize());
      _templateHostDao.persist(templateHostVO);
      _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.template);
    }
 else {
      _templateDao.remove(templateId);
    }
  }
  return privateTemplate;
}",0.9867223998032948
107488,"@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String state=(String)params.get(BaseCmd.Properties.STATE.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  Long hostId=(Long)params.get(BaseCmd.Properties.HOST_ID.getName());
  String group=(String)params.get(BaseCmd.Properties.GROUP.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long accountId=null;
  Boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=getManagementServer().findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountName=account.getAccountName();
    accountId=account.getId();
    domainId=account.getDomainId();
  }
  Long[] accountIds=null;
  if (accountId != null) {
    accountIds=new Long[1];
    accountIds[0]=accountId;
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria(""String_Node_Str"",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.NAME,name);
    c.addCriteria(Criteria.STATE,state);
    if (zoneId != null)     c.addCriteria(Criteria.DATACENTERID,zoneId);
    if (group != null) {
      if (group.equals(""String_Node_Str""))       c.addCriteria(Criteria.EMPTY_GROUP,group);
 else       c.addCriteria(Criteria.GROUP,group);
    }
    if (isAdmin == true) {
      c.addCriteria(Criteria.DOMAINID,domainId);
      if (podId != null)       c.addCriteria(Criteria.PODID,podId);
      c.addCriteria(Criteria.HOSTID,hostId);
    }
  }
  c.addCriteria(Criteria.ACCOUNTID,accountIds);
  c.addCriteria(Criteria.ISADMIN,isAdmin);
  List<? extends UserVm> virtualMachines=getManagementServer().searchForUserVMs(c);
  if (virtualMachines == null) {
    throw new ServerApiException(BaseCmd.VM_LIST_ERROR,""String_Node_Str"" + accountName.toString());
  }
  Object[] vmTag=new Object[virtualMachines.size()];
  int i=0;
  HashMap<Long,HostVO> hostMap=new HashMap<Long,HostVO>();
  List<HostVO> hostList=getManagementServer().listAllActiveHosts();
  for (  HostVO hostVO : hostList) {
    hostMap.put(hostVO.getId(),hostVO);
  }
  for (  UserVm vmInstance : virtualMachines) {
    List<Pair<String,Object>> vmData=new ArrayList<Pair<String,Object>>();
    AsyncJobVO asyncJob=getManagementServer().findInstancePendingAsyncJob(""String_Node_Str"",vmInstance.getId());
    if (asyncJob != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),asyncJob.getId().toString()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_STATUS.getName(),String.valueOf(asyncJob.getStatus())));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(vmInstance.getId())));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),vmInstance.getName()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(vmInstance.getCreated())));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.IP_ADDRESS.getName(),vmInstance.getPrivateIpAddress()));
    if (vmInstance.getState() != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),vmInstance.getState().toString()));
    }
    Account acct=getManagementServer().findAccountById(Long.valueOf(vmInstance.getAccountId()));
    if (acct != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),acct.getAccountName()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),Long.toString(acct.getDomainId())));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(acct.getDomainId()).getName()));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.HA_ENABLE.getName(),Boolean.valueOf(vmInstance.isHaEnabled()).toString()));
    if (vmInstance.getDisplayName() != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_NAME.getName(),vmInstance.getDisplayName()));
    }
 else {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_NAME.getName(),vmInstance.getName()));
    }
    if (vmInstance.getGroup() != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.GROUP.getName(),vmInstance.getGroup()));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),Long.valueOf(vmInstance.getDataCenterId()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().findDataCenterById(vmInstance.getDataCenterId()).getName()));
    if ((isAdmin == true) && (vmInstance.getHostId() != null)) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.HOST_ID.getName(),vmInstance.getHostId().toString()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.HOST_NAME.getName(),getManagementServer().getHostBy(vmInstance.getHostId()).getName()));
    }
    VMTemplateVO template=getManagementServer().findTemplateById(vmInstance.getTemplateId());
    if (template != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_ID.getName(),Long.valueOf(vmInstance.getTemplateId()).toString()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_NAME.getName(),template.getName()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_DISPLAY_TEXT.getName(),template.getDisplayText()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.PASSWORD_ENABLED.getName(),template.getEnablePassword()));
    }
 else {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_ID.getName(),""String_Node_Str""));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_NAME.getName(),""String_Node_Str""));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_DISPLAY_TEXT.getName(),""String_Node_Str""));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.PASSWORD_ENABLED.getName(),false));
    }
    if (vmInstance.getIsoId() != null) {
      VMTemplateVO iso=getManagementServer().findTemplateById(vmInstance.getIsoId().longValue());
      if (iso != null) {
        vmData.add(new Pair<String,Object>(BaseCmd.Properties.ISO_ID.getName(),Long.valueOf(vmInstance.getIsoId()).toString()));
        vmData.add(new Pair<String,Object>(BaseCmd.Properties.ISO_NAME.getName(),iso.getName()));
      }
    }
    ServiceOfferingVO offering=getManagementServer().findServiceOfferingById(vmInstance.getServiceOfferingId());
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.SERVICE_OFFERING_ID.getName(),Long.valueOf(vmInstance.getServiceOfferingId()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.SERVICE_OFFERING_NAME.getName(),offering.getName()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_NUMBER.getName(),Integer.valueOf(offering.getCpu()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_SPEED.getName(),Integer.valueOf(offering.getSpeed()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY.getName(),Integer.valueOf(offering.getRamSize()).toString()));
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    String cpuUsed=null;
    VmStats vmStats=getManagementServer().getVmStatistics(vmInstance.getId());
    if (vmStats != null) {
      float cpuUtil=(float)vmStats.getCPUUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_USED.getName(),cpuUsed));
      long networkKbRead=(long)vmStats.getNetworkReadKBs();
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_KB_READ.getName(),networkKbRead));
      long networkKbWrite=(long)vmStats.getNetworkWriteKBs();
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_KB_WRITE.getName(),networkKbWrite));
    }
    GuestOSCategoryVO guestOsCategory=getManagementServer().getGuestOsCategory(vmInstance.getGuestOSId());
    if (guestOsCategory != null)     vmData.add(new Pair<String,Object>(BaseCmd.Properties.OS_TYPE_ID.getName(),guestOsCategory.getId()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_GROUP_LIST.getName(),getManagementServer().getNetworkGroupsNamesForVm(vmInstance.getId())));
    VolumeVO rootVolume=getManagementServer().findRootVolume(vmInstance.getId());
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ROOT_DEVICE_ID.getName(),rootVolume.getDeviceId()));
    StoragePoolVO storagePool=getManagementServer().findPoolById(rootVolume.getPoolId());
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ROOT_DEVICE_TYPE.getName(),storagePool.getPoolType().toString()));
    vmTag[i++]=vmData;
  }
  List<Pair<String,Object>> returnTags=new ArrayList<Pair<String,Object>>();
  Pair<String,Object> vmTags=new Pair<String,Object>(""String_Node_Str"",vmTag);
  returnTags.add(vmTags);
  return returnTags;
}","@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  String state=(String)params.get(BaseCmd.Properties.STATE.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  Long hostId=(Long)params.get(BaseCmd.Properties.HOST_ID.getName());
  String group=(String)params.get(BaseCmd.Properties.GROUP.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long accountId=null;
  Boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=getManagementServer().findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountName=account.getAccountName();
    accountId=account.getId();
    domainId=account.getDomainId();
  }
  Long[] accountIds=null;
  if (accountId != null) {
    accountIds=new Long[1];
    accountIds[0]=accountId;
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria(""String_Node_Str"",Boolean.TRUE,startIndex,Long.valueOf(pageSizeNum));
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.NAME,name);
    c.addCriteria(Criteria.STATE,state);
    if (zoneId != null)     c.addCriteria(Criteria.DATACENTERID,zoneId);
    if (group != null) {
      if (group.equals(""String_Node_Str""))       c.addCriteria(Criteria.EMPTY_GROUP,group);
 else       c.addCriteria(Criteria.GROUP,group);
    }
    if (isAdmin == true) {
      c.addCriteria(Criteria.DOMAINID,domainId);
      if (podId != null)       c.addCriteria(Criteria.PODID,podId);
      c.addCriteria(Criteria.HOSTID,hostId);
    }
  }
  c.addCriteria(Criteria.ACCOUNTID,accountIds);
  c.addCriteria(Criteria.ISADMIN,isAdmin);
  List<? extends UserVm> virtualMachines=getManagementServer().searchForUserVMs(c);
  if (virtualMachines == null) {
    throw new ServerApiException(BaseCmd.VM_LIST_ERROR,""String_Node_Str"" + accountName.toString());
  }
  Object[] vmTag=new Object[virtualMachines.size()];
  int i=0;
  HashMap<Long,HostVO> hostMap=new HashMap<Long,HostVO>();
  List<HostVO> hostList=getManagementServer().listAllActiveHosts();
  for (  HostVO hostVO : hostList) {
    hostMap.put(hostVO.getId(),hostVO);
  }
  for (  UserVm vmInstance : virtualMachines) {
    List<Pair<String,Object>> vmData=new ArrayList<Pair<String,Object>>();
    AsyncJobVO asyncJob=getManagementServer().findInstancePendingAsyncJob(""String_Node_Str"",vmInstance.getId());
    if (asyncJob != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),asyncJob.getId().toString()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_STATUS.getName(),String.valueOf(asyncJob.getStatus())));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),Long.toString(vmInstance.getId())));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),vmInstance.getName()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(vmInstance.getCreated())));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.IP_ADDRESS.getName(),vmInstance.getPrivateIpAddress()));
    if (vmInstance.getState() != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),vmInstance.getState().toString()));
    }
    Account acct=getManagementServer().findAccountById(Long.valueOf(vmInstance.getAccountId()));
    if (acct != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),acct.getAccountName()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),Long.toString(acct.getDomainId())));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(acct.getDomainId()).getName()));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.HA_ENABLE.getName(),Boolean.valueOf(vmInstance.isHaEnabled()).toString()));
    if (vmInstance.getDisplayName() != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_NAME.getName(),vmInstance.getDisplayName()));
    }
 else {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.DISPLAY_NAME.getName(),vmInstance.getName()));
    }
    if (vmInstance.getGroup() != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.GROUP.getName(),vmInstance.getGroup()));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),Long.valueOf(vmInstance.getDataCenterId()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().findDataCenterById(vmInstance.getDataCenterId()).getName()));
    if ((isAdmin == true) && (vmInstance.getHostId() != null)) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.HOST_ID.getName(),vmInstance.getHostId().toString()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.HOST_NAME.getName(),getManagementServer().getHostBy(vmInstance.getHostId()).getName()));
    }
    VMTemplateVO template=getManagementServer().findTemplateById(vmInstance.getTemplateId());
    if (template != null) {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_ID.getName(),Long.valueOf(vmInstance.getTemplateId()).toString()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_NAME.getName(),template.getName()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_DISPLAY_TEXT.getName(),template.getDisplayText()));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.PASSWORD_ENABLED.getName(),template.getEnablePassword()));
    }
 else {
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_ID.getName(),""String_Node_Str""));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_NAME.getName(),""String_Node_Str""));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.TEMPLATE_DISPLAY_TEXT.getName(),""String_Node_Str""));
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.PASSWORD_ENABLED.getName(),false));
    }
    if (vmInstance.getIsoId() != null) {
      VMTemplateVO iso=getManagementServer().findTemplateById(vmInstance.getIsoId().longValue());
      if (iso != null) {
        vmData.add(new Pair<String,Object>(BaseCmd.Properties.ISO_ID.getName(),Long.valueOf(vmInstance.getIsoId()).toString()));
        vmData.add(new Pair<String,Object>(BaseCmd.Properties.ISO_NAME.getName(),iso.getName()));
      }
    }
    ServiceOfferingVO offering=getManagementServer().findServiceOfferingById(vmInstance.getServiceOfferingId());
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.SERVICE_OFFERING_ID.getName(),Long.valueOf(vmInstance.getServiceOfferingId()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.SERVICE_OFFERING_NAME.getName(),offering.getName()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_NUMBER.getName(),Integer.valueOf(offering.getCpu()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_SPEED.getName(),Integer.valueOf(offering.getSpeed()).toString()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.MEMORY.getName(),Integer.valueOf(offering.getRamSize()).toString()));
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    String cpuUsed=null;
    VmStats vmStats=getManagementServer().getVmStatistics(vmInstance.getId());
    if (vmStats != null) {
      float cpuUtil=(float)vmStats.getCPUUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.CPU_USED.getName(),cpuUsed));
      long networkKbRead=(long)vmStats.getNetworkReadKBs();
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_KB_READ.getName(),networkKbRead));
      long networkKbWrite=(long)vmStats.getNetworkWriteKBs();
      vmData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_KB_WRITE.getName(),networkKbWrite));
    }
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.GUEST_OS_ID.getName(),vmInstance.getGuestOSId()));
    GuestOSVO guestOs=getManagementServer().getGuestOs(vmInstance.getGuestOSId());
    if (guestOs != null)     vmData.add(new Pair<String,Object>(BaseCmd.Properties.OS_TYPE_ID.getName(),guestOs.getCategoryId()));
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.NETWORK_GROUP_LIST.getName(),getManagementServer().getNetworkGroupsNamesForVm(vmInstance.getId())));
    VolumeVO rootVolume=getManagementServer().findRootVolume(vmInstance.getId());
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ROOT_DEVICE_ID.getName(),rootVolume.getDeviceId()));
    StoragePoolVO storagePool=getManagementServer().findPoolById(rootVolume.getPoolId());
    vmData.add(new Pair<String,Object>(BaseCmd.Properties.ROOT_DEVICE_TYPE.getName(),storagePool.getPoolType().toString()));
    vmTag[i++]=vmData;
  }
  List<Pair<String,Object>> returnTags=new ArrayList<Pair<String,Object>>();
  Pair<String,Object> vmTags=new Pair<String,Object>(""String_Node_Str"",vmTag);
  returnTags.add(vmTags);
  return returnTags;
}",0.992313935169714
107489,"@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  String type=(String)params.get(BaseCmd.Properties.TYPE.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  Long vmId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Long hostId=(Long)params.get(BaseCmd.Properties.HOST_ID.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=getManagementServer().findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Long[] accountIds=null;
  if (accountId != null) {
    accountIds=new Long[1];
    accountIds[0]=accountId;
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria(""String_Node_Str"",Boolean.FALSE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.ACCOUNTID,accountIds);
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.INSTANCEID,vmId);
    c.addCriteria(Criteria.NAME,name);
    if (isAdmin) {
      c.addCriteria(Criteria.VTYPE,type);
      c.addCriteria(Criteria.DATACENTERID,zoneId);
      c.addCriteria(Criteria.PODID,podId);
      c.addCriteria(Criteria.HOSTID,hostId);
      c.addCriteria(Criteria.DOMAINID,domainId);
    }
  }
  List<VolumeVO> volumes=getManagementServer().searchForVolumes(c);
  if (volumes == null || volumes.size() == 0) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  List<Pair<String,Object>> volumeTags=new ArrayList<Pair<String,Object>>();
  Object[] vTag=new Object[volumes.size()];
  int i=0;
  for (  VolumeVO volume : volumes) {
    List<Pair<String,Object>> volumeData=new ArrayList<Pair<String,Object>>();
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),volume.getId()));
    AsyncJobVO asyncJob=getManagementServer().findInstancePendingAsyncJob(""String_Node_Str"",volume.getId());
    if (asyncJob != null) {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),asyncJob.getId().toString()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_STATUS.getName(),String.valueOf(asyncJob.getStatus())));
    }
    if (volume.getName() != null) {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),volume.getName()));
    }
 else {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),""String_Node_Str""));
    }
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),Long.valueOf(volume.getDataCenterId()).toString()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().findDataCenterById(volume.getDataCenterId()).getName()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.TYPE.getName(),volume.getVolumeType()));
    if (volume.getDeviceId() != null)     volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DEVICE_ID.getName(),Long.valueOf(volume.getDeviceId()).toString()));
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=getManagementServer().findVMInstanceById(instanceId);
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName(),vm.getId()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_NAME.getName(),vm.getName()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_DISPLAYNAME.getName(),vm.getName()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_STATE.getName(),vm.getState()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DEVICE_ID.getName(),volume.getDeviceId()));
    }
    long virtualSizeInBytes=volume.getSize();
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.SIZE.getName(),virtualSizeInBytes));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(volume.getCreated())));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ATTACHED.getName(),getDateString(volume.getAttached())));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),volume.getStatus()));
    Account accountTemp=getManagementServer().findAccountById(volume.getAccountId());
    if (accountTemp != null) {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountTemp.getAccountName()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),accountTemp.getDomainId()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(accountTemp.getDomainId()).getName()));
    }
    String storageType;
    try {
      if (volume.getPoolId() == null) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=getManagementServer().volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
      }
    }
 catch (    InvalidParameterValueException e) {
      s_logger.error(e.getMessage(),e);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
    }
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.STORAGE_TYPE.getName(),storageType));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_OFFERING_ID.getName(),volume.getDiskOfferingId()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_OFFERING_NAME.getName(),getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getName()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_OFFERING_DISPLAY_TEXT.getName(),getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getDisplayText()));
    Long poolId=volume.getPoolId();
    String poolName=(poolId == null) ? ""String_Node_Str"" : getManagementServer().findPoolById(poolId).getName();
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.STORAGE.getName(),poolName));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.SOURCE_ID.getName(),volume.getSourceId()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.SOURCE_TYPE.getName(),volume.getSourceType().toString()));
    vTag[i++]=volumeData;
  }
  Pair<String,Object> volumeTag=new Pair<String,Object>(""String_Node_Str"",vTag);
  volumeTags.add(volumeTag);
  return volumeTags;
}","@Override public List<Pair<String,Object>> execute(Map<String,Object> params){
  Account account=(Account)params.get(BaseCmd.Properties.ACCOUNT_OBJ.getName());
  Long id=(Long)params.get(BaseCmd.Properties.ID.getName());
  String type=(String)params.get(BaseCmd.Properties.TYPE.getName());
  String name=(String)params.get(BaseCmd.Properties.NAME.getName());
  Long zoneId=(Long)params.get(BaseCmd.Properties.ZONE_ID.getName());
  Long podId=(Long)params.get(BaseCmd.Properties.POD_ID.getName());
  Long vmId=(Long)params.get(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName());
  String accountName=(String)params.get(BaseCmd.Properties.ACCOUNT.getName());
  Long domainId=(Long)params.get(BaseCmd.Properties.DOMAIN_ID.getName());
  Long hostId=(Long)params.get(BaseCmd.Properties.HOST_ID.getName());
  String keyword=(String)params.get(BaseCmd.Properties.KEYWORD.getName());
  Integer page=(Integer)params.get(BaseCmd.Properties.PAGE.getName());
  Integer pageSize=(Integer)params.get(BaseCmd.Properties.PAGESIZE.getName());
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !getManagementServer().isChildDomain(account.getDomainId(),domainId)) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=getManagementServer().findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Long[] accountIds=null;
  if (accountId != null) {
    accountIds=new Long[1];
    accountIds[0]=accountId;
  }
  Long startIndex=Long.valueOf(0);
  int pageSizeNum=50;
  if (pageSize != null) {
    pageSizeNum=pageSize.intValue();
  }
  if (page != null) {
    int pageNum=page.intValue();
    if (pageNum > 0) {
      startIndex=Long.valueOf(pageSizeNum * (pageNum - 1));
    }
  }
  Criteria c=new Criteria(""String_Node_Str"",Boolean.FALSE,startIndex,Long.valueOf(pageSizeNum));
  c.addCriteria(Criteria.ACCOUNTID,accountIds);
  if (keyword != null) {
    c.addCriteria(Criteria.KEYWORD,keyword);
  }
 else {
    c.addCriteria(Criteria.ID,id);
    c.addCriteria(Criteria.INSTANCEID,vmId);
    c.addCriteria(Criteria.NAME,name);
    if (isAdmin) {
      c.addCriteria(Criteria.VTYPE,type);
      c.addCriteria(Criteria.DATACENTERID,zoneId);
      c.addCriteria(Criteria.PODID,podId);
      c.addCriteria(Criteria.HOSTID,hostId);
      c.addCriteria(Criteria.DOMAINID,domainId);
    }
  }
  List<VolumeVO> volumes=getManagementServer().searchForVolumes(c);
  if (volumes == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  List<Pair<String,Object>> volumeTags=new ArrayList<Pair<String,Object>>();
  Object[] vTag=new Object[volumes.size()];
  int i=0;
  for (  VolumeVO volume : volumes) {
    List<Pair<String,Object>> volumeData=new ArrayList<Pair<String,Object>>();
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ID.getName(),volume.getId()));
    AsyncJobVO asyncJob=getManagementServer().findInstancePendingAsyncJob(""String_Node_Str"",volume.getId());
    if (asyncJob != null) {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_ID.getName(),asyncJob.getId().toString()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.JOB_STATUS.getName(),String.valueOf(asyncJob.getStatus())));
    }
    if (volume.getName() != null) {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),volume.getName()));
    }
 else {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.NAME.getName(),""String_Node_Str""));
    }
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_ID.getName(),Long.valueOf(volume.getDataCenterId()).toString()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ZONE_NAME.getName(),getManagementServer().findDataCenterById(volume.getDataCenterId()).getName()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.TYPE.getName(),volume.getVolumeType()));
    if (volume.getDeviceId() != null)     volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DEVICE_ID.getName(),Long.valueOf(volume.getDeviceId()).toString()));
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=getManagementServer().findVMInstanceById(instanceId);
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_ID.getName(),vm.getId()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_NAME.getName(),vm.getName()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_DISPLAYNAME.getName(),vm.getName()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.VIRTUAL_MACHINE_STATE.getName(),vm.getState()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DEVICE_ID.getName(),volume.getDeviceId()));
    }
    long virtualSizeInBytes=volume.getSize();
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.SIZE.getName(),virtualSizeInBytes));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.CREATED.getName(),getDateString(volume.getCreated())));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ATTACHED.getName(),getDateString(volume.getAttached())));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.STATE.getName(),volume.getStatus()));
    Account accountTemp=getManagementServer().findAccountById(volume.getAccountId());
    if (accountTemp != null) {
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.ACCOUNT.getName(),accountTemp.getAccountName()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN_ID.getName(),accountTemp.getDomainId()));
      volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DOMAIN.getName(),getManagementServer().findDomainIdById(accountTemp.getDomainId()).getName()));
    }
    String storageType;
    try {
      if (volume.getPoolId() == null) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=getManagementServer().volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
      }
    }
 catch (    InvalidParameterValueException e) {
      s_logger.error(e.getMessage(),e);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
    }
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.STORAGE_TYPE.getName(),storageType));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_OFFERING_ID.getName(),volume.getDiskOfferingId()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_OFFERING_NAME.getName(),getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getName()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.DISK_OFFERING_DISPLAY_TEXT.getName(),getManagementServer().findDiskOfferingById(volume.getDiskOfferingId()).getDisplayText()));
    Long poolId=volume.getPoolId();
    String poolName=(poolId == null) ? ""String_Node_Str"" : getManagementServer().findPoolById(poolId).getName();
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.STORAGE.getName(),poolName));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.SOURCE_ID.getName(),volume.getSourceId()));
    volumeData.add(new Pair<String,Object>(BaseCmd.Properties.SOURCE_TYPE.getName(),volume.getSourceType().toString()));
    vTag[i++]=volumeData;
  }
  Pair<String,Object> volumeTag=new Pair<String,Object>(""String_Node_Str"",vTag);
  volumeTags.add(volumeTag);
  return volumeTags;
}",0.99856635292651
107490,"@DB public boolean deleteHost(long hostId){
  Transaction txn=Transaction.currentTxn();
  try {
    HostVO host=_hostDao.findById(hostId);
    if (host == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      }
      return true;
    }
    if (host.getType() == Type.SecondaryStorage) {
      return deleteSecondaryStorageHost(host);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ host.getGuid());
    }
    if (host.getType() == Type.Routing && host.getHypervisorType() == Hypervisor.Type.XenServer) {
      if (host.getClusterId() != null) {
        List<HostVO> hosts=_hostDao.listBy(Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
        for (        HostVO thost : hosts) {
          long thostId=thost.getId();
          if (thostId == hostId)           continue;
          PoolEjectCommand eject=new PoolEjectCommand(host.getGuid());
          Answer answer=easySend(thostId,eject);
          if (answer == null || !answer.getResult()) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ thostId+ ""String_Node_Str""+ answer.getDetails());
            continue;
          }
          break;
        }
      }
    }
    txn.start();
    _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
    AgentAttache attache=_agents.get(hostId);
    handleDisconnect(attache,Status.Event.Remove,false);
    _hostDao.remove(hostId);
    ComponentLocator locator=ComponentLocator.getLocator(""String_Node_Str"");
    _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
    if (_storagePoolHostDao == null) {
      throw new ConfigurationException(""String_Node_Str"" + StoragePoolHostDao.class);
    }
    ArrayList<Long> pool_ids=_storagePoolHostDao.getPoolIds(hostId);
    _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
    if (!pool_ids.isEmpty()) {
      _storagePoolDao.deleteStoragePoolRecords(pool_ids);
    }
    txn.commit();
    return true;
  }
 catch (  Throwable t) {
    s_logger.error(""String_Node_Str"" + hostId,t);
    return false;
  }
}","@DB public boolean deleteHost(long hostId){
  Transaction txn=Transaction.currentTxn();
  try {
    HostVO host=_hostDao.findById(hostId);
    if (host == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      }
      return true;
    }
    if (host.getType() == Type.SecondaryStorage) {
      return deleteSecondaryStorageHost(host);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ host.getGuid());
    }
    if (host.getType() == Type.Routing && host.getHypervisorType() == Hypervisor.Type.XenServer) {
      if (host.getClusterId() != null) {
        List<HostVO> hosts=_hostDao.listBy(Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
        for (        HostVO thost : hosts) {
          long thostId=thost.getId();
          if (thostId == hostId)           continue;
          PoolEjectCommand eject=new PoolEjectCommand(host.getGuid());
          Answer answer=easySend(thostId,eject);
          if (answer == null || !answer.getResult()) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ thostId+ ""String_Node_Str""+ answer.getDetails());
            continue;
          }
          break;
        }
      }
    }
    txn.start();
    _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
    AgentAttache attache=_agents.get(hostId);
    handleDisconnect(attache,Status.Event.Remove,false);
    host.setGuid(null);
    host.setClusterId(null);
    _hostDao.update(host.getId(),host);
    _hostDao.remove(hostId);
    ComponentLocator locator=ComponentLocator.getLocator(""String_Node_Str"");
    _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
    if (_storagePoolHostDao == null) {
      throw new ConfigurationException(""String_Node_Str"" + StoragePoolHostDao.class);
    }
    ArrayList<Long> pool_ids=_storagePoolHostDao.getPoolIds(hostId);
    _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
    if (!pool_ids.isEmpty()) {
      _storagePoolDao.deleteStoragePoolRecords(pool_ids);
    }
    txn.commit();
    return true;
  }
 catch (  Throwable t) {
    s_logger.error(""String_Node_Str"" + hostId,t);
    return false;
  }
}",0.9791619986556128
107491,"protected AgentAttache handleDirectConnect(ServerResource resource,StartupCommand[] startup,Map<String,String> details,boolean old){
  if (startup == null) {
    return null;
  }
  HostVO server=createHost(startup,resource,details,old);
  if (server == null) {
    return null;
  }
  long id=server.getId();
  AgentAttache attache=createAttache(id,server,resource);
  if (!resource.IsRemoteAgent())   notifyMonitorsOfConnection(attache,startup);
  return attache;
}","protected AgentAttache handleDirectConnect(ServerResource resource,StartupCommand[] startup,Map<String,String> details,boolean old){
  if (startup == null) {
    return null;
  }
  HostVO server=createHost(startup,resource,details,old);
  if (server == null) {
    return null;
  }
  long id=server.getId();
  AgentAttache attache=createAttache(id,server,resource);
  if (!resource.IsRemoteAgent())   notifyMonitorsOfConnection(attache,startup);
 else {
    _hostDao.updateStatus(server,Event.AgentConnected,_nodeId);
  }
  return attache;
}",0.8906560636182903
107492,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password) throws DiscoveryException {
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  Session sshSession=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      throw new Exception(""String_Node_Str"");
    }
    SCPClient scp=new SCPClient(sshConnection);
    scp.put(_setupAgentPath,""String_Node_Str"",""String_Node_Str"");
    sshSession=sshConnection.openSession();
    s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ guid);
    sshSession.execCommand(""String_Node_Str"" + ""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ guid+ ""String_Node_Str"");
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",guid);
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    kvmResource.setRemoteAgent(true);
    resources.put(kvmResource,details);
    return resources;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshSession != null)     sshSession.close();
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password) throws DiscoveryException {
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      throw new Exception(""String_Node_Str"");
    }
    if (!sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    s_logger.debug(""String_Node_Str"" + _setupAgentPath + ""String_Node_Str"");
    SCPClient scp=new SCPClient(sshConnection);
    scp.put(_setupAgentPath,""String_Node_Str"",""String_Node_Str"");
    sshExecuteCmd(sshConnection,""String_Node_Str"" + ""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ guid+ ""String_Node_Str"",3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",guid + ""String_Node_Str"");
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    kvmResource.setRemoteAgent(true);
    resources.put(kvmResource,details);
    return resources;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}",0.8761220825852782
107493,"@Override public List<VolumeVO> searchForVolumes(Criteria c){
  Filter searchFilter=new Filter(VolumeVO.class,c.getOrderBy(),c.getAscending(),c.getOffset(),c.getLimit());
  Object[] accountIds=(Object[])c.getCriteria(Criteria.ACCOUNTID);
  Object type=c.getCriteria(Criteria.VTYPE);
  Long vmInstanceId=(Long)c.getCriteria(Criteria.INSTANCEID);
  Object zone=c.getCriteria(Criteria.DATACENTERID);
  Object pod=c.getCriteria(Criteria.PODID);
  Object domainId=c.getCriteria(Criteria.DOMAINID);
  Object id=c.getCriteria(Criteria.ID);
  Object keyword=c.getCriteria(Criteria.KEYWORD);
  Object name=c.getCriteria(Criteria.NAME);
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountIds == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId());
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountIds != null) {
    if ((accountIds.length == 1) && (accountIds[0] != null)) {
      sc.setParameters(""String_Node_Str"",accountIds[0]);
    }
 else {
      sc.setParameters(""String_Node_Str"",accountIds);
    }
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById((Long)domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (!template.getUniqueName().equalsIgnoreCase(""String_Node_Str""))     returnableVolumes.add(v);
  }
  return returnableVolumes;
}","@Override public List<VolumeVO> searchForVolumes(Criteria c){
  Filter searchFilter=new Filter(VolumeVO.class,c.getOrderBy(),c.getAscending(),c.getOffset(),c.getLimit());
  Object[] accountIds=(Object[])c.getCriteria(Criteria.ACCOUNTID);
  Object type=c.getCriteria(Criteria.VTYPE);
  Long vmInstanceId=(Long)c.getCriteria(Criteria.INSTANCEID);
  Object zone=c.getCriteria(Criteria.DATACENTERID);
  Object pod=c.getCriteria(Criteria.PODID);
  Object domainId=c.getCriteria(Criteria.DOMAINID);
  Object id=c.getCriteria(Criteria.ID);
  Object keyword=c.getCriteria(Criteria.KEYWORD);
  Object name=c.getCriteria(Criteria.NAME);
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountIds == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId());
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountIds != null) {
    if ((accountIds.length == 1) && (accountIds[0] != null)) {
      sc.setParameters(""String_Node_Str"",accountIds[0]);
    }
 else {
      sc.setParameters(""String_Node_Str"",accountIds);
    }
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById((Long)domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && template.getUniqueName().equalsIgnoreCase(""String_Node_Str"")) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}",0.9944708756589944
107494,"public VlanVO createVlanAndPublicIpRange(long userId,VlanType vlanType,Long zoneId,Long accountId,Long podId,String vlanId,String vlanGateway,String vlanNetmask,String startIP,String endIP) throws InvalidParameterValueException, InternalErrorException {
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new InternalErrorException(""String_Node_Str"");
      }
    }
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (!(accountId == null && podId == null) && false) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (!((accountId != null && podId == null) || (accountId == null && podId != null))) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (accountId != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      AccountVO account;
      if ((account=_accountDao.findById(accountId)) == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAccountVlanMapsByAccount(accountId);
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId().longValue()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      HostPodVO pod=null;
      if (podId != null && ((pod=_podDao.findById(podId)) == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAll();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId().longValue()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
  String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
  long guestCidrSize=Long.parseLong(cidrPair[1]);
  long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
  long cidrSizeToUse=-1;
  if (vlanCidrSize < guestCidrSize) {
    cidrSizeToUse=vlanCidrSize;
  }
 else {
    cidrSizeToUse=guestCidrSize;
  }
  String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
  if (newVlanSubnet.equals(guestSubnet)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.findByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange);
  vlan=_vlanDao.persist(vlan);
  if (accountId != null && vlanType.equals(VlanType.VirtualNetwork)) {
    if (!savePublicIPRangeForAccount(startIP,endIP,zoneId,vlan.getId(),accountId,_accountDao.findById(accountId).getDomainId())) {
      deletePublicIPRange(vlan.getId());
      _vlanDao.delete(vlan.getId());
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
 else   if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.delete(vlan.getId());
    throw new InternalErrorException(""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(accountId,vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  saveConfigurationEvent(userId,accountId,EventTypes.EVENT_VLAN_IP_RANGE_CREATE,eventMsg,""String_Node_Str"" + vlanType,""String_Node_Str"" + zoneId,""String_Node_Str"" + accountId,""String_Node_Str"" + podId,""String_Node_Str"" + vlanId,""String_Node_Str"" + vlanGateway,""String_Node_Str"" + vlanNetmask,""String_Node_Str"" + startIP,""String_Node_Str"" + endIP);
  return vlan;
}","public VlanVO createVlanAndPublicIpRange(long userId,VlanType vlanType,Long zoneId,Long accountId,Long podId,String vlanId,String vlanGateway,String vlanNetmask,String startIP,String endIP) throws InvalidParameterValueException, InternalErrorException {
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new InternalErrorException(""String_Node_Str"");
      }
    }
  }
  if (!vlanId.equals(Vlan.UNTAGGED)) {
    VlanVO vlanHandle=_vlanDao.findByZoneAndVlanId(zoneId,vlanId);
    if (vlanHandle != null && !vlanHandle.getVlanType().equals(vlanType))     throw new InvalidParameterValueException(""String_Node_Str"" + vlanHandle.getVlanType().toString() + ""String_Node_Str""+ vlanType.toString());
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (!(accountId == null && podId == null) && false) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (!((accountId != null && podId == null) || (accountId == null && podId != null))) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (accountId != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      AccountVO account;
      if ((account=_accountDao.findById(accountId)) == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAccountVlanMapsByAccount(accountId);
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId().longValue()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      HostPodVO pod=null;
      if (podId != null && ((pod=_podDao.findById(podId)) == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAll();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId().longValue()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
  String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
  long guestCidrSize=Long.parseLong(cidrPair[1]);
  long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
  long cidrSizeToUse=-1;
  if (vlanCidrSize < guestCidrSize) {
    cidrSizeToUse=vlanCidrSize;
  }
 else {
    cidrSizeToUse=guestCidrSize;
  }
  String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
  if (newVlanSubnet.equals(guestSubnet)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.findByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanId()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanId() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange);
  vlan=_vlanDao.persist(vlan);
  if (accountId != null && vlanType.equals(VlanType.VirtualNetwork)) {
    if (!savePublicIPRangeForAccount(startIP,endIP,zoneId,vlan.getId(),accountId,_accountDao.findById(accountId).getDomainId())) {
      deletePublicIPRange(vlan.getId());
      _vlanDao.delete(vlan.getId());
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
 else   if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.delete(vlan.getId());
    throw new InternalErrorException(""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(accountId,vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  saveConfigurationEvent(userId,accountId,EventTypes.EVENT_VLAN_IP_RANGE_CREATE,eventMsg,""String_Node_Str"" + vlanType,""String_Node_Str"" + zoneId,""String_Node_Str"" + accountId,""String_Node_Str"" + podId,""String_Node_Str"" + vlanId,""String_Node_Str"" + vlanGateway,""String_Node_Str"" + vlanNetmask,""String_Node_Str"" + startIP,""String_Node_Str"" + endIP);
  return vlan;
}",0.9781508126831868
107495,"private List<interfaceDef> createRouterVMNetworks(StartRouterCommand cmd) throws InternalErrorException {
  List<interfaceDef> nics=new ArrayList<interfaceDef>();
  DomainRouter router=cmd.getRouter();
  String guestMac=router.getGuestMacAddress();
  String privateMac=router.getPrivateMacAddress();
  String pubMac=router.getPublicMacAddress();
  String brName;
  interfaceDef pubNic=new interfaceDef();
  interfaceDef privNic=new interfaceDef();
  interfaceDef vnetNic=new interfaceDef();
  if (""String_Node_Str"".equalsIgnoreCase(router.getVnet())) {
    vnetNic.defBridgeNet(_privBridgeName,null,guestMac,interfaceDef.nicModel.VIRTIO);
  }
 else {
    String vnetId=getVnetId(router.getVnet());
    brName=setVnetBrName(vnetId);
    String vnetDev=""String_Node_Str"" + vnetId;
    createVnet(vnetId,_pifs.first());
    vnetNic.defBridgeNet(brName,vnetDev,guestMac,interfaceDef.nicModel.VIRTIO);
  }
  nics.add(vnetNic);
  privNic.defPrivateNet(_privNwName,null,privateMac,interfaceDef.nicModel.VIRTIO);
  nics.add(privNic);
  if (""String_Node_Str"".equalsIgnoreCase(router.getVlanId())) {
    pubNic.defBridgeNet(_publicBridgeName,null,pubMac,interfaceDef.nicModel.VIRTIO);
  }
 else {
    String vnetId=getVnetId(router.getVlanId());
    brName=setVnetBrName(vnetId);
    String vnetDev=""String_Node_Str"" + vnetId;
    createVnet(vnetId,_pifs.second());
    pubNic.defBridgeNet(brName,vnetDev,pubMac,interfaceDef.nicModel.VIRTIO);
  }
  nics.add(pubNic);
  return nics;
}","private List<interfaceDef> createRouterVMNetworks(StartRouterCommand cmd) throws InternalErrorException {
  List<interfaceDef> nics=new ArrayList<interfaceDef>();
  DomainRouter router=cmd.getRouter();
  String guestMac=router.getGuestMacAddress();
  String privateMac=router.getPrivateMacAddress();
  String pubMac=router.getPublicMacAddress();
  String brName;
  interfaceDef pubNic=new interfaceDef();
  interfaceDef privNic=new interfaceDef();
  interfaceDef vnetNic=new interfaceDef();
  if (""String_Node_Str"".equalsIgnoreCase(router.getVnet())) {
    vnetNic.defBridgeNet(_privBridgeName,null,guestMac,interfaceDef.nicModel.VIRTIO);
  }
 else {
    String vnetId=getVnetId(router.getVnet());
    brName=setVnetBrName(vnetId);
    String vnetDev=""String_Node_Str"" + vnetId;
    createVnet(vnetId,_pifs.first());
    vnetNic.defBridgeNet(brName,null,guestMac,interfaceDef.nicModel.VIRTIO);
  }
  nics.add(vnetNic);
  privNic.defPrivateNet(_privNwName,null,privateMac,interfaceDef.nicModel.VIRTIO);
  nics.add(privNic);
  if (""String_Node_Str"".equalsIgnoreCase(router.getVlanId())) {
    pubNic.defBridgeNet(_publicBridgeName,null,pubMac,interfaceDef.nicModel.VIRTIO);
  }
 else {
    String vnetId=getVnetId(router.getVlanId());
    brName=setVnetBrName(vnetId);
    String vnetDev=""String_Node_Str"" + vnetId;
    createVnet(vnetId,_pifs.second());
    pubNic.defBridgeNet(brName,null,pubMac,interfaceDef.nicModel.VIRTIO);
  }
  nics.add(pubNic);
  return nics;
}",0.992517006802721
107496,"protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _securityGroupDao=locator.getDao(SecurityGroupDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _networkRuleConfigDao=locator.getDao(NetworkRuleConfigDao.class);
  _securityGroupVMMapDao=locator.getDao(SecurityGroupVMMapDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _templateHostDao=locator.getDao(VMTemplateHostDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _snapshotScheduler=locator.getManager(SnapshotScheduler.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  if (value != null)   _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  _isHypervisorSnapshotCapable=hypervisorType.equals(Hypervisor.Type.XenServer.name());
}","protected ManagementServerImpl(){
  ComponentLocator locator=ComponentLocator.getLocator(Name);
  _lunDao=locator.getDao(PreallocatedLunDao.class);
  _configDao=locator.getDao(ConfigurationDao.class);
  _routerDao=locator.getDao(DomainRouterDao.class);
  _eventDao=locator.getDao(EventDao.class);
  _dcDao=locator.getDao(DataCenterDao.class);
  _vlanDao=locator.getDao(VlanDao.class);
  _accountVlanMapDao=locator.getDao(AccountVlanMapDao.class);
  _podVlanMapDao=locator.getDao(PodVlanMapDao.class);
  _hostDao=locator.getDao(HostDao.class);
  _hostPodDao=locator.getDao(HostPodDao.class);
  _jobDao=locator.getDao(AsyncJobDao.class);
  _clusterDao=locator.getDao(ClusterDao.class);
  _accountMgr=locator.getManager(AccountManager.class);
  _agentMgr=locator.getManager(AgentManager.class);
  _configMgr=locator.getManager(ConfigurationManager.class);
  _networkMgr=locator.getManager(NetworkManager.class);
  _vmMgr=locator.getManager(UserVmManager.class);
  _consoleProxyMgr=locator.getManager(ConsoleProxyManager.class);
  _secStorageVmMgr=locator.getManager(SecondaryStorageVmManager.class);
  _storageMgr=locator.getManager(StorageManager.class);
  _firewallRulesDao=locator.getDao(FirewallRulesDao.class);
  _securityGroupDao=locator.getDao(SecurityGroupDao.class);
  _networkSecurityGroupDao=locator.getDao(NetworkGroupDao.class);
  _loadBalancerDao=locator.getDao(LoadBalancerDao.class);
  _networkRuleConfigDao=locator.getDao(NetworkRuleConfigDao.class);
  _securityGroupVMMapDao=locator.getDao(SecurityGroupVMMapDao.class);
  _publicIpAddressDao=locator.getDao(IPAddressDao.class);
  _privateIpAddressDao=locator.getDao(DataCenterIpAddressDaoImpl.class);
  _loadBalancerVMMapDao=locator.getDao(LoadBalancerVMMapDao.class);
  _consoleProxyDao=locator.getDao(ConsoleProxyDao.class);
  _secStorageVmDao=locator.getDao(SecondaryStorageVmDao.class);
  _userDao=locator.getDao(UserDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _offeringsDao=locator.getDao(ServiceOfferingDao.class);
  _diskOfferingDao=locator.getDao(DiskOfferingDao.class);
  _templateDao=locator.getDao(VMTemplateDao.class);
  _templateHostDao=locator.getDao(VMTemplateHostDao.class);
  _launchPermissionDao=locator.getDao(LaunchPermissionDao.class);
  _domainDao=locator.getDao(DomainDao.class);
  _accountDao=locator.getDao(AccountDao.class);
  _resourceLimitDao=locator.getDao(ResourceLimitDao.class);
  _userAccountDao=locator.getDao(UserAccountDao.class);
  _alertDao=locator.getDao(AlertDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _snapshotDao=locator.getDao(SnapshotDao.class);
  _snapshotPolicyDao=locator.getDao(SnapshotPolicyDao.class);
  _guestOSDao=locator.getDao(GuestOSDao.class);
  _guestOSCategoryDao=locator.getDao(GuestOSCategoryDao.class);
  _poolDao=locator.getDao(StoragePoolDao.class);
  _vmDao=locator.getDao(UserVmDao.class);
  _configs=_configDao.getConfiguration();
  _userStatsDao=locator.getDao(UserStatisticsDao.class);
  _vmInstanceDao=locator.getDao(VMInstanceDao.class);
  _volumeDao=locator.getDao(VolumeDao.class);
  _diskTemplateDao=locator.getDao(DiskTemplateDao.class);
  _alertMgr=locator.getManager(AlertManager.class);
  _asyncMgr=locator.getManager(AsyncJobManager.class);
  _tmpltMgr=locator.getManager(TemplateManager.class);
  _snapMgr=locator.getManager(SnapshotManager.class);
  _snapshotScheduler=locator.getManager(SnapshotScheduler.class);
  _networkGroupMgr=locator.getManager(NetworkGroupManager.class);
  _userAuthenticators=locator.getAdapters(UserAuthenticator.class);
  if (_userAuthenticators == null || !_userAuthenticators.isSet()) {
    s_logger.error(""String_Node_Str"");
  }
  _domain=_configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  if (!_domain.startsWith(""String_Node_Str"")) {
    _domain=""String_Node_Str"" + _domain;
  }
  String value=_configs.get(""String_Node_Str"");
  if (value != null)   _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  value=_configs.get(""String_Node_Str"");
  int cleanup=NumbersUtil.parseInt(value,60 * 60 * 24);
  String maxVolumeSizeInGbString=_configs.get(""String_Node_Str"");
  int maxVolumeSizeGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  _maxVolumeSizeInGb=maxVolumeSizeGb;
  _routerRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),NetworkManager.DEFAULT_ROUTER_VM_RAMSIZE);
  _proxyRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  _ssRamSize=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  _directAttachNetworkExternalIpAllocator=Boolean.parseBoolean(_configs.get(""String_Node_Str""));
  _statsCollector=StatsCollector.getInstance(_configs);
  _executor.scheduleAtFixedRate(new AccountCleanupTask(),cleanup,cleanup,TimeUnit.SECONDS);
  _purgeDelay=NumbersUtil.parseInt(_configs.get(""String_Node_Str""),0);
  if (_purgeDelay != 0) {
    _eventExecutor.scheduleAtFixedRate(new EventPurgeTask(),cleanup,cleanup,TimeUnit.SECONDS);
  }
  String[] availableIds=TimeZone.getAvailableIDs();
  _availableIdsMap=new HashMap<String,Boolean>(availableIds.length);
  for (  String id : availableIds) {
    _availableIdsMap.put(id,true);
  }
  String enabled=_configDao.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(enabled)) {
    _networkGroupsEnabled=true;
  }
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  _isHypervisorSnapshotCapable=hypervisorType.equals(Hypervisor.Type.XenServer.name());
}",0.9837205048472654
107497,"protected HashMap<String,VmStatsEntry> getVmStats(GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(getDataAverage(dataNode,col,numRows));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(getDataAverage(dataNode,col,numRows));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}","protected HashMap<String,VmStatsEntry> getVmStats(GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows)) * 100);
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(getDataAverage(dataNode,col,numRows));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(getDataAverage(dataNode,col,numRows));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}",0.9981735159817352
107498,"/** 
 * @return the packets represented in the FCI portion of an RTCPtransport-cc feedback packet. Warning: the timestamps are represented in the 250µs format used by the on-the-wire format, and don't represent local time. This is different than the timestamps expected as input when constructing a packet with {@link RTCPTCCPacket#RTCPTCCPacket(long,long,PacketMap,byte,DiagnosticContext)}.
 * @param fciBuffer the buffer which contains the FCI portion of the RTCPfeedback packet.
 * @param includeNotReceived whether the returned map should include thepackets described in the feedback packet as lost. Note that the RLE encoding allows ~2^16 packets to be described as lost in just a few bytes, so when parsing packets coming over the network it is wise to not blindly set this option to  {@code true}.
 */
static PacketMap getPacketsFromFci(ByteArrayBuffer fciBuffer,boolean includeNotReceived){
  int fciLen=-1;
  if (fciBuffer == null || (fciLen=fciBuffer.getLength()) < MIN_FCI_LENGTH) {
    logger.warn(PARSE_ERROR + ""String_Node_Str"" + fciLen);
    return null;
  }
  byte[] fciBuf=fciBuffer.getBuffer();
  int fciOff=fciBuffer.getOffset();
  int currentSeq=RTPUtils.readUint16AsInt(fciBuf,fciOff);
  int packetStatusCount=RTPUtils.readUint16AsInt(fciBuf,fciOff + 2);
  long referenceTime=getReferenceTime250us(fciBuffer);
  int currentPscOff=fciOff + PACKET_STATUS_CHUNK_OFFSET;
  int packetsRemaining=packetStatusCount;
  while (packetsRemaining > 0) {
    if (currentPscOff + CHUNK_SIZE_BYTES > fciOff + fciLen) {
      logger.warn(PARSE_ERROR + ""String_Node_Str"");
      return null;
    }
    int packetsInChunk=getPacketCount(fciBuf,currentPscOff);
    packetsRemaining-=packetsInChunk;
    currentPscOff+=CHUNK_SIZE_BYTES;
  }
  int deltaOff=currentPscOff;
  int currentDeltaOff=currentPscOff;
  currentPscOff=fciOff + PACKET_STATUS_CHUNK_OFFSET;
  packetsRemaining=packetStatusCount;
  PacketMap packets=new PacketMap();
  while (packetsRemaining > 0 && currentPscOff < deltaOff) {
    int packetsInChunk=Math.min(getPacketCount(fciBuf,currentPscOff),packetsRemaining);
    int chunkType=getChunkType(fciBuf,currentPscOff);
    if (packetsInChunk > 0 && chunkType == CHUNK_TYPE_RLE && readSymbol(fciBuf,currentPscOff,chunkType,0) == SYMBOL_NOT_RECEIVED) {
      if (includeNotReceived) {
        for (int i=0; i < packetsInChunk; i++) {
          int seq=(currentSeq + 1) % 0xffff;
          logPacket(seq,NEGATIVE_ONE,-1,SYMBOL_NOT_RECEIVED);
          packets.put(seq,NEGATIVE_ONE);
        }
      }
      currentSeq=(currentSeq + packetsInChunk) % 0xffff;
    }
 else {
      for (int i=0; i < packetsInChunk; i++) {
        int symbol=readSymbol(fciBuf,currentPscOff,chunkType,i);
        int delta=-1;
switch (symbol) {
case SYMBOL_SMALL_DELTA:
          if (currentDeltaOff >= fciOff + fciLen) {
            logger.warn(PARSE_ERROR + ""String_Node_Str"");
            return null;
          }
        delta=fciBuf[currentDeltaOff++] & 0xff;
      break;
case SYMBOL_LARGE_DELTA:
    if (currentDeltaOff + 1 >= fciOff + fciLen) {
      logger.warn(PARSE_ERROR + ""String_Node_Str"" + ""String_Node_Str"");
      return null;
    }
  delta=RTPUtils.readInt16AsInt(fciBuf,currentDeltaOff);
currentDeltaOff+=2;
break;
case SYMBOL_NOT_RECEIVED:
delta=-1;
break;
default :
logger.warn(PARSE_ERROR + ""String_Node_Str"" + symbol);
return null;
}
if (delta == -1) {
if (includeNotReceived) {
logPacket(currentSeq,NEGATIVE_ONE,delta,symbol);
packets.put(currentSeq,NEGATIVE_ONE);
}
}
 else {
referenceTime+=delta;
logPacket(currentSeq,referenceTime,delta,symbol);
packets.put(currentSeq,referenceTime);
}
currentSeq=(currentSeq + 1) & 0xffff;
}
}
currentPscOff+=CHUNK_SIZE_BYTES;
packetsRemaining-=packetsInChunk;
}
if (packetsRemaining > 0) {
logger.warn(""String_Node_Str"" + ""String_Node_Str"");
}
return packets;
}","/** 
 * @return the packets represented in the FCI portion of an RTCPtransport-cc feedback packet. Warning: the timestamps are represented in the 250µs format used by the on-the-wire format, and don't represent local time. This is different than the timestamps expected as input when constructing a packet with {@link RTCPTCCPacket#RTCPTCCPacket(long,long,PacketMap,byte,DiagnosticContext)}.
 * @param fciBuffer the buffer which contains the FCI portion of the RTCPfeedback packet.
 * @param includeNotReceived whether the returned map should include thepackets described in the feedback packet as lost. Note that the RLE encoding allows ~2^16 packets to be described as lost in just a few bytes, so when parsing packets coming over the network it is wise to not blindly set this option to  {@code true}.
 */
static PacketMap getPacketsFromFci(ByteArrayBuffer fciBuffer,boolean includeNotReceived){
  int fciLen=-1;
  if (fciBuffer == null || (fciLen=fciBuffer.getLength()) < MIN_FCI_LENGTH) {
    logger.warn(PARSE_ERROR + ""String_Node_Str"" + fciLen);
    return null;
  }
  byte[] fciBuf=fciBuffer.getBuffer();
  int fciOff=fciBuffer.getOffset();
  int currentSeq=RTPUtils.readUint16AsInt(fciBuf,fciOff);
  int packetStatusCount=RTPUtils.readUint16AsInt(fciBuf,fciOff + 2);
  long referenceTime=getReferenceTime250us(fciBuffer);
  int currentPscOff=fciOff + PACKET_STATUS_CHUNK_OFFSET;
  int packetsRemaining=packetStatusCount;
  while (packetsRemaining > 0) {
    if (currentPscOff + CHUNK_SIZE_BYTES > fciOff + fciLen) {
      logger.warn(PARSE_ERROR + ""String_Node_Str"");
      return null;
    }
    int packetsInChunk=getPacketCount(fciBuf,currentPscOff);
    packetsRemaining-=packetsInChunk;
    currentPscOff+=CHUNK_SIZE_BYTES;
  }
  int deltaOff=currentPscOff;
  int currentDeltaOff=currentPscOff;
  currentPscOff=fciOff + PACKET_STATUS_CHUNK_OFFSET;
  packetsRemaining=packetStatusCount;
  PacketMap packets=new PacketMap();
  while (packetsRemaining > 0 && currentPscOff < deltaOff) {
    int packetsInChunk=Math.min(getPacketCount(fciBuf,currentPscOff),packetsRemaining);
    int chunkType=getChunkType(fciBuf,currentPscOff);
    if (packetsInChunk > 0 && chunkType == CHUNK_TYPE_RLE && readSymbol(fciBuf,currentPscOff,chunkType,0) == SYMBOL_NOT_RECEIVED) {
      if (includeNotReceived) {
        for (int i=0; i < packetsInChunk; i++) {
          int seq=(currentSeq + i) % 0xffff;
          logPacket(seq,NEGATIVE_ONE,-1,SYMBOL_NOT_RECEIVED);
          packets.put(seq,NEGATIVE_ONE);
        }
      }
      currentSeq=(currentSeq + packetsInChunk) % 0xffff;
    }
 else {
      for (int i=0; i < packetsInChunk; i++) {
        int symbol=readSymbol(fciBuf,currentPscOff,chunkType,i);
        int delta=-1;
switch (symbol) {
case SYMBOL_SMALL_DELTA:
          if (currentDeltaOff >= fciOff + fciLen) {
            logger.warn(PARSE_ERROR + ""String_Node_Str"");
            return null;
          }
        delta=fciBuf[currentDeltaOff++] & 0xff;
      break;
case SYMBOL_LARGE_DELTA:
    if (currentDeltaOff + 1 >= fciOff + fciLen) {
      logger.warn(PARSE_ERROR + ""String_Node_Str"" + ""String_Node_Str"");
      return null;
    }
  delta=RTPUtils.readInt16AsInt(fciBuf,currentDeltaOff);
currentDeltaOff+=2;
break;
case SYMBOL_NOT_RECEIVED:
delta=-1;
break;
default :
logger.warn(PARSE_ERROR + ""String_Node_Str"" + symbol);
return null;
}
if (delta == -1) {
if (includeNotReceived) {
logPacket(currentSeq,NEGATIVE_ONE,delta,symbol);
packets.put(currentSeq,NEGATIVE_ONE);
}
}
 else {
referenceTime+=delta;
logPacket(currentSeq,referenceTime,delta,symbol);
packets.put(currentSeq,referenceTime);
}
currentSeq=(currentSeq + 1) & 0xffff;
}
}
currentPscOff+=CHUNK_SIZE_BYTES;
packetsRemaining-=packetsInChunk;
}
if (packetsRemaining > 0) {
logger.warn(""String_Node_Str"" + ""String_Node_Str"");
}
return packets;
}",0.9997382884061764
107499,"/** 
 * Notifies this instance of an incoming packet.
 * @param arrivalTimeMs the arrival time of the packet in millis.
 * @param sendTime24bits the send time of the packet in AST format(24 bits, 6.18 fixed point).
 * @param payloadSize the payload size of the packet.
 * @param ssrc the SSRC of the packet.
 */
@Override public void incomingPacketInfo(long arrivalTimeMs,long sendTime24bits,int payloadSize,long ssrc){
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + hashCode() + ""String_Node_Str""+ arrivalTimeMs+ ""String_Node_Str""+ sendTime24bits+ ""String_Node_Str""+ payloadSize+ ""String_Node_Str""+ ssrc);
  }
  long timestamp=sendTime24bits << kAbsSendTimeInterArrivalUpshift;
  long sendTimeMs=(long)(timestamp * kTimestampToMs);
  long nowMs=System.currentTimeMillis();
  long incomingBitrate_=incomingBitrate.getRate(arrivalTimeMs);
  if (incomingBitrate_ != 0) {
    incomingBitrateInitialized=true;
  }
 else   if (incomingBitrateInitialized) {
    incomingBitrate=new RateStatistics(kBitrateWindowMs,kBitrateScale);
    incomingBitrateInitialized=false;
  }
  incomingBitrate.update(payloadSize,arrivalTimeMs);
  if (firstPacketTimeMs == -1) {
    firstPacketTimeMs=nowMs;
  }
  boolean updateEstimate=false;
  long targetBitrateBps=0;
synchronized (this) {
    timeoutStreams(nowMs);
    ssrcsMap.put(ssrc,nowMs);
    if (!ssrcs.contains(ssrc)) {
      ssrcs=Collections.unmodifiableCollection(ssrcsMap.keySet());
    }
    if (payloadSize > kMinProbePacketSize && (!remoteRate.isValidEstimate() || nowMs - firstPacketTimeMs < kInitialProbingIntervalMs)) {
      if (totalProbesReceived < kMaxProbePackets) {
        long sendDeltaMs=-1;
        long recvDeltaMs=-1;
        if (!probes.isEmpty()) {
          sendDeltaMs=sendTimeMs - probes.get(probes.size() - 1).sendTimeMs;
          recvDeltaMs=arrivalTimeMs - probes.get(probes.size() - 1).sendTimeMs;
        }
        logger.warn(""String_Node_Str"" + sendTimeMs + ""String_Node_Str""+ arrivalTimeMs+ ""String_Node_Str""+ sendDeltaMs+ ""String_Node_Str""+ recvDeltaMs+ ""String_Node_Str"");
      }
      probes.add(new Probe(sendTimeMs,arrivalTimeMs,payloadSize));
      ++totalProbesReceived;
      if (processClusters(nowMs)) {
        updateEstimate=true;
      }
    }
    long[] deltas=this.deltas;
    deltas[0]=0;
    deltas[1]=0;
    deltas[2]=0;
    if (detector == null) {
      detector=new Detector(new OverUseDetectorOptions(),true);
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + hashCode() + ""String_Node_Str""+ remoteRate.hashCode()+ ""String_Node_Str""+ detector.detector.hashCode()+ ""String_Node_Str""+ detector.estimator.hashCode()+ ""String_Node_Str""+ detector.interArrival.hashCode());
      }
    }
    if (detector.interArrival.computeDeltas(timestamp,arrivalTimeMs,payloadSize,deltas,nowMs)) {
      double tsDeltaMs=deltas[0] * kTimestampToMs;
      detector.estimator.update(deltas[1],tsDeltaMs,(int)deltas[2],detector.detector.getState(),nowMs);
      detector.detector.detect(detector.estimator.getOffset(),tsDeltaMs,detector.estimator.getNumOfDeltas(),arrivalTimeMs);
    }
    if (!updateEstimate) {
      if (lastUpdateMs == -1 || nowMs - lastUpdateMs > remoteRate.getFeedBackInterval()) {
        updateEstimate=true;
      }
 else       if (detector.detector.getState() == BandwidthUsage.kBwOverusing) {
        long incomingRate_=incomingBitrate.getRate(arrivalTimeMs);
        if (incomingRate_ > 0 && remoteRate.isTimeToReduceFurther(nowMs,incomingBitrate_)) {
          updateEstimate=true;
        }
      }
    }
    if (updateEstimate) {
      input.bwState=detector.detector.getState();
      input.incomingBitRate=incomingBitrate.getRate(arrivalTimeMs);
      input.noiseVar=detector.estimator.getVarNoise();
      remoteRate.update(input,nowMs);
      targetBitrateBps=remoteRate.updateBandwidthEstimate(nowMs);
      updateEstimate=remoteRate.isValidEstimate();
    }
  }
  if (updateEstimate) {
    lastUpdateMs=nowMs;
    if (observer != null) {
      observer.onReceiveBitrateChanged(getSsrcs(),targetBitrateBps);
    }
  }
}","/** 
 * Notifies this instance of an incoming packet.
 * @param arrivalTimeMs the arrival time of the packet in millis.
 * @param sendTime24bits the send time of the packet in AST format(24 bits, 6.18 fixed point).
 * @param payloadSize the payload size of the packet.
 * @param ssrc the SSRC of the packet.
 */
@Override public void incomingPacketInfo(long arrivalTimeMs,long sendTime24bits,int payloadSize,long ssrc){
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + hashCode() + ""String_Node_Str""+ arrivalTimeMs+ ""String_Node_Str""+ sendTime24bits+ ""String_Node_Str""+ payloadSize+ ""String_Node_Str""+ ssrc);
  }
  long timestamp=sendTime24bits << kAbsSendTimeInterArrivalUpshift;
  long sendTimeMs=(long)(timestamp * kTimestampToMs);
  long nowMs=System.currentTimeMillis();
  long incomingBitrate_=incomingBitrate.getRate(arrivalTimeMs);
  if (incomingBitrate_ != 0) {
    incomingBitrateInitialized=true;
  }
 else   if (incomingBitrateInitialized) {
    incomingBitrate=new RateStatistics(kBitrateWindowMs,kBitrateScale);
    incomingBitrateInitialized=false;
  }
  incomingBitrate.update(payloadSize,arrivalTimeMs);
  if (firstPacketTimeMs == -1) {
    firstPacketTimeMs=nowMs;
  }
  boolean updateEstimate=false;
  long targetBitrateBps=0;
synchronized (this) {
    timeoutStreams(nowMs);
    ssrcsMap.put(ssrc,nowMs);
    if (!ssrcs.contains(ssrc)) {
      ssrcs=Collections.unmodifiableCollection(ssrcsMap.keySet());
    }
    if (payloadSize > kMinProbePacketSize && (!remoteRate.isValidEstimate() || nowMs - firstPacketTimeMs < kInitialProbingIntervalMs)) {
      if (totalProbesReceived < kMaxProbePackets) {
        long sendDeltaMs=-1;
        long recvDeltaMs=-1;
        if (!probes.isEmpty()) {
          sendDeltaMs=sendTimeMs - probes.get(probes.size() - 1).sendTimeMs;
          recvDeltaMs=arrivalTimeMs - probes.get(probes.size() - 1).recvTimeMs;
        }
        logger.warn(""String_Node_Str"" + sendTimeMs + ""String_Node_Str""+ arrivalTimeMs+ ""String_Node_Str""+ sendDeltaMs+ ""String_Node_Str""+ recvDeltaMs+ ""String_Node_Str"");
      }
      probes.add(new Probe(sendTimeMs,arrivalTimeMs,payloadSize));
      ++totalProbesReceived;
      if (processClusters(nowMs)) {
        updateEstimate=true;
      }
    }
    long[] deltas=this.deltas;
    deltas[0]=0;
    deltas[1]=0;
    deltas[2]=0;
    if (detector == null) {
      detector=new Detector(new OverUseDetectorOptions(),true);
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + hashCode() + ""String_Node_Str""+ remoteRate.hashCode()+ ""String_Node_Str""+ detector.detector.hashCode()+ ""String_Node_Str""+ detector.estimator.hashCode()+ ""String_Node_Str""+ detector.interArrival.hashCode());
      }
    }
    if (detector.interArrival.computeDeltas(timestamp,arrivalTimeMs,payloadSize,deltas,nowMs)) {
      double tsDeltaMs=deltas[0] * kTimestampToMs;
      detector.estimator.update(deltas[1],tsDeltaMs,(int)deltas[2],detector.detector.getState(),nowMs);
      detector.detector.detect(detector.estimator.getOffset(),tsDeltaMs,detector.estimator.getNumOfDeltas(),arrivalTimeMs);
    }
    if (!updateEstimate) {
      if (lastUpdateMs == -1 || nowMs - lastUpdateMs > remoteRate.getFeedBackInterval()) {
        updateEstimate=true;
      }
 else       if (detector.detector.getState() == BandwidthUsage.kBwOverusing) {
        long incomingRate_=incomingBitrate.getRate(arrivalTimeMs);
        if (incomingRate_ > 0 && remoteRate.isTimeToReduceFurther(nowMs,incomingBitrate_)) {
          updateEstimate=true;
        }
      }
    }
    if (updateEstimate) {
      input.bwState=detector.detector.getState();
      input.incomingBitRate=incomingBitrate.getRate(arrivalTimeMs);
      input.noiseVar=detector.estimator.getVarNoise();
      remoteRate.update(input,nowMs);
      targetBitrateBps=remoteRate.updateBandwidthEstimate(nowMs);
      updateEstimate=remoteRate.isValidEstimate();
    }
  }
  if (updateEstimate) {
    lastUpdateMs=nowMs;
    if (observer != null) {
      observer.onReceiveBitrateChanged(getSsrcs(),targetBitrateBps);
    }
  }
}",0.9990191270230504
107500,"@Override public void onReceiveBitrateChanged(Collection<Integer> ssrcs,long bitrate){
  VideoMediaStreamImpl.this.remoteBitrateEstimatorOnReceiveBitrateChanged(ssrcs,bitrate);
}","@Override public void onReceiveBitrateChanged(Collection<Long> ssrcs,long bitrate){
  VideoMediaStreamImpl.this.remoteBitrateEstimatorOnReceiveBitrateChanged(ssrcs,bitrate);
}",0.980169971671388
107501,"/** 
 * Notifies this <tt>VideoMediaStreamImpl</tt> that  {@link #remoteBitrateEstimator} has computed a new bitrate estimate forthe incoming streams.
 * @param ssrcs
 * @param bitrate
 */
private void remoteBitrateEstimatorOnReceiveBitrateChanged(Collection<Integer> ssrcs,long bitrate){
}","/** 
 * Notifies this <tt>VideoMediaStreamImpl</tt> that  {@link #remoteBitrateEstimator} has computed a new bitrate estimate forthe incoming streams.
 * @param ssrcs
 * @param bitrate
 */
private void remoteBitrateEstimatorOnReceiveBitrateChanged(Collection<Long> ssrcs,long bitrate){
}",0.9809358752166378
107502,"/** 
 * Makes an <tt>RTCPREMBPacket</tt> that provides receiver feedback to the endpoint from which we receive.
 * @return an <tt>RTCPREMBPacket</tt> that provides receiver feedback to theendpoint from which we receive.
 */
private RTCPREMBPacket makeREMB(long senderSSRC){
  RemoteBitrateEstimator remoteBitrateEstimator=stream.getRemoteBitrateEstimator();
  Collection<Integer> ssrcs=remoteBitrateEstimator.getSsrcs();
  long[] dest=new long[ssrcs.size()];
  int i=0;
  for (  Integer ssrc : ssrcs)   dest[i++]=ssrc & 0xFFFFFFFFL;
  long bitrate=remoteBitrateEstimator.getLatestEstimate();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + bitrate + ""String_Node_Str""+ Arrays.toString(dest)+ ""String_Node_Str""+ System.currentTimeMillis());
  }
  if (bitrate == -1) {
    return null;
  }
 else {
    return new RTCPREMBPacket(senderSSRC,0L,bitrate,dest);
  }
}","/** 
 * Makes an <tt>RTCPREMBPacket</tt> that provides receiver feedback to the endpoint from which we receive.
 * @return an <tt>RTCPREMBPacket</tt> that provides receiver feedback to theendpoint from which we receive.
 */
private RTCPREMBPacket makeREMB(long senderSSRC){
  RemoteBitrateEstimator remoteBitrateEstimator=stream.getRemoteBitrateEstimator();
  Collection<Long> ssrcs=remoteBitrateEstimator.getSsrcs();
  long[] dest=new long[ssrcs.size()];
  int i=0;
  for (  Long ssrc : ssrcs)   dest[i++]=ssrc;
  long bitrate=remoteBitrateEstimator.getLatestEstimate();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + bitrate + ""String_Node_Str""+ Arrays.toString(dest)+ ""String_Node_Str""+ System.currentTimeMillis());
  }
  if (bitrate == -1) {
    return null;
  }
 else {
    return new RTCPREMBPacket(senderSSRC,0L,bitrate,dest);
  }
}",0.9793577981651376
107503,"public void setMinBitrate(int minBitrateBps){
  minConfiguredBitrateBps=minBitrateBps;
  currentBitrateBps=Math.max(minBitrateBps,currentBitrateBps);
}","public void setMinBitrate(long minBitrateBps){
  minConfiguredBitrateBps=minBitrateBps;
  currentBitrateBps=Math.max(minBitrateBps,currentBitrateBps);
}",0.9834983498349836
107504,"public void setEstimate(int bitrateBps,long nowMs){
  updated=true;
  bitrateIsInitialized=true;
  currentBitrateBps=changeBitrate(bitrateBps,bitrateBps,nowMs);
}","public void setEstimate(long bitrateBps,long nowMs){
  updated=true;
  bitrateIsInitialized=true;
  currentBitrateBps=changeBitrate(bitrateBps,bitrateBps,nowMs);
}",0.9846153846153848
107505,"@Override public void onReceiveBitrateChanged(Collection<Long> ssrcs,long bitrate){
  VideoMediaStreamImpl.this.remoteBitrateEstimatorOnReceiveBitrateChanged(ssrcs,bitrate);
}","@Override public void onReceiveBitrateChanged(Collection<Integer> ssrcs,long bitrate){
  VideoMediaStreamImpl.this.remoteBitrateEstimatorOnReceiveBitrateChanged(ssrcs,bitrate);
}",0.980169971671388
107506,"/** 
 * Notifies this <tt>VideoMediaStreamImpl</tt> that  {@link #remoteBitrateEstimator} has computed a new bitrate estimate forthe incoming streams.
 * @param ssrcs
 * @param bitrate
 */
private void remoteBitrateEstimatorOnReceiveBitrateChanged(Collection<Long> ssrcs,long bitrate){
}","/** 
 * Notifies this <tt>VideoMediaStreamImpl</tt> that  {@link #remoteBitrateEstimator} has computed a new bitrate estimate forthe incoming streams.
 * @param ssrcs
 * @param bitrate
 */
private void remoteBitrateEstimatorOnReceiveBitrateChanged(Collection<Integer> ssrcs,long bitrate){
}",0.9809358752166378
107507,"/** 
 * Makes an <tt>RTCPREMBPacket</tt> that provides receiver feedback to the endpoint from which we receive.
 * @return an <tt>RTCPREMBPacket</tt> that provides receiver feedback to theendpoint from which we receive.
 */
private RTCPREMBPacket makeREMB(long senderSSRC){
  RemoteBitrateEstimator remoteBitrateEstimator=stream.getRemoteBitrateEstimator();
  Collection<Long> ssrcs=remoteBitrateEstimator.getSsrcs();
  long[] dest=new long[ssrcs.size()];
  int i=0;
  for (  Long ssrc : ssrcs)   dest[i++]=ssrc;
  long bitrate=remoteBitrateEstimator.getLatestEstimate();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + bitrate + ""String_Node_Str""+ Arrays.toString(dest)+ ""String_Node_Str""+ System.currentTimeMillis());
  }
  if (bitrate == -1) {
    return null;
  }
 else {
    return new RTCPREMBPacket(senderSSRC,0L,bitrate,dest);
  }
}","/** 
 * Makes an <tt>RTCPREMBPacket</tt> that provides receiver feedback to the endpoint from which we receive.
 * @return an <tt>RTCPREMBPacket</tt> that provides receiver feedback to theendpoint from which we receive.
 */
private RTCPREMBPacket makeREMB(long senderSSRC){
  RemoteBitrateEstimator remoteBitrateEstimator=stream.getRemoteBitrateEstimator();
  Collection<Integer> ssrcs=remoteBitrateEstimator.getSsrcs();
  long[] dest=new long[ssrcs.size()];
  int i=0;
  for (  Integer ssrc : ssrcs)   dest[i++]=ssrc & 0xFFFFFFFFL;
  long bitrate=remoteBitrateEstimator.getLatestEstimate();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + bitrate + ""String_Node_Str""+ Arrays.toString(dest)+ ""String_Node_Str""+ System.currentTimeMillis());
  }
  if (bitrate == -1) {
    return null;
  }
 else {
    return new RTCPREMBPacket(senderSSRC,0L,bitrate,dest);
  }
}",0.9793577981651376
107508,"public void setMinBitrate(long minBitrateBps){
  minConfiguredBitrateBps=minBitrateBps;
  currentBitrateBps=Math.max(minBitrateBps,currentBitrateBps);
}","public void setMinBitrate(int minBitrateBps){
  minConfiguredBitrateBps=minBitrateBps;
  currentBitrateBps=Math.max(minBitrateBps,currentBitrateBps);
}",0.9834983498349836
107509,"public void setEstimate(long bitrateBps,long nowMs){
  updated=true;
  bitrateIsInitialized=true;
  currentBitrateBps=changeBitrate(bitrateBps,bitrateBps,nowMs);
}","public void setEstimate(int bitrateBps,long nowMs){
  updated=true;
  bitrateIsInitialized=true;
  currentBitrateBps=changeBitrate(bitrateBps,bitrateBps,nowMs);
}",0.9846153846153848
107510,"@Override public void onReceiveBitrateChanged(Collection<Integer> ssrcs,long bitrate){
  VideoMediaStreamImpl.this.remoteBitrateEstimatorOnReceiveBitrateChanged(ssrcs,bitrate);
}","@Override public void onReceiveBitrateChanged(Collection<Long> ssrcs,long bitrate){
  VideoMediaStreamImpl.this.remoteBitrateEstimatorOnReceiveBitrateChanged(ssrcs,bitrate);
}",0.980169971671388
107511,"/** 
 * Notifies this <tt>VideoMediaStreamImpl</tt> that  {@link #remoteBitrateEstimator} has computed a new bitrate estimate forthe incoming streams.
 * @param ssrcs
 * @param bitrate
 */
private void remoteBitrateEstimatorOnReceiveBitrateChanged(Collection<Integer> ssrcs,long bitrate){
}","/** 
 * Notifies this <tt>VideoMediaStreamImpl</tt> that  {@link #remoteBitrateEstimator} has computed a new bitrate estimate forthe incoming streams.
 * @param ssrcs
 * @param bitrate
 */
private void remoteBitrateEstimatorOnReceiveBitrateChanged(Collection<Long> ssrcs,long bitrate){
}",0.9809358752166378
107512,"/** 
 * Makes an <tt>RTCPREMBPacket</tt> that provides receiver feedback to the endpoint from which we receive.
 * @return an <tt>RTCPREMBPacket</tt> that provides receiver feedback to theendpoint from which we receive.
 */
private RTCPREMBPacket makeREMB(long senderSSRC){
  RemoteBitrateEstimator remoteBitrateEstimator=stream.getRemoteBitrateEstimator();
  Collection<Integer> ssrcs=remoteBitrateEstimator.getSsrcs();
  long[] dest=new long[ssrcs.size()];
  int i=0;
  for (  Integer ssrc : ssrcs)   dest[i++]=ssrc & 0xFFFFFFFFL;
  long bitrate=remoteBitrateEstimator.getLatestEstimate();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + bitrate + ""String_Node_Str""+ Arrays.toString(dest)+ ""String_Node_Str""+ System.currentTimeMillis());
  }
  if (bitrate == -1) {
    return null;
  }
 else {
    return new RTCPREMBPacket(senderSSRC,0L,bitrate,dest);
  }
}","/** 
 * Makes an <tt>RTCPREMBPacket</tt> that provides receiver feedback to the endpoint from which we receive.
 * @return an <tt>RTCPREMBPacket</tt> that provides receiver feedback to theendpoint from which we receive.
 */
private RTCPREMBPacket makeREMB(long senderSSRC){
  RemoteBitrateEstimator remoteBitrateEstimator=stream.getRemoteBitrateEstimator();
  Collection<Long> ssrcs=remoteBitrateEstimator.getSsrcs();
  long[] dest=new long[ssrcs.size()];
  int i=0;
  for (  Long ssrc : ssrcs)   dest[i++]=ssrc;
  long bitrate=remoteBitrateEstimator.getLatestEstimate();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + bitrate + ""String_Node_Str""+ Arrays.toString(dest)+ ""String_Node_Str""+ System.currentTimeMillis());
  }
  if (bitrate == -1) {
    return null;
  }
 else {
    return new RTCPREMBPacket(senderSSRC,0L,bitrate,dest);
  }
}",0.9793577981651376
107513,"public void setMinBitrate(int minBitrateBps){
  minConfiguredBitrateBps=minBitrateBps;
  currentBitrateBps=Math.max(minBitrateBps,currentBitrateBps);
}","public void setMinBitrate(long minBitrateBps){
  minConfiguredBitrateBps=minBitrateBps;
  currentBitrateBps=Math.max(minBitrateBps,currentBitrateBps);
}",0.9834983498349836
107514,"public void setEstimate(int bitrateBps,long nowMs){
  updated=true;
  bitrateIsInitialized=true;
  currentBitrateBps=changeBitrate(bitrateBps,bitrateBps,nowMs);
}","public void setEstimate(long bitrateBps,long nowMs){
  updated=true;
  bitrateIsInitialized=true;
  currentBitrateBps=changeBitrate(bitrateBps,bitrateBps,nowMs);
}",0.9846153846153848
107515,"/** 
 * Returns the number of packets described in the Packet Status Chunk contained in the buffer   {@code buf} at offset {@code off}. Note that this may not necessarily match with the number of packets that we want to read from the chunk. E.g. if a feedback packet describes 3 packets (indicated by the value ""3"" in the ""packet status count"" field), and it contains a Vector Status Chunk which can describe 7 packets (long symbols), then we want to read only 3 packets (but this method will return 7).
 * @param buf the buffer which contains the Packet Status Chunk
 * @param off the offset at which the Packet Status Chunk starts.
 * @return the number of packets described by the Packet Status Chunk.
 */
private static int getPacketCount(byte[] buf,int off){
  int chunkType=buf[off] & 0x80 >> 7;
  if (chunkType == CHUNK_TYPE_VECTOR) {
    int symbolType=buf[off] & 0x40 >> 6;
    return symbolType == SYMBOL_TYPE_SHORT ? 14 : 7;
  }
 else   if (chunkType == CHUNK_TYPE_RLE) {
    return ((buf[off] & 0x1f) << 8) | (buf[off + 1] & 0xff);
  }
  return -1;
}","/** 
 * Returns the number of packets described in the Packet Status Chunk contained in the buffer   {@code buf} at offset {@code off}. Note that this may not necessarily match with the number of packets that we want to read from the chunk. E.g. if a feedback packet describes 3 packets (indicated by the value ""3"" in the ""packet status count"" field), and it contains a Vector Status Chunk which can describe 7 packets (long symbols), then we want to read only 3 packets (but this method will return 7).
 * @param buf the buffer which contains the Packet Status Chunk
 * @param off the offset at which the Packet Status Chunk starts.
 * @return the number of packets described by the Packet Status Chunk.
 */
private static int getPacketCount(byte[] buf,int off){
  int chunkType=(buf[off] & 0x80) >> 7;
  if (chunkType == CHUNK_TYPE_VECTOR) {
    int symbolType=(buf[off] & 0x40) >> 6;
    return symbolType == SYMBOL_TYPE_SHORT ? 14 : 7;
  }
 else   if (chunkType == CHUNK_TYPE_RLE) {
    return ((buf[off] & 0x1f) << 8) | (buf[off + 1] & 0xff);
  }
  return -1;
}",0.9981203007518796
107516,"/** 
 * Reads the   {@code i}-th (zero-based) symbol from the Packet Status Chunk contained in   {@code buf} at offset {@code off}. Returns -1 if the index is found to be invalid (although the validity check is not performed for RLE chunks).
 * @param buf the buffer which contains the Packet Status Chunk.
 * @param off the offset in {@code buf} at which the Packet Status Chunkbegins.
 * @param i the zero-based index of the symbol to return.
 * @return the {@code i}-th symbol from the given Packet Status Chunk.
 */
private static int readSymbol(byte[] buf,int off,int i){
  int chunkType=buf[off] & 0x80 >> 7;
  if (chunkType == CHUNK_TYPE_VECTOR) {
    int symbolType=buf[off] & 0x40 >> 6;
switch (symbolType) {
case SYMBOL_TYPE_LONG:
      if (0 <= i && i <= 2) {
        return (buf[off] >> (4 - 2 * i)) & 0x03;
      }
 else       if (3 <= i && i <= 6) {
        return (buf[off + 1] >> (6 - 2 * (i - 3))) & 0x03;
      }
    return -1;
case SYMBOL_TYPE_SHORT:
  int shortSymbol;
if (0 <= i && i <= 5) {
  shortSymbol=(buf[off] >> (5 - i)) & 0x01;
}
 else if (6 <= i && i <= 13) {
  shortSymbol=(buf[off + 1] >> (13 - i)) & 0x01;
}
 else {
  return -1;
}
return shortToLong(shortSymbol);
default :
return -1;
}
}
 else if (chunkType == CHUNK_TYPE_RLE) {
return buf[off] >> 5 & 0x03;
}
return -1;
}","/** 
 * Reads the   {@code i}-th (zero-based) symbol from the Packet Status Chunk contained in   {@code buf} at offset {@code off}. Returns -1 if the index is found to be invalid (although the validity check is not performed for RLE chunks).
 * @param buf the buffer which contains the Packet Status Chunk.
 * @param off the offset in {@code buf} at which the Packet Status Chunkbegins.
 * @param i the zero-based index of the symbol to return.
 * @return the {@code i}-th symbol from the given Packet Status Chunk.
 */
private static int readSymbol(byte[] buf,int off,int i){
  int chunkType=(buf[off] & 0x80) >> 7;
  if (chunkType == CHUNK_TYPE_VECTOR) {
    int symbolType=(buf[off] & 0x40) >> 6;
switch (symbolType) {
case SYMBOL_TYPE_LONG:
      if (0 <= i && i <= 2) {
        return (buf[off] >> (4 - 2 * i)) & 0x03;
      }
 else       if (3 <= i && i <= 6) {
        return (buf[off + 1] >> (6 - 2 * (i - 3))) & 0x03;
      }
    return -1;
case SYMBOL_TYPE_SHORT:
  int shortSymbol;
if (0 <= i && i <= 5) {
  shortSymbol=(buf[off] >> (5 - i)) & 0x01;
}
 else if (6 <= i && i <= 13) {
  shortSymbol=(buf[off + 1] >> (13 - i)) & 0x01;
}
 else {
  return -1;
}
return shortToLong(shortSymbol);
default :
return -1;
}
}
 else if (chunkType == CHUNK_TYPE_RLE) {
return (buf[off] >> 5) & 0x03;
}
return -1;
}",0.9977081741787625
107517,"/** 
 * Ctor.
 * @param mediaStream the <tt>MediaStream</tt> that owns this instance.
 * @param pktLogging the {@code PacketLoggingService} to be used by the newinstance
 */
DebugTransformEngine(MediaStreamImpl mediaStream,PacketLoggingService pktLogging){
  this.mediaStream=mediaStream;
  _pktLogging=pktLogging;
}","/** 
 * Ctor.
 * @param mediaStream the <tt>MediaStream</tt> that owns this instance.
 * @param pktLogging the {@code PacketLoggingService} to be used by the newinstance
 */
private DebugTransformEngine(MediaStreamImpl mediaStream,PacketLoggingService pktLogging){
  this.mediaStream=mediaStream;
  _pktLogging=pktLogging;
}",0.9875
107518,"/** 
 * Drops the oldest packets from the cache until: 1. The cache contains at most   {@link #MAX_SIZE_PACKETS} packets, and2. The cache only contains packets at most  {@link #SIZE_MILLIS}milliseconds older than the newest packet in the cache.
 */
private synchronized void clean(){
  int size=cache.size();
  if (size <= 0)   return;
  long cleanBefore=System.currentTimeMillis() - SIZE_MILLIS;
  Iterator<Map.Entry<Integer,Container>> iter=cache.entrySet().iterator();
  int removedPackets=0;
  int removedBytes=0;
  while (iter.hasNext()) {
    Container container=iter.next().getValue();
    RawPacket pkt=container.pkt;
    if (size > MAX_SIZE_PACKETS) {
      size--;
    }
 else     if (container.timeAdded >= 0 && container.timeAdded < cleanBefore) {
      break;
    }
    iter.remove();
    removedBytes+=pkt.getLength();
    removedPackets++;
    returnContainer(container);
  }
synchronized (sizesSyncRoot) {
    sizeInBytes-=removedBytes;
    sizeInPackets-=removedPackets;
  }
}","/** 
 * Drops the oldest packets from the cache until: 1. The cache contains at most   {@link #MAX_SIZE_PACKETS} packets, and2. The cache only contains packets at most  {@link #SIZE_MILLIS}milliseconds older than the newest packet in the cache.
 */
private synchronized void clean(){
  int size=cache.size();
  if (size <= 0)   return;
  long cleanBefore=System.currentTimeMillis() - SIZE_MILLIS;
  Iterator<Map.Entry<Integer,Container>> iter=cache.entrySet().iterator();
  int removedPackets=0;
  int removedBytes=0;
  while (iter.hasNext()) {
    Container container=iter.next().getValue();
    RawPacket pkt=container.pkt;
    if (size > MAX_SIZE_PACKETS) {
      size--;
    }
 else     if (container.timeAdded >= 0 && container.timeAdded > cleanBefore) {
      break;
    }
    iter.remove();
    removedBytes+=pkt.getLength();
    removedPackets++;
    returnContainer(container);
  }
synchronized (sizesSyncRoot) {
    sizeInBytes-=removedBytes;
    sizeInPackets-=removedPackets;
  }
}",0.998992950654582
107519,"/** 
 * Adds an RTP header extension with a given ID and a given length to this packet. The contents of the extension are not set to anything, and the caller of this method is responsible for filling them in. This method MUST NOT be called while iterating over the extensions using  {@link #getHeaderExtensions()}, or while manipulating the state of this  {@link RawPacket}.
 * @param id the ID of the extension to add.
 * @param len the length in bytes of the extension to add.
 * @return the header extension which was added.
 */
public HeaderExtension addExtension(byte id,int len){
  if (id < 1 || id > 15 || len < 1 || len > 16) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ len);
  }
  int payloadLength=getPayloadLength();
  boolean extensionBit=getExtensionBit();
  int extHeaderOffset=FIXED_HEADER_SIZE + 4 * getCsrcCount();
  int maxRequiredLength=getLength() + (extensionBit ? 0 : EXT_HEADER_SIZE) + 1+ len+ 3;
  byte[] newBuffer;
  int newPayloadOffset;
  if (buffer.length >= maxRequiredLength) {
    newBuffer=buffer;
    if ((offset + getHeaderLength()) >= (maxRequiredLength - getPayloadLength())) {
      newPayloadOffset=getPayloadOffset();
    }
 else {
      newPayloadOffset=buffer.length - payloadLength;
      System.arraycopy(buffer,getPayloadOffset(),buffer,newPayloadOffset,payloadLength);
    }
  }
 else {
    newBuffer=new byte[maxRequiredLength];
    newPayloadOffset=newBuffer.length - payloadLength;
    System.arraycopy(buffer,getPayloadOffset(),newBuffer,newPayloadOffset,payloadLength);
  }
  int newHeaderLength=extHeaderOffset;
  int extensionBytes=0;
  if (extensionBit) {
    newHeaderLength+=4;
    HeaderExtensions hes=getHeaderExtensions();
    while (hes.hasNext()) {
      HeaderExtension he=hes.next();
      extensionBytes+=1 + he.getExtLength();
    }
    newHeaderLength+=extensionBytes;
  }
  System.arraycopy(buffer,offset,newBuffer,0,newHeaderLength);
  if (!extensionBit) {
    RTPUtils.writeShort(newBuffer,extHeaderOffset,(short)0xBEDE);
    newHeaderLength+=4;
  }
  newBuffer[newHeaderLength++]=(byte)((id & 0x0f) << 4 | (len - 1) & 0x0f);
  extensionBytes++;
  int extensionDataOffset=newHeaderLength;
  newHeaderLength+=len;
  extensionBytes+=len;
  int paddingBytes=(4 - (extensionBytes % 4)) % 4;
  for (int i=0; i < paddingBytes; i++) {
    newBuffer[newHeaderLength++]=0;
  }
  RTPUtils.writeShort(newBuffer,extHeaderOffset + 2,(short)((extensionBytes + paddingBytes) / 4));
  int newOffset=newPayloadOffset - newHeaderLength;
  if (newOffset != 0) {
    System.arraycopy(newBuffer,0,newBuffer,newOffset,newHeaderLength);
  }
  this.buffer=newBuffer;
  this.offset=newOffset;
  this.length=newHeaderLength + payloadLength;
  setExtensionBit(true);
  HeaderExtension he=getHeaderExtensions().headerExtension;
  he.setOffset(getOffset() + extensionDataOffset);
  he.setLength(len + 1);
  return he;
}","/** 
 * Adds an RTP header extension with a given ID and a given length to this packet. The contents of the extension are not set to anything, and the caller of this method is responsible for filling them in. This method MUST NOT be called while iterating over the extensions using  {@link #getHeaderExtensions()}, or while manipulating the state of this  {@link RawPacket}.
 * @param id the ID of the extension to add.
 * @param len the length in bytes of the extension to add.
 * @return the header extension which was added.
 */
public HeaderExtension addExtension(byte id,int len){
  if (id < 1 || id > 15 || len < 1 || len > 16) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str""+ len);
  }
  int payloadLength=getPayloadLength();
  boolean extensionBit=getExtensionBit();
  int extHeaderOffset=FIXED_HEADER_SIZE + 4 * getCsrcCount();
  int maxRequiredLength=getLength() + (extensionBit ? 0 : EXT_HEADER_SIZE) + 1+ len+ 3;
  byte[] newBuffer;
  int newPayloadOffset;
  if (buffer.length >= maxRequiredLength) {
    newBuffer=buffer;
    if ((offset + getHeaderLength()) >= (maxRequiredLength - getPayloadLength())) {
      newPayloadOffset=getPayloadOffset();
    }
 else {
      newPayloadOffset=buffer.length - payloadLength;
      System.arraycopy(buffer,getPayloadOffset(),buffer,newPayloadOffset,payloadLength);
    }
  }
 else {
    newBuffer=new byte[maxRequiredLength];
    newPayloadOffset=newBuffer.length - payloadLength;
    System.arraycopy(buffer,getPayloadOffset(),newBuffer,newPayloadOffset,payloadLength);
  }
  int newHeaderLength=extHeaderOffset;
  int extensionBytes=0;
  if (extensionBit) {
    newHeaderLength+=4;
    HeaderExtensions hes=getHeaderExtensions();
    while (hes.hasNext()) {
      HeaderExtension he=hes.next();
      extensionBytes+=1 + he.getExtLength();
    }
    newHeaderLength+=extensionBytes;
  }
  System.arraycopy(buffer,offset,newBuffer,0,newHeaderLength);
  if (!extensionBit) {
    RTPUtils.writeShort(newBuffer,extHeaderOffset,(short)0xBEDE);
    newHeaderLength+=4;
  }
  newBuffer[newHeaderLength++]=(byte)((id & 0x0f) << 4 | (len - 1) & 0x0f);
  extensionBytes++;
  int extensionDataOffset=newHeaderLength - 1;
  newHeaderLength+=len;
  extensionBytes+=len;
  int paddingBytes=(4 - (extensionBytes % 4)) % 4;
  for (int i=0; i < paddingBytes; i++) {
    newBuffer[newHeaderLength++]=0;
  }
  RTPUtils.writeShort(newBuffer,extHeaderOffset + 2,(short)((extensionBytes + paddingBytes) / 4));
  int newOffset=newPayloadOffset - newHeaderLength;
  if (newOffset != 0) {
    System.arraycopy(newBuffer,0,newBuffer,newOffset,newHeaderLength);
  }
  this.buffer=newBuffer;
  this.offset=newOffset;
  this.length=newHeaderLength + payloadLength;
  setExtensionBit(true);
  HeaderExtension he=getHeaderExtensions().headerExtension;
  he.setOffset(getOffset() + extensionDataOffset);
  he.setLength(len + 1);
  return he;
}",0.9993105825577387
107520,"/** 
 * @return the packets represented in the FCI portion of an RTCPtransport-cc feedback packet. Note that the timestamps are represented in the 250µs format used by the on-the-wire format, and don't represent local time.
 * @param fciBuffer the buffer which contains the FCI portion of the RTCPfeedback packet.
 */
public static PacketMap getPacketsFci(ByteArrayBuffer fciBuffer){
  if (fciBuffer == null) {
    return null;
  }
  byte[] buf=fciBuffer.getBuffer();
  int off=fciBuffer.getOffset();
  int len=fciBuffer.getLength();
  if (len < MIN_FCI_LENGTH) {
    logger.warn(PARSE_ERROR + ""String_Node_Str"" + len);
    return null;
  }
  int baseSeq=RTPUtils.readUint16AsInt(buf,off);
  int packetStatusCount=RTPUtils.readUint16AsInt(buf,off + 2);
  long referenceTime=RTPUtils.readUint24AsInt(buf,off + 4) << 8;
  int pscOff=off + 8;
  int packetsRemaining=packetStatusCount;
  while (packetsRemaining > 0) {
    if (pscOff + 2 > off + len) {
      logger.warn(PARSE_ERROR + ""String_Node_Str"");
      return null;
    }
    int packetsInChunk=getPacketCount(buf,pscOff);
    packetsRemaining-=packetsInChunk;
    pscOff+=2;
  }
  int deltaStart=pscOff;
  int deltaOff=pscOff;
  pscOff=off + 8;
  packetsRemaining=packetStatusCount;
  PacketMap packets=new PacketMap();
  while (packetsRemaining > 0 && pscOff < deltaStart) {
    int packetsInChunk=Math.min(getPacketCount(buf,pscOff),packetsRemaining);
    for (int i=0; i < packetsInChunk; i++) {
      int symbol=readSymbol(buf,pscOff,i);
      int delta=-1;
switch (symbol) {
case SYMBOL_SMALL_DELTA:
        deltaOff++;
      if (deltaOff > off + len) {
        logger.warn(PARSE_ERROR + ""String_Node_Str"");
        return null;
      }
    delta=buf[deltaOff] & 0xff;
  break;
case SYMBOL_LARGE_DELTA:
deltaOff+=2;
if (deltaOff > off + len) {
logger.warn(PARSE_ERROR + ""String_Node_Str"");
return null;
}
delta=RTPUtils.readInt16AsInt(buf,deltaOff);
break;
case SYMBOL_NOT_RECEIVED:
default :
delta=-1;
break;
}
if (delta == -1) {
packets.put(baseSeq,NEGATIVE_ONE);
}
 else {
referenceTime+=delta;
packets.put(baseSeq,referenceTime);
}
baseSeq=(baseSeq + 1) & 0xffff;
}
pscOff+=2;
packetsRemaining-=packetsInChunk;
}
return packets;
}","/** 
 * @return the packets represented in the FCI portion of an RTCPtransport-cc feedback packet. Note that the timestamps are represented in the 250µs format used by the on-the-wire format, and don't represent local time.
 * @param fciBuffer the buffer which contains the FCI portion of the RTCPfeedback packet.
 */
public static PacketMap getPacketsFci(ByteArrayBuffer fciBuffer){
  if (fciBuffer == null) {
    return null;
  }
  byte[] buf=fciBuffer.getBuffer();
  int off=fciBuffer.getOffset();
  int len=fciBuffer.getLength();
  if (len < MIN_FCI_LENGTH) {
    logger.warn(PARSE_ERROR + ""String_Node_Str"" + len);
    return null;
  }
  int baseSeq=RTPUtils.readUint16AsInt(buf,off);
  int packetStatusCount=RTPUtils.readUint16AsInt(buf,off + 2);
  long referenceTime=RTPUtils.readUint24AsInt(buf,off + 4) << 8;
  int pscOff=off + 8;
  int packetsRemaining=packetStatusCount;
  while (packetsRemaining > 0) {
    if (pscOff + 2 > off + len) {
      logger.warn(PARSE_ERROR + ""String_Node_Str"");
      return null;
    }
    int packetsInChunk=getPacketCount(buf,pscOff);
    packetsRemaining-=packetsInChunk;
    pscOff+=2;
  }
  int deltaStart=pscOff;
  int deltaOff=pscOff;
  pscOff=off + 8;
  packetsRemaining=packetStatusCount;
  PacketMap packets=new PacketMap();
  while (packetsRemaining > 0 && pscOff < deltaStart) {
    int packetsInChunk=Math.min(getPacketCount(buf,pscOff),packetsRemaining);
    for (int i=0; i < packetsInChunk; i++) {
      int symbol=readSymbol(buf,pscOff,i);
      int delta=-1;
switch (symbol) {
case SYMBOL_SMALL_DELTA:
        if (deltaOff >= off + len) {
          logger.warn(PARSE_ERROR + ""String_Node_Str"");
          return null;
        }
      delta=buf[deltaOff++] & 0xff;
    break;
case SYMBOL_LARGE_DELTA:
  if (deltaOff + 1 >= off + len) {
    logger.warn(PARSE_ERROR + ""String_Node_Str"");
    return null;
  }
delta=RTPUtils.readInt16AsInt(buf,deltaOff);
deltaOff+=2;
break;
case SYMBOL_NOT_RECEIVED:
default :
delta=-1;
break;
}
if (delta == -1) {
packets.put(baseSeq,NEGATIVE_ONE);
}
 else {
referenceTime+=delta;
packets.put(baseSeq,referenceTime);
}
baseSeq=(baseSeq + 1) & 0xffff;
}
pscOff+=2;
packetsRemaining-=packetsInChunk;
}
return packets;
}",0.9577272727272728
107521,"/** 
 * Transforms the RTP packet specified in the   {@link RawPacket} that ispassed as an argument for the purposes of simulcast.
 * @param pktIn the {@link RawPacket} to be transformed.
 * @return the transformed {@link RawPacket} or null if the packet needsto be dropped.
 */
public RawPacket[] rtpTransform(RawPacket pktIn){
  if (!RTPPacketPredicate.INSTANCE.test(pktIn)) {
    return new RawPacket[]{pktIn};
  }
  SimTransformation state=transformState;
  long srcSSRC=pktIn.getSSRCAsLong();
  if (srcSSRC != state.currentSSRC) {
    return null;
  }
  RawPacket[] pktsOut;
  FrameDesc startFrame;
  if (transformState.maybeFixInitialIndependentFrame && (startFrame=state.weakStartFrame.get()) != null && startFrame.matches(pktIn)) {
    transformState.maybeFixInitialIndependentFrame=false;
    if (startFrame.getStart() != pktIn.getSequenceNumber()) {
      RawPacketCache inCache=startFrame.getRTPEncoding().getMediaStreamTrack().getMediaStreamTrackReceiver().getStream().getCachingTransformer().getIncomingRawPacketCache();
      int start=startFrame.getStart();
      int len=RTPUtils.sequenceNumberDiff(startFrame.getMaxSeen(),start) + 1;
      pktsOut=new RawPacket[len];
      for (int i=0; i < pktsOut.length; i++) {
        pktsOut[i]=inCache.get(srcSSRC,(start + i) & 0xFFFF);
      }
    }
 else {
      pktsOut=new RawPacket[]{pktIn};
    }
  }
 else {
    pktsOut=new RawPacket[]{pktIn};
  }
  for (  RawPacket pktOut : pktsOut) {
    if (pktOut == null) {
      continue;
    }
    int srcSeqNum=pktOut.getSequenceNumber();
    int dstSeqNum=state.seqNumTranslation.apply(srcSeqNum);
    long srcTs=pktOut.getTimestamp();
    long dstTs=state.tsTranslation.apply(srcTs);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + pktIn.getSSRCAsLong() + ""String_Node_Str""+ srcSeqNum+ ""String_Node_Str""+ srcTs+ ""String_Node_Str""+ targetSSRC+ ""String_Node_Str""+ dstSeqNum+ ""String_Node_Str""+ dstTs);
    }
    if (srcSeqNum != dstSeqNum) {
      pktOut.setSequenceNumber(dstSeqNum);
    }
    if (dstTs != srcTs) {
      pktOut.setTimestamp(dstTs);
    }
    if (srcSSRC != targetSSRC) {
      pktOut.setSSRC((int)targetSSRC);
    }
  }
  return pktsOut;
}","/** 
 * Transforms the RTP packet specified in the   {@link RawPacket} that ispassed as an argument for the purposes of simulcast.
 * @param pktIn the {@link RawPacket} to be transformed.
 * @return the transformed {@link RawPacket} or null if the packet needsto be dropped.
 */
public RawPacket[] rtpTransform(RawPacket pktIn){
  if (!RTPPacketPredicate.INSTANCE.test(pktIn)) {
    return new RawPacket[]{pktIn};
  }
  Context context=this.context;
  long srcSSRC=pktIn.getSSRCAsLong();
  if (srcSSRC != context.currentSSRC) {
    return null;
  }
  RawPacket[] pktsOut;
  FrameDesc startFrame;
  if (context.maybeFixInitialIndependentFrame && (startFrame=context.weakStartFrame.get()) != null && startFrame.matches(pktIn)) {
    context.maybeFixInitialIndependentFrame=false;
    if (startFrame.getStart() != pktIn.getSequenceNumber()) {
      RawPacketCache inCache=startFrame.getRTPEncoding().getMediaStreamTrack().getMediaStreamTrackReceiver().getStream().getCachingTransformer().getIncomingRawPacketCache();
      int start=startFrame.getStart();
      int len=RTPUtils.sequenceNumberDiff(startFrame.getMaxSeen(),start) + 1;
      pktsOut=new RawPacket[len];
      for (int i=0; i < pktsOut.length; i++) {
        pktsOut[i]=inCache.get(srcSSRC,(start + i) & 0xFFFF);
      }
    }
 else {
      pktsOut=new RawPacket[]{pktIn};
    }
  }
 else {
    pktsOut=new RawPacket[]{pktIn};
  }
  for (  RawPacket pktOut : pktsOut) {
    if (pktOut == null) {
      continue;
    }
    int srcSeqNum=pktOut.getSequenceNumber();
    int dstSeqNum=context.seqNumTranslation.apply(srcSeqNum);
    long srcTs=pktOut.getTimestamp();
    long dstTs=context.tsTranslation.apply(srcTs);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + pktIn.getSSRCAsLong() + ""String_Node_Str""+ srcSeqNum+ ""String_Node_Str""+ srcTs+ ""String_Node_Str""+ targetSSRC+ ""String_Node_Str""+ dstSeqNum+ ""String_Node_Str""+ dstTs);
    }
    if (srcSeqNum != dstSeqNum) {
      pktOut.setSequenceNumber(dstSeqNum);
    }
    if (dstTs != srcTs) {
      pktOut.setTimestamp(dstTs);
    }
    if (srcSSRC != targetSSRC) {
      pktOut.setSSRC((int)targetSSRC);
    }
  }
  return pktsOut;
}",0.9642529789184234
107522,"/** 
 * Transform an RTCP   {@link RawPacket} for the purposes of simulcast.
 * @param pktIn the {@link RawPacket} to be transformed.
 * @return the transformed RTCP {@link RawPacket}, or null if the packet needs to be dropped.
 */
public RawPacket rtcpTransform(RawPacket pktIn){
  if (!RTCPPacketPredicate.INSTANCE.test(pktIn)) {
    return pktIn;
  }
  SimTransformation state=transformState;
  boolean removed=false;
  RTCPIterator it=new RTCPIterator(pktIn);
  while (it.hasNext()) {
    ByteArrayBuffer baf=it.next();
switch (RTCPHeaderUtils.getPacketType(baf)) {
case RTCPPacket.SDES:
      if (removed) {
        it.remove();
      }
    break;
case RTCPPacket.SR:
  if (RawPacket.getRTCPSSRC(baf) != state.currentSSRC) {
    removed=true;
    it.remove();
  }
 else {
    RTCPHeaderUtils.setSenderSSRC(baf,(int)targetSSRC);
    long srcTs=RTCPSenderInfoUtils.getTimestamp(baf);
    long dstTs=state.tsTranslation.apply(srcTs);
    if (srcTs != dstTs) {
      RTCPSenderInfoUtils.setTimestamp(baf,(int)dstTs);
    }
    RTCPSenderInfoUtils.setOctetCount(baf,(int)filterState.transmittedBytes);
    RTCPSenderInfoUtils.setPacketCount(baf,(int)filterState.transmittedPackets);
  }
}
}
return pktIn.getLength() > 0 ? pktIn : null;
}","/** 
 * Transform an RTCP   {@link RawPacket} for the purposes of simulcast.
 * @param pktIn the {@link RawPacket} to be transformed.
 * @return the transformed RTCP {@link RawPacket}, or null if the packet needs to be dropped.
 */
public RawPacket rtcpTransform(RawPacket pktIn){
  if (!RTCPPacketPredicate.INSTANCE.test(pktIn)) {
    return pktIn;
  }
  Context context=this.context;
  boolean removed=false;
  RTCPIterator it=new RTCPIterator(pktIn);
  while (it.hasNext()) {
    ByteArrayBuffer baf=it.next();
switch (RTCPHeaderUtils.getPacketType(baf)) {
case RTCPPacket.SDES:
      if (removed) {
        it.remove();
      }
    break;
case RTCPPacket.SR:
  if (RawPacket.getRTCPSSRC(baf) != context.currentSSRC) {
    removed=true;
    it.remove();
  }
 else {
    RTCPHeaderUtils.setSenderSSRC(baf,(int)targetSSRC);
    long srcTs=RTCPSenderInfoUtils.getTimestamp(baf);
    long dstTs=context.tsTranslation.apply(srcTs);
    if (srcTs != dstTs) {
      RTCPSenderInfoUtils.setTimestamp(baf,(int)dstTs);
    }
    RTCPSenderInfoUtils.setOctetCount(baf,(int)filterState.transmittedBytes);
    RTCPSenderInfoUtils.setPacketCount(baf,(int)filterState.transmittedPackets);
  }
}
}
return pktIn.getLength() > 0 ? pktIn : null;
}",0.9651539708265804
107523,"/** 
 * Update the target subjective quality index for this instance.
 * @param newTargetIdx new target subjective quality index.
 * @param newOptimalIdx
 */
public void update(int newTargetIdx,int newOptimalIdx){
  this.optimalIdx=newOptimalIdx;
  int oldTargetIdx=this.targetIdx;
  if (oldTargetIdx == newTargetIdx) {
    return;
  }
  if (logger.isInfoEnabled()) {
    MediaStreamTrackDesc sourceTrack=weakSource.get();
    if (sourceTrack != null) {
      RTPEncodingDesc[] sourceEncodings=sourceTrack.getRTPEncodings();
      if (!ArrayUtils.isNullOrEmpty(sourceEncodings)) {
        long ssrc=sourceEncodings[0].getPrimarySSRC();
        logger.info(""String_Node_Str"" + ssrc + ""String_Node_Str""+ newTargetIdx+ ""String_Node_Str""+ oldTargetIdx);
      }
    }
  }
  this.targetIdx=newTargetIdx;
  if (newTargetIdx < 0) {
    transformState=dropState;
  }
 else {
    MediaStreamTrackDesc sourceTrack=weakSource.get();
    if (sourceTrack == null) {
      return;
    }
    int currentTL0Idx=transformState.currentIdx;
    if (currentTL0Idx > -1) {
      currentTL0Idx=sourceTrack.getRTPEncodings()[currentTL0Idx].getBaseLayer().getIndex();
    }
    RTPEncodingDesc targetTL0=sourceTrack.getRTPEncodings()[newTargetIdx].getBaseLayer();
    if (currentTL0Idx != targetTL0.getIndex()) {
      ((RTPTranslatorImpl)sourceTrack.getMediaStreamTrackReceiver().getStream().getRTPTranslator()).getRtcpFeedbackMessageSender().sendFIR((int)targetTL0.getPrimarySSRC());
    }
  }
}","/** 
 * Update the target subjective quality index for this instance.
 * @param newTargetIdx new target subjective quality index.
 * @param newOptimalIdx
 */
public void update(int newTargetIdx,int newOptimalIdx){
  this.optimalIdx=newOptimalIdx;
  int oldTargetIdx=this.targetIdx;
  if (oldTargetIdx == newTargetIdx) {
    return;
  }
  if (logger.isInfoEnabled()) {
    MediaStreamTrackDesc sourceTrack=weakSource.get();
    if (sourceTrack != null) {
      RTPEncodingDesc[] sourceEncodings=sourceTrack.getRTPEncodings();
      if (!ArrayUtils.isNullOrEmpty(sourceEncodings)) {
        long ssrc=sourceEncodings[0].getPrimarySSRC();
        logger.info(""String_Node_Str"" + ssrc + ""String_Node_Str""+ newTargetIdx+ ""String_Node_Str""+ oldTargetIdx);
      }
    }
  }
  this.targetIdx=newTargetIdx;
  if (newTargetIdx < 0) {
    context=dropState;
  }
 else {
    MediaStreamTrackDesc sourceTrack=weakSource.get();
    if (sourceTrack == null) {
      return;
    }
    int currentTL0Idx=context.currentIdx;
    if (currentTL0Idx > -1) {
      currentTL0Idx=sourceTrack.getRTPEncodings()[currentTL0Idx].getBaseLayer().getIndex();
    }
    RTPEncodingDesc targetTL0=sourceTrack.getRTPEncodings()[newTargetIdx].getBaseLayer();
    if (currentTL0Idx != targetTL0.getIndex()) {
      ((RTPTranslatorImpl)sourceTrack.getMediaStreamTrackReceiver().getStream().getRTPTranslator()).getRtcpFeedbackMessageSender().sendFIR((int)targetTL0.getPrimarySSRC());
    }
  }
}",0.985675306957708
107524,"/** 
 * Increments the   {@link #filterState} as a result of accepting the packetspecified in the arguments.
 * @param buf the <tt>byte</tt> array that holds the RTP packet.
 * @param off the offset in <tt>buffer</tt> at which the actual RTP databegins.
 * @param len the number of <tt>byte</tt>s in <tt>buffer</tt> whichconstitute the actual RTP data.
 */
private void onAccept(byte[] buf,int off,int len){
  long ts=transformState.tsTranslation.apply(RawPacket.getTimestamp(buf,off,len));
  if (filterState.maxTs == -1 || TimeUtils.rtpDiff(ts,filterState.maxTs) > 0) {
    filterState.maxTs=ts;
  }
  int seqNum=transformState.seqNumTranslation.apply(RawPacket.getSequenceNumber(buf,off,len));
  if (filterState.maxSeqNum == -1 || RTPUtils.sequenceNumberDiff(seqNum,filterState.maxSeqNum) > 0) {
    filterState.maxSeqNum=seqNum;
  }
  filterState.transmittedBytes+=len;
  filterState.transmittedPackets++;
}","/** 
 * Increments the   {@link #filterState} as a result of accepting the packetspecified in the arguments.
 * @param buf the <tt>byte</tt> array that holds the RTP packet.
 * @param off the offset in <tt>buffer</tt> at which the actual RTP databegins.
 * @param len the number of <tt>byte</tt>s in <tt>buffer</tt> whichconstitute the actual RTP data.
 */
private void onAccept(byte[] buf,int off,int len){
  long ts=context.tsTranslation.apply(RawPacket.getTimestamp(buf,off,len));
  if (filterState.maxTs == -1 || TimeUtils.rtpDiff(ts,filterState.maxTs) > 0) {
    filterState.maxTs=ts;
  }
  int seqNum=context.seqNumTranslation.apply(RawPacket.getSequenceNumber(buf,off,len));
  if (filterState.maxSeqNum == -1 || RTPUtils.sequenceNumberDiff(seqNum,filterState.maxSeqNum) > 0) {
    filterState.maxSeqNum=seqNum;
  }
  filterState.transmittedBytes+=len;
  filterState.transmittedPackets++;
}",0.9767441860465116
107525,"/** 
 * {@inheritDoc}
 */
@Override public Bitrates getBitrates(){
  long currentBps=0;
  MediaStreamTrackDesc source=weakSource.get();
  if (source == null) {
    return Bitrates.EMPTY;
  }
  RTPEncodingDesc[] sourceEncodings=source.getRTPEncodings();
  if (ArrayUtils.isNullOrEmpty(sourceEncodings)) {
    return Bitrates.EMPTY;
  }
  int currentIdx=transformState.currentIdx;
  if (currentIdx != -1) {
    if (sourceEncodings[currentIdx].isActive()) {
      currentBps=sourceEncodings[currentIdx].getLastStableBitrateBps();
    }
  }
  long optimalBps=0;
  int optimalIdx=this.optimalIdx;
  if (optimalIdx >= 0) {
    for (int i=optimalIdx; i > -1; i--) {
      if (!sourceEncodings[i].isActive()) {
        continue;
      }
      long bps=sourceEncodings[i].getLastStableBitrateBps();
      if (bps > 0) {
        optimalBps=bps;
        break;
      }
    }
  }
  return new Bitrates(currentBps,optimalBps);
}","/** 
 * {@inheritDoc}
 */
@Override public Bitrates getBitrates(){
  long currentBps=0;
  MediaStreamTrackDesc source=weakSource.get();
  if (source == null) {
    return Bitrates.EMPTY;
  }
  RTPEncodingDesc[] sourceEncodings=source.getRTPEncodings();
  if (ArrayUtils.isNullOrEmpty(sourceEncodings)) {
    return Bitrates.EMPTY;
  }
  int currentIdx=context.currentIdx;
  if (currentIdx != -1) {
    if (sourceEncodings[currentIdx].isActive()) {
      currentBps=sourceEncodings[currentIdx].getLastStableBitrateBps();
    }
  }
  long optimalBps=0;
  int optimalIdx=this.optimalIdx;
  if (optimalIdx >= 0) {
    for (int i=optimalIdx; i > -1; i--) {
      if (!sourceEncodings[i].isActive()) {
        continue;
      }
      long bps=sourceEncodings[i].getLastStableBitrateBps();
      if (bps > 0) {
        optimalBps=bps;
        break;
      }
    }
  }
  return new Bitrates(currentBps,optimalBps);
}",0.988480526604498
107526,"/** 
 * Transforms the RTP packet specified in the   {@link RawPacket} that ispassed as an argument for the purposes of simulcast.
 * @param pkt the {@link RawPacket} to be transformed.
 * @return the transformed {@link RawPacket} or null if the packet needsto be dropped.
 */
public RawPacket[] rtpTransform(RawPacket pkt){
  if (!RTPPacketPredicate.INSTANCE.test(pkt)) {
    return new RawPacket[]{pkt};
  }
  SimTransformation state=transformState;
  long srcSSRC=pkt.getSSRCAsLong();
  if (srcSSRC != state.currentSSRC) {
    return null;
  }
  RawPacket[] pkts;
  FrameDesc startFrame;
  if (transformState.maybeFixInitialIndependentFrame && (startFrame=state.weakStartFrame.get()) != null && startFrame.matches(pkt)) {
    transformState.maybeFixInitialIndependentFrame=false;
    if (startFrame.getStart() != pkt.getSequenceNumber()) {
      RawPacketCache inCache=startFrame.getRTPEncoding().getMediaStreamTrack().getMediaStreamTrackReceiver().getStream().getCachingTransformer().getIncomingRawPacketCache();
      int start=startFrame.getStart();
      int len=RTPUtils.sequenceNumberDiff(startFrame.getMaxSeen(),start) + 1;
      pkts=new RawPacket[len];
      for (int i=0; i < pkts.length; i++) {
        pkts[i]=inCache.get(srcSSRC,(start + i) & 0xFFFF);
      }
    }
 else {
      pkts=new RawPacket[]{pkt};
    }
  }
 else {
    pkts=new RawPacket[]{pkt};
  }
  for (int i=0; i < pkts.length; i++) {
    if (pkts[i] == null) {
      continue;
    }
    int srcSeqNum=pkt.getSequenceNumber();
    int dstSeqNum=state.rewriteSeqNum(srcSeqNum);
    long srcTs=pkt.getTimestamp();
    long dstTs=state.rewriteTimestamp(srcTs);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + pkt.getSSRCAsLong() + ""String_Node_Str""+ srcSeqNum+ ""String_Node_Str""+ srcTs+ ""String_Node_Str""+ targetSSRC+ ""String_Node_Str""+ dstSeqNum+ ""String_Node_Str""+ dstTs);
    }
    if (srcSeqNum != dstSeqNum) {
      pkt.setSequenceNumber(dstSeqNum);
    }
    if (dstTs != srcTs) {
      pkt.setTimestamp(dstTs);
    }
    if (srcSSRC != targetSSRC) {
      pkt.setSSRC((int)targetSSRC);
    }
  }
  return pkts;
}","/** 
 * Transforms the RTP packet specified in the   {@link RawPacket} that ispassed as an argument for the purposes of simulcast.
 * @param pktIn the {@link RawPacket} to be transformed.
 * @return the transformed {@link RawPacket} or null if the packet needsto be dropped.
 */
public RawPacket[] rtpTransform(RawPacket pktIn){
  if (!RTPPacketPredicate.INSTANCE.test(pktIn)) {
    return new RawPacket[]{pktIn};
  }
  SimTransformation state=transformState;
  long srcSSRC=pktIn.getSSRCAsLong();
  if (srcSSRC != state.currentSSRC) {
    return null;
  }
  RawPacket[] pktsOut;
  FrameDesc startFrame;
  if (transformState.maybeFixInitialIndependentFrame && (startFrame=state.weakStartFrame.get()) != null && startFrame.matches(pktIn)) {
    transformState.maybeFixInitialIndependentFrame=false;
    if (startFrame.getStart() != pktIn.getSequenceNumber()) {
      RawPacketCache inCache=startFrame.getRTPEncoding().getMediaStreamTrack().getMediaStreamTrackReceiver().getStream().getCachingTransformer().getIncomingRawPacketCache();
      int start=startFrame.getStart();
      int len=RTPUtils.sequenceNumberDiff(startFrame.getMaxSeen(),start) + 1;
      pktsOut=new RawPacket[len];
      for (int i=0; i < pktsOut.length; i++) {
        pktsOut[i]=inCache.get(srcSSRC,(start + i) & 0xFFFF);
      }
    }
 else {
      pktsOut=new RawPacket[]{pktIn};
    }
  }
 else {
    pktsOut=new RawPacket[]{pktIn};
  }
  for (  RawPacket pktOut : pktsOut) {
    if (pktOut == null) {
      continue;
    }
    int srcSeqNum=pktOut.getSequenceNumber();
    int dstSeqNum=state.rewriteSeqNum(srcSeqNum);
    long srcTs=pktOut.getTimestamp();
    long dstTs=state.rewriteTimestamp(srcTs);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + pktIn.getSSRCAsLong() + ""String_Node_Str""+ srcSeqNum+ ""String_Node_Str""+ srcTs+ ""String_Node_Str""+ targetSSRC+ ""String_Node_Str""+ dstSeqNum+ ""String_Node_Str""+ dstTs);
    }
    if (srcSeqNum != dstSeqNum) {
      pktOut.setSequenceNumber(dstSeqNum);
    }
    if (dstTs != srcTs) {
      pktOut.setTimestamp(dstTs);
    }
    if (srcSSRC != targetSSRC) {
      pktOut.setSSRC((int)targetSSRC);
    }
  }
  return pktsOut;
}",0.972093023255814
107527,"/** 
 * Updates this   {@link MediaStreamTrackReceiver} with the new RTP encodingparameters.
 * @param newTracks the {@link MediaStreamTrackDesc}s that this instance will receive.
 * @return true if the MSTs have changed, otherwise false.
 */
public boolean setMediaStreamTracks(MediaStreamTrackDesc[] newTracks){
  MediaStreamTrackDesc[] oldTracks=tracks;
  int oldTracksLen=oldTracks == null ? 0 : oldTracks.length;
  int newTracksLen=newTracks == null ? 0 : newTracks.length;
  if (oldTracksLen == 0 || newTracksLen == 0) {
    tracks=newTracks;
    return oldTracksLen != newTracksLen;
  }
 else {
    int cntMatched=0;
    MediaStreamTrackDesc[] mergedTracks=new MediaStreamTrackDesc[newTracks.length];
    for (int i=0; i < newTracks.length; i++) {
      RTPEncodingDesc newEncoding=newTracks[i].getRTPEncodings()[0];
      for (int j=0; i < oldTracks.length; j++) {
        if (oldTracks[j] != null && oldTracks[j].matches(newEncoding.getPrimarySSRC())) {
          mergedTracks[i]=oldTracks[j];
          cntMatched++;
          break;
        }
      }
      if (mergedTracks[i] == null) {
        mergedTracks[i]=newTracks[i];
      }
    }
    tracks=mergedTracks;
    return oldTracksLen != newTracksLen || cntMatched != oldTracks.length;
  }
}","/** 
 * Updates this   {@link MediaStreamTrackReceiver} with the new RTP encodingparameters.
 * @param newTracks the {@link MediaStreamTrackDesc}s that this instance will receive.
 * @return true if the MSTs have changed, otherwise false.
 */
public boolean setMediaStreamTracks(MediaStreamTrackDesc[] newTracks){
  MediaStreamTrackDesc[] oldTracks=tracks;
  int oldTracksLen=oldTracks == null ? 0 : oldTracks.length;
  int newTracksLen=newTracks == null ? 0 : newTracks.length;
  if (oldTracksLen == 0 || newTracksLen == 0) {
    tracks=newTracks;
    return oldTracksLen != newTracksLen;
  }
 else {
    int cntMatched=0;
    MediaStreamTrackDesc[] mergedTracks=new MediaStreamTrackDesc[newTracks.length];
    for (int i=0; i < newTracks.length; i++) {
      RTPEncodingDesc newEncoding=newTracks[i].getRTPEncodings()[0];
      for (int j=0; j < oldTracks.length; j++) {
        if (oldTracks[j] != null && oldTracks[j].matches(newEncoding.getPrimarySSRC())) {
          mergedTracks[i]=oldTracks[j];
          cntMatched++;
          break;
        }
      }
      if (mergedTracks[i] == null) {
        mergedTracks[i]=newTracks[i];
      }
    }
    tracks=mergedTracks;
    return oldTracksLen != newTracksLen || cntMatched != oldTracks.length;
  }
}",0.9992038216560508
107528,"@Override public void setOffsetLength(int offset,int length){
  if (offset + length > buffer.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.offset=offset;
}","@Override public void setOffsetLength(int offset,int length){
  if (offset + length > buffer.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.offset=offset;
  this.length=length;
}",0.945
107529,"/** 
 * @param pkt
 * @param nowMs
 * @return the {@link SourceFrameDesc} that was updated, otherwise null.
 */
SourceFrameDesc update(RawPacket pkt,long nowMs){
  rateStatistics.update(pkt.getLength(),nowMs);
  long ts=pkt.getTimestamp();
  SourceFrameDesc frame=frames.get(ts);
  if (frame == null) {
synchronized (frames) {
      frames.put(ts,frame=new SourceFrameDesc(this));
    }
    lastStableBitrateBps=getBitrateBps(nowMs);
  }
  boolean frameChanged=frame.update(pkt);
  if (frameChanged) {
    Map.Entry<Long,SourceFrameDesc> ceilingEntry=frames.ceilingEntry((ts + 1) & 0xFFFFFFFFL);
    if (ceilingEntry != null) {
      SourceFrameDesc ceilingFrame=ceilingEntry.getValue();
      if (ceilingFrame.getStart() != -1 || frame.getEnd() != -1) {
        int diff=RTPUtils.sequenceNumberDiff(ceilingFrame.getMinSeen(),frame.getMaxSeen());
        if (Math.abs(diff) < 3) {
          frame.setEnd((frame.getMaxSeen() + 1) & 0xFFFF);
          ceilingFrame.setStart((ceilingFrame.getMinSeen() - 1) & 0xFFFF);
        }
      }
    }
    Map.Entry<Long,SourceFrameDesc> floorEntry=frames.floorEntry((ts - 1) & 0xFFFFFFFFL);
    if (floorEntry != null) {
      SourceFrameDesc floorFrame=floorEntry.getValue();
      if (floorFrame.getEnd() != -1 || frame.getStart() != -1) {
        int diff=RTPUtils.sequenceNumberDiff(frame.getMinSeen(),floorFrame.getMaxSeen());
        if (Math.abs(diff) < 3) {
          frame.setStart((frame.getMinSeen() - 1) & 0xFFFF);
          floorFrame.setEnd((floorFrame.getMaxSeen() + 1) & 0xFFFF);
        }
      }
    }
  }
  return frameChanged ? frame : null;
}","/** 
 * @param pkt
 * @param nowMs
 * @return the {@link SourceFrameDesc} that was updated, otherwise null.
 */
SourceFrameDesc update(RawPacket pkt,long nowMs){
  rateStatistics.update(pkt.getLength(),nowMs);
  long ts=pkt.getTimestamp();
  SourceFrameDesc frame=frames.get(ts);
  if (frame == null) {
synchronized (frames) {
      frames.put(ts,frame=new SourceFrameDesc(this,ts));
    }
    lastStableBitrateBps=getBitrateBps(nowMs);
  }
  boolean frameChanged=frame.update(pkt);
  if (frameChanged) {
    Map.Entry<Long,SourceFrameDesc> ceilingEntry=frames.ceilingEntry((ts + 1) & 0xFFFFFFFFL);
    if (ceilingEntry != null) {
      SourceFrameDesc ceilingFrame=ceilingEntry.getValue();
      long tsDiff=(ceilingFrame.getTimestamp() - ts) & 0xFFFFFFFFL;
      if (tsDiff < (1L << 31) && (ceilingFrame.getStart() != -1 || frame.getEnd() != -1)) {
        int minSeen=ceilingFrame.getMinSeen();
        int maxSeen=frame.getMaxSeen();
        int snDiff=(minSeen - maxSeen) & 0xFFFF;
        if (snDiff < 3) {
          frame.setEnd((maxSeen + 1) & 0xFFFF);
          ceilingFrame.setStart((minSeen - 1) & 0xFFFF);
        }
      }
    }
    Map.Entry<Long,SourceFrameDesc> floorEntry=frames.floorEntry((ts - 1) & 0xFFFFFFFFL);
    if (floorEntry != null) {
      SourceFrameDesc floorFrame=floorEntry.getValue();
      long tsDiff=(floorFrame.getTimestamp() - ts) & 0xFFFFFFFFL;
      if (tsDiff < (1L << 31) && (floorFrame.getEnd() != -1 || frame.getStart() != -1)) {
        int minSeen=frame.getMinSeen();
        int maxSeen=floorFrame.getMaxSeen();
        int snDiff=(minSeen - maxSeen) & 0xFFFF;
        if (snDiff < 3) {
          frame.setStart((minSeen - 1) & 0xFFFF);
          floorFrame.setEnd((maxSeen + 1) & 0xFFFF);
        }
      }
    }
  }
  return frameChanged ? frame : null;
}",0.6925110132158591
107530,"/** 
 * Ctor.
 * @param rtpEncoding the {@link RTPEncodingImpl} that this instance belongsto.
 */
SourceFrameDesc(RTPEncodingImpl rtpEncoding){
  this.rtpEncoding=rtpEncoding;
}","/** 
 * Ctor.
 * @param rtpEncoding the {@link RTPEncodingImpl} that this instance belongsto.
 * @param ts the RTP timestamp for this frame.
 */
SourceFrameDesc(RTPEncodingImpl rtpEncoding,long ts){
  this.rtpEncoding=rtpEncoding;
  this.ts=ts;
}",0.8368794326241135
107531,"/** 
 * Returns   {@code true} if the packet with timestamp {@code timestamp}arrived in order.
 * @param timestamp
 * @return
 */
private boolean isPacketInOrder(long timestamp){
  if (currentTimestampGroup.isFirstPacket()) {
    return true;
  }
 else {
    long timestampDiff=timestamp - currentTimestampGroup.firstTimestamp;
    return timestampDiff < 0x80000000L;
  }
}","/** 
 * Returns   {@code true} if the packet with timestamp {@code timestamp}arrived in order.
 * @param timestamp
 * @return
 */
private boolean isPacketInOrder(long timestamp){
  if (currentTimestampGroup.isFirstPacket()) {
    return true;
  }
 else {
    long timestampDiff=subtractAsUnsignedInt32(timestamp,currentTimestampGroup.firstTimestamp);
    return timestampDiff < 0x80000000L;
  }
}",0.9388816644993498
107532,"/** 
 * webrtc/modules/include/module_common_types.h
 * @param timestamp1
 * @param timestamp2
 * @return
 */
private static long latestTimestamp(long timestamp1,long timestamp2){
  return isNewerTimestamp(timestamp1,timestamp2) ? timestamp1 : timestamp2;
}","/** 
 * webrtc/modules/include/module_common_types.h
 * @param timestamp1
 * @param timestamp2
 * @return
 */
static long latestTimestamp(long timestamp1,long timestamp2){
  return isNewerTimestamp(timestamp1,timestamp2) ? timestamp1 : timestamp2;
}",0.984189723320158
107533,"/** 
 * webrtc/modules/include/module_common_types.h
 * @param timestamp
 * @param prevTimestamp
 * @return
 */
private static boolean isNewerTimestamp(long timestamp,long prevTimestamp){
  if (timestamp - prevTimestamp == 0x80000000L) {
    return timestamp > prevTimestamp;
  }
  return timestamp != prevTimestamp && timestamp - prevTimestamp < 0x80000000L;
}","/** 
 * webrtc/modules/include/module_common_types.h
 * @param timestamp
 * @param prevTimestamp
 * @return
 */
static boolean isNewerTimestamp(long timestamp,long prevTimestamp){
  if (subtractAsUnsignedInt32(timestamp,prevTimestamp) == 0x80000000L) {
    return timestamp > prevTimestamp;
  }
  return timestamp != prevTimestamp && subtractAsUnsignedInt32(timestamp,prevTimestamp) < 0x80000000L;
}",0.7973684210526316
107534,"/** 
 * {@inheritDoc}bitrate_controller_impl.cc BitrateControllerImpl::OnReceivedRtcpReceiverReport
 */
@Override public void rtcpReportReceived(RTCPReport report){
  if (report == null || report.getFeedbackReports() == null || report.getFeedbackReports().isEmpty()) {
    return;
  }
  long total_number_of_packets=0;
  long fraction_lost_aggregate=0;
  for (  RTCPFeedback feedback : report.getFeedbackReports()) {
    long ssrc=feedback.getSSRC();
    long extSeqNum=feedback.getXtndSeqNum();
    Long lastEHSN=ssrc_to_last_received_extended_high_seq_num_.get(ssrc);
    if (lastEHSN == null) {
      lastEHSN=extSeqNum;
      continue;
    }
    ssrc_to_last_received_extended_high_seq_num_.put(ssrc,extSeqNum);
    if (lastEHSN >= extSeqNum) {
      continue;
    }
    long number_of_packets=extSeqNum - lastEHSN;
    fraction_lost_aggregate+=number_of_packets * feedback.getFractionLost();
    total_number_of_packets+=number_of_packets;
  }
  if (total_number_of_packets == 0) {
    fraction_lost_aggregate=0;
  }
 else {
    fraction_lost_aggregate=(fraction_lost_aggregate + total_number_of_packets / 2) / total_number_of_packets;
  }
  if (fraction_lost_aggregate > 255) {
    return;
  }
synchronized (sendSideBandwidthEstimation) {
    lastUpdateTime=System.currentTimeMillis();
    sendSideBandwidthEstimation.updateReceiverBlock(fraction_lost_aggregate,total_number_of_packets,lastUpdateTime);
  }
}","/** 
 * {@inheritDoc}bitrate_controller_impl.cc BitrateControllerImpl::OnReceivedRtcpReceiverReport
 */
@Override public void rtcpReportReceived(RTCPReport report){
  if (report == null || report.getFeedbackReports() == null || report.getFeedbackReports().isEmpty()) {
    return;
  }
  long total_number_of_packets=0;
  long fraction_lost_aggregate=0;
  for (  RTCPFeedback feedback : report.getFeedbackReports()) {
    long ssrc=feedback.getSSRC();
    long extSeqNum=feedback.getXtndSeqNum();
    Long lastEHSN=ssrc_to_last_received_extended_high_seq_num_.get(ssrc);
    if (lastEHSN == null) {
      lastEHSN=extSeqNum;
    }
    ssrc_to_last_received_extended_high_seq_num_.put(ssrc,extSeqNum);
    if (lastEHSN >= extSeqNum) {
      continue;
    }
    long number_of_packets=extSeqNum - lastEHSN;
    fraction_lost_aggregate+=number_of_packets * feedback.getFractionLost();
    total_number_of_packets+=number_of_packets;
  }
  if (total_number_of_packets == 0) {
    fraction_lost_aggregate=0;
  }
 else {
    fraction_lost_aggregate=(fraction_lost_aggregate + total_number_of_packets / 2) / total_number_of_packets;
  }
  if (fraction_lost_aggregate > 255) {
    return;
  }
synchronized (sendSideBandwidthEstimation) {
    lastUpdateTime=System.currentTimeMillis();
    sendSideBandwidthEstimation.updateReceiverBlock(fraction_lost_aggregate,total_number_of_packets,lastUpdateTime);
  }
}",0.9943100995732574
107535,"/** 
 * Tries to find an RTP header extensions with an ID of   {@link #extensionID}in <tt>pkt</tt> and tries to replace its timestamp with one generated locally (based on   {@link System#nanoTime()}).
 * @param pkt the packet to work on.
 * @return true if and only if an RTP extension with an ID of {@link #extensionID} was found in the packet, and its value was replaced.
 */
private boolean replaceExtension(RawPacket pkt){
  if (!pkt.getExtensionBit())   return false;
  byte[] buf=pkt.getBuffer();
  int extensionOffset=pkt.getOffset();
  extensionOffset+=RawPacket.FIXED_HEADER_SIZE;
  extensionOffset+=pkt.getCsrcCount() * 4;
  if (buf.length < extensionOffset + 4) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xBE) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xDE) {
    return false;
  }
  int lengthInWords=(buf[extensionOffset++] & 0xFF) << 8 | (buf[extensionOffset++] & 0xFF);
  int lengthInBytes=4 * (1 + lengthInWords);
  int innerOffset=0;
  while (extensionOffset < buf.length && innerOffset < lengthInBytes) {
    int id=(buf[extensionOffset] & 0xf0) >> 4;
    int len=buf[extensionOffset] & 0x0f;
    if (id == extensionID) {
      if (len == 2 && extensionOffset + 3 < buf.length) {
        setTimestamp(buf,extensionOffset + 1);
        return true;
      }
 else {
        logger.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ len);
        return true;
      }
    }
 else {
      innerOffset+=1 + len + 1;
      extensionOffset+=1 + len + 1;
    }
  }
  return false;
}","/** 
 * Tries to find an RTP header extensions with an ID of   {@link #extensionID}in <tt>pkt</tt> and tries to replace its timestamp with one generated locally (based on   {@link System#nanoTime()}).
 * @param pkt the packet to work on.
 * @return true if and only if an RTP extension with an ID of {@link #extensionID} was found in the packet, and its value was replaced.
 */
private boolean replaceExtension(RawPacket pkt){
  if (!pkt.getExtensionBit())   return false;
  byte[] buf=pkt.getBuffer();
  int extensionOffset=pkt.getOffset();
  extensionOffset+=RawPacket.FIXED_HEADER_SIZE;
  extensionOffset+=pkt.getCsrcCount() * 4;
  if (buf.length < extensionOffset + 4) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xBE) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xDE) {
    return false;
  }
  int lengthInWords=(buf[extensionOffset++] & 0xFF) << 8 | (buf[extensionOffset++] & 0xFF);
  int lengthInBytes=4 * lengthInWords;
  int innerOffset=0;
  while (extensionOffset < buf.length && innerOffset < lengthInBytes) {
    int id=(buf[extensionOffset] & 0xf0) >> 4;
    int len=buf[extensionOffset] & 0x0f;
    if (id == extensionID) {
      if (len == 2 && extensionOffset + 3 < buf.length) {
        setTimestamp(buf,extensionOffset + 1);
        return true;
      }
 else {
        logger.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ len);
        return true;
      }
    }
 else {
      innerOffset+=1 + len + 1;
      extensionOffset+=1 + len + 1;
    }
  }
  return false;
}",0.9980595084087968
107536,"/** 
 * Tries to find an RTP header extensions with an ID of   {@link #extensionID}in <tt>pkt</tt> and tries to replace its timestamp with one generated locally (based on   {@link System#nanoTime()}).
 * @param pkt the packet to work on.
 * @return true if and only if an RTP extension with an ID of {@link #extensionID} was found in the packet, and its value was replaced.
 */
private boolean replaceExtension(RawPacket pkt){
  if (!pkt.getExtensionBit())   return false;
  byte[] buf=pkt.getBuffer();
  int extensionOffset=pkt.getOffset();
  extensionOffset+=RawPacket.FIXED_HEADER_SIZE;
  extensionOffset+=pkt.getCsrcCount() * 4;
  if (buf.length < extensionOffset + 4) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xBE) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xDE) {
    return false;
  }
  int lengthInWords=(buf[extensionOffset++] & 0xFF) << 8 | (buf[extensionOffset++] & 0xFF);
  int lengthInBytes=4 * (1 + lengthInWords);
  int innerOffset=0;
  while (extensionOffset < buf.length && innerOffset < lengthInBytes) {
    int id=(buf[extensionOffset] & 0xf0) >> 4;
    int len=buf[extensionOffset] & 0x0f;
    if (id == extensionID) {
      if (len == 2 && extensionOffset + 3 < buf.length) {
        setTimestamp(buf,extensionOffset + 1);
        return true;
      }
 else {
        logger.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ len);
        return true;
      }
    }
 else {
      innerOffset+=1 + len + 1;
      extensionOffset+=1 + len + 1;
    }
  }
  return false;
}","/** 
 * Tries to find an RTP header extensions with an ID of   {@link #extensionID}in <tt>pkt</tt> and tries to replace its timestamp with one generated locally (based on   {@link System#nanoTime()}).
 * @param pkt the packet to work on.
 * @return true if and only if an RTP extension with an ID of {@link #extensionID} was found in the packet, and its value was replaced.
 */
private boolean replaceExtension(RawPacket pkt){
  if (!pkt.getExtensionBit())   return false;
  byte[] buf=pkt.getBuffer();
  int extensionOffset=pkt.getOffset();
  extensionOffset+=RawPacket.FIXED_HEADER_SIZE;
  extensionOffset+=pkt.getCsrcCount() * 4;
  if (buf.length < extensionOffset + 4) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xBE) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xDE) {
    return false;
  }
  int lengthInWords=(buf[extensionOffset++] & 0xFF) << 8 | (buf[extensionOffset++] & 0xFF);
  int lengthInBytes=4 * lengthInWords;
  int innerOffset=0;
  while (extensionOffset < buf.length && innerOffset < lengthInBytes) {
    int id=(buf[extensionOffset] & 0xf0) >> 4;
    int len=buf[extensionOffset] & 0x0f;
    if (id == extensionID) {
      if (len == 2 && extensionOffset + 3 < buf.length) {
        setTimestamp(buf,extensionOffset + 1);
        return true;
      }
 else {
        logger.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ len);
        return true;
      }
    }
 else {
      innerOffset+=1 + len + 1;
      extensionOffset+=1 + len + 1;
    }
  }
  return false;
}",0.9980595084087968
107537,"private static boolean verifyStapANaluLengths(byte[] data,int offset,int lengthRemaining){
  int initialLength=lengthRemaining;
  while (lengthRemaining > 0 && offset + 1 < initialLength) {
    if (lengthRemaining < kNalUSize) {
      return false;
    }
    int naluSize=data[offset] << 8 | data[offset + 1];
    offset+=kNalUSize;
    lengthRemaining-=kNalUSize;
    if (naluSize > lengthRemaining) {
      return false;
    }
    offset+=naluSize;
    lengthRemaining-=naluSize;
  }
  return true;
}","private static boolean verifyStapANaluLengths(byte[] data,int offset,int lengthRemaining){
  int initialLength=lengthRemaining;
  while (lengthRemaining > 0 && offset + 1 < initialLength && offset > 0) {
    if (lengthRemaining < kNalUSize) {
      return false;
    }
    int naluSize=data[offset] << 8 | data[offset + 1];
    offset+=kNalUSize;
    lengthRemaining-=kNalUSize;
    if (naluSize > lengthRemaining) {
      return false;
    }
    offset+=naluSize;
    lengthRemaining-=naluSize;
  }
  return true;
}",0.986247544204322
107538,"/** 
 * Gets the <tt>Buffer</tt> instance responsible for buffering packets with SSRC <tt>ssrc</tt>. Creates it if necessary, always returns non-null.
 * @param ssrc the SSRC for which go get a <tt>Buffer</tt>.
 * @return the <tt>Buffer</tt> instance responsible for buffering packets withSSRC <tt>ssrc</tt>. Creates it if necessary, always returns non-null.
 */
private Buffer getBuffer(long ssrc){
  Buffer buffer=buffers.get(ssrc);
  if (buffer == null) {
synchronized (buffers) {
      buffer=buffers.get(ssrc);
      if (buffer == null) {
        buffer=new Buffer(SIZE,ssrc);
        buffers.put(ssrc,buffer);
      }
    }
  }
  return buffer;
}","/** 
 * Gets the <tt>Buffer</tt> instance responsible for buffering packets with SSRC <tt>ssrc</tt>. Creates it if necessary, always returns non-null.
 * @param ssrc the SSRC for which go get a <tt>Buffer</tt>.
 * @return the <tt>Buffer</tt> instance responsible for buffering packets withSSRC <tt>ssrc</tt>. Creates it if necessary, always returns non-null.
 */
private Buffer getBuffer(long ssrc){
synchronized (buffers) {
    Buffer buffer=buffers.get(ssrc);
    if (buffer == null) {
      buffer=new Buffer(SIZE,ssrc);
      buffers.put(ssrc,buffer);
    }
    return buffer;
  }
}",0.8723747980613893
107539,"/** 
 * Empties the <tt>Buffer</tt> for a specific SSRC, and returns its contents as an ordered (by RTP sequence number) array.
 * @param ssrc the SSRC for which to empty the <tt>Buffer</tt>.
 * @return the contents of the <tt>Buffer</tt> for SSRC, or an empty array,if there is no buffer for SSRC.
 */
RawPacket[] emptyBuffer(long ssrc){
  Buffer buffer=buffers.get(ssrc);
  if (buffer != null) {
    return buffer.empty();
  }
  return new RawPacket[0];
}","/** 
 * Empties the <tt>Buffer</tt> for a specific SSRC, and returns its contents as an ordered (by RTP sequence number) array.
 * @param ssrc the SSRC for which to empty the <tt>Buffer</tt>.
 * @return the contents of the <tt>Buffer</tt> for SSRC, or an empty array,if there is no buffer for SSRC.
 */
RawPacket[] emptyBuffer(long ssrc){
  Buffer buffer;
synchronized (buffers) {
    buffer=buffers.get(ssrc);
  }
  if (buffer != null) {
    return buffer.empty();
  }
  return new RawPacket[0];
}",0.9570680628272252
107540,"/** 
 * Resets the buffer for a particular SSRC (effectively re-enabling it if it was disabled).
 * @param ssrc
 */
void reset(long ssrc){
synchronized (buffers) {
    Buffer buffer=buffers.get(ssrc);
    if (buffer != null)     buffers.remove(ssrc);
  }
}","/** 
 * Resets the buffer for a particular SSRC (effectively re-enabling it if it was disabled).
 * @param ssrc
 */
void reset(long ssrc){
synchronized (buffers) {
    buffers.remove(ssrc);
  }
}",0.8647450110864745
107541,"/** 
 * {@inheritDoc}
 */
@Override public void close(){
  for (  FECReceiver fecReceiver : fecReceivers.values())   fecReceiver.close();
  for (  FECSender fecSender : fecSenders.values())   fecSender.close();
}","/** 
 * {@inheritDoc}
 */
@Override public void close(){
  Collection<FECReceiver> receivers;
  Collection<FECSender> senders;
synchronized (fecReceivers) {
    receivers=fecReceivers.values();
    fecReceivers.clear();
  }
synchronized (fecSenders) {
    senders=fecSenders.values();
    fecSenders.clear();
  }
  for (  FECReceiver fecReceiver : receivers)   fecReceiver.close();
  for (  FECSender fecSender : senders)   fecSender.close();
}",0.3292682926829268
107542,"/** 
 * Removes the RTP-NTP mapping for a given SSRC.
 * @param ssrc the SSRC for which to remove the RTP-NTP mapping
 */
void removeMapping(long ssrc){
  if (ssrcs.containsKey(ssrc)) {
synchronized (ssrcs) {
      SSRCDesc ssrcDesc=ssrcs.get(ssrc);
      if (ssrcDesc != null) {
synchronized (ssrcDesc) {
          ssrcDesc.ntpTime=-1.0;
          ssrcDesc.rtpTime=-1;
        }
      }
    }
  }
}","/** 
 * Removes the RTP-NTP mapping for a given SSRC.
 * @param ssrc the SSRC for which to remove the RTP-NTP mapping
 */
void removeMapping(long ssrc){
  SSRCDesc ssrcDesc=ssrcs.get(ssrc);
  if (ssrcDesc != null) {
synchronized (ssrcDesc) {
      ssrcDesc.ntpTime=-1.0;
      ssrcDesc.rtpTime=-1;
    }
  }
}",0.8728813559322034
107543,"/** 
 * Returns the <tt>Endpoint</tt> with id <tt>endpointId</tt>. Creates an <tt>Endpoint</tt> if necessary. Always returns non-null.
 * @param endpointId the string identifying the endpoint.
 * @return the <tt>Endpoint</tt> with id <tt>endpointId</tt>. Creates an<tt>Endpoint</tt> if necessary.
 */
private Endpoint getEndpoint(String endpointId){
  Endpoint endpoint=endpoints.get(endpointId);
  if (endpoint == null) {
synchronized (endpoints) {
      endpoint=endpoints.get(endpointId);
      if (endpoint == null) {
        endpoint=new Endpoint();
        endpoints.put(endpointId,endpoint);
      }
    }
  }
  return endpoint;
}","/** 
 * Returns the <tt>Endpoint</tt> with id <tt>endpointId</tt>. Creates an <tt>Endpoint</tt> if necessary. Always returns non-null.
 * @param endpointId the string identifying the endpoint.
 * @return the <tt>Endpoint</tt> with id <tt>endpointId</tt>. Creates an<tt>Endpoint</tt> if necessary.
 */
private Endpoint getEndpoint(String endpointId){
synchronized (endpoints) {
    Endpoint endpoint=endpoints.get(endpointId);
    if (endpoint == null) {
      endpoint=new Endpoint();
      endpoints.put(endpointId,endpoint);
    }
    return endpoint;
  }
}",0.8511705685618729
107544,"/** 
 * Return a set of all items with type CNAME from the RTCP SDES packet <tt>pkt</tt>.
 * @param pkt the packet to parse for CNAME items.
 * @retur a set of all items with type CNAME from the RTCP SDES packet<tt>pkt</tt>.
 */
private Set<CNAMEItem> getCnameItems(RawPacket pkt){
  Set<CNAMEItem> ret=new HashSet<CNAMEItem>();
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int len=pkt.getLength();
  int ptr=4;
  while (ptr + 6 < len) {
    int type=buf[off + ptr + 4];
    int len2=buf[off + ptr + 5];
    if (ptr + 6 + len2 >= len)     break;
    if (type == 1) {
      CNAMEItem item=new CNAMEItem();
      item.ssrc=readUnsignedIntAsLong(buf,off + ptr);
      item.cname=readString(buf,off + ptr + 6,len2);
      ret.add(item);
    }
    ptr+=6 + len2;
  }
  return ret;
}","/** 
 * Return a set of all items with type CNAME from the RTCP SDES packet <tt>pkt</tt>.
 * @param pkt the packet to parse for CNAME items.
 * @return a set of all items with type CNAME from the RTCP SDES packet<tt>pkt</tt>.
 */
private Set<CNAMEItem> getCnameItems(RawPacket pkt){
  Set<CNAMEItem> ret=new HashSet<>();
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int len=pkt.getLength();
  int ptr=4;
  while (ptr + 6 < len) {
    int type=buf[off + ptr + 4];
    int len2=buf[off + ptr + 5];
    if (ptr + 6 + len2 >= len)     break;
    if (type == 1) {
      CNAMEItem item=new CNAMEItem();
      item.ssrc=readUnsignedIntAsLong(buf,off + ptr);
      item.cname=readString(buf,off + ptr + 6,len2);
      ret.add(item);
    }
    ptr+=6 + len2;
  }
  return ret;
}",0.6493011435832274
107545,"/** 
 * Returns the <tt>SSRCDesc</tt> instance mapped to the SSRC <tt>ssrc</tt>. If no instance is mapped to <tt>ssrc</tt>, create one and inserts it in the map. Always returns non-null.
 * @param ssrc the ssrc to get the <tt>SSRCDesc</tt> for.
 * @return the <tt>SSRCDesc</tt> instance mapped to the SSRC <tt>ssrc</tt>.
 */
private SSRCDesc getSSRCDesc(long ssrc){
  SSRCDesc ssrcDesc=ssrcs.get(ssrc);
  if (ssrcDesc == null) {
synchronized (ssrcs) {
      ssrcDesc=ssrcs.get(ssrc);
      if (ssrcDesc == null) {
        ssrcDesc=new SSRCDesc();
        ssrcs.put(ssrc,ssrcDesc);
      }
    }
  }
  return ssrcDesc;
}","/** 
 * Returns the <tt>SSRCDesc</tt> instance mapped to the SSRC <tt>ssrc</tt>. If no instance is mapped to <tt>ssrc</tt>, create one and inserts it in the map. Always returns non-null.
 * @param ssrc the ssrc to get the <tt>SSRCDesc</tt> for.
 * @return the <tt>SSRCDesc</tt> instance mapped to the SSRC <tt>ssrc</tt>.
 */
private SSRCDesc getSSRCDesc(long ssrc){
synchronized (ssrcs) {
    SSRCDesc ssrcDesc=ssrcs.get(ssrc);
    if (ssrcDesc == null) {
      ssrcDesc=new SSRCDesc();
      ssrcs.put(ssrc,ssrcDesc);
    }
    return ssrcDesc;
  }
}",0.8632478632478633
107546,"/** 
 * Computes the sum of the values of a specific   {@code Map} with{@code Long} values.
 * @param map the {@code Map} with {@code Long} values to sum up
 * @return the sum of the values of the specified {@code map}
 */
private static long getCumulativeValue(Map<?,Long> map){
  long cumulativeValue=0;
  for (  Long value : map.values()) {
    if (value == null)     continue;
    cumulativeValue+=value;
  }
  return cumulativeValue;
}","/** 
 * Computes the sum of the values of a specific   {@code Map} with{@code Long} values.
 * @param map the {@code Map} with {@code Long} values to sum up. Note thatwe synchronize on this object!
 * @return the sum of the values of the specified {@code map}
 */
private static long getCumulativeValue(Map<?,Long> map){
  long cumulativeValue=0;
synchronized (map) {
    for (    Long value : map.values()) {
      if (value == null)       continue;
      cumulativeValue+=value;
    }
  }
  return cumulativeValue;
}",0.908141962421712
107547,"/** 
 * Utility method to return a value from a map and perform unboxing only if the result value is not null.
 * @param map the map to get the value
 * @param ssrc the key
 * @return the result value or 0 if nothing is found.
 */
private static long getMapValue(Map<?,Long> map,long ssrc){
  Long res=map.get(ssrc);
  return res == null ? 0 : res;
}","/** 
 * Utility method to return a value from a map and perform unboxing only if the result value is not null.
 * @param map the map to get the value. Note that we synchronize on thatobject!
 * @param ssrc the key
 * @return the result value or 0 if nothing is found.
 */
private static long getMapValue(Map<?,Long> map,long ssrc){
synchronized (map) {
    Long res=map.get(ssrc);
    return res == null ? 0 : res;
  }
}",0.9090909090909092
107548,"/** 
 * Utility method to increment map value with specified step. If entry is missing add it.
 * @param map the map holding the values
 * @param ssrc the key of the value to increment
 * @param step increment step value
 */
private static void incrementSSRCCounter(Map<Long,Long> map,long ssrc,long step){
  Long count=map.get(ssrc);
  map.put(ssrc,(count == null) ? step : (count + step));
}","/** 
 * Utility method to increment map value with specified step. If entry is missing add it.
 * @param map the map holding the values. Note that we synchronize on thatobject!
 * @param ssrc the key of the value to increment
 * @param step increment step value
 */
private static void incrementSSRCCounter(Map<Long,Long> map,long ssrc,long step){
synchronized (map) {
    Long count=map.get(ssrc);
    map.put(ssrc,(count == null) ? step : (count + step));
  }
}",0.9182242990654206
107549,"/** 
 * Ctor.
 * @param highestSequenceNumberSent the highest sequence number that gotaccepted, mod 2^16.
 * @param seqnumDelta the seqnumDelta between what's been accepted andwhat's been received, mod 2^16.
 * @param highestTimestampSent The highest timestamp that got accepted,mod 2^32.
 * @param timestampDelta The timestamp delta between what's been acceptedand what's been received, mod 2^32.
 */
public ResumableStreamRewriter(int highestSequenceNumberSent,int seqnumDelta,long highestTimestampSent,long timestampDelta){
  this.seqnumDelta=seqnumDelta;
  this.highestSequenceNumberSent=highestSequenceNumberSent;
  this.highestTimestampSent=highestTimestampSent;
  this.timestampDelta=timestampDelta;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + highestSequenceNumberSent + ""String_Node_Str""+ seqnumDelta+ ""String_Node_Str""+ highestTimestampSent+ ""String_Node_Str""+ timestampDelta);
  }
}","/** 
 * Ctor.
 * @param highestSequenceNumberSent the highest sequence number that gotaccepted, mod 2^16.
 * @param seqnumDelta the seqnumDelta between what's been accepted andwhat's been received, mod 2^16.
 * @param highestTimestampSent The highest timestamp that got accepted,mod 2^32.
 * @param timestampDelta The timestamp delta between what's been acceptedand what's been received, mod 2^32.
 */
public ResumableStreamRewriter(int highestSequenceNumberSent,int seqnumDelta,long highestTimestampSent,long timestampDelta){
  this.seqnumDelta=seqnumDelta;
  this.highestSequenceNumberSent=highestSequenceNumberSent;
  this.highestTimestampSent=highestTimestampSent;
  this.timestampDelta=timestampDelta;
  if (DEBUG) {
    logger.debug(""String_Node_Str"" + highestSequenceNumberSent + ""String_Node_Str""+ seqnumDelta+ ""String_Node_Str""+ highestTimestampSent+ ""String_Node_Str""+ timestampDelta);
  }
}",0.9857142857142858
107550,"/** 
 * Rewrites the sequence number of the RTP packet in the byte buffer, hiding any gaps caused by drops.
 * @param accept true if the packet is accepted, false otherwise
 * @param buf the byte buffer that contains the RTP packet
 * @param off the offset in the byte buffer where the RTP packet starts
 * @param len the length of the RTP packet in the byte buffer
 * @return true if the packet was altered, false otherwise
 */
public boolean rewriteRTP(boolean accept,byte[] buf,int off,int len){
  if (buf == null || buf.length + off < len) {
    return false;
  }
  int sequenceNumber=RawPacket.getSequenceNumber(buf,off,len);
  int newSequenceNumber=rewriteSequenceNumber(accept,sequenceNumber);
  long timestamp=RawPacket.getTimestamp(buf,off,len);
  long newTimestamp=rewriteTimestamp(accept,timestamp);
  boolean modified=false;
  if (sequenceNumber != newSequenceNumber) {
    Long ssrc=RawPacket.getSSRCAsLong(buf,off,len);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ssrc + ""String_Node_Str""+ sequenceNumber+ ""String_Node_Str""+ newSequenceNumber);
    }
    RawPacket.setSequenceNumber(buf,off,newSequenceNumber);
    modified=true;
  }
  if (timestamp != newTimestamp) {
    Long ssrc=RawPacket.getSSRCAsLong(buf,off,len);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ssrc + ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ newTimestamp);
    }
    RawPacket.setTimestamp(buf,off,len,newTimestamp);
    modified=true;
  }
  return modified;
}","/** 
 * Rewrites the sequence number of the RTP packet in the byte buffer, hiding any gaps caused by drops.
 * @param accept true if the packet is accepted, false otherwise
 * @param buf the byte buffer that contains the RTP packet
 * @param off the offset in the byte buffer where the RTP packet starts
 * @param len the length of the RTP packet in the byte buffer
 * @return true if the packet was altered, false otherwise
 */
public boolean rewriteRTP(boolean accept,byte[] buf,int off,int len){
  if (buf == null || buf.length < off + len) {
    return false;
  }
  int sequenceNumber=RawPacket.getSequenceNumber(buf,off,len);
  int newSequenceNumber=rewriteSequenceNumber(accept,sequenceNumber);
  long timestamp=RawPacket.getTimestamp(buf,off,len);
  long newTimestamp=rewriteTimestamp(accept,timestamp);
  boolean modified=false;
  if (sequenceNumber != newSequenceNumber) {
    Long ssrc=RawPacket.getSSRCAsLong(buf,off,len);
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + ssrc + ""String_Node_Str""+ sequenceNumber+ ""String_Node_Str""+ newSequenceNumber);
    }
    RawPacket.setSequenceNumber(buf,off,newSequenceNumber);
    modified=true;
  }
  if (timestamp != newTimestamp) {
    Long ssrc=RawPacket.getSSRCAsLong(buf,off,len);
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + ssrc + ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ newTimestamp);
    }
    RawPacket.setTimestamp(buf,off,len,newTimestamp);
    modified=true;
  }
  return modified;
}",0.979933110367893
107551,"/** 
 * Restores the RTP timestamp of the RTCP SR packet in the buffer.
 * @param buf the byte buffer that contains the RTCP packet.
 * @param off the offset in the byte buffer where the RTCP packet starts.
 * @param len the number of bytes in buffer which constitute the actualdata.
 * @return true if the SR is modified, false otherwise.
 */
public boolean processRTCP(boolean rewrite,byte[] buf,int off,int len){
  if (timestampDelta == 0) {
    return false;
  }
  long ts=RTCPSenderInfoUtils.getTimestamp(buf,off,len);
  if (ts == -1) {
    return false;
  }
  long newTs=rewrite ? (ts - timestampDelta) & 0xffffffffL : (ts + timestampDelta) & 0xffffffffL;
  boolean ret=RTCPSenderInfoUtils.setTimestamp(buf,off,len,newTs);
  return ret;
}","/** 
 * Restores the RTP timestamp of the RTCP SR packet in the buffer.
 * @param buf the byte buffer that contains the RTCP packet.
 * @param off the offset in the byte buffer where the RTCP packet starts.
 * @param len the number of bytes in buffer which constitute the actualdata.
 * @return true if the SR is modified, false otherwise.
 */
public boolean processRTCP(boolean rewrite,byte[] buf,int off,int len){
  if (timestampDelta == 0) {
    return false;
  }
  long ts=RTCPSenderInfoUtils.getTimestamp(buf,off,len);
  if (ts == -1) {
    return false;
  }
  long newTs=rewrite ? (ts - timestampDelta) & 0xffffffffL : (ts + timestampDelta) & 0xffffffffL;
  if (DEBUG) {
    logger.debug(""String_Node_Str"" + ts + ""String_Node_Str""+ newTs);
  }
  boolean ret=RTCPSenderInfoUtils.setTimestamp(buf,off,len,newTs);
  return ret;
}",0.9441624365482234
107552,"/** 
 * Rewrites or restores an RTP or an RTCP packet.
 * @param streamRTPManager the target {@link StreamRTPManagerDesc}.
 * @param write true if the packet is going to be written, false otherwise.
 * @param rewrite true to rewrite the packet, false to restore it.
 * @param buf the byte buffer that contains the RTP/RTCP packet.
 * @param off the offset in the byte buffer where the RTP/RTCP packetstarts.
 * @param len the number of bytes in buffer which constitute the actualdata.
 * @return true if the packet was modified, false otherwise
 */
private boolean rewritePacket(StreamRTPManagerDesc streamRTPManager,boolean write,boolean rewrite,byte[] buf,int off,int len){
  if (_data) {
    Long ssrc=RawPacket.getSSRCAsLong(buf,off,len);
    ResumableStreamRewriter rewriter=streamRTPManager.streamRTPManager.getResumableStreamRewriter(ssrc,true);
    return rewrite ? rewriter.rewriteRTP(write,buf,off,len) : rewriter.restoreRTP(buf,off,len);
  }
 else {
    int offset=off, length=len;
    boolean modified=false;
    while (length > 0) {
      if (RTCPHeaderUtils.isValid(buf,offset,length)) {
        break;
      }
      int pktLen=RTCPHeaderUtils.getLength(buf,offset,length);
      int pt=RTCPHeaderUtils.getPacketType(buf,offset,pktLen);
      if (pt == RTCPPacket.SR) {
        long ssrc=RTCPHeaderUtils.getSenderSSRC(buf,offset,pktLen);
        ResumableStreamRewriter rewriter=streamRTPManager.streamRTPManager.getResumableStreamRewriter(ssrc,false);
        if (rewriter != null) {
          boolean mod=rewriter.processRTCP(rewrite,buf,offset,pktLen);
          if (mod) {
            modified=mod;
          }
        }
      }
      offset+=pktLen;
      length-=pktLen;
    }
    return modified;
  }
}","/** 
 * Rewrites or restores an RTP or an RTCP packet.
 * @param streamRTPManager the target {@link StreamRTPManagerDesc}.
 * @param write true if the packet is going to be written, false otherwise.
 * @param rewrite true to rewrite the packet, false to restore it.
 * @param buf the byte buffer that contains the RTP/RTCP packet.
 * @param off the offset in the byte buffer where the RTP/RTCP packetstarts.
 * @param len the number of bytes in buffer which constitute the actualdata.
 * @return true if the packet was modified, false otherwise
 */
private boolean rewritePacket(StreamRTPManagerDesc streamRTPManager,boolean write,boolean rewrite,byte[] buf,int off,int len){
  if (_data) {
    Long ssrc=RawPacket.getSSRCAsLong(buf,off,len);
    ResumableStreamRewriter rewriter=streamRTPManager.streamRTPManager.getResumableStreamRewriter(ssrc,true);
    return rewrite ? rewriter.rewriteRTP(write,buf,off,len) : rewriter.restoreRTP(buf,off,len);
  }
 else {
    int offset=off, length=len;
    boolean modified=false;
    while (length > 0) {
      if (!RTCPHeaderUtils.isValid(buf,offset,length)) {
        break;
      }
      int pktLen=RTCPHeaderUtils.getLength(buf,offset,length);
      int pt=RTCPHeaderUtils.getPacketType(buf,offset,pktLen);
      if (pt == RTCPPacket.SR) {
        long ssrc=RTCPHeaderUtils.getSenderSSRC(buf,offset,pktLen);
        ResumableStreamRewriter rewriter=streamRTPManager.streamRTPManager.getResumableStreamRewriter(ssrc,false);
        if (rewriter != null) {
          boolean mod=rewriter.processRTCP(rewrite,buf,offset,pktLen);
          if (mod) {
            modified=mod;
          }
        }
      }
      offset+=pktLen;
      length-=pktLen;
    }
    return modified;
  }
}",0.9997098926602844
107553,"/** 
 * {@inheritDoc}
 */
@Override public RawPacket reverseTransform(RawPacket pkt){
  if (pkt == null) {
    return pkt;
  }
  byte[] buf=pkt.getBuffer();
  int offset=pkt.getOffset(), length=pkt.getLength();
  while (length > 0) {
    if (RTCPHeaderUtils.isValid(buf,offset,length)) {
      break;
    }
    int pktLen=RTCPHeaderUtils.getLength(buf,offset,length);
    int pt=RTCPHeaderUtils.getPacketType(buf,offset,pktLen);
    if (pt == RTCPPacket.SR) {
      long ssrc=RTCPHeaderUtils.getSenderSSRC(buf,offset,pktLen);
      ResumableStreamRewriter rewriter=ssrcToRewriter.get(ssrc);
      if (rewriter != null) {
        rewriter.processRTCP(true,buf,offset,pktLen);
      }
    }
    offset+=pktLen;
    length-=pktLen;
  }
  return pkt;
}","/** 
 * {@inheritDoc}
 */
@Override public RawPacket reverseTransform(RawPacket pkt){
  if (pkt == null) {
    return pkt;
  }
  byte[] buf=pkt.getBuffer();
  int offset=pkt.getOffset(), length=pkt.getLength();
  while (length > 0) {
    if (!RTCPHeaderUtils.isValid(buf,offset,length)) {
      break;
    }
    int pktLen=RTCPHeaderUtils.getLength(buf,offset,length);
    int pt=RTCPHeaderUtils.getPacketType(buf,offset,pktLen);
    if (pt == RTCPPacket.SR) {
      long ssrc=RTCPHeaderUtils.getSenderSSRC(buf,offset,pktLen);
      ResumableStreamRewriter rewriter=ssrcToRewriter.get(ssrc);
      if (rewriter != null) {
        rewriter.processRTCP(true,buf,offset,pktLen);
      }
    }
    offset+=pktLen;
    length-=pktLen;
  }
  return pkt;
}",0.9993319973279892
107554,"/** 
 * Uplift the timestamp of a frame if we've already sent a larger timestamp to the remote endpoint.
 * @param p
 */
public void maybeUpliftTimestamp(RawPacket p){
  long timestamp=p.getTimestamp();
  if (maxTimestamp == -1) {
    maxTimestamp=timestamp - 1;
  }
  long minTimestamp=maxTimestamp + 1;
  long delta=TimeUtils.rtpDiff(timestamp,minTimestamp);
  if (delta < 0) {
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    if (delta < -300000 && WARN) {
      logger.warn(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    p.setTimestamp(minTimestamp);
  }
 else {
  }
  if (TimeUtils.rtpDiff(maxTimestamp,timestamp) < 0) {
    maxTimestamp=timestamp;
  }
}","/** 
 * Uplift the timestamp of a frame if we've already sent a larger timestamp to the remote endpoint.
 * @param p
 */
public void maybeUpliftTimestamp(RawPacket p){
  long timestamp=p.getTimestamp();
  if (maxTimestamp == -1) {
    maxTimestamp=timestamp - 1;
  }
  long minTimestamp=maxTimestamp + 1;
  long delta=TimeUtils.rtpDiff(timestamp,minTimestamp);
  if (delta < 0) {
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    if (delta < -300000 && WARN) {
      logger.warn(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    p.setTimestamp(minTimestamp);
    timestamp=minTimestamp;
  }
 else {
  }
  if (TimeUtils.rtpDiff(maxTimestamp,timestamp) < 0) {
    maxTimestamp=timestamp;
  }
}",0.985670419651996
107555,"/** 
 * Uplift the timestamp of a frame if we've already sent a larger timestamp to the remote endpoint.
 * @param p
 */
public void maybeUpliftTimestamp(RawPacket p){
  long timestamp=p.getTimestamp();
  long minTimestamp=maxTimestamp + 1;
  long delta=TimeUtils.rtpDiff(timestamp,minTimestamp);
  if (delta < 0) {
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    if (delta < -300000 && WARN) {
      logger.warn(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    p.setTimestamp(minTimestamp);
  }
 else {
  }
  if (maxTimestamp < timestamp) {
    maxTimestamp=timestamp;
  }
}","/** 
 * Uplift the timestamp of a frame if we've already sent a larger timestamp to the remote endpoint.
 * @param p
 */
public void maybeUpliftTimestamp(RawPacket p){
  long timestamp=p.getTimestamp();
  long minTimestamp=(maxTimestamp == -1) ? timestamp : maxTimestamp + 1;
  long delta=TimeUtils.rtpDiff(timestamp,minTimestamp);
  if (delta < 0) {
    if (DEBUG) {
      logger.debug(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    if (delta < -300000 && WARN) {
      logger.warn(""String_Node_Str"" + timestamp + ""String_Node_Str""+ p.getSequenceNumber()+ ""String_Node_Str""+ p.getSSRCAsLong()+ ""String_Node_Str""+ delta+ ""String_Node_Str""+ minTimestamp);
    }
    p.setTimestamp(minTimestamp);
  }
 else {
  }
  if (TimeUtils.rtpDiff(maxTimestamp,timestamp) < 0) {
    maxTimestamp=timestamp;
  }
}",0.9591611479028698
107556,"/** 
 * Stop ZRTP engine. The ZRTP stack stores RS2 without the valid flag. If we close the ZRTP stream then check if we need to set RS2 to vaild. This is the case if we received less than 10 good SRTP packets. In this case we enable RS2 to make sure the ZRTP self-synchronization is active. This handling is needed to comply to an upcoming newer ZRTP RFC.
 */
public void stopZrtp(){
  if (zrtpEngine != null) {
    if (zrtpUnprotect < 10)     zrtpEngine.setRs2Valid();
    zrtpEngine.stopZrtp();
    zrtpEngine=null;
    started=false;
  }
  if (srtpOutTransformer != null) {
    srtpOutTransformer.close();
    srtpOutTransformer=null;
  }
  if (srtpInTransformer != null) {
    srtpInTransformer.close();
    srtpOutTransformer=null;
  }
  if (zrtcpTransformer != null) {
    zrtcpTransformer.close();
    zrtcpTransformer=null;
  }
}","/** 
 * Stop ZRTP engine. The ZRTP stack stores RS2 without the valid flag. If we close the ZRTP stream then check if we need to set RS2 to vaild. This is the case if we received less than 10 good SRTP packets. In this case we enable RS2 to make sure the ZRTP self-synchronization is active. This handling is needed to comply to an upcoming newer ZRTP RFC.
 */
public void stopZrtp(){
  if (zrtpEngine != null) {
    if (zrtpUnprotect < 10)     zrtpEngine.setRs2Valid();
    zrtpEngine.stopZrtp();
    zrtpEngine=null;
    started=false;
  }
  if (srtpOutTransformer != null) {
    srtpOutTransformer.close();
    srtpOutTransformer=null;
  }
  if (srtpInTransformer != null) {
    srtpInTransformer.close();
    srtpInTransformer=null;
  }
  if (zrtcpTransformer != null) {
    zrtcpTransformer.close();
    zrtcpTransformer=null;
  }
}",0.9970149253731344
107557,"@Override public REDBlock next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  cntRemainingBlocks--;
  if (buffer == null || buffer.length <= offNextBlockHeader) {
    logger.warn(""String_Node_Str"");
    return null;
  }
  byte blockPT=(byte)(buffer[offNextBlockHeader] & 0x7f);
  int blockLen;
  if (hasNext()) {
    if (buffer.length < offNextBlockHeader + 4) {
      logger.warn(""String_Node_Str"");
      return null;
    }
    blockLen=(buffer[offNextBlockHeader + 2] & 0x03) << 8 | (buffer[offNextBlockHeader + 3]);
    offNextBlockHeader+=4;
    offNextBlockPayload+=blockLen;
  }
 else {
    blockLen=length - (offNextBlockPayload + 1);
    offNextBlockHeader=-1;
    offNextBlockPayload=-1;
  }
  return new REDBlock(offNextBlockPayload,blockLen,blockPT);
}","@Override public REDBlock next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  cntRemainingBlocks--;
  if (buffer == null || buffer.length <= offNextBlockHeader) {
    logger.warn(""String_Node_Str"");
    return null;
  }
  byte blockPT=(byte)(buffer[offNextBlockHeader] & 0x7f);
  int blockLen;
  if (hasNext()) {
    if (buffer.length < offNextBlockHeader + 4) {
      logger.warn(""String_Node_Str"");
      return null;
    }
    blockLen=(buffer[offNextBlockHeader + 2] & 0x03) << 8 | (buffer[offNextBlockHeader + 3] & 0xFF);
    offNextBlockHeader+=4;
    offNextBlockPayload+=blockLen;
  }
 else {
    blockLen=length - (offNextBlockPayload + 1);
    offNextBlockHeader=-1;
    offNextBlockPayload=-1;
  }
  return new REDBlock(offNextBlockPayload,blockLen,blockPT);
}",0.9955668144395188
107558,"/** 
 * Checks whether <tt>pkt</tt> looks like a valid RTCP packet.
 * @param pkt the packet to check.
 * @return <tt>true</tt> if <tt>pkt</tt> seems to be a valid RTCP packet.
 */
private boolean isValidRTCP(RawPacket pkt){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int len=pkt.getLength();
  if (len < 4)   return false;
  int v=(buf[off] & 0xc0) >>> 6;
  if (v != 2)   return false;
  int lengthInWords=(buf[off + 2] << 8) + buf[off + 3];
  int lengthInBytes=(lengthInWords + 1) * 4;
  if (len < lengthInBytes)   return false;
  return true;
}","/** 
 * Checks whether <tt>pkt</tt> looks like a valid RTCP packet.
 * @param pkt the packet to check.
 * @return <tt>true</tt> if <tt>pkt</tt> seems to be a valid RTCP packet.
 */
private boolean isValidRTCP(RawPacket pkt){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int len=pkt.getLength();
  if (len < 4)   return false;
  int v=(buf[off] & 0xc0) >>> 6;
  if (v != 2)   return false;
  int lengthInWords=(buf[off + 2] & 0xFF) << 8 | (buf[off + 3] & 0xFF);
  int lengthInBytes=(lengthInWords + 1) * 4;
  if (len < lengthInBytes)   return false;
  return true;
}",0.978984238178634
107559,"/** 
 * Tries to find an RTP header extensions with an ID of   {@link #extensionID}in <tt>pkt</tt> and tries to replace its timestamp with one generated locally (based on   {@link System#nanoTime()}).
 * @param pkt the packet to work on.
 * @return true if and only if an RTP extension with an ID of {@link #extensionID} was found in the packet, and its value was replaced.
 */
private boolean replaceExtension(RawPacket pkt){
  if (!pkt.getExtensionBit())   return false;
  byte[] buf=pkt.getBuffer();
  int extensionOffset=pkt.getOffset();
  extensionOffset+=RawPacket.FIXED_HEADER_SIZE;
  extensionOffset+=pkt.getCsrcCount() * 4;
  if (buf.length < extensionOffset + 4) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xBE) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xDE) {
    return false;
  }
  int lengthInWords=buf[extensionOffset++] << 8 | buf[extensionOffset++];
  int lengthInBytes=4 * (1 + lengthInWords);
  int innerOffset=0;
  while (extensionOffset < buf.length && innerOffset < lengthInBytes) {
    int id=(buf[extensionOffset] & 0xf0) >> 4;
    int len=buf[extensionOffset] & 0x0f;
    if (id == extensionID) {
      if (len == 2 && extensionOffset + 3 < buf.length) {
        setTimestamp(buf,extensionOffset + 1);
        return true;
      }
 else {
        logger.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ len);
        return true;
      }
    }
 else {
      innerOffset+=1 + len + 1;
      extensionOffset+=1 + len + 1;
    }
  }
  return false;
}","/** 
 * Tries to find an RTP header extensions with an ID of   {@link #extensionID}in <tt>pkt</tt> and tries to replace its timestamp with one generated locally (based on   {@link System#nanoTime()}).
 * @param pkt the packet to work on.
 * @return true if and only if an RTP extension with an ID of {@link #extensionID} was found in the packet, and its value was replaced.
 */
private boolean replaceExtension(RawPacket pkt){
  if (!pkt.getExtensionBit())   return false;
  byte[] buf=pkt.getBuffer();
  int extensionOffset=pkt.getOffset();
  extensionOffset+=RawPacket.FIXED_HEADER_SIZE;
  extensionOffset+=pkt.getCsrcCount() * 4;
  if (buf.length < extensionOffset + 4) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xBE) {
    return false;
  }
  if (buf[extensionOffset++] != (byte)0xDE) {
    return false;
  }
  int lengthInWords=(buf[extensionOffset++] & 0xFF) << 8 | (buf[extensionOffset++] & 0xFF);
  int lengthInBytes=4 * (1 + lengthInWords);
  int innerOffset=0;
  while (extensionOffset < buf.length && innerOffset < lengthInBytes) {
    int id=(buf[extensionOffset] & 0xf0) >> 4;
    int len=buf[extensionOffset] & 0x0f;
    if (id == extensionID) {
      if (len == 2 && extensionOffset + 3 < buf.length) {
        setTimestamp(buf,extensionOffset + 1);
        return true;
      }
 else {
        logger.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ len);
        return true;
      }
    }
 else {
      innerOffset+=1 + len + 1;
      extensionOffset+=1 + len + 1;
    }
  }
  return false;
}",0.994155844155844
107560,"/** 
 * Transforms the RFC2198 packet <tt>pkt</tt> into an array of RTP packets.
 */
private RawPacket[] reverseTransformSingle(RawPacket pkt,RawPacket[] pkts){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int hdrLen=pkt.getHeaderLength();
  int idx=off + hdrLen;
  int pktCount=1;
  while ((buf[idx] & 0x80) != 0) {
    pktCount++;
    idx+=4;
  }
  idx=off + hdrLen;
  if (pkts.length < pktCount)   pkts=new RawPacket[pktCount];
  if (pktCount != 1 && logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  int payloadOffset=idx + (pktCount - 1) * 4 + 1;
  for (int i=1; i < pktCount; i++) {
    int blockLen=(buf[idx + 2] & 0x03) << 8 | (buf[idx + 3]);
    byte[] newBuf=new byte[hdrLen + blockLen];
    System.arraycopy(buf,payloadOffset,newBuf,0,hdrLen + blockLen);
    if (pkts[i] == null)     pkts[i]=new RawPacket();
    pkts[i].setBuffer(newBuf);
    pkts[i].setOffset(0);
    pkts[i].setLength(hdrLen + blockLen);
    pkts[i].setPayloadType((byte)(buf[idx] & 0xf7));
    idx+=4;
    payloadOffset+=blockLen;
  }
  pkt.setPayloadType((byte)(buf[idx] & 0x7f));
  System.arraycopy(buf,off,buf,off + payloadOffset - hdrLen,hdrLen);
  pkt.setOffset(off + payloadOffset - hdrLen);
  pkt.setLength(pkt.getLength() - (payloadOffset - hdrLen));
  pkts[0]=pkt;
  return pkts;
}","/** 
 * Transforms the RFC2198 packet <tt>pkt</tt> into an array of RTP packets.
 */
private RawPacket[] reverseTransformSingle(RawPacket pkt,RawPacket[] pkts){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int hdrLen=pkt.getHeaderLength();
  int idx=off + hdrLen;
  int pktCount=1;
  while ((buf[idx] & 0x80) != 0) {
    pktCount++;
    idx+=4;
  }
  idx=off + hdrLen;
  if (pkts.length < pktCount)   pkts=new RawPacket[pktCount];
  if (pktCount != 1 && logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  int payloadOffset=idx + (pktCount - 1) * 4 + 1;
  for (int i=1; i < pktCount; i++) {
    int blockLen=(buf[idx + 2] & 0x03) << 8 | (buf[idx + 3] & 0xFF);
    byte[] newBuf=new byte[hdrLen + blockLen];
    System.arraycopy(buf,payloadOffset,newBuf,0,hdrLen + blockLen);
    if (pkts[i] == null)     pkts[i]=new RawPacket();
    pkts[i].setBuffer(newBuf);
    pkts[i].setOffset(0);
    pkts[i].setLength(hdrLen + blockLen);
    pkts[i].setPayloadType((byte)(buf[idx] & 0xf7));
    idx+=4;
    payloadOffset+=blockLen;
  }
  pkt.setPayloadType((byte)(buf[idx] & 0x7f));
  System.arraycopy(buf,off,buf,off + payloadOffset - hdrLen,hdrLen);
  pkt.setOffset(off + payloadOffset - hdrLen);
  pkt.setLength(pkt.getLength() - (payloadOffset - hdrLen));
  pkts[0]=pkt;
  return pkts;
}",0.99730665640631
107561,"/** 
 * Returns the length in bytes of the RTCP packet contained in <tt>buf</tt> at offset <tt>off</tt>. Assumes that <tt>buf</tt> is valid at least until index <tt>off</tt>+3.
 * @return the length in bytes of the RTCP packet contained in <tt>buf</tt>at offset <tt>off</tt>.
 */
private static int getLengthInBytes(byte[] buf,int off,int len){
  if (len < 4)   return -1;
  int v=(buf[off] & 0xc0) >>> 6;
  if (RTCPHeader.VERSION != v)   return -1;
  int lengthInWords=(buf[off + 2] << 8) + buf[off + 3];
  int lengthInBytes=(lengthInWords + 1) * 4;
  if (len < lengthInBytes)   return -1;
  return lengthInBytes;
}","/** 
 * Returns the length in bytes of the RTCP packet contained in <tt>buf</tt> at offset <tt>off</tt>. Assumes that <tt>buf</tt> is valid at least until index <tt>off</tt>+3.
 * @return the length in bytes of the RTCP packet contained in <tt>buf</tt>at offset <tt>off</tt>.
 */
private static int getLengthInBytes(byte[] buf,int off,int len){
  if (len < 4)   return -1;
  int v=(buf[off] & 0xc0) >>> 6;
  if (RTCPHeader.VERSION != v)   return -1;
  int lengthInWords=((buf[off + 2] & 0xFF) << 8) | (buf[off + 3] & 0xFF);
  int lengthInBytes=(lengthInWords + 1) * 4;
  if (len < lengthInBytes)   return -1;
  return lengthInBytes;
}",0.9824
107562,"public static SctpNotification parse(byte[] data){
  int type=data[0] | (data[1] << 8);
switch (type) {
case SCTP_ASSOC_CHANGE:
    return new AssociationChange(data);
case SCTP_PEER_ADDR_CHANGE:
  return new PeerAddressChange(data);
case SCTP_SEND_FAILED:
return new SendFailed(data);
case SCTP_SENDER_DRY_EVENT:
return new SenderDry(data);
case SCTP_STREAM_RESET_EVENT:
return new StreamReset(data);
default :
return new SctpNotification(data);
}
}","public static SctpNotification parse(byte[] data){
  int type=(data[1] & 0xFF) << 8 | (data[0] & 0xFF);
switch (type) {
case SCTP_ASSOC_CHANGE:
    return new AssociationChange(data);
case SCTP_PEER_ADDR_CHANGE:
  return new PeerAddressChange(data);
case SCTP_SEND_FAILED:
return new SendFailed(data);
case SCTP_SENDER_DRY_EVENT:
return new SenderDry(data);
case SCTP_STREAM_RESET_EVENT:
return new StreamReset(data);
default :
return new SctpNotification(data);
}
}",0.9497816593886464
107563,"/** 
 * Computes the RTT with the data (LSR and DLSR) contained in the last RTCP Sender Report (RTCP feedback). This RTT computation is based on RFC3550, section 6.4.1, subsection ""delay since last SR (DLSR): 32 bits"".
 * @param feedback The last RTCP feedback received by the MediaStream.
 * @return The RTT in milliseconds, or -1 if the RTT is not computable.
 */
private long computeRTTInMs(RTCPFeedback feedback){
  long now=System.currentTimeMillis();
  long lsr=feedback.getLSR();
  long dlsr=feedback.getDLSR();
  int rtt=RecvSSRCInfo.getRoundTripDelay(now,lsr,dlsr);
  if ((rtt >= 65536) && logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + mediaStreamImpl.getName() + ""String_Node_Str""+ rtt+ ""String_Node_Str""+ now+ ""String_Node_Str""+ lsr+ ""String_Node_Str""+ dlsr);
  }
  return rtt;
}","/** 
 * Computes the RTT with the data (LSR and DLSR) contained in the last RTCP Sender Report (RTCP feedback). This RTT computation is based on RFC3550, section 6.4.1, subsection ""delay since last SR (DLSR): 32 bits"".
 * @param feedback The last RTCP feedback received by the MediaStream.
 * @return The RTT in milliseconds, or -1 if the RTT is not computable.
 */
private int computeRTTInMs(RTCPFeedback feedback){
  long now=System.currentTimeMillis();
  long lsr=feedback.getLSR();
  long dlsr=feedback.getDLSR();
  int rtt=-1;
  if (lsr > 0 && dlsr > 0) {
    now=maybeEstimateRemoteClock(feedback.getSSRC(),now);
    rtt=getRoundTripDelay(now,lsr,dlsr);
  }
  if (rtt < 0 || rtt >= 3000) {
    logger.info(""String_Node_Str"" + mediaStreamImpl.getName() + ""String_Node_Str""+ rtt+ ""String_Node_Str""+ now+ ""String_Node_Str""+ lsr+ ""String_Node_Str""+ dlsr);
    rtt=-1;
  }
  return rtt;
}",0.8896755162241888
107564,"/** 
 * Updates this stream stats with the new feedback received.
 * @param feedback The last RTCP feedback received by the MediaStream.
 */
private void updateNewReceivedFeedback(RTCPFeedback feedback){
  StreamDirection streamDirection=StreamDirection.UPLOAD;
  updateJitterRTPTimestampUnits(feedback,streamDirection);
  long uploadNewNbRecv=feedback.getXtndSeqNum();
  nbPacketsLostUpload=feedback.getNumLost();
  long newNbLost=nbPacketsLostUpload - nbLost[streamDirection.ordinal()];
  long nbSteps=uploadNewNbRecv - uploadFeedbackNbPackets;
  updateNbLoss(streamDirection,newNbLost,nbSteps);
  uploadFeedbackNbPackets=uploadNewNbRecv;
  setRttMs(computeRTTInMs(feedback));
}","/** 
 * Updates this stream stats with the new feedback received.
 * @param feedback The last RTCP feedback received by the MediaStream.
 */
private void updateNewReceivedFeedback(RTCPFeedback feedback){
  StreamDirection streamDirection=StreamDirection.UPLOAD;
  updateJitterRTPTimestampUnits(feedback,streamDirection);
  long uploadNewNbRecv=feedback.getXtndSeqNum();
  nbPacketsLostUpload=feedback.getNumLost();
  long newNbLost=nbPacketsLostUpload - nbLost[streamDirection.ordinal()];
  long nbSteps=uploadNewNbRecv - uploadFeedbackNbPackets;
  updateNbLoss(streamDirection,newNbLost,nbSteps);
  uploadFeedbackNbPackets=uploadNewNbRecv;
  int rtt=computeRTTInMs(feedback);
  if (rtt >= 0) {
    setRttMs(rtt);
  }
}",0.9549678341672624
107565,"/** 
 * Makes <tt>RTCPSRPacket</tt>s for all the RTP streams that we're sending.
 * @return a <tt>List</tt> of <tt>RTCPSRPacket</tt> for all the RTP streamsthat we're sending.
 */
private List<RTCPSRPacket> makeSRs(long time){
  List<RTCPSRPacket> srs=new ArrayList<>();
  for (  RTPStatsEntry rtpStatsEntry : rtpStatsMap.values()) {
    int ssrc=rtpStatsEntry.getSsrc();
    RemoteClock estimate=remoteClockEstimator.estimate(ssrc,time);
    if (estimate == null) {
      continue;
    }
    RTCPSRPacket sr=new RTCPSRPacket(ssrc,MIN_RTCP_REPORT_BLOCKS_ARRAY);
    long estimatedRemoteTime=estimate.getRemoteTime();
    long secs=estimatedRemoteTime / 1000L;
    double fraction=(estimatedRemoteTime - secs * 1000L) / 1000D;
    sr.ntptimestamplsw=(int)(fraction * 4294967296D);
    sr.ntptimestampmsw=secs;
    sr.rtptimestamp=estimate.getRtpTimestamp();
    sr.packetcount=rtpStatsEntry.getPacketsSent();
    sr.octetcount=rtpStatsEntry.getBytesSent();
    srs.add(sr);
  }
  return srs;
}","/** 
 * Makes <tt>RTCPSRPacket</tt>s for all the RTP streams that we're sending.
 * @return a <tt>List</tt> of <tt>RTCPSRPacket</tt> for all the RTP streamsthat we're sending.
 */
private List<RTCPSRPacket> makeSRs(long time){
  List<RTCPSRPacket> srs=new ArrayList<>();
  for (  RTPStatsEntry rtpStatsEntry : rtpStatsMap.values()) {
    int ssrc=rtpStatsEntry.getSsrc();
    RemoteClock estimate=remoteClockEstimator.estimate(ssrc,time);
    if (estimate == null) {
      continue;
    }
    RTCPSRPacket sr=new RTCPSRPacket(ssrc,MIN_RTCP_REPORT_BLOCKS_ARRAY);
    long estimatedRemoteTime=estimate.getRemoteTime();
    long ntpTime=TimeUtils.toNtpTime(estimatedRemoteTime);
    sr.ntptimestampmsw=TimeUtils.getMsw(ntpTime);
    sr.ntptimestamplsw=TimeUtils.getLsw(ntpTime);
    sr.rtptimestamp=estimate.getRtpTimestamp();
    sr.packetcount=rtpStatsEntry.getPacketsSent();
    sr.octetcount=rtpStatsEntry.getBytesSent();
    srs.add(sr);
  }
  return srs;
}",0.8539210661199385
107566,"/** 
 * Ctor.
 * @param ssrc
 * @param remoteTime
 * @param rtpTimestamp
 * @param frequencyHz
 */
ReceivedRemoteClock(int ssrc,long remoteTime,int rtpTimestamp,int frequencyHz){
  this.ssrc=ssrc;
  this.remoteClock=new RemoteClock(remoteTime,rtpTimestamp);
  this.frequencyHz=frequencyHz;
  this.receivedTime=System.currentTimeMillis();
}","/** 
 * Ctor.
 * @param ssrc
 * @param remoteTime the remote time in milliseconds since the epoch
 * @param rtpTimestamp the RTP timestamp corresponding to<tt>remoteTime</tt>.
 * @param frequencyHz the RTP clock rate.
 */
ReceivedRemoteClock(int ssrc,long remoteTime,int rtpTimestamp,int frequencyHz){
  this.ssrc=ssrc;
  this.remoteClock=new RemoteClock(remoteTime,rtpTimestamp);
  this.frequencyHz=frequencyHz;
  this.receivedTime=System.currentTimeMillis();
}",0.846441947565543
107567,"/** 
 * Inspect an <tt>RTCPCompoundPacket</tt> and build-up the state for future estimations.
 * @param pkt
 */
public void update(RTCPCompoundPacket pkt){
  if (pkt == null || pkt.packets == null || pkt.packets.length == 0) {
    return;
  }
  for (  RTCPPacket rtcpPacket : pkt.packets) {
switch (rtcpPacket.type) {
case RTCPPacket.SR:
      RTCPSRPacket srPacket=(RTCPSRPacket)rtcpPacket;
    int ssrc=srPacket.ssrc;
  long fraction=Math.round(1000D * srPacket.ntptimestamplsw / 0x100000000L);
long msb=srPacket.ntptimestampmsw & 0x80000000L;
long remoteTime=(msb == 0) ? MSB0_BASE_TIME + (srPacket.ntptimestampmsw * 1000) + fraction : MSB1_BASE_TIME + (srPacket.ntptimestampmsw * 1000) + fraction;
int frequencyHz=-1;
if (receivedClocks.containsKey(ssrc)) {
ReceivedRemoteClock oldStats=receivedClocks.get(ssrc);
RemoteClock oldRemoteClock=oldStats.getRemoteClock();
frequencyHz=Math.round((float)(((int)srPacket.rtptimestamp - oldRemoteClock.getRtpTimestamp()) & 0xffffffffl) / (remoteTime - oldRemoteClock.getRemoteTime()));
}
receivedClocks.put(ssrc,new ReceivedRemoteClock(ssrc,remoteTime,(int)srPacket.rtptimestamp,frequencyHz));
break;
case RTCPPacket.SDES:
break;
}
}
}","/** 
 * Inspect an <tt>RTCPCompoundPacket</tt> and build-up the state for future estimations.
 * @param pkt
 */
public void update(RTCPCompoundPacket pkt){
  if (pkt == null || pkt.packets == null || pkt.packets.length == 0) {
    return;
  }
  for (  RTCPPacket rtcpPacket : pkt.packets) {
switch (rtcpPacket.type) {
case RTCPPacket.SR:
      RTCPSRPacket sr=(RTCPSRPacket)rtcpPacket;
    int ssrc=sr.ssrc;
  long ntpTime=TimeUtils.constuctNtp(sr.ntptimestampmsw,sr.ntptimestamplsw);
long remoteTime=TimeUtils.getTime(ntpTime);
int frequencyHz=-1;
if (receivedClocks.containsKey(ssrc)) {
ReceivedRemoteClock oldStats=receivedClocks.get(ssrc);
RemoteClock oldRemoteClock=oldStats.getRemoteClock();
frequencyHz=Math.round((float)(((int)sr.rtptimestamp - oldRemoteClock.getRtpTimestamp()) & 0xffffffffl) / (remoteTime - oldRemoteClock.getRemoteTime()));
}
receivedClocks.put(ssrc,new ReceivedRemoteClock(ssrc,remoteTime,(int)sr.rtptimestamp,frequencyHz));
break;
case RTCPPacket.SDES:
break;
}
}
}",0.8220689655172414
107568,"/** 
 * Ctor.
 * @param ssrcRewritingEngine the owner of this instance.
 * @param ssrcTarget the target SSRC for this <tt>SsrcGroupRewriter</tt>.
 */
public SsrcGroupRewriter(SsrcRewritingEngine ssrcRewritingEngine,Integer ssrcTarget){
  this.ssrcRewritingEngine=ssrcRewritingEngine;
  this.ssrcTarget=ssrcTarget;
  this.currentExtendedSeqnumBase=RANDOM.nextInt(0x10000);
}","/** 
 * Ctor.
 * @param ssrcRewritingEngine the owner of this instance.
 * @param ssrcTarget the target SSRC for this <tt>SsrcGroupRewriter</tt>.
 */
public SsrcGroupRewriter(SsrcRewritingEngine ssrcRewritingEngine,Integer ssrcTarget,int seqnumBase){
  this.ssrcRewritingEngine=ssrcRewritingEngine;
  this.ssrcTarget=ssrcTarget;
  this.currentExtendedSeqnumBase=seqnumBase;
}",0.9358288770053476
107569,"@Override public RawPacket transform(RawPacket pkt){
  if (pkt == null) {
    return pkt;
  }
  if (!initialized) {
    return pkt;
  }
  int ssrc=pkt.getSSRC();
  SsrcGroupRewriter ssrcGroupRewriter=origin2rewriter.get(ssrc);
  if (ssrcGroupRewriter == null) {
    return pkt;
  }
 else {
    return ssrcGroupRewriter.rewriteRTP(pkt);
  }
}","@Override public RawPacket transform(RawPacket pkt){
  if (pkt == null) {
    return pkt;
  }
  seqnumBaseKeeper.update(pkt);
  if (!initialized) {
    return pkt;
  }
  int ssrc=pkt.getSSRC();
  SsrcGroupRewriter ssrcGroupRewriter=origin2rewriter.get(ssrc);
  if (ssrcGroupRewriter == null) {
    return pkt;
  }
 else {
    return ssrcGroupRewriter.rewriteRTP(pkt);
  }
}",0.9551820728291316
107570,"/** 
 * Sets up the engine so that ssrcOrig is rewritten to ssrcTarget.
 * @param ssrcOrig
 * @param ssrcTarget
 */
private synchronized void map(Integer ssrcOrig,Integer ssrcTarget){
  if (ssrcOrig == null) {
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (ssrcOrig & 0xffffffffl) + ""String_Node_Str""+ (ssrcTarget & 0xffffffffl));
  }
  if (ssrcTarget != null && ssrcTarget != UNMAP_SSRC) {
    RefCount<SsrcGroupRewriter> refCount=target2rewriter.get(ssrcTarget);
    if (refCount == null) {
      refCount=new RefCount<>(new SsrcGroupRewriter(this,ssrcTarget));
      target2rewriter.put(ssrcTarget,refCount);
    }
    SsrcGroupRewriter oldSsrcGroupRewriter=origin2rewriter.put(ssrcOrig,refCount.getReferent());
    if (oldSsrcGroupRewriter == null) {
      refCount.increase();
    }
 else {
    }
  }
 else {
    SsrcGroupRewriter ssrcGroupRewriter=origin2rewriter.remove(ssrcOrig);
    if (ssrcGroupRewriter != null) {
      RefCount<SsrcGroupRewriter> refCount=target2rewriter.get(ssrcGroupRewriter.getSSRCTarget());
      refCount.decrease();
    }
  }
}","/** 
 * Sets up the engine so that ssrcOrig is rewritten to ssrcTarget.
 * @param ssrcOrig
 * @param ssrcTarget
 */
private synchronized void map(Integer ssrcOrig,Integer ssrcTarget){
  if (ssrcOrig == null) {
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (ssrcOrig & 0xffffffffl) + ""String_Node_Str""+ (ssrcTarget & 0xffffffffl));
  }
  if (ssrcTarget != null && ssrcTarget != UNMAP_SSRC) {
    RefCount<SsrcGroupRewriter> refCount=target2rewriter.get(ssrcTarget);
    if (refCount == null) {
      refCount=new RefCount<>(seqnumBaseKeeper.createSsrcGroupRewriter(this,ssrcTarget));
      target2rewriter.put(ssrcTarget,refCount);
    }
    SsrcGroupRewriter oldSsrcGroupRewriter=origin2rewriter.put(ssrcOrig,refCount.getReferent());
    if (oldSsrcGroupRewriter == null) {
      refCount.increase();
    }
 else {
    }
  }
 else {
    SsrcGroupRewriter ssrcGroupRewriter=origin2rewriter.remove(ssrcOrig);
    if (ssrcGroupRewriter != null) {
      RefCount<SsrcGroupRewriter> refCount=target2rewriter.get(ssrcGroupRewriter.getSSRCTarget());
      refCount.decrease();
    }
  }
}",0.9878542510121456
107571,"/** 
 * @param ssOrigSeqnum
 * @return
 */
int extendOriginalSequenceNumber(short ssOrigSeqnum){
  ExtendedSequenceNumberInterval mostRecentInterval=currentExtendedSequenceNumberInterval;
  if (mostRecentInterval == null) {
    Map.Entry<Integer,ExtendedSequenceNumberInterval> entry=intervals.lastEntry();
    if (entry != null) {
      mostRecentInterval=entry.getValue();
    }
  }
  if (mostRecentInterval == null) {
    return ssOrigSeqnum & 0x0000ffff;
  }
  int usOriginalSequenceNumber=ssOrigSeqnum & 0x0000ffff;
  int usHighestSeenSeqnum=mostRecentInterval.extendedMaxOrig & 0x0000ffff;
  if (usOriginalSequenceNumber - usHighestSeenSeqnum > 0) {
    if (System.currentTimeMillis() - mostRecentInterval.lastSeen - RETRANSMISSIONS_FRONTIER_MS < 0) {
      if (usOriginalSequenceNumber - (usHighestSeenSeqnum + MAX_UNSIGNED_SHORT) - MEDIAN_UNSIGNED_SHORT > 0) {
        return ((((usHighestSeenSeqnum & 0xffff0000) >> 4) - 1) << 4) | (usOriginalSequenceNumber & 0x0000ffff);
      }
 else {
        return (usHighestSeenSeqnum & 0xffff0000) | (usOriginalSequenceNumber & 0x0000ffff);
      }
    }
 else {
      return ((((usHighestSeenSeqnum & 0xffff0000) >> 4) + 1) << 4) | (usOriginalSequenceNumber & 0x0000ffff);
    }
  }
 else {
    if (System.currentTimeMillis() - mostRecentInterval.lastSeen - RETRANSMISSIONS_FRONTIER_MS < 0) {
      if ((usHighestSeenSeqnum - usOriginalSequenceNumber) - MEDIAN_UNSIGNED_SHORT > 0) {
        return ((((usHighestSeenSeqnum & 0xffff0000) >> 4) + 1) << 4) | (usOriginalSequenceNumber & 0x0000ffff);
      }
 else {
        return (usHighestSeenSeqnum & 0xffff0000) | (usOriginalSequenceNumber & 0x0000ffff);
      }
    }
 else {
      return ((((usHighestSeenSeqnum & 0xffff0000) >> 4) + 1) << 4) | (usOriginalSequenceNumber & 0x0000ffff);
    }
  }
}","/** 
 * @param ssOrigSeqnum
 * @return
 */
int extendOriginalSequenceNumber(short ssOrigSeqnum){
  ExtendedSequenceNumberInterval mostRecentInterval=currentExtendedSequenceNumberInterval;
  if (mostRecentInterval == null) {
    Map.Entry<Integer,ExtendedSequenceNumberInterval> entry=intervals.lastEntry();
    if (entry != null) {
      mostRecentInterval=entry.getValue();
    }
  }
  int usOrigSeqnum=ssOrigSeqnum & 0x0000ffff;
  if (mostRecentInterval == null) {
    return usOrigSeqnum;
  }
  int extendedMaxOrig=mostRecentInterval.extendedMaxOrig;
  int usMaxSeqnum=extendedMaxOrig & 0x0000ffff;
  int cycles=extendedMaxOrig & 0xffff0000;
  int delta=usOrigSeqnum - usMaxSeqnum;
  boolean inRetransmissionFrontier=System.currentTimeMillis() - mostRecentInterval.lastSeen < RETRANSMISSION_FRONTIER_MS;
  if (delta > 0) {
    if (inRetransmissionFrontier) {
      if (delta > MEDIAN_UNSIGNED_SHORT) {
        cycles-=0x10000;
      }
 else {
      }
    }
 else {
      cycles+=0x10000;
    }
  }
 else {
    if (inRetransmissionFrontier) {
      if (-delta > MEDIAN_UNSIGNED_SHORT) {
        cycles+=0x10000;
      }
 else {
      }
    }
 else {
      cycles+=0x10000;
    }
  }
  return usOrigSeqnum + cycles;
}",0.414181577203446
107572,"/** 
 */
public RawPacket rewriteRTP(RawPacket pkt){
  short seqnum=(short)pkt.getSequenceNumber();
  int origExtendedSequenceNumber=extendOriginalSequenceNumber(seqnum);
  ExtendedSequenceNumberInterval retransmissionInterval=findRetransmissionInterval(origExtendedSequenceNumber);
  if (retransmissionInterval != null) {
    logDebug(""String_Node_Str"" + (seqnum & 0xffff) + ""String_Node_Str""+ (pkt.getSSRC() & 0xffffffffl)+ ""String_Node_Str"");
    return retransmissionInterval.rewriteRTP(pkt);
  }
  if (currentExtendedSequenceNumberInterval == null) {
    currentExtendedSequenceNumberInterval=new ExtendedSequenceNumberInterval(this,origExtendedSequenceNumber,ssrcGroupRewriter.currentExtendedSeqnumBase);
    currentExtendedSequenceNumberInterval.lastSeen=System.currentTimeMillis();
  }
 else {
    currentExtendedSequenceNumberInterval.extendedMaxOrig=origExtendedSequenceNumber;
    currentExtendedSequenceNumberInterval.maxTimestamp=pkt.getTimestamp();
    currentExtendedSequenceNumberInterval.lastSeen=System.currentTimeMillis();
  }
  if (SsrcRewritingEngine.logger.isDebugEnabled()) {
    long maxTimestamp=ssrcGroupRewriter.maxTimestamp;
    if (pkt.getTimestamp() < maxTimestamp) {
      logDebug(""String_Node_Str"");
      pkt.setTimestamp(maxTimestamp + 1);
    }
  }
  return currentExtendedSequenceNumberInterval.rewriteRTP(pkt);
}","/** 
 * @param pkt
 */
public RawPacket rewriteRTP(RawPacket pkt){
  short seqnum=(short)pkt.getSequenceNumber();
  int origExtendedSequenceNumber=extendOriginalSequenceNumber(seqnum);
  ExtendedSequenceNumberInterval retransmissionInterval=findRetransmissionInterval(origExtendedSequenceNumber);
  boolean debug=SsrcRewritingEngine.logger.isDebugEnabled();
  if (retransmissionInterval != null) {
    if (debug) {
      logDebug(""String_Node_Str"" + (seqnum & 0xffff) + ""String_Node_Str""+ (pkt.getSSRC() & 0xffffffffl)+ ""String_Node_Str"");
    }
    return retransmissionInterval.rewriteRTP(pkt);
  }
  long timestamp=pkt.getTimestamp();
  if (currentExtendedSequenceNumberInterval == null) {
    currentExtendedSequenceNumberInterval=new ExtendedSequenceNumberInterval(this,origExtendedSequenceNumber,ssrcGroupRewriter.currentExtendedSeqnumBase);
  }
 else {
    currentExtendedSequenceNumberInterval.extendedMaxOrig=origExtendedSequenceNumber;
    currentExtendedSequenceNumberInterval.maxTimestamp=timestamp;
  }
  currentExtendedSequenceNumberInterval.lastSeen=System.currentTimeMillis();
  long maxTimestamp=ssrcGroupRewriter.maxTimestamp;
  if (timestamp < maxTimestamp) {
    if (debug) {
      logDebug(""String_Node_Str"");
    }
    pkt.setTimestamp(maxTimestamp + 1);
  }
  return currentExtendedSequenceNumberInterval.rewriteRTP(pkt);
}",0.6543026706231454
107573,"/** 
 * Runs a loop which checks for any pending requests to be sent, sends them and then waits until another request is available or due.
 */
private void runInRequesterThread(){
  if (Thread.currentThread() != thread)   return;
  Map<Long,Set<Integer>> packetsToRequest=new HashMap<>();
  while (true) {
    if (closed)     break;
synchronized (thread) {
      long nextRequestAt=-1;
synchronized (requesters) {
        for (        Requester requester : requesters.values())         if (requester.nextRequestAt != -1)         if (nextRequestAt == -1 || nextRequestAt > requester.nextRequestAt) {
          nextRequestAt=requester.nextRequestAt;
        }
      }
      long now=System.currentTimeMillis();
      if (nextRequestAt == -1 || nextRequestAt - now > 0) {
        try {
          if (nextRequestAt == -1)           thread.wait();
 else           thread.wait(nextRequestAt - now);
        }
 catch (        InterruptedException ie) {
          break;
        }
      }
    }
synchronized (requesters) {
      for (      Map.Entry<Long,Requester> entry : requesters.entrySet()) {
        Requester requester=entry.getValue();
        Set<Integer> missingPackets=requester.getMissing();
        if (missingPackets != null && !missingPackets.isEmpty()) {
          packetsToRequest.put(requester.ssrc,missingPackets);
        }
      }
    }
    for (    Map.Entry<Long,Set<Integer>> entry : packetsToRequest.entrySet()) {
      long sourceSsrc=entry.getKey();
      NACKPacket nack=new NACKPacket(senderSsrc,sourceSsrc,entry.getValue());
      RawPacket pkt;
      try {
        pkt=nack.toRawPacket();
      }
 catch (      IOException ioe) {
        pkt=null;
        logger.warn(""String_Node_Str"" + ioe);
      }
      if (pkt != null)       try {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + nack);
        }
        stream.injectPacket(pkt,false,null);
      }
 catch (      TransmissionFailedException e) {
        logger.warn(""String_Node_Str"" + e);
      }
    }
  }
  packetsToRequest.clear();
}","/** 
 * Runs a loop which checks for any pending requests to be sent, sends them and then waits until another request is available or due.
 */
private void runInRequesterThread(){
  if (Thread.currentThread() != thread)   return;
  Map<Long,Set<Integer>> packetsToRequest=new HashMap<>();
  while (true) {
    if (closed)     break;
synchronized (thread) {
      long nextRequestAt=-1;
synchronized (requesters) {
        for (        Requester requester : requesters.values())         if (requester.nextRequestAt != -1)         if (nextRequestAt == -1 || nextRequestAt > requester.nextRequestAt) {
          nextRequestAt=requester.nextRequestAt;
        }
      }
      long now=System.currentTimeMillis();
      if (nextRequestAt == -1 || nextRequestAt - now > 0) {
        try {
          if (nextRequestAt == -1)           thread.wait();
 else           thread.wait(nextRequestAt - now);
        }
 catch (        InterruptedException ie) {
          break;
        }
      }
    }
synchronized (requesters) {
      for (      Map.Entry<Long,Requester> entry : requesters.entrySet()) {
        Requester requester=entry.getValue();
        Set<Integer> missingPackets=requester.getMissing();
        if (missingPackets != null && !missingPackets.isEmpty()) {
          packetsToRequest.put(requester.ssrc,missingPackets);
        }
      }
    }
    for (    Map.Entry<Long,Set<Integer>> entry : packetsToRequest.entrySet()) {
      long sourceSsrc=entry.getKey();
      NACKPacket nack=new NACKPacket(senderSsrc,sourceSsrc,entry.getValue());
      RawPacket pkt;
      try {
        pkt=nack.toRawPacket();
      }
 catch (      IOException ioe) {
        pkt=null;
        logger.warn(""String_Node_Str"" + ioe);
      }
      if (pkt != null)       try {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + nack);
        }
        stream.injectPacket(pkt,false,null);
      }
 catch (      TransmissionFailedException e) {
        logger.warn(""String_Node_Str"" + e);
      }
    }
    packetsToRequest.clear();
  }
}",0.9858674463937622
107574,"/** 
 * Transforms the RFC2198 packet <tt>pkt</tt> into an array of RTP packets.
 */
private RawPacket[] reverseTransformSingle(RawPacket pkt,RawPacket[] pkts){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int hdrLen=pkt.getHeaderLength();
  int idx=off + hdrLen;
  int pktCount=1;
  while ((buf[idx] & 0x80) != 0) {
    pktCount++;
    idx+=4;
  }
  idx=off + hdrLen;
  if (pkts.length < pktCount)   pkts=new RawPacket[pktCount];
  if (pktCount != 1 && logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  int payloadOffset=idx + (pktCount - 1) * 4 + 1;
  for (int i=1; i < pktCount; i++) {
    int blockLen=(buf[idx + 2] & 0x03) << 8 | (buf[idx + 3]);
    byte[] newBuf=new byte[hdrLen + blockLen];
    System.arraycopy(buf,payloadOffset,newBuf,0,hdrLen + blockLen);
    if (pkts[i] == null)     pkts[i]=new RawPacket();
    pkts[i].setBuffer(newBuf);
    pkts[i].setOffset(0);
    pkts[i].setLength(hdrLen + blockLen);
    pkts[i].setPayloadType((byte)(buf[idx] & 0xf7));
    idx+=4;
    payloadOffset+=blockLen;
  }
  pkt.setPayloadType((byte)(buf[idx] & 0x7f));
  System.arraycopy(buf,payloadOffset,buf,hdrLen,pkt.getLength() - payloadOffset);
  pkt.setLength(pkt.getLength() - (payloadOffset - hdrLen));
  pkts[0]=pkt;
  return pkts;
}","/** 
 * Transforms the RFC2198 packet <tt>pkt</tt> into an array of RTP packets.
 */
private RawPacket[] reverseTransformSingle(RawPacket pkt,RawPacket[] pkts){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int hdrLen=pkt.getHeaderLength();
  int idx=off + hdrLen;
  int pktCount=1;
  while ((buf[idx] & 0x80) != 0) {
    pktCount++;
    idx+=4;
  }
  idx=off + hdrLen;
  if (pkts.length < pktCount)   pkts=new RawPacket[pktCount];
  if (pktCount != 1 && logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  int payloadOffset=idx + (pktCount - 1) * 4 + 1;
  for (int i=1; i < pktCount; i++) {
    int blockLen=(buf[idx + 2] & 0x03) << 8 | (buf[idx + 3]);
    byte[] newBuf=new byte[hdrLen + blockLen];
    System.arraycopy(buf,payloadOffset,newBuf,0,hdrLen + blockLen);
    if (pkts[i] == null)     pkts[i]=new RawPacket();
    pkts[i].setBuffer(newBuf);
    pkts[i].setOffset(0);
    pkts[i].setLength(hdrLen + blockLen);
    pkts[i].setPayloadType((byte)(buf[idx] & 0xf7));
    idx+=4;
    payloadOffset+=blockLen;
  }
  pkt.setPayloadType((byte)(buf[idx] & 0x7f));
  System.arraycopy(buf,off,buf,off + payloadOffset - hdrLen,hdrLen);
  pkt.setOffset(off + payloadOffset - hdrLen);
  pkt.setLength(pkt.getLength() - (payloadOffset - hdrLen));
  pkts[0]=pkt;
  return pkts;
}",0.9265050820953872
107575,"/** 
 * Gets the set of sequence numbers reported lost in this NACK packet.
 * @return
 */
synchronized public Collection<Integer> getLostPackets(){
  if (lostPackets != null)   return lostPackets;
  lostPackets=new LinkedList<Integer>();
  for (int i=0; i < (fci.length / 4); i++) {
    int pid=fci[i * 4 + 0] << 8 | fci[i * 4 + 1];
    lostPackets.add(pid);
    for (int j=0; j < 8; j++)     if (0 != (fci[i * 4 + 2] & (1 << j)))     lostPackets.add((pid + 1 + 8+ j) % (1 << 16));
    for (int j=0; j < 8; j++)     if (0 != (fci[i * 4 + 3] & (1 << j)))     lostPackets.add((pid + 1 + j) % (1 << 16));
  }
  return lostPackets;
}","/** 
 * Gets the set of sequence numbers reported lost in this NACK packet.
 * @return
 */
synchronized public Collection<Integer> getLostPackets(){
  if (lostPackets != null)   return lostPackets;
  lostPackets=new LinkedList<Integer>();
  if (fci != null) {
    for (int i=0; i < (fci.length / 4); i++) {
      int pid=(0xFF & fci[i * 4 + 0]) << 8 | (0xFF & fci[i * 4 + 1]);
      lostPackets.add(pid);
      for (int j=0; j < 8; j++)       if (0 != (fci[i * 4 + 2] & (1 << j)))       lostPackets.add((pid + 1 + 8+ j) % (1 << 16));
      for (int j=0; j < 8; j++)       if (0 != (fci[i * 4 + 3] & (1 << j)))       lostPackets.add((pid + 1 + j) % (1 << 16));
    }
  }
  return lostPackets;
}",0.9191232048374904
107576,"private RTCPFBPacket parseRTCPFBPacket(RTCPCompoundPacket base,int firstbyte,int type,int length,DataInputStream in,long senderSSRC,long sourceSSRC) throws IOException {
  RTCPFBPacket fb;
  if (firstbyte == NACKPacket.FMT)   fb=new NACKPacket(base);
 else   fb=new RTCPFBPacket(base);
  fb.fmt=firstbyte;
  fb.type=type;
  fb.senderSSRC=senderSSRC;
  fb.sourceSSRC=sourceSSRC;
  int fcilen=length - 12;
  if (fcilen != 0) {
    fb.fci=new byte[fcilen];
    in.read(fb.fci);
  }
  if (logger.isTraceEnabled()) {
    String ptStr;
    String fmtStr=null;
    String detailStr=null;
switch (fb.type) {
case RTCPFBPacket.PSFB:
      ptStr=""String_Node_Str"";
switch (fb.fmt) {
case RTCPFeedbackMessageEvent.FMT_FIR:
      fmtStr=""String_Node_Str"";
    break;
case RTCPFeedbackMessageEvent.FMT_PLI:
  fmtStr=""String_Node_Str"";
break;
case RTCPREMBPacket.FMT:
fmtStr=""String_Node_Str"";
break;
}
break;
case RTCPFBPacket.RTPFB:
ptStr=""String_Node_Str"";
switch (fb.fmt) {
case 1:
fmtStr=""String_Node_Str"";
break;
case 3:
fmtStr=""String_Node_Str"";
break;
case 4:
fmtStr=""String_Node_Str"";
StringBuilder tmmbnFciEntryStr=new StringBuilder();
for (int i=0, end=fcilen - 8; i < end; i+=8) {
int ssrc=RTPTranslatorImpl.readInt(fb.fci,i);
byte b4=fb.fci[i + 4];
int mxTbrExp=(b4 & 0xFC) >>> 2;
byte b6=fb.fci[i + 6];
int mxTbrMantissa=(((b4 & 0x1) << 16) & 0xFF0000) | ((fb.fci[i + 5] << 8) & 0x00FF00) | (b6 & 0x0000FF);
int measuredOverhead=(((b6 & 0x1) << 8) & 0xFF00) | (fb.fci[i + 7] & 0x00FF);
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(Long.toHexString(ssrc & 0xFFFFFFFFL));
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(mxTbrExp);
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(mxTbrMantissa);
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(measuredOverhead);
}
detailStr=tmmbnFciEntryStr.toString();
break;
}
break;
default :
ptStr=Integer.toString(fb.type);
break;
}
if (fmtStr == null) fmtStr=Integer.toString(fb.fmt);
if (detailStr == null) detailStr=""String_Node_Str"";
logger.trace(""String_Node_Str"" + Long.toHexString(senderSSRC) + ""String_Node_Str""+ senderSSRC+ ""String_Node_Str""+ Long.toHexString(sourceSSRC)+ ""String_Node_Str""+ sourceSSRC+ ""String_Node_Str""+ ptStr+ ""String_Node_Str""+ fmtStr+ detailStr);
}
return fb;
}","private RTCPFBPacket parseRTCPFBPacket(RTCPCompoundPacket base,int firstbyte,int type,int length,DataInputStream in,long senderSSRC,long sourceSSRC) throws IOException {
  RTCPFBPacket fb;
  if (type == RTCPFBPacket.RTPFB && firstbyte == NACKPacket.FMT)   fb=new NACKPacket(base);
 else   fb=new RTCPFBPacket(base);
  fb.fmt=firstbyte;
  fb.type=type;
  fb.senderSSRC=senderSSRC;
  fb.sourceSSRC=sourceSSRC;
  int fcilen=length - 12;
  if (fcilen != 0) {
    fb.fci=new byte[fcilen];
    in.read(fb.fci);
  }
  if (logger.isTraceEnabled()) {
    String ptStr;
    String fmtStr=null;
    String detailStr=null;
switch (fb.type) {
case RTCPFBPacket.PSFB:
      ptStr=""String_Node_Str"";
switch (fb.fmt) {
case RTCPFeedbackMessageEvent.FMT_FIR:
      fmtStr=""String_Node_Str"";
    break;
case RTCPFeedbackMessageEvent.FMT_PLI:
  fmtStr=""String_Node_Str"";
break;
case RTCPREMBPacket.FMT:
fmtStr=""String_Node_Str"";
break;
}
break;
case RTCPFBPacket.RTPFB:
ptStr=""String_Node_Str"";
switch (fb.fmt) {
case 1:
fmtStr=""String_Node_Str"";
break;
case 3:
fmtStr=""String_Node_Str"";
break;
case 4:
fmtStr=""String_Node_Str"";
StringBuilder tmmbnFciEntryStr=new StringBuilder();
for (int i=0, end=fcilen - 8; i < end; i+=8) {
int ssrc=RTPTranslatorImpl.readInt(fb.fci,i);
byte b4=fb.fci[i + 4];
int mxTbrExp=(b4 & 0xFC) >>> 2;
byte b6=fb.fci[i + 6];
int mxTbrMantissa=(((b4 & 0x1) << 16) & 0xFF0000) | ((fb.fci[i + 5] << 8) & 0x00FF00) | (b6 & 0x0000FF);
int measuredOverhead=(((b6 & 0x1) << 8) & 0xFF00) | (fb.fci[i + 7] & 0x00FF);
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(Long.toHexString(ssrc & 0xFFFFFFFFL));
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(mxTbrExp);
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(mxTbrMantissa);
tmmbnFciEntryStr.append(""String_Node_Str"");
tmmbnFciEntryStr.append(measuredOverhead);
}
detailStr=tmmbnFciEntryStr.toString();
break;
}
break;
default :
ptStr=Integer.toString(fb.type);
break;
}
if (fmtStr == null) fmtStr=Integer.toString(fb.fmt);
if (detailStr == null) detailStr=""String_Node_Str"";
logger.trace(""String_Node_Str"" + Long.toHexString(senderSSRC) + ""String_Node_Str""+ senderSSRC+ ""String_Node_Str""+ Long.toHexString(sourceSSRC)+ ""String_Node_Str""+ sourceSSRC+ ""String_Node_Str""+ ptStr+ ""String_Node_Str""+ fmtStr+ detailStr);
}
return fb;
}",0.9935511607910577
107577,"public boolean addEngine(TransformEngine engine){
  if (engine == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (this) {
    TransformEngine[] oldValue=this.engineChain;
    for (    TransformEngine e : oldValue) {
      if (engine.equals(e))       return false;
    }
    int oldLength=oldValue.length;
    TransformEngine[] newValue=new TransformEngine[oldLength + 1];
    if (oldLength != 0)     System.arraycopy(oldValue,0,newValue,0,oldLength);
    newValue[oldLength]=engine;
  }
  return true;
}","public boolean addEngine(TransformEngine engine){
  if (engine == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (this) {
    TransformEngine[] oldValue=this.engineChain;
    for (    TransformEngine e : oldValue) {
      if (engine.equals(e))       return false;
    }
    int oldLength=oldValue.length;
    TransformEngine[] newValue=new TransformEngine[oldLength + 1];
    if (oldLength != 0)     System.arraycopy(oldValue,0,newValue,0,oldLength);
    newValue[oldLength]=engine;
    this.engineChain=newValue;
  }
  return true;
}",0.97148114075437
107578,"/** 
 * Transforms the RFC2198 packet <tt>pkt</tt> into an array of RTP packets.
 */
private RawPacket[] reverseTransformSingle(RawPacket pkt,RawPacket[] pkts){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int hdrLen=pkt.getHeaderLength();
  int idx=off + hdrLen;
  int pktCount=1;
  while ((buf[idx] & 0x80) != 0) {
    pktCount++;
    idx+=4;
  }
  idx=off + hdrLen;
  if (pkts.length < pktCount)   pkts=new RawPacket[pktCount];
  if (pktCount != 1 && logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  int payloadOffset=idx + (pktCount - 1) * 4 + 1;
  for (int i=1; i < pktCount; i++) {
    int blockLen=(buf[idx + 2] & 0x03) << 8 | (buf[idx + 3]);
    byte[] newBuf=new byte[hdrLen + blockLen];
    System.arraycopy(buf,payloadOffset,newBuf,0,hdrLen + blockLen);
    if (pkts[i] == null)     pkts[i]=new RawPacket();
    pkts[i].setBuffer(newBuf);
    pkts[i].setOffset(0);
    pkts[i].setLength(hdrLen + blockLen);
    pkts[i].setPayloadType((byte)(buf[idx] & 0xf7));
    idx+=4;
    payloadOffset+=blockLen;
  }
  pkt.setPayloadType((byte)(buf[idx] & 0x7f));
  System.arraycopy(buf,off,buf,off + payloadOffset - hdrLen,hdrLen);
  pkt.setOffset(off + payloadOffset - hdrLen);
  pkt.setLength(pkt.getLength() - (payloadOffset - hdrLen));
  pkts[0]=pkt;
  return pkts;
}","/** 
 * Transforms the RFC2198 packet <tt>pkt</tt> into an array of RTP packets.
 */
private RawPacket[] reverseTransformSingle(RawPacket pkt,RawPacket[] pkts){
  byte[] buf=pkt.getBuffer();
  int off=pkt.getOffset();
  int hdrLen=pkt.getHeaderLength();
  int idx=off + hdrLen;
  int pktCount=1;
  while ((buf[idx] & 0x80) != 0) {
    pktCount++;
    idx+=4;
  }
  idx=off + hdrLen;
  if (pkts.length < pktCount)   pkts=new RawPacket[pktCount];
  if (pktCount != 1 && logger.isInfoEnabled())   logger.info(""String_Node_Str"");
  int payloadOffset=idx + (pktCount - 1) * 4 + 1;
  for (int i=1; i < pktCount; i++) {
    int blockLen=(buf[idx + 2] & 0x03) << 8 | (buf[idx + 3]);
    byte[] newBuf=new byte[hdrLen + blockLen];
    System.arraycopy(buf,payloadOffset,newBuf,0,hdrLen + blockLen);
    if (pkts[i] == null)     pkts[i]=new RawPacket();
    pkts[i].setBuffer(newBuf);
    pkts[i].setOffset(0);
    pkts[i].setLength(hdrLen + blockLen);
    pkts[i].setPayloadType((byte)(buf[idx] & 0xf7));
    idx+=4;
    payloadOffset+=blockLen;
  }
  pkt.setPayloadType((byte)(buf[idx] & 0x7f));
  System.arraycopy(buf,payloadOffset,buf,hdrLen,pkt.getLength() - payloadOffset);
  pkt.setLength(pkt.getLength() - (payloadOffset - hdrLen));
  pkts[0]=pkt;
  return pkts;
}",0.924941360437842
107579,"/** 
 * Compute Normalized Line Spectral Frequencies (NLSFs) from whitening filter coefficients. If not all roots are found, the a_Q16 coefficients are bandwidth expanded until convergence.
 * @param NLSF Normalized Line Spectral Frequencies, Q15 (0 - (2^15-1)), [d]
 * @param a_Q16 Monic whitening filter coefficients in Q16 [d]
 * @param d Filter order (must be even)
 */
static void SKP_Silk_A2NLSF(int[] NLSF,int[] a_Q16,final int d){
  int i, k, m, dd, root_ix, ffrac;
  int xlo, xhi, xmid;
  int ylo, yhi, ymid;
  int nom, den;
  int[] P=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[] Q=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[][] PQ=new int[2][];
  int[] p;
  PQ[0]=P;
  PQ[1]=Q;
  dd=d >> 1;
  SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
  p=P;
  xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
  ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
  if (ylo < 0) {
    NLSF[0]=0;
    p=Q;
    ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
    root_ix=1;
  }
 else {
    root_ix=0;
  }
  k=1;
  i=0;
  while (true) {
    if (OVERSAMPLE_COSINE_TABLE) {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k + 1) >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1]) >> 1);
    }
 else {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k];
    }
    yhi=SKP_Silk_A2NLSF_eval_poly(p,xhi,dd);
    if ((ylo <= 0 && yhi >= 0) || (ylo >= 0 && yhi <= 0)) {
      if (OVERSAMPLE_COSINE_TABLE)       ffrac=-128;
 else       ffrac=-256;
      for (m=0; m < BIN_DIV_STEPS_A2NLSF_FIX; m++) {
        xmid=SigProcFIX.SKP_RSHIFT_ROUND(xlo + xhi,1);
        ymid=SKP_Silk_A2NLSF_eval_poly(p,xmid,dd);
        if ((ylo <= 0 && ymid >= 0) || (ylo >= 0 && ymid <= 0)) {
          xhi=xmid;
          yhi=ymid;
        }
 else {
          xlo=xmid;
          ylo=ymid;
          if (OVERSAMPLE_COSINE_TABLE)           ffrac=ffrac + (64 >> m);
 else           ffrac=ffrac + (128 >> m);
        }
      }
      if (Math.abs(ylo) < 65536) {
        den=ylo - yhi;
        nom=(ylo << (8 - BIN_DIV_STEPS_A2NLSF_FIX)) + (den >> 1);
        if (den != 0) {
          ffrac+=nom / den;
        }
      }
 else {
        ffrac+=ylo / ((ylo - yhi) >> (8 - BIN_DIV_STEPS_A2NLSF_FIX));
      }
      if (OVERSAMPLE_COSINE_TABLE)       NLSF[root_ix]=Math.min((k << 7) + ffrac,SKP_int16_MAX);
 else       NLSF[root_ix]=Math.min((k << 8) + ffrac,SKP_int16_MAX);
      assert(NLSF[root_ix] >= 0);
      assert(NLSF[root_ix] <= 32767);
      root_ix++;
      if (root_ix >= d) {
        break;
      }
      p=PQ[root_ix & 1];
      if (OVERSAMPLE_COSINE_TABLE)       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1]) >> 1);
 else       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k - 1];
      ylo=(1 - (root_ix & 2)) << 12;
    }
 else {
      k++;
      xlo=xhi;
      ylo=yhi;
      if (OVERSAMPLE_COSINE_TABLE) {
        if (k > 2 * SigProcFIX.LSF_COS_TAB_SZ_FIX) {
          i++;
          if (i > MAX_ITERATIONS_A2NLSF_FIX) {
            NLSF[0]=(1 << 15) / (d + 1);
            for (k=1; k < d; k++) {
              NLSF[k]=SKP_SMULBB(k + 1,NLSF[0]);
            }
            return;
          }
          Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - SKP_SMULBB(66,i));
          SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
          p=P;
          xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          if (ylo < 0) {
            NLSF[0]=0;
            p=Q;
            ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
            root_ix=1;
          }
 else {
            root_ix=0;
          }
          k=1;
        }
      }
 else {
        if (k > SigProcFIX.LSF_COS_TAB_SZ_FIX) {
          i++;
          if (i > MAX_ITERATIONS_A2NLSF_FIX) {
            NLSF[0]=(1 << 15) / (d + 1);
            for (k=1; k < d; k++) {
              NLSF[k]=SKP_SMULBB(k + 1,NLSF[0]);
            }
            return;
          }
          Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - SKP_SMULBB(66,i));
          SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
          p=P;
          xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          if (ylo < 0) {
            NLSF[0]=0;
            p=Q;
            ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
            root_ix=1;
          }
 else {
            root_ix=0;
          }
          k=1;
        }
      }
    }
  }
}","/** 
 * Compute Normalized Line Spectral Frequencies (NLSFs) from whitening filter coefficients. If not all roots are found, the a_Q16 coefficients are bandwidth expanded until convergence.
 * @param NLSF Normalized Line Spectral Frequencies, Q15 (0 - (2^15-1)), [d]
 * @param a_Q16 Monic whitening filter coefficients in Q16 [d]
 * @param d Filter order (must be even)
 */
static void SKP_Silk_A2NLSF(int[] NLSF,int[] a_Q16,final int d){
  int i, k, m, dd, root_ix, ffrac;
  int xlo, xhi, xmid;
  int ylo, yhi, ymid;
  int nom, den;
  int[] P=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[] Q=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[][] PQ=new int[2][];
  int[] p;
  PQ[0]=P;
  PQ[1]=Q;
  dd=d >> 1;
  SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
  p=P;
  xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
  ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
  if (ylo < 0) {
    NLSF[0]=0;
    p=Q;
    ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
    root_ix=1;
  }
 else {
    root_ix=0;
  }
  k=1;
  i=0;
  while (true) {
    if (OVERSAMPLE_COSINE_TABLE) {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k + 1) >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1]) >> 1);
    }
 else {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k];
    }
    yhi=SKP_Silk_A2NLSF_eval_poly(p,xhi,dd);
    if ((ylo <= 0 && yhi >= 0) || (ylo >= 0 && yhi <= 0)) {
      if (OVERSAMPLE_COSINE_TABLE)       ffrac=-128;
 else       ffrac=-256;
      for (m=0; m < BIN_DIV_STEPS_A2NLSF_FIX; m++) {
        xmid=SigProcFIX.SKP_RSHIFT_ROUND(xlo + xhi,1);
        ymid=SKP_Silk_A2NLSF_eval_poly(p,xmid,dd);
        if ((ylo <= 0 && ymid >= 0) || (ylo >= 0 && ymid <= 0)) {
          xhi=xmid;
          yhi=ymid;
        }
 else {
          xlo=xmid;
          ylo=ymid;
          if (OVERSAMPLE_COSINE_TABLE)           ffrac=ffrac + (64 >> m);
 else           ffrac=ffrac + (128 >> m);
        }
      }
      if (Math.abs(ylo) < 65536) {
        den=ylo - yhi;
        nom=(ylo << (8 - BIN_DIV_STEPS_A2NLSF_FIX)) + (den >> 1);
        if (den != 0) {
          ffrac+=nom / den;
        }
      }
 else {
        ffrac+=ylo / ((ylo - yhi) >> (8 - BIN_DIV_STEPS_A2NLSF_FIX));
      }
      if (OVERSAMPLE_COSINE_TABLE)       NLSF[root_ix]=Math.min((k << 7) + ffrac,SKP_int16_MAX);
 else       NLSF[root_ix]=Math.min((k << 8) + ffrac,SKP_int16_MAX);
      assert(NLSF[root_ix] >= 0);
      assert(NLSF[root_ix] <= 32767);
      root_ix++;
      if (root_ix >= d) {
        break;
      }
      p=PQ[root_ix & 1];
      if (OVERSAMPLE_COSINE_TABLE)       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1]) >> 1);
 else       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k - 1];
      ylo=(1 - (root_ix & 2)) << 12;
    }
 else {
      k++;
      xlo=xhi;
      ylo=yhi;
      boolean b;
      if (OVERSAMPLE_COSINE_TABLE)       b=(k > 2 * SigProcFIX.LSF_COS_TAB_SZ_FIX);
 else       b=(k > SigProcFIX.LSF_COS_TAB_SZ_FIX);
      if (b) {
        i++;
        if (i > MAX_ITERATIONS_A2NLSF_FIX) {
          NLSF[0]=(1 << 15) / (d + 1);
          for (k=1; k < d; k++) {
            NLSF[k]=SKP_SMULBB(k + 1,NLSF[0]);
          }
          return;
        }
        Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - SKP_SMULBB(10 + i,i));
        SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
        p=P;
        xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
        ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
        if (ylo < 0) {
          NLSF[0]=0;
          p=Q;
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          root_ix=1;
        }
 else {
          root_ix=0;
        }
        k=1;
      }
    }
  }
}",0.8816632418711471
107580,"/** 
 * First-order allpass filter.
 * @param in Q25 input signal [len]
 * @param in_offset offset of valid data.
 * @param S Q25 state [1]
 * @param S_offset offset of valid data.
 * @param A Q15 coefficient    (0 <= A < 32768)
 * @param out Q25 output signal [len]
 * @param out_offset offset of valid data.
 * @param len Number of samples
 */
static void SKP_Silk_allpass_int(final int[] in,int in_offset,int[] S,int S_offset,int A,int[] out,int out_offset,final int len){
  int Y2, X2, S0;
  int k;
  S0=S[S_offset + 0];
  for (k=len - 1; k >= 0; k--) {
    Y2=in[in_offset + 0] - S0;
    X2=(Y2 >> 15) * A + (((Y2 & 0x00007FFF) * A) >> 15);
    (out[out_offset++])=S0 + X2;
    S0=in[in_offset++] + X2;
  }
  S[S_offset + 0]=S0;
}","/** 
 * First-order allpass filter.
 * @param in Q25 input signal [len]
 * @param in_offset offset of valid data.
 * @param S Q25 state [1]
 * @param S_offset offset of valid data.
 * @param A Q15 coefficient    (0 <= A < 32768)
 * @param out Q25 output signal [len]
 * @param out_offset offset of valid data.
 * @param len Number of samples
 */
static void SKP_Silk_allpass_int(final int[] in,int in_offset,int[] S,int S_offset,int A,int[] out,int out_offset,final int len){
  int Y2, X2, S0;
  int k;
  S0=S[S_offset];
  for (k=len - 1; k >= 0; k--) {
    Y2=in[in_offset] - S0;
    X2=(Y2 >> 15) * A + (((Y2 & 0x00007FFF) * A) >> 15);
    out[out_offset++]=S0 + X2;
    S0=in[in_offset++] + X2;
  }
  S[S_offset]=S0;
}",0.9903846153846154
107581,"/** 
 * Helper function for A2NLSF(..). Polynomial evaluation.
 * @param p Polynomial, QPoly
 * @param x Evaluation point, Q12
 * @param dd  Order
 * @return return the polynomial evaluation, in QPoly
 */
static int SKP_Silk_A2NLSF_eval_poly(int[] p,final int x,final int dd){
  int n;
  int x_Q16, y32;
  y32=p[dd];
  x_Q16=x << 4;
  for (n=dd - 1; n >= 0; n--) {
    y32=Macros.SKP_SMLAWW(p[n],y32,x_Q16);
  }
  return y32;
}","/** 
 * Helper function for A2NLSF(..). Polynomial evaluation.
 * @param p Polynomial, QPoly
 * @param x Evaluation point, Q12
 * @param dd  Order
 * @return return the polynomial evaluation, in QPoly
 */
static int SKP_Silk_A2NLSF_eval_poly(int[] p,final int x,final int dd){
  int n;
  int x_Q16, y32;
  y32=p[dd];
  x_Q16=x << 4;
  for (n=dd - 1; n >= 0; n--) {
    y32=SKP_SMLAWW(p[n],y32,x_Q16);
  }
  return y32;
}",0.9917355371900828
107582,"/** 
 * Compute Normalized Line Spectral Frequencies (NLSFs) from whitening filter coefficients. If not all roots are found, the a_Q16 coefficients are bandwidth expanded until convergence.
 * @param NLSF Normalized Line Spectral Frequencies, Q15 (0 - (2^15-1)), [d]
 * @param a_Q16 Monic whitening filter coefficients in Q16 [d]
 * @param d Filter order (must be even)
 */
static void SKP_Silk_A2NLSF(int[] NLSF,int[] a_Q16,final int d){
  int i, k, m, dd, root_ix, ffrac;
  int xlo, xhi, xmid;
  int ylo, yhi, ymid;
  int nom, den;
  int[] P=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[] Q=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[][] PQ=new int[2][];
  int[] p;
  PQ[0]=P;
  PQ[1]=Q;
  dd=d >> 1;
  SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
  p=P;
  xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
  ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
  if (ylo < 0) {
    NLSF[0]=0;
    p=Q;
    ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
    root_ix=1;
  }
 else {
    root_ix=0;
  }
  k=1;
  i=0;
  while (true) {
    if (OVERSAMPLE_COSINE_TABLE) {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k + 1) >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1]) >> 1);
    }
 else {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k];
    }
    yhi=SKP_Silk_A2NLSF_eval_poly(p,xhi,dd);
    if ((ylo <= 0 && yhi >= 0) || (ylo >= 0 && yhi <= 0)) {
      if (OVERSAMPLE_COSINE_TABLE)       ffrac=-128;
 else       ffrac=-256;
      for (m=0; m < BIN_DIV_STEPS_A2NLSF_FIX; m++) {
        xmid=SigProcFIX.SKP_RSHIFT_ROUND(xlo + xhi,1);
        ymid=SKP_Silk_A2NLSF_eval_poly(p,xmid,dd);
        if ((ylo <= 0 && ymid >= 0) || (ylo >= 0 && ymid <= 0)) {
          xhi=xmid;
          yhi=ymid;
        }
 else {
          xlo=xmid;
          ylo=ymid;
          if (OVERSAMPLE_COSINE_TABLE)           ffrac=ffrac + (64 >> m);
 else           ffrac=ffrac + (128 >> m);
        }
      }
      if (Math.abs(ylo) < 65536) {
        den=ylo - yhi;
        nom=(ylo << (8 - BIN_DIV_STEPS_A2NLSF_FIX)) + (den >> 1);
        if (den != 0) {
          ffrac+=nom / den;
        }
      }
 else {
        ffrac+=ylo / ((ylo - yhi) >> (8 - BIN_DIV_STEPS_A2NLSF_FIX));
      }
      if (OVERSAMPLE_COSINE_TABLE)       NLSF[root_ix]=Math.min((k << 7) + ffrac,Typedef.SKP_int16_MAX);
 else       NLSF[root_ix]=Math.min((k << 8) + ffrac,Typedef.SKP_int16_MAX);
      assert(NLSF[root_ix] >= 0);
      assert(NLSF[root_ix] <= 32767);
      root_ix++;
      if (root_ix >= d) {
        break;
      }
      p=PQ[root_ix & 1];
      if (OVERSAMPLE_COSINE_TABLE)       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1]) >> 1);
 else       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k - 1];
      ylo=(1 - (root_ix & 2)) << 12;
    }
 else {
      k++;
      xlo=xhi;
      ylo=yhi;
      if (OVERSAMPLE_COSINE_TABLE) {
        if (k > 2 * SigProcFIX.LSF_COS_TAB_SZ_FIX) {
          i++;
          if (i > MAX_ITERATIONS_A2NLSF_FIX) {
            NLSF[0]=(1 << 15) / (d + 1);
            for (k=1; k < d; k++) {
              NLSF[k]=Macros.SKP_SMULBB(k + 1,NLSF[0]);
            }
            return;
          }
          Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - Macros.SKP_SMULBB(66,i));
          SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
          p=P;
          xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          if (ylo < 0) {
            NLSF[0]=0;
            p=Q;
            ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
            root_ix=1;
          }
 else {
            root_ix=0;
          }
          k=1;
        }
      }
 else {
        if (k > SigProcFIX.LSF_COS_TAB_SZ_FIX) {
          i++;
          if (i > MAX_ITERATIONS_A2NLSF_FIX) {
            NLSF[0]=(1 << 15) / (d + 1);
            for (k=1; k < d; k++) {
              NLSF[k]=Macros.SKP_SMULBB(k + 1,NLSF[0]);
            }
            return;
          }
          Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - Macros.SKP_SMULBB(66,i));
          SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
          p=P;
          xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          if (ylo < 0) {
            NLSF[0]=0;
            p=Q;
            ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
            root_ix=1;
          }
 else {
            root_ix=0;
          }
          k=1;
        }
      }
    }
  }
}","/** 
 * Compute Normalized Line Spectral Frequencies (NLSFs) from whitening filter coefficients. If not all roots are found, the a_Q16 coefficients are bandwidth expanded until convergence.
 * @param NLSF Normalized Line Spectral Frequencies, Q15 (0 - (2^15-1)), [d]
 * @param a_Q16 Monic whitening filter coefficients in Q16 [d]
 * @param d Filter order (must be even)
 */
static void SKP_Silk_A2NLSF(int[] NLSF,int[] a_Q16,final int d){
  int i, k, m, dd, root_ix, ffrac;
  int xlo, xhi, xmid;
  int ylo, yhi, ymid;
  int nom, den;
  int[] P=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[] Q=new int[SigProcFIX.SKP_Silk_MAX_ORDER_LPC / 2 + 1];
  int[][] PQ=new int[2][];
  int[] p;
  PQ[0]=P;
  PQ[1]=Q;
  dd=d >> 1;
  SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
  p=P;
  xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
  ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
  if (ylo < 0) {
    NLSF[0]=0;
    p=Q;
    ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
    root_ix=1;
  }
 else {
    root_ix=0;
  }
  k=1;
  i=0;
  while (true) {
    if (OVERSAMPLE_COSINE_TABLE) {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k + 1) >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1]) >> 1);
    }
 else {
      xhi=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k];
    }
    yhi=SKP_Silk_A2NLSF_eval_poly(p,xhi,dd);
    if ((ylo <= 0 && yhi >= 0) || (ylo >= 0 && yhi <= 0)) {
      if (OVERSAMPLE_COSINE_TABLE)       ffrac=-128;
 else       ffrac=-256;
      for (m=0; m < BIN_DIV_STEPS_A2NLSF_FIX; m++) {
        xmid=SigProcFIX.SKP_RSHIFT_ROUND(xlo + xhi,1);
        ymid=SKP_Silk_A2NLSF_eval_poly(p,xmid,dd);
        if ((ylo <= 0 && ymid >= 0) || (ylo >= 0 && ymid <= 0)) {
          xhi=xmid;
          yhi=ymid;
        }
 else {
          xlo=xmid;
          ylo=ymid;
          if (OVERSAMPLE_COSINE_TABLE)           ffrac=ffrac + (64 >> m);
 else           ffrac=ffrac + (128 >> m);
        }
      }
      if (Math.abs(ylo) < 65536) {
        den=ylo - yhi;
        nom=(ylo << (8 - BIN_DIV_STEPS_A2NLSF_FIX)) + (den >> 1);
        if (den != 0) {
          ffrac+=nom / den;
        }
      }
 else {
        ffrac+=ylo / ((ylo - yhi) >> (8 - BIN_DIV_STEPS_A2NLSF_FIX));
      }
      if (OVERSAMPLE_COSINE_TABLE)       NLSF[root_ix]=Math.min((k << 7) + ffrac,SKP_int16_MAX);
 else       NLSF[root_ix]=Math.min((k << 8) + ffrac,SKP_int16_MAX);
      assert(NLSF[root_ix] >= 0);
      assert(NLSF[root_ix] <= 32767);
      root_ix++;
      if (root_ix >= d) {
        break;
      }
      p=PQ[root_ix & 1];
      if (OVERSAMPLE_COSINE_TABLE)       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1] + ((LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k >> 1] - LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[(k - 1) >> 1]) >> 1);
 else       xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[k - 1];
      ylo=(1 - (root_ix & 2)) << 12;
    }
 else {
      k++;
      xlo=xhi;
      ylo=yhi;
      if (OVERSAMPLE_COSINE_TABLE) {
        if (k > 2 * SigProcFIX.LSF_COS_TAB_SZ_FIX) {
          i++;
          if (i > MAX_ITERATIONS_A2NLSF_FIX) {
            NLSF[0]=(1 << 15) / (d + 1);
            for (k=1; k < d; k++) {
              NLSF[k]=SKP_SMULBB(k + 1,NLSF[0]);
            }
            return;
          }
          Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - SKP_SMULBB(66,i));
          SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
          p=P;
          xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          if (ylo < 0) {
            NLSF[0]=0;
            p=Q;
            ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
            root_ix=1;
          }
 else {
            root_ix=0;
          }
          k=1;
        }
      }
 else {
        if (k > SigProcFIX.LSF_COS_TAB_SZ_FIX) {
          i++;
          if (i > MAX_ITERATIONS_A2NLSF_FIX) {
            NLSF[0]=(1 << 15) / (d + 1);
            for (k=1; k < d; k++) {
              NLSF[k]=SKP_SMULBB(k + 1,NLSF[0]);
            }
            return;
          }
          Bwexpander32.SKP_Silk_bwexpander_32(a_Q16,d,65536 - SKP_SMULBB(66,i));
          SKP_Silk_A2NLSF_init(a_Q16,P,Q,dd);
          p=P;
          xlo=LSFCosTable.SKP_Silk_LSFCosTab_FIX_Q12[0];
          ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
          if (ylo < 0) {
            NLSF[0]=0;
            p=Q;
            ylo=SKP_Silk_A2NLSF_eval_poly(p,xlo,dd);
            root_ix=1;
          }
 else {
            root_ix=0;
          }
          k=1;
        }
      }
    }
  }
}",0.9951434878587196
107583,"/** 
 * Split signal into two decimated bands using first-order allpass filters.
 * @param in Input signal [N].
 * @param in_offset offset of valid data.
 * @param S State vector [2].
 * @param S_offset offset of valid data.
 * @param outL Low band [N/2].
 * @param outL_offset offset of valid data.
 * @param outH High band [N/2].
 * @param outH_offset offset of valid data.
 * @param scratch Scratch memory [3*N/2].
 * @param N Number of input samples.
 */
static void SKP_Silk_ana_filt_bank_1(short[] in,int in_offset,int[] S,int S_offset,short[] outL,int outL_offset,short[] outH,int outH_offset,int[] scratch,final int N){
  int k, N2=N >> 1;
  int in32, X, Y, out_1, out_2;
  for (k=0; k < N2; k++) {
    in32=in[in_offset + 2 * k] << 10;
    Y=in32 - S[S_offset + 0];
    X=Macros.SKP_SMLAWB(Y,Y,A_fb1_21[0]);
    out_1=S[S_offset + 0] + X;
    S[S_offset + 0]=in32 + X;
    in32=in[in_offset + 2 * k + 1] << 10;
    Y=in32 - S[S_offset + 1];
    X=Macros.SKP_SMULWB(Y,A_fb1_20[0]);
    out_2=S[S_offset + 1] + X;
    S[S_offset + 1]=in32 + X;
    outL[outL_offset + k]=(short)SigProcFIX.SKP_SAT16(SigProcFIX.SKP_RSHIFT_ROUND(out_2 + out_1,11));
    outH[outH_offset + k]=(short)SigProcFIX.SKP_SAT16(SigProcFIX.SKP_RSHIFT_ROUND(out_2 - out_1,11));
  }
}","/** 
 * Split signal into two decimated bands using first-order allpass filters.
 * @param in Input signal [N].
 * @param in_offset offset of valid data.
 * @param S State vector [2].
 * @param S_offset offset of valid data.
 * @param outL Low band [N/2].
 * @param outL_offset offset of valid data.
 * @param outH High band [N/2].
 * @param outH_offset offset of valid data.
 * @param scratch Scratch memory [3*N/2].
 * @param N Number of input samples.
 */
static void SKP_Silk_ana_filt_bank_1(short[] in,int in_offset,int[] S,int S_offset,short[] outL,int outL_offset,short[] outH,int outH_offset,int[] scratch,final int N){
  int k, N2=N >> 1;
  int in32, X, Y, out_1, out_2;
  for (k=0; k < N2; k++) {
    in32=in[in_offset + 2 * k] << 10;
    Y=in32 - S[S_offset + 0];
    X=SKP_SMLAWB(Y,Y,A_fb1_21[0]);
    out_1=S[S_offset + 0] + X;
    S[S_offset + 0]=in32 + X;
    in32=in[in_offset + 2 * k + 1] << 10;
    Y=in32 - S[S_offset + 1];
    X=SKP_SMULWB(Y,A_fb1_20[0]);
    out_2=S[S_offset + 1] + X;
    S[S_offset + 1]=in32 + X;
    outL[outL_offset + k]=(short)SigProcFIX.SKP_SAT16(SigProcFIX.SKP_RSHIFT_ROUND(out_2 + out_1,11));
    outH[outH_offset + k]=(short)SigProcFIX.SKP_SAT16(SigProcFIX.SKP_RSHIFT_ROUND(out_2 - out_1,11));
  }
}",0.994413407821229
107584,"/** 
 * Second order ARMA filter Can handle slowly varying filter coefficients
 * @param in input signal
 * @param in_offset offset of valid data.
 * @param B MA coefficients, Q13 [3]
 * @param A AR coefficients, Q13 [2]
 * @param S state vector [2]
 * @param out output signal
 * @param out_offset offset of valid data.
 * @param len signal length
 */
static void SKP_Silk_biquad(short[] in,int in_offset,short[] B,short[] A,int[] S,short[] out,int out_offset,final int len){
  int k, in16;
  int A0_neg, A1_neg, S0, S1, out32, tmp32;
  S0=S[0];
  S1=S[1];
  A0_neg=-A[0];
  A1_neg=-A[1];
  for (k=0; k < len; k++) {
    in16=in[in_offset + k];
    out32=Macros.SKP_SMLABB(S0,in16,B[0]);
    S0=Macros.SKP_SMLABB(S1,in16,B[1]);
    S0+=(Macros.SKP_SMULWB(out32,A0_neg) << 3);
    S1=(Macros.SKP_SMULWB(out32,A1_neg) << 3);
    S1=Macros.SKP_SMLABB(S1,in16,B[2]);
    tmp32=SigProcFIX.SKP_RSHIFT_ROUND(out32,13) + 1;
    out[out_offset + k]=(short)SigProcFIX.SKP_SAT16(tmp32);
  }
  S[0]=S0;
  S[1]=S1;
}","/** 
 * Second order ARMA filter Can handle slowly varying filter coefficients
 * @param in input signal
 * @param in_offset offset of valid data.
 * @param B MA coefficients, Q13 [3]
 * @param A AR coefficients, Q13 [2]
 * @param S state vector [2]
 * @param out output signal
 * @param out_offset offset of valid data.
 * @param len signal length
 */
static void SKP_Silk_biquad(short[] in,int in_offset,short[] B,short[] A,int[] S,short[] out,int out_offset,final int len){
  int k, in16;
  int A0_neg, A1_neg, S0, S1, out32, tmp32;
  S0=S[0];
  S1=S[1];
  A0_neg=-A[0];
  A1_neg=-A[1];
  for (k=0; k < len; k++) {
    in16=in[in_offset + k];
    out32=SKP_SMLABB(S0,in16,B[0]);
    S0=SKP_SMLABB(S1,in16,B[1]);
    S0+=(SKP_SMULWB(out32,A0_neg) << 3);
    S1=(SKP_SMULWB(out32,A1_neg) << 3);
    S1=SKP_SMLABB(S1,in16,B[2]);
    tmp32=SigProcFIX.SKP_RSHIFT_ROUND(out32,13) + 1;
    out[out_offset + k]=(short)SigProcFIX.SKP_SAT16(tmp32);
  }
  S[0]=S0;
  S[1]=S1;
}",0.9822605169792196
107585,"/** 
 * Second order ARMA filter, alternative implementation.
 * @param in Input signal.
 * @param in_offset offset of valid data.
 * @param B_Q28 MA coefficients [3].
 * @param A_Q28 AR coefficients [2].
 * @param S State vector [2].
 * @param out Output signal.
 * @param out_offset offset of valid data.
 * @param len Signal length (must be even).
 */
static void SKP_Silk_biquad_alt(short[] in,int in_offset,int[] B_Q28,int[] A_Q28,int[] S,short[] out,int out_offset,final int len){
  int k;
  int inval, A0_U_Q28, A0_L_Q28, A1_U_Q28, A1_L_Q28, out32_Q14;
  A0_L_Q28=(-A_Q28[0]) & 0x00003FFF;
  A0_U_Q28=(-A_Q28[0]) >> 14;
  A1_L_Q28=(-A_Q28[1]) & 0x00003FFF;
  A1_U_Q28=(-A_Q28[1]) >> 14;
  for (k=0; k < len; k++) {
    inval=in[in_offset + k];
    out32_Q14=Macros.SKP_SMLAWB(S[0],B_Q28[0],inval) << 2;
    S[0]=S[1] + (Macros.SKP_SMULWB(out32_Q14,A0_L_Q28) >> 14);
    S[0]=Macros.SKP_SMLAWB(S[0],out32_Q14,A0_U_Q28);
    S[0]=Macros.SKP_SMLAWB(S[0],B_Q28[1],inval);
    S[1]=Macros.SKP_SMULWB(out32_Q14,A1_L_Q28) >> 14;
    S[1]=Macros.SKP_SMLAWB(S[1],out32_Q14,A1_U_Q28);
    S[1]=Macros.SKP_SMLAWB(S[1],B_Q28[2],inval);
    out[out_offset + k]=(short)SigProcFIX.SKP_SAT16((out32_Q14 >> 14) + 2);
  }
}","/** 
 * Second order ARMA filter, alternative implementation.
 * @param in Input signal.
 * @param in_offset offset of valid data.
 * @param B_Q28 MA coefficients [3].
 * @param A_Q28 AR coefficients [2].
 * @param S State vector [2].
 * @param out Output signal.
 * @param out_offset offset of valid data.
 * @param len Signal length (must be even).
 */
static void SKP_Silk_biquad_alt(short[] in,int in_offset,int[] B_Q28,int[] A_Q28,int[] S,short[] out,int out_offset,final int len){
  int k;
  int inval, A0_U_Q28, A0_L_Q28, A1_U_Q28, A1_L_Q28, out32_Q14;
  A0_L_Q28=(-A_Q28[0]) & 0x00003FFF;
  A0_U_Q28=(-A_Q28[0]) >> 14;
  A1_L_Q28=(-A_Q28[1]) & 0x00003FFF;
  A1_U_Q28=(-A_Q28[1]) >> 14;
  for (k=0; k < len; k++) {
    inval=in[in_offset + k];
    out32_Q14=SKP_SMLAWB(S[0],B_Q28[0],inval) << 2;
    S[0]=S[1] + (SKP_SMULWB(out32_Q14,A0_L_Q28) >> 14);
    S[0]=SKP_SMLAWB(S[0],out32_Q14,A0_U_Q28);
    S[0]=SKP_SMLAWB(S[0],B_Q28[1],inval);
    S[1]=SKP_SMULWB(out32_Q14,A1_L_Q28) >> 14;
    S[1]=SKP_SMLAWB(S[1],out32_Q14,A1_U_Q28);
    S[1]=SKP_SMLAWB(S[1],B_Q28[2],inval);
    out[out_offset + k]=(short)SigProcFIX.SKP_SAT16((out32_Q14 >> 14) + 2);
  }
}",0.9793684210526316
107586,"/** 
 * Chirp (bandwidth expand) LP AR filter.
 * @param ar AR filter to be expanded (without leading 1).
 * @param d Length of ar.
 * @param chirp_Q16  Chirp factor in Q16.
 */
static void SKP_Silk_bwexpander_32(int[] ar,final int d,int chirp_Q16){
  int i;
  int tmp_chirp_Q16;
  tmp_chirp_Q16=chirp_Q16;
  for (i=0; i < d - 1; i++) {
    ar[i]=Macros.SKP_SMULWW(ar[i],tmp_chirp_Q16);
    tmp_chirp_Q16=Macros.SKP_SMULWW(chirp_Q16,tmp_chirp_Q16);
  }
  ar[d - 1]=Macros.SKP_SMULWW(ar[d - 1],tmp_chirp_Q16);
}","/** 
 * Chirp (bandwidth expand) LP AR filter.
 * @param ar AR filter to be expanded (without leading 1).
 * @param d Length of ar.
 * @param chirp_Q16  Chirp factor in Q16.
 */
static void SKP_Silk_bwexpander_32(int[] ar,final int d,int chirp_Q16){
  int i;
  int tmp_chirp_Q16;
  tmp_chirp_Q16=chirp_Q16;
  for (i=0; i < d - 1; i++) {
    ar[i]=SKP_SMULWW(ar[i],tmp_chirp_Q16);
    tmp_chirp_Q16=SKP_SMULWW(chirp_Q16,tmp_chirp_Q16);
  }
  ar[d - 1]=SKP_SMULWW(ar[d - 1],tmp_chirp_Q16);
}",0.978978978978979
107587,"/** 
 * Updates CNG estimate, and applies the CNG when packet was lost.
 * @param psDec Decoder state.
 * @param psDecCtrl Decoder control.
 * @param signal Signal.
 * @param signal_offset offset of the valid data.
 * @param length Length of residual.
 */
static void SKP_Silk_CNG(SKP_Silk_decoder_state psDec,SKP_Silk_decoder_control psDecCtrl,short signal[],int signal_offset,int length){
  int i, subfr;
  int tmp_32, Gain_Q26, max_Gain_Q16;
  short[] LPC_buf=new short[Define.MAX_LPC_ORDER];
  short[] CNG_sig=new short[Define.MAX_FRAME_LENGTH];
  SKP_Silk_CNG_struct psCNG;
  psCNG=psDec.sCNG;
  if (psDec.fs_kHz != psCNG.fs_kHz) {
    SKP_Silk_CNG_Reset(psDec);
    psCNG.fs_kHz=psDec.fs_kHz;
  }
  if (psDec.lossCnt == 0 && psDec.vadFlag == Define.NO_VOICE_ACTIVITY) {
    for (i=0; i < psDec.LPC_order; i++) {
      psCNG.CNG_smth_NLSF_Q15[i]+=Macros.SKP_SMULWB(psDec.prevNLSF_Q15[i] - psCNG.CNG_smth_NLSF_Q15[i],Define.CNG_NLSF_SMTH_Q16);
    }
    max_Gain_Q16=0;
    subfr=0;
    for (i=0; i < Define.NB_SUBFR; i++) {
      if (psDecCtrl.Gains_Q16[i] > max_Gain_Q16) {
        max_Gain_Q16=psDecCtrl.Gains_Q16[i];
        subfr=i;
      }
    }
    System.arraycopy(psCNG.CNG_exc_buf_Q10,0,psCNG.CNG_exc_buf_Q10,psDec.subfr_length,(Define.NB_SUBFR - 1) * psDec.subfr_length);
    System.arraycopy(psDec.exc_Q10,subfr * psDec.subfr_length,psCNG.CNG_exc_buf_Q10,0,psDec.subfr_length);
    for (i=0; i < Define.NB_SUBFR; i++) {
      psCNG.CNG_smth_Gain_Q16+=Macros.SKP_SMULWB(psDecCtrl.Gains_Q16[i] - psCNG.CNG_smth_Gain_Q16,Define.CNG_GAIN_SMTH_Q16);
    }
  }
  if (psDec.lossCnt != 0) {
    int[] psCNG_rand_seed_ptr=new int[1];
    psCNG_rand_seed_ptr[0]=psCNG.rand_seed;
    SKP_Silk_CNG_exc(CNG_sig,0,psCNG.CNG_exc_buf_Q10,0,psCNG.CNG_smth_Gain_Q16,length,psCNG_rand_seed_ptr);
    psCNG.rand_seed=psCNG_rand_seed_ptr[0];
    NLSF2AStable.SKP_Silk_NLSF2A_stable(LPC_buf,psCNG.CNG_smth_NLSF_Q15,psDec.LPC_order);
    Gain_Q26=1 << 26;
    if (psDec.LPC_order == 16) {
      LPCSynthesisOrder16.SKP_Silk_LPC_synthesis_order16(CNG_sig,LPC_buf,Gain_Q26,psCNG.CNG_synth_state,CNG_sig,length);
    }
 else {
      LPCSynthesisFilter.SKP_Silk_LPC_synthesis_filter(CNG_sig,LPC_buf,Gain_Q26,psCNG.CNG_synth_state,CNG_sig,length,psDec.LPC_order);
    }
    for (i=0; i < length; i++) {
      tmp_32=signal[signal_offset + i] + CNG_sig[i];
      signal[signal_offset + i]=(short)SigProcFIX.SKP_SAT16(tmp_32);
    }
  }
 else {
    Arrays.fill(psCNG.CNG_synth_state,0,psDec.LPC_order,0);
  }
}","/** 
 * Updates CNG estimate, and applies the CNG when packet was lost.
 * @param psDec Decoder state.
 * @param psDecCtrl Decoder control.
 * @param signal Signal.
 * @param signal_offset offset of the valid data.
 * @param length Length of residual.
 */
static void SKP_Silk_CNG(SKP_Silk_decoder_state psDec,SKP_Silk_decoder_control psDecCtrl,short signal[],int signal_offset,int length){
  int i, subfr;
  int tmp_32, Gain_Q26, max_Gain_Q16;
  short[] LPC_buf=new short[MAX_LPC_ORDER];
  short[] CNG_sig=new short[MAX_FRAME_LENGTH];
  SKP_Silk_CNG_struct psCNG;
  psCNG=psDec.sCNG;
  if (psDec.fs_kHz != psCNG.fs_kHz) {
    SKP_Silk_CNG_Reset(psDec);
    psCNG.fs_kHz=psDec.fs_kHz;
  }
  if (psDec.lossCnt == 0 && psDec.vadFlag == NO_VOICE_ACTIVITY) {
    for (i=0; i < psDec.LPC_order; i++) {
      psCNG.CNG_smth_NLSF_Q15[i]+=SKP_SMULWB(psDec.prevNLSF_Q15[i] - psCNG.CNG_smth_NLSF_Q15[i],CNG_NLSF_SMTH_Q16);
    }
    max_Gain_Q16=0;
    subfr=0;
    for (i=0; i < NB_SUBFR; i++) {
      if (psDecCtrl.Gains_Q16[i] > max_Gain_Q16) {
        max_Gain_Q16=psDecCtrl.Gains_Q16[i];
        subfr=i;
      }
    }
    System.arraycopy(psCNG.CNG_exc_buf_Q10,0,psCNG.CNG_exc_buf_Q10,psDec.subfr_length,(NB_SUBFR - 1) * psDec.subfr_length);
    System.arraycopy(psDec.exc_Q10,subfr * psDec.subfr_length,psCNG.CNG_exc_buf_Q10,0,psDec.subfr_length);
    for (i=0; i < NB_SUBFR; i++) {
      psCNG.CNG_smth_Gain_Q16+=SKP_SMULWB(psDecCtrl.Gains_Q16[i] - psCNG.CNG_smth_Gain_Q16,CNG_GAIN_SMTH_Q16);
    }
  }
  if (psDec.lossCnt != 0) {
    int[] psCNG_rand_seed_ptr=new int[1];
    psCNG_rand_seed_ptr[0]=psCNG.rand_seed;
    SKP_Silk_CNG_exc(CNG_sig,0,psCNG.CNG_exc_buf_Q10,0,psCNG.CNG_smth_Gain_Q16,length,psCNG_rand_seed_ptr);
    psCNG.rand_seed=psCNG_rand_seed_ptr[0];
    NLSF2AStable.SKP_Silk_NLSF2A_stable(LPC_buf,psCNG.CNG_smth_NLSF_Q15,psDec.LPC_order);
    Gain_Q26=1 << 26;
    if (psDec.LPC_order == 16) {
      LPCSynthesisOrder16.SKP_Silk_LPC_synthesis_order16(CNG_sig,LPC_buf,Gain_Q26,psCNG.CNG_synth_state,CNG_sig,length);
    }
 else {
      LPCSynthesisFilter.SKP_Silk_LPC_synthesis_filter(CNG_sig,LPC_buf,Gain_Q26,psCNG.CNG_synth_state,CNG_sig,length,psDec.LPC_order);
    }
    for (i=0; i < length; i++) {
      tmp_32=signal[signal_offset + i] + CNG_sig[i];
      signal[signal_offset + i]=(short)SigProcFIX.SKP_SAT16(tmp_32);
    }
  }
 else {
    Arrays.fill(psCNG.CNG_synth_state,0,psDec.LPC_order,0);
  }
}",0.9857781389678992
107588,"/** 
 * Generates excitation for CNG LPC synthesis.
 * @param residual CNG residual signal Q0.
 * @param residual_offset offset of the valid data.
 * @param exc_buf_Q10 Random samples buffer Q10.
 * @param exc_buf_Q10_offset offset of the valid data.
 * @param Gain_Q16 Gain to apply
 * @param length Length
 * @param rand_seed Seed to random index generator
 */
static void SKP_Silk_CNG_exc(short residual[],int residual_offset,int exc_buf_Q10[],int exc_buf_Q10_offset,int Gain_Q16,int length,int[] rand_seed){
  int seed;
  int i, idx, exc_mask;
  exc_mask=Define.CNG_BUF_MASK_MAX;
  while (exc_mask > length) {
    exc_mask=(exc_mask >> 1);
  }
  seed=rand_seed[0];
  for (i=0; i < length; i++) {
    seed=SigProcFIX.SKP_RAND(seed);
    idx=((seed >> 24) & exc_mask);
    Typedef.SKP_assert(idx >= 0);
    Typedef.SKP_assert(idx <= Define.CNG_BUF_MASK_MAX);
    residual[residual_offset + i]=(short)SigProcFIX.SKP_SAT16(SigProcFIX.SKP_RSHIFT_ROUND(Macros.SKP_SMULWW(exc_buf_Q10[idx],Gain_Q16),10));
  }
  rand_seed[0]=seed;
}","/** 
 * Generates excitation for CNG LPC synthesis.
 * @param residual CNG residual signal Q0.
 * @param residual_offset offset of the valid data.
 * @param exc_buf_Q10 Random samples buffer Q10.
 * @param exc_buf_Q10_offset offset of the valid data.
 * @param Gain_Q16 Gain to apply
 * @param length Length
 * @param rand_seed Seed to random index generator
 */
static void SKP_Silk_CNG_exc(short residual[],int residual_offset,int exc_buf_Q10[],int exc_buf_Q10_offset,int Gain_Q16,int length,int[] rand_seed){
  int seed;
  int i, idx, exc_mask;
  exc_mask=CNG_BUF_MASK_MAX;
  while (exc_mask > length) {
    exc_mask=(exc_mask >> 1);
  }
  seed=rand_seed[0];
  for (i=0; i < length; i++) {
    seed=SigProcFIX.SKP_RAND(seed);
    idx=((seed >> 24) & exc_mask);
    SKP_assert(idx >= 0);
    SKP_assert(idx <= CNG_BUF_MASK_MAX);
    residual[residual_offset + i]=(short)SigProcFIX.SKP_SAT16(SigProcFIX.SKP_RSHIFT_ROUND(SKP_SMULWW(exc_buf_Q10[idx],Gain_Q16),10));
  }
  rand_seed[0]=seed;
}",0.9816740960871718
107589,"/** 
 * Reset CNG.
 * @param psDec Decoder state.
 */
static void SKP_Silk_CNG_Reset(SKP_Silk_decoder_state psDec){
  int i, NLSF_step_Q15, NLSF_acc_Q15;
  NLSF_step_Q15=(Typedef.SKP_int16_MAX / (psDec.LPC_order + 1));
  NLSF_acc_Q15=0;
  for (i=0; i < psDec.LPC_order; i++) {
    NLSF_acc_Q15+=NLSF_step_Q15;
    psDec.sCNG.CNG_smth_NLSF_Q15[i]=NLSF_acc_Q15;
  }
  psDec.sCNG.CNG_smth_Gain_Q16=0;
  psDec.sCNG.rand_seed=3176576;
}","/** 
 * Reset CNG.
 * @param psDec Decoder state.
 */
static void SKP_Silk_CNG_Reset(SKP_Silk_decoder_state psDec){
  int i, NLSF_step_Q15, NLSF_acc_Q15;
  NLSF_step_Q15=(SKP_int16_MAX / (psDec.LPC_order + 1));
  NLSF_acc_Q15=0;
  for (i=0; i < psDec.LPC_order; i++) {
    NLSF_acc_Q15+=NLSF_step_Q15;
    psDec.sCNG.CNG_smth_NLSF_Q15[i]=NLSF_acc_Q15;
  }
  psDec.sCNG.CNG_smth_Gain_Q16=0;
  psDec.sCNG.rand_seed=3176576;
}",0.990632318501171
107590,"/** 
 * Decodes signs of excitation.
 * @param sRC Range coder state.
 * @param q pulse signal.
 * @param length length of output.
 * @param sigtype Signal type.
 * @param QuantOffsetType Quantization offset type.
 * @param RateLevelIndex Rate Level Index.
 */
static void SKP_Silk_decode_signs(SKP_Silk_range_coder_state sRC,int q[],final int length,final int sigtype,final int QuantOffsetType,final int RateLevelIndex){
  int i;
  int data;
  int data_ptr[]=new int[1];
  int[] cdf=new int[3];
  i=Macros.SKP_SMULBB(Define.N_RATE_LEVELS - 1,(sigtype << 1) + QuantOffsetType) + RateLevelIndex;
  cdf[0]=0;
  cdf[1]=TablesSign.SKP_Silk_sign_CDF[i];
  cdf[2]=65535;
  for (i=0; i < length; i++) {
    if (q[i] > 0) {
      RangeCoder.SKP_Silk_range_decoder(data_ptr,0,sRC,cdf,0,1);
      data=data_ptr[0];
      q[i]*=(data << 1) - 1;
    }
  }
}","/** 
 * Decodes signs of excitation.
 * @param sRC Range coder state.
 * @param q pulse signal.
 * @param length length of output.
 * @param sigtype Signal type.
 * @param QuantOffsetType Quantization offset type.
 * @param RateLevelIndex Rate Level Index.
 */
static void SKP_Silk_decode_signs(SKP_Silk_range_coder_state sRC,int q[],final int length,final int sigtype,final int QuantOffsetType,final int RateLevelIndex){
  int i;
  int data;
  int data_ptr[]=new int[1];
  int[] cdf=new int[3];
  i=SKP_SMULBB(N_RATE_LEVELS - 1,(sigtype << 1) + QuantOffsetType) + RateLevelIndex;
  cdf[0]=0;
  cdf[1]=TablesSign.SKP_Silk_sign_CDF[i];
  cdf[2]=65535;
  for (i=0; i < length; i++) {
    if (q[i] > 0) {
      RangeCoder.SKP_Silk_range_decoder(data_ptr,0,sRC,cdf,0,1);
      data=data_ptr[0];
      q[i]*=(data << 1) - 1;
    }
  }
}",0.9916467780429594
107591,"/** 
 * Encodes signs of excitation.
 * @param sRC Range coder state.
 * @param q Pulse signal.
 * @param length Length of input.
 * @param sigtype Signal type.
 * @param QuantOffsetType QuantOffsetType.
 * @param RateLevelIndex Rate level index.
 */
static void SKP_Silk_encode_signs(SKP_Silk_range_coder_state sRC,byte[] q,final int length,final int sigtype,final int QuantOffsetType,final int RateLevelIndex){
  int i;
  int inData;
  int[] cdf=new int[3];
  i=Macros.SKP_SMULBB(Define.N_RATE_LEVELS - 1,(sigtype << 1) + QuantOffsetType) + RateLevelIndex;
  cdf[0]=0;
  cdf[1]=TablesSign.SKP_Silk_sign_CDF[i];
  cdf[2]=65535;
  for (i=0; i < length; i++) {
    if (q[i] != 0) {
      inData=(q[i] >> 15) + 1;
      RangeCoder.SKP_Silk_range_encoder(sRC,inData,cdf,0);
    }
  }
}","/** 
 * Encodes signs of excitation.
 * @param sRC Range coder state.
 * @param q Pulse signal.
 * @param length Length of input.
 * @param sigtype Signal type.
 * @param QuantOffsetType QuantOffsetType.
 * @param RateLevelIndex Rate level index.
 */
static void SKP_Silk_encode_signs(SKP_Silk_range_coder_state sRC,byte[] q,final int length,final int sigtype,final int QuantOffsetType,final int RateLevelIndex){
  int i;
  int inData;
  int[] cdf=new int[3];
  i=SKP_SMULBB(N_RATE_LEVELS - 1,(sigtype << 1) + QuantOffsetType) + RateLevelIndex;
  cdf[0]=0;
  cdf[1]=TablesSign.SKP_Silk_sign_CDF[i];
  cdf[2]=65535;
  for (i=0; i < length; i++) {
    if (q[i] != 0) {
      inData=(q[i] >> 15) + 1;
      RangeCoder.SKP_Silk_range_encoder(sRC,inData,cdf,0);
    }
  }
}",0.990967741935484
107592,"/** 
 * Prints all statistics available for   {@link #rtpManager}.
 * @param rtpManager the <tt>RTPManager</tt> to print statistics for
 */
private void printFlowStatistics(StreamRTPManager rtpManager){
  try {
    if (!logger.isInfoEnabled())     return;
    GlobalTransmissionStats s=rtpManager.getGlobalTransmissionStats();
    String rtpstat=StatisticsEngine.RTP_STAT_PREFIX;
    StringBuilder buff=new StringBuilder(rtpstat);
    MediaType mediaType=getMediaType();
    String mediaTypeStr=(mediaType == null) ? ""String_Node_Str"" : mediaType.toString();
    String eol=""String_Node_Str"" + rtpstat;
    buff.append(""String_Node_Str"").append(mediaTypeStr).append(""String_Node_Str"").append(getLocalSourceID()).append(eol).append(""String_Node_Str"").append(s.getBytesSent()).append(eol).append(""String_Node_Str"").append(s.getRTPSent()).append(eol).append(""String_Node_Str"").append(minRemoteInterArrivalJitter).append(eol).append(""String_Node_Str"").append(maxRemoteInterArrivalJitter).append(eol).append(""String_Node_Str"").append(s.getLocalColls()).append(eol).append(""String_Node_Str"").append(s.getRemoteColls()).append(eol).append(""String_Node_Str"").append(s.getRTCPSent()).append(eol).append(""String_Node_Str"").append(s.getTransmitFailed());
    logger.info(buff);
    GlobalReceptionStats rs=rtpManager.getGlobalReceptionStats();
    MediaFormat format=getFormat();
    buff=new StringBuilder(rtpstat);
    buff.append(""String_Node_Str"").append((format == null) ? ""String_Node_Str"" : format).append(""String_Node_Str"").append(getRemoteSourceID()).append(eol).append(""String_Node_Str"").append(rs.getPacketsRecd()).append(eol).append(""String_Node_Str"").append(rs.getBytesRecd()).append(eol).append(""String_Node_Str"").append(statisticsEngine.getLost()).append(eol).append(""String_Node_Str"").append(statisticsEngine.getMinInterArrivalJitter()).append(eol).append(""String_Node_Str"").append(statisticsEngine.getMaxInterArrivalJitter()).append(eol).append(""String_Node_Str"").append(rs.getRTCPRecd()).append(eol).append(""String_Node_Str"").append(rs.getBadRTCPPkts()).append(eol).append(""String_Node_Str"").append(rs.getBadRTPkts()).append(eol).append(""String_Node_Str"").append(rs.getLocalColls()).append(eol).append(""String_Node_Str"").append(rs.getMalformedBye()).append(eol).append(""String_Node_Str"").append(rs.getMalformedRR()).append(eol).append(""String_Node_Str"").append(rs.getMalformedSDES()).append(eol).append(""String_Node_Str"").append(rs.getMalformedSR()).append(eol).append(""String_Node_Str"").append(rs.getPacketsLooped()).append(eol).append(""String_Node_Str"").append(rs.getRemoteColls()).append(eol).append(""String_Node_Str"").append(rs.getSRRecd()).append(eol).append(""String_Node_Str"").append(rs.getTransmitFailed()).append(eol).append(""String_Node_Str"").append(rs.getUnknownTypes());
    logger.info(buff);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",t);
  }
}","/** 
 * Prints all statistics available for   {@link #rtpManager}.
 * @param rtpManager the <tt>RTPManager</tt> to print statistics for
 */
private void printFlowStatistics(StreamRTPManager rtpManager){
  try {
    if (!logger.isInfoEnabled())     return;
    GlobalTransmissionStats s=rtpManager.getGlobalTransmissionStats();
    String rtpstat=StatisticsEngine.RTP_STAT_PREFIX;
    MediaStreamStatsImpl mss=getMediaStreamStats();
    StringBuilder buff=new StringBuilder(rtpstat);
    MediaType mediaType=getMediaType();
    String mediaTypeStr=(mediaType == null) ? ""String_Node_Str"" : mediaType.toString();
    String eol=""String_Node_Str"" + rtpstat;
    buff.append(""String_Node_Str"").append(mediaTypeStr).append(""String_Node_Str"").append(getLocalSourceID()).append(eol).append(""String_Node_Str"").append(s.getBytesSent()).append(eol).append(""String_Node_Str"").append(s.getRTPSent()).append(eol).append(""String_Node_Str"").append(mss.getMinUploadJitterMs()).append(""String_Node_Str"").append(eol).append(""String_Node_Str"").append(mss.getMaxUploadJitterMs()).append(""String_Node_Str"").append(eol).append(""String_Node_Str"").append(s.getLocalColls()).append(eol).append(""String_Node_Str"").append(s.getRemoteColls()).append(eol).append(""String_Node_Str"").append(s.getRTCPSent()).append(eol).append(""String_Node_Str"").append(s.getTransmitFailed());
    logger.info(buff);
    GlobalReceptionStats rs=rtpManager.getGlobalReceptionStats();
    MediaFormat format=getFormat();
    buff=new StringBuilder(rtpstat);
    buff.append(""String_Node_Str"").append((format == null) ? ""String_Node_Str"" : format).append(""String_Node_Str"").append(getRemoteSourceID()).append(eol).append(""String_Node_Str"").append(rs.getPacketsRecd()).append(eol).append(""String_Node_Str"").append(rs.getBytesRecd()).append(eol).append(""String_Node_Str"").append(statisticsEngine.getLost()).append(eol).append(""String_Node_Str"").append(statisticsEngine.getMinInterArrivalJitter()).append(eol).append(""String_Node_Str"").append(statisticsEngine.getMaxInterArrivalJitter()).append(eol).append(""String_Node_Str"").append(rs.getRTCPRecd()).append(eol).append(""String_Node_Str"").append(rs.getBadRTCPPkts()).append(eol).append(""String_Node_Str"").append(rs.getBadRTPkts()).append(eol).append(""String_Node_Str"").append(rs.getLocalColls()).append(eol).append(""String_Node_Str"").append(rs.getMalformedBye()).append(eol).append(""String_Node_Str"").append(rs.getMalformedRR()).append(eol).append(""String_Node_Str"").append(rs.getMalformedSDES()).append(eol).append(""String_Node_Str"").append(rs.getMalformedSR()).append(eol).append(""String_Node_Str"").append(rs.getPacketsLooped()).append(eol).append(""String_Node_Str"").append(rs.getRemoteColls()).append(eol).append(""String_Node_Str"").append(rs.getSRRecd()).append(eol).append(""String_Node_Str"").append(rs.getTransmitFailed()).append(eol).append(""String_Node_Str"").append(rs.getUnknownTypes());
    logger.info(buff);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",t);
  }
}",0.9509536784741144
107593,"/** 
 * Returns the jitter average of this upload/download stream.
 * @param streamDirection The stream direction (DOWNLOAD or UPLOAD) of thestream from which this function retrieve the jitter.
 * @return the last jitter average computed (in ms).
 */
private double getJitterMs(StreamDirection streamDirection){
  MediaFormat format=mediaStreamImpl.getFormat();
  double clockRate;
  if (format == null) {
    MediaType mediaType=mediaStreamImpl.getMediaType();
    clockRate=MediaType.VIDEO.equals(mediaType) ? 90000 : -1;
  }
 else   clockRate=format.getClockRate();
  if (clockRate <= 0)   return -1;
  return (jitterRTPTimestampUnits[streamDirection.ordinal()] / clockRate) * 1000.0;
}","/** 
 * Returns the jitter average of this upload/download stream.
 * @param streamDirection The stream direction (DOWNLOAD or UPLOAD) of thestream from which this function retrieve the jitter.
 * @return the last jitter average computed (in ms).
 */
private double getJitterMs(StreamDirection streamDirection){
  return rtpTimeToMs(jitterRTPTimestampUnits[streamDirection.ordinal()]);
}",0.5947955390334573
107594,"/** 
 * Updates this stream stats with the new feedback received.
 * @param feedback The last RTCP feedback received by the MediaStream.
 */
private void updateNewReceivedFeedback(RTCPFeedback feedback){
  StreamDirection streamDirection=StreamDirection.UPLOAD;
  updateJitterRTPTimestampUnits(feedback,streamDirection);
  long uploadNewNbRecv=feedback.getXtndSeqNum();
  long newNbLost=feedback.getNumLost() - nbLost[streamDirection.ordinal()];
  long nbSteps=uploadNewNbRecv - uploadFeedbackNbPackets;
  updateNbLoss(streamDirection,newNbLost,nbSteps);
  uploadFeedbackNbPackets=uploadNewNbRecv;
  setRttMs(computeRTTInMs(feedback));
}","/** 
 * Updates this stream stats with the new feedback received.
 * @param feedback The last RTCP feedback received by the MediaStream.
 */
private void updateNewReceivedFeedback(RTCPFeedback feedback){
  StreamDirection streamDirection=StreamDirection.UPLOAD;
  updateJitterRTPTimestampUnits(feedback,streamDirection);
  long uploadNewNbRecv=feedback.getXtndSeqNum();
  nbPacketsLostUpload=feedback.getNumLost();
  long newNbLost=nbPacketsLostUpload - nbLost[streamDirection.ordinal()];
  long nbSteps=uploadNewNbRecv - uploadFeedbackNbPackets;
  updateNbLoss(streamDirection,newNbLost,nbSteps);
  uploadFeedbackNbPackets=uploadNewNbRecv;
  setRttMs(computeRTTInMs(feedback));
}",0.9460895975702354
107595,"/** 
 * Returns the number of Protocol Data Units (PDU) sent/received since the beginning of the session.
 * @param streamDirection The stream direction (DOWNLOAD or UPLOAD) of thestream from which this function retrieve the number of sent/received packets.
 * @return the number of packets sent/received for this stream.
 */
private long getNbPDU(StreamDirection streamDirection){
  StreamRTPManager rtpManager=mediaStreamImpl.queryRTPManager();
  long nbPDU=0;
  if (rtpManager != null) {
switch (streamDirection) {
case UPLOAD:
      nbPDU=rtpManager.getGlobalTransmissionStats().getRTPSent();
    break;
case DOWNLOAD:
  GlobalReceptionStats globalReceptionStats=rtpManager.getGlobalReceptionStats();
nbPDU=globalReceptionStats.getPacketsRecd() - globalReceptionStats.getRTCPRecd();
break;
}
}
return nbPDU;
}","/** 
 * Returns the number of Protocol Data Units (PDU) sent/received since the beginning of the session.
 * @param streamDirection The stream direction (DOWNLOAD or UPLOAD) of thestream from which this function retrieve the number of sent/received packets.
 * @return the number of packets sent/received for this stream.
 */
private long getNbPDU(StreamDirection streamDirection){
  long nbPDU=0;
  StatisticsEngine statisticsEngine=mediaStreamImpl.getStatisticsEngine();
  if (statisticsEngine != null) {
switch (streamDirection) {
case UPLOAD:
      nbPDU=statisticsEngine.getRtpPacketsSent();
    break;
case DOWNLOAD:
  nbPDU=statisticsEngine.getRtpPacketsReceived();
break;
}
}
return nbPDU;
}",0.7248677248677249
107596,"/** 
 * Returns the number of lost packets for the receive streams.
 * @return  the number of lost packets for the receive streams.
 */
private long getDownloadNbPacketLost(){
  long downloadLost=0;
  for (  ReceiveStream stream : mediaStreamImpl.getReceiveStreams()) {
    downloadLost+=stream.getSourceReceptionStats().getPDUlost();
  }
  return downloadLost;
}","/** 
 * Returns the number of lost packets for the receive streams.
 * @return  the number of lost packets for the receive streams.
 */
public long getDownloadNbPacketLost(){
  long downloadLost=0;
  for (  ReceiveStream stream : mediaStreamImpl.getReceiveStreams()) {
    downloadLost+=stream.getSourceReceptionStats().getPDUlost();
  }
  return downloadLost;
}",0.9848275862068966
107597,"/** 
 * Gets the <tt>java.security.Provider</tt> instance (to be) employed for an optimized AES implementation.
 * @return the <tt>java.security.Provider</tt> instance (to be) employed foran optimized AES implementation
 */
private static Provider getProvider(){
  Provider provider;
synchronized (AES.class) {
    provider=AES.provider;
    if ((provider == null) && useProvider) {
      ConfigurationService cfg=LibJitsi.getConfigurationService();
      String providerName=(cfg == null) ? System.getProperty(PROVIDER_NAME_PNAME) : cfg.getString(PROVIDER_NAME_PNAME);
      try {
        if ((providerName != null) && (providerName.length() != 0)) {
          if (""String_Node_Str"".equals(providerName)) {
            String name=null;
            Package pkg=AES.class.getPackage();
            if (pkg != null)             name=pkg.getName();
            if ((name == null) || (name.length() == 0))             name=""String_Node_Str"";
            provider=new sun.security.pkcs11.SunPKCS11(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          }
 else {
            provider=Security.getProvider(providerName);
          }
        }
      }
  finally {
        if (provider == null)         useProvider=false;
 else         AES.provider=provider;
      }
    }
  }
  return provider;
}","/** 
 * Gets the <tt>java.security.Provider</tt> instance (to be) employed for an optimized AES implementation.
 * @return the <tt>java.security.Provider</tt> instance (to be) employed foran optimized AES implementation
 */
private static Provider getProvider(){
  Provider provider;
synchronized (AES.class) {
    provider=AES.provider;
    if ((provider == null) && useProvider) {
      ConfigurationService cfg=LibJitsi.getConfigurationService();
      String providerName=(cfg == null) ? System.getProperty(PROVIDER_NAME_PNAME) : cfg.getString(PROVIDER_NAME_PNAME);
      try {
        if ((providerName != null) && (providerName.length() != 0)) {
          if (""String_Node_Str"".equals(providerName)) {
            String name=null;
            Package pkg=AES.class.getPackage();
            if (pkg != null)             name=pkg.getName();
            if ((name == null) || (name.length() == 0))             name=""String_Node_Str"";
          }
 else {
            provider=Security.getProvider(providerName);
          }
        }
      }
  finally {
        if (provider == null)         useProvider=false;
 else         AES.provider=provider;
      }
    }
  }
  return provider;
}",0.9444444444444444
107598,"/** 
 * Construct a normal SRTPCryptoContext based on the given parameters.
 * @param ssrc the RTP SSRC that this SRTP cryptographic context protects.
 * @param masterKey byte array holding the master key for this SRTPcryptographic context. Refer to chapter 3.2.1 of the RFC about the role of the master key.
 * @param masterSalt byte array holding the master salt for this SRTPcryptographic context. It is used to computer the initialization vector that in turn is input to compute the session key, session authentication key and the session salt.
 * @param policy SRTP policy for this SRTP cryptographic context, definedthe encryption algorithm, the authentication algorithm, etc
 */
@SuppressWarnings(""String_Node_Str"") public SRTCPCryptoContext(int ssrc,byte[] masterK,byte[] masterS,SRTPPolicy policy){
  this.ssrc=ssrc;
  this.policy=policy;
  int encKeyLength=policy.getEncKeyLength();
  masterKey=new byte[encKeyLength];
  System.arraycopy(masterK,0,masterKey,0,encKeyLength);
  int saltKeyLength=policy.getSaltKeyLength();
  masterSalt=new byte[saltKeyLength];
  System.arraycopy(masterS,0,masterSalt,0,saltKeyLength);
  BlockCipher cipher=null;
  BlockCipher cipherF8=null;
  byte[] encKey=null;
  byte[] saltKey=null;
switch (policy.getEncType()) {
case SRTPPolicy.NULL_ENCRYPTION:
    break;
case SRTPPolicy.AESF8_ENCRYPTION:
  cipherF8=AES.createBlockCipher();
case SRTPPolicy.AESCM_ENCRYPTION:
cipher=AES.createBlockCipher();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
case SRTPPolicy.TWOFISHF8_ENCRYPTION:
cipherF8=new TwofishEngine();
case SRTPPolicy.TWOFISH_ENCRYPTION:
cipher=new TwofishEngine();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
}
this.cipher=cipher;
this.cipherF8=cipherF8;
this.encKey=encKey;
this.saltKey=saltKey;
byte[] authKey;
Mac mac;
byte[] tagStore;
switch (policy.getAuthType()) {
case SRTPPolicy.HMACSHA1_AUTHENTICATION:
mac=new HMac(new SHA1Digest());
authKey=new byte[policy.getAuthKeyLength()];
tagStore=new byte[mac.getMacSize()];
break;
case SRTPPolicy.SKEIN_AUTHENTICATION:
mac=new SkeinMac();
authKey=new byte[policy.getAuthKeyLength()];
tagStore=new byte[policy.getAuthTagLength()];
break;
case SRTPPolicy.NULL_AUTHENTICATION:
default :
authKey=null;
mac=null;
tagStore=null;
break;
}
this.authKey=authKey;
this.mac=mac;
this.tagStore=tagStore;
}","/** 
 * Construct a normal SRTPCryptoContext based on the given parameters.
 * @param ssrc the RTP SSRC that this SRTP cryptographic context protects.
 * @param masterKey byte array holding the master key for this SRTPcryptographic context. Refer to chapter 3.2.1 of the RFC about the role of the master key.
 * @param masterSalt byte array holding the master salt for this SRTPcryptographic context. It is used to computer the initialization vector that in turn is input to compute the session key, session authentication key and the session salt.
 * @param policy SRTP policy for this SRTP cryptographic context, definedthe encryption algorithm, the authentication algorithm, etc
 */
@SuppressWarnings(""String_Node_Str"") public SRTCPCryptoContext(int ssrc,byte[] masterK,byte[] masterS,SRTPPolicy policy){
  this.ssrc=ssrc;
  this.policy=policy;
  int encKeyLength=policy.getEncKeyLength();
  masterKey=new byte[encKeyLength];
  System.arraycopy(masterK,0,masterKey,0,encKeyLength);
  int saltKeyLength=policy.getSaltKeyLength();
  masterSalt=new byte[saltKeyLength];
  System.arraycopy(masterS,0,masterSalt,0,saltKeyLength);
  BlockCipher cipher=null;
  BlockCipher cipherF8=null;
  byte[] encKey=null;
  byte[] saltKey=null;
switch (policy.getEncType()) {
case SRTPPolicy.NULL_ENCRYPTION:
    break;
case SRTPPolicy.AESF8_ENCRYPTION:
  cipherF8=AES.createBlockCipher();
case SRTPPolicy.AESCM_ENCRYPTION:
cipher=AES.createBlockCipher();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
case SRTPPolicy.TWOFISHF8_ENCRYPTION:
cipherF8=new TwofishEngine();
case SRTPPolicy.TWOFISH_ENCRYPTION:
cipher=new TwofishEngine();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
}
this.cipher=cipher;
this.cipherF8=cipherF8;
this.encKey=encKey;
this.saltKey=saltKey;
byte[] authKey;
Mac mac;
byte[] tagStore;
switch (policy.getAuthType()) {
case SRTPPolicy.HMACSHA1_AUTHENTICATION:
mac=new HMac(SHA1.createDigest());
authKey=new byte[policy.getAuthKeyLength()];
tagStore=new byte[mac.getMacSize()];
break;
case SRTPPolicy.SKEIN_AUTHENTICATION:
mac=new SkeinMac();
authKey=new byte[policy.getAuthKeyLength()];
tagStore=new byte[policy.getAuthTagLength()];
break;
case SRTPPolicy.NULL_AUTHENTICATION:
default :
authKey=null;
mac=null;
tagStore=null;
break;
}
this.authKey=authKey;
this.mac=mac;
this.tagStore=tagStore;
}",0.9976610674037848
107599,"/** 
 * Constructs a normal SRTPCryptoContext based on the given parameters.
 * @param sender <tt>true</tt> if the new instance is to be used by an SRTPsender; <tt>false</tt> if the new instance is to be used by an SRTP receiver
 * @param ssrc the RTP SSRC that this SRTP cryptographic context protects.
 * @param roc the initial Roll-Over-Counter according to RFC 3711. Theseare the upper 32 bit of the overall 48 bit SRTP packet index. Refer to chapter 3.2.1 of the RFC.
 * @param keyDerivationRate the key derivation rate defines when torecompute the SRTP session keys. Refer to chapter 4.3.1 in the RFC.
 * @param masterK byte array holding the master key for this SRTPcryptographic context. Refer to chapter 3.2.1 of the RFC about the role of the master key.
 * @param masterS byte array holding the master salt for this SRTPcryptographic context. It is used to computer the initialization vector that in turn is input to compute the session key, session authentication key and the session salt.
 * @param policy SRTP policy for this SRTP cryptographic context, definedthe encryption algorithm, the authentication algorithm, etc
 */
@SuppressWarnings(""String_Node_Str"") public SRTPCryptoContext(boolean sender,int ssrc,int roc,long keyDerivationRate,byte[] masterK,byte[] masterS,SRTPPolicy policy){
  this.sender=sender;
  this.ssrc=ssrc;
  this.roc=roc;
  this.keyDerivationRate=keyDerivationRate;
  this.policy=policy;
  int encKeyLength=policy.getEncKeyLength();
  masterKey=new byte[encKeyLength];
  System.arraycopy(masterK,0,masterKey,0,encKeyLength);
  int saltKeyLength=policy.getSaltKeyLength();
  masterSalt=new byte[saltKeyLength];
  System.arraycopy(masterS,0,masterSalt,0,saltKeyLength);
  BlockCipher cipher=null;
  BlockCipher cipherF8=null;
  byte[] encKey=null;
  byte[] saltKey=null;
switch (policy.getEncType()) {
case SRTPPolicy.NULL_ENCRYPTION:
    break;
case SRTPPolicy.AESF8_ENCRYPTION:
  cipherF8=AES.createBlockCipher();
case SRTPPolicy.AESCM_ENCRYPTION:
cipher=AES.createBlockCipher();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
case SRTPPolicy.TWOFISHF8_ENCRYPTION:
cipherF8=new TwofishEngine();
case SRTPPolicy.TWOFISH_ENCRYPTION:
cipher=new TwofishEngine();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
}
this.cipher=cipher;
this.cipherF8=cipherF8;
this.encKey=encKey;
this.saltKey=saltKey;
byte[] authKey;
Mac mac;
byte[] tagStore;
switch (policy.getAuthType()) {
case SRTPPolicy.HMACSHA1_AUTHENTICATION:
authKey=new byte[policy.getAuthKeyLength()];
mac=new HMac(new SHA1Digest());
tagStore=new byte[mac.getMacSize()];
break;
case SRTPPolicy.SKEIN_AUTHENTICATION:
authKey=new byte[policy.getAuthKeyLength()];
mac=new SkeinMac();
tagStore=new byte[policy.getAuthTagLength()];
break;
case SRTPPolicy.NULL_AUTHENTICATION:
default :
authKey=null;
mac=new HMac(new SHA1Digest());
tagStore=null;
break;
}
this.authKey=authKey;
this.mac=mac;
this.tagStore=tagStore;
readConfigurationServicePropertiesOnce();
}","/** 
 * Constructs a normal SRTPCryptoContext based on the given parameters.
 * @param sender <tt>true</tt> if the new instance is to be used by an SRTPsender; <tt>false</tt> if the new instance is to be used by an SRTP receiver
 * @param ssrc the RTP SSRC that this SRTP cryptographic context protects.
 * @param roc the initial Roll-Over-Counter according to RFC 3711. Theseare the upper 32 bit of the overall 48 bit SRTP packet index. Refer to chapter 3.2.1 of the RFC.
 * @param keyDerivationRate the key derivation rate defines when torecompute the SRTP session keys. Refer to chapter 4.3.1 in the RFC.
 * @param masterK byte array holding the master key for this SRTPcryptographic context. Refer to chapter 3.2.1 of the RFC about the role of the master key.
 * @param masterS byte array holding the master salt for this SRTPcryptographic context. It is used to computer the initialization vector that in turn is input to compute the session key, session authentication key and the session salt.
 * @param policy SRTP policy for this SRTP cryptographic context, definedthe encryption algorithm, the authentication algorithm, etc
 */
@SuppressWarnings(""String_Node_Str"") public SRTPCryptoContext(boolean sender,int ssrc,int roc,long keyDerivationRate,byte[] masterK,byte[] masterS,SRTPPolicy policy){
  this.sender=sender;
  this.ssrc=ssrc;
  this.roc=roc;
  this.keyDerivationRate=keyDerivationRate;
  this.policy=policy;
  int encKeyLength=policy.getEncKeyLength();
  masterKey=new byte[encKeyLength];
  System.arraycopy(masterK,0,masterKey,0,encKeyLength);
  int saltKeyLength=policy.getSaltKeyLength();
  masterSalt=new byte[saltKeyLength];
  System.arraycopy(masterS,0,masterSalt,0,saltKeyLength);
  BlockCipher cipher=null;
  BlockCipher cipherF8=null;
  byte[] encKey=null;
  byte[] saltKey=null;
switch (policy.getEncType()) {
case SRTPPolicy.NULL_ENCRYPTION:
    break;
case SRTPPolicy.AESF8_ENCRYPTION:
  cipherF8=AES.createBlockCipher();
case SRTPPolicy.AESCM_ENCRYPTION:
cipher=AES.createBlockCipher();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
case SRTPPolicy.TWOFISHF8_ENCRYPTION:
cipherF8=new TwofishEngine();
case SRTPPolicy.TWOFISH_ENCRYPTION:
cipher=new TwofishEngine();
encKey=new byte[encKeyLength];
saltKey=new byte[saltKeyLength];
break;
}
this.cipher=cipher;
this.cipherF8=cipherF8;
this.encKey=encKey;
this.saltKey=saltKey;
byte[] authKey;
Mac mac;
byte[] tagStore;
switch (policy.getAuthType()) {
case SRTPPolicy.HMACSHA1_AUTHENTICATION:
authKey=new byte[policy.getAuthKeyLength()];
mac=new HMac(SHA1.createDigest());
tagStore=new byte[mac.getMacSize()];
break;
case SRTPPolicy.SKEIN_AUTHENTICATION:
authKey=new byte[policy.getAuthKeyLength()];
mac=new SkeinMac();
tagStore=new byte[policy.getAuthTagLength()];
break;
case SRTPPolicy.NULL_AUTHENTICATION:
default :
authKey=null;
mac=new HMac(SHA1.createDigest());
tagStore=null;
break;
}
this.authKey=authKey;
this.mac=mac;
this.tagStore=tagStore;
readConfigurationServicePropertiesOnce();
}",0.9963284379172228
107600,"/** 
 * Removes <tt>ssrc</tt> from the array of SSRC identifiers representing parties that this <tt>MediaDeviceSession</tt> is currently receiving streams from.
 * @param ssrc the SSRC identifier that we'd like to remove from the arrayof <tt>ssrc</tt> identifiers stored by this session.
 */
protected void removeSSRC(long ssrc){
  int index=-1;
  if (ssrcList == null || ssrcList.length == 0) {
    return;
  }
  for (int i=0; i < ssrcList.length; i++) {
    if (ssrcList[i] == ssrc) {
      index=i;
      break;
    }
  }
  if (index < 0 || index >= ssrcList.length) {
    return;
  }
  if (ssrcList.length == 1) {
    setSsrcList(null);
    return;
  }
  long[] newSsrcList=new long[ssrcList.length];
  System.arraycopy(ssrcList,0,newSsrcList,0,index);
  if (index < ssrcList.length - 1) {
    System.arraycopy(ssrcList,index + 1,newSsrcList,index,ssrcList.length - index - 1);
  }
  setSsrcList(newSsrcList);
}","/** 
 * Removes <tt>ssrc</tt> from the array of SSRC identifiers representing parties that this <tt>MediaDeviceSession</tt> is currently receiving streams from.
 * @param ssrc the SSRC identifier that we'd like to remove from the arrayof <tt>ssrc</tt> identifiers stored by this session.
 */
protected void removeSSRC(long ssrc){
  int index=-1;
  if (ssrcList == null || ssrcList.length == 0) {
    return;
  }
  for (int i=0; i < ssrcList.length; i++) {
    if (ssrcList[i] == ssrc) {
      index=i;
      break;
    }
  }
  if (index < 0 || index >= ssrcList.length) {
    return;
  }
  if (ssrcList.length == 1) {
    setSsrcList(null);
    return;
  }
  long[] newSsrcList=new long[ssrcList.length - 1];
  System.arraycopy(ssrcList,0,newSsrcList,0,index);
  if (index < ssrcList.length - 1) {
    System.arraycopy(ssrcList,index + 1,newSsrcList,index,ssrcList.length - index - 1);
  }
  setSsrcList(newSsrcList);
}",0.9978189749182116
107601,"/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>Buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  Format format;
  format=buffer.getFormat();
  if (format == null) {
    format=getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RawPacket rtpPacket=rtpFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(rtpPacket.getOffset());
  buffer.setLength(rtpPacket.getPayloadLength());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked) {
    timestamp=System.nanoTime();
  }
  lastReadWasMarked=rtpPacket.isPacketMarked();
  if (lastReadWasMarked) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(timestamp);
  if (lastRtpTimestamp == -1) {
    lastRtpTimestamp=0xffffffffL & rtpPacket.getTimestamp();
    return;
  }
  long previous=lastRtpTimestamp;
  lastRtpTimestamp=0xffffffffL & rtpPacket.getTimestamp();
  long rtpDiff=lastRtpTimestamp - previous;
  if (rtpDiff < 0)   rtpDiff+=1L << 32;
  long nanos=(rtpDiff * 1000 * 1000* 1000) / CLOCK_RATE;
  if (nanos > 0) {
    try {
      Thread.sleep(nanos / 1000000,(int)(nanos % 1000000));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>Buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  Format format;
  format=buffer.getFormat();
  if (format == null) {
    format=getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RawPacket rtpPacket=rtpFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(rtpPacket.getOffset());
  buffer.setLength(rtpPacket.getPayloadLength());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked) {
    timestamp=System.nanoTime();
  }
  lastReadWasMarked=rtpPacket.isPacketMarked();
  if (lastReadWasMarked) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(timestamp);
  if (lastRtpTimestamp == -1) {
    lastRtpTimestamp=0xffffffffL & rtpPacket.getTimestamp();
    return;
  }
  long previous=lastRtpTimestamp;
  lastRtpTimestamp=0xffffffffL & rtpPacket.getTimestamp();
  long rtpDiff=lastRtpTimestamp - previous;
  long nanos=(rtpDiff * 1000 * 1000* 1000) / CLOCK_RATE;
  if (nanos > 0) {
    try {
      Thread.sleep(nanos / 1000000,(int)(nanos % 1000000));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9870466321243524
107602,"/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>Buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  Format format;
  format=buffer.getFormat();
  if (format == null) {
    format=getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RawPacket rtpPacket=rtpFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(rtpPacket.getOffset());
  buffer.setLength(rtpPacket.getPayloadLength());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked) {
    timestamp=System.nanoTime();
  }
  lastReadWasMarked=rtpPacket.isPacketMarked();
  if (lastReadWasMarked) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(timestamp);
  long rtpDiff=rtpPacket.getTimestamp() - this.lastRtpTimestamp;
  if (rtpDiff < 0)   rtpDiff+=1L << 32;
  long nanos=(rtpDiff * 1000 * 1000* 1000) / CLOCK_RATE;
  if (nanos > 0) {
    try {
      Thread.sleep(nanos / 1000000,(int)(nanos % 1000000));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.lastRtpTimestamp=rtpPacket.getTimestamp();
}","/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>Buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  Format format;
  format=buffer.getFormat();
  if (format == null) {
    format=getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RawPacket rtpPacket=rtpFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(rtpPacket.getOffset());
  buffer.setLength(rtpPacket.getPayloadLength());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked) {
    timestamp=System.nanoTime();
  }
  lastReadWasMarked=rtpPacket.isPacketMarked();
  if (lastReadWasMarked) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(timestamp);
  if (lastRtpTimestamp == -1) {
    lastRtpTimestamp=0xffffffffL & rtpPacket.getTimestamp();
    return;
  }
  long previous=lastRtpTimestamp;
  lastRtpTimestamp=0xffffffffL & rtpPacket.getTimestamp();
  long rtpDiff=lastRtpTimestamp - previous;
  if (rtpDiff < 0)   rtpDiff+=1L << 32;
  long nanos=(rtpDiff * 1000 * 1000* 1000) / CLOCK_RATE;
  if (nanos > 0) {
    try {
      Thread.sleep(nanos / 1000000,(int)(nanos % 1000000));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.8988988988988988
107603,"/** 
 * doConnect allow us to initialize the DataSource with informations that we couldn't have in the constructor, like the MediaLocator that give us the path of the ivf file which give us information on the format 
 */
public void doConnect() throws IOException {
  super.doConnect();
  this.fileLocation=getLocator().getRemainder();
  ivfHeader=new IVFHeader(this.fileLocation);
  this.SUPPORTED_FORMATS[0]=new VideoFormat(Constants.VP8,ivfHeader.getDimension(),Format.NOT_SPECIFIED,Format.byteArray,ivfHeader.getFramerate() / ivfHeader.getTimeScale());
}","/** 
 * doConnect allow us to initialize the DataSource with informations that we couldn't have in the constructor, like the MediaLocator that give us the path of the ivf file which give us information on the format 
 */
public void doConnect() throws IOException {
  super.doConnect();
  this.fileLocation=getLocator().getRemainder();
  ivfHeader=new IVFHeader(this.fileLocation);
  this.SUPPORTED_FORMATS[0]=new VideoFormat(Constants.VP8,ivfHeader.getDimension(),Format.NOT_SPECIFIED,Format.byteArray,Format.NOT_SPECIFIED);
}",0.9382488479262672
107604,"/** 
 * Get the next vp8 frame of the IVF file as a <tt>byte</tt> array. You should use this function if you don't want to allocate a new VP8Frame for each call.
 * @param frame the <tt>VP8Frame</tt> that will be filled with theinformations and data of the next frame read.
 * @param loopFile if true and that the end of the file is reached,this <tt>IVFFileReader</tt> will go back at the beginning of the file and start over the reading of the file.
 * @return the next vp8 frame of the IVF file as a <tt>byte</tt> array.
 * @throws IOException if an error occur during the read, of if EOF is reached.
 */
public void getNextFrame(VP8Frame frame,boolean loopFile) throws IOException {
  if ((loopFile == true) && (frameNo >= header.getNumberOfFramesInFile())) {
    stream.seek(header.getHeaderLengh());
    frameNo=0;
  }
  byte[] data;
  int frameSizeInBytes;
  long timestamp;
  frameSizeInBytes=changeEndianness(stream.readInt());
  timestamp=changeEndianness(stream.readLong());
  data=new byte[frameSizeInBytes];
  stream.read(data);
  frameNo++;
  frame.set(timestamp,frameSizeInBytes,data);
}","/** 
 * Get the next vp8 frame of the IVF file as a <tt>byte</tt> array. You should use this function if you don't want to allocate a new VP8Frame for each call.
 * @param frame the <tt>VP8Frame</tt> that will be filled with theinformations and data of the next frame read.
 * @param loopFile if true and that the end of the file is reached,this <tt>IVFFileReader</tt> will go back at the beginning of the file and start over the reading of the file.
 * @return the next vp8 frame of the IVF file as a <tt>byte</tt> array.
 * @throws IOException if an error occur during the read, of if EOF is reached.
 */
public void getNextFrame(VP8Frame frame,boolean loopFile) throws IOException {
  if ((loopFile == true) && (stream.getFilePointer() >= stream.length())) {
    stream.seek(header.getHeaderLengh());
    frameNo=0;
  }
  byte[] data;
  int frameSizeInBytes;
  long timestamp;
  frameSizeInBytes=changeEndianness(stream.readInt());
  timestamp=changeEndianness(stream.readLong());
  data=new byte[frameSizeInBytes];
  stream.read(data);
  frameNo++;
  frame.set(timestamp,frameSizeInBytes,data);
}",0.9668332576101772
107605,"/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  ivfFileReader.getNextFrame(frame,true);
  buffer.setData(frame.getFrameData());
  buffer.setOffset(0);
  buffer.setLength(frame.getFrameLength());
  buffer.setTimeStamp(System.nanoTime());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  millis=System.currentTimeMillis() - this.timeLastRead;
  millis=(frame.getTimestamp() - lastFrameTimestamp) * TIMEBASE - millis;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.lastFrameTimestamp=frame.getTimestamp();
  this.timeLastRead=System.currentTimeMillis();
}","/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long nanos=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  ivfFileReader.getNextFrame(frame,true);
  buffer.setData(frame.getFrameData());
  buffer.setOffset(0);
  buffer.setLength(frame.getFrameLength());
  buffer.setTimeStamp(System.nanoTime());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  nanos=System.nanoTime() - this.timeLastRead;
  nanos=(frame.getTimestamp() - lastFrameTimestamp) * TIMEBASE - nanos;
  if (nanos > 0) {
    try {
      Thread.sleep(nanos / 1000000,(int)(nanos % 1000000));
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.lastFrameTimestamp=frame.getTimestamp();
  this.timeLastRead=System.nanoTime();
}",0.9349357646083714
107606,"/** 
 * Initializes a new <tt>IVFStream</tt> instance which is to have a specific <tt>FormatControl</tt>
 * @param dataSource the <tt>DataSource</tt> which is creating the newinstance so that it becomes one of its <tt>streams</tt>
 * @param formatControl the <tt>FormatControl</tt> of the new instance whichis to specify the format in which it is to provide its media data
 */
IVFStream(DataSource dataSource,FormatControl formatControl){
  super(dataSource,formatControl);
  this.ivfFileReader=new IVFFileReader(dataSource.getLocator().getRemainder());
  this.TIMEBASE=(int)(1000. / ((VideoFormat)getFormat()).getFrameRate());
}","/** 
 * Initializes a new <tt>IVFStream</tt> instance which is to have a specific <tt>FormatControl</tt>
 * @param dataSource the <tt>DataSource</tt> which is creating the newinstance so that it becomes one of its <tt>streams</tt>
 * @param formatControl the <tt>FormatControl</tt> of the new instance whichis to specify the format in which it is to provide its media data
 */
IVFStream(DataSource dataSource,FormatControl formatControl){
  super(dataSource,formatControl);
  this.ivfFileReader=new IVFFileReader(dataSource.getLocator().getRemainder());
  IVFHeader header=ivfFileReader.getHeader();
  this.TIMEBASE=1000000000 * header.getTimeScale() / header.getFramerate();
}",0.891271056661562
107607,"/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  Dimension size=((VideoFormat)format).getSize();
  int frameSizeInBytes=(int)(size.getHeight() * size.getWidth() * 4);
  byte[] data=AbstractCodec2.validateByteArraySize(buffer,frameSizeInBytes,false);
  Arrays.fill(data,0,frameSizeInBytes,(byte)color);
  if (increment)   color+=3;
 else   color-=3;
  if (color >= 255) {
    increment=false;
    color=255;
  }
 else   if (color <= 0) {
    increment=true;
    color=0;
  }
  buffer.setData(data);
  buffer.setOffset(0);
  buffer.setLength(data.length);
  buffer.setTimeStamp(System.nanoTime());
  millis=System.currentTimeMillis() - timeLastRead;
  millis=(long)(1000.0 / format.getFrameRate()) - millis;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  timeLastRead=System.currentTimeMillis();
}","/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  Dimension size=format.getSize();
  int frameSizeInBytes=(int)(size.getHeight() * size.getWidth() * 4);
  byte[] data=AbstractCodec2.validateByteArraySize(buffer,frameSizeInBytes,false);
  Arrays.fill(data,0,frameSizeInBytes,(byte)color);
  if (increment) {
    color+=3;
  }
 else {
    color-=3;
  }
  if (color >= 255) {
    increment=false;
    color=255;
  }
 else   if (color <= 0) {
    increment=true;
    color=0;
  }
  buffer.setData(data);
  buffer.setOffset(0);
  buffer.setLength(frameSizeInBytes);
  buffer.setTimeStamp(System.nanoTime());
  millis=System.currentTimeMillis() - timeLastRead;
  millis=(long)(1000.0 / format.getFrameRate()) - millis;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  timeLastRead=System.currentTimeMillis();
}",0.972554539057002
107608,"void reset(long ssrc){
synchronized (buffers) {
    Buffer buffer=buffers.get(ssrc);
    if (buffer != null)     buffers.remove(buffer);
  }
}","/** 
 * Resets the buffer for a particular SSRC (effectively re-enabling it if it was disabled).
 * @param ssrc
 */
void reset(long ssrc){
synchronized (buffers) {
    Buffer buffer=buffers.get(ssrc);
    if (buffer != null)     buffers.remove(ssrc);
  }
}",0.6834170854271356
107609,"/** 
 * Determines whether a specific <tt>RawPacket</tt> appears to represent an RTCP packet.
 * @param pkt the <tt>RawPacket</tt> to be examined
 * @return <tt>true</tt> if the specified <tt>pkt</tt> appears to representan RTCP packet
 */
private static boolean isRTCP(RawPacket pkt){
  int len=pkt.getLength();
  boolean b=false;
  if (len >= 4) {
    byte[] buf=pkt.getBuffer();
    int off=pkt.getOffset();
    int v=(buf[off] & 0xc0) >>> 6;
    if (v == RTCPHeader.VERSION) {
      int length=(buf[off + 2] << 8) + (buf[off + 3] << 0);
      if (length <= len)       b=true;
    }
  }
  return b;
}","/** 
 * Determines whether a specific <tt>RawPacket</tt> appears to represent an RTCP packet.
 * @param pkt the <tt>RawPacket</tt> to be examined
 * @return <tt>true</tt> if the specified <tt>pkt</tt> appears to representan RTCP packet
 */
private static boolean isRTCP(RawPacket pkt){
  int len=pkt.getLength();
  boolean b=false;
  if (len >= 4) {
    byte[] buf=pkt.getBuffer();
    int off=pkt.getOffset();
    int v=(buf[off] & 0xc0) >>> 6;
    if (v == RTCPHeader.VERSION) {
      int lengthInWords=(buf[off + 2] << 8) + (buf[off + 3] << 0);
      int lengthInBytes=(lengthInWords + 1) * 4;
      if (lengthInBytes <= len)       b=true;
    }
  }
  return b;
}",0.9361702127659576
107610,"/** 
 * Set the type of this session.
 * @param type the <tt>MediaType</tt> of this session
 */
public void setSessionType(MediaType sessionType){
  this.sessionType=sessionType;
}","/** 
 * Set the type of this session.
 * @param sessionType the <tt>MediaType</tt> of this session
 */
public void setSessionType(MediaType sessionType){
  this.sessionType=sessionType;
}",0.9754768392370572
107611,"/** 
 * Initializes a new <tt>SsrcTransformEngine</tt> to be utilized by a specific <tt>MediaStreamImpl</tt>.
 * @param mediaStream the <tt>MediaStreamImpl</tt> to utilize the newinstance
 */
public SsrcTransformEngine(MediaStreamImpl mediaStream){
  Map<Byte,RTPExtension> activeRTPExtensions=mediaStream.getActiveRTPExtensions();
  if ((activeRTPExtensions != null) && !activeRTPExtensions.isEmpty()) {
    for (    Map.Entry<Byte,RTPExtension> e : activeRTPExtensions.entrySet()) {
      RTPExtension rtpExtension=e.getValue();
      String uri=rtpExtension.getURI().toString();
      if (RTPExtension.SSRC_AUDIO_LEVEL_URN.equals(uri)) {
        Byte extID=e.getKey();
        setSsrcAudioLevelExtensionID((extID == null) ? -1 : extID.byteValue(),rtpExtension.getDirection());
      }
    }
  }
  ConfigurationService cfg=LibJitsi.getConfigurationService();
  boolean b=false;
  if (cfg != null) {
    b=cfg.getBoolean(DROP_MUTED_AUDIO_SOURCE_IN_REVERSE_TRANSFORM,b);
  }
  dropMutedAudioSourceInReverseTransform=b;
}","/** 
 * Initializes a new <tt>SsrcTransformEngine</tt> to be utilized by a specific <tt>MediaStreamImpl</tt>.
 * @param mediaStream the <tt>MediaStreamImpl</tt> to utilize the newinstance
 */
public SsrcTransformEngine(MediaStreamImpl mediaStream){
  Map<Byte,RTPExtension> activeRTPExtensions=mediaStream.getActiveRTPExtensions();
  if ((activeRTPExtensions != null) && !activeRTPExtensions.isEmpty()) {
    for (    Map.Entry<Byte,RTPExtension> e : activeRTPExtensions.entrySet()) {
      RTPExtension rtpExtension=e.getValue();
      String uri=rtpExtension.getURI().toString();
      if (RTPExtension.SSRC_AUDIO_LEVEL_URN.equals(uri)) {
        Byte extID=e.getKey();
        setSsrcAudioLevelExtensionID((extID == null) ? -1 : extID.byteValue(),rtpExtension.getDirection());
      }
    }
  }
  dropMutedAudioSourceInReverseTransform=false;
}",0.8677021960364221
107612,"/** 
 * The size in bytes of the Payload Descriptor at offset <tt>offset</tt> in <tt>input</tt>. The size is between 1 and 6.
 * @param input input
 * @param offset offset
 * @return The size in bytes of the Payload Descriptor at offset<tt>offset</tt> in <tt>input</tt>. The size is between 1 and 6.
 * @throws Exception if there isn't a valid Payload Descriptor structureat offset <tt>offset</tt> in <tt>input</tt>.
 */
public static int getSize(byte[] input,int offset) throws Exception {
  if (input.length < offset + 1)   throw new Exception(""String_Node_Str"");
  if ((input[offset] & X_BIT) == 0)   return 1;
  int size=1;
  if ((input[offset + 1] & I_BIT) != 0) {
    size++;
    if ((input[offset + 2] & M_BIT) != 0)     size++;
  }
  if ((input[offset + 1] & L_BIT) != 0)   size++;
  if ((input[offset + 1] & (T_BIT | K_BIT)) != 0)   size++;
  return size;
}","/** 
 * The size in bytes of the Payload Descriptor at offset <tt>offset</tt> in <tt>input</tt>. The size is between 1 and 6.
 * @param input input
 * @param offset offset
 * @return The size in bytes of the Payload Descriptor at offset<tt>offset</tt> in <tt>input</tt>. The size is between 1 and 6.
 * @throws Exception if there isn't a valid Payload Descriptor structureat offset <tt>offset</tt> in <tt>input</tt>.
 */
public static int getSize(byte[] input,int offset) throws Exception {
  if (input.length < offset + 1)   throw new Exception(""String_Node_Str"");
  if ((input[offset] & X_BIT) == 0)   return 1;
  int size=2;
  if ((input[offset + 1] & I_BIT) != 0) {
    size++;
    if ((input[offset + 2] & M_BIT) != 0)     size++;
  }
  if ((input[offset + 1] & L_BIT) != 0)   size++;
  if ((input[offset + 1] & (T_BIT | K_BIT)) != 0)   size++;
  return size;
}",0.9988452655889144
107613,"/** 
 * Returns all available <tt>ScreenDevice</tt>s.
 * @return an array of all available <tt>ScreenDevice</tt>s
 */
public static ScreenDevice[] getAvailableScreenDevices(){
  GraphicsEnvironment ge;
  try {
    ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  }
 catch (  NoClassDefFoundError ncdfe) {
    ge=null;
  }
  ScreenDevice[] screens=null;
  if ((ge != null) && !ge.isHeadlessInstance()) {
    GraphicsDevice[] devices=ge.getScreenDevices();
    if ((devices != null) && (devices.length != 0)) {
      screens=new ScreenDevice[devices.length];
      int i=0;
      for (      GraphicsDevice dev : devices) {
        screens[i]=new ScreenDeviceImpl(i,dev);
        i++;
      }
    }
  }
  return (screens == null) ? EMPTY_SCREEN_DEVICE_ARRAY : screens;
}","/** 
 * Returns all available <tt>ScreenDevice</tt>s.
 * @return an array of all available <tt>ScreenDevice</tt>s
 */
public static ScreenDevice[] getAvailableScreenDevices(){
  GraphicsEnvironment ge;
  try {
    ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  }
 catch (  Throwable t) {
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
 else     ge=null;
  }
  ScreenDevice[] screens=null;
  if ((ge != null) && !ge.isHeadlessInstance()) {
    GraphicsDevice[] devices=ge.getScreenDevices();
    if ((devices != null) && (devices.length != 0)) {
      screens=new ScreenDevice[devices.length];
      int i=0;
      for (      GraphicsDevice dev : devices) {
        screens[i]=new ScreenDeviceImpl(i,dev);
        i++;
      }
    }
  }
  return (screens == null) ? EMPTY_SCREEN_DEVICE_ARRAY : screens;
}",0.936835522201376
107614,"/** 
 * Returns the meta <tt>PacketTransformer</tt> that will be applying RTCP transformations from all engines registered in this <tt>TransformEngineChain</tt>.
 * @return a <tt>PacketTransformerChain</tt> over all RTCP transformers inthis engine chain.
 */
public PacketTransformer getRTCPTransformer(){
  return rtcpTransformChain;
}","/** 
 * Returns the meta <tt>PacketTransformer</tt> that will be applying RTCP transformations from all engines registered in this <tt>TransformEngineChain</tt>.
 * @return a <tt>PacketTransformerChain</tt> over all RTCP transformers inthis engine chain.
 */
public PacketTransformer getRTCPTransformer(){
  boolean invokeOnEngineChain;
  PacketTransformer rtpTransformer;
synchronized (this) {
    if (rtcpTransformChain == null) {
      rtcpTransformChain=new PacketTransformerChain(false);
      invokeOnEngineChain=true;
    }
 else {
      invokeOnEngineChain=false;
    }
    rtpTransformer=rtcpTransformChain;
  }
  if (invokeOnEngineChain) {
    for (    TransformEngine engine : engineChain)     engine.getRTCPTransformer();
  }
  return rtpTransformer;
}",0.5672727272727273
107615,"/** 
 * Creates a new <tt>TransformEngineChain</tt> using the <tt>engineChain</tt> array. Engines will be applied in the order specified by the <tt>engineChain</tt> array for outgoing packets and in the reverse order for incoming packets.
 * @param engineChain an array containing <tt>TransformEngine</tt>s in theorder that they are to be applied on outgoing packets.
 */
public TransformEngineChain(TransformEngine[] engineChain){
  this.engineChain=engineChain.clone();
  rtpTransformChain=new PacketTransformerChain(true);
  rtcpTransformChain=new PacketTransformerChain(false);
}","/** 
 * Creates a new <tt>TransformEngineChain</tt> using the <tt>engineChain</tt> array. Engines will be applied in the order specified by the <tt>engineChain</tt> array for outgoing packets and in the reverse order for incoming packets.
 * @param engineChain an array containing <tt>TransformEngine</tt>s in theorder that they are to be applied on outgoing packets.
 */
public TransformEngineChain(TransformEngine[] engineChain){
  this.engineChain=engineChain.clone();
}",0.8958333333333334
107616,"/** 
 * Returns the meta <tt>PacketTransformer</tt> that will be applying RTCP transformations from all engines registered in this <tt>TransformEngineChain</tt>.
 * @return a <tt>PacketTransformerChain</tt> over all RTP transformers inthis engine chain.
 */
public PacketTransformer getRTPTransformer(){
  return rtpTransformChain;
}","/** 
 * Returns the meta <tt>PacketTransformer</tt> that will be applying RTCP transformations from all engines registered in this <tt>TransformEngineChain</tt>.
 * @return a <tt>PacketTransformerChain</tt> over all RTP transformers inthis engine chain.
 */
public PacketTransformer getRTPTransformer(){
  boolean invokeOnEngineChain;
  PacketTransformer rtpTransformer;
synchronized (this) {
    if (rtpTransformChain == null) {
      rtpTransformChain=new PacketTransformerChain(true);
      invokeOnEngineChain=true;
    }
 else {
      invokeOnEngineChain=false;
    }
    rtpTransformer=rtpTransformChain;
  }
  if (invokeOnEngineChain) {
    for (    TransformEngine engine : engineChain)     engine.getRTPTransformer();
  }
  return rtpTransformer;
}",0.5688073394495413
107617,"/** 
 * Copies the content of the most recently received packet into <tt>buffer</tt>.
 * @param buffer the <tt>byte[]</tt> that we'd like to copy the content ofthe packet to.
 * @param offset the position where we are supposed to start writing in<tt>buffer</tt>.
 * @param length the number of <tt>byte</tt>s available for writing in<tt>buffer</tt>.
 * @return the number of bytes read
 * @throws IOException if <tt>length</tt> is less than the size of thepacket.
 */
public int read(byte[] buffer,int offset,int length) throws IOException {
  if (ioError)   return -1;
  int pktLength=pkt.getLength();
  if (length < pktLength) {
    throw new IOException(""String_Node_Str"" + pktLength);
  }
  System.arraycopy(pkt.getBuffer(),pkt.getOffset(),buffer,offset,pktLength);
  return pktLength;
}","/** 
 * Copies the content of the most recently received packet into <tt>buffer</tt>.
 * @param buffer the <tt>byte[]</tt> that we'd like to copy the content ofthe packet to.
 * @param offset the position where we are supposed to start writing in<tt>buffer</tt>.
 * @param length the number of <tt>byte</tt>s available for writing in<tt>buffer</tt>.
 * @return the number of bytes read
 * @throws IOException if <tt>length</tt> is less than the size of thepacket.
 */
public int read(byte[] buffer,int offset,int length) throws IOException {
  if (buffer == null)   throw new NullPointerException(""String_Node_Str"");
  if (ioError)   return -1;
  RawPacket pkt;
synchronized (pktSyncRoot) {
    pkt=this.pkt;
    this.pkt=null;
  }
  int pktLength;
  if (pkt == null) {
    pktLength=0;
  }
 else {
    boolean poolPkt=true;
    try {
      pktLength=pkt.getLength();
      if (length < pktLength) {
        poolPkt=false;
        throw new IOException(""String_Node_Str"" + pktLength);
      }
 else {
        byte[] pktBuffer=pkt.getBuffer();
        if (pktBuffer == null) {
          throw new NullPointerException(""String_Node_Str"" + pktLength + ""String_Node_Str""+ pkt.getOffset());
        }
 else {
          System.arraycopy(pkt.getBuffer(),pkt.getOffset(),buffer,offset,pktLength);
        }
      }
    }
  finally {
      if (!poolPkt) {
synchronized (pktSyncRoot) {
          if (this.pkt == null)           this.pkt=pkt;
 else           poolPkt=true;
        }
      }
      if (poolPkt) {
        pkt.setBuffer(null);
        pkt.setLength(0);
        pkt.setOffset(0);
        rawPacketPool.offer(pkt);
      }
    }
  }
  return pktLength;
}",0.6295993458708095
107618,"/** 
 * Listens for incoming datagrams, stores them for reading by the <tt>read</tt> method and notifies the local <tt>transferHandler</tt> that there's data to be read.
 */
public void run(){
  DatagramPacket p=new DatagramPacket(buffer,0,PACKET_RECEIVE_BUFFER_LENGTH);
  while (!closed) {
    try {
      if (OSUtils.IS_ANDROID)       p.setLength(PACKET_RECEIVE_BUFFER_LENGTH);
      receivePacket(p);
    }
 catch (    IOException e) {
      ioError=true;
      break;
    }
    DatagramPacketFilter[] datagramPacketFilters=getDatagramPacketFilters();
    boolean accept;
    if (datagramPacketFilters == null)     accept=true;
 else {
      accept=true;
      for (int i=0; i < datagramPacketFilters.length; i++) {
        try {
          if (!datagramPacketFilters[i].accept(p)) {
            accept=false;
            break;
          }
        }
 catch (        Throwable t) {
          if (t instanceof ThreadDeath)           throw (ThreadDeath)t;
        }
      }
    }
    if (accept) {
      pkt=createRawPacket(p);
      if ((pkt != null) && (!pkt.isInvalid()) && (transferHandler != null)&& !closed)       transferHandler.transferData(this);
    }
  }
}","/** 
 * Listens for incoming datagrams, stores them for reading by the <tt>read</tt> method and notifies the local <tt>transferHandler</tt> that there's data to be read.
 */
public void run(){
  DatagramPacket p=new DatagramPacket(buffer,0,PACKET_RECEIVE_BUFFER_LENGTH);
  while (!closed) {
    try {
      if (OSUtils.IS_ANDROID)       p.setLength(PACKET_RECEIVE_BUFFER_LENGTH);
      receivePacket(p);
    }
 catch (    IOException e) {
      ioError=true;
      break;
    }
    DatagramPacketFilter[] datagramPacketFilters=getDatagramPacketFilters();
    boolean accept;
    if (datagramPacketFilters == null)     accept=true;
 else {
      accept=true;
      for (int i=0; i < datagramPacketFilters.length; i++) {
        try {
          if (!datagramPacketFilters[i].accept(p)) {
            accept=false;
            break;
          }
        }
 catch (        Throwable t) {
          if (t instanceof ThreadDeath)           throw (ThreadDeath)t;
        }
      }
    }
    if (accept) {
      RawPacket pkt=createRawPacket(p);
      if (pkt != null) {
        if (pkt.isInvalid()) {
          pkt.setBuffer(null);
          pkt.setLength(0);
          pkt.setOffset(0);
          rawPacketPool.offer(pkt);
        }
 else {
          RawPacket oldPkt;
synchronized (pktSyncRoot) {
            oldPkt=this.pkt;
            this.pkt=pkt;
          }
          if (oldPkt != null) {
            oldPkt.setBuffer(null);
            oldPkt.setLength(0);
            oldPkt.setOffset(0);
            rawPacketPool.offer(pkt);
          }
          if ((transferHandler != null) && !closed) {
            try {
              transferHandler.transferData(this);
            }
 catch (            Throwable t) {
              if (t instanceof ThreadDeath) {
                throw (ThreadDeath)t;
              }
 else {
                logger.warn(""String_Node_Str"" + ""String_Node_Str"",t);
              }
            }
          }
        }
      }
    }
  }
}",0.6837060702875399
107619,"/** 
 * Provides a dummy implementation to   {@link RTPConnectorInputStream#getContentLength()} that always returns<tt>LENGTH_UNKNOWN</tt>.
 * @return <tt>LENGTH_UNKNOWN</tt>, no matter what.
 */
public long getContentLength(){
  return pkt.getLength();
}","/** 
 * Provides a dummy implementation to   {@link RTPConnectorInputStream#getContentLength()} that always returns<tt>LENGTH_UNKNOWN</tt>.
 * @return <tt>LENGTH_UNKNOWN</tt>, no matter what.
 */
public long getContentLength(){
  return LENGTH_UNKNOWN;
}",0.9430255402750491
107620,"/** 
 * Creates a new <tt>RawPacket</tt> from a specific <tt>DatagramPacket</tt> in order to have this instance receive its packet data through its  {@link #read(byte[],int,int)} method. Allows extenders to intercept thepacket data and possibly filter and/or modify it.
 * @param datagramPacket the <tt>DatagramPacket</tt> containing the packetdata
 * @return a new <tt>RawPacket</tt> containing the packet data of thespecified <tt>DatagramPacket</tt> or possibly its modification; <tt>null</tt> to ignore the packet data of the specified <tt>DatagramPacket</tt> and not make it available to this instance through its  {@link #read(byte[],int,int)} method
 */
protected RawPacket createRawPacket(DatagramPacket datagramPacket){
  if (pkt == null) {
    return new RawPacket(datagramPacket.getData(),datagramPacket.getOffset(),datagramPacket.getLength());
  }
  pkt.setBuffer(datagramPacket.getData());
  pkt.setLength(datagramPacket.getLength());
  pkt.setOffset(datagramPacket.getOffset());
  return pkt;
}","/** 
 * Creates a new <tt>RawPacket</tt> from a specific <tt>DatagramPacket</tt> in order to have this instance receive its packet data through its  {@link #read(byte[],int,int)} method. Allows extenders to intercept thepacket data and possibly filter and/or modify it.
 * @param datagramPacket the <tt>DatagramPacket</tt> containing the packetdata
 * @return a new <tt>RawPacket</tt> containing the packet data of thespecified <tt>DatagramPacket</tt> or possibly its modification; <tt>null</tt> to ignore the packet data of the specified <tt>DatagramPacket</tt> and not make it available to this instance through its  {@link #read(byte[],int,int)} method
 */
protected RawPacket createRawPacket(DatagramPacket datagramPacket){
  RawPacket pkt=rawPacketPool.poll();
  if (pkt == null) {
    pkt=new RawPacket(datagramPacket.getData(),datagramPacket.getOffset(),datagramPacket.getLength());
  }
 else {
    pkt.setBuffer(datagramPacket.getData());
    pkt.setLength(datagramPacket.getLength());
    pkt.setOffset(datagramPacket.getOffset());
  }
  return pkt;
}",0.9675858732462506
107621,"/** 
 * {@inheritDoc}The implementation of <tt>DtlsControlImpl</tt> always returns <tt>true</tt>.
 */
public boolean requiresSecureSignalingTransport(){
  return true;
}","/** 
 * {@inheritDoc}The implementation of <tt>DtlsControlImpl</tt> always returns <tt>true</tt>.
 */
@Override public boolean requiresSecureSignalingTransport(){
  return true;
}",0.971264367816092
107622,"/** 
 * {@inheritDoc}
 */
public String getLocalFingerprint(){
  return localFingerprint;
}","/** 
 * {@inheritDoc}
 */
@Override public String getLocalFingerprint(){
  return localFingerprint;
}",0.9479166666666666
107623,"/** 
 * {@inheritDoc}
 */
public void start(MediaType mediaType){
  DtlsTransformEngine transformEngine=getTransformEngine();
  if (transformEngine != null)   transformEngine.start(mediaType);
}","/** 
 * {@inheritDoc}
 */
@Override public void start(MediaType mediaType){
  DtlsTransformEngine transformEngine=getTransformEngine();
  if (transformEngine != null)   transformEngine.start(mediaType);
}",0.9748743718592964
107624,"/** 
 * {@inheritDoc}
 */
public void setRemoteFingerprints(Map<String,String> remoteFingerprints){
  if (remoteFingerprints == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (this) {
    this.remoteFingerprints=remoteFingerprints;
    notifyAll();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setRemoteFingerprints(Map<String,String> remoteFingerprints){
  if (remoteFingerprints == null)   throw new NullPointerException(""String_Node_Str"");
synchronized (this) {
    this.remoteFingerprints=remoteFingerprints;
    notifyAll();
  }
}",0.9823943661971832
107625,"/** 
 * {@inheritDoc}
 */
public void setConnector(AbstractRTPConnector connector){
  if (this.connector != connector) {
    this.connector=connector;
    DtlsTransformEngine transformEngine=this.transformEngine;
    if (transformEngine != null)     transformEngine.setConnector(this.connector);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setConnector(AbstractRTPConnector connector){
  if (this.connector != connector) {
    this.connector=connector;
    DtlsTransformEngine transformEngine=this.transformEngine;
    if (transformEngine != null)     transformEngine.setConnector(this.connector);
  }
}",0.9836601307189542
107626,"/** 
 * {@inheritDoc}
 */
public boolean getSecureCommunicationStatus(){
  return false;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean getSecureCommunicationStatus(){
  return false;
}",0.9473684210526316
107627,"/** 
 * {@inheritDoc}
 */
public String getLocalFingerprintHashFunction(){
  return localFingerprintHashFunction;
}","/** 
 * {@inheritDoc}
 */
@Override public String getLocalFingerprintHashFunction(){
  return localFingerprintHashFunction;
}",0.9583333333333334
107628,"/** 
 * Initializes a new <tt>DtlsTransformEngine</tt> instance to be associated with and used by this <tt>DtlsControlImpl</tt> instance.
 * @return a new <tt>DtlsTransformEngine</tt> instance to be associated withand used by this <tt>DtlsControlImpl</tt> instance
 */
protected DtlsTransformEngine createTransformEngine(){
  DtlsTransformEngine transformEngine=new DtlsTransformEngine(this);
  transformEngine.setConnector(connector);
  transformEngine.setDtlsProtocol(dtlsProtocol);
  return transformEngine;
}","/** 
 * Initializes a new <tt>DtlsTransformEngine</tt> instance to be associated with and used by this <tt>DtlsControlImpl</tt> instance.
 * @return a new <tt>DtlsTransformEngine</tt> instance to be associated withand used by this <tt>DtlsControlImpl</tt> instance
 */
@Override protected DtlsTransformEngine createTransformEngine(){
  DtlsTransformEngine transformEngine=new DtlsTransformEngine(this);
  transformEngine.setConnector(connector);
  transformEngine.setSetup(setup);
  return transformEngine;
}",0.9568627450980391
107629,"/** 
 * Starts this <tt>PacketTransformer</tt>.
 */
private synchronized void start(){
  if (this.datagramTransport != null) {
    if ((this.connectThread == null) && (dtlsTransport == null)) {
      logger.warn(getClass().getName() + ""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  int dtlsProtocol=this.dtlsProtocol;
  if ((dtlsProtocol != DtlsControl.DTLS_CLIENT_PROTOCOL) && (dtlsProtocol != DtlsControl.DTLS_SERVER_PROTOCOL))   throw new IllegalStateException(""String_Node_Str"");
  AbstractRTPConnector connector=this.connector;
  if (connector == null)   throw new NullPointerException(""String_Node_Str"");
  SecureRandom secureRandom=new SecureRandom();
  final DTLSProtocol dtlsProtocolObj;
  final TlsPeer tlsPeer;
  if (dtlsProtocol == DtlsControl.DTLS_CLIENT_PROTOCOL) {
    dtlsProtocolObj=new DTLSClientProtocol(secureRandom);
    tlsPeer=new TlsClientImpl(this);
  }
 else {
    dtlsProtocolObj=new DTLSServerProtocol(secureRandom);
    tlsPeer=new TlsServerImpl(this);
  }
  final DatagramTransportImpl datagramTransport=new DatagramTransportImpl(componentID);
  datagramTransport.setConnector(connector);
  Thread connectThread=new Thread(){
    @Override public void run(){
      try {
        runInConnectThread(dtlsProtocolObj,tlsPeer,datagramTransport);
      }
  finally {
        if (Thread.currentThread().equals(DtlsPacketTransformer.this.connectThread)) {
          DtlsPacketTransformer.this.connectThread=null;
        }
      }
    }
  }
;
  connectThread.setDaemon(true);
  connectThread.setName(DtlsPacketTransformer.class.getName() + ""String_Node_Str"");
  this.connectThread=connectThread;
  this.datagramTransport=datagramTransport;
  boolean started=false;
  try {
    connectThread.start();
    started=true;
  }
  finally {
    if (!started) {
      if (connectThread.equals(this.connectThread))       this.connectThread=null;
      if (datagramTransport.equals(this.datagramTransport))       this.datagramTransport=null;
    }
  }
  notifyAll();
}","/** 
 * Starts this <tt>PacketTransformer</tt>.
 */
private synchronized void start(){
  if (this.datagramTransport != null) {
    if ((this.connectThread == null) && (dtlsTransport == null)) {
      logger.warn(getClass().getName() + ""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  AbstractRTPConnector connector=this.connector;
  if (connector == null)   throw new NullPointerException(""String_Node_Str"");
  DtlsControl.Setup setup=this.setup;
  SecureRandom secureRandom=new SecureRandom();
  final DTLSProtocol dtlsProtocolObj;
  final TlsPeer tlsPeer;
  if (DtlsControl.Setup.ACTIVE.equals(setup)) {
    dtlsProtocolObj=new DTLSClientProtocol(secureRandom);
    tlsPeer=new TlsClientImpl(this);
  }
 else {
    dtlsProtocolObj=new DTLSServerProtocol(secureRandom);
    tlsPeer=new TlsServerImpl(this);
  }
  final DatagramTransportImpl datagramTransport=new DatagramTransportImpl(componentID);
  datagramTransport.setConnector(connector);
  Thread connectThread=new Thread(){
    @Override public void run(){
      try {
        runInConnectThread(dtlsProtocolObj,tlsPeer,datagramTransport);
      }
  finally {
        if (Thread.currentThread().equals(DtlsPacketTransformer.this.connectThread)) {
          DtlsPacketTransformer.this.connectThread=null;
        }
      }
    }
  }
;
  connectThread.setDaemon(true);
  connectThread.setName(DtlsPacketTransformer.class.getName() + ""String_Node_Str"");
  this.connectThread=connectThread;
  this.datagramTransport=datagramTransport;
  boolean started=false;
  try {
    connectThread.start();
    started=true;
  }
  finally {
    if (!started) {
      if (connectThread.equals(this.connectThread))       this.connectThread=null;
      if (datagramTransport.equals(this.datagramTransport))       this.datagramTransport=null;
    }
  }
  notifyAll();
}",0.86282722513089
107630,"/** 
 * Initializes a new <tt>DtlsPacketTransformer</tt> instance which is to work on control/RTCP or data/RTP packets.
 * @param componentID the ID of the component for which the new instance isto work
 * @return a new <tt>DtlsPacketTransformer</tt> instance which is to work oncontrol/RTCP or data/RTP packets (in accord with <tt>data</tt>)
 */
private DtlsPacketTransformer createPacketTransformer(int componentID){
  DtlsPacketTransformer packetTransformer=new DtlsPacketTransformer(this,componentID);
  packetTransformer.setConnector(connector);
  packetTransformer.setDtlsProtocol(dtlsProtocol);
  packetTransformer.setMediaType(mediaType);
  return packetTransformer;
}","/** 
 * Initializes a new <tt>DtlsPacketTransformer</tt> instance which is to work on control/RTCP or data/RTP packets.
 * @param componentID the ID of the component for which the new instance isto work
 * @return a new <tt>DtlsPacketTransformer</tt> instance which is to work oncontrol/RTCP or data/RTP packets (in accord with <tt>data</tt>)
 */
private DtlsPacketTransformer createPacketTransformer(int componentID){
  DtlsPacketTransformer packetTransformer=new DtlsPacketTransformer(this,componentID);
  packetTransformer.setConnector(connector);
  packetTransformer.setSetup(setup);
  packetTransformer.setMediaType(mediaType);
  return packetTransformer;
}",0.9745889387144993
107631,"/** 
 * Sets the preset.
 * @param preset the desired video settings
 * @throws OperationFailedException
 */
private void setRemoteReceivePreset(QualityPreset preset) throws OperationFailedException {
  if (preset.compareTo(getPreferredSendPreset()) > 0)   this.preset=getPreferredSendPreset();
 else {
    this.preset=preset;
    Dimension resolution;
    if (logger.isInfoEnabled() && (preset != null) && ((resolution=preset.getResolution()) != null)) {
      logger.info(""String_Node_Str"" + resolution.width + ""String_Node_Str""+ resolution.height);
    }
  }
}","/** 
 * Sets the preset.
 * @param preset the desired video settings
 * @throws OperationFailedException
 */
private void setRemoteReceivePreset(QualityPreset preset) throws OperationFailedException {
  QualityPreset preferredSendPreset=getPreferredSendPreset();
  if (preset.compareTo(preferredSendPreset) > 0)   this.preset=preferredSendPreset;
 else {
    this.preset=preset;
    Dimension resolution;
    if (logger.isInfoEnabled() && (preset != null) && ((resolution=preset.getResolution()) != null)) {
      logger.info(""String_Node_Str"" + resolution.width + ""String_Node_Str""+ resolution.height);
    }
  }
}",0.8743633276740238
107632,"/** 
 * Returns the FMJ format of a specific <tt>InputStream</tt> providing audio media.
 * @param audioInputStream the <tt>InputStream</tt> providing audio media todetermine the FMJ format of
 * @return the FMJ format of the specified <tt>audioInputStream</tt> or<tt>null</tt> if such an FMJ format could not be determined
 */
public Format getFormat(InputStream audioInputStream){
  if ((audioInputStream instanceof AudioInputStream)) {
    AudioFormat audioInputStreamFormat=((AudioInputStream)audioInputStream).getFormat();
    return new javax.media.format.AudioFormat(javax.media.format.AudioFormat.LINEAR,audioInputStreamFormat.getSampleRate(),audioInputStreamFormat.getSampleSizeInBits(),audioInputStreamFormat.getChannels());
  }
  return null;
}","/** 
 * Returns the FMJ format of a specific <tt>InputStream</tt> providing audio media.
 * @param audioInputStream the <tt>InputStream</tt> providing audio media todetermine the FMJ format of
 * @return the FMJ format of the specified <tt>audioInputStream</tt> or<tt>null</tt> if such an FMJ format could not be determined
 */
public javax.media.format.AudioFormat getFormat(InputStream audioInputStream){
  if ((audioInputStream instanceof AudioInputStream)) {
    AudioFormat af=((AudioInputStream)audioInputStream).getFormat();
    return new javax.media.format.AudioFormat(javax.media.format.AudioFormat.LINEAR,af.getSampleRate(),af.getSampleSizeInBits(),af.getChannels());
  }
  return null;
}",0.922971114167813
107633,"@Override protected boolean runOnceInPlayThread(){
  InputStream audioStream=null;
  try {
    audioStream=audioSystem.getAudioInputStream(uri);
  }
 catch (  IOException ioex) {
    logger.error(""String_Node_Str"" + uri,ioex);
  }
  if (audioStream == null)   return false;
  Codec resampler=null;
  try {
    Format rendererFormat=audioSystem.getFormat(audioStream);
    if (rendererFormat == null)     return false;
    Format resamplerFormat=null;
    if (renderer.setInputFormat(rendererFormat) == null) {
      resampler=new SpeexResampler();
      resamplerFormat=rendererFormat;
      resampler.setInputFormat(resamplerFormat);
      Format[] supportedResamplerFormats=resampler.getSupportedOutputFormats(resamplerFormat);
      for (      Format supportedRendererFormat : renderer.getSupportedInputFormats()) {
        for (        Format supportedResamplerFormat : supportedResamplerFormats) {
          if (supportedRendererFormat.matches(supportedResamplerFormat)) {
            rendererFormat=supportedRendererFormat;
            resampler.setOutputFormat(rendererFormat);
            renderer.setInputFormat(rendererFormat);
            break;
          }
        }
      }
    }
    Buffer rendererBuffer=buffer;
    Buffer resamplerBuffer;
    rendererBuffer.setFormat(rendererFormat);
    if (resampler == null)     resamplerBuffer=null;
 else {
      resamplerBuffer=new Buffer();
      int bufferDataLength=DEFAULT_BUFFER_DATA_LENGTH;
      if (resamplerFormat instanceof AudioFormat) {
        AudioFormat af=(AudioFormat)resamplerFormat;
        int frameSize=af.getSampleSizeInBits() / 8 * af.getChannels();
        bufferDataLength=bufferDataLength / frameSize * frameSize;
      }
      bufferData=new byte[bufferDataLength];
      resamplerBuffer.setData(bufferData);
      resamplerBuffer.setFormat(resamplerFormat);
      resampler.open();
    }
    try {
      renderer.open();
      renderer.start();
      int bufferLength;
      while (isStarted() && ((bufferLength=audioStream.read(bufferData)) != -1)) {
        if (resampler == null) {
          rendererBuffer.setLength(bufferLength);
          rendererBuffer.setOffset(0);
        }
 else {
          resamplerBuffer.setLength(bufferLength);
          resamplerBuffer.setOffset(0);
          rendererBuffer.setLength(0);
          rendererBuffer.setOffset(0);
          resampler.process(resamplerBuffer,rendererBuffer);
        }
        while ((renderer.process(rendererBuffer) & Renderer.INPUT_BUFFER_NOT_CONSUMED) == Renderer.INPUT_BUFFER_NOT_CONSUMED)         ;
      }
    }
 catch (    IOException ioex) {
      logger.error(""String_Node_Str"" + uri,ioex);
      return false;
    }
catch (    ResourceUnavailableException ruex) {
      logger.error(""String_Node_Str"" + renderer.getClass().getName(),ruex);
      return false;
    }
  }
 catch (  ResourceUnavailableException ruex) {
    if (resampler != null) {
      logger.error(""String_Node_Str"" + resampler.getClass().getName(),ruex);
      return false;
    }
  }
 finally {
    try {
      audioStream.close();
    }
 catch (    IOException ioex) {
    }
    if (resampler != null)     resampler.close();
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
protected boolean runOnceInPlayThread(){
  InputStream audioStream=null;
  try {
    audioStream=audioSystem.getAudioInputStream(uri);
  }
 catch (  IOException ioex) {
    logger.error(""String_Node_Str"" + uri,ioex);
  }
  if (audioStream == null)   return false;
  Codec resampler=null;
  boolean success=true;
  AudioFormat audioStreamFormat=null;
  int audioStreamLength=0;
  long rendererProcessStartTime=0;
  try {
    Format rendererFormat=audioStreamFormat=audioSystem.getFormat(audioStream);
    if (rendererFormat == null)     return false;
    Format resamplerFormat=null;
    if (renderer.setInputFormat(rendererFormat) == null) {
      resampler=new SpeexResampler();
      resamplerFormat=rendererFormat;
      resampler.setInputFormat(resamplerFormat);
      Format[] supportedResamplerFormats=resampler.getSupportedOutputFormats(resamplerFormat);
      for (      Format supportedRendererFormat : renderer.getSupportedInputFormats()) {
        for (        Format supportedResamplerFormat : supportedResamplerFormats) {
          if (supportedRendererFormat.matches(supportedResamplerFormat)) {
            rendererFormat=supportedRendererFormat;
            resampler.setOutputFormat(rendererFormat);
            renderer.setInputFormat(rendererFormat);
            break;
          }
        }
      }
    }
    Buffer rendererBuffer=buffer;
    Buffer resamplerBuffer;
    rendererBuffer.setFormat(rendererFormat);
    if (resampler == null)     resamplerBuffer=null;
 else {
      resamplerBuffer=new Buffer();
      int bufferDataLength=DEFAULT_BUFFER_DATA_LENGTH;
      if (resamplerFormat instanceof AudioFormat) {
        AudioFormat af=(AudioFormat)resamplerFormat;
        int frameSize=af.getSampleSizeInBits() / 8 * af.getChannels();
        bufferDataLength=bufferDataLength / frameSize * frameSize;
      }
      bufferData=new byte[bufferDataLength];
      resamplerBuffer.setData(bufferData);
      resamplerBuffer.setFormat(resamplerFormat);
      resampler.open();
    }
    try {
      renderer.open();
      renderer.start();
      int bufferLength;
      while (isStarted() && ((bufferLength=audioStream.read(bufferData)) != -1)) {
        audioStreamLength+=bufferLength;
        if (resampler == null) {
          rendererBuffer.setLength(bufferLength);
          rendererBuffer.setOffset(0);
        }
 else {
          resamplerBuffer.setLength(bufferLength);
          resamplerBuffer.setOffset(0);
          rendererBuffer.setLength(0);
          rendererBuffer.setOffset(0);
          resampler.process(resamplerBuffer,rendererBuffer);
        }
        int rendererProcess;
        if (rendererProcessStartTime == 0)         rendererProcessStartTime=System.currentTimeMillis();
        do {
          rendererProcess=renderer.process(rendererBuffer);
          if (rendererProcess == Renderer.BUFFER_PROCESSED_FAILED) {
            logger.error(""String_Node_Str"" + uri);
            success=false;
            break;
          }
        }
 while ((rendererProcess & Renderer.INPUT_BUFFER_NOT_CONSUMED) == Renderer.INPUT_BUFFER_NOT_CONSUMED);
      }
    }
 catch (    IOException ioex) {
      logger.error(""String_Node_Str"" + uri,ioex);
      success=false;
    }
catch (    ResourceUnavailableException ruex) {
      logger.error(""String_Node_Str"" + renderer.getClass().getName(),ruex);
      success=false;
    }
  }
 catch (  ResourceUnavailableException ruex) {
    if (resampler != null) {
      logger.error(""String_Node_Str"" + resampler.getClass().getName(),ruex);
      success=false;
    }
  }
 finally {
    try {
      audioStream.close();
    }
 catch (    IOException ioex) {
    }
    if (resampler != null)     resampler.close();
    if (success && (audioStreamFormat != null) && (audioStreamLength > 0)&& (rendererProcessStartTime > 0)&& isStarted()) {
      long audioStreamDuration=(audioStreamFormat.computeDuration(audioStreamLength) + 999999) / 1000000;
      if (audioStreamDuration > 0) {
        audioStreamDuration+=MIN_AUDIO_STREAM_DURATION;
        boolean interrupted=false;
synchronized (sync) {
          while (isStarted()) {
            long timeout=System.currentTimeMillis() - rendererProcessStartTime;
            if ((timeout >= audioStreamDuration) || (timeout <= 0)) {
              break;
            }
 else {
              try {
                sync.wait(timeout);
              }
 catch (              InterruptedException ie) {
                interrupted=true;
              }
            }
          }
        }
        if (interrupted)         Thread.currentThread().interrupt();
      }
    }
  }
  return success;
}",0.7931343665940822
107634,"/** 
 * Implements the part of   {@link #doInitialize()} related to a specific<tt>IMMDevice</tt>.
 * @param iMMDevice the <tt>IMMDevice</tt> to initialize as part of theinvocation of <tt>doInitialize()</tt> on this instance
 * @throws HResultException if an error occurs while initializing thespecified <tt>iMMDevice</tt> in a native WASAPI function which returns an <tt>HRESULT</tt> value
 * @param captureDevices the state of the execution of<tt>doInitialize()</tt> which stores the <tt>CaptureDeviceInfo2</tt>s of the capture devices discovered by this <tt>WASAPISystem</tt>
 * @param playbackDevices the state of the execution of<tt>doInitialize()</tt> which stores the <tt>CaptureDeviceInfo2</tt>s of the playback devices discovered by this <tt>WASAPISystem</tt>
 */
private void doInitializeIMMDevice(long iMMDevice,List<CaptureDeviceInfo2> captureDevices,List<CaptureDeviceInfo2> playbackDevices) throws HResultException {
  String id=IMMDevice_GetId(iMMDevice);
  if (id == null)   throw new RuntimeException(""String_Node_Str"");
  long iAudioClient=IMMDevice_Activate(iMMDevice,IID_IAudioClient,CLSCTX_ALL,0);
  List<AudioFormat> formats;
  if (iAudioClient == 0)   throw new RuntimeException(""String_Node_Str"");
  try {
    formats=getIAudioClientSupportedFormats(iAudioClient);
  }
  finally {
    IAudioClient_Release(iAudioClient);
  }
  if ((formats != null) && !formats.isEmpty()) {
    String name=null;
    try {
      name=getIMMDeviceFriendlyName(iMMDevice);
    }
 catch (    Throwable t) {
      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + id,t);
    }
    if ((name == null) || (name.length() == 0))     name=id;
    int dataFlow=getIMMDeviceDataFlow(iMMDevice);
    List<CaptureDeviceInfo2> devices;
switch (dataFlow) {
case eCapture:
      List<AudioFormat> aecSupportedFormats=getAECSupportedFormats();
    if (!aecSupportedFormats.isEmpty()) {
      for (      AudioFormat format : aecSupportedFormats)       if (!formats.contains(format))       formats.add(format);
    }
  devices=captureDevices;
break;
case eRender:
devices=playbackDevices;
break;
default :
devices=null;
logger.error(""String_Node_Str"" + id);
break;
}
if (devices != null) {
CaptureDeviceInfo2 cdi2=new CaptureDeviceInfo2(name,new MediaLocator(LOCATOR_PROTOCOL + ""String_Node_Str"" + id),formats.toArray(new Format[formats.size()]),id,null,null);
devices.add(cdi2);
}
}
}","/** 
 * Implements the part of   {@link #doInitialize()} related to a specific<tt>IMMDevice</tt>.
 * @param iMMDevice the <tt>IMMDevice</tt> to initialize as part of theinvocation of <tt>doInitialize()</tt> on this instance
 * @throws HResultException if an error occurs while initializing thespecified <tt>iMMDevice</tt> in a native WASAPI function which returns an <tt>HRESULT</tt> value
 * @param captureDevices the state of the execution of<tt>doInitialize()</tt> which stores the <tt>CaptureDeviceInfo2</tt>s of the capture devices discovered by this <tt>WASAPISystem</tt>
 * @param playbackDevices the state of the execution of<tt>doInitialize()</tt> which stores the <tt>CaptureDeviceInfo2</tt>s of the playback devices discovered by this <tt>WASAPISystem</tt>
 */
private void doInitializeIMMDevice(long iMMDevice,List<CaptureDeviceInfo2> captureDevices,List<CaptureDeviceInfo2> playbackDevices) throws HResultException {
  String id=IMMDevice_GetId(iMMDevice);
  if (id == null)   throw new RuntimeException(""String_Node_Str"");
  long iAudioClient=IMMDevice_Activate(iMMDevice,IID_IAudioClient,CLSCTX_ALL,0);
  List<AudioFormat> formats;
  if (iAudioClient == 0)   throw new RuntimeException(""String_Node_Str"");
  try {
    formats=getIAudioClientSupportedFormats(iAudioClient);
  }
  finally {
    IAudioClient_Release(iAudioClient);
  }
  if ((formats != null) && !formats.isEmpty()) {
    String name=null;
    try {
      name=getIMMDeviceFriendlyName(iMMDevice);
    }
 catch (    Throwable t) {
      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + id,t);
    }
    if ((name == null) || (name.length() == 0))     name=id;
    int dataFlow=getIMMDeviceDataFlow(iMMDevice);
    List<CaptureDeviceInfo2> devices;
switch (dataFlow) {
case eCapture:
      devices=captureDevices;
    break;
case eRender:
  devices=playbackDevices;
break;
default :
devices=null;
logger.error(""String_Node_Str"" + id);
break;
}
if (devices != null) {
configureSupportedFormats(dataFlow,formats);
if (!formats.isEmpty()) {
CaptureDeviceInfo2 cdi2=new CaptureDeviceInfo2(name,new MediaLocator(LOCATOR_PROTOCOL + ""String_Node_Str"" + id),formats.toArray(new Format[formats.size()]),id,null,null);
devices.add(cdi2);
}
}
}
}",0.9152183128444256
107635,"/** 
 * Initializes a new <tt>IAudioClient</tt> instance for an audio endpoint device identified by a specific <tt>MediaLocator</tt>. The initialization is performed to an extent suitable for the operation of  {@link WASAPIRenderer} and {@link WASAPIStream}.
 * @param locator a <tt>MediaLocator</tt> which identifies the audioendpoint device to initialize a new <tt>IAudioClient</tt> instance for
 * @param dataFlow the flow of media data to be supported by the audioendpoint device identified by the specified <tt>locator</tt>
 * @param streamFlags
 * @param eventHandle
 * @param hnsBufferDuration the base of the duration in milliseconds of thebuffer that the audio application will share with the audio engine. If {@link Format#NOT_SPECIFIED}, the method uses the default interval between periodic passes by the audio engine.
 * @param formats an array of alternative <tt>AudioFormat</tt>s with whichinitialization of a new <tt>IAudioClient</tt> instance is to be attempted. The first element of the <tt>formats</tt> array which is supported by the new <tt>IAudioClient</tt> instance is used to initialize it and any preceding elements are set to <tt>null</tt> to signify that they are not supported and to make it possible to retrieve the <tt>AudioFormat</tt> with which the new <tt>IAudioClient</tt> instance has been initialized.
 * @return a new <tt>IAudioClient</tt> instance initialized for the audioendpoint device identified by the specified <tt>locator</tt>
 * @throws HResultException if an error occurs while initializing a new<tt>IAudioClient</tt> for the audio endpoint device identified by the specified <tt>locator</tt> in a native WASAPI function which returns an <tt>HRESULT</tt> value
 */
public long initializeIAudioClient(MediaLocator locator,DataFlow dataFlow,int streamFlags,long eventHandle,long hnsBufferDuration,AudioFormat[] formats) throws HResultException {
  WASAPISystem.CoInitializeEx();
  String id=locator.getRemainder();
  long iMMDevice=getIMMDevice(id);
  if (iMMDevice == 0) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + id);
  }
  long ret=0;
  try {
    int iMMDeviceDataFlow=getIMMDeviceDataFlow(iMMDevice);
switch (dataFlow) {
case CAPTURE:
      if ((iMMDeviceDataFlow != eAll) && (iMMDeviceDataFlow != eCapture))       throw new IllegalArgumentException(""String_Node_Str"");
    break;
case NOTIFY:
case PLAYBACK:
  if ((iMMDeviceDataFlow != eAll) && (iMMDeviceDataFlow != eRender))   throw new IllegalArgumentException(""String_Node_Str"");
break;
}
long iAudioClient=IMMDevice_Activate(iMMDevice,IID_IAudioClient,CLSCTX_ALL,0);
if (iAudioClient == 0) throw new RuntimeException(""String_Node_Str"");
try {
long waveformatex=WAVEFORMATEX_alloc();
if (waveformatex == 0) throw new OutOfMemoryError(""String_Node_Str"");
try {
int shareMode=AUDCLNT_SHAREMODE_SHARED;
boolean waveformatexIsInitialized=false;
for (int i=0; i < formats.length; i++) {
  WAVEFORMATEX_fill(waveformatex,formats[i]);
  long pClosestMatch=IAudioClient_IsFormatSupported(iAudioClient,shareMode,waveformatex);
  if (pClosestMatch == 0)   formats[i]=null;
 else {
    try {
      if (pClosestMatch == waveformatex) {
        waveformatexIsInitialized=true;
        break;
      }
 else {
        formats[i]=null;
      }
    }
  finally {
      if (pClosestMatch != waveformatex)       CoTaskMemFree(pClosestMatch);
    }
  }
}
if (!waveformatexIsInitialized) throw new IllegalArgumentException(""String_Node_Str"");
streamFlags|=AUDCLNT_STREAMFLAGS_NOPERSIST;
if (eventHandle != 0) streamFlags|=AUDCLNT_STREAMFLAGS_EVENTCALLBACK;
if (hnsBufferDuration == Format.NOT_SPECIFIED) {
  hnsBufferDuration=IAudioClient_GetDefaultDevicePeriod(iAudioClient) / 10000;
  if (hnsBufferDuration <= 1) {
    hnsBufferDuration=WASAPISystem.DEFAULT_DEVICE_PERIOD;
  }
}
int hresult=IAudioClient_Initialize(iAudioClient,shareMode,streamFlags,3 * hnsBufferDuration * 10000,0,waveformatex,audioSessionGuid);
if (hresult != S_OK) {
  throw new HResultException(hresult);
}
if (((streamFlags & AUDCLNT_STREAMFLAGS_EVENTCALLBACK) == AUDCLNT_STREAMFLAGS_EVENTCALLBACK) && (eventHandle != 0)) {
  IAudioClient_SetEventHandle(iAudioClient,eventHandle);
}
ret=iAudioClient;
iAudioClient=0;
}
  finally {
CoTaskMemFree(waveformatex);
}
}
  finally {
if (iAudioClient != 0) IAudioClient_Release(iAudioClient);
}
}
  finally {
if (iMMDevice != 0) IMMDevice_Release(iMMDevice);
}
return ret;
}","/** 
 * Initializes a new <tt>IAudioClient</tt> instance for an audio endpoint device identified by a specific <tt>MediaLocator</tt>. The initialization is performed to an extent suitable for the operation of  {@link WASAPIRenderer} and {@link WASAPIStream}.
 * @param locator a <tt>MediaLocator</tt> which identifies the audioendpoint device to initialize a new <tt>IAudioClient</tt> instance for
 * @param dataFlow the flow of media data to be supported by the audioendpoint device identified by the specified <tt>locator</tt>
 * @param streamFlags
 * @param eventHandle
 * @param hnsBufferDuration the base of the duration in milliseconds of thebuffer that the audio application will share with the audio engine. If {@link Format#NOT_SPECIFIED}, the method uses the default interval between periodic passes by the audio engine.
 * @param formats an array of alternative <tt>AudioFormat</tt>s with whichinitialization of a new <tt>IAudioClient</tt> instance is to be attempted. The first element of the <tt>formats</tt> array which is supported by the new <tt>IAudioClient</tt> instance is used to initialize it and any preceding elements are set to <tt>null</tt> to signify that they are not supported and to make it possible to retrieve the <tt>AudioFormat</tt> with which the new <tt>IAudioClient</tt> instance has been initialized.
 * @return a new <tt>IAudioClient</tt> instance initialized for the audioendpoint device identified by the specified <tt>locator</tt>
 * @throws HResultException if an error occurs while initializing a new<tt>IAudioClient</tt> for the audio endpoint device identified by the specified <tt>locator</tt> in a native WASAPI function which returns an <tt>HRESULT</tt> value
 */
public long initializeIAudioClient(MediaLocator locator,DataFlow dataFlow,int streamFlags,long eventHandle,long hnsBufferDuration,AudioFormat[] formats) throws HResultException {
  WASAPISystem.CoInitializeEx();
  String id=locator.getRemainder();
  long iMMDevice=getIMMDevice(id);
  if (iMMDevice == 0) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + id);
  }
  long ret=0;
  try {
    int iMMDeviceDataFlow=getIMMDeviceDataFlow(iMMDevice);
switch (dataFlow) {
case CAPTURE:
      if ((iMMDeviceDataFlow != eAll) && (iMMDeviceDataFlow != eCapture))       throw new IllegalArgumentException(""String_Node_Str"");
    break;
case NOTIFY:
case PLAYBACK:
  if ((iMMDeviceDataFlow != eAll) && (iMMDeviceDataFlow != eRender))   throw new IllegalArgumentException(""String_Node_Str"");
break;
}
long iAudioClient=IMMDevice_Activate(iMMDevice,IID_IAudioClient,CLSCTX_ALL,0);
if (iAudioClient == 0) throw new RuntimeException(""String_Node_Str"");
try {
long waveformatex=WAVEFORMATEX_alloc();
if (waveformatex == 0) throw new OutOfMemoryError(""String_Node_Str"");
try {
int shareMode=AUDCLNT_SHAREMODE_SHARED;
int waveformatexIsInitialized=Format.NOT_SPECIFIED;
for (int i=0; i < formats.length; i++) {
  WAVEFORMATEX_fill(waveformatex,formats[i]);
  long pClosestMatch=IAudioClient_IsFormatSupported(iAudioClient,shareMode,waveformatex);
  if (pClosestMatch == 0) {
  }
 else {
    try {
      if (pClosestMatch == waveformatex) {
        waveformatexIsInitialized=i;
        break;
      }
 else {
      }
    }
  finally {
      if (pClosestMatch != waveformatex)       CoTaskMemFree(pClosestMatch);
    }
  }
}
if ((waveformatexIsInitialized < 0) || (waveformatexIsInitialized >= formats.length)) {
  logUnsupportedFormats(dataFlow,locator,formats);
  throw new IllegalArgumentException(""String_Node_Str"");
}
Arrays.fill(formats,0,waveformatexIsInitialized,null);
streamFlags|=AUDCLNT_STREAMFLAGS_NOPERSIST;
if (eventHandle != 0) streamFlags|=AUDCLNT_STREAMFLAGS_EVENTCALLBACK;
if (hnsBufferDuration == Format.NOT_SPECIFIED) {
  hnsBufferDuration=IAudioClient_GetDefaultDevicePeriod(iAudioClient) / 10000;
  if (hnsBufferDuration <= 1) {
    hnsBufferDuration=WASAPISystem.DEFAULT_DEVICE_PERIOD;
  }
}
int hresult=IAudioClient_Initialize(iAudioClient,shareMode,streamFlags,3 * hnsBufferDuration * 10000,0,waveformatex,audioSessionGuid);
if (hresult != S_OK) {
  throw new HResultException(hresult);
}
if (((streamFlags & AUDCLNT_STREAMFLAGS_EVENTCALLBACK) == AUDCLNT_STREAMFLAGS_EVENTCALLBACK) && (eventHandle != 0)) {
  IAudioClient_SetEventHandle(iAudioClient,eventHandle);
}
ret=iAudioClient;
iAudioClient=0;
}
  finally {
CoTaskMemFree(waveformatex);
}
}
  finally {
if (iAudioClient != 0) IAudioClient_Release(iAudioClient);
}
}
  finally {
if (iMMDevice != 0) IMMDevice_Release(iMMDevice);
}
return ret;
}",0.9711473943189444
107636,"/** 
 * Gets a <tt>List</tt> of the <tt>AudioFormat</tt>s supported by a specific <tt>IAudioClient</tt>.
 * @param iAudioClient the <tt>IAudioClient</tt> to get the <tt>List</tt> ofsupported <tt>AudioFormat</tt>s of
 * @return a <tt>List</tt> of the <tt>AudioFormat</tt>s supported by thespecified <tt>iAudioClient</tt>
 * @throws HResultException if an error occurs while retrieving the<tt>List</tt> of <tt>AudioFormat</tt>s supported by the specified <tt>iAudioClient</tt> in a native WASAPI function which returns an <tt>HRESULT</tt> value
 */
private List<AudioFormat> getIAudioClientSupportedFormats(long iAudioClient) throws HResultException {
  char cbSize=0;
  List<AudioFormat> supportedFormats=new ArrayList<AudioFormat>();
  for (char nChannels=1; nChannels <= 2; nChannels++) {
    for (int i=0; i < Constants.AUDIO_SAMPLE_RATES.length; i++) {
      int nSamplesPerSec=(int)Constants.AUDIO_SAMPLE_RATES[i];
      for (char wBitsPerSample=16; wBitsPerSample > 0; wBitsPerSample-=8) {
        char nBlockAlign=(char)((nChannels * wBitsPerSample) / 8);
        WASAPI.WAVEFORMATEX_fill(waveformatex,WAVE_FORMAT_PCM,nChannels,nSamplesPerSec,nSamplesPerSec * nBlockAlign,nBlockAlign,wBitsPerSample,cbSize);
        long pClosestMatch=IAudioClient_IsFormatSupported(iAudioClient,AUDCLNT_SHAREMODE_SHARED,waveformatex);
        if (pClosestMatch == 0)         continue;
        try {
          if (pClosestMatch != waveformatex) {
            if (WAVEFORMATEX_getWFormatTag(pClosestMatch) != WAVE_FORMAT_PCM)             continue;
            nChannels=WAVEFORMATEX_getNChannels(pClosestMatch);
            nSamplesPerSec=WAVEFORMATEX_getNSamplesPerSec(pClosestMatch);
            wBitsPerSample=WAVEFORMATEX_getWBitsPerSample(pClosestMatch);
          }
          AudioFormat supportedFormat;
          if (nChannels == 2) {
            supportedFormat=new AudioFormat(AudioFormat.LINEAR,nSamplesPerSec,wBitsPerSample,1,AudioFormat.LITTLE_ENDIAN,AudioFormat.SIGNED,Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,Format.byteArray);
            if (!supportedFormats.contains(supportedFormat))             supportedFormats.add(supportedFormat);
          }
          supportedFormat=new AudioFormat(AudioFormat.LINEAR,nSamplesPerSec,wBitsPerSample,nChannels,AudioFormat.LITTLE_ENDIAN,AudioFormat.SIGNED,Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,Format.byteArray);
          if (!supportedFormats.contains(supportedFormat))           supportedFormats.add(supportedFormat);
        }
  finally {
          if (pClosestMatch != waveformatex)           CoTaskMemFree(pClosestMatch);
        }
      }
    }
  }
  return supportedFormats;
}","/** 
 * Gets a <tt>List</tt> of the <tt>AudioFormat</tt>s supported by a specific <tt>IAudioClient</tt>.
 * @param iAudioClient the <tt>IAudioClient</tt> to get the <tt>List</tt> ofsupported <tt>AudioFormat</tt>s of
 * @return a <tt>List</tt> of the <tt>AudioFormat</tt>s supported by thespecified <tt>iAudioClient</tt>
 * @throws HResultException if an error occurs while retrieving the<tt>List</tt> of <tt>AudioFormat</tt>s supported by the specified <tt>iAudioClient</tt> in a native WASAPI function which returns an <tt>HRESULT</tt> value
 */
private List<AudioFormat> getIAudioClientSupportedFormats(long iAudioClient) throws HResultException {
  char cbSize=0;
  List<AudioFormat> supportedFormats=new ArrayList<AudioFormat>();
  for (char nChannels=1; nChannels <= 2; nChannels++) {
    for (int i=0; i < Constants.AUDIO_SAMPLE_RATES.length; i++) {
      int nSamplesPerSec=(int)Constants.AUDIO_SAMPLE_RATES[i];
      for (char wBitsPerSample=16; wBitsPerSample > 0; wBitsPerSample-=8) {
        char nBlockAlign=(char)((nChannels * wBitsPerSample) / 8);
        WASAPI.WAVEFORMATEX_fill(waveformatex,WAVE_FORMAT_PCM,nChannels,nSamplesPerSec,nSamplesPerSec * nBlockAlign,nBlockAlign,wBitsPerSample,cbSize);
        long pClosestMatch=IAudioClient_IsFormatSupported(iAudioClient,AUDCLNT_SHAREMODE_SHARED,waveformatex);
        if (pClosestMatch == 0)         continue;
        try {
          if (pClosestMatch != waveformatex) {
            if (WAVEFORMATEX_getWFormatTag(pClosestMatch) != WAVE_FORMAT_PCM)             continue;
            nChannels=WAVEFORMATEX_getNChannels(pClosestMatch);
            nSamplesPerSec=WAVEFORMATEX_getNSamplesPerSec(pClosestMatch);
            wBitsPerSample=WAVEFORMATEX_getWBitsPerSample(pClosestMatch);
          }
          AudioFormat supportedFormat;
          if (nChannels == 2) {
            supportedFormat=new NativelySupportedAudioFormat(AudioFormat.LINEAR,nSamplesPerSec,wBitsPerSample,1,AudioFormat.LITTLE_ENDIAN,AudioFormat.SIGNED,Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,Format.byteArray);
            if (!supportedFormats.contains(supportedFormat))             supportedFormats.add(supportedFormat);
          }
          supportedFormat=new NativelySupportedAudioFormat(AudioFormat.LINEAR,nSamplesPerSec,wBitsPerSample,nChannels,AudioFormat.LITTLE_ENDIAN,AudioFormat.SIGNED,Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,Format.byteArray);
          if (!supportedFormats.contains(supportedFormat))           supportedFormats.add(supportedFormat);
        }
  finally {
          if (pClosestMatch != waveformatex)           CoTaskMemFree(pClosestMatch);
        }
      }
    }
  }
  return supportedFormats;
}",0.993587325537533
107637,"/** 
 * {@inheritDoc}The <tt>Format</tt>s supported by this <tt>CaptureDevice</tt>/<tt>DataSource</tt> are either the ones supported by the capture endpoint device or the ones supported by the voice capture DMO that implements the acoustic echo cancellation (AEC) feature depending on whether the feature in question is disabled or enabled.
 */
@Override protected Format[] getSupportedFormats(int streamIndex){
  List<AudioFormat> aecSupportedFormats=audioSystem.getAECSupportedFormats();
  if (aec) {
    return aecSupportedFormats.toArray(new Format[aecSupportedFormats.size()]);
  }
 else {
    return getIAudioClientSupportedFormats(streamIndex,aecSupportedFormats);
  }
}","/** 
 * {@inheritDoc}The <tt>Format</tt>s supported by this <tt>CaptureDevice</tt>/<tt>DataSource</tt> are either the ones supported by the capture endpoint device or the ones supported by the voice capture DMO that implements the acoustic echo cancellation (AEC) feature depending on whether the feature in question is disabled or enabled.
 */
@Override protected Format[] getSupportedFormats(int streamIndex){
  if (aec) {
    List<AudioFormat> aecSupportedFormats=audioSystem.getAECSupportedFormats();
    return aecSupportedFormats.toArray(new Format[aecSupportedFormats.size()]);
  }
 else {
    return getIAudioClientSupportedFormats(streamIndex);
  }
}",0.9640718562874252
107638,"/** 
 * Gets the <tt>Format</tt>s of media data supported by the audio endpoint device associated with this instance.
 * @param streamIndex the index of the <tt>SourceStream</tt> within the listof <tt>SourceStream</tt>s of this <tt>DataSource</tt> on behalf of which the query is being made
 * @param aecSupportedFormats the list of <tt>AudioFormat</tt>s supported bythe voice capture DMO implementing acoustic echo cancellation
 * @return the <tt>Format</tt>s of media data supported by the audioendpoint device associated with this instance
 */
private Format[] getIAudioClientSupportedFormats(int streamIndex,List<AudioFormat> aecSupportedFormats){
  Format[] superSupportedFormats=super.getSupportedFormats(streamIndex);
  if ((superSupportedFormats == null) || (superSupportedFormats.length == 0))   return superSupportedFormats;
  Format[] array;
  if (aecSupportedFormats.isEmpty())   array=superSupportedFormats;
 else {
    List<Format> list=new ArrayList<Format>(superSupportedFormats.length);
    for (    Format superSupportedFormat : superSupportedFormats) {
      boolean equals=false;
      for (      Format aecSupportedFormat : aecSupportedFormats) {
        if (superSupportedFormat == aecSupportedFormat) {
          equals=true;
          break;
        }
      }
      if (!equals)       list.add(superSupportedFormat);
    }
    array=list.toArray(new Format[list.size()]);
  }
  return array;
}","/** 
 * Gets the <tt>Format</tt>s of media data supported by the audio endpoint device associated with this instance.
 * @param streamIndex the index of the <tt>SourceStream</tt> within the listof <tt>SourceStream</tt>s of this <tt>DataSource</tt> on behalf of which the query is being made
 * @return the <tt>Format</tt>s of media data supported by the audioendpoint device associated with this instance
 */
private Format[] getIAudioClientSupportedFormats(int streamIndex){
  Format[] superSupportedFormats=super.getSupportedFormats(streamIndex);
  if ((superSupportedFormats == null) || (superSupportedFormats.length == 0))   return superSupportedFormats;
  List<Format> supportedFormats=new ArrayList<Format>(superSupportedFormats.length);
  for (  Format format : superSupportedFormats) {
    if ((format instanceof NativelySupportedAudioFormat) && !supportedFormats.contains(format)) {
      supportedFormats.add(format);
    }
  }
  int supportedFormatCount=supportedFormats.size();
  return (supportedFormatCount == superSupportedFormats.length) ? superSupportedFormats : supportedFormats.toArray(new Format[supportedFormatCount]);
}",0.3166536356528538
107639,"/** 
 * Finds an <tt>AudioFormat</tt> in a specific list of <tt>Format</tt>s which is as similar to a specific <tt>AudioFormat</tt> as possible.
 * @param formats the list of <tt>Format</tt>s into which an<tt>AudioFormat</tt> as similar to the specified <tt>format</tt> as possible is to be found 
 * @param format the <tt>AudioFormat</tt> for which a similar<tt>AudioFormat</tt> is to be found in <tt>formats</tt>
 * @return an <tt>AudioFormat</tt> which is an element of <tt>formats</tt>and is as similar to the specified <tt>format</tt> as possible or <tt>null</tt> if no similarity could be established
 */
private static AudioFormat findClosestMatch(Format[] formats,AudioFormat format){
  AudioFormat match=findFirstMatch(formats,format);
  if (match == null) {
    match=findFirstMatch(formats,new AudioFormat(format.getEncoding(),format.getSampleRate(),format.getSampleSizeInBits(),Format.NOT_SPECIFIED,format.getEndian(),format.getSigned(),Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,format.getDataType()));
    if (match == null) {
      match=findFirstMatch(formats,new AudioFormat(format.getEncoding(),Format.NOT_SPECIFIED,format.getSampleSizeInBits(),Format.NOT_SPECIFIED,format.getEndian(),format.getSigned(),Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,format.getDataType()));
    }
  }
  return match;
}","/** 
 * Finds an <tt>AudioFormat</tt> in a specific list of <tt>Format</tt>s which is as similar to a specific <tt>AudioFormat</tt> as possible.
 * @param formats the list of <tt>Format</tt>s into which an<tt>AudioFormat</tt> as similar to the specified <tt>format</tt> as possible is to be found 
 * @param format the <tt>AudioFormat</tt> for which a similar<tt>AudioFormat</tt> is to be found in <tt>formats</tt>
 * @param clazz the runtime type of the matches to be considered or<tt>null</tt> if the runtime type is to not be limited
 * @return an <tt>AudioFormat</tt> which is an element of <tt>formats</tt>and is as similar to the specified <tt>format</tt> as possible or <tt>null</tt> if no similarity could be established
 */
private static AudioFormat findClosestMatch(Format[] formats,AudioFormat format,Class<? extends AudioFormat> clazz){
  AudioFormat match=findFirstMatch(formats,format,clazz);
  if (match == null) {
    match=findFirstMatch(formats,new AudioFormat(format.getEncoding(),format.getSampleRate(),format.getSampleSizeInBits(),Format.NOT_SPECIFIED,format.getEndian(),format.getSigned(),Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,format.getDataType()),clazz);
    if (match == null) {
      match=findFirstMatch(formats,new AudioFormat(format.getEncoding(),Format.NOT_SPECIFIED,format.getSampleSizeInBits(),Format.NOT_SPECIFIED,format.getEndian(),format.getSigned(),Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,format.getDataType()),clazz);
    }
  }
  return match;
}",0.9375668926150552
107640,"private AudioFormat findClosestMatchCaptureSupportedFormat(AudioFormat format){
  return findClosestMatch(dataSource.getIAudioClientSupportedFormats(),format);
}","private AudioFormat findClosestMatchCaptureSupportedFormat(AudioFormat format){
  return findClosestMatch(dataSource.getIAudioClientSupportedFormats(),format,NativelySupportedAudioFormat.class);
}",0.9019607843137256
107641,"/** 
 * Invoked by   {@link #connect()} after a check that this<tt>SourceStream</tt> really needs to connect to the associated audio endpoint device has been passed i.e. it is certain that this instance is disconnected.
 * @throws Exception if the <tt>SourceStream</tt> fails to connect to theassociated audio endpoint device. The <tt>Exception</tt> is logged by the <tt>connect()</tt> method.
 */
private void doConnect() throws Exception {
  MediaLocator locator=getLocator();
  if (locator == null)   throw new NullPointerException(""String_Node_Str"");
  AudioFormat thisFormat=(AudioFormat)getFormat();
  if (thisFormat == null)   throw new NullPointerException(""String_Node_Str"");
  if (dataSource.aec) {
    CaptureDeviceInfo2 renderDeviceInfo=dataSource.audioSystem.getSelectedDevice(AudioSystem.DataFlow.PLAYBACK);
    if (renderDeviceInfo == null)     throw new NullPointerException(""String_Node_Str"");
    MediaLocator renderLocator=renderDeviceInfo.getLocator();
    AudioFormat captureFormat=findClosestMatchCaptureSupportedFormat(thisFormat);
    if (captureFormat == null) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + locator + ""String_Node_Str""+ thisFormat);
    }
    AudioFormat renderFormat=findClosestMatch(renderDeviceInfo.getFormats(),thisFormat);
    if (renderFormat == null) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + renderLocator + ""String_Node_Str""+ thisFormat);
    }
    boolean uninitialize=true;
    initializeCapture(locator,captureFormat);
    try {
      initializeRender(renderLocator,renderFormat);
      try {
        initializeAEC(captureFormat,renderFormat,thisFormat);
        uninitialize=false;
      }
  finally {
        if (uninitialize)         uninitializeRender();
      }
    }
  finally {
      if (uninitialize)       uninitializeCapture();
    }
  }
 else   initializeCapture(locator,thisFormat);
  this.format=thisFormat;
}","/** 
 * Invoked by   {@link #connect()} after a check that this<tt>SourceStream</tt> really needs to connect to the associated audio endpoint device has been passed i.e. it is certain that this instance is disconnected.
 * @throws Exception if the <tt>SourceStream</tt> fails to connect to theassociated audio endpoint device. The <tt>Exception</tt> is logged by the <tt>connect()</tt> method.
 */
private void doConnect() throws Exception {
  MediaLocator locator=getLocator();
  if (locator == null)   throw new NullPointerException(""String_Node_Str"");
  AudioFormat thisFormat=(AudioFormat)getFormat();
  if (thisFormat == null)   throw new NullPointerException(""String_Node_Str"");
  if (dataSource.aec) {
    CaptureDeviceInfo2 renderDeviceInfo=dataSource.audioSystem.getSelectedDevice(AudioSystem.DataFlow.PLAYBACK);
    if (renderDeviceInfo == null)     throw new NullPointerException(""String_Node_Str"");
    MediaLocator renderLocator=renderDeviceInfo.getLocator();
    AudioFormat captureFormat=findClosestMatchCaptureSupportedFormat(thisFormat);
    if (captureFormat == null) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + locator + ""String_Node_Str""+ thisFormat);
    }
    AudioFormat renderFormat=findClosestMatch(renderDeviceInfo.getFormats(),thisFormat,NativelySupportedAudioFormat.class);
    if (renderFormat == null) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + renderLocator + ""String_Node_Str""+ thisFormat);
    }
    boolean uninitialize=true;
    initializeCapture(locator,captureFormat);
    try {
      initializeRender(renderLocator,renderFormat);
      try {
        initializeAEC(captureFormat,renderFormat,thisFormat);
        uninitialize=false;
      }
  finally {
        if (uninitialize)         uninitializeRender();
      }
    }
  finally {
      if (uninitialize)       uninitializeCapture();
    }
  }
 else   initializeCapture(locator,thisFormat);
  this.format=thisFormat;
}",0.9910918808857216
107642,"/** 
 * Finds the first element of a specific array of <tt>Format</tt>s which matches in the sense of   {@link Format#matches(Format)} a specific<tt>AudioFormat</tt>.
 * @param formats the array of <tt>Format</tt>s which si to be searched
 * @param format the <tt>AudioFormat</tt> for which a match is to be foundin the specified <tt>formats</tt>
 * @return the first element of <tt>formats</tt> which matches the specified<tt>format</tt> or <tt>null</tt> if no match could be found
 */
private static AudioFormat findFirstMatch(Format[] formats,AudioFormat format){
  for (  Format aFormat : formats)   if (aFormat.matches(format))   return (AudioFormat)aFormat.intersects(format);
  return null;
}","/** 
 * Finds the first element of a specific array of <tt>Format</tt>s which matches in the sense of   {@link Format#matches(Format)} a specific<tt>AudioFormat</tt>.
 * @param formats the array of <tt>Format</tt>s which si to be searched
 * @param format the <tt>AudioFormat</tt> for which a match is to be foundin the specified <tt>formats</tt>
 * @param clazz the runtime type of the matches to be considered or<tt>null</tt> if the runtime type is to not be limited
 * @return the first element of <tt>formats</tt> which matches the specified<tt>format</tt> or <tt>null</tt> if no match could be found
 */
private static AudioFormat findFirstMatch(Format[] formats,AudioFormat format,Class<? extends AudioFormat> clazz){
  for (  Format aFormat : formats) {
    if (aFormat.matches(format) && ((clazz == null) || clazz.isInstance(aFormat))) {
      return (AudioFormat)aFormat.intersects(format);
    }
  }
  return null;
}",0.8603076923076923
107643,"/** 
 * Invokes <tt>IMediaObject::ProcessOutput</tt> on   {@link #iMediaObject}that represents the Voice Capture DSP implementing the acoustic echo cancellation (AEC) feature.
 */
private void processOutput(){
  int dwStatus=0;
  do {
    try {
      IMediaObject_ProcessOutput(iMediaObject,0,1,dmoOutputDataBuffer);
    }
 catch (    HResultException hre) {
      dwStatus=0;
      logger.error(""String_Node_Str"",hre);
    }
    try {
      int toRead=IMediaBuffer_GetLength(iMediaBuffer);
      if (toRead > 0) {
        int toPop=toRead - (processed.length - processedLength);
        if (toPop > 0)         popFromProcessed(toPop);
        int read=MediaBuffer_pop(iMediaBuffer,processed,processedLength,toRead);
        if (read > 0)         processedLength+=read;
      }
    }
 catch (    HResultException hre) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"",hre);
      break;
    }
  }
 while ((dwStatus & DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE) == DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE);
}","/** 
 * Invokes <tt>IMediaObject::ProcessOutput</tt> on   {@link #iMediaObject}that represents the Voice Capture DSP implementing the acoustic echo cancellation (AEC) feature.
 */
private void processOutput(){
  int dwStatus=0;
  do {
    try {
      IMediaObject_ProcessOutput(iMediaObject,0,1,dmoOutputDataBuffer);
      dwStatus=DMO_OUTPUT_DATA_BUFFER_getDwStatus(dmoOutputDataBuffer);
    }
 catch (    HResultException hre) {
      dwStatus=0;
      logger.error(""String_Node_Str"",hre);
    }
    try {
      int toRead=IMediaBuffer_GetLength(iMediaBuffer);
      if (toRead > 0) {
        int toPop=toRead - (processed.length - processedLength);
        if (toPop > 0)         popFromProcessed(toPop);
        int read=MediaBuffer_pop(iMediaBuffer,processed,processedLength,toRead);
        if (read > 0)         processedLength+=read;
      }
    }
 catch (    HResultException hre) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"",hre);
      break;
    }
  }
 while ((dwStatus & DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE) == DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE);
}",0.9653512993262752
107644,"/** 
 * {@inheritDoc}
 */
@Override protected AbstractPullBufferStream createStream(int streamIndex,FormatControl formatControl){
  return new WASAPIStream(this,formatControl);
}","/** 
 * {@inheritDoc}
 */
@Override protected WASAPIStream createStream(int streamIndex,FormatControl formatControl){
  return new WASAPIStream(this,formatControl);
}",0.9418604651162792
107645,"/** 
 * Notifies this <tt>RTCPFeedbackListener</tt> that an RTCP feedback message has been received
 * @param event an <tt>RTCPFeedbackEvent</tt> which specifies the details ofthe notification event such as the feedback message type and the payload type
 */
public void rtcpFeedbackReceived(RTCPFeedbackEvent event){
  if (event.getPayloadType() == RTCPFeedbackEvent.PT_PS) {
switch (event.getFeedbackMessageType()) {
case RTCPFeedbackEvent.FMT_PLI:
case RTCPFeedbackEvent.FMT_FIR:
      keyFrameRequest();
    break;
default :
  break;
}
}
}","/** 
 * Notifies this <tt>RTCPFeedbackListener</tt> that an RTCP feedback message has been received
 * @param event an <tt>RTCPFeedbackEvent</tt> which specifies the details ofthe notification event such as the feedback message type and the payload type
 */
public void rtcpFeedbackReceived(RTCPFeedbackEvent event){
  if (event.getPayloadType() == RTCPFeedbackEvent.PT_PS) {
switch (event.getFeedbackMessageType()) {
case RTCPFeedbackEvent.FMT_PLI:
case RTCPFeedbackEvent.FMT_FIR:
      if (logger.isTraceEnabled()) {
        logger.trace(""String_Node_Str"" + ""String_Node_Str"");
      }
    keyFrameRequest();
  break;
default :
break;
}
}
}",0.9087837837837838
107646,"/** 
 * Use or not RTCP feedback Picture Loss Indication.
 * @param usePLI <tt>true</tt> to use PLI; otherwise, <tt>false</tt>
 */
public void setRtcpFeedbackPLI(boolean usePLI){
  if (this.usePLI != usePLI) {
    this.usePLI=usePLI;
    if (this.usePLI) {
      if (keyFrameRequester == null) {
        keyFrameRequester=new KeyFrameControl.KeyFrameRequester(){
          public boolean requestKeyFrame(){
            boolean requested=false;
            if (VideoMediaDeviceSession.this.usePLI) {
              try {
                new RTCPFeedbackPacket(1,206,localSSRC,remoteSSRC).writeTo(rtpConnector.getControlOutputStream());
                requested=true;
              }
 catch (              IOException ioe) {
              }
            }
            return requested;
          }
        }
;
      }
      if (keyFrameControl != null)       keyFrameControl.addKeyFrameRequester(-1,keyFrameRequester);
    }
 else     if (keyFrameRequester != null) {
      if (keyFrameControl != null)       keyFrameControl.removeKeyFrameRequester(keyFrameRequester);
      keyFrameRequester=null;
    }
  }
}","/** 
 * Use or not RTCP feedback Picture Loss Indication.
 * @param usePLI <tt>true</tt> to use PLI; otherwise, <tt>false</tt>
 */
public void setRtcpFeedbackPLI(boolean usePLI){
  if (this.usePLI != usePLI) {
    this.usePLI=usePLI;
    if (this.usePLI) {
      if (keyFrameRequester == null) {
        keyFrameRequester=new KeyFrameControl.KeyFrameRequester(){
          public boolean requestKeyFrame(){
            boolean requested=false;
            if (VideoMediaDeviceSession.this.usePLI) {
              try {
                new RTCPFeedbackPacket(RTCPFeedbackEvent.FMT_PLI,RTCPFeedbackEvent.PT_PS,localSSRC,remoteSSRC).writeTo(rtpConnector.getControlOutputStream());
                requested=true;
              }
 catch (              IOException ioe) {
              }
            }
            return requested;
          }
        }
;
      }
      if (keyFrameControl != null)       keyFrameControl.addKeyFrameRequester(-1,keyFrameRequester);
    }
 else     if (keyFrameRequester != null) {
      if (keyFrameControl != null)       keyFrameControl.removeKeyFrameRequester(keyFrameRequester);
      keyFrameRequester=null;
    }
  }
}",0.9769707705934456
107647,"/** 
 * Adds RTCPFeedbackListener to the stream when the listener is created.
 * @param rtcpFeedbackListener the listener to be added.
 */
public void onRTCPFeedbackCreate(RTCPFeedbackListener rtcpFeedbackListener){
  if (!OSUtils.IS_ANDROID && usePLI && ""String_Node_Str"".equalsIgnoreCase(getFormat().getEncoding())) {
    try {
      ((ControlTransformInputStream)rtpConnector.getControlInputStream()).addRTCPFeedbackListener(rtcpFeedbackListener);
    }
 catch (    IOException ioe) {
      logger.error(""String_Node_Str"",ioe);
    }
  }
}","/** 
 * Notifies this <tt>VideoMediaDeviceSession</tt> of a new <tt>RTCPFeedbackListener</tt>
 * @param rtcpFeedbackListener the listener to be added.
 */
public void onRTCPFeedbackCreate(RTCPFeedbackListener rtcpFeedbackListener){
  if (rtpConnector != null) {
    try {
      ((ControlTransformInputStream)rtpConnector.getControlInputStream()).addRTCPFeedbackListener(rtcpFeedbackListener);
    }
 catch (    IOException ioe) {
      logger.error(""String_Node_Str"",ioe);
    }
  }
}",0.7816764132553606
107648,"public boolean requestKeyFrame(){
  boolean requested=false;
  if (VideoMediaDeviceSession.this.usePLI) {
    try {
      new RTCPFeedbackPacket(1,206,localSSRC,remoteSSRC).writeTo(rtpConnector.getControlOutputStream());
      requested=true;
    }
 catch (    IOException ioe) {
    }
  }
  return requested;
}","public boolean requestKeyFrame(){
  boolean requested=false;
  if (VideoMediaDeviceSession.this.usePLI) {
    try {
      new RTCPFeedbackPacket(RTCPFeedbackEvent.FMT_PLI,RTCPFeedbackEvent.PT_PS,localSSRC,remoteSSRC).writeTo(rtpConnector.getControlOutputStream());
      requested=true;
    }
 catch (    IOException ioe) {
    }
  }
  return requested;
}",0.921921921921922
107649,"/** 
 * Decodes an Opus packet
 * @param inBuffer input <tt>Buffer</tt>
 * @param outBuffer output <tt>Buffer</tt>
 * @return <tt>BUFFER_PROCESSED_OK</tt> if <tt>inBuffer</tt> has beensuccessfully processed
 * @see AbstractCodecExt#doProcess(Buffer,Buffer)
 */
protected int doProcess(Buffer inBuffer,Buffer outBuffer){
  Format inFormat=inBuffer.getFormat();
  if ((inFormat != null) && (inFormat != this.inputFormat) && !inFormat.equals(this.inputFormat)&& (null == setInputFormat(inFormat))) {
    return BUFFER_PROCESSED_FAILED;
  }
  long seqNo=inBuffer.getSequenceNumber();
  boolean decodeFEC=false;
  if ((lastSeqNo != Buffer.SEQUENCE_UNKNOWN) && (seqNo != lastSeqNo + 1) && (seqNo > lastSeqNo)&& (lastFrameSizeInSamplesPerChannel > 0)) {
    decodeFEC=true;
  }
  if ((inBuffer.getFlags() & Buffer.FLAG_SKIP_FEC) != 0) {
    decodeFEC=false;
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + seqNo + ""String_Node_Str"");
    }
  }
  byte[] in=(byte[])inBuffer.getData();
  int inOffset=inBuffer.getOffset();
  int inLength=inBuffer.getLength();
  int outOffset=0;
  int outLength=0;
  int totalFrameSizeInSamplesPerChannel=0;
  if (decodeFEC) {
    byte[] out=validateByteArraySize(outBuffer,outOffset + lastFrameSizeInSamplesPerChannel * outputFrameSize,outOffset != 0);
    int frameSizeInSamplesPerChannel=Opus.decode(decoder,in,inOffset,inLength,out,lastFrameSizeInSamplesPerChannel,1);
    if (frameSizeInSamplesPerChannel > 0) {
      int frameSizeInBytes=frameSizeInSamplesPerChannel * outputFrameSize;
      outLength+=frameSizeInBytes;
      outOffset+=frameSizeInBytes;
      totalFrameSizeInSamplesPerChannel+=frameSizeInSamplesPerChannel;
      outBuffer.setFlags(outBuffer.getFlags() | BUFFER_FLAG_FEC);
      nbDecodedFec++;
    }
    lastSeqNo++;
    if (lastSeqNo > 65535)     lastSeqNo=0;
  }
 else {
    int frameSizeInSamplesPerChannel=Opus.decoder_get_nb_samples(decoder,in,inOffset,inLength);
    byte[] out=validateByteArraySize(outBuffer,outOffset + frameSizeInSamplesPerChannel * outputFrameSize,outOffset != 0);
    frameSizeInSamplesPerChannel=Opus.decode(decoder,in,inOffset,inLength,out,frameSizeInSamplesPerChannel,0);
    if (frameSizeInSamplesPerChannel > 0) {
      int frameSizeInBytes=frameSizeInSamplesPerChannel * outputFrameSize;
      outLength+=frameSizeInBytes;
      outOffset+=frameSizeInBytes;
      totalFrameSizeInSamplesPerChannel+=frameSizeInSamplesPerChannel;
      outBuffer.setFlags(outBuffer.getFlags() & ~BUFFER_FLAG_FEC);
      lastFrameSizeInSamplesPerChannel=frameSizeInSamplesPerChannel;
    }
    lastSeqNo=seqNo;
  }
  if (outLength > 0) {
    outBuffer.setDuration(totalFrameSizeInSamplesPerChannel * channels * 1000L* 1000L / outputSampleRate);
    outBuffer.setFormat(getOutputFormat());
    outBuffer.setLength(outLength);
    outBuffer.setOffset(0);
  }
 else {
    outBuffer.setLength(0);
    discardOutputBuffer(outBuffer);
  }
  if (lastSeqNo == seqNo)   return BUFFER_PROCESSED_OK;
 else   return INPUT_BUFFER_NOT_CONSUMED;
}","/** 
 * Decodes an Opus packet
 * @param inBuffer input <tt>Buffer</tt>
 * @param outBuffer output <tt>Buffer</tt>
 * @return <tt>BUFFER_PROCESSED_OK</tt> if <tt>inBuffer</tt> has beensuccessfully processed
 * @see AbstractCodecExt#doProcess(Buffer,Buffer)
 */
protected int doProcess(Buffer inBuffer,Buffer outBuffer){
  Format inFormat=inBuffer.getFormat();
  if ((inFormat != null) && (inFormat != this.inputFormat) && !inFormat.equals(this.inputFormat)&& (null == setInputFormat(inFormat))) {
    return BUFFER_PROCESSED_FAILED;
  }
  long seqNo=inBuffer.getSequenceNumber();
  int lostSeqNoCount=calculateLostSeqNoCount(lastSeqNo,seqNo);
  boolean decodeFEC=((lostSeqNoCount != 0) && (lastFrameSizeInSamplesPerChannel != 0));
  if ((inBuffer.getFlags() & Buffer.FLAG_SKIP_FEC) != 0) {
    decodeFEC=false;
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + seqNo + ""String_Node_Str"");
    }
  }
  byte[] in=(byte[])inBuffer.getData();
  int inOffset=inBuffer.getOffset();
  int inLength=inBuffer.getLength();
  int outOffset=0;
  int outLength=0;
  int totalFrameSizeInSamplesPerChannel=0;
  if (decodeFEC) {
    inLength=(lostSeqNoCount == 1) ? inLength : 0;
    byte[] out=validateByteArraySize(outBuffer,outOffset + lastFrameSizeInSamplesPerChannel * outputFrameSize,outOffset != 0);
    int frameSizeInSamplesPerChannel=Opus.decode(decoder,in,inOffset,inLength,out,lastFrameSizeInSamplesPerChannel,1);
    if (frameSizeInSamplesPerChannel > 0) {
      int frameSizeInBytes=frameSizeInSamplesPerChannel * outputFrameSize;
      outLength+=frameSizeInBytes;
      outOffset+=frameSizeInBytes;
      totalFrameSizeInSamplesPerChannel+=frameSizeInSamplesPerChannel;
      outBuffer.setFlags(outBuffer.getFlags() | (((in == null) || (inLength == 0)) ? BUFFER_FLAG_PLC : BUFFER_FLAG_FEC));
      nbDecodedFec++;
    }
    lastSeqNo=incrementSeqNo(lastSeqNo);
  }
 else {
    int frameSizeInSamplesPerChannel=Opus.decoder_get_nb_samples(decoder,in,inOffset,inLength);
    byte[] out=validateByteArraySize(outBuffer,outOffset + frameSizeInSamplesPerChannel * outputFrameSize,outOffset != 0);
    frameSizeInSamplesPerChannel=Opus.decode(decoder,in,inOffset,inLength,out,frameSizeInSamplesPerChannel,0);
    if (frameSizeInSamplesPerChannel > 0) {
      int frameSizeInBytes=frameSizeInSamplesPerChannel * outputFrameSize;
      outLength+=frameSizeInBytes;
      outOffset+=frameSizeInBytes;
      totalFrameSizeInSamplesPerChannel+=frameSizeInSamplesPerChannel;
      outBuffer.setFlags(outBuffer.getFlags() & ~(BUFFER_FLAG_FEC | BUFFER_FLAG_PLC));
      lastFrameSizeInSamplesPerChannel=frameSizeInSamplesPerChannel;
    }
    lastSeqNo=seqNo;
  }
  if (outLength > 0) {
    outBuffer.setDuration(totalFrameSizeInSamplesPerChannel * channels * 1000L* 1000L / outputSampleRate);
    outBuffer.setFormat(getOutputFormat());
    outBuffer.setLength(outLength);
    outBuffer.setOffset(0);
  }
 else {
    outBuffer.setLength(0);
    discardOutputBuffer(outBuffer);
  }
  if (lastSeqNo == seqNo)   return BUFFER_PROCESSED_OK;
 else   return INPUT_BUFFER_NOT_CONSUMED;
}",0.6920686835650041
107650,"protected int doProcess(Buffer inBuffer,Buffer outBuffer){
  byte[] in=(byte[])inBuffer.getData();
  int inOffset=inBuffer.getOffset();
  int inLength=inBuffer.getLength();
  short[] out=validateShortArraySize(outBuffer,frameLength);
  int outOffset=0;
  boolean decodeFEC=false;
  long seqNo=inBuffer.getSequenceNumber();
  int nbPacketsLost=0;
  if ((lastSeqNo != Buffer.SEQUENCE_UNKNOWN) && (seqNo != lastSeqNo) && (seqNo != lastSeqNo + 1)&& (seqNo > lastSeqNo)) {
    decodeFEC=true;
    nbPacketsLost=(int)(seqNo - lastSeqNo - 1);
  }
  if ((inBuffer.getFlags() & Buffer.FLAG_SKIP_FEC) != 0) {
    decodeFEC=false;
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + seqNo + ""String_Node_Str"");
    }
  }
  int lostFlag=0;
  if (decodeFEC) {
    lbrrBytes[0]=0;
    DecAPI.SKP_Silk_SDK_search_for_LBRR(in,inOffset,(short)inLength,nbPacketsLost,lbrrData,0,lbrrBytes);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + lastSeqNo + ""String_Node_Str""+ seqNo);
      logger.trace(""String_Node_Str"" + lbrrBytes[0] + ""String_Node_Str"");
    }
    outputLength[0]=frameLength;
    if (lbrrBytes[0] == 0) {
      lostFlag=1;
    }
 else     if (DecAPI.SKP_Silk_SDK_Decode(decState,decControl,0,lbrrData,0,lbrrBytes[0],out,outOffset,outputLength) == 0) {
      nbFECDecoded++;
      outBuffer.setDuration(FRAME_DURATION * 1000000);
      outBuffer.setLength(outputLength[0]);
      outBuffer.setOffset(outOffset);
      outBuffer.setFlags(outBuffer.getFlags() | BUFFER_FLAG_FEC);
      outBuffer.setFlags(outBuffer.getFlags() & ~BUFFER_FLAG_PLC);
      lastSeqNo++;
      if (lastSeqNo > 65535)       lastSeqNo=0;
      return INPUT_BUFFER_NOT_CONSUMED;
    }
 else {
      nbFECNotDecoded++;
      if (nbPacketsLost > 0)       this.nbPacketsLost+=nbPacketsLost;
      lastSeqNo=seqNo;
      return BUFFER_PROCESSED_FAILED;
    }
  }
 else   if (nbPacketsLost > 0)   this.nbPacketsLost+=nbPacketsLost;
  int processed;
{
    outputLength[0]=frameLength;
    if (DecAPI.SKP_Silk_SDK_Decode(decState,decControl,lostFlag,in,inOffset,inLength,out,outOffset,outputLength) == 0) {
      outBuffer.setDuration(FRAME_DURATION * 1000000);
      outBuffer.setLength(outputLength[0]);
      outBuffer.setOffset(outOffset);
      if (lostFlag == 0) {
        outBuffer.setFlags(outBuffer.getFlags() & ~(BUFFER_FLAG_FEC | BUFFER_FLAG_PLC));
        if (decControl.moreInternalDecoderFrames == 0) {
          nbPacketsDecoded++;
          processed=BUFFER_PROCESSED_OK;
        }
 else {
          framesPerPayload++;
          if (framesPerPayload >= MAX_FRAMES_PER_PAYLOAD) {
            nbPacketsDecoded++;
            processed=BUFFER_PROCESSED_OK;
          }
 else           processed=INPUT_BUFFER_NOT_CONSUMED;
        }
        lastSeqNo=seqNo;
      }
 else {
        outBuffer.setFlags(outBuffer.getFlags() & ~BUFFER_FLAG_FEC);
        outBuffer.setFlags(outBuffer.getFlags() | BUFFER_FLAG_PLC);
        processed=INPUT_BUFFER_NOT_CONSUMED;
        lastSeqNo++;
        if (lastSeqNo > 65535)         lastSeqNo=0;
      }
    }
 else {
      processed=BUFFER_PROCESSED_FAILED;
      if (lostFlag == 1) {
        nbFECNotDecoded++;
        if (nbPacketsLost > 0)         this.nbPacketsLost+=nbPacketsLost;
      }
      lastSeqNo=seqNo;
    }
    if ((processed & INPUT_BUFFER_NOT_CONSUMED) != INPUT_BUFFER_NOT_CONSUMED)     framesPerPayload=0;
  }
  return processed;
}","protected int doProcess(Buffer inBuffer,Buffer outBuffer){
  byte[] in=(byte[])inBuffer.getData();
  int inOffset=inBuffer.getOffset();
  int inLength=inBuffer.getLength();
  short[] out=validateShortArraySize(outBuffer,frameLength);
  int outOffset=0;
  long seqNo=inBuffer.getSequenceNumber();
  int lostSeqNoCount=calculateLostSeqNoCount(lastSeqNo,seqNo);
  boolean decodeFEC=(lostSeqNoCount != 0);
  if ((inBuffer.getFlags() & Buffer.FLAG_SKIP_FEC) != 0) {
    decodeFEC=false;
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + seqNo + ""String_Node_Str"");
    }
  }
  int lostFlag=0;
  if (decodeFEC) {
    lbrrBytes[0]=0;
    DecAPI.SKP_Silk_SDK_search_for_LBRR(in,inOffset,(short)inLength,lostSeqNoCount,lbrrData,0,lbrrBytes);
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"" + lastSeqNo + ""String_Node_Str""+ seqNo);
      logger.trace(""String_Node_Str"" + lbrrBytes[0] + ""String_Node_Str"");
    }
    outputLength[0]=frameLength;
    if (lbrrBytes[0] == 0) {
      lostFlag=1;
    }
 else     if (DecAPI.SKP_Silk_SDK_Decode(decState,decControl,0,lbrrData,0,lbrrBytes[0],out,outOffset,outputLength) == 0) {
      nbFECDecoded++;
      outBuffer.setDuration(FRAME_DURATION * 1000000);
      outBuffer.setLength(outputLength[0]);
      outBuffer.setOffset(outOffset);
      outBuffer.setFlags(outBuffer.getFlags() | BUFFER_FLAG_FEC);
      outBuffer.setFlags(outBuffer.getFlags() & ~BUFFER_FLAG_PLC);
      lastSeqNo=incrementSeqNo(lastSeqNo);
      return INPUT_BUFFER_NOT_CONSUMED;
    }
 else {
      nbFECNotDecoded++;
      if (lostSeqNoCount != 0)       this.nbPacketsLost+=lostSeqNoCount;
      lastSeqNo=seqNo;
      return BUFFER_PROCESSED_FAILED;
    }
  }
 else   if (lostSeqNoCount != 0)   this.nbPacketsLost+=lostSeqNoCount;
  int processed;
{
    outputLength[0]=frameLength;
    if (DecAPI.SKP_Silk_SDK_Decode(decState,decControl,lostFlag,in,inOffset,inLength,out,outOffset,outputLength) == 0) {
      outBuffer.setDuration(FRAME_DURATION * 1000000);
      outBuffer.setLength(outputLength[0]);
      outBuffer.setOffset(outOffset);
      if (lostFlag == 0) {
        outBuffer.setFlags(outBuffer.getFlags() & ~(BUFFER_FLAG_FEC | BUFFER_FLAG_PLC));
        if (decControl.moreInternalDecoderFrames == 0) {
          nbPacketsDecoded++;
          processed=BUFFER_PROCESSED_OK;
        }
 else {
          framesPerPayload++;
          if (framesPerPayload >= MAX_FRAMES_PER_PAYLOAD) {
            nbPacketsDecoded++;
            processed=BUFFER_PROCESSED_OK;
          }
 else           processed=INPUT_BUFFER_NOT_CONSUMED;
        }
        lastSeqNo=seqNo;
      }
 else {
        outBuffer.setFlags(outBuffer.getFlags() & ~BUFFER_FLAG_FEC);
        outBuffer.setFlags(outBuffer.getFlags() | BUFFER_FLAG_PLC);
        processed=INPUT_BUFFER_NOT_CONSUMED;
        lastSeqNo=incrementSeqNo(lastSeqNo);
      }
    }
 else {
      processed=BUFFER_PROCESSED_FAILED;
      if (lostFlag == 1) {
        nbFECNotDecoded++;
        if (lostSeqNoCount != 0)         this.nbPacketsLost+=lostSeqNoCount;
      }
      lastSeqNo=seqNo;
    }
    if ((processed & INPUT_BUFFER_NOT_CONSUMED) != INPUT_BUFFER_NOT_CONSUMED)     framesPerPayload=0;
  }
  return processed;
}",0.8959589867310012
107651,"/** 
 * Notifies this instance that the value of its <tt>startedDirection</tt> property has changed from a specific <tt>oldValue</tt> to a specific <tt>newValue</tt>.
 * @param oldValue the <tt>MediaDirection</tt> which used to be the value ofthe <tt>startedDirection</tt> property of this instance
 * @param newValue the <tt>MediaDirection</tt> which is the value of the<tt>startedDirection</tt> property of this instance
 */
@Override protected void startedDirectionChanged(MediaDirection oldValue,MediaDirection newValue){
  super.startedDirectionChanged(oldValue,newValue);
  try {
    Player localPlayer;
synchronized (localPlayerSyncRoot) {
      localPlayer=this.localPlayer;
    }
    if (newValue.allowsSending()) {
      if (localPlayer == null)       createLocalVisualComponent();
    }
 else     if (localPlayer != null) {
      disposeLocalPlayer(localPlayer);
    }
  }
 catch (  Throwable t) {
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
 else {
      logger.error(""String_Node_Str"",t);
    }
  }
  for (  Player player : getPlayers()) {
    int state=player.getState();
    if (state < Player.Realized)     continue;
    if (newValue.allowsReceiving()) {
      if (state != Player.Started) {
        player.start();
        Component visualComponent=getVisualComponent(player);
        if (visualComponent != null) {
          fireVideoEvent(VideoEvent.VIDEO_ADDED,visualComponent,VideoEvent.REMOTE,false);
        }
      }
    }
 else     if (state > Processor.Configured) {
      Component visualComponent=getVisualComponent(player);
      player.stop();
      if (visualComponent != null) {
        fireVideoEvent(VideoEvent.VIDEO_REMOVED,visualComponent,VideoEvent.REMOTE,false);
      }
    }
  }
}","/** 
 * Notifies this instance that the value of its <tt>startedDirection</tt> property has changed from a specific <tt>oldValue</tt> to a specific <tt>newValue</tt>.
 * @param oldValue the <tt>MediaDirection</tt> which used to be the value ofthe <tt>startedDirection</tt> property of this instance
 * @param newValue the <tt>MediaDirection</tt> which is the value of the<tt>startedDirection</tt> property of this instance
 */
@Override protected void startedDirectionChanged(MediaDirection oldValue,MediaDirection newValue){
  super.startedDirectionChanged(oldValue,newValue);
  try {
    Player localPlayer;
synchronized (localPlayerSyncRoot) {
      localPlayer=getLocalPlayer();
    }
    if (newValue.allowsSending()) {
      if (localPlayer == null)       createLocalVisualComponent();
    }
 else     if (localPlayer != null) {
      disposeLocalPlayer(localPlayer);
    }
  }
 catch (  Throwable t) {
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
 else {
      logger.error(""String_Node_Str"",t);
    }
  }
  for (  Player player : getPlayers()) {
    int state=player.getState();
    if (state < Player.Realized)     continue;
    if (newValue.allowsReceiving()) {
      if (state != Player.Started) {
        player.start();
        Component visualComponent=getVisualComponent(player);
        if (visualComponent != null) {
          fireVideoEvent(VideoEvent.VIDEO_ADDED,visualComponent,VideoEvent.REMOTE,false);
        }
      }
    }
 else     if (state > Processor.Configured) {
      Component visualComponent=getVisualComponent(player);
      player.stop();
      if (visualComponent != null) {
        fireVideoEvent(VideoEvent.VIDEO_REMOVED,visualComponent,VideoEvent.REMOTE,false);
      }
    }
  }
}",0.9965437788018432
107652,"/** 
 * Releases the resources allocated by a specific local <tt>Player</tt> in the course of its execution and prepares it to be garbage collected. If the specified <tt>Player</tt> is rendering video, notifies the <tt>VideoListener</tt>s of this instance that its visual <tt>Component</tt> is to no longer be used by firing a  {@link VideoEvent#VIDEO_REMOVED} <tt>VideoEvent</tt>.
 * @param player the <tt>Player</tt> to dispose of
 * @see MediaDeviceSession#disposePlayer(Player)
 */
private void disposeLocalPlayer(Player player){
  Component visualComponent=null;
  try {
    visualComponent=getVisualComponent(player);
    player.stop();
    player.deallocate();
    player.close();
  }
  finally {
synchronized (localPlayerSyncRoot) {
      if (localPlayer == player)       localPlayer=null;
    }
    if (visualComponent != null) {
      fireVideoEvent(VideoEvent.VIDEO_REMOVED,visualComponent,VideoEvent.LOCAL,false);
    }
  }
}","/** 
 * Releases the resources allocated by a specific local <tt>Player</tt> in the course of its execution and prepares it to be garbage collected. If the specified <tt>Player</tt> is rendering video, notifies the <tt>VideoListener</tt>s of this instance that its visual <tt>Component</tt> is to no longer be used by firing a  {@link VideoEvent#VIDEO_REMOVED} <tt>VideoEvent</tt>.
 * @param player the <tt>Player</tt> to dispose of
 * @see MediaDeviceSession#disposePlayer(Player)
 */
protected void disposeLocalPlayer(Player player){
  Component visualComponent=null;
  try {
    visualComponent=getVisualComponent(player);
    player.stop();
    player.deallocate();
    player.close();
  }
  finally {
synchronized (localPlayerSyncRoot) {
      if (localPlayer == player)       localPlayer=null;
    }
    if (visualComponent != null) {
      fireVideoEvent(VideoEvent.VIDEO_REMOVED,visualComponent,VideoEvent.LOCAL,false);
    }
  }
}",0.9936034115138592
107653,"/** 
 * Sets the <tt>RTPConnector</tt> that will be used to initialize some codec for RTCP feedback and adds the instance to RTCPFeedbackCreateListners of deviceSession.
 * @param rtpConnector the RTP connector
 */
@Override public void setConnector(AbstractRTPConnector rtpConnector){
  super.setConnector(rtpConnector);
  if (deviceSession != null && deviceSession instanceof VideoMediaDeviceSession) {
    ((VideoMediaDeviceSession)deviceSession).addRTCPFeedbackCreateListner(this);
  }
}","/** 
 * Sets the <tt>RTPConnector</tt> that will be used to initialize some codec for RTCP feedback and adds the instance to RTCPFeedbackCreateListners of deviceSession.
 * @param rtpConnector the RTP connector
 */
@Override public void setConnector(AbstractRTPConnector rtpConnector){
  super.setConnector(rtpConnector);
  if (deviceSession != null) {
    deviceSession.addRTCPFeedbackCreateListner(this);
  }
}",0.8970099667774086
107654,"/** 
 * Creates a <tt>DataSource</tt> instance for this <tt>MediaDevice</tt> which gives access to the captured media.
 * @return a <tt>DataSource</tt> instance which gives access to the mediacaptured by this <tt>MediaDevice</tt>
 * @see AbstractMediaDevice#createOutputDataSource()
 */
@Override protected synchronized DataSource createOutputDataSource(){
  if (deviceSession == null) {
    MediaFormatImpl<? extends Format> format=null;
    MediaDirection startedDirection=MediaDirection.INACTIVE;
    for (    MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
      MediaFormatImpl<? extends Format> streamFormat=streamDeviceSession.getFormat();
      if ((streamFormat != null) && (format == null))       format=streamFormat;
      startedDirection=startedDirection.or(streamDeviceSession.getStartedDirection());
    }
    deviceSession=device.createSession();
    if (deviceSession instanceof VideoMediaDeviceSession) {
      VideoMediaDeviceSession videoMediaDeviceSession=(VideoMediaDeviceSession)deviceSession;
      for (      MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
        videoMediaDeviceSession.addRTCPFeedbackCreateListner(streamDeviceSession);
      }
    }
    if (format != null)     deviceSession.setFormat(format);
    deviceSession.start(startedDirection);
  }
  return (deviceSession == null) ? null : deviceSession.getOutputDataSource();
}","/** 
 * Creates a <tt>DataSource</tt> instance for this <tt>MediaDevice</tt> which gives access to the captured media.
 * @return a <tt>DataSource</tt> instance which gives access to the mediacaptured by this <tt>MediaDevice</tt>
 * @see AbstractMediaDevice#createOutputDataSource()
 */
@Override protected synchronized DataSource createOutputDataSource(){
  if (deviceSession == null) {
    MediaFormatImpl<? extends Format> format=null;
    MediaDirection startedDirection=MediaDirection.INACTIVE;
    for (    MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
      MediaFormatImpl<? extends Format> streamFormat=streamDeviceSession.getFormat();
      if ((streamFormat != null) && (format == null))       format=streamFormat;
      startedDirection=startedDirection.or(streamDeviceSession.getStartedDirection());
    }
    MediaDeviceSession newDeviceSession=device.createSession();
    if (newDeviceSession instanceof VideoMediaDeviceSession) {
      deviceSession=(VideoMediaDeviceSession)newDeviceSession;
      deviceSession.addVideoListener(this);
      for (      MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
        deviceSession.addRTCPFeedbackCreateListner(streamDeviceSession);
      }
    }
    if (format != null)     deviceSession.setFormat(format);
    deviceSession.start(startedDirection);
  }
  return (deviceSession == null) ? null : deviceSession.getOutputDataSource();
}",0.9199721642310368
107655,"/** 
 * Sets the <tt>MediaFormatImpl</tt> of a specific <tt>TrackControl</tt> of the <tt>Processor</tt> which produces the media to be streamed by this <tt>MediaDeviceSession</tt> to the remote peer. Allows extenders to override the set procedure and to detect when the JMF <tt>Format</tt> of the specified <tt>TrackControl</tt> changes.
 * @param trackControl the <tt>TrackControl</tt> to set the JMF<tt>Format</tt> of
 * @param mediaFormat the <tt>MediaFormatImpl</tt> to be set on thespecified <tt>TrackControl</tt>. Though <tt>mediaFormat</tt> encapsulates a JMF <tt>Format</tt>, <tt>format</tt> is to be set on the specified <tt>trackControl</tt> because it may be more specific. In any case, the two JMF <tt>Format</tt>s match. The <tt>MediaFormatImpl</tt> is provided anyway because it carries additional information such as format parameters.
 * @param format the JMF <tt>Format</tt> to be set on the specified<tt>TrackControl</tt>. Though <tt>mediaFormat</tt> encapsulates a JMF <tt>Format</tt>, the specified <tt>format</tt> is to be set on the specified <tt>trackControl</tt> because it may be more specific than the JMF <tt>Format</tt> of the <tt>mediaFormat</tt>
 * @return the JMF <tt>Format</tt> set on <tt>TrackControl</tt> after theattempt to set the specified <tt>mediaFormat</tt> or <tt>null</tt> if the specified <tt>format</tt> was found to be incompatible with <tt>trackControl</tt>
 * @see MediaDeviceSession#setProcessorFormat(TrackControl,MediaFormatImpl,Format)
 */
@Override protected Format setProcessorFormat(TrackControl trackControl,MediaFormatImpl<? extends Format> mediaFormat,Format format){
  JNIEncoder encoder=null;
  SwScale scaler=null;
  int codecCount=0;
  if (!OSUtils.IS_ANDROID && ""String_Node_Str"".equalsIgnoreCase(format.getEncoding())) {
    encoder=new JNIEncoder();
{
      Map<String,String> formatParameters=mediaFormat.getFormatParameters();
      String packetizationMode=(formatParameters == null) ? null : formatParameters.get(JNIEncoder.PACKETIZATION_MODE_FMTP);
      encoder.setPacketizationMode(packetizationMode);
    }
{
      encoder.setAdditionalCodecSettings(mediaFormat.getAdditionalCodecSettings());
    }
    if (usePLI) {
      try {
        ((ControlTransformInputStream)rtpConnector.getControlInputStream()).addRTCPFeedbackListener(encoder);
      }
 catch (      IOException ioe) {
        logger.error(""String_Node_Str"",ioe);
      }
    }
    if (keyFrameControl != null)     encoder.setKeyFrameControl(keyFrameControl);
    codecCount++;
  }
  if (outputSize != null) {
    scaler=new SwScale();
    scaler.setOutputSize(outputSize);
    codecCount++;
  }
  Codec[] codecs=new Codec[codecCount];
  codecCount=0;
  if (scaler != null)   codecs[codecCount++]=scaler;
  if (encoder != null)   codecs[codecCount++]=encoder;
  if (codecCount != 0) {
    try {
      trackControl.setCodecChain(codecs);
    }
 catch (    UnsupportedPlugInException upiex) {
      logger.error(""String_Node_Str"",upiex);
    }
  }
  return super.setProcessorFormat(trackControl,mediaFormat,format);
}","/** 
 * Sets the <tt>MediaFormatImpl</tt> of a specific <tt>TrackControl</tt> of the <tt>Processor</tt> which produces the media to be streamed by this <tt>MediaDeviceSession</tt> to the remote peer. Allows extenders to override the set procedure and to detect when the JMF <tt>Format</tt> of the specified <tt>TrackControl</tt> changes.
 * @param trackControl the <tt>TrackControl</tt> to set the JMF<tt>Format</tt> of
 * @param mediaFormat the <tt>MediaFormatImpl</tt> to be set on thespecified <tt>TrackControl</tt>. Though <tt>mediaFormat</tt> encapsulates a JMF <tt>Format</tt>, <tt>format</tt> is to be set on the specified <tt>trackControl</tt> because it may be more specific. In any case, the two JMF <tt>Format</tt>s match. The <tt>MediaFormatImpl</tt> is provided anyway because it carries additional information such as format parameters.
 * @param format the JMF <tt>Format</tt> to be set on the specified<tt>TrackControl</tt>. Though <tt>mediaFormat</tt> encapsulates a JMF <tt>Format</tt>, the specified <tt>format</tt> is to be set on the specified <tt>trackControl</tt> because it may be more specific than the JMF <tt>Format</tt> of the <tt>mediaFormat</tt>
 * @return the JMF <tt>Format</tt> set on <tt>TrackControl</tt> after theattempt to set the specified <tt>mediaFormat</tt> or <tt>null</tt> if the specified <tt>format</tt> was found to be incompatible with <tt>trackControl</tt>
 * @see MediaDeviceSession#setProcessorFormat(TrackControl,MediaFormatImpl,Format)
 */
@Override protected Format setProcessorFormat(TrackControl trackControl,MediaFormatImpl<? extends Format> mediaFormat,Format format){
  JNIEncoder encoder=null;
  SwScale scaler=null;
  int codecCount=0;
  if (!OSUtils.IS_ANDROID && ""String_Node_Str"".equalsIgnoreCase(format.getEncoding())) {
    encoder=new JNIEncoder();
{
      Map<String,String> formatParameters=mediaFormat.getFormatParameters();
      String packetizationMode=(formatParameters == null) ? null : formatParameters.get(JNIEncoder.PACKETIZATION_MODE_FMTP);
      encoder.setPacketizationMode(packetizationMode);
    }
{
      encoder.setAdditionalCodecSettings(mediaFormat.getAdditionalCodecSettings());
    }
    this.encoder=encoder;
    onRTCPFeedbackCreate(encoder);
synchronized (rtcpFeedbackCreateListners) {
      for (      RTCPFeedbackCreateListener l : rtcpFeedbackCreateListners) {
        l.onRTCPFeedbackCreate(encoder);
      }
    }
    if (keyFrameControl != null)     encoder.setKeyFrameControl(keyFrameControl);
    codecCount++;
  }
  if (outputSize != null) {
    scaler=new SwScale();
    scaler.setOutputSize(outputSize);
    codecCount++;
  }
  Codec[] codecs=new Codec[codecCount];
  codecCount=0;
  if (scaler != null)   codecs[codecCount++]=scaler;
  if (encoder != null)   codecs[codecCount++]=encoder;
  if (codecCount != 0) {
    try {
      trackControl.setCodecChain(codecs);
    }
 catch (    UnsupportedPlugInException upiex) {
      logger.error(""String_Node_Str"",upiex);
    }
  }
  return super.setProcessorFormat(trackControl,mediaFormat,format);
}",0.9409448818897638
107656,"/** 
 * Creates a <tt>DataSource</tt> instance for this <tt>MediaDevice</tt> which gives access to the captured media.
 * @return a <tt>DataSource</tt> instance which gives access to the mediacaptured by this <tt>MediaDevice</tt>
 * @see AbstractMediaDevice#createOutputDataSource()
 */
protected synchronized DataSource createOutputDataSource(){
  if (deviceSession == null) {
    MediaFormatImpl<? extends Format> format=null;
    MediaDirection startedDirection=MediaDirection.INACTIVE;
    for (    MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
      MediaFormatImpl<? extends Format> streamFormat=streamDeviceSession.getFormat();
      if ((streamFormat != null) && (format == null))       format=streamFormat;
      startedDirection=startedDirection.or(streamDeviceSession.getStartedDirection());
    }
    deviceSession=device.createSession();
    if (format != null)     deviceSession.setFormat(format);
    deviceSession.start(startedDirection);
  }
  return (deviceSession == null) ? null : deviceSession.getOutputDataSource();
}","/** 
 * Creates a <tt>DataSource</tt> instance for this <tt>MediaDevice</tt> which gives access to the captured media.
 * @return a <tt>DataSource</tt> instance which gives access to the mediacaptured by this <tt>MediaDevice</tt>
 * @see AbstractMediaDevice#createOutputDataSource()
 */
protected synchronized DataSource createOutputDataSource(){
  if (deviceSession == null) {
    MediaFormatImpl<? extends Format> format=null;
    MediaDirection startedDirection=MediaDirection.INACTIVE;
    for (    MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
      MediaFormatImpl<? extends Format> streamFormat=streamDeviceSession.getFormat();
      if ((streamFormat != null) && (format == null))       format=streamFormat;
      startedDirection=startedDirection.or(streamDeviceSession.getStartedDirection());
    }
    deviceSession=device.createSession();
    if (deviceSession instanceof VideoMediaDeviceSession) {
      for (      MediaStreamMediaDeviceSession streamDeviceSession : streamDeviceSessions) {
        ((VideoMediaDeviceSession)deviceSession).addRTCPFeedbackCreateListner(streamDeviceSession);
      }
    }
    if (format != null)     deviceSession.setFormat(format);
    deviceSession.start(startedDirection);
  }
  return (deviceSession == null) ? null : deviceSession.getOutputDataSource();
}",0.888981288981289
107657,"/** 
 * Handles attributes contained in <tt>MediaFormat</tt>.
 * @param format the <tt>MediaFormat</tt> to handle the attributes of
 * @param attrs the attributes <tt>Map</tt> to handle
 */
@Override protected void handleAttributes(MediaFormat format,Map<String,String> attrs){
  if (attrs != null) {
    String width=null;
    String height=null;
    for (    Map.Entry<String,String> attr : attrs.entrySet()) {
      String key=attr.getKey();
      String value=attr.getValue();
      if (key.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str""))         usePLI=true;
      }
 else       if (key.equals(""String_Node_Str"")) {
        if ((attrs.containsKey(""String_Node_Str"") || attrs.containsKey(""String_Node_Str"")) && (outputSize != null)) {
          continue;
        }
        Dimension res[]=parseSendRecvResolution(value);
        if (res != null) {
          outputSize=res[1];
          qualityControl.setRemoteSendMaxPreset(new QualityPreset(res[0]));
          qualityControl.setRemoteReceiveResolution(outputSize);
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        Dimension dim=new Dimension(352,288);
        if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
          outputSize=dim;
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        Dimension dim=new Dimension(176,144);
        if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
          outputSize=dim;
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        Dimension dim=new Dimension(640,480);
        if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
          outputSize=dim;
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        String args[]=value.split(""String_Node_Str"");
        if (args.length < 3)         continue;
        try {
          Dimension dim=new Dimension(Integer.parseInt(args[0]),Integer.parseInt(args[1]));
          if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
            outputSize=dim;
            ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
          }
        }
 catch (        Exception e) {
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        width=value;
        if (height != null) {
          outputSize=new Dimension(Integer.parseInt(width),Integer.parseInt(height));
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        height=value;
        if (width != null) {
          outputSize=new Dimension(Integer.parseInt(width),Integer.parseInt(height));
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
    }
  }
}","/** 
 * Handles attributes contained in <tt>MediaFormat</tt>.
 * @param format the <tt>MediaFormat</tt> to handle the attributes of
 * @param attrs the attributes <tt>Map</tt> to handle
 */
@Override protected void handleAttributes(MediaFormat format,Map<String,String> attrs){
  if (attrs != null) {
    String width=null;
    String height=null;
    for (    Map.Entry<String,String> attr : attrs.entrySet()) {
      String key=attr.getKey();
      String value=attr.getValue();
      if (key.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str""))         ;
      }
 else       if (key.equals(""String_Node_Str"")) {
        if ((attrs.containsKey(""String_Node_Str"") || attrs.containsKey(""String_Node_Str"")) && (outputSize != null)) {
          continue;
        }
        Dimension res[]=parseSendRecvResolution(value);
        if (res != null) {
          outputSize=res[1];
          qualityControl.setRemoteSendMaxPreset(new QualityPreset(res[0]));
          qualityControl.setRemoteReceiveResolution(outputSize);
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        Dimension dim=new Dimension(352,288);
        if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
          outputSize=dim;
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        Dimension dim=new Dimension(176,144);
        if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
          outputSize=dim;
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        Dimension dim=new Dimension(640,480);
        if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
          outputSize=dim;
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        String args[]=value.split(""String_Node_Str"");
        if (args.length < 3)         continue;
        try {
          Dimension dim=new Dimension(Integer.parseInt(args[0]),Integer.parseInt(args[1]));
          if ((outputSize == null) || ((outputSize.width < dim.width) && (outputSize.height < dim.height))) {
            outputSize=dim;
            ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
          }
        }
 catch (        Exception e) {
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        width=value;
        if (height != null) {
          outputSize=new Dimension(Integer.parseInt(width),Integer.parseInt(height));
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        height=value;
        if (width != null) {
          outputSize=new Dimension(Integer.parseInt(width),Integer.parseInt(height));
          ((VideoMediaDeviceSession)getDeviceSession()).setOutputSize(outputSize);
        }
      }
    }
  }
}",0.998317270919382
107658,"/** 
 * Notifies this <tt>MediaStream</tt> that the <tt>MediaDevice</tt> (and respectively the <tt>MediaDeviceSession</tt> with it) which this instance uses for capture and playback of media has been changed. Makes sure that the <tt>VideoListener</tt>s of this instance get <tt>VideoEvent</tt>s for the new/current <tt>VideoMediaDeviceSession</tt> and not for the old one.
 * @param oldValue the <tt>MediaDeviceSession</tt> with the<tt>MediaDevice</tt> this instance used work with
 * @param newValue the <tt>MediaDeviceSession</tt> with the<tt>MediaDevice</tt> this instance is to work with
 * @see MediaStreamImpl#deviceSessionChanged(MediaDeviceSession,MediaDeviceSession)
 */
@Override protected void deviceSessionChanged(MediaDeviceSession oldValue,MediaDeviceSession newValue){
  super.deviceSessionChanged(oldValue,newValue);
  if (oldValue instanceof VideoMediaDeviceSession) {
    VideoMediaDeviceSession oldVideoMediaDeviceSession=(VideoMediaDeviceSession)oldValue;
    if (deviceSessionVideoListener != null)     oldVideoMediaDeviceSession.removeVideoListener(deviceSessionVideoListener);
    oldVideoMediaDeviceSession.setKeyFrameControl(null);
  }
  if (newValue instanceof VideoMediaDeviceSession) {
    VideoMediaDeviceSession newVideoMediaDeviceSession=(VideoMediaDeviceSession)newValue;
    if (deviceSessionVideoListener == null) {
      deviceSessionVideoListener=new VideoListener(){
        /** 
 * {@inheritDoc}Notifies that a visual <tt>Component</tt> depicting video was reported added by the provider this listener is added to.
 */
        public void videoAdded(        VideoEvent e){
          if (fireVideoEvent(e.getType(),e.getVisualComponent(),e.getOrigin(),true))           e.consume();
        }
        /** 
 * {@inheritDoc}Notifies that a visual <tt>Component</tt> depicting video was reported removed by the provider this listener is added to.
 */
        public void videoRemoved(        VideoEvent e){
          videoAdded(e);
        }
        /** 
 * {@inheritDoc}Notifies that a visual <tt>Component</tt> depicting video was reported updated by the provider this listener is added to.
 */
        public void videoUpdate(        VideoEvent e){
          fireVideoEvent(e,true);
        }
      }
;
    }
    newVideoMediaDeviceSession.addVideoListener(deviceSessionVideoListener);
    newVideoMediaDeviceSession.setOutputSize(outputSize);
    AbstractRTPConnector rtpConnector=getRTPConnector();
    if (rtpConnector != null)     newVideoMediaDeviceSession.setConnector(rtpConnector);
    newVideoMediaDeviceSession.setRtcpFeedbackPLI(usePLI);
    newVideoMediaDeviceSession.setKeyFrameControl(getKeyFrameControl());
  }
}","/** 
 * Notifies this <tt>MediaStream</tt> that the <tt>MediaDevice</tt> (and respectively the <tt>MediaDeviceSession</tt> with it) which this instance uses for capture and playback of media has been changed. Makes sure that the <tt>VideoListener</tt>s of this instance get <tt>VideoEvent</tt>s for the new/current <tt>VideoMediaDeviceSession</tt> and not for the old one. Note: this overloaded method gets executed in the <tt>MediaStreamImpl</tt> constructor. As a consequence we cannot assume proper initialization of the fields specific to <tt>VideoMediaStreamImpl</tt>.
 * @param oldValue the <tt>MediaDeviceSession</tt> with the<tt>MediaDevice</tt> this instance used work with
 * @param newValue the <tt>MediaDeviceSession</tt> with the<tt>MediaDevice</tt> this instance is to work with
 * @see MediaStreamImpl#deviceSessionChanged(MediaDeviceSession,MediaDeviceSession)
 */
@Override protected void deviceSessionChanged(MediaDeviceSession oldValue,MediaDeviceSession newValue){
  super.deviceSessionChanged(oldValue,newValue);
  if (oldValue instanceof VideoMediaDeviceSession) {
    VideoMediaDeviceSession oldVideoMediaDeviceSession=(VideoMediaDeviceSession)oldValue;
    if (deviceSessionVideoListener != null)     oldVideoMediaDeviceSession.removeVideoListener(deviceSessionVideoListener);
    oldVideoMediaDeviceSession.setKeyFrameControl(null);
  }
  if (newValue instanceof VideoMediaDeviceSession) {
    VideoMediaDeviceSession newVideoMediaDeviceSession=(VideoMediaDeviceSession)newValue;
    if (deviceSessionVideoListener == null) {
      deviceSessionVideoListener=new VideoListener(){
        /** 
 * {@inheritDoc}Notifies that a visual <tt>Component</tt> depicting video was reported added by the provider this listener is added to.
 */
        public void videoAdded(        VideoEvent e){
          if (fireVideoEvent(e.getType(),e.getVisualComponent(),e.getOrigin(),true))           e.consume();
        }
        /** 
 * {@inheritDoc}Notifies that a visual <tt>Component</tt> depicting video was reported removed by the provider this listener is added to.
 */
        public void videoRemoved(        VideoEvent e){
          videoAdded(e);
        }
        /** 
 * {@inheritDoc}Notifies that a visual <tt>Component</tt> depicting video was reported updated by the provider this listener is added to.
 */
        public void videoUpdate(        VideoEvent e){
          fireVideoEvent(e,true);
        }
      }
;
    }
    newVideoMediaDeviceSession.addVideoListener(deviceSessionVideoListener);
    newVideoMediaDeviceSession.setOutputSize(outputSize);
    AbstractRTPConnector rtpConnector=getRTPConnector();
    if (rtpConnector != null)     newVideoMediaDeviceSession.setConnector(rtpConnector);
    newVideoMediaDeviceSession.setRtcpFeedbackPLI(USE_PLI);
    newVideoMediaDeviceSession.setKeyFrameControl(getKeyFrameControl());
  }
}",0.9623733719247468
107659,"/** 
 * Initializes a new <tt>Renderer</tt> instance which is to either perform playback on or sound a notification through a device contributed by this system. The (default) implementation of <tt>AudioSystem</tt> ignores the value of the <tt>playback</tt> argument and delegates to  {@link DeviceSystem#createRenderer()}.
 * @param playback <tt>true</tt> if the new instance is to perform playbackor <tt>false</tt> if the new instance is to sound a notification
 * @return a new <tt>Renderer</tt> instance which is to either performplayback on or sound a notification through a device contributed by this system
 */
public Renderer createRenderer(boolean playback){
  String className=getRendererClassName();
  Renderer renderer;
  if (className == null) {
    renderer=null;
  }
 else {
    Class<?> clazz;
    try {
      clazz=Class.forName(className);
    }
 catch (    Throwable t) {
      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;
 else {
        clazz=null;
        logger.error(""String_Node_Str"" + className,t);
      }
    }
    if (clazz == null) {
      renderer=null;
    }
 else     if (!Renderer.class.isAssignableFrom(clazz)) {
      renderer=null;
    }
 else {
      boolean superCreateRenderer;
      if (((getFeatures() & FEATURE_NOTIFY_AND_PLAYBACK_DEVICES) != 0) && AbstractAudioRenderer.class.isAssignableFrom(clazz)) {
        Constructor<?> constructor=null;
        try {
          constructor=clazz.getConstructor(boolean.class);
        }
 catch (        NoSuchMethodException nsme) {
        }
catch (        SecurityException se) {
        }
        if ((constructor != null) && constructor.isAccessible()) {
          superCreateRenderer=false;
          try {
            renderer=(Renderer)constructor.newInstance(playback);
          }
 catch (          Throwable t) {
            if (t instanceof ThreadDeath)             throw (ThreadDeath)t;
 else {
              renderer=null;
              logger.error(""String_Node_Str"" + className + ""String_Node_Str"",t);
            }
          }
          if ((renderer != null) && !playback) {
            CaptureDeviceInfo device=getSelectedDevice(DataFlow.NOTIFY);
            if (device == null) {
              renderer=null;
            }
 else {
              MediaLocator locator=device.getLocator();
              if (locator != null) {
                ((AbstractAudioRenderer<?>)renderer).setLocator(locator);
              }
            }
          }
        }
 else {
          superCreateRenderer=true;
          renderer=null;
        }
      }
 else {
        superCreateRenderer=true;
        renderer=null;
      }
      if (superCreateRenderer && (renderer == null))       renderer=super.createRenderer();
    }
  }
  return renderer;
}","/** 
 * Initializes a new <tt>Renderer</tt> instance which is to either perform playback on or sound a notification through a device contributed by this system. The (default) implementation of <tt>AudioSystem</tt> ignores the value of the <tt>playback</tt> argument and delegates to  {@link DeviceSystem#createRenderer()}.
 * @param playback <tt>true</tt> if the new instance is to perform playbackor <tt>false</tt> if the new instance is to sound a notification
 * @return a new <tt>Renderer</tt> instance which is to either performplayback on or sound a notification through a device contributed by this system
 */
public Renderer createRenderer(boolean playback){
  String className=getRendererClassName();
  Renderer renderer;
  if (className == null) {
    renderer=null;
  }
 else {
    Class<?> clazz;
    try {
      clazz=Class.forName(className);
    }
 catch (    Throwable t) {
      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;
 else {
        clazz=null;
        logger.error(""String_Node_Str"" + className,t);
      }
    }
    if (clazz == null) {
      renderer=null;
    }
 else     if (!Renderer.class.isAssignableFrom(clazz)) {
      renderer=null;
    }
 else {
      boolean superCreateRenderer;
      if (((getFeatures() & FEATURE_NOTIFY_AND_PLAYBACK_DEVICES) != 0) && AbstractAudioRenderer.class.isAssignableFrom(clazz)) {
        Constructor<?> constructor=null;
        try {
          constructor=clazz.getConstructor(boolean.class);
        }
 catch (        NoSuchMethodException nsme) {
        }
catch (        SecurityException se) {
        }
        if ((constructor != null)) {
          superCreateRenderer=false;
          try {
            renderer=(Renderer)constructor.newInstance(playback);
          }
 catch (          Throwable t) {
            if (t instanceof ThreadDeath)             throw (ThreadDeath)t;
 else {
              renderer=null;
              logger.error(""String_Node_Str"" + className + ""String_Node_Str"",t);
            }
          }
          if ((renderer != null) && !playback) {
            CaptureDeviceInfo device=getSelectedDevice(DataFlow.NOTIFY);
            if (device == null) {
              renderer=null;
            }
 else {
              MediaLocator locator=device.getLocator();
              if (locator != null) {
                ((AbstractAudioRenderer<?>)renderer).setLocator(locator);
              }
            }
          }
        }
 else {
          superCreateRenderer=true;
          renderer=null;
        }
      }
 else {
        superCreateRenderer=true;
        renderer=null;
      }
      if (superCreateRenderer && (renderer == null))       renderer=super.createRenderer();
    }
  }
  return renderer;
}",0.9945095168374816
107660,"/** 
 * Processes (converts color space and/or scales) a buffer.
 * @param input input buffer
 * @param output output buffer
 * @return <tt>BUFFER_PROCESSED_OK</tt> if buffer has been successfullyprocessed
 */
@Override public int process(Buffer input,Buffer output){
  if (!checkInputBuffer(input))   return BUFFER_PROCESSED_FAILED;
  if (isEOM(input)) {
    propagateEOM(output);
    return BUFFER_PROCESSED_OK;
  }
  if (input.isDiscard() || frameProcessingControl.isMinimalProcessing()) {
    output.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  VideoFormat inputFormat=(VideoFormat)input.getFormat();
  Format thisInputFormat=getInputFormat();
  if ((inputFormat != thisInputFormat) && !inputFormat.equals(thisInputFormat)) {
    setInputFormat(inputFormat);
  }
  VideoFormat outputFormat=(VideoFormat)getOutputFormat();
  if (outputFormat == null) {
    outputFormat=(VideoFormat)output.getFormat();
    if (outputFormat == null)     return BUFFER_PROCESSED_FAILED;
  }
  Dimension outputSize=outputFormat.getSize();
  if (outputSize == null) {
    outputSize=inputFormat.getSize();
    if (outputSize == null)     return BUFFER_PROCESSED_FAILED;
  }
  int outputWidth=outputSize.width;
  int outputHeight=outputSize.height;
  if ((outputWidth < MIN_SWS_SCALE_HEIGHT_OR_WIDTH) || (outputHeight <= MIN_SWS_SCALE_HEIGHT_OR_WIDTH)) {
    return OUTPUT_BUFFER_NOT_FILLED;
  }
  outputFormat=setSize(outputFormat,outputSize);
  if (outputFormat == null)   return BUFFER_PROCESSED_FAILED;
  int dstFmt;
  int dstLength;
  if (outputFormat instanceof RGBFormat) {
    dstFmt=getFFmpegPixelFormat((RGBFormat)outputFormat);
    dstLength=(outputWidth * outputHeight * 4);
  }
 else   if (outputFormat instanceof YUVFormat) {
    dstFmt=FFmpeg.PIX_FMT_YUV420P;
    dstLength=outputWidth * outputHeight + 2 * ((outputWidth + 1) / 2) * ((outputHeight + 1) / 2);
  }
 else   return BUFFER_PROCESSED_FAILED;
  Class<?> outputDataType=outputFormat.getDataType();
  Object dst=output.getData();
  if (Format.byteArray.equals(outputDataType)) {
    if ((dst == null) || (((byte[])dst).length < dstLength))     dst=new byte[dstLength];
  }
 else   if (Format.intArray.equals(outputDataType)) {
    dstLength=dstLength / 4 + ((dstLength % 4 == 0) ? 0 : 1);
    if ((dst == null) || (((int[])dst).length < dstLength))     dst=new int[dstLength];
  }
 else   if (Format.shortArray.equals(outputDataType)) {
    dstLength=dstLength / 2 + ((dstLength % 2 == 0) ? 0 : 1);
    if ((dst == null) || (((short[])dst).length < dstLength))     dst=new short[dstLength];
  }
 else {
    logger.error(""String_Node_Str"" + outputDataType);
    return BUFFER_PROCESSED_FAILED;
  }
  Dimension inputSize=inputFormat.getSize();
  if (inputSize == null)   return BUFFER_PROCESSED_FAILED;
  int inputWidth=inputSize.width;
  int inputHeight=inputSize.height;
  if ((inputWidth < MIN_SWS_SCALE_HEIGHT_OR_WIDTH) || (inputHeight < MIN_SWS_SCALE_HEIGHT_OR_WIDTH))   return OUTPUT_BUFFER_NOT_FILLED;
  Object src=input.getData();
  int srcFmt;
  long srcPicture;
  if (src instanceof AVFrame) {
    srcFmt=((AVFrameFormat)inputFormat).getPixFmt();
    srcPicture=((AVFrame)src).getPtr();
  }
 else {
    srcFmt=(inputFormat instanceof YUVFormat) ? FFmpeg.PIX_FMT_YUV420P : getFFmpegPixelFormat((RGBFormat)inputFormat);
    srcPicture=0;
  }
  swsContext=FFmpeg.sws_getCachedContext(swsContext,inputWidth,inputHeight,srcFmt,outputWidth,outputHeight,dstFmt,FFmpeg.SWS_BICUBIC);
  if (srcPicture == 0) {
    FFmpeg.sws_scale(swsContext,src,srcFmt,inputWidth,inputHeight,0,inputHeight,dst,dstFmt,outputWidth,outputHeight);
  }
 else {
    FFmpeg.sws_scale(swsContext,srcPicture,0,inputHeight,dst,dstFmt,outputWidth,outputHeight);
  }
  output.setData(dst);
  output.setDuration(input.getDuration());
  output.setFlags(input.getFlags());
  output.setFormat(outputFormat);
  output.setLength(dstLength);
  output.setOffset(0);
  output.setSequenceNumber(input.getSequenceNumber());
  output.setTimeStamp(input.getTimeStamp());
  int inFlags=input.getFlags();
  int outFlags=output.getFlags();
  if ((inFlags & Buffer.FLAG_LIVE_DATA) != 0)   outFlags|=Buffer.FLAG_LIVE_DATA;
  if ((inFlags & Buffer.FLAG_NO_WAIT) != 0)   outFlags|=Buffer.FLAG_NO_WAIT;
  if ((inFlags & Buffer.FLAG_RELATIVE_TIME) != 0)   outFlags|=Buffer.FLAG_RELATIVE_TIME;
  if ((inFlags & Buffer.FLAG_RTP_TIME) != 0)   outFlags|=Buffer.FLAG_RTP_TIME;
  if ((inFlags & Buffer.FLAG_SYSTEM_TIME) != 0)   outFlags|=Buffer.FLAG_SYSTEM_TIME;
  output.setFlags(outFlags);
  return BUFFER_PROCESSED_OK;
}","/** 
 * Processes (converts color space and/or scales) a buffer.
 * @param input input buffer
 * @param output output buffer
 * @return <tt>BUFFER_PROCESSED_OK</tt> if buffer has been successfullyprocessed
 */
@Override public int process(Buffer input,Buffer output){
  if (!checkInputBuffer(input))   return BUFFER_PROCESSED_FAILED;
  if (isEOM(input)) {
    propagateEOM(output);
    return BUFFER_PROCESSED_OK;
  }
  if (input.isDiscard() || frameProcessingControl.isMinimalProcessing()) {
    output.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  VideoFormat inputFormat=(VideoFormat)input.getFormat();
  Format thisInputFormat=getInputFormat();
  if ((inputFormat != thisInputFormat) && !inputFormat.equals(thisInputFormat)) {
    setInputFormat(inputFormat);
  }
  VideoFormat outputFormat=(VideoFormat)getOutputFormat();
  if (outputFormat == null) {
    outputFormat=(VideoFormat)output.getFormat();
    if (outputFormat == null)     return BUFFER_PROCESSED_FAILED;
  }
  Dimension outputSize=outputFormat.getSize();
  if (outputSize == null) {
    outputSize=inputFormat.getSize();
    if (outputSize == null)     return BUFFER_PROCESSED_FAILED;
  }
  int outputWidth=outputSize.width;
  int outputHeight=outputSize.height;
  if ((outputWidth < MIN_SWS_SCALE_HEIGHT_OR_WIDTH) || (outputHeight < MIN_SWS_SCALE_HEIGHT_OR_WIDTH)) {
    return OUTPUT_BUFFER_NOT_FILLED;
  }
  outputFormat=setSize(outputFormat,outputSize);
  if (outputFormat == null)   return BUFFER_PROCESSED_FAILED;
  int dstFmt;
  int dstLength;
  if (outputFormat instanceof RGBFormat) {
    dstFmt=getFFmpegPixelFormat((RGBFormat)outputFormat);
    dstLength=(outputWidth * outputHeight * 4);
  }
 else   if (outputFormat instanceof YUVFormat) {
    dstFmt=FFmpeg.PIX_FMT_YUV420P;
    dstLength=outputWidth * outputHeight + 2 * ((outputWidth + 1) / 2) * ((outputHeight + 1) / 2);
  }
 else   return BUFFER_PROCESSED_FAILED;
  Class<?> outputDataType=outputFormat.getDataType();
  Object dst=output.getData();
  if (Format.byteArray.equals(outputDataType)) {
    if ((dst == null) || (((byte[])dst).length < dstLength))     dst=new byte[dstLength];
  }
 else   if (Format.intArray.equals(outputDataType)) {
    dstLength=dstLength / 4 + ((dstLength % 4 == 0) ? 0 : 1);
    if ((dst == null) || (((int[])dst).length < dstLength))     dst=new int[dstLength];
  }
 else   if (Format.shortArray.equals(outputDataType)) {
    dstLength=dstLength / 2 + ((dstLength % 2 == 0) ? 0 : 1);
    if ((dst == null) || (((short[])dst).length < dstLength))     dst=new short[dstLength];
  }
 else {
    logger.error(""String_Node_Str"" + outputDataType);
    return BUFFER_PROCESSED_FAILED;
  }
  Dimension inputSize=inputFormat.getSize();
  if (inputSize == null)   return BUFFER_PROCESSED_FAILED;
  int inputWidth=inputSize.width;
  int inputHeight=inputSize.height;
  if ((inputWidth < MIN_SWS_SCALE_HEIGHT_OR_WIDTH) || (inputHeight < MIN_SWS_SCALE_HEIGHT_OR_WIDTH))   return OUTPUT_BUFFER_NOT_FILLED;
  Object src=input.getData();
  int srcFmt;
  long srcPicture;
  if (src instanceof AVFrame) {
    srcFmt=((AVFrameFormat)inputFormat).getPixFmt();
    srcPicture=((AVFrame)src).getPtr();
  }
 else {
    srcFmt=(inputFormat instanceof YUVFormat) ? FFmpeg.PIX_FMT_YUV420P : getFFmpegPixelFormat((RGBFormat)inputFormat);
    srcPicture=0;
  }
  swsContext=FFmpeg.sws_getCachedContext(swsContext,inputWidth,inputHeight,srcFmt,outputWidth,outputHeight,dstFmt,FFmpeg.SWS_BICUBIC);
  if (srcPicture == 0) {
    FFmpeg.sws_scale(swsContext,src,srcFmt,inputWidth,inputHeight,0,inputHeight,dst,dstFmt,outputWidth,outputHeight);
  }
 else {
    FFmpeg.sws_scale(swsContext,srcPicture,0,inputHeight,dst,dstFmt,outputWidth,outputHeight);
  }
  output.setData(dst);
  output.setDuration(input.getDuration());
  output.setFlags(input.getFlags());
  output.setFormat(outputFormat);
  output.setLength(dstLength);
  output.setOffset(0);
  output.setSequenceNumber(input.getSequenceNumber());
  output.setTimeStamp(input.getTimeStamp());
  int inFlags=input.getFlags();
  int outFlags=output.getFlags();
  if ((inFlags & Buffer.FLAG_LIVE_DATA) != 0)   outFlags|=Buffer.FLAG_LIVE_DATA;
  if ((inFlags & Buffer.FLAG_NO_WAIT) != 0)   outFlags|=Buffer.FLAG_NO_WAIT;
  if ((inFlags & Buffer.FLAG_RELATIVE_TIME) != 0)   outFlags|=Buffer.FLAG_RELATIVE_TIME;
  if ((inFlags & Buffer.FLAG_RTP_TIME) != 0)   outFlags|=Buffer.FLAG_RTP_TIME;
  if ((inFlags & Buffer.FLAG_SYSTEM_TIME) != 0)   outFlags|=Buffer.FLAG_SYSTEM_TIME;
  output.setFlags(outFlags);
  return BUFFER_PROCESSED_OK;
}",0.9998896369054188
107661,"/** 
 * Processes the data provided in a specific <tt>Buffer</tt> and renders it to the output device represented by this <tt>Renderer</tt>.
 * @param buffer a <tt>Buffer</tt> containing the data to be processed andrendered
 * @return <tt>BUFFER_PROCESSED_OK</tt> if the processing is successful;otherwise, the other possible return codes defined in the <tt>PlugIn</tt> interface
 */
public synchronized int process(Buffer buffer){
  if (buffer.isDiscard())   return BUFFER_PROCESSED_OK;
  int bufferLength=buffer.getLength();
  if (bufferLength == 0)   return BUFFER_PROCESSED_OK;
  Format format=buffer.getFormat();
  if ((format != null) && (format != this.inputFormat) && !format.equals(this.inputFormat)&& (setInputFormat(format) == null)) {
    return BUFFER_PROCESSED_FAILED;
  }
  if (handle == 0)   return BUFFER_PROCESSED_FAILED;
 else {
    Dimension size=null;
    if (format != null)     size=((VideoFormat)format).getSize();
    if (size == null) {
      size=this.inputFormat.getSize();
      if (size == null)       return BUFFER_PROCESSED_FAILED;
    }
    Component component=getComponent();
    boolean repaint=false;
    repaint=process(handle,component,(int[])buffer.getData(),buffer.getOffset(),bufferLength,size.width,size.height);
    if (repaint)     component.repaint();
    return BUFFER_PROCESSED_OK;
  }
}","/** 
 * Processes the data provided in a specific <tt>Buffer</tt> and renders it to the output device represented by this <tt>Renderer</tt>.
 * @param buffer a <tt>Buffer</tt> containing the data to be processed andrendered
 * @return <tt>BUFFER_PROCESSED_OK</tt> if the processing is successful;otherwise, the other possible return codes defined in the <tt>PlugIn</tt> interface
 */
public synchronized int process(Buffer buffer){
  if (buffer.isDiscard())   return BUFFER_PROCESSED_OK;
  int bufferLength=buffer.getLength();
  if (bufferLength == 0)   return BUFFER_PROCESSED_OK;
  Format format=buffer.getFormat();
  if ((format != null) && (format != this.inputFormat) && !format.equals(this.inputFormat)&& (setInputFormat(format) == null)) {
    return BUFFER_PROCESSED_FAILED;
  }
  if (handle == 0)   return BUFFER_PROCESSED_FAILED;
 else {
    Dimension size=null;
    if (format != null)     size=((VideoFormat)format).getSize();
    if (size == null) {
      size=this.inputFormat.getSize();
      if (size == null)       return BUFFER_PROCESSED_FAILED;
    }
    if ((size.width >= SwScale.MIN_SWS_SCALE_HEIGHT_OR_WIDTH) && (size.height >= SwScale.MIN_SWS_SCALE_HEIGHT_OR_WIDTH)) {
      Component component=getComponent();
      boolean repaint=process(handle,component,(int[])buffer.getData(),buffer.getOffset(),bufferLength,size.width,size.height);
      if (repaint)       component.repaint();
    }
    return BUFFER_PROCESSED_OK;
  }
}",0.9195979899497488
107662,"/** 
 * Overrides   {@link Canvas#paint(Graphics)} to paint this <tt>Component</tt>in the native counterpart of its associated <tt>JAWTRenderer</tt>.
 */
@Override public void paint(Graphics g){
  if (wantsPaint) {
synchronized (getHandleLock()) {
      long handle;
      if ((handle=getHandle()) != 0) {
        Container parent=getParent();
        int zOrder=(parent == null) ? -1 : parent.getComponentZOrder(this);
        wantsPaint=JAWTRenderer.paint(handle,this,g,zOrder);
      }
    }
  }
}","/** 
 * Overrides   {@link Canvas#paint(Graphics)} to paint this <tt>Component</tt>in the native counterpart of its associated <tt>JAWTRenderer</tt>.
 */
@Override public void paint(Graphics g){
  if (wantsPaint && (getWidth() >= SwScale.MIN_SWS_SCALE_HEIGHT_OR_WIDTH) && (getHeight() >= SwScale.MIN_SWS_SCALE_HEIGHT_OR_WIDTH)) {
synchronized (getHandleLock()) {
      long handle;
      if ((handle=getHandle()) != 0) {
        Container parent=getParent();
        int zOrder=(parent == null) ? -1 : parent.getComponentZOrder(this);
        wantsPaint=JAWTRenderer.paint(handle,this,g,zOrder);
      }
    }
  }
}",0.8968609865470852
107663,"/** 
 * Creates a preview component for the specified device(video device) used to show video preview from that device.
 * @param device the video device
 * @param preferredWidth the width we prefer for the component
 * @param preferredHeight the height we prefer for the component
 * @return the preview component.
 */
public Object getVideoPreviewComponent(MediaDevice device,int preferredWidth,int preferredHeight){
  ResourceManagementService resources=LibJitsi.getResourceManagementService();
  String noPreviewText=(resources == null) ? ""String_Node_Str"" : resources.getI18NString(""String_Node_Str"");
  JLabel noPreview=new JLabel(noPreviewText);
  noPreview.setHorizontalAlignment(SwingConstants.CENTER);
  noPreview.setVerticalAlignment(SwingConstants.CENTER);
  final JComponent videoContainer=new VideoContainer(noPreview,false);
  if ((preferredWidth > 0) && (preferredHeight > 0)) {
    videoContainer.setPreferredSize(new Dimension(preferredWidth,preferredHeight));
  }
  try {
    CaptureDeviceInfo captureDeviceInfo;
    if ((device != null) && ((captureDeviceInfo=((MediaDeviceImpl)device).getCaptureDeviceInfo()) != null)) {
      DataSource dataSource=Manager.createDataSource(captureDeviceInfo.getLocator());
      if ((preferredWidth < 128) || (preferredHeight < 96)) {
        preferredWidth=128;
        preferredHeight=96;
      }
      VideoMediaStreamImpl.selectVideoSize(dataSource,preferredWidth,preferredHeight);
      dataSource.connect();
      Processor player=Manager.createProcessor(dataSource);
      final MediaLocator locator=dataSource.getLocator();
      player.addControllerListener(new ControllerListener(){
        public void controllerUpdate(        ControllerEvent event){
          controllerUpdateForPreview(event,videoContainer,locator);
        }
      }
);
      player.configure();
    }
  }
 catch (  Throwable t) {
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
 else     logger.error(""String_Node_Str"",t);
  }
  return videoContainer;
}","/** 
 * Creates a preview component for the specified device(video device) used to show video preview from that device.
 * @param device the video device
 * @param preferredWidth the width we prefer for the component
 * @param preferredHeight the height we prefer for the component
 * @return the preview component.
 */
public Object getVideoPreviewComponent(MediaDevice device,int preferredWidth,int preferredHeight){
  ResourceManagementService resources=LibJitsi.getResourceManagementService();
  String noPreviewText=(resources == null) ? ""String_Node_Str"" : resources.getI18NString(""String_Node_Str"");
  JLabel noPreview=new JLabel(noPreviewText);
  noPreview.setHorizontalAlignment(SwingConstants.CENTER);
  noPreview.setVerticalAlignment(SwingConstants.CENTER);
  final JComponent videoContainer=new VideoContainer(noPreview,false);
  if ((preferredWidth > 0) && (preferredHeight > 0)) {
    videoContainer.setPreferredSize(new Dimension(preferredWidth,preferredHeight));
  }
  try {
    CaptureDeviceInfo captureDeviceInfo;
    if ((device != null) && ((captureDeviceInfo=((MediaDeviceImpl)device).getCaptureDeviceInfo()) != null)) {
      DataSource dataSource=Manager.createDataSource(captureDeviceInfo.getLocator());
      if ((preferredWidth < 128) || (preferredHeight < 96)) {
        preferredWidth=128;
        preferredHeight=96;
      }
      VideoMediaStreamImpl.selectVideoSize(dataSource,preferredWidth,preferredHeight);
      dataSource.connect();
      Processor player=Manager.createProcessor(dataSource);
      final VideoContainerHierarchyListener listener=new VideoContainerHierarchyListener(videoContainer,player);
      videoContainer.addHierarchyListener(listener);
      final MediaLocator locator=dataSource.getLocator();
      player.addControllerListener(new ControllerListener(){
        public void controllerUpdate(        ControllerEvent event){
          controllerUpdateForPreview(event,videoContainer,locator,listener);
        }
      }
);
      player.configure();
    }
  }
 catch (  Throwable t) {
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
 else     logger.error(""String_Node_Str"",t);
  }
  return videoContainer;
}",0.9581239530988276
107664,"public void run(){
  showPreview(previewContainer,preview,player);
}","@Override public void run(){
  player.stop();
  player.deallocate();
  player.close();
}",0.3974358974358974
107665,"/** 
 * Dispose the player used for the preview.
 * @param player the player.
 */
private static void disposePlayer(Player player){
  player.stop();
  player.deallocate();
  player.close();
}","/** 
 * Dispose the player used for the preview.
 * @param player the player.
 */
private static void disposePlayer(final Player player){
  new Thread(new Runnable(){
    @Override public void run(){
      player.stop();
      player.deallocate();
      player.close();
    }
  }
).start();
}",0.5590062111801242
107666,"public void hierarchyChanged(HierarchyEvent event){
  if ((event.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) == 0)   return;
  if (!preview.isDisplayable()) {
    dispose();
    return;
  }
 else   player.start();
  if (windowListener == null) {
    window=SwingUtilities.windowForComponent(preview);
    if (window != null) {
      windowListener=new WindowAdapter(){
        @Override public void windowClosing(        WindowEvent event){
          dispose();
        }
      }
;
      window.addWindowListener(windowListener);
    }
  }
}","/** 
 * Change in container.
 * @param event the event for the chnage.
 */
public void hierarchyChanged(HierarchyEvent event){
  if ((event.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) == 0)   return;
  if (!container.isDisplayable()) {
    dispose();
    return;
  }
 else {
    if (preview != null) {
      player.start();
    }
  }
  if (windowListener == null) {
    window=SwingUtilities.windowForComponent(container);
    if (window != null) {
      windowListener=new WindowAdapter(){
        @Override public void windowClosing(        WindowEvent event){
          dispose();
        }
      }
;
      window.addWindowListener(windowListener);
    }
  }
}",0.8782467532467533
107667,"public void controllerUpdate(ControllerEvent event){
  controllerUpdateForPreview(event,videoContainer,locator);
}","public void controllerUpdate(ControllerEvent event){
  controllerUpdateForPreview(event,videoContainer,locator,listener);
}",0.9620253164556962
107668,"/** 
 * Shows the preview panel.
 * @param previewContainer the container
 * @param preview the preview component.
 * @param player the player.
 */
private static void showPreview(final JComponent previewContainer,final Component preview,final Player player){
  if (!SwingUtilities.isEventDispatchThread()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        showPreview(previewContainer,preview,player);
      }
    }
);
    return;
  }
  previewContainer.removeAll();
  if (preview != null) {
    HierarchyListener hierarchyListener=new HierarchyListener(){
      private Window window;
      private WindowListener windowListener;
      public void dispose(){
        if (windowListener != null) {
          if (window != null) {
            window.removeWindowListener(windowListener);
            window=null;
          }
          windowListener=null;
        }
        preview.removeHierarchyListener(this);
        disposePlayer(player);
        previewContainer.remove(preview);
      }
      public void hierarchyChanged(      HierarchyEvent event){
        if ((event.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) == 0)         return;
        if (!preview.isDisplayable()) {
          dispose();
          return;
        }
 else         player.start();
        if (windowListener == null) {
          window=SwingUtilities.windowForComponent(preview);
          if (window != null) {
            windowListener=new WindowAdapter(){
              @Override public void windowClosing(              WindowEvent event){
                dispose();
              }
            }
;
            window.addWindowListener(windowListener);
          }
        }
      }
    }
;
    preview.addHierarchyListener(hierarchyListener);
    previewContainer.add(preview);
    if (previewContainer.isDisplayable()) {
      previewContainer.revalidate();
      previewContainer.repaint();
    }
 else     previewContainer.doLayout();
  }
 else   disposePlayer(player);
}","/** 
 * Shows the preview panel.
 * @param previewContainer the container
 * @param preview the preview component.
 * @param player the player.
 */
private static void showPreview(final JComponent previewContainer,final Component preview,final Player player){
  if (!SwingUtilities.isEventDispatchThread()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        showPreview(previewContainer,preview,player);
      }
    }
);
    return;
  }
  previewContainer.removeAll();
  if (preview != null) {
    previewContainer.add(preview);
    player.start();
    if (previewContainer.isDisplayable()) {
      previewContainer.revalidate();
      previewContainer.repaint();
    }
 else     previewContainer.doLayout();
  }
 else   disposePlayer(player);
}",0.3860531991373113
107669,"/** 
 * Listens and shows the video in the video container when needed.
 * @param event the event when player has ready visual component.
 * @param videoContainer the container.
 * @param locator input DataSource locator
 */
private static void controllerUpdateForPreview(ControllerEvent event,JComponent videoContainer,MediaLocator locator){
  if (event instanceof ConfigureCompleteEvent) {
    Processor player=(Processor)event.getSourceController();
    TrackControl[] trackControls=player.getTrackControls();
    if ((trackControls != null) && (trackControls.length != 0))     try {
      for (      TrackControl trackControl : trackControls) {
        Codec codecs[]=null;
        SwScale scaler=new SwScale();
        if (DeviceSystem.LOCATOR_PROTOCOL_IMGSTREAMING.equals(locator.getProtocol()))         codecs=new Codec[]{scaler};
 else         codecs=new Codec[]{new HFlip(),scaler};
        trackControl.setCodecChain(codecs);
        break;
      }
    }
 catch (    UnsupportedPlugInException upiex) {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"",upiex);
    }
    try {
      player.setContentDescriptor(null);
    }
 catch (    NotConfiguredError nce) {
      logger.error(""String_Node_Str"",nce);
    }
    player.realize();
  }
 else   if (event instanceof RealizeCompleteEvent) {
    Player player=(Player)event.getSourceController();
    Component video=player.getVisualComponent();
    showPreview(videoContainer,video,player);
  }
}","/** 
 * Listens and shows the video in the video container when needed.
 * @param event the event when player has ready visual component.
 * @param videoContainer the container.
 * @param locator input DataSource locator
 * @param listener the hierarchy listener we created for the video container.
 */
private static void controllerUpdateForPreview(ControllerEvent event,JComponent videoContainer,MediaLocator locator,VideoContainerHierarchyListener listener){
  if (event instanceof ConfigureCompleteEvent) {
    Processor player=(Processor)event.getSourceController();
    TrackControl[] trackControls=player.getTrackControls();
    if ((trackControls != null) && (trackControls.length != 0))     try {
      for (      TrackControl trackControl : trackControls) {
        Codec codecs[]=null;
        SwScale scaler=new SwScale();
        if (DeviceSystem.LOCATOR_PROTOCOL_IMGSTREAMING.equals(locator.getProtocol()))         codecs=new Codec[]{scaler};
 else         codecs=new Codec[]{new HFlip(),scaler};
        trackControl.setCodecChain(codecs);
        break;
      }
    }
 catch (    UnsupportedPlugInException upiex) {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"",upiex);
    }
    try {
      player.setContentDescriptor(null);
    }
 catch (    NotConfiguredError nce) {
      logger.error(""String_Node_Str"",nce);
    }
    player.realize();
  }
 else   if (event instanceof RealizeCompleteEvent) {
    Player player=(Player)event.getSourceController();
    Component video=player.getVisualComponent();
    listener.setPreview(video);
    showPreview(videoContainer,video,player);
  }
}",0.9508623494956068
107670,"public void dispose(){
  if (windowListener != null) {
    if (window != null) {
      window.removeWindowListener(windowListener);
      window=null;
    }
    windowListener=null;
  }
  preview.removeHierarchyListener(this);
  disposePlayer(player);
  previewContainer.remove(preview);
}","/** 
 * Disposes player and cleans listeners as we will no longer need them.
 */
public void dispose(){
  if (windowListener != null) {
    if (window != null) {
      window.removeWindowListener(windowListener);
      window=null;
    }
    windowListener=null;
  }
  container.removeHierarchyListener(this);
  disposePlayer(player);
  if (preview != null)   container.remove(preview);
}",0.8094534711964549
107671,"/** 
 * {@inheritDoc}
 * @param inputBuffer input <tt>Buffer</tt>
 * @param outputBuffer output <tt>Buffer</tt>
 * @return <tt>BUFFER_PROCESSED_OK</tt> or <tt>INPUT_BUFFER_NOT_CONSUMED</tt>
 */
protected int doProcess(Buffer inputBuffer,Buffer outputBuffer){
  if (inputBuffer.isDiscard() || ((byte[])inputBuffer.getData()).length == 0) {
    outputBuffer.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  byte[] output;
  int offset;
  boolean haveToCopy=true;
  final int pdMaxLen=DePacketizer.VP8PayloadDescriptor.MAX_LENGTH;
  if (inputBuffer.getLength() <= MAX_SIZE) {
    if (inputBuffer.getOffset() >= pdMaxLen) {
      output=(byte[])inputBuffer.getData();
      offset=inputBuffer.getOffset();
      haveToCopy=false;
    }
 else {
      output=validateByteArraySize(outputBuffer,inputBuffer.getLength() + pdMaxLen);
      offset=pdMaxLen;
    }
  }
 else {
    output=validateByteArraySize(outputBuffer,MAX_SIZE + pdMaxLen);
    offset=pdMaxLen;
  }
  int len=inputBuffer.getLength() <= MAX_SIZE ? inputBuffer.getLength() : MAX_SIZE;
  if (haveToCopy) {
    System.arraycopy((byte[])inputBuffer.getData(),inputBuffer.getOffset(),output,offset,len);
  }
  byte[] pd=DePacketizer.VP8PayloadDescriptor.create(firstPacket);
  System.arraycopy(pd,0,output,offset - pd.length,pd.length);
  offset-=pd.length;
  outputBuffer.setFormat(new VideoFormat(Constants.VP8_RTP));
  outputBuffer.setOffset(offset);
  outputBuffer.setLength(len + pd.length);
  if (inputBuffer.getLength() <= MAX_SIZE) {
    firstPacket=true;
    return BUFFER_PROCESSED_OK;
  }
 else {
    firstPacket=false;
    inputBuffer.setLength(inputBuffer.getLength() - MAX_SIZE);
    inputBuffer.setOffset(inputBuffer.getOffset() + MAX_SIZE);
    return INPUT_BUFFER_NOT_CONSUMED;
  }
}","/** 
 * {@inheritDoc}
 * @param inputBuffer input <tt>Buffer</tt>
 * @param outputBuffer output <tt>Buffer</tt>
 * @return <tt>BUFFER_PROCESSED_OK</tt> or <tt>INPUT_BUFFER_NOT_CONSUMED</tt>
 */
protected int doProcess(Buffer inputBuffer,Buffer outputBuffer){
  if (inputBuffer.isDiscard() || ((byte[])inputBuffer.getData()).length == 0) {
    outputBuffer.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  byte[] output;
  int offset;
  final int pdMaxLen=DePacketizer.VP8PayloadDescriptor.MAX_LENGTH;
  if (inputBuffer.getLength() <= MAX_SIZE) {
    output=validateByteArraySize(outputBuffer,inputBuffer.getLength() + pdMaxLen);
    offset=pdMaxLen;
  }
 else {
    output=validateByteArraySize(outputBuffer,MAX_SIZE + pdMaxLen);
    offset=pdMaxLen;
  }
  int len=inputBuffer.getLength() <= MAX_SIZE ? inputBuffer.getLength() : MAX_SIZE;
  System.arraycopy((byte[])inputBuffer.getData(),inputBuffer.getOffset(),output,offset,len);
  byte[] pd=DePacketizer.VP8PayloadDescriptor.create(firstPacket);
  System.arraycopy(pd,0,output,offset - pd.length,pd.length);
  offset-=pd.length;
  outputBuffer.setFormat(new VideoFormat(Constants.VP8_RTP));
  outputBuffer.setOffset(offset);
  outputBuffer.setLength(len + pd.length);
  if (inputBuffer.getLength() <= MAX_SIZE) {
    firstPacket=true;
    return BUFFER_PROCESSED_OK;
  }
 else {
    firstPacket=false;
    inputBuffer.setLength(inputBuffer.getLength() - MAX_SIZE);
    inputBuffer.setOffset(inputBuffer.getOffset() + MAX_SIZE);
    return INPUT_BUFFER_NOT_CONSUMED;
  }
}",0.8827460510328068
107672,"/** 
 * Prints all statistics available for   {@link #rtpManager}.
 * @param rtpManager the <tt>RTPManager</tt> to print statistics for
 */
private void printFlowStatistics(StreamRTPManager rtpManager){
  try {
    if (!logger.isInfoEnabled())     return;
    GlobalTransmissionStats s=rtpManager.getGlobalTransmissionStats();
    StringBuilder buff=new StringBuilder(StatisticsEngine.RTP_STAT_PREFIX);
    MediaType mediaType=getMediaType();
    String mediaTypeStr=(mediaType == null) ? ""String_Node_Str"" : mediaType.toString();
    buff.append(""String_Node_Str"").append(mediaTypeStr).append(""String_Node_Str"").append(getLocalSourceID()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getBytesSent()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getRTPSent()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(minRemoteInterArrivalJitter).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(maxRemoteInterArrivalJitter).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getLocalColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getRemoteColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getRTCPSent()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getTransmitFailed());
    logger.info(buff);
    GlobalReceptionStats rs=rtpManager.getGlobalReceptionStats();
    MediaFormat format=getFormat();
    buff=new StringBuilder(StatisticsEngine.RTP_STAT_PREFIX);
    buff.append(""String_Node_Str"").append((format == null) ? ""String_Node_Str"" : format).append(""String_Node_Str"").append(getRemoteSourceID()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getPacketsRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getBytesRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(statisticsEngine.getLost()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(statisticsEngine.getMinInterArrivalJitter()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(statisticsEngine.getMaxInterArrivalJitter()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getRTCPRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getBadRTCPPkts()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getBadRTPkts()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getLocalColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedBye()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedRR()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedSDES()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedSR()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getPacketsLooped()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getRemoteColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getSRRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getTransmitFailed()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getUnknownTypes());
    buff.append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(mediaStreamStatsImpl.getNbDiscarded()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(mediaStreamStatsImpl.getNbFec());
    logger.info(buff);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",t);
  }
}","/** 
 * Prints all statistics available for   {@link #rtpManager}.
 * @param rtpManager the <tt>RTPManager</tt> to print statistics for
 */
private void printFlowStatistics(StreamRTPManager rtpManager){
  try {
    if (!logger.isInfoEnabled())     return;
    GlobalTransmissionStats s=rtpManager.getGlobalTransmissionStats();
    StringBuilder buff=new StringBuilder(StatisticsEngine.RTP_STAT_PREFIX);
    MediaType mediaType=getMediaType();
    String mediaTypeStr=(mediaType == null) ? ""String_Node_Str"" : mediaType.toString();
    buff.append(""String_Node_Str"").append(mediaTypeStr).append(""String_Node_Str"").append(getLocalSourceID()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getBytesSent()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getRTPSent()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(minRemoteInterArrivalJitter).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(maxRemoteInterArrivalJitter).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getLocalColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getRemoteColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getRTCPSent()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(s.getTransmitFailed());
    logger.info(buff);
    GlobalReceptionStats rs=rtpManager.getGlobalReceptionStats();
    MediaFormat format=getFormat();
    buff=new StringBuilder(StatisticsEngine.RTP_STAT_PREFIX);
    buff.append(""String_Node_Str"").append((format == null) ? ""String_Node_Str"" : format).append(""String_Node_Str"").append(getRemoteSourceID()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getPacketsRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getBytesRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(statisticsEngine.getLost()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(statisticsEngine.getMinInterArrivalJitter()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(statisticsEngine.getMaxInterArrivalJitter()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getRTCPRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getBadRTCPPkts()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getBadRTPkts()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getLocalColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedBye()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedRR()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedSDES()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getMalformedSR()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getPacketsLooped()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getRemoteColls()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getSRRecd()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getTransmitFailed()).append(""String_Node_Str"").append(StatisticsEngine.RTP_STAT_PREFIX).append(""String_Node_Str"").append(rs.getUnknownTypes());
    logger.info(buff);
  }
 catch (  Throwable t) {
    logger.error(""String_Node_Str"",t);
  }
}",0.9652982535722386
107673,"/** 
 * Releases the resources allocated by this instance in the course of its execution and prepares it to be garbage collected.
 * @see MediaStream#close()
 */
public void close(){
  stop();
  closeSendStreams();
  srtpControl.cleanup();
  if (csrcEngine != null) {
    csrcEngine.close();
    csrcEngine=null;
  }
  if (rtpManager != null) {
    if (logger.isInfoEnabled())     printFlowStatistics(rtpManager);
    rtpManager.removeReceiveStreamListener(this);
    rtpManager.removeSendStreamListener(this);
    rtpManager.removeSessionListener(this);
    rtpManager.removeRemoteListener(this);
    try {
      rtpManager.dispose();
      rtpManager=null;
    }
 catch (    Throwable t) {
      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;
      logger.error(""String_Node_Str"",t);
    }
  }
  if (rtpConnector != null)   rtpConnector.removeTargets();
  rtpConnectorTarget=null;
  if (deviceSession != null)   deviceSession.close();
}","/** 
 * Releases the resources allocated by this instance in the course of its execution and prepares it to be garbage collected.
 * @see MediaStream#close()
 */
public void close(){
  if (logger.isInfoEnabled())   printReceiveStreamStatistics();
  stop();
  closeSendStreams();
  srtpControl.cleanup();
  if (csrcEngine != null) {
    csrcEngine.close();
    csrcEngine=null;
  }
  if (rtpManager != null) {
    if (logger.isInfoEnabled())     printFlowStatistics(rtpManager);
    rtpManager.removeReceiveStreamListener(this);
    rtpManager.removeSendStreamListener(this);
    rtpManager.removeSessionListener(this);
    rtpManager.removeRemoteListener(this);
    try {
      rtpManager.dispose();
      rtpManager=null;
    }
 catch (    Throwable t) {
      if (t instanceof ThreadDeath)       throw (ThreadDeath)t;
      logger.error(""String_Node_Str"",t);
    }
  }
  if (rtpConnector != null)   rtpConnector.removeTargets();
  rtpConnectorTarget=null;
  if (deviceSession != null)   deviceSession.close();
}",0.9673802242609582
107674,"/** 
 * Gets this <tt>MediaDevice</tt>'s <tt>PacketLossAwareEncoder</tt> if any, <tt>null</tt> otherwise. To find such an instance, the codec chain contained in the <tt>DeviceSession</tt>'s processor is searched.
 * @return this <tt>MediaDevice</tt>'s <tt>PacketLossAwareEncoder</tt> ifany, <tt>null</tt> otherwise.
 */
public PacketLossAwareEncoder getPacketLossAwareEncoder(){
  if (packetLossAwareEncoder != null)   return packetLossAwareEncoder;
  MediaDeviceSession mediaDeviceSession=getDeviceSession();
  if (mediaDeviceSession == null)   return null;
  Processor processor=mediaDeviceSession.getProcessor();
  if (processor == null)   return null;
  for (  TrackControl tc : processor.getTrackControls()) {
    Object obj=tc.getControl(PacketLossAwareEncoder.class.getName());
    if (obj instanceof PacketLossAwareEncoder) {
      packetLossAwareEncoder=(PacketLossAwareEncoder)obj;
      return packetLossAwareEncoder;
    }
  }
  return packetLossAwareEncoder;
}","/** 
 * Gets this <tt>MediaDevice</tt>'s <tt>PacketLossAwareEncoder</tt> if any, <tt>null</tt> otherwise. To find such an instance, the codec chain contained in the <tt>DeviceSession</tt>'s processor is searched.
 * @return this <tt>MediaDevice</tt>'s <tt>PacketLossAwareEncoder</tt> ifany, <tt>null</tt> otherwise.
 */
public PacketLossAwareEncoder getPacketLossAwareEncoder(){
  MediaDeviceSession mediaDeviceSession=getDeviceSession();
  if (mediaDeviceSession == null)   return null;
  return mediaDeviceSession.getPacketLossAwareEncoder();
}",0.6833443054641212
107675,"/** 
 * Method called back in the RemoteListener to notify listener of all RTP Remote Events.RemoteEvents are one of ReceiverReportEvent, SenderReportEvent or RemoteCollisionEvent
 * @param remoteEvent the event
 */
public void update(RemoteEvent remoteEvent){
  if (remoteEvent instanceof SenderReportEvent || remoteEvent instanceof ReceiverReportEvent) {
    Report report;
    boolean senderReport=false;
    if (remoteEvent instanceof SenderReportEvent) {
      numberOfReceivedSenderReports++;
      report=((SenderReportEvent)remoteEvent).getReport();
      senderReport=true;
    }
 else {
      numberOfReceivedReceiverReports++;
      report=((ReceiverReportEvent)remoteEvent).getReport();
    }
    Feedback feedback=null;
    long remoteJitter=-1;
    if (report.getFeedbackReports().size() > 0) {
      feedback=(Feedback)report.getFeedbackReports().get(0);
      remoteJitter=feedback.getJitter();
      if ((remoteJitter < minRemoteInterArrivalJitter) || (minRemoteInterArrivalJitter == -1))       minRemoteInterArrivalJitter=remoteJitter;
      if (maxRemoteInterArrivalJitter < remoteJitter)       maxRemoteInterArrivalJitter=remoteJitter;
    }
    PacketLossAwareEncoder plae=getPacketLossAwareEncoder();
    if (plae != null)     plae.setExpectedPacketLoss((int)((feedback.getFractionLost() * 100) / 256));
    if (logger.isInfoEnabled()) {
      if ((numberOfReceivedSenderReports + numberOfReceivedReceiverReports) % 4 != 1)       return;
      StringBuilder buff=new StringBuilder(StatisticsEngine.RTP_STAT_PREFIX);
      MediaType mediaType=getMediaType();
      String mediaTypeStr=(mediaType == null) ? ""String_Node_Str"" : mediaType.toString();
      buff.append(""String_Node_Str"").append(senderReport ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(mediaTypeStr).append(""String_Node_Str"").append(getLocalSourceID()).append(""String_Node_Str"");
      if (senderReport) {
        buff.append(""String_Node_Str"").append(((SenderReport)report).getSenderPacketCount()).append(""String_Node_Str"").append(((SenderReport)report).getSenderByteCount());
      }
      if (feedback != null) {
        buff.append(""String_Node_Str"").append(remoteJitter).append(""String_Node_Str"").append(feedback.getNumLost()).append(""String_Node_Str"").append((int)(feedback.getDLSR() / 65.536)).append(""String_Node_Str"");
      }
      buff.append(""String_Node_Str"");
      logger.info(buff);
    }
  }
}","/** 
 * Method called back in the RemoteListener to notify listener of all RTP Remote Events.RemoteEvents are one of ReceiverReportEvent, SenderReportEvent or RemoteCollisionEvent
 * @param remoteEvent the event
 */
public void update(RemoteEvent remoteEvent){
  if (remoteEvent instanceof SenderReportEvent || remoteEvent instanceof ReceiverReportEvent) {
    Report report;
    boolean senderReport=false;
    if (remoteEvent instanceof SenderReportEvent) {
      numberOfReceivedSenderReports++;
      report=((SenderReportEvent)remoteEvent).getReport();
      senderReport=true;
    }
 else {
      numberOfReceivedReceiverReports++;
      report=((ReceiverReportEvent)remoteEvent).getReport();
    }
    Feedback feedback=null;
    long remoteJitter=-1;
    if (report.getFeedbackReports().size() > 0) {
      feedback=(Feedback)report.getFeedbackReports().get(0);
      remoteJitter=feedback.getJitter();
      if ((remoteJitter < minRemoteInterArrivalJitter) || (minRemoteInterArrivalJitter == -1))       minRemoteInterArrivalJitter=remoteJitter;
      if (maxRemoteInterArrivalJitter < remoteJitter)       maxRemoteInterArrivalJitter=remoteJitter;
    }
    PacketLossAwareEncoder plae=getPacketLossAwareEncoder();
    if (plae != null && feedback != null && getDirection() != MediaDirection.INACTIVE) {
      plae.setExpectedPacketLoss((int)((feedback.getFractionLost() * 100) / 256));
    }
    if (logger.isInfoEnabled()) {
      if ((numberOfReceivedSenderReports + numberOfReceivedReceiverReports) % 4 != 1)       return;
      StringBuilder buff=new StringBuilder(StatisticsEngine.RTP_STAT_PREFIX);
      MediaType mediaType=getMediaType();
      String mediaTypeStr=(mediaType == null) ? ""String_Node_Str"" : mediaType.toString();
      buff.append(""String_Node_Str"").append(senderReport ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(mediaTypeStr).append(""String_Node_Str"").append(getLocalSourceID()).append(""String_Node_Str"");
      if (senderReport) {
        buff.append(""String_Node_Str"").append(((SenderReport)report).getSenderPacketCount()).append(""String_Node_Str"").append(((SenderReport)report).getSenderByteCount());
      }
      if (feedback != null) {
        buff.append(""String_Node_Str"").append(remoteJitter).append(""String_Node_Str"").append(feedback.getNumLost()).append(""String_Node_Str"").append((int)(feedback.getDLSR() / 65.536)).append(""String_Node_Str"");
      }
      buff.append(""String_Node_Str"");
      logger.info(buff);
    }
  }
}",0.9843654822335024
107676,"protected void doOpen() throws ResourceUnavailableException {
  encState=new SKP_Silk_encoder_state_FLP();
  encControl=new SKP_SILK_SDK_EncControlStruct();
  if (Silk_enc_API.SKP_Silk_SDK_InitEncoder(encState,encControl) != 0)   throw new ResourceUnavailableException(""String_Node_Str"");
  AudioFormat inputFormat=(AudioFormat)getInputFormat();
  double sampleRate=inputFormat.getSampleRate();
  int channels=inputFormat.getChannels();
  ConfigurationService cfg=LibJitsi.getConfigurationService();
  boolean useFEC=cfg.getBoolean(""String_Node_Str"" + ""String_Node_Str"",true);
  boolean assumePacketLoss=cfg.getBoolean(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",true);
  String satStr=cfg.getString(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  float sat=Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES;
  try {
    sat=Float.parseFloat(satStr);
  }
 catch (  Exception e) {
  }
  Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES=sat;
  encControl.API_sampleRate=(int)sampleRate;
  encControl.bitRate=BITRATE;
  encControl.complexity=COMPLEXITY;
  encControl.maxInternalSampleRate=encControl.API_sampleRate;
  encControl.packetLossPercentage=assumePacketLoss ? 2 : 0;
  encControl.packetSize=(int)((JavaDecoder.FRAME_DURATION * sampleRate * channels) / 1000);
  encControl.useDTX=USE_DTX ? 1 : 0;
  encControl.useInBandFEC=useFEC ? 1 : 0;
}","protected void doOpen() throws ResourceUnavailableException {
  encState=new SKP_Silk_encoder_state_FLP();
  encControl=new SKP_SILK_SDK_EncControlStruct();
  if (Silk_enc_API.SKP_Silk_SDK_InitEncoder(encState,encControl) != 0)   throw new ResourceUnavailableException(""String_Node_Str"");
  AudioFormat inputFormat=(AudioFormat)getInputFormat();
  double sampleRate=inputFormat.getSampleRate();
  int channels=inputFormat.getChannels();
  ConfigurationService cfg=LibJitsi.getConfigurationService();
  boolean useFEC=cfg.getBoolean(""String_Node_Str"" + ""String_Node_Str"",true);
  boolean assumePacketLoss=cfg.getBoolean(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",true);
  String satStr=cfg.getString(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  float sat=Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES;
  try {
    sat=Float.parseFloat(satStr);
  }
 catch (  Exception e) {
  }
  Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES=sat;
  encControl.API_sampleRate=(int)sampleRate;
  encControl.bitRate=BITRATE;
  encControl.complexity=COMPLEXITY;
  encControl.maxInternalSampleRate=encControl.API_sampleRate;
  encControl.packetLossPercentage=assumePacketLoss ? 3 : 0;
  encControl.packetSize=(int)((JavaDecoder.FRAME_DURATION * sampleRate * channels) / 1000);
  encControl.useDTX=USE_DTX ? 1 : 0;
  encControl.useInBandFEC=useFEC ? 1 : 0;
}",0.9992636229749632
107677,"/** 
 * Control low bitrate redundancy usage.
 * @param psEnc Encoder state FLP.
 * @param psEncCtrl Encoder control.
 */
static void SKP_Silk_LBRR_ctrl_FLP(SKP_Silk_encoder_state_FLP psEnc,SKP_Silk_encoder_control psEncCtrl){
  int LBRR_usage;
  if (psEnc.sCmn.LBRR_enabled != 0) {
    LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
    if (psEnc.speech_activity > Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES && psEnc.sCmn.PacketLoss_perc >= Silk_define.LBRR_LOSS_THRES) {
      LBRR_usage=Silk_define.SKP_SILK_ADD_LBRR_TO_PLUS1;
    }
    psEncCtrl.LBRR_usage=LBRR_usage;
  }
 else {
    psEncCtrl.LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
  }
}","/** 
 * Control low bitrate redundancy usage.
 * @param psEnc Encoder state FLP.
 * @param psEncCtrl Encoder control.
 */
static void SKP_Silk_LBRR_ctrl_FLP(SKP_Silk_encoder_state_FLP psEnc,SKP_Silk_encoder_control psEncCtrl){
  int LBRR_usage;
  if (psEnc.sCmn.LBRR_enabled != 0) {
    LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
    if (psEnc.speech_activity > Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES && psEnc.sCmn.PacketLoss_perc > Silk_define.LBRR_LOSS_THRES) {
      LBRR_usage=Silk_define.SKP_SILK_ADD_LBRR_TO_PLUS1;
    }
    psEncCtrl.LBRR_usage=LBRR_usage;
  }
 else {
    psEncCtrl.LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
  }
}",0.999216914643696
107678,"/** 
 * Control low bitrate redundancy usage.
 * @param psEnc Encoder state FLP.
 * @param psEncCtrl Encoder control.
 */
static void SKP_Silk_LBRR_ctrl_FLP(SKP_Silk_encoder_state_FLP psEnc,SKP_Silk_encoder_control psEncCtrl){
  int LBRR_usage;
  if (psEnc.sCmn.LBRR_enabled != 0) {
    LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
    if (psEnc.speech_activity > Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES && psEnc.sCmn.PacketLoss_perc > Silk_define.LBRR_LOSS_THRES) {
      LBRR_usage=Silk_define.SKP_SILK_ADD_LBRR_TO_PLUS1;
    }
    psEncCtrl.LBRR_usage=LBRR_usage;
  }
 else {
    psEncCtrl.LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
  }
}","/** 
 * Control low bitrate redundancy usage.
 * @param psEnc Encoder state FLP.
 * @param psEncCtrl Encoder control.
 */
static void SKP_Silk_LBRR_ctrl_FLP(SKP_Silk_encoder_state_FLP psEnc,SKP_Silk_encoder_control psEncCtrl){
  int LBRR_usage;
  if (psEnc.sCmn.LBRR_enabled != 0) {
    LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
    if (psEnc.speech_activity > Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES && psEnc.sCmn.PacketLoss_perc >= Silk_define.LBRR_LOSS_THRES) {
      LBRR_usage=Silk_define.SKP_SILK_ADD_LBRR_TO_PLUS1;
    }
    psEncCtrl.LBRR_usage=LBRR_usage;
  }
 else {
    psEncCtrl.LBRR_usage=Silk_define.SKP_SILK_NO_LBRR;
  }
}",0.999216914643696
107679,"/** 
 * Sets the <tt>RTPTranslator</tt> which is to forward RTP and RTCP traffic between this and other <tt>MediaStream</tt>s.
 * @param rtpTranslator the <tt>RTPTranslator</tt> which is to forward RTPand RTCP traffic between this and other <tt>MediaStream</tt>s
 */
public void setRTPTranslator(RTPTranslator rtpTranslator){
  if (this.rtpTranslator != rtpTranslator) {
    this.rtpTranslator=rtpTranslator;
  }
}","/** 
 * Sets the <tt>RTPTranslator</tt> which is to forward RTP and RTCP traffic between this and other <tt>MediaStream</tt>s.
 * @param rtpTranslator the <tt>RTPTranslator</tt> which is to forward RTPand RTCP traffic between this and other <tt>MediaStream</tt>s
 */
public void setRTPTranslator(RTPTranslator rtpTranslator){
  if (this.rtpTranslator != rtpTranslator)   this.rtpTranslator=rtpTranslator;
}",0.9902439024390244
107680,"/** 
 * Starts the processing of media in this instance in a specific direction.
 * @param direction a <tt>MediaDirection</tt> value which represents thedirection of the processing of media to be started. For example, {@link MediaDirection#SENDRECV} to start both capture and playback ofmedia in this instance or  {@link MediaDirection#SENDONLY} to only startthe capture of media in this instance
 */
private void start(MediaDirection direction){
  if (direction == null)   throw new NullPointerException(""String_Node_Str"");
  if (direction.allowsSending() && ((startedDirection == null) || !startedDirection.allowsSending())) {
    startSendStreams();
    getDeviceSession().start(MediaDirection.SENDONLY);
    if (MediaDirection.RECVONLY.equals(startedDirection))     startedDirection=MediaDirection.SENDRECV;
 else     if (startedDirection == null)     startedDirection=MediaDirection.SENDONLY;
    logger.info(getFormat().getMediaType().toString() + ""String_Node_Str"" + getMediaStreamStats().getEncoding()+ ""String_Node_Str""+ getMediaStreamStats().getEncodingClockRate()+ ""String_Node_Str"");
    logger.info(getFormat().getMediaType().toString() + ""String_Node_Str"" + getMediaStreamStats().getRemoteIPAddress()+ ""String_Node_Str""+ String.valueOf(getMediaStreamStats().getRemotePort()));
  }
  if (direction.allowsReceiving() && ((startedDirection == null) || !startedDirection.allowsReceiving())) {
    startReceiveStreams();
    getDeviceSession().start(MediaDirection.RECVONLY);
    if (MediaDirection.SENDONLY.equals(startedDirection))     startedDirection=MediaDirection.SENDRECV;
 else     if (startedDirection == null)     startedDirection=MediaDirection.RECVONLY;
  }
}","/** 
 * Starts the processing of media in this instance in a specific direction.
 * @param direction a <tt>MediaDirection</tt> value which represents thedirection of the processing of media to be started. For example, {@link MediaDirection#SENDRECV} to start both capture and playback ofmedia in this instance or  {@link MediaDirection#SENDONLY} to only startthe capture of media in this instance
 */
private void start(MediaDirection direction){
  if (direction == null)   throw new NullPointerException(""String_Node_Str"");
  boolean getRTPManagerForRTPTranslator=true;
  if (direction.allowsSending() && ((startedDirection == null) || !startedDirection.allowsSending())) {
    getRTPManagerForRTPTranslator=false;
    startSendStreams();
    getDeviceSession().start(MediaDirection.SENDONLY);
    if (MediaDirection.RECVONLY.equals(startedDirection))     startedDirection=MediaDirection.SENDRECV;
 else     if (startedDirection == null)     startedDirection=MediaDirection.SENDONLY;
    logger.info(getFormat().getMediaType().toString() + ""String_Node_Str"" + getMediaStreamStats().getEncoding()+ ""String_Node_Str""+ getMediaStreamStats().getEncodingClockRate()+ ""String_Node_Str"");
    logger.info(getFormat().getMediaType().toString() + ""String_Node_Str"" + getMediaStreamStats().getRemoteIPAddress()+ ""String_Node_Str""+ String.valueOf(getMediaStreamStats().getRemotePort()));
  }
  if (direction.allowsReceiving() && ((startedDirection == null) || !startedDirection.allowsReceiving())) {
    getRTPManagerForRTPTranslator=false;
    startReceiveStreams();
    getDeviceSession().start(MediaDirection.RECVONLY);
    if (MediaDirection.SENDONLY.equals(startedDirection))     startedDirection=MediaDirection.SENDRECV;
 else     if (startedDirection == null)     startedDirection=MediaDirection.RECVONLY;
  }
  if (getRTPManagerForRTPTranslator && (rtpTranslator != null))   getRTPManager();
}",0.940912909549146
107681,"/** 
 * Creates   {@link #fakeSendStream} if it does not exist yet and isconsidered necessary; otherwise, does nothing.
 */
private synchronized void createFakeSendStreamIfNecessary(){
  if ((fakeSendStream == null) && sendStreams.isEmpty() && (streamRTPManagers.size() > 1)) {
    Format supportedFormat=null;
    for (    StreamRTPManagerDesc s : streamRTPManagers) {
      Format[] formats=s.getFormats();
      if ((formats != null) && (formats.length > 0)) {
        for (        Format f : formats) {
          if (f != null) {
            supportedFormat=f;
            break;
          }
        }
        if (supportedFormat != null)         break;
      }
    }
    if (supportedFormat != null) {
      try {
        fakeSendStream=manager.createSendStream(new FakePushBufferDataSource(supportedFormat),0);
      }
 catch (      Throwable t) {
        if (t instanceof ThreadDeath)         throw (ThreadDeath)t;
 else {
          logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",t);
        }
      }
    }
  }
}","/** 
 * Creates   {@link #fakeSendStream} if it does not exist yet and isconsidered necessary; otherwise, does nothing.
 */
private synchronized void createFakeSendStreamIfNecessary(){
  if (CREATE_FAKE_SEND_STREAM_IF_NECESSARY && (fakeSendStream == null) && sendStreams.isEmpty()&& (streamRTPManagers.size() > 1)) {
    Format supportedFormat=null;
    for (    StreamRTPManagerDesc s : streamRTPManagers) {
      Format[] formats=s.getFormats();
      if ((formats != null) && (formats.length > 0)) {
        for (        Format f : formats) {
          if (f != null) {
            supportedFormat=f;
            break;
          }
        }
        if (supportedFormat != null)         break;
      }
    }
    if (supportedFormat != null) {
      try {
        fakeSendStream=manager.createSendStream(new FakePushBufferDataSource(supportedFormat),0);
      }
 catch (      Throwable t) {
        if (t instanceof ThreadDeath)         throw (ThreadDeath)t;
 else {
          logger.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",t);
        }
      }
    }
  }
}",0.9817045961624274
107682,"public synchronized void dispose(StreamRTPManager streamRTPManager){
  Iterator<StreamRTPManagerDesc> streamRTPManagerIter=streamRTPManagers.iterator();
  while (streamRTPManagerIter.hasNext()) {
    StreamRTPManagerDesc streamRTPManagerDesc=streamRTPManagerIter.next();
    if (streamRTPManagerDesc.streamRTPManager == streamRTPManager) {
      RTPConnectorDesc connectorDesc=streamRTPManagerDesc.connectorDesc;
      if (connectorDesc != null) {
        if (this.connector != null) {
          this.connector.removeConnector(connectorDesc);
          connectorDesc.connector.close();
        }
        streamRTPManagerDesc.connectorDesc=null;
      }
      streamRTPManagerIter.remove();
      break;
    }
  }
}","public synchronized void dispose(StreamRTPManager streamRTPManager){
  Iterator<StreamRTPManagerDesc> streamRTPManagerIter=streamRTPManagers.iterator();
  while (streamRTPManagerIter.hasNext()) {
    StreamRTPManagerDesc streamRTPManagerDesc=streamRTPManagerIter.next();
    if (streamRTPManagerDesc.streamRTPManager == streamRTPManager) {
      RTPConnectorDesc connectorDesc=streamRTPManagerDesc.connectorDesc;
      if (connectorDesc != null) {
        if (this.connector != null) {
          this.connector.removeConnector(connectorDesc);
          connectorDesc.connector.close();
        }
        streamRTPManagerDesc.connectorDesc=null;
      }
      streamRTPManagerIter.remove();
      closeFakeSendStreamIfNotNecessary();
      break;
    }
  }
}",0.9707681849082256
107683,"public synchronized SendStream createSendStream(StreamRTPManager streamRTPManager,DataSource dataSource,int streamIndex) throws IOException, UnsupportedFormatException {
  SendStreamDesc sendStreamDesc=null;
  for (  SendStreamDesc s : sendStreams)   if ((s.dataSource == dataSource) && (s.streamIndex == streamIndex)) {
    sendStreamDesc=s;
    break;
  }
  if (sendStreamDesc == null) {
    SendStream sendStream=manager.createSendStream(dataSource,streamIndex);
    if (sendStream != null) {
      sendStreamDesc=new SendStreamDesc(dataSource,streamIndex,sendStream);
      sendStreams.add(sendStreamDesc);
    }
  }
  return (sendStreamDesc == null) ? null : sendStreamDesc.getSendStream(streamRTPManager,true);
}","public synchronized SendStream createSendStream(StreamRTPManager streamRTPManager,DataSource dataSource,int streamIndex) throws IOException, UnsupportedFormatException {
  SendStreamDesc sendStreamDesc=null;
  for (  SendStreamDesc s : sendStreams)   if ((s.dataSource == dataSource) && (s.streamIndex == streamIndex)) {
    sendStreamDesc=s;
    break;
  }
  if (sendStreamDesc == null) {
    SendStream sendStream=manager.createSendStream(dataSource,streamIndex);
    if (sendStream != null) {
      sendStreamDesc=new SendStreamDesc(dataSource,streamIndex,sendStream);
      sendStreams.add(sendStreamDesc);
      closeFakeSendStreamIfNotNecessary();
    }
  }
  return (sendStreamDesc == null) ? null : sendStreamDesc.getSendStream(streamRTPManager,true);
}",0.9709263015551048
107684,"private boolean onPostPreferenceCheck(String key){
  if (key.equals(Settings.PREFERENCE_CPUUSAGE) || key.equals(Settings.PREFERENCE_SHORTCUT)) {
    CheckBoxPreference autoStart=(CheckBoxPreference)getPreferenceScreen().findPreference(Settings.PREFERENCE_AUTOSTART);
    if (helper.getBoolean(Settings.PREFERENCE_CPUUSAGE,false) || helper.getBoolean(Settings.PREFERENCE_SHORTCUT,false)) {
      autoStart.setEnabled(true);
    }
 else {
      autoStart.setEnabled(false);
    }
  }
  if (key.equals(Settings.PREFERENCE_CPUUSAGE) || key.equals(Settings.PREFERENCE_COLOR) || key.equals(Settings.PREFERENCE_ROOT)|| key.equals(Settings.PREFERENCE_TEMPVALUE)|| key.equals(Settings.PREFERENCE_SHORTCUT)|| key.equals(Settings.PREFERENCE_NOTIFICATION_COLOR)|| key.equals(Settings.PREFERENCE_NOTIFICATION_TOP)|| key.equals(Settings.PREFERENCE_NOTIFICATION_CUSTOMIZE)) {
    if (!key.equals(Settings.PREFERENCE_CPUUSAGE) && !key.equals(Settings.PREFERENCE_SHORTCUT)) {
      helper.setString(Settings.SESSION_SECTION,""String_Node_Str"");
    }
    getApplication().stopService(new Intent(getApplication(),OSMonitorService.class));
    if (helper.getBoolean(Settings.PREFERENCE_CPUUSAGE,false) || helper.getBoolean(Settings.PREFERENCE_SHORTCUT,false)) {
      getApplication().startService(new Intent(getApplication(),OSMonitorService.class));
    }
  }
  return true;
}","private boolean onPostPreferenceCheck(String key){
  if (key.equals(Settings.PREFERENCE_CPUUSAGE) || key.equals(Settings.PREFERENCE_SHORTCUT)) {
    CheckBoxPreference autoStart=(CheckBoxPreference)getPreferenceScreen().findPreference(Settings.PREFERENCE_AUTOSTART);
    if (helper.getBoolean(Settings.PREFERENCE_CPUUSAGE,false) || helper.getBoolean(Settings.PREFERENCE_SHORTCUT,false)) {
      autoStart.setEnabled(true);
    }
 else {
      autoStart.setEnabled(false);
    }
  }
  if (key.equals(Settings.PREFERENCE_CPUUSAGE) || key.equals(Settings.PREFERENCE_COLOR) || key.equals(Settings.PREFERENCE_ROOT)|| key.equals(Settings.PREFERENCE_TEMPVALUE)|| key.equals(Settings.PREFERENCE_SHORTCUT)|| key.equals(Settings.PREFERENCE_NOTIFICATION_COLOR)|| key.equals(Settings.PREFERENCE_NOTIFICATION_TOP)|| key.equals(Settings.PREFERENCE_NOTIFICATION_CUSTOMIZE)) {
    helper.setString(Settings.SESSION_SECTION,""String_Node_Str"");
    getApplication().stopService(new Intent(getApplication(),OSMonitorService.class));
    if (helper.getBoolean(Settings.PREFERENCE_CPUUSAGE,false) || helper.getBoolean(Settings.PREFERENCE_SHORTCUT,false)) {
      getApplication().startService(new Intent(getApplication(),OSMonitorService.class));
    }
  }
  return true;
}",0.7187739463601532
107685,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  IpcService.Initialize(this);
  setContentView(R.layout.ui_main);
  mViewPager=(ViewPager)findViewById(R.id.mainpager);
  mViewPager.setAdapter(new OSMonitorPagerAdapter(getSupportFragmentManager()));
  mViewPager.setOnPageChangeListener(this);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_process_tab).setTabListener(this));
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_connection_tab).setTabListener(this));
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_misc_tab).setTabListener(this));
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_debug_tab).setTabListener(this));
  mViewPager.setCurrentItem(0);
  final Settings setting=Settings.getInstance(this);
  if ((setting.isEnableCPUMeter() || setting.isAddShortCut()) && !CommonUtil.isServiceRunning(this))   startService(new Intent(this,OSMonitorService.class));
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  IpcService.Initialize(this);
  setContentView(R.layout.ui_main);
  mViewPager=(ViewPager)findViewById(R.id.mainpager);
  mViewPager.setAdapter(new OSMonitorPagerAdapter(getSupportFragmentManager()));
  mViewPager.setOnPageChangeListener(this);
  mViewPager.setOffscreenPageLimit(5);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(false);
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_process_tab).setTabListener(this));
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_connection_tab).setTabListener(this));
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_misc_tab).setTabListener(this));
  actionBar.addTab(actionBar.newTab().setText(R.string.ui_debug_tab).setTabListener(this));
  mViewPager.setCurrentItem(0);
  final Settings setting=Settings.getInstance(this);
  if ((setting.isEnableCPUMeter() || setting.isAddShortCut()) && !CommonUtil.isServiceRunning(this))   startService(new Intent(this,OSMonitorService.class));
}",0.9837160751565762
107686,"@Override public void onTabSelected(Tab tab,FragmentTransaction ft){
  mViewPager.setCurrentItem(tab.getPosition());
}","@Override public void onTabSelected(Tab tab,FragmentTransaction ft){
  mViewPager.setCurrentItem(tab.getPosition());
  if (mViewPager.getCurrentItem() != tab.getPosition())   mViewPager.setCurrentItem(tab.getPosition());
  ((OSMonitorPagerAdapter)mViewPager.getAdapter()).getItem(mViewPager.getCurrentItem()).setMenuVisibility(true);
}",0.5209713024282561
107687,"@Override public void onTabUnselected(Tab tab,FragmentTransaction ft){
}","@Override public void onTabUnselected(Tab tab,FragmentTransaction ft){
  ((OSMonitorPagerAdapter)mViewPager.getAdapter()).getItem(tab.getPosition()).setMenuVisibility(false);
}",0.5806451612903226
107688,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
switch (position) {
case 0:
    selectedType=ipcAction.LOGCAT_MAIN;
  break;
case 1:
selectedType=ipcAction.LOGCAT_SYSTEM;
break;
case 2:
selectedType=ipcAction.LOGCAT_EVENT;
break;
case 3:
selectedType=ipcAction.DMESG;
break;
}
((TextView)parent.getChildAt(0)).setTextColor(Color.WHITE);
if (stopUpdate == true) stopButton.performClick();
forceRefresh();
if (!stopUpdate) stopUpdate=false;
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
switch (position) {
case 0:
    selectedType=ipcAction.LOGCAT_MAIN;
  break;
case 1:
selectedType=ipcAction.LOGCAT_SYSTEM;
break;
case 2:
selectedType=ipcAction.LOGCAT_EVENT;
break;
case 3:
selectedType=ipcAction.DMESG;
break;
}
if (parent.getChildAt(0) != null) ((TextView)parent.getChildAt(0)).setTextColor(Color.WHITE);
if (stopUpdate == true) stopButton.performClick();
forceRefresh();
if (!stopUpdate) stopUpdate=false;
}",0.9660678642714572
107689,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.ui_message_menu,menu);
  MenuItem expendMenu=menu.findItem(R.id.ui_message_sort);
  Spinner expendItem=(Spinner)MenuItemCompat.getActionView(expendMenu);
switch (selectedType) {
case LOGCAT_MAIN:
    expendItem.setSelection(0);
  break;
case LOGCAT_SYSTEM:
expendItem.setSelection(1);
break;
case LOGCAT_EVENT:
expendItem.setSelection(2);
break;
case DMESG:
expendItem.setSelection(3);
break;
default :
break;
}
expendItem.setOnItemSelectedListener(new OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
switch (position) {
case 0:
selectedType=ipcAction.LOGCAT_MAIN;
break;
case 1:
selectedType=ipcAction.LOGCAT_SYSTEM;
break;
case 2:
selectedType=ipcAction.LOGCAT_EVENT;
break;
case 3:
selectedType=ipcAction.DMESG;
break;
}
((TextView)parent.getChildAt(0)).setTextColor(Color.WHITE);
if (stopUpdate == true) stopButton.performClick();
forceRefresh();
if (!stopUpdate) stopUpdate=false;
}
@Override public void onNothingSelected(AdapterView<?> arg0){
}
}
);
MenuItem searchMenu=menu.findItem(R.id.ui_message_search);
View searchItem=(View)MenuItemCompat.getActionView(searchMenu);
TextView searchView=(TextView)searchItem.findViewById(R.id.id_action_search_text);
searchView.setText(filterString);
searchView.addTextChangedListener(new TextWatcher(){
@Override public void onTextChanged(CharSequence cs,int arg1,int arg2,int arg3){
messageList.getFilter().filter(cs);
}
@Override public void beforeTextChanged(CharSequence arg0,int arg1,int arg2,int arg3){
}
@Override public void afterTextChanged(Editable arg0){
}
}
);
stopButton=(ImageButton)searchItem.findViewById(R.id.id_action_stop);
if (stopUpdate) stopButton.setImageResource(R.drawable.ic_action_start);
 else stopButton.setImageResource(R.drawable.ic_action_stop);
stopButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
stopUpdate=!stopUpdate;
if (stopUpdate) stopButton.setImageResource(R.drawable.ic_action_start);
 else stopButton.setImageResource(R.drawable.ic_action_stop);
}
}
);
ImageButton filterButton=(ImageButton)searchItem.findViewById(R.id.id_action_filter);
filterButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
showMultiChoiceItems();
}
}
);
super.onCreateOptionsMenu(menu,inflater);
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.ui_message_menu,menu);
  MenuItem expendMenu=menu.findItem(R.id.ui_message_sort);
  Spinner expendItem=(Spinner)MenuItemCompat.getActionView(expendMenu);
switch (selectedType) {
case LOGCAT_MAIN:
    expendItem.setSelection(0);
  break;
case LOGCAT_SYSTEM:
expendItem.setSelection(1);
break;
case LOGCAT_EVENT:
expendItem.setSelection(2);
break;
case DMESG:
expendItem.setSelection(3);
break;
default :
break;
}
expendItem.setOnItemSelectedListener(new OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
switch (position) {
case 0:
selectedType=ipcAction.LOGCAT_MAIN;
break;
case 1:
selectedType=ipcAction.LOGCAT_SYSTEM;
break;
case 2:
selectedType=ipcAction.LOGCAT_EVENT;
break;
case 3:
selectedType=ipcAction.DMESG;
break;
}
if (parent.getChildAt(0) != null) ((TextView)parent.getChildAt(0)).setTextColor(Color.WHITE);
if (stopUpdate == true) stopButton.performClick();
forceRefresh();
if (!stopUpdate) stopUpdate=false;
}
@Override public void onNothingSelected(AdapterView<?> arg0){
}
}
);
MenuItem searchMenu=menu.findItem(R.id.ui_message_search);
View searchItem=(View)MenuItemCompat.getActionView(searchMenu);
TextView searchView=(TextView)searchItem.findViewById(R.id.id_action_search_text);
searchView.setText(filterString);
searchView.addTextChangedListener(new TextWatcher(){
@Override public void onTextChanged(CharSequence cs,int arg1,int arg2,int arg3){
messageList.getFilter().filter(cs);
}
@Override public void beforeTextChanged(CharSequence arg0,int arg1,int arg2,int arg3){
}
@Override public void afterTextChanged(Editable arg0){
}
}
);
stopButton=(ImageButton)searchItem.findViewById(R.id.id_action_stop);
if (stopUpdate) stopButton.setImageResource(R.drawable.ic_action_start);
 else stopButton.setImageResource(R.drawable.ic_action_stop);
stopButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
stopUpdate=!stopUpdate;
if (stopUpdate) stopButton.setImageResource(R.drawable.ic_action_start);
 else stopButton.setImageResource(R.drawable.ic_action_stop);
}
}
);
ImageButton filterButton=(ImageButton)searchItem.findViewById(R.id.id_action_filter);
filterButton.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
showMultiChoiceItems();
}
}
);
super.onCreateOptionsMenu(menu,inflater);
}",0.9929925803792252
107690,"/** 
 * execute osmcore as a binary execute
 * @param context
 * @throws InterruptedException 
 */
public static boolean execCore(Context context){
  if (context == null)   return false;
  String binary=context.getFilesDir().getAbsolutePath() + ""String_Node_Str"" + binaryName;
  if (!copyFile(""String_Node_Str"",binary,context))   return false;
  File file=new File(binary + ""String_Node_Str"");
  FileChannel channel=null;
  FileLock lock=null;
  try {
    channel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
    lock=channel.tryLock();
  }
 catch (  Exception e) {
    return false;
  }
  try {
    final Settings settings=Settings.getInstance(context);
    Process process=null;
    if (!settings.isRoot())     process=Runtime.getRuntime().exec(""String_Node_Str"");
 else     process=Runtime.getRuntime().exec(""String_Node_Str"");
    DataOutputStream os=new DataOutputStream(process.getOutputStream());
    os.writeBytes(""String_Node_Str"" + binary + ""String_Node_Str"");
    if (!settings.isRoot()) {
      os.writeBytes(binary + ""String_Node_Str"" + settings.getToken().toString()+ ""String_Node_Str"");
      os.writeBytes(""String_Node_Str"");
      process.waitFor();
    }
 else {
      os.writeBytes(binary + ""String_Node_Str"" + settings.getToken().toString()+ ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    return false;
  }
  try {
    lock.release();
    channel.close();
  }
 catch (  Exception e) {
  }
  return true;
}","/** 
 * execute osmcore as a binary execute
 * @param context
 * @throws InterruptedException 
 */
public static boolean execCore(Context context){
  if (context == null)   return false;
  String binary=context.getFilesDir().getAbsolutePath() + ""String_Node_Str"" + binaryName;
  if (!copyFile(""String_Node_Str"",binary,context))   return false;
  File file=new File(binary + ""String_Node_Str"");
  FileChannel channel=null;
  FileLock lock=null;
  try {
    channel=new RandomAccessFile(file,""String_Node_Str"").getChannel();
    lock=channel.tryLock();
  }
 catch (  Exception e) {
    return false;
  }
  try {
    final Settings settings=Settings.getInstance(context);
    Process process=null;
    if (!settings.isRoot())     process=Runtime.getRuntime().exec(""String_Node_Str"");
 else     process=Runtime.getRuntime().exec(""String_Node_Str"");
    DataOutputStream os=new DataOutputStream(process.getOutputStream());
    os.writeBytes(""String_Node_Str"" + binary + ""String_Node_Str"");
    if (isCyanogenMod() && isKitKat() && settings.isRoot()) {
      os.writeBytes(binary + ""String_Node_Str"" + settings.getToken().toString()+ ""String_Node_Str"");
      Thread.sleep(500);
      process.destroy();
    }
 else {
      os.writeBytes(binary + ""String_Node_Str"" + settings.getToken().toString()+ ""String_Node_Str"");
      os.writeBytes(""String_Node_Str"");
      process.waitFor();
    }
  }
 catch (  Exception e) {
    return false;
  }
  try {
    lock.release();
    channel.close();
  }
 catch (  Exception e) {
  }
  return true;
}",0.8847184986595175
107691,"/** 
 * Uploads a binary file to a device on background process.
 * @param board board profile e.g. Boards.ARDUINO_UNO
 * @param filePath a binary file path e.g. /sdcard/arduino/Blink.hex
 * @param callback
 * @return true: success, false: fail
 * @throws RuntimeException
 */
public void upload(Boards board,String filePath,UploadCallBack callback) throws RuntimeException {
  mUploader=new Uploader();
  mCallBack=callback;
  mFilePath=filePath;
  mBoard=board;
  new Thread(new Runnable(){
    @Override public void run(){
      boolean cleanAfter=false;
      UartConfig tmpUartConfig=new UartConfig();
      if (mSerial == null) {
        mSerial=new AutoCommunicator().getSerialCommunicator(mContext);
        if (!mSerial.open()) {
          if (mCallBack != null) {
            mCallBack.onError(UploadErrors.OPEN_DEVICE);
          }
          mBoard=null;
          mFilePath=null;
          mCallBack=null;
          mUploader=null;
          mSerial=null;
          return;
        }
 else {
          cleanAfter=true;
        }
      }
 else {
synchronized (mSerial) {
          tmpUartConfig=mSerial.getUartConfig();
        }
      }
synchronized (mSerial) {
        mUploader.upload(mFilePath,mBoard,mSerial,mCallBack);
        mSerial.setUartConfig(tmpUartConfig);
        if (cleanAfter) {
          mSerial.close();
          mSerial=null;
        }
      }
      mBoard=null;
      mFilePath=null;
      mCallBack=null;
      mUploader=null;
    }
  }
).start();
}","/** 
 * Uploads a binary file to a device on background process.
 * @param board board profile e.g. Boards.ARDUINO_UNO
 * @param filePath a binary file path e.g. /sdcard/arduino/Blink.hex
 * @param callback
 * @return true: success, false: fail
 * @throws RuntimeException
 */
public void upload(Boards board,String filePath,UploadCallBack callback) throws RuntimeException {
  mUploader=new Uploader();
  mCallBack=callback;
  mFilePath=filePath;
  mBoard=board;
  new Thread(new Runnable(){
    @Override public void run(){
      boolean cleanAfter=false;
      UartConfig tmpUartConfig=new UartConfig();
      if (mSerial == null) {
        mSerial=new AutoCommunicator().getSerialCommunicator(mContext);
        if (!mSerial.open()) {
          if (mCallBack != null) {
            mCallBack.onError(UploadErrors.OPEN_DEVICE);
          }
          mBoard=null;
          mFilePath=null;
          mCallBack=null;
          mUploader=null;
          mSerial=null;
          return;
        }
 else {
          cleanAfter=true;
        }
      }
 else {
synchronized (mSerial) {
          UartConfig origUartConfig=mSerial.getUartConfig();
          tmpUartConfig.baudrate=origUartConfig.baudrate;
          tmpUartConfig.dataBits=origUartConfig.dataBits;
          tmpUartConfig.stopBits=origUartConfig.stopBits;
          tmpUartConfig.parity=origUartConfig.parity;
          tmpUartConfig.dtrOn=origUartConfig.dtrOn;
          tmpUartConfig.rtsOn=origUartConfig.rtsOn;
        }
      }
synchronized (mSerial) {
        mSerial.clearBuffer();
        mUploader.upload(mFilePath,mBoard,mSerial,mCallBack);
        mSerial.setUartConfig(tmpUartConfig);
        mSerial.clearBuffer();
        if (cleanAfter) {
          mSerial.close();
          mSerial=null;
        }
      }
      mBoard=null;
      mFilePath=null;
      mCallBack=null;
      mUploader=null;
    }
  }
).start();
}",0.8778897451096621
107692,"@Override public void run(){
  boolean cleanAfter=false;
  UartConfig tmpUartConfig=new UartConfig();
  if (mSerial == null) {
    mSerial=new AutoCommunicator().getSerialCommunicator(mContext);
    if (!mSerial.open()) {
      if (mCallBack != null) {
        mCallBack.onError(UploadErrors.OPEN_DEVICE);
      }
      mBoard=null;
      mFilePath=null;
      mCallBack=null;
      mUploader=null;
      mSerial=null;
      return;
    }
 else {
      cleanAfter=true;
    }
  }
 else {
synchronized (mSerial) {
      tmpUartConfig=mSerial.getUartConfig();
    }
  }
synchronized (mSerial) {
    mUploader.upload(mFilePath,mBoard,mSerial,mCallBack);
    mSerial.setUartConfig(tmpUartConfig);
    if (cleanAfter) {
      mSerial.close();
      mSerial=null;
    }
  }
  mBoard=null;
  mFilePath=null;
  mCallBack=null;
  mUploader=null;
}","@Override public void run(){
  boolean cleanAfter=false;
  UartConfig tmpUartConfig=new UartConfig();
  if (mSerial == null) {
    mSerial=new AutoCommunicator().getSerialCommunicator(mContext);
    if (!mSerial.open()) {
      if (mCallBack != null) {
        mCallBack.onError(UploadErrors.OPEN_DEVICE);
      }
      mBoard=null;
      mFilePath=null;
      mCallBack=null;
      mUploader=null;
      mSerial=null;
      return;
    }
 else {
      cleanAfter=true;
    }
  }
 else {
synchronized (mSerial) {
      UartConfig origUartConfig=mSerial.getUartConfig();
      tmpUartConfig.baudrate=origUartConfig.baudrate;
      tmpUartConfig.dataBits=origUartConfig.dataBits;
      tmpUartConfig.stopBits=origUartConfig.stopBits;
      tmpUartConfig.parity=origUartConfig.parity;
      tmpUartConfig.dtrOn=origUartConfig.dtrOn;
      tmpUartConfig.rtsOn=origUartConfig.rtsOn;
    }
  }
synchronized (mSerial) {
    mSerial.clearBuffer();
    mUploader.upload(mFilePath,mBoard,mSerial,mCallBack);
    mSerial.setUartConfig(tmpUartConfig);
    mSerial.clearBuffer();
    if (cleanAfter) {
      mSerial.close();
      mSerial=null;
    }
  }
  mBoard=null;
  mFilePath=null;
  mCallBack=null;
  mUploader=null;
}",0.7814634146341464
107693,"public boolean open(UsbVidPid ids){
  if (mUsbConnetionManager.open(ids)) {
    mConnection=mUsbConnetionManager.getConnection();
    mEndpointIn=mUsbConnetionManager.getEndpointIn();
    mEndpointOut=mUsbConnetionManager.getEndpointOut();
    if (!init()) {
      return false;
    }
    if (!setBaudrate(DEFAULT_BAUDRATE)) {
      return false;
    }
    startRead();
    return true;
  }
  return false;
}","public boolean open(UsbVidPid ids){
  if (mUsbConnetionManager.open(ids)) {
    mConnection=mUsbConnetionManager.getConnection();
    mEndpointIn=mUsbConnetionManager.getEndpointIn();
    mEndpointOut=mUsbConnetionManager.getEndpointOut();
    if (!init()) {
      return false;
    }
    if (!setBaudrate(DEFAULT_BAUDRATE)) {
      return false;
    }
    mBuffer.clear();
    startRead();
    return true;
  }
  return false;
}",0.974910394265233
107694,"/** 
 * Adds byte array to ring buffer
 * @param buf byte array
 * @param length added length
 * @return actually added length
 */
public synchronized int add(byte[] buf,int length){
  int addLen=length;
  if ((mAddOffset < mGetOffset) && (mAddOffset + length) >= mGetOffset) {
    addLen=mGetOffset - mAddOffset;
  }
  if (buf.length < addLen) {
    addLen=buf.length;
  }
  if ((mAddOffset + addLen) > (mRingBufSize - 1)) {
    int remain=mAddOffset + addLen - mRingBufSize;
    int copyLen=addLen - remain;
    if (copyLen != 0) {
      System.arraycopy(buf,0,mRingBuf,mAddOffset,copyLen);
    }
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (copyLen - 1)+ ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ (mAddOffset + copyLen - 1)+ ""String_Node_Str"");
    }
    mAddOffset=0;
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ mGetOffset);
    }
    System.arraycopy(buf,copyLen,mRingBuf,mAddOffset,remain);
    mAddOffset=remain;
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (copyLen)+ ""String_Node_Str""+ (addLen - 1)+ ""String_Node_Str""+ (remain - 1)+ ""String_Node_Str"");
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ mGetOffset);
    }
    return addLen;
  }
 else {
    System.arraycopy(buf,0,mRingBuf,mAddOffset,addLen);
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (addLen - 1)+ ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ (mAddOffset + addLen - 1)+ ""String_Node_Str"");
    }
    mAddOffset+=addLen;
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ mGetOffset);
    }
    return addLen;
  }
}","/** 
 * Adds byte array to ring buffer
 * @param buf byte array
 * @param length added length
 * @return actually added length
 */
public synchronized int add(byte[] buf,int length){
  int addLen=length;
  if (mAddIndex > mGetIndex) {
    if ((mAddIndex + length) >= mRingBufSize) {
      if ((mRingBufSize - mAddIndex) + (mGetIndex - 1) < length) {
        addLen=(mRingBufSize - mAddIndex) + (mGetIndex - 1);
      }
    }
  }
 else   if (mAddIndex < mGetIndex) {
    if ((mGetIndex - 1) - mAddIndex < length) {
      addLen=(mGetIndex - 1) - mAddIndex;
    }
  }
  if (buf.length < addLen) {
    addLen=buf.length;
  }
  if ((mAddIndex + addLen) >= mRingBufSize) {
    int remain=mAddIndex + addLen - mRingBufSize;
    int copyLen=addLen - remain;
    if (copyLen != 0) {
      System.arraycopy(buf,0,mRingBuf,mAddIndex,copyLen);
      if (DEBUG_SHOW_ADD) {
        Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (copyLen - 1)+ ""String_Node_Str""+ mAddIndex+ ""String_Node_Str""+ (mAddIndex + copyLen - 1)+ ""String_Node_Str"");
      }
    }
    mAddIndex=0;
    if (remain != 0) {
      System.arraycopy(buf,copyLen,mRingBuf,mAddIndex,remain);
      if (DEBUG_SHOW_ADD) {
        Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (copyLen)+ ""String_Node_Str""+ (addLen - 1)+ ""String_Node_Str""+ (remain - 1)+ ""String_Node_Str"");
      }
      mAddIndex=remain;
    }
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddIndex+ ""String_Node_Str""+ mGetIndex);
    }
    return addLen;
  }
 else {
    System.arraycopy(buf,0,mRingBuf,mAddIndex,addLen);
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (addLen - 1)+ ""String_Node_Str""+ mAddIndex+ ""String_Node_Str""+ (mAddIndex + addLen - 1)+ ""String_Node_Str"");
    }
    mAddIndex+=addLen;
    if (DEBUG_SHOW_ADD) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddIndex+ ""String_Node_Str""+ mGetIndex);
    }
    return addLen;
  }
}",0.6910229645093946
107695,"/** 
 * Gets ring buffer size
 * @return ring buffer size
 */
public int getRingBufferSize(){
  return mRingBufSize;
}","/** 
 * Gets ring buffer size
 * @return ring buffer size
 */
public int getRingBufferSize(){
  return mRingBufSize - 1;
}",0.9833333333333332
107696,"/** 
 * Gets buffered length
 * @return buffered length
 */
public int getBufferdLength(){
  if (mAddOffset >= mGetOffset) {
    return mAddOffset - mGetOffset;
  }
 else {
    return mAddOffset + (mRingBufSize - mGetOffset);
  }
}","/** 
 * Gets buffered length
 * @return buffered length
 */
public int getBufferdLength(){
  if (mAddIndex >= mGetIndex) {
    return mAddIndex - mGetIndex;
  }
 else {
    return mAddIndex + (mRingBufSize - mGetIndex);
  }
}",0.631578947368421
107697,"/** 
 * Gets ring buffer to byte array
 * @param buf byte array
 * @param length gotten length
 * @return actually gotten length
 */
public synchronized int get(byte[] buf,int length){
  int getLen=length;
  if (mAddOffset == mGetOffset) {
    return 0;
  }
  if ((mGetOffset < mAddOffset) && (mGetOffset + length) > mAddOffset) {
    getLen=mAddOffset - mGetOffset;
  }
  if (buf.length < getLen) {
    getLen=buf.length;
  }
  if ((mGetOffset + getLen) > (mRingBufSize - 1)) {
    int remain=mGetOffset + getLen - mRingBufSize;
    int copyLen=getLen - remain;
    if (copyLen != 0) {
      System.arraycopy(mRingBuf,mGetOffset,buf,0,copyLen);
    }
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mGetOffset+ ""String_Node_Str""+ (mGetOffset + copyLen - 1)+ ""String_Node_Str""+ (copyLen - 1)+ ""String_Node_Str"");
    }
    mGetOffset=0;
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ mGetOffset);
    }
    System.arraycopy(mRingBuf,mAddOffset,buf,copyLen,remain);
    mGetOffset=remain;
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (remain - 1)+ ""String_Node_Str""+ copyLen+ ""String_Node_Str""+ (remain - 1)+ ""String_Node_Str"");
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ mGetOffset);
    }
    return getLen;
  }
 else {
    System.arraycopy(mRingBuf,mGetOffset,buf,0,getLen);
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mGetOffset+ ""String_Node_Str""+ (mGetOffset + getLen - 1)+ ""String_Node_Str""+ (getLen - 1)+ ""String_Node_Str"");
    }
    mGetOffset+=getLen;
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddOffset+ ""String_Node_Str""+ mGetOffset);
    }
    return getLen;
  }
}","/** 
 * Gets ring buffer to byte array
 * @param buf byte array
 * @param length gotten length
 * @return actually gotten length
 */
public synchronized int get(byte[] buf,int length){
  int getLen=length;
  if (mAddIndex == mGetIndex) {
    return 0;
  }
 else   if (mGetIndex < mAddIndex) {
    if (mAddIndex - mGetIndex < length) {
      getLen=mAddIndex - mGetIndex;
    }
  }
 else {
    if (mAddIndex + (mRingBufSize - mGetIndex) < length) {
      getLen=mAddIndex + (mRingBufSize - mGetIndex);
    }
  }
  if (buf.length < getLen) {
    getLen=buf.length;
  }
  if ((mGetIndex + getLen) >= mRingBufSize) {
    int remain=mGetIndex + getLen - mRingBufSize;
    int copyLen=getLen - remain;
    if (copyLen != 0) {
      System.arraycopy(mRingBuf,mGetIndex,buf,0,copyLen);
      if (DEBUG_SHOW_GET) {
        Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mGetIndex+ ""String_Node_Str""+ (mGetIndex + copyLen - 1)+ ""String_Node_Str""+ (copyLen - 1)+ ""String_Node_Str"");
      }
    }
    mGetIndex=0;
    if (remain != 0) {
      System.arraycopy(mRingBuf,mGetIndex,buf,copyLen,remain);
      if (DEBUG_SHOW_GET) {
        Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ (remain - 1)+ ""String_Node_Str""+ copyLen+ ""String_Node_Str""+ (remain - 1)+ ""String_Node_Str"");
      }
      mGetIndex=remain;
    }
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddIndex+ ""String_Node_Str""+ mGetIndex);
    }
    return getLen;
  }
 else {
    System.arraycopy(mRingBuf,mGetIndex,buf,0,getLen);
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mGetIndex+ ""String_Node_Str""+ (mGetIndex + getLen - 1)+ ""String_Node_Str""+ (getLen - 1)+ ""String_Node_Str"");
    }
    mGetIndex+=getLen;
    if (DEBUG_SHOW_GET) {
      Log.d(TAG,""String_Node_Str"" + length + ""String_Node_Str""+ mAddIndex+ ""String_Node_Str""+ mGetIndex);
    }
    return getLen;
  }
}",0.6900156821745949
107698,"/** 
 * Clear ring buffer
 */
public synchronized void clear(){
  mAddOffset=0;
  mGetOffset=0;
}","/** 
 * Clear ring buffer
 */
public synchronized void clear(){
  mAddIndex=0;
  mGetIndex=0;
}",0.90625
107699,"/** 
 * Ring buffer
 * @param bufferSize buffer size. It needs enough size e.g.1024
 */
public RingBuffer(int bufferSize){
  mRingBufSize=bufferSize;
  mRingBuf=new byte[mRingBufSize];
  mAddOffset=0;
  mGetOffset=0;
}","/** 
 * Ring buffer
 * @param bufferSize buffer size. It needs enough size e.g.1024
 */
public RingBuffer(int bufferSize){
  mRingBufSize=bufferSize + 1;
  mRingBuf=new byte[mRingBufSize];
  mAddIndex=0;
  mGetIndex=0;
}",0.9406392694063926
107700,"@Override public Thread newThread(Runnable runnable){
  thread=new EventThread(runnable);
  thread.setName(""String_Node_Str"");
  return thread;
}","@Override public Thread newThread(Runnable runnable){
  thread=new EventThread(runnable);
  thread.setName(""String_Node_Str"");
  thread.setDaemon(Thread.currentThread().isDaemon());
  return thread;
}",0.8405797101449275
107701,"public static Map<String,String> jsonToMap(JSONObject data) throws JSONException {
  @SuppressWarnings(""String_Node_Str"") Iterator<String> keys=data.keys();
  Map<String,String> result=new HashMap<String,String>();
  while (keys.hasNext()) {
    String key=keys.next();
    result.put(keys.next(),data.getString(key));
  }
  return result;
}","public static Map<String,String> jsonToMap(JSONObject data) throws JSONException {
  @SuppressWarnings(""String_Node_Str"") Iterator<String> keys=data.keys();
  Map<String,String> result=new HashMap<String,String>();
  while (keys.hasNext()) {
    String key=keys.next();
    result.put(key,data.getString(key));
  }
  return result;
}",0.9881305637982196
107702,"private Draft getDraft(String protocol,CallbackContext callbackContext){
  Draft draft=new Draft_10();
  if (protocol != null) {
    String draftName=draftMap.get(protocol);
    if (draftName != null) {
      try {
        Class<?> clazz=Class.forName(draftName);
        Constructor<?> ctor=clazz.getConstructor();
        draft=(Draft)ctor.newInstance();
      }
 catch (      Exception e) {
        callbackContext.error(""String_Node_Str"");
      }
    }
  }
  return draft;
}","private Draft getDraft(String protocol,CallbackContext callbackContext){
  Draft draft=new Draft_10();
  if (protocol != ""String_Node_Str"") {
    String draftName=draftMap.get(protocol);
    if (draftName != null) {
      try {
        Class<?> clazz=Class.forName(draftName);
        Constructor<?> ctor=clazz.getConstructor();
        draft=(Draft)ctor.newInstance();
      }
 catch (      Exception e) {
        callbackContext.error(""String_Node_Str"");
      }
    }
  }
  return draft;
}",0.9783728115345004
107703,"/** 
 * Checks if filters match request parameters.
 * @param url Request URL
 * @param query Request query string
 * @param referrer Request referrer header
 * @param accept Request accept header
 * @return true if matched filter was found
 * @throws Exception
 */
public boolean matches(String url,String query,String referrer,String accept){
  if (referrer != null)   referrerMapping.put(url,referrer);
  if (!filteringEnabled)   return false;
  String contentType=null;
  if (accept != null) {
    if (accept.contains(""String_Node_Str""))     contentType=""String_Node_Str"";
 else     if (accept.contains(""String_Node_Str""))     contentType=""String_Node_Str"";
  }
  if (contentType == null) {
    if (RE_JS.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_CSS.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_IMAGE.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_FONT.matcher(url).matches())     contentType=""String_Node_Str"";
  }
  if (contentType == null)   contentType=""String_Node_Str"";
  if (!""String_Node_Str"".equals(query))   url=url + ""String_Node_Str"" + query;
  final List<String> referrerChain=buildReferrerChain(referrer);
  Log.d(""String_Node_Str"",url + ""String_Node_Str"" + referrerChain.toString());
  String[] referrerChainArray=referrerChain.toArray(new String[referrerChain.size()]);
  return abpEngine.matches(url,contentType,referrerChainArray);
}","/** 
 * Checks if filters match request parameters.
 * @param url Request URL
 * @param query Request query string
 * @param referrer Request referrer header
 * @param accept Request accept header
 * @return true if matched filter was found
 * @throws Exception
 */
public boolean matches(String url,String query,String referrer,String accept){
  final String fullUrl=!""String_Node_Str"".equals(query) ? url + ""String_Node_Str"" + query : url;
  if (referrer != null)   referrerMapping.put(fullUrl,referrer);
  if (!filteringEnabled)   return false;
  String contentType=null;
  if (accept != null) {
    if (accept.contains(""String_Node_Str""))     contentType=""String_Node_Str"";
 else     if (accept.contains(""String_Node_Str""))     contentType=""String_Node_Str"";
 else     if (accept.contains(""String_Node_Str""))     contentType=""String_Node_Str"";
  }
  if (contentType == null) {
    if (RE_JS.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_CSS.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_IMAGE.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_FONT.matcher(url).matches())     contentType=""String_Node_Str"";
 else     if (RE_HTML.matcher(url).matches())     contentType=""String_Node_Str"";
  }
  if (contentType == null)   contentType=""String_Node_Str"";
  final List<String> referrerChain=buildReferrerChain(referrer);
  Log.d(""String_Node_Str"",fullUrl + ""String_Node_Str"" + referrerChain.toString());
  String[] referrerChainArray=referrerChain.toArray(new String[referrerChain.size()]);
  return abpEngine.matches(fullUrl,contentType,referrerChainArray);
}",0.8294573643410853
107704,"private List<String> buildReferrerChain(String url){
  final List<String> referrerChain=new ArrayList<String>();
  final int maxChainLength=10;
  for (int i=0; i < maxChainLength && url != null; i++) {
    referrerChain.add(url);
    url=referrerMapping.get(url);
  }
  return referrerChain;
}","private List<String> buildReferrerChain(String url){
  final List<String> referrerChain=new ArrayList<String>();
  final int maxChainLength=10;
  for (int i=0; i < maxChainLength && url != null; i++) {
    referrerChain.add(0,url);
    url=referrerMapping.get(url);
  }
  return referrerChain;
}",0.9965986394557824
107705,"@Override public void onReceive(Context ctx,Intent intent){
  String action=intent.getAction();
  Log.i(TAG,""String_Node_Str"" + action);
  if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {
    NetworkInfo info=intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO);
    if (info == null)     return;
    String typeName=info.getTypeName();
    String subtypeName=info.getSubtypeName();
    boolean available=info.isAvailable();
    Log.i(TAG,""String_Node_Str"" + typeName + ""String_Node_Str""+ subtypeName+ ""String_Node_Str""+ available);
    if (info.getType() == ConnectivityManager.TYPE_WIFI)     ProxySettings.setConnectionProxy(getApplicationContext(),LOCALHOST,port,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(action)) {
    Object lp=intent.getParcelableExtra(""String_Node_Str"");
    Method method;
    try {
      method=lp.getClass().getMethod(""String_Node_Str"");
      Object pp=method.invoke(lp);
      String[] userProxy=ProxySettings.getUserProxy(pp);
      if (userProxy != null && Integer.valueOf(userProxy[1]) != port) {
        Log.i(TAG,""String_Node_Str"" + userProxy[0] + ""String_Node_Str""+ userProxy[1]+ ""String_Node_Str""+ userProxy[2]+ ""String_Node_Str"");
        if (proxy != null) {
          configureUserProxy(proxyConfiguration,userProxy[0],userProxy[1],userProxy[2],null,null);
          proxy.restart(proxyConfiguration.getProperty(""String_Node_Str""));
        }
      }
    }
 catch (    Exception e) {
      Log.e(TAG,null,e);
    }
  }
}","@Override public void onReceive(Context ctx,Intent intent){
  String action=intent.getAction();
  Log.i(TAG,""String_Node_Str"" + action);
  if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {
    ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo info=connectivityManager.getActiveNetworkInfo();
    if (info == null)     return;
    String typeName=info.getTypeName();
    String subtypeName=info.getSubtypeName();
    boolean available=info.isAvailable();
    Log.i(TAG,""String_Node_Str"" + typeName + ""String_Node_Str""+ subtypeName+ ""String_Node_Str""+ available);
    if (info.getType() == ConnectivityManager.TYPE_WIFI)     ProxySettings.setConnectionProxy(getApplicationContext(),LOCALHOST,port,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(action)) {
    Object lp=intent.getParcelableExtra(""String_Node_Str"");
    Method method;
    try {
      method=lp.getClass().getMethod(""String_Node_Str"");
      Object pp=method.invoke(lp);
      String[] userProxy=ProxySettings.getUserProxy(pp);
      if (userProxy != null && Integer.valueOf(userProxy[1]) != port) {
        Log.i(TAG,""String_Node_Str"" + userProxy[0] + ""String_Node_Str""+ userProxy[1]+ ""String_Node_Str""+ userProxy[2]+ ""String_Node_Str"");
        if (proxy != null) {
          configureUserProxy(proxyConfiguration,userProxy[0],userProxy[1],userProxy[2],null,null);
          proxy.restart(proxyConfiguration.getProperty(""String_Node_Str""));
        }
      }
    }
 catch (    Exception e) {
      Log.e(TAG,null,e);
    }
  }
}",0.9431891542930924
107706,"private void writeChunk(byte buffer[],int offset,int length) throws IOException {
  writeHex(length);
  if (length != 0)   out.write(buffer,offset,length);
  out.write(CRLF);
  out.flush();
}","private void writeChunk(byte buffer[],int offset,int length) throws IOException {
  if (length > 0) {
    writeHex(length);
    out.write(buffer,offset,length);
    out.write(CRLF);
    out.flush();
  }
}",0.8810126582278481
107707,"@Override public boolean respond(Request request) throws IOException {
  boolean block=false;
  String reqHost=null;
  String refHost=null;
  try {
    reqHost=(new URL(request.url)).getHost();
    refHost=(new URL(request.getRequestHeader(""String_Node_Str""))).getHost();
  }
 catch (  MalformedURLException e) {
  }
  try {
    block=application.matches(request.url,request.query,reqHost,refHost,request.getRequestHeader(""String_Node_Str""));
  }
 catch (  Exception e) {
    Log.e(prefix,""String_Node_Str"",e);
  }
  request.log(Server.LOG_LOG,prefix,block + ""String_Node_Str"" + request.url);
  if (block) {
    request.sendError(403,""String_Node_Str"");
    return true;
  }
  if (request.url.startsWith(""String_Node_Str"") == false && request.url.startsWith(""String_Node_Str"") == false) {
    return false;
  }
  String url=request.url;
  if ((request.query != null) && (request.query.length() > 0)) {
    url+=""String_Node_Str"" + request.query;
  }
  int count=request.server.requestCount;
  if (shouldLog) {
    System.err.println(dumpHeaders(count,request,request.headers,true));
  }
  String pc=request.headers.get(""String_Node_Str"");
  if (pc != null) {
    request.connectionHeader=""String_Node_Str"";
    request.keepAlive=pc.equalsIgnoreCase(""String_Node_Str"");
  }
  HttpRequest.removePointToPointHeaders(request.headers,false);
  HttpRequest target=new HttpRequest(url);
  try {
    target.setMethod(request.method);
    request.headers.copyTo(target.requestHeaders);
    if (proxyHost != null) {
      target.setProxy(proxyHost,proxyPort);
      if (auth != null) {
        target.requestHeaders.add(""String_Node_Str"",auth);
      }
    }
    if (request.postData != null) {
      OutputStream out=target.getOutputStream();
      out.write(request.postData);
      out.close();
    }
    target.connect();
    if (shouldLog) {
      System.err.println(""String_Node_Str"" + target.status + ""String_Node_Str""+ dumpHeaders(count,request,target.responseHeaders,false));
    }
    HttpRequest.removePointToPointHeaders(target.responseHeaders,true);
    target.responseHeaders.copyTo(request.responseHeaders);
    try {
      request.responseHeaders.add(""String_Node_Str"",target.status.substring(0,8) + via);
    }
 catch (    StringIndexOutOfBoundsException e) {
      request.responseHeaders.add(""String_Node_Str"",via);
    }
    String type=request.responseHeaders.get(""String_Node_Str"");
    String selectors=null;
    if (type != null && type.toLowerCase().startsWith(""String_Node_Str"")) {
      selectors=application.getSelectorsForDomain(reqHost);
    }
    if (selectors == null || target.getResponseCode() != 200) {
      int contentLength=target.getContentLength();
      if (contentLength == 0) {
        request.sendHeaders(-1,null,-1);
      }
 else {
        request.sendResponse(target.getInputStream(),contentLength,null,target.getResponseCode());
      }
    }
 else {
      HttpInputStream his=target.getInputStream();
      int size=target.getContentLength();
      if (size < 0) {
        size=Integer.MAX_VALUE;
      }
      FilterInputStream in=null;
      FilterOutputStream out=null;
      String encodingHeader=request.responseHeaders.get(""String_Node_Str"");
      if (encodingHeader != null) {
        encodingHeader=encodingHeader.toLowerCase();
        if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new GZIPInputStream(his);
        }
 else         if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new InflaterInputStream(his);
        }
 else {
          in=new BufferedInputStream(his);
          out=request.out;
          selectors=null;
        }
      }
 else {
        in=new BufferedInputStream(his);
      }
      if (out == null) {
        request.responseHeaders.remove(""String_Node_Str"");
        request.responseHeaders.remove(""String_Node_Str"");
        out=new ChunkedOutputStream(request.out);
        request.responseHeaders.add(""String_Node_Str"",""String_Node_Str"");
        size=Integer.MAX_VALUE;
      }
      request.sendHeaders(-1,null,-1);
      byte[] buf=new byte[Math.min(4096,size)];
      Log.e(prefix,request.url);
      boolean sent=selectors == null;
      BoyerMoore matcher=new BoyerMoore(""String_Node_Str"".getBytes());
      while (size > 0) {
        out.flush();
        count=in.read(buf,0,Math.min(buf.length,size));
        if (count < 0) {
          break;
        }
        size-=count;
        try {
          if (!sent && count > 0) {
            List<Integer> matches=matcher.match(buf,0,count);
            if (!matches.isEmpty()) {
              byte[] addon=selectors.getBytes();
              int m=matches.get(0);
              out.write(buf,0,m);
              out.write(addon);
              out.write(buf,m,count - m);
              sent=true;
              continue;
            }
          }
          out.write(buf,0,count);
        }
 catch (        IOException e) {
          break;
        }
      }
      try {
        ((ChunkedOutputStream)out).writeFinalChunk();
      }
 catch (      ClassCastException e) {
      }
    }
  }
 catch (  InterruptedIOException e) {
    request.sendError(408,""String_Node_Str"");
  }
catch (  EOFException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  ConnectException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  IOException e) {
    String msg=""String_Node_Str"";
    if (e.getMessage() != null) {
      msg+=""String_Node_Str"" + e.getMessage();
    }
    request.sendError(500,msg);
    Log.e(prefix,msg,e);
  }
 finally {
    target.close();
  }
  return true;
}","@Override public boolean respond(Request request) throws IOException {
  boolean block=false;
  String reqHost=null;
  String refHost=null;
  try {
    reqHost=(new URL(request.url)).getHost();
    refHost=(new URL(request.getRequestHeader(""String_Node_Str""))).getHost();
  }
 catch (  MalformedURLException e) {
  }
  try {
    block=application.matches(request.url,request.query,reqHost,refHost,request.getRequestHeader(""String_Node_Str""));
  }
 catch (  Exception e) {
    Log.e(prefix,""String_Node_Str"",e);
  }
  request.log(Server.LOG_LOG,prefix,block + ""String_Node_Str"" + request.url);
  if (block) {
    request.sendError(403,""String_Node_Str"");
    return true;
  }
  if (request.url.startsWith(""String_Node_Str"") == false && request.url.startsWith(""String_Node_Str"") == false) {
    return false;
  }
  String url=request.url;
  if ((request.query != null) && (request.query.length() > 0)) {
    url+=""String_Node_Str"" + request.query;
  }
  int count=request.server.requestCount;
  if (shouldLog) {
    System.err.println(dumpHeaders(count,request,request.headers,true));
  }
  String pc=request.headers.get(""String_Node_Str"");
  if (pc != null) {
    request.connectionHeader=""String_Node_Str"";
    request.keepAlive=pc.equalsIgnoreCase(""String_Node_Str"");
  }
  HttpRequest.removePointToPointHeaders(request.headers,false);
  HttpRequest target=new HttpRequest(url);
  try {
    target.setMethod(request.method);
    request.headers.copyTo(target.requestHeaders);
    if (proxyHost != null) {
      target.setProxy(proxyHost,proxyPort);
      if (auth != null) {
        target.requestHeaders.add(""String_Node_Str"",auth);
      }
    }
    if (request.postData != null) {
      OutputStream out=target.getOutputStream();
      out.write(request.postData);
      out.close();
    }
    target.connect();
    if (shouldLog) {
      System.err.println(""String_Node_Str"" + target.status + ""String_Node_Str""+ dumpHeaders(count,request,target.responseHeaders,false));
    }
    HttpRequest.removePointToPointHeaders(target.responseHeaders,true);
    request.setStatus(target.getResponseCode());
    target.responseHeaders.copyTo(request.responseHeaders);
    try {
      request.responseHeaders.add(""String_Node_Str"",target.status.substring(0,8) + via);
    }
 catch (    StringIndexOutOfBoundsException e) {
      request.responseHeaders.add(""String_Node_Str"",via);
    }
    String type=request.responseHeaders.get(""String_Node_Str"");
    String selectors=null;
    if (type != null && type.toLowerCase().startsWith(""String_Node_Str"")) {
      selectors=application.getSelectorsForDomain(reqHost);
    }
    if (selectors == null || target.getResponseCode() != 200) {
      int contentLength=target.getContentLength();
      if (contentLength == 0) {
        request.sendHeaders(-1,null,-1);
      }
 else {
        request.sendResponse(target.getInputStream(),contentLength,null,-1);
      }
    }
 else {
      HttpInputStream his=target.getInputStream();
      int size=target.getContentLength();
      if (size < 0) {
        size=Integer.MAX_VALUE;
      }
      FilterInputStream in=null;
      FilterOutputStream out=null;
      String encodingHeader=request.responseHeaders.get(""String_Node_Str"");
      if (encodingHeader != null) {
        encodingHeader=encodingHeader.toLowerCase();
        if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new GZIPInputStream(his);
        }
 else         if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new InflaterInputStream(his);
        }
 else {
          in=new BufferedInputStream(his);
          out=request.out;
          selectors=null;
        }
      }
 else {
        in=new BufferedInputStream(his);
      }
      if (out == null) {
        request.responseHeaders.remove(""String_Node_Str"");
        request.responseHeaders.remove(""String_Node_Str"");
        out=new ChunkedOutputStream(request.out);
        request.responseHeaders.add(""String_Node_Str"",""String_Node_Str"");
        size=Integer.MAX_VALUE;
      }
      request.sendHeaders(-1,null,-1);
      byte[] buf=new byte[Math.min(4096,size)];
      Log.e(prefix,request.url);
      boolean sent=selectors == null;
      BoyerMoore matcher=new BoyerMoore(""String_Node_Str"".getBytes());
      while (size > 0) {
        out.flush();
        count=in.read(buf,0,Math.min(buf.length,size));
        if (count < 0) {
          break;
        }
        size-=count;
        try {
          if (!sent && count > 0) {
            List<Integer> matches=matcher.match(buf,0,count);
            if (!matches.isEmpty()) {
              byte[] addon=selectors.getBytes();
              int m=matches.get(0);
              out.write(buf,0,m);
              out.write(addon);
              out.write(buf,m,count - m);
              sent=true;
              continue;
            }
          }
          out.write(buf,0,count);
        }
 catch (        IOException e) {
          break;
        }
      }
      try {
        ((ChunkedOutputStream)out).writeFinalChunk();
      }
 catch (      ClassCastException e) {
      }
    }
  }
 catch (  InterruptedIOException e) {
    request.sendError(408,""String_Node_Str"");
  }
catch (  EOFException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  ConnectException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  IOException e) {
    String msg=""String_Node_Str"";
    if (e.getMessage() != null) {
      msg+=""String_Node_Str"" + e.getMessage();
    }
    request.sendError(500,msg);
    Log.e(prefix,msg,e);
  }
 finally {
    target.close();
  }
  return true;
}",0.9934651912520692
107708,"@Override public boolean respond(Request request) throws IOException {
  boolean block=false;
  String reqHost=null;
  String refHost=null;
  try {
    reqHost=(new URL(request.url)).getHost();
    refHost=(new URL(request.getRequestHeader(""String_Node_Str""))).getHost();
  }
 catch (  MalformedURLException e) {
  }
  try {
    block=application.matches(request.url,request.query,reqHost,refHost,request.getRequestHeader(""String_Node_Str""));
  }
 catch (  Exception e) {
    Log.e(prefix,""String_Node_Str"",e);
  }
  request.log(Server.LOG_LOG,prefix,block + ""String_Node_Str"" + request.url);
  if (block) {
    request.sendError(403,""String_Node_Str"");
    return true;
  }
  if (request.url.startsWith(""String_Node_Str"") == false && request.url.startsWith(""String_Node_Str"") == false) {
    return false;
  }
  String url=request.url;
  if ((request.query != null) && (request.query.length() > 0)) {
    url+=""String_Node_Str"" + request.query;
  }
  int count=request.server.requestCount;
  if (shouldLog) {
    System.err.println(dumpHeaders(count,request,request.headers,true));
  }
  String pc=request.headers.get(""String_Node_Str"");
  if (pc != null) {
    request.connectionHeader=""String_Node_Str"";
    request.keepAlive=pc.equalsIgnoreCase(""String_Node_Str"");
  }
  HttpRequest.removePointToPointHeaders(request.headers,false);
  HttpRequest target=new HttpRequest(url);
  try {
    target.setMethod(request.method);
    request.headers.copyTo(target.requestHeaders);
    if (proxyHost != null) {
      target.setProxy(proxyHost,proxyPort);
      if (auth != null) {
        target.requestHeaders.add(""String_Node_Str"",auth);
      }
    }
    if (request.postData != null) {
      OutputStream out=target.getOutputStream();
      out.write(request.postData);
      out.close();
    }
    target.connect();
    if (shouldLog) {
      System.err.println(""String_Node_Str"" + target.status + ""String_Node_Str""+ dumpHeaders(count,request,target.responseHeaders,false));
    }
    HttpRequest.removePointToPointHeaders(target.responseHeaders,true);
    target.responseHeaders.copyTo(request.responseHeaders);
    try {
      request.responseHeaders.add(""String_Node_Str"",target.status.substring(0,8) + via);
    }
 catch (    StringIndexOutOfBoundsException e) {
      request.responseHeaders.add(""String_Node_Str"",via);
    }
    String type=request.responseHeaders.get(""String_Node_Str"");
    String selectors=null;
    if (type != null && type.toLowerCase().startsWith(""String_Node_Str"")) {
      selectors=application.getSelectorsForDomain(reqHost);
    }
    if (selectors == null || target.getResponseCode() != 200) {
      int contentLength=target.getContentLength();
      if (contentLength == 0) {
        request.sendHeaders(-1,null,-1);
      }
 else {
        request.sendResponse(target.getInputStream(),contentLength,null,target.getResponseCode());
      }
    }
 else {
      HttpInputStream his=target.getInputStream();
      int size=target.getContentLength();
      if (size < 0) {
        size=Integer.MAX_VALUE;
      }
      FilterInputStream in=null;
      FilterOutputStream out=null;
      String encodingHeader=request.responseHeaders.get(""String_Node_Str"");
      if (encodingHeader != null) {
        encodingHeader=encodingHeader.toLowerCase();
        if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new GZIPInputStream(his);
          request.responseHeaders.remove(""String_Node_Str"");
          request.responseHeaders.remove(""String_Node_Str"");
          out=new ChunkedOutputStream(request.out);
          request.responseHeaders.add(""String_Node_Str"",""String_Node_Str"");
          size=Integer.MAX_VALUE;
        }
 else         if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new InflaterInputStream(his);
          request.responseHeaders.remove(""String_Node_Str"");
          request.responseHeaders.remove(""String_Node_Str"");
          out=new ChunkedOutputStream(request.out);
          request.responseHeaders.add(""String_Node_Str"",""String_Node_Str"");
          size=Integer.MAX_VALUE;
        }
 else {
          in=new BufferedInputStream(his);
          out=request.out;
          selectors=null;
        }
      }
      request.sendHeaders(-1,null,-1);
      byte[] buf=new byte[Math.min(4096,size)];
      Log.e(prefix,request.url);
      boolean sent=selectors == null;
      BoyerMoore matcher=new BoyerMoore(""String_Node_Str"".getBytes());
      while (size > 0) {
        out.flush();
        count=in.read(buf,0,Math.min(buf.length,size));
        if (count < 0) {
          break;
        }
        size-=count;
        try {
          if (!sent && count > 0) {
            List<Integer> matches=matcher.match(buf,0,count);
            if (!matches.isEmpty()) {
              byte[] addon=selectors.getBytes();
              int m=matches.get(0);
              out.write(buf,0,m);
              out.write(addon);
              out.write(buf,m,count - m);
              sent=true;
              continue;
            }
          }
          out.write(buf,0,count);
        }
 catch (        IOException e) {
          break;
        }
      }
      try {
        ((ChunkedOutputStream)out).writeFinalChunk();
      }
 catch (      ClassCastException e) {
      }
    }
  }
 catch (  InterruptedIOException e) {
    request.sendError(408,""String_Node_Str"");
  }
catch (  EOFException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  ConnectException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  IOException e) {
    String msg=""String_Node_Str"";
    if (e.getMessage() != null) {
      msg+=""String_Node_Str"" + e.getMessage();
    }
    request.sendError(500,msg);
    Log.e(prefix,msg,e);
  }
 finally {
    target.close();
  }
  return true;
}","@Override public boolean respond(Request request) throws IOException {
  boolean block=false;
  String reqHost=null;
  String refHost=null;
  try {
    reqHost=(new URL(request.url)).getHost();
    refHost=(new URL(request.getRequestHeader(""String_Node_Str""))).getHost();
  }
 catch (  MalformedURLException e) {
  }
  try {
    block=application.matches(request.url,request.query,reqHost,refHost,request.getRequestHeader(""String_Node_Str""));
  }
 catch (  Exception e) {
    Log.e(prefix,""String_Node_Str"",e);
  }
  request.log(Server.LOG_LOG,prefix,block + ""String_Node_Str"" + request.url);
  if (block) {
    request.sendError(403,""String_Node_Str"");
    return true;
  }
  if (request.url.startsWith(""String_Node_Str"") == false && request.url.startsWith(""String_Node_Str"") == false) {
    return false;
  }
  String url=request.url;
  if ((request.query != null) && (request.query.length() > 0)) {
    url+=""String_Node_Str"" + request.query;
  }
  int count=request.server.requestCount;
  if (shouldLog) {
    System.err.println(dumpHeaders(count,request,request.headers,true));
  }
  String pc=request.headers.get(""String_Node_Str"");
  if (pc != null) {
    request.connectionHeader=""String_Node_Str"";
    request.keepAlive=pc.equalsIgnoreCase(""String_Node_Str"");
  }
  HttpRequest.removePointToPointHeaders(request.headers,false);
  HttpRequest target=new HttpRequest(url);
  try {
    target.setMethod(request.method);
    request.headers.copyTo(target.requestHeaders);
    if (proxyHost != null) {
      target.setProxy(proxyHost,proxyPort);
      if (auth != null) {
        target.requestHeaders.add(""String_Node_Str"",auth);
      }
    }
    if (request.postData != null) {
      OutputStream out=target.getOutputStream();
      out.write(request.postData);
      out.close();
    }
    target.connect();
    if (shouldLog) {
      System.err.println(""String_Node_Str"" + target.status + ""String_Node_Str""+ dumpHeaders(count,request,target.responseHeaders,false));
    }
    HttpRequest.removePointToPointHeaders(target.responseHeaders,true);
    target.responseHeaders.copyTo(request.responseHeaders);
    try {
      request.responseHeaders.add(""String_Node_Str"",target.status.substring(0,8) + via);
    }
 catch (    StringIndexOutOfBoundsException e) {
      request.responseHeaders.add(""String_Node_Str"",via);
    }
    String type=request.responseHeaders.get(""String_Node_Str"");
    String selectors=null;
    if (type != null && type.toLowerCase().startsWith(""String_Node_Str"")) {
      selectors=application.getSelectorsForDomain(reqHost);
    }
    if (selectors == null || target.getResponseCode() != 200) {
      int contentLength=target.getContentLength();
      if (contentLength == 0) {
        request.sendHeaders(-1,null,-1);
      }
 else {
        request.sendResponse(target.getInputStream(),contentLength,null,target.getResponseCode());
      }
    }
 else {
      HttpInputStream his=target.getInputStream();
      int size=target.getContentLength();
      if (size < 0) {
        size=Integer.MAX_VALUE;
      }
      FilterInputStream in=null;
      FilterOutputStream out=null;
      String encodingHeader=request.responseHeaders.get(""String_Node_Str"");
      if (encodingHeader != null) {
        encodingHeader=encodingHeader.toLowerCase();
        if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new GZIPInputStream(his);
        }
 else         if (encodingHeader.equals(""String_Node_Str"") || encodingHeader.equals(""String_Node_Str"")) {
          in=new InflaterInputStream(his);
        }
 else {
          in=new BufferedInputStream(his);
          out=request.out;
          selectors=null;
        }
      }
 else {
        in=new BufferedInputStream(his);
      }
      if (out == null) {
        request.responseHeaders.remove(""String_Node_Str"");
        request.responseHeaders.remove(""String_Node_Str"");
        out=new ChunkedOutputStream(request.out);
        request.responseHeaders.add(""String_Node_Str"",""String_Node_Str"");
        size=Integer.MAX_VALUE;
      }
      request.sendHeaders(-1,null,-1);
      byte[] buf=new byte[Math.min(4096,size)];
      Log.e(prefix,request.url);
      boolean sent=selectors == null;
      BoyerMoore matcher=new BoyerMoore(""String_Node_Str"".getBytes());
      while (size > 0) {
        out.flush();
        count=in.read(buf,0,Math.min(buf.length,size));
        if (count < 0) {
          break;
        }
        size-=count;
        try {
          if (!sent && count > 0) {
            List<Integer> matches=matcher.match(buf,0,count);
            if (!matches.isEmpty()) {
              byte[] addon=selectors.getBytes();
              int m=matches.get(0);
              out.write(buf,0,m);
              out.write(addon);
              out.write(buf,m,count - m);
              sent=true;
              continue;
            }
          }
          out.write(buf,0,count);
        }
 catch (        IOException e) {
          break;
        }
      }
      try {
        ((ChunkedOutputStream)out).writeFinalChunk();
      }
 catch (      ClassCastException e) {
      }
    }
  }
 catch (  InterruptedIOException e) {
    request.sendError(408,""String_Node_Str"");
  }
catch (  EOFException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  UnknownHostException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  ConnectException e) {
    request.sendError(500,""String_Node_Str"");
  }
catch (  IOException e) {
    String msg=""String_Node_Str"";
    if (e.getMessage() != null) {
      msg+=""String_Node_Str"" + e.getMessage();
    }
    request.sendError(500,msg);
    Log.e(prefix,msg,e);
  }
 finally {
    target.close();
  }
  return true;
}",0.9150506263943712
107709,"private void configureUserProxy(Properties config,String proxyHost,String proxyPort,String proxyExcl,String proxyUser,String proxyPass){
  if (""String_Node_Str"".equals(proxyHost))   proxyHost=null;
  if (proxyHost != null) {
    config.put(""String_Node_Str"",proxyHost);
    if (!isTransparent)     config.put(""String_Node_Str"",proxyHost);
  }
 else {
    config.remove(""String_Node_Str"");
    if (!isTransparent)     config.remove(""String_Node_Str"");
  }
  int p=0;
  if (proxyPort == null)   proxyPort=""String_Node_Str"";
  try {
    p=Integer.valueOf(proxyPort);
  }
 catch (  NumberFormatException e) {
  }
  if (p == 0 || isLocalHost(proxyHost) && (p == port || p == 8080))   return;
  config.put(""String_Node_Str"",proxyPort);
  if (proxyExcl != null)   config.put(""String_Node_Str"",proxyExcl);
 else   config.remove(""String_Node_Str"");
  if (!isTransparent)   config.put(""String_Node_Str"",proxyPort);
  if (proxyUser != null && !""String_Node_Str"".equals(proxyUser) && proxyPass != null && !""String_Node_Str"".equals(proxyPass)) {
    String proxyAuth=""String_Node_Str"" + new String(Base64.encode(proxyUser + ""String_Node_Str"" + proxyPass));
    config.put(""String_Node_Str"",proxyAuth);
    if (!isTransparent)     config.put(""String_Node_Str"",proxyAuth);
  }
 else {
    config.remove(""String_Node_Str"");
    if (!isTransparent)     config.remove(""String_Node_Str"");
  }
}","private void configureUserProxy(Properties config,String proxyHost,String proxyPort,String proxyExcl,String proxyUser,String proxyPass){
  config.remove(""String_Node_Str"");
  config.remove(""String_Node_Str"");
  config.remove(""String_Node_Str"");
  config.remove(""String_Node_Str"");
  if (!isTransparent) {
    config.remove(""String_Node_Str"");
    config.remove(""String_Node_Str"");
    config.remove(""String_Node_Str"");
  }
  if (proxyHost == null || ""String_Node_Str"".equals(proxyHost))   return;
  int p=0;
  if (proxyPort == null)   return;
  try {
    p=Integer.valueOf(proxyPort);
  }
 catch (  NumberFormatException e) {
    return;
  }
  if (p == 0 || isLocalHost(proxyHost) && (p == port || p == 8080))   return;
  config.put(""String_Node_Str"",proxyHost);
  config.put(""String_Node_Str"",proxyPort);
  if (!isTransparent) {
    config.put(""String_Node_Str"",proxyHost);
    config.put(""String_Node_Str"",proxyPort);
  }
  if (proxyExcl != null)   config.put(""String_Node_Str"",proxyExcl);
  if (proxyUser != null && !""String_Node_Str"".equals(proxyUser) && proxyPass != null && !""String_Node_Str"".equals(proxyPass)) {
    String proxyAuth=""String_Node_Str"" + new String(Base64.encode(proxyUser + ""String_Node_Str"" + proxyPass));
    config.put(""String_Node_Str"",proxyAuth);
    if (!isTransparent)     config.put(""String_Node_Str"",proxyAuth);
  }
}",0.6260550458715596
107710,"/** 
 * PmdValidator forbids usage of Files.createFile in tests.
 * @throws Exception If something wrong happens inside.
 */
@Test public void forbidsFilesCreateFileInTests() throws Exception {
  new PmdAssert(""String_Node_Str"",Matchers.is(false),Matchers.containsString(PmdValidatorTest.FILES_CREATE_ERROR)).validate();
}","/** 
 * PmdValidator forbids usage of Files.createFile in tests.
 * @throws Exception If something wrong happens inside.
 */
@Test public void forbidsFilesCreateFileInTests() throws Exception {
  new PmdAssert(""String_Node_Str"",Matchers.is(false),Matchers.containsString(PmdValidatorTest.FILES_CREATE_ERR)).validate();
}",0.9968847352024922
107711,"/** 
 * PmdValidator allows usage of Files.createFile outside of tests.
 * @throws Exception If something wrong happens inside.
 */
@Test public void forbidsFilesCreateFileOutsideOfTests() throws Exception {
  new PmdAssert(""String_Node_Str"",Matchers.is(true),Matchers.not(Matchers.containsString(PmdValidatorTest.FILES_CREATE_ERROR))).validate();
}","/** 
 * PmdValidator allows usage of Files.createFile outside of tests.
 * @throws Exception If something wrong happens inside.
 */
@Test public void forbidsFilesCreateFileOutsideOfTests() throws Exception {
  new PmdAssert(""String_Node_Str"",Matchers.is(true),Matchers.not(Matchers.containsString(PmdValidatorTest.FILES_CREATE_ERR))).validate();
}",0.9971264367816092
107712,"/** 
 * Check that non static class method refer   {@code this}. Methods that are   {@code native},   {@code abstract} or annotated with {@code @Override}are excluded.  Additionally, if the method only throws an exception, it too is excluded.
 * @param method DetailAST of method
 */
private void checkClassMethod(final DetailAST method){
  final DetailAST modifiers=method.findFirstToken(TokenTypes.MODIFIERS);
  if (modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {
    return;
  }
  final boolean onlythrow=method.branchContains(TokenTypes.LITERAL_THROW) && this.getMethodLength(method) == ONLY_THROW_LEN;
  if (!AnnotationUtility.containsAnnotation(method,""String_Node_Str"") && !isInAbstractOrNativeMethod(method) && !method.branchContains(TokenTypes.LITERAL_THIS)&& !onlythrow) {
    final int line=method.getLineNo();
    this.log(line,""String_Node_Str"");
  }
}","/** 
 * Check that non static class method refer   {@code this}. Methods that are   {@code native},   {@code abstract} or annotated with {@code @Override}are excluded.  Additionally, if the method only throws an exception, it too is excluded.
 * @param method DetailAST of method
 */
private void checkClassMethod(final DetailAST method){
  final DetailAST modifiers=method.findFirstToken(TokenTypes.MODIFIERS);
  if (modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {
    return;
  }
  final int maxlen=NonStaticMethodCheck.ONLY_THROW_LEN;
  final boolean onlythrow=method.branchContains(TokenTypes.LITERAL_THROW) && this.getMethodLength(method) == maxlen;
  if (!AnnotationUtility.containsAnnotation(method,""String_Node_Str"") && !isInAbstractOrNativeMethod(method) && !method.branchContains(TokenTypes.LITERAL_THIS)&& !onlythrow) {
    final int line=method.getLineNo();
    this.log(line,""String_Node_Str"");
  }
}",0.8650442477876106
107713,"@Test public void passesValidationForClasspathSchema() throws Exception {
  final Environment env=new Environment.Mock().withFile(""String_Node_Str"",new StringBuilder().append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").toString());
  final Validator validator=new XmlValidator();
  validator.validate(env);
}","/** 
 * XmlValidatorTest can pass validation if schema file is in classpath.
 * @throws Exception If something goes wrong
 */
@Test public void passesValidationForClasspathSchema() throws Exception {
  final Environment env=new Environment.Mock().withFile(""String_Node_Str"",new StringBuilder().append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").toString());
  final Validator validator=new XmlValidator();
  validator.validate(env);
}",0.9003164556962026
107714,"/** 
 * Check that non static class method refer \""this\"".
 * @param method DetailAST of method
 */
private void checkClassMethod(final DetailAST method){
  final DetailAST modifiers=method.findFirstToken(TokenTypes.MODIFIERS);
  if (modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {
    return;
  }
  if (!method.branchContains(TokenTypes.LITERAL_THIS)) {
    final int line=method.getLineNo();
    this.log(line,""String_Node_Str"");
  }
}","/** 
 * Check that non static class method refer \""this\"". Methods annotated with   {@code @Override} are excluded.
 * @param method DetailAST of method
 */
private void checkClassMethod(final DetailAST method){
  final DetailAST modifiers=method.findFirstToken(TokenTypes.MODIFIERS);
  if (modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {
    return;
  }
  if (!AnnotationUtility.containsAnnotation(method,""String_Node_Str"") && !method.branchContains(TokenTypes.LITERAL_THIS)) {
    final int line=method.getLineNo();
    this.log(line,""String_Node_Str"");
  }
}",0.6750972762645915
107715,"public String name(){
  return ""String_Node_Str"";
}","@Deprecated public String name(){
  return ""String_Node_Str"";
}",0.8947368421052632
107716,"public void apply(final Project project){
}","/** 
 * This method is called, when a Gradle plugin is applied to a project. In this method all the checks (Checkstyle, Findbugs etc.) should be performed.
 * @param project Gradle project, which Qulice should check.
 * @todo #339:30min Design validator classes for Gradle.
 */
public void apply(final Project project){
}",0.2362637362637362
107717,"public void apply(Project project){
  this.runMavenDependencyAnalysis(prj);
  this.runMavenEnforcerPlugin(prj);
  this.runJsLintMavenPlugin(prj);
  this.runmavenDuplicateFinderPlugin(prj);
  this.runCheckstyle(prj);
  this.runPMD(prj);
  this.runFindBugs(prj);
  this.runCobertura(prj);
  this.runCodeNarc(prj);
}","public void apply(Project project){
  this.runMavenDependencyAnalysis(project);
  this.runMavenEnforcerPlugin(project);
  this.runJsLintMavenPlugin(project);
  this.runmavenDuplicateFinderPlugin(project);
  this.runCheckstyle(project);
  this.runPMD(project);
  this.runFindBugs(project);
  this.runCobertura(project);
  this.runCodeNarc(project);
}",0.918429003021148
107718,"@Override public ClassLoader classloader(){
  final List<URL> urls=new LinkedList<URL>();
  for (  final String path : this.classpath()) {
    try {
      urls.add(URI.create(String.format(""String_Node_Str"",path)).toURL());
    }
 catch (    final MalformedURLException ex) {
      throw new IllegalStateException(""String_Node_Str"",ex);
    }
  }
  final URLClassLoader loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Thread.currentThread().getContextClassLoader());
  for (  final URL url : loader.getURLs()) {
    Logger.debug(this,""String_Node_Str"",url);
  }
  return loader;
}","@Override public ClassLoader classloader(){
  final List<URL> urls=new LinkedList<URL>();
  for (  final String path : this.classpath()) {
    try {
      urls.add(URI.create(String.format(""String_Node_Str"",URLEncoder.encode(path,""String_Node_Str""))).toURL());
    }
 catch (    final MalformedURLException ex) {
      throw new IllegalStateException(""String_Node_Str"",ex);
    }
catch (    final UnsupportedEncodingException ex) {
      throw new IllegalStateException(""String_Node_Str"",ex);
    }
  }
  final URLClassLoader loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Thread.currentThread().getContextClassLoader());
  for (  final URL url : loader.getURLs()) {
    Logger.debug(this,""String_Node_Str"",url);
  }
  return loader;
}",0.8777943368107303
107719,"/** 
 * Log all violations.
 * @param list The results from CodeNarc
 * @return Number of found violations
 */
private int logViolations(final Results list,final File base){
  int count=0;
  for (  final Object child : list.getChildren()) {
    final Results result=(Results)child;
    if (!result.isFile()) {
      count+=this.logViolations(result,base);
      continue;
    }
    for (    final Object vltn : result.getViolations()) {
      final Violation violation=(Violation)vltn;
      ++count;
      Logger.error(this,""String_Node_Str"",base.getPath(),File.separator,result.getPath(),violation.getLineNumber(),violation.getMessage(),violation.getRule().getName());
    }
  }
  return count;
}","/** 
 * Log all violations.
 * @param list The results from CodeNarc
 * @param base Base directory.
 * @return Number of found violations
 */
private int logViolations(final Results list,final File base){
  int count=0;
  for (  final Object child : list.getChildren()) {
    final Results result=(Results)child;
    if (!result.isFile()) {
      count+=this.logViolations(result,base);
      continue;
    }
    for (    final Object vltn : result.getViolations()) {
      final Violation violation=(Violation)vltn;
      ++count;
      Logger.error(this,""String_Node_Str"",base.getPath(),File.separator,result.getPath(),violation.getLineNumber(),violation.getMessage(),violation.getRule().getName());
    }
  }
  return count;
}",0.9782761037140856
107720,"@Override public boolean exclude(final String check,final String name){
  final String line=String.format(""String_Node_Str"",check,name);
  boolean exclude=false;
  for (  final String expr : this.exc) {
    if (line.matches(expr)) {
      exclude=true;
      break;
    }
  }
  return exclude;
}","@Override public boolean exclude(final String check,final String name){
  final String line=String.format(""String_Node_Str"",check,FilenameUtils.normalize(name));
  boolean exclude=false;
  for (  final String expr : this.exc) {
    if (line.matches(expr)) {
      exclude=true;
      break;
    }
  }
  return exclude;
}",0.751219512195122
107721,"/** 
 * Start findbugs and return its output.
 * @param env Environment
 * @return Output of findbugs
 */
private String findbugs(final Environment env){
  final List<String> args=new LinkedList<String>();
  args.add(""String_Node_Str"");
  args.addAll(this.options(env));
  args.add(Wrap.class.getName());
  args.add(env.basedir().getPath());
  args.add(env.outdir().getPath());
  args.add(StringUtils.join(env.classpath(),""String_Node_Str""));
  final String command=StringUtils.join(args,""String_Node_Str"");
  Logger.debug(this,""String_Node_Str"",command);
  final ProcessBuilder builder=new ProcessBuilder(args);
  String report;
  try {
    final Process process=builder.start();
    if (process.waitFor() != 0) {
      Logger.warn(this,""String_Node_Str"",command,IOUtils.toString(process.getErrorStream()));
    }
    report=IOUtils.toString(process.getInputStream());
  }
 catch (  IOException ex) {
    throw new IllegalStateException(ex);
  }
catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    throw new IllegalStateException(ex);
  }
  Logger.debug(this,""String_Node_Str"",report);
  return report;
}","/** 
 * Start findbugs and return its output.
 * @param env Environment
 * @return Output of findbugs
 */
private String findbugs(final Environment env){
  final List<String> args=new LinkedList<String>();
  args.add(""String_Node_Str"");
  args.addAll(this.options(env));
  args.add(Wrap.class.getName());
  args.add(env.basedir().getPath());
  args.add(env.outdir().getPath());
  args.add(StringUtils.join(env.classpath(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  final String command=StringUtils.join(args,""String_Node_Str"");
  Logger.debug(this,""String_Node_Str"",command);
  final ProcessBuilder builder=new ProcessBuilder(args);
  String report;
  try {
    final Process process=builder.start();
    if (process.waitFor() != 0) {
      Logger.warn(this,""String_Node_Str"",command,IOUtils.toString(process.getErrorStream()));
    }
    report=IOUtils.toString(process.getInputStream());
  }
 catch (  IOException ex) {
    throw new IllegalStateException(ex);
  }
catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    throw new IllegalStateException(ex);
  }
  Logger.debug(this,""String_Node_Str"",report);
  return report;
}",0.9805279099956729
107722,"/** 
 * Java options.
 * @param env Environment
 * @return Options
 */
private List<String> options(final Environment env){
  final File jar=this.jar(Wrap.class);
  final List<String> opts=new LinkedList<String>();
  opts.add(""String_Node_Str"");
  opts.add(StringUtils.join(CollectionUtils.union(Arrays.asList(jar,this.jar(FindBugs2.class),this.jar(ClassFormatException.class),this.jar(DocumentException.class),this.jar(JaxenException.class),this.jar(ClassNode.class),this.jar(ClassVisitor.class),this.jar(When.class),this.jar(EmptyVisitor.class),this.jar(FormatterNumberFormatException.class)),env.classpath()),System.getProperty(""String_Node_Str"")));
  return opts;
}","/** 
 * Java options.
 * @param env Environment
 * @return Options
 */
private List<String> options(final Environment env){
  final File jar=this.jar(Wrap.class);
  final List<String> opts=new LinkedList<String>();
  opts.add(""String_Node_Str"");
  opts.add(StringUtils.join(CollectionUtils.union(Arrays.asList(jar,this.jar(FindBugs2.class),this.jar(ClassFormatException.class),this.jar(DocumentException.class),this.jar(JaxenException.class),this.jar(ClassNode.class),this.jar(ClassVisitor.class),this.jar(When.class),this.jar(EmptyVisitor.class),this.jar(FormatterNumberFormatException.class)),env.classpath()),System.getProperty(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str""));
  return opts;
}",0.9674620390455532
107723,"/** 
 * Get address of our JAR or directory.
 * @param resource Name of resource
 * @return The file
 */
private File jar(final Class<?> resource){
  final String name=resource.getName().replace(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  final URL res=this.getClass().getResource(String.format(""String_Node_Str"",name));
  if (res == null) {
    throw new IllegalStateException(String.format(""String_Node_Str"",name));
  }
  final String path=res.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"");
  File file;
  if (""String_Node_Str"".equals(FilenameUtils.getExtension(path))) {
    file=new File(URI.create(path).getPath());
  }
 else {
    file=new File(path).getParentFile().getParentFile().getParentFile().getParentFile();
  }
  Logger.debug(this,""String_Node_Str"",resource.getName(),file);
  return file;
}","/** 
 * Get address of our JAR or directory.
 * @param resource Name of resource
 * @return The file
 */
private File jar(final Class<?> resource){
  final String name=resource.getName().replace(""String_Node_Str"",""String_Node_Str"");
  final URL res=this.getClass().getResource(String.format(""String_Node_Str"",name));
  if (res == null) {
    throw new IllegalStateException(String.format(""String_Node_Str"",name));
  }
  final String path=res.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"");
  File file;
  if (""String_Node_Str"".equals(FilenameUtils.getExtension(path))) {
    file=new File(URI.create(path).getPath());
  }
 else {
    file=new File(path).getParentFile().getParentFile().getParentFile().getParentFile();
  }
  Logger.debug(this,""String_Node_Str"",resource.getName(),file);
  return file;
}",0.9672330097087378
107724,"/** 
 * Check report for errors.
 * @param report The report
 * @throws ValidationException If it contains errors
 * @checkstyle RedundantThrows (3 lines)
 */
private void check(final String report) throws ValidationException {
  int total=0;
  for (  final String line : report.split(""String_Node_Str"")) {
    if (line.matches(""String_Node_Str"")) {
      Logger.warn(this,""String_Node_Str"",line);
      ++total;
    }
  }
  if (total > 0) {
    throw new ValidationException(""String_Node_Str"",total);
  }
}","/** 
 * Check report for errors.
 * @param report The report
 * @throws ValidationException If it contains errors
 * @checkstyle RedundantThrows (3 lines)
 */
private void check(final String report) throws ValidationException {
  int total=0;
  for (  final String line : report.split(System.getProperty(""String_Node_Str""))) {
    if (line.matches(""String_Node_Str"")) {
      Logger.warn(this,""String_Node_Str"",line);
      ++total;
    }
  }
  if (total > 0) {
    throw new ValidationException(""String_Node_Str"",total);
  }
}",0.9806576402321084
107725,"/** 
 * Start findbugs and return its output.
 * @param env Environment
 * @return Output of findbugs
 */
private String findbugs(final Environment env){
  final List<String> args=new LinkedList<String>();
  args.add(""String_Node_Str"");
  args.addAll(this.options(env));
  args.add(Wrap.class.getName());
  args.add(env.basedir().getPath());
  args.add(env.outdir().getPath());
  args.add(StringUtils.join(env.classpath(),""String_Node_Str""));
  final String command=StringUtils.join(args,""String_Node_Str"");
  Logger.debug(this,""String_Node_Str"",command);
  final ProcessBuilder builder=new ProcessBuilder(args);
  String report;
  try {
    final Process process=builder.start();
    if (process.waitFor() != 0) {
      Logger.warn(this,""String_Node_Str"",command,IOUtils.toString(process.getErrorStream()));
    }
    report=IOUtils.toString(process.getInputStream());
  }
 catch (  IOException ex) {
    throw new IllegalStateException(ex);
  }
catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    throw new IllegalStateException(ex);
  }
  Logger.debug(this,""String_Node_Str"",report);
  return report;
}","/** 
 * Start findbugs and return its output.
 * @param env Environment
 * @return Output of findbugs
 */
private String findbugs(final Environment env){
  final List<String> args=new LinkedList<String>();
  args.add(""String_Node_Str"");
  args.addAll(this.options(env));
  args.add(Wrap.class.getName());
  args.add(env.basedir().getPath());
  args.add(env.outdir().getPath());
  args.add(StringUtils.join(env.classpath(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  final String command=StringUtils.join(args,""String_Node_Str"");
  Logger.debug(this,""String_Node_Str"",command);
  final ProcessBuilder builder=new ProcessBuilder(args);
  String report;
  try {
    final Process process=builder.start();
    if (process.waitFor() != 0) {
      Logger.warn(this,""String_Node_Str"",command,IOUtils.toString(process.getErrorStream()));
    }
    report=IOUtils.toString(process.getInputStream());
  }
 catch (  IOException ex) {
    throw new IllegalStateException(ex);
  }
catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    throw new IllegalStateException(ex);
  }
  Logger.debug(this,""String_Node_Str"",report);
  return report;
}",0.9805279099956729
107726,"/** 
 * Java options.
 * @param env Environment
 * @return Options
 */
private List<String> options(final Environment env){
  final File jar=this.jar(Wrap.class);
  final List<String> opts=new LinkedList<String>();
  opts.add(""String_Node_Str"");
  opts.add(StringUtils.join(CollectionUtils.union(Arrays.asList(jar,this.jar(FindBugs2.class),this.jar(ClassFormatException.class),this.jar(DocumentException.class),this.jar(JaxenException.class),this.jar(ClassNode.class),this.jar(ClassVisitor.class),this.jar(When.class),this.jar(EmptyVisitor.class),this.jar(FormatterNumberFormatException.class)),env.classpath()),System.getProperty(""String_Node_Str"")));
  return opts;
}","/** 
 * Java options.
 * @param env Environment
 * @return Options
 */
private List<String> options(final Environment env){
  final File jar=this.jar(Wrap.class);
  final List<String> opts=new LinkedList<String>();
  opts.add(""String_Node_Str"");
  opts.add(StringUtils.join(CollectionUtils.union(Arrays.asList(jar,this.jar(FindBugs2.class),this.jar(ClassFormatException.class),this.jar(DocumentException.class),this.jar(JaxenException.class),this.jar(ClassNode.class),this.jar(ClassVisitor.class),this.jar(When.class),this.jar(EmptyVisitor.class),this.jar(FormatterNumberFormatException.class)),env.classpath()),System.getProperty(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str""));
  return opts;
}",0.9674620390455532
107727,"/** 
 * Get address of our JAR or directory.
 * @param resource Name of resource
 * @return The file
 */
private File jar(final Class<?> resource){
  final String name=resource.getName().replace(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  final URL res=this.getClass().getResource(String.format(""String_Node_Str"",name));
  if (res == null) {
    throw new IllegalStateException(String.format(""String_Node_Str"",name));
  }
  final String path=res.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"");
  File file;
  if (""String_Node_Str"".equals(FilenameUtils.getExtension(path))) {
    file=new File(URI.create(path).getPath());
  }
 else {
    file=new File(path).getParentFile().getParentFile().getParentFile().getParentFile();
  }
  Logger.debug(this,""String_Node_Str"",resource.getName(),file);
  return file;
}","/** 
 * Get address of our JAR or directory.
 * @param resource Name of resource
 * @return The file
 */
private File jar(final Class<?> resource){
  final String name=resource.getName().replace(""String_Node_Str"",""String_Node_Str"");
  final URL res=this.getClass().getResource(String.format(""String_Node_Str"",name));
  if (res == null) {
    throw new IllegalStateException(String.format(""String_Node_Str"",name));
  }
  final String path=res.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"");
  File file;
  if (""String_Node_Str"".equals(FilenameUtils.getExtension(path))) {
    file=new File(URI.create(path).getPath());
  }
 else {
    file=new File(path).getParentFile().getParentFile().getParentFile().getParentFile();
  }
  Logger.debug(this,""String_Node_Str"",resource.getName(),file);
  return file;
}",0.9672330097087378
107728,"/** 
 * Check report for errors.
 * @param report The report
 * @throws ValidationException If it contains errors
 * @checkstyle RedundantThrows (3 lines)
 */
private void check(final String report) throws ValidationException {
  int total=0;
  for (  final String line : report.split(""String_Node_Str"")) {
    if (line.matches(""String_Node_Str"")) {
      Logger.warn(this,""String_Node_Str"",line);
      ++total;
    }
  }
  if (total > 0) {
    throw new ValidationException(""String_Node_Str"",total);
  }
}","/** 
 * Check report for errors.
 * @param report The report
 * @throws ValidationException If it contains errors
 * @checkstyle RedundantThrows (3 lines)
 */
private void check(final String report) throws ValidationException {
  int total=0;
  for (  final String line : report.split(System.getProperty(""String_Node_Str""))) {
    if (line.matches(""String_Node_Str"")) {
      Logger.warn(this,""String_Node_Str"",line);
      ++total;
    }
  }
  if (total > 0) {
    throw new ValidationException(""String_Node_Str"",total);
  }
}",0.9806576402321084
107729,"@Override public Data clone(){
  return new Data(data.clone(),header,columns,dictionary);
}","@Override public Data clone(){
  return new Data(data != null ? data.clone() : null,header,columns,dictionary);
}",0.8921568627450981
107730,"/** 
 * Returns an instance of this data manager, that is projected onto the given rowset
 * @param rowset
 * @return
 */
public DataManager getSubsetInstance(RowSet rowset){
  return new DataManagerSubset(this,dataAnalyzed.getSubsetInstance(rowset),dataGeneralized.getSubsetInstance(rowset),dataInput.getSubsetInstance(rowset),definition,shares,header,hierarchiesGeneralized,hierarchiesAnalyzed,generalizationLevelsMinimum,generalizationLevelsMaximum,aggregationInformation.getSubsetInstance());
}","/** 
 * Returns an instance of this data manager, that is projected onto the given rowset
 * @param rowset
 * @return
 */
public DataManager getSubsetInstance(RowSet rowset){
  return new DataManagerSubset(this,dataAnalyzed.getSubsetInstance(rowset),dataGeneralized.getSubsetInstance(rowset),dataInput.getSubsetInstance(rowset),definition,shares,header,hierarchiesGeneralized,hierarchiesAnalyzed,generalizationLevelsMinimum,generalizationLevelsMaximum,aggregationInformation.clone());
}",0.9796747967479674
107731,"/** 
 * Creates the settings.
 * @param delimiter the delimiter
 * @param quote the quote
 * @param escape the escape
 * @param linebreak the linebreak
 * @param options the options
 * @return the csv writer settings
 */
private CsvWriterSettings createSettings(final char delimiter,final char quote,final char escape,final char[] linebreak,final CSVOptions options){
  CsvFormat format=new CsvFormat();
  format.setDelimiter(delimiter);
  format.setQuote(quote);
  format.setQuoteEscape(escape);
  format.setLineSeparator(linebreak);
  format.setNormalizedNewline(CSVSyntax.getNormalizedLinebreak(linebreak));
  CsvWriterSettings settings=new CsvWriterSettings();
  settings.setEmptyValue(""String_Node_Str"");
  settings.setNullValue(""String_Node_Str"");
  settings.setFormat(format);
  options.apply(settings);
  return settings;
}","/** 
 * Creates the settings.
 * @param delimiter the delimiter
 * @param quote the quote
 * @param escape the escape
 * @param linebreak the linebreak
 * @param options the options
 * @return the csv writer settings
 */
private CsvWriterSettings createSettings(final char delimiter,final char quote,final char escape,final char[] linebreak,final CSVOptions options){
  CsvFormat format=new CsvFormat();
  format.setDelimiter(delimiter);
  format.setQuote(quote);
  format.setQuoteEscape(escape);
  format.setLineSeparator(linebreak);
  format.setNormalizedNewline(CSVSyntax.getNormalizedLinebreak(linebreak));
  CsvWriterSettings settings=new CsvWriterSettings();
  settings.setEmptyValue(""String_Node_Str"");
  settings.setNullValue(""String_Node_Str"");
  settings.setFormat(format);
  if (options != null) {
    options.apply(settings);
  }
  return settings;
}",0.9616066154754872
107732,"/** 
 * Creates a new data handle.
 * @param data
 */
protected DataHandleInput(final Data data){
  Iterator<String[]> iterator=data.iterator();
  if (!iterator.hasNext()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.setRegistry(new DataRegistry());
  this.getRegistry().updateInput(this);
  this.definition=data.getDefinition().clone();
  String[] columns=iterator.next();
  super.setHeader(Arrays.copyOf(columns,columns.length));
  this.dictionary=new Dictionary(header.length);
  if (data.getLength() != null && data.getLength() > 0) {
    int records=data.getLength();
    this.data=new DataMatrix(records,header.length);
    int row=0;
    while (iterator.hasNext()) {
      String[] strings=iterator.next();
      int[] tuple=new int[header.length];
      for (int i=0; i < header.length; i++) {
        String value=(i < strings.length) ? strings[i] : DataType.NULL_VALUE;
        value=(value != null) ? value : DataType.NULL_VALUE;
        tuple[i]=dictionary.register(i,value);
      }
      this.data.setRow(row,tuple);
      row++;
      if (row == records) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
 else {
    List<int[]> vals=new ArrayList<int[]>();
    while (iterator.hasNext()) {
      String[] strings=iterator.next();
      int[] tuple=new int[header.length];
      for (int i=0; i < header.length; i++) {
        String value=(i < strings.length) ? strings[i] : DataType.NULL_VALUE;
        value=(value != null) ? value : DataType.NULL_VALUE;
        tuple[i]=dictionary.register(i,value);
      }
      vals.add(tuple);
    }
    this.data=new DataMatrix(vals.size(),header.length);
    for (int row=0; row < vals.size(); row++) {
      this.data.setRow(row,vals.get(row));
    }
  }
  this.dictionary.finalizeAll();
  this.columnToDataType=getColumnToDataType();
}","/** 
 * Creates a new data handle.
 * @param data
 */
protected DataHandleInput(final Data data){
  Iterator<String[]> iterator=data.iterator();
  if (!iterator.hasNext()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.setRegistry(new DataRegistry());
  this.getRegistry().updateInput(this);
  this.definition=data.getDefinition().clone();
  String[] columns=iterator.next();
  super.setHeader(Arrays.copyOf(columns,columns.length));
  this.dictionary=new Dictionary(header.length);
  if (data.getLength() != null && data.getLength() > 0) {
    int records=data.getLength();
    this.data=new DataMatrix(records,header.length);
    int row=0;
    while (iterator.hasNext()) {
      if (row == records) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String[] strings=iterator.next();
      int[] tuple=new int[header.length];
      for (int i=0; i < header.length; i++) {
        String value=(i < strings.length) ? strings[i] : DataType.NULL_VALUE;
        value=(value != null) ? value : DataType.NULL_VALUE;
        tuple[i]=dictionary.register(i,value);
      }
      this.data.setRow(row,tuple);
      row++;
    }
  }
 else {
    List<int[]> vals=new ArrayList<int[]>();
    while (iterator.hasNext()) {
      String[] strings=iterator.next();
      int[] tuple=new int[header.length];
      for (int i=0; i < header.length; i++) {
        String value=(i < strings.length) ? strings[i] : DataType.NULL_VALUE;
        value=(value != null) ? value : DataType.NULL_VALUE;
        tuple[i]=dictionary.register(i,value);
      }
      vals.add(tuple);
    }
    this.data=new DataMatrix(vals.size(),header.length);
    for (int row=0; row < vals.size(); row++) {
      this.data.setRow(row,vals.get(row));
    }
  }
  this.dictionary.finalizeAll();
  this.columnToDataType=getColumnToDataType();
}",0.9466594827586208
107733,"/** 
 * Resets the model.
 */
public void reset(){
  this.resetCriteria();
  this.resetAttributePair();
  this.inputConfig=new ModelConfiguration();
  this.outputConfig=null;
  this.output=null;
  this.result=null;
  if (auditTrail != null)   auditTrail.clear();
  this.selectedQuasiIdentifiers=null;
  this.selectedFeatures=null;
  this.selectedClasses=null;
  this.subsetOrigin=Resources.getMessage(""String_Node_Str"");
  this.groups=null;
  this.classificationModel=new ModelClassification();
  this.anonymizationConfiguration=null;
  this.heuristicSearchStepLimit=null;
  this.heuristicSearchThreshold=null;
  this.heuristicSearchTimeLimit=null;
  this.optimizationStatistics=null;
  this.localRecodingModel=null;
}","/** 
 * Resets the model.
 */
public void reset(){
  this.resetCriteria();
  this.resetAttributePair();
  this.inputConfig=new ModelConfiguration();
  this.outputConfig=null;
  this.output=null;
  this.result=null;
  if (auditTrail != null)   auditTrail.clear();
  this.selectedQuasiIdentifiers=null;
  this.selectedFeatures=null;
  this.selectedClasses=null;
  this.subsetOrigin=Resources.getMessage(""String_Node_Str"");
  this.groups=null;
  this.classificationModel=new ModelClassification();
  this.anonymizationConfiguration=null;
  this.heuristicSearchStepLimit=null;
  this.heuristicSearchThreshold=null;
  this.heuristicSearchTimeLimit=null;
  this.optimizationStatistics=null;
  this.localRecodingModel=null;
  this.selectedClassValue=null;
  this.selectedAttribute=null;
}",0.9579719813208806
107734,"/** 
 * Updates the view when a new target variable has been set Selects the first class value available for this target.
 * @param attribute
 */
private void updateSelectedTarget(String attribute){
  this.root.setRedraw(false);
  int index=0;
  boolean selected=false;
  for (  TableItem item : performanceTableOverview.getItems()) {
    if (item.getText(0).equals(attribute)) {
      performanceTableOverview.select(index);
      selected=true;
      break;
    }
    index++;
  }
  if (!selected) {
    this.root.setRedraw(true);
    return;
  }
  performanceTableSensitivitySpecificity.setRedraw(false);
  for (  final TableItem i : performanceTableSensitivitySpecificity.getItems()) {
    i.dispose();
  }
  performanceTableSensitivitySpecificity.setRedraw(true);
  if (originalRocCurves.containsKey(attribute)) {
    List<String> values=new ArrayList<>(originalRocCurves.get(attribute).keySet());
    Collections.sort(values);
    List<Double> sensitivities=new ArrayList<Double>();
    List<Double> specificities=new ArrayList<Double>();
    List<Double> brierscores=new ArrayList<Double>();
    for (    String clazz : values) {
      ROCCurve c;
      if (isOutput) {
        c=rocCurves.get(attribute).get(clazz);
      }
 else {
        c=originalRocCurves.get(attribute).get(clazz);
      }
      TableItem item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
      item.setText(0,clazz);
      item.setData(""String_Node_Str"",c.getSensitivity());
      item.setData(""String_Node_Str"",c.getSpecificity());
      item.setData(""String_Node_Str"",c.getBrierScore());
      sensitivities.add(c.getSensitivity());
      specificities.add(c.getSpecificity());
      brierscores.add(c.getBrierScore());
    }
    double[] min=new double[3];
    double[] avg=new double[3];
    double[] max=new double[3];
    for (int i=0; i < sensitivities.size(); i++) {
      double sensitivity=sensitivities.get(i);
      min[0]=min[0] == 0d ? sensitivity : Math.min(min[0],sensitivity);
      max[0]=Math.max(max[0],sensitivity);
      avg[0]+=sensitivity;
      double specificity=specificities.get(i);
      min[1]=min[1] == 0d ? specificity : Math.min(min[1],specificity);
      max[1]=Math.max(max[1],specificity);
      avg[1]+=specificity;
      double brierscore=brierscores.get(i);
      min[2]=min[2] == 0d ? brierscore : Math.min(min[2],brierscore);
      max[2]=Math.max(max[2],brierscore);
      avg[2]+=brierscore;
    }
    TableItem item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,Resources.getMessage(""String_Node_Str""));
    item.setData(""String_Node_Str"",min[0]);
    item.setData(""String_Node_Str"",min[1]);
    item.setData(""String_Node_Str"",min[2]);
    item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,Resources.getMessage(""String_Node_Str""));
    item.setData(""String_Node_Str"",avg[0] / values.size());
    item.setData(""String_Node_Str"",avg[1] / values.size());
    item.setData(""String_Node_Str"",avg[2] / values.size());
    item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,Resources.getMessage(""String_Node_Str""));
    item.setData(""String_Node_Str"",max[0]);
    item.setData(""String_Node_Str"",max[1]);
    item.setData(""String_Node_Str"",max[2]);
    if (rocCombo.getItemCount() != 0) {
      String[] targetVariables=getModel().getSelectedClassesAsArray();
      String targetVariable=getModel().getSelectedAttribute();
      int targetIndex=getIndexOf(targetVariables,targetVariable);
      rocCombo.select(targetIndex);
      for (      final TableItem i : rocTable.getItems()) {
        i.dispose();
      }
      List<String> classes=new ArrayList<>(originalRocCurves.get(targetVariable).keySet());
      Collections.sort(classes);
      for (      String value : classes) {
        item=new TableItem(rocTable,SWT.NONE);
        item.setText(0,value);
        ROCCurve[] data={null,null,null};
        item.setData(data);
        ROCCurve rocZeror=zerorRocCurves.get(targetVariable).get(value);
        item.setData(""String_Node_Str"",rocZeror.getAUC());
        data[0]=rocZeror;
        ROCCurve rocOriginal=originalRocCurves.get(targetVariable).get(value);
        item.setData(isOutput ? ""String_Node_Str"" : ""String_Node_Str"",rocOriginal.getAUC());
        data[2]=rocOriginal;
        if (isOutput) {
          ROCCurve rocOutput=rocCurves.get(targetVariable).get(value);
          item.setData(""String_Node_Str"",rocOutput.getAUC());
          data[1]=rocOutput;
          double relativeAUC;
          if (rocOriginal.getAUC() - rocZeror.getAUC() == 0d) {
            relativeAUC=rocOutput.getAUC() / rocZeror.getAUC();
          }
 else {
            relativeAUC=(rocOutput.getAUC() - rocZeror.getAUC()) / (rocOriginal.getAUC() - rocZeror.getAUC());
          }
          item.setData(""String_Node_Str"",relativeAUC);
        }
      }
      if (classes.contains(getModel().getSelectedClassValue())) {
        updateSelectedClassValue(getModel().getSelectedClassValue());
      }
 else       if (!classes.isEmpty()) {
        updateSelectedClassValue(classes.get(0));
      }
    }
  }
  this.root.setRedraw(true);
}","/** 
 * Updates the view when a new target variable has been set. Selects the first class value available for this target.
 * @param targetAttribute
 */
private void updateSelectedTarget(String targetAttribute){
  if (performanceTableOverview.getItemCount() == 0) {
    return;
  }
  this.root.setRedraw(false);
  int index=0;
  boolean selected=false;
  for (  TableItem item : performanceTableOverview.getItems()) {
    if (item.getText(0).equals(targetAttribute)) {
      performanceTableOverview.select(index);
      selected=true;
      break;
    }
    index++;
  }
  if (!selected) {
    performanceTableOverview.select(0);
    targetAttribute=performanceTableOverview.getItem(0).getText(0);
  }
  performanceTableSensitivitySpecificity.setRedraw(false);
  for (  final TableItem i : performanceTableSensitivitySpecificity.getItems()) {
    i.dispose();
  }
  performanceTableSensitivitySpecificity.setRedraw(true);
  if (originalRocCurves.containsKey(targetAttribute)) {
    List<String> values=new ArrayList<>(originalRocCurves.get(targetAttribute).keySet());
    Collections.sort(values);
    List<Double> sensitivities=new ArrayList<Double>();
    List<Double> specificities=new ArrayList<Double>();
    List<Double> brierscores=new ArrayList<Double>();
    for (    String clazz : values) {
      ROCCurve c;
      if (isOutput) {
        c=rocCurves.get(targetAttribute).get(clazz);
      }
 else {
        c=originalRocCurves.get(targetAttribute).get(clazz);
      }
      TableItem item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
      item.setText(0,clazz);
      item.setData(""String_Node_Str"",c.getSensitivity());
      item.setData(""String_Node_Str"",c.getSpecificity());
      item.setData(""String_Node_Str"",c.getBrierScore());
      sensitivities.add(c.getSensitivity());
      specificities.add(c.getSpecificity());
      brierscores.add(c.getBrierScore());
    }
    double[] min=new double[3];
    double[] avg=new double[3];
    double[] max=new double[3];
    for (int i=0; i < sensitivities.size(); i++) {
      double sensitivity=sensitivities.get(i);
      min[0]=min[0] == 0d ? sensitivity : Math.min(min[0],sensitivity);
      max[0]=Math.max(max[0],sensitivity);
      avg[0]+=sensitivity;
      double specificity=specificities.get(i);
      min[1]=min[1] == 0d ? specificity : Math.min(min[1],specificity);
      max[1]=Math.max(max[1],specificity);
      avg[1]+=specificity;
      double brierscore=brierscores.get(i);
      min[2]=min[2] == 0d ? brierscore : Math.min(min[2],brierscore);
      max[2]=Math.max(max[2],brierscore);
      avg[2]+=brierscore;
    }
    TableItem item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,Resources.getMessage(""String_Node_Str""));
    item.setData(""String_Node_Str"",min[0]);
    item.setData(""String_Node_Str"",min[1]);
    item.setData(""String_Node_Str"",min[2]);
    item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,Resources.getMessage(""String_Node_Str""));
    item.setData(""String_Node_Str"",avg[0] / values.size());
    item.setData(""String_Node_Str"",avg[1] / values.size());
    item.setData(""String_Node_Str"",avg[2] / values.size());
    item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,Resources.getMessage(""String_Node_Str""));
    item.setData(""String_Node_Str"",max[0]);
    item.setData(""String_Node_Str"",max[1]);
    item.setData(""String_Node_Str"",max[2]);
    if (rocCombo.getItemCount() != 0) {
      String[] targetVariables=getModel().getSelectedClassesAsArray();
      int targetIndex=getIndexOf(targetVariables,targetAttribute);
      rocCombo.select(targetIndex);
      for (      final TableItem i : rocTable.getItems()) {
        i.dispose();
      }
      List<String> classes=new ArrayList<>(originalRocCurves.get(targetAttribute).keySet());
      Collections.sort(classes);
      for (      String value : classes) {
        item=new TableItem(rocTable,SWT.NONE);
        item.setText(0,value);
        ROCCurve[] data={null,null,null};
        item.setData(data);
        ROCCurve rocZeror=zerorRocCurves.get(targetAttribute).get(value);
        item.setData(""String_Node_Str"",rocZeror.getAUC());
        data[0]=rocZeror;
        ROCCurve rocOriginal=originalRocCurves.get(targetAttribute).get(value);
        item.setData(isOutput ? ""String_Node_Str"" : ""String_Node_Str"",rocOriginal.getAUC());
        data[2]=rocOriginal;
        if (isOutput) {
          ROCCurve rocOutput=rocCurves.get(targetAttribute).get(value);
          item.setData(""String_Node_Str"",rocOutput.getAUC());
          data[1]=rocOutput;
          double relativeAUC;
          if (rocOriginal.getAUC() - rocZeror.getAUC() == 0d) {
            relativeAUC=rocOutput.getAUC() / rocZeror.getAUC();
          }
 else {
            relativeAUC=(rocOutput.getAUC() - rocZeror.getAUC()) / (rocOriginal.getAUC() - rocZeror.getAUC());
          }
          item.setData(""String_Node_Str"",relativeAUC);
        }
      }
      if (classes.contains(getModel().getSelectedClassValue())) {
        updateSelectedClassValue(getModel().getSelectedClassValue());
      }
 else       if (!classes.isEmpty()) {
        updateSelectedClassValue(classes.get(0));
      }
    }
  }
  this.root.setRedraw(true);
}",0.9247660874546496
107735,"/** 
 * Converts a score into a relative value in percent.
 * @param infoLoss
 * @return
 */
private double asRelativeValue(final InformationLoss<?> infoLoss){
  if (result == null)   return 0;
  return infoLoss.relativeTo(result.getLattice().getLowestScore(),result.getLattice().getHighestScore()) * 100d;
}","/** 
 * Converts a score into a relative value in percent.
 * @param infoLoss
 * @return
 */
private double asRelativeValue(final InformationLoss<?> infoLoss){
  if (result == null || model == null)   return 0;
  final ARXLattice lattice=model.getProcessStatistics().getNumberOfSteps() > 1 ? model.getProcessStatistics().getLattice() : result.getLattice();
  return infoLoss.relativeTo(lattice.getLowestScore(),lattice.getHighestScore()) * 100d;
}",0.7152317880794702
107736,"@Override public void reset(){
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  TableItem c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,""String_Node_Str"");
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  table.setRedraw(true);
  table.redraw();
  SWTUtil.disable(root);
}","@Override public void reset(){
  clearTable();
  SWTUtil.disable(root);
  result=null;
  model=null;
}",0.1128775834658187
107737,"/** 
 * Updates the view.
 * @param node
 */
private void update(final ARXNode node){
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  TableItem c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,Arrays.toString(node.getTransformation()));
  Step step=null;
  if (node.getAttributes().containsKey(Integer.MAX_VALUE)) {
    if (node.getAttributes().get(Integer.MAX_VALUE) instanceof Step) {
      step=(Step)node.getAttributes().get(Integer.MAX_VALUE);
    }
  }
  if (step != null) {
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    c.setText(1,String.valueOf(step.getNumberOfRecordsTransformed()));
  }
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.getAnonymity()));
  if (node.getLowestScore() != null && node.getHighestScore() != null && node.getLowestScore().compareTo(node.getHighestScore()) == 0) {
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    c.setText(1,node.getLowestScore().toString() + ""String_Node_Str"" + SWTUtil.getPrettyString(asRelativeValue(node.getLowestScore()))+ ""String_Node_Str"");
  }
 else {
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    if (node.getLowestScore() != null) {
      c.setText(1,node.getLowestScore().toString() + ""String_Node_Str"" + SWTUtil.getPrettyString(asRelativeValue(node.getLowestScore()))+ ""String_Node_Str"");
    }
 else {
      c.setText(1,Resources.getMessage(""String_Node_Str""));
    }
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    if (node.getHighestScore() != null) {
      c.setText(1,node.getHighestScore().toString() + ""String_Node_Str"" + SWTUtil.getPrettyString(asRelativeValue(node.getHighestScore()))+ ""String_Node_Str"");
    }
 else {
      c.setText(1,Resources.getMessage(""String_Node_Str""));
    }
  }
  if (node.isChecked()) {
    for (    QualityMetadata<?> metadata : node.getLowestScore().getMetadata()) {
      c=new TableItem(table,SWT.NONE);
      c.setText(0,metadata.getParameter());
      c.setText(1,SWTUtil.getPrettyString(metadata.getValue()));
    }
  }
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.getSuccessors().length));
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.getPredecessors().length));
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.isChecked()));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  table.setRedraw(true);
  table.redraw();
}","/** 
 * Updates the view.
 * @param node
 */
private void update(final ARXNode node){
  if (node == null) {
    return;
  }
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  TableItem c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,Arrays.toString(node.getTransformation()));
  Step step=null;
  if (node.getAttributes().containsKey(Integer.MAX_VALUE)) {
    if (node.getAttributes().get(Integer.MAX_VALUE) instanceof Step) {
      step=(Step)node.getAttributes().get(Integer.MAX_VALUE);
    }
  }
  if (step != null) {
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    c.setText(1,String.valueOf(step.getNumberOfRecordsTransformed()));
  }
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.getAnonymity()));
  if (node.getLowestScore() != null && node.getHighestScore() != null && node.getLowestScore().compareTo(node.getHighestScore()) == 0) {
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    c.setText(1,node.getLowestScore().toString() + ""String_Node_Str"" + SWTUtil.getPrettyString(asRelativeValue(node.getLowestScore()))+ ""String_Node_Str"");
  }
 else {
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    if (node.getLowestScore() != null) {
      c.setText(1,node.getLowestScore().toString() + ""String_Node_Str"" + SWTUtil.getPrettyString(asRelativeValue(node.getLowestScore()))+ ""String_Node_Str"");
    }
 else {
      c.setText(1,Resources.getMessage(""String_Node_Str""));
    }
    c=new TableItem(table,SWT.NONE);
    c.setText(0,Resources.getMessage(""String_Node_Str""));
    if (node.getHighestScore() != null) {
      c.setText(1,node.getHighestScore().toString() + ""String_Node_Str"" + SWTUtil.getPrettyString(asRelativeValue(node.getHighestScore()))+ ""String_Node_Str"");
    }
 else {
      c.setText(1,Resources.getMessage(""String_Node_Str""));
    }
  }
  if (node.isChecked()) {
    for (    QualityMetadata<?> metadata : node.getLowestScore().getMetadata()) {
      c=new TableItem(table,SWT.NONE);
      c.setText(0,metadata.getParameter());
      c.setText(1,SWTUtil.getPrettyString(metadata.getValue()));
    }
  }
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.getSuccessors().length));
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.getPredecessors().length));
  c=new TableItem(table,SWT.NONE);
  c.setText(0,Resources.getMessage(""String_Node_Str""));
  c.setText(1,String.valueOf(node.isChecked()));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  table.setRedraw(true);
  table.redraw();
}",0.9934505342985176
107738,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewProperties(final Composite parent,final Controller controller){
  controller.addListener(ModelPart.RESULT,this);
  controller.addListener(ModelPart.SELECTED_NODE,this);
  this.controller=controller;
  ComponentTitledBorder border=new ComponentTitledBorder(parent,controller,Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  root=new Composite(border.getControl(),SWT.NONE);
  border.setChild(root);
  border.setLayoutData(SWTUtil.createFillGridData());
  final GridLayout groupNodeGridLayout=new GridLayout();
  groupNodeGridLayout.numColumns=1;
  root.setLayout(groupNodeGridLayout);
  table=SWTUtil.createTable(root,SWT.BORDER | SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final GridData gdata=SWTUtil.createFillGridData();
  table.setLayoutData(gdata);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  TableColumn c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  SWTUtil.createGenericTooltip(table);
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  reset();
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewProperties(final Composite parent,final Controller controller){
  controller.addListener(ModelPart.RESULT,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(ModelPart.SELECTED_NODE,this);
  this.controller=controller;
  ComponentTitledBorder border=new ComponentTitledBorder(parent,controller,Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  root=new Composite(border.getControl(),SWT.NONE);
  border.setChild(root);
  border.setLayoutData(SWTUtil.createFillGridData());
  final GridLayout groupNodeGridLayout=new GridLayout();
  groupNodeGridLayout.numColumns=1;
  root.setLayout(groupNodeGridLayout);
  table=SWTUtil.createTable(root,SWT.BORDER | SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final GridData gdata=SWTUtil.createFillGridData();
  table.setLayoutData(gdata);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  TableColumn c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  SWTUtil.createGenericTooltip(table);
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  clearTable();
}",0.9758157389635316
107739,"/** 
 * Converts an information loss into a relative value in percent TODO: Code duplicate from NodePropertiesView.
 * @param infoLoss
 * @param result
 * @return
 */
protected double asRelativeValue(final InformationLoss<?> infoLoss,final ARXResult result){
  return infoLoss.relativeTo(model.getResult().getLattice().getLowestScore(),model.getResult().getLattice().getHighestScore()) * 100d;
}","/** 
 * Converts an information loss into a relative value in percent TODO: Code duplicate from NodePropertiesView.
 * @param infoLoss
 * @param result
 * @return
 */
protected double asRelativeValue(final InformationLoss<?> infoLoss,final ARXResult result){
  ARXLattice lattice=model.getProcessStatistics().getNumberOfSteps() > 1 ? model.getProcessStatistics().getLattice() : result.getLattice();
  return infoLoss.relativeTo(lattice.getLowestScore(),lattice.getHighestScore()) * 100d;
}",0.7579185520361991
107740,"/** 
 * Returns whether the function is valid
 * @param function
 * @return
 */
public boolean isValidScalingFunction(String function){
  if (function == null || function.equals(""String_Node_Str"")) {
    return true;
  }
  Expression expression=null;
  try {
    expression=new ExpressionBuilder(function).variable(""String_Node_Str"").build();
  }
 catch (  Exception e) {
    return false;
  }
  if (expression == null || !expression.validate(false).isValid()) {
    return false;
  }
  if (expression.getVariableNames().size() != 1 || !expression.getVariableNames().contains(""String_Node_Str"")) {
    return false;
  }
  return true;
}","/** 
 * Returns whether the function is valid
 * @param function
 * @return
 */
public boolean isValidScalingFunction(String function){
  if (function == null || function.equals(""String_Node_Str"")) {
    return true;
  }
  try {
    getExpression(function);
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
  return true;
}",0.514344262295082
107741,"/** 
 * Returns a scaling function
 * @param attribute
 * @return
 */
public Expression getScalingExpression(String attribute){
  return this.expressions.get(attribute);
}","/** 
 * Returns a scaling function
 * @param attribute
 * @return
 */
public Expression getScalingExpression(String attribute){
  if (attribute == null) {
    return null;
  }
  String function=this.functions.get(attribute);
  if (function == null || function.equals(""String_Node_Str"")) {
    return null;
  }
  return getExpression(function);
}",0.5736434108527132
107742,"/** 
 * Sets a scaling function
 * @param attribute
 * @param function
 */
public ARXFeatureScaling setScalingFunction(String attribute,String function){
  if (attribute == null) {
    return this;
  }
  if (function == null || function.equals(""String_Node_Str"")) {
    this.expressions.remove(attribute);
    this.functions.remove(attribute);
    return this;
  }
  Expression expression=null;
  try {
    expression=new ExpressionBuilder(function).variable(""String_Node_Str"").build();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(e.getMessage());
  }
  if (expression == null || !expression.validate(false).isValid()) {
    throw new IllegalArgumentException(""String_Node_Str"" + function);
  }
  if (expression.getVariableNames().size() != 1 || !expression.getVariableNames().contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + function);
  }
  this.expressions.put(attribute,expression);
  this.functions.put(attribute,function);
  return this;
}","/** 
 * Sets a scaling function
 * @param attribute
 * @param function
 */
public ARXFeatureScaling setScalingFunction(String attribute,String function){
  if (attribute == null) {
    return this;
  }
  if (function == null || function.equals(""String_Node_Str"")) {
    this.functions.remove(attribute);
    return this;
  }
  getExpression(function);
  this.functions.put(attribute,function);
  return this;
}",0.4971830985915493
107743,"@Override protected void doReset(){
  if (this.manager != null) {
    this.manager.stop();
  }
  performanceTableOverview.setRedraw(false);
  for (  final TableItem i : performanceTableOverview.getItems()) {
    i.dispose();
  }
  performanceTableOverview.setRedraw(true);
  performanceTableSensitivitySpecificity.setRedraw(false);
  for (  final TableItem i : performanceTableSensitivitySpecificity.getItems()) {
    i.dispose();
  }
  performanceTableSensitivitySpecificity.setRedraw(true);
  rocTable.setRedraw(false);
  for (  final TableItem i : rocTable.getItems()) {
    i.dispose();
  }
  rocTable.setRedraw(true);
  if (rocCombo != null && rocCombo.getItemCount() != 0)   rocCombo.select(0);
  if (rocCurves != null) {
    rocCurves.clear();
  }
  if (originalRocCurves != null) {
    originalRocCurves.clear();
  }
  if (zerorRocCurves != null) {
    zerorRocCurves.clear();
  }
  resetChart();
  setStatusEmpty();
}","@Override protected void doReset(){
  if (this.manager != null) {
    this.manager.stop();
  }
  performanceTableOverview.setRedraw(false);
  for (  final TableItem i : performanceTableOverview.getItems()) {
    i.dispose();
  }
  performanceTableOverview.setRedraw(true);
  performanceTableSensitivitySpecificity.setRedraw(false);
  for (  final TableItem i : performanceTableSensitivitySpecificity.getItems()) {
    i.dispose();
  }
  performanceTableSensitivitySpecificity.setRedraw(true);
  rocTable.setRedraw(false);
  for (  final TableItem i : rocTable.getItems()) {
    i.dispose();
  }
  rocTable.setRedraw(true);
  if (rocCombo != null && rocCombo.getItemCount() != 0) {
    rocCombo.removeAll();
  }
  if (rocCurves != null) {
    rocCurves.clear();
  }
  if (originalRocCurves != null) {
    originalRocCurves.clear();
  }
  if (zerorRocCurves != null) {
    zerorRocCurves.clear();
  }
  resetChart();
  setStatusEmpty();
}",0.9720730397422128
107744,"/** 
 * Builds overall performance view
 * @param parent
 * @return
 */
private Control createOverviewControl(Composite parent){
  this.performanceRoot=parent;
  this.performanceRoot.setLayout(new FillLayout());
  this.performanceSash=new SashForm(this.performanceRoot,SWT.VERTICAL);
  this.performanceTableOverview=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performanceTableOverview.setHeaderVisible(true);
  this.performanceTableOverview.setLinesVisible(true);
  this.performanceTableOverview.setMenu(new ClipboardHandlerTable(performanceTableOverview).getMenu());
  String[] columns=getColumnHeadersForPerformanceForOverallPerformanceTable();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(performanceTableOverview,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(performanceTableOverview,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(performanceTableOverview,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : performanceTableOverview.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableOverview);
  performanceTableOverview.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=performanceTableOverview.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=performanceTableOverview.getTopIndex();
      while (index < performanceTableOverview.getItemCount()) {
        boolean visible=false;
        TableItem item=performanceTableOverview.getItem(index);
        for (int i=0; i < performanceTableOverview.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            getModel().setSelectedAttribute(item.getText(0));
            List<String> classes=new ArrayList<>(originalRocCurves.get(item.getText(0)).keySet());
            Collections.sort(classes);
            getModel().setSelectedClassValue(classes.get(0));
            updateOverview(getModel().getSelectedAttribute());
            updateROCSelection(classes.get(0));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_ATTRIBUTE,getModel().getSelectedAttribute()));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_CLASS_VALUE,getModel().getSelectedClassValue()));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  this.performanceTableSensitivitySpecificity=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performanceTableSensitivitySpecificity.setHeaderVisible(true);
  this.performanceTableSensitivitySpecificity.setLinesVisible(true);
  this.performanceTableSensitivitySpecificity.setMenu(new ClipboardHandlerTable(performanceTableSensitivitySpecificity).getMenu());
  width=String.valueOf(Math.round(100d / ((double)4) * 100d) / 100d) + ""String_Node_Str"";
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : performanceTableSensitivitySpecificity.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableSensitivitySpecificity);
  this.performanceSash.setWeights(new int[]{2,2});
  return this.performanceRoot;
}","/** 
 * Builds overall performance view
 * @param parent
 * @return
 */
private Control createOverviewControl(Composite parent){
  this.performanceRoot=parent;
  this.performanceRoot.setLayout(new FillLayout());
  this.performanceSash=new SashForm(this.performanceRoot,SWT.VERTICAL);
  this.performanceTableOverview=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performanceTableOverview.setHeaderVisible(true);
  this.performanceTableOverview.setLinesVisible(true);
  this.performanceTableOverview.setMenu(new ClipboardHandlerTable(performanceTableOverview).getMenu());
  String[] columns=getColumnHeadersForPerformanceForOverallPerformanceTable();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(performanceTableOverview,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(performanceTableOverview,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(performanceTableOverview,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : performanceTableOverview.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableOverview);
  performanceTableOverview.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=performanceTableOverview.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=performanceTableOverview.getTopIndex();
      while (index < performanceTableOverview.getItemCount()) {
        boolean visible=false;
        TableItem item=performanceTableOverview.getItem(index);
        for (int i=0; i < performanceTableOverview.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            getModel().setSelectedAttribute(item.getText(0));
            List<String> classes=new ArrayList<>(originalRocCurves.get(item.getText(0)).keySet());
            Collections.sort(classes);
            getModel().setSelectedClassValue(classes.get(0));
            updateOverview(getModel().getSelectedAttribute());
            updateROCSelection(classes.get(0));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_ATTRIBUTE,getModel().getSelectedAttribute()));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  this.performanceTableSensitivitySpecificity=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performanceTableSensitivitySpecificity.setHeaderVisible(true);
  this.performanceTableSensitivitySpecificity.setLinesVisible(true);
  this.performanceTableSensitivitySpecificity.setMenu(new ClipboardHandlerTable(performanceTableSensitivitySpecificity).getMenu());
  width=String.valueOf(Math.round(100d / ((double)4) * 100d) / 100d) + ""String_Node_Str"";
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : performanceTableSensitivitySpecificity.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableSensitivitySpecificity);
  this.performanceSash.setWeights(new int[]{2,2});
  return this.performanceRoot;
}",0.9830207524137166
107745,"/** 
 * Updates the list.
 * @param result
 * @param filter
 */
private void update(final ARXResult result,final ModelNodeFilter filter){
  if (result == null || result.getLattice() == null)   return;
  if (filter == null)   return;
  getController().getResources().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (!table.isEnabled()) {
        SWTUtil.enable(table);
      }
      table.setRedraw(false);
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      list.clear();
      final ARXLattice l=getModel().getProcessStatistics().getNumberOfSteps() > 1 ? getModel().getProcessStatistics().getLattice() : result.getLattice();
      for (      final ARXNode[] level : l.getLevels()) {
        for (        final ARXNode node : level) {
          if (filter.isAllowed(result.getLattice(),node)) {
            list.add(node);
          }
        }
      }
      Collections.sort(list,new Comparator<ARXNode>(){
        @Override public int compare(        final ARXNode arg0,        final ARXNode arg1){
          return arg0.getHighestScore().compareTo(arg1.getHighestScore());
        }
      }
);
      if (list.size() > getModel().getMaxNodesInViewer()) {
        list.clear();
      }
      if (listener != null) {
        table.removeListener(SWT.SetData,listener);
      }
      listener=new Listener(){
        @Override public void handleEvent(        final Event event){
          final TableItem item=(TableItem)event.item;
          final int index=table.indexOf(item);
          createItem(item,index);
        }
      }
;
      table.addListener(SWT.SetData,listener);
      table.setItemCount(list.size());
      table.setRedraw(true);
    }
  }
);
}","/** 
 * Updates the list.
 * @param result
 * @param filter
 */
private void update(final ARXResult result,final ModelNodeFilter filter){
  if (result == null || result.getLattice() == null)   return;
  if (filter == null)   return;
  getController().getResources().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (!table.isEnabled()) {
        SWTUtil.enable(table);
      }
      table.setRedraw(false);
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      list.clear();
      final ARXLattice lattice=getModel().getProcessStatistics().getNumberOfSteps() > 1 ? getModel().getProcessStatistics().getLattice() : result.getLattice();
      for (      final ARXNode[] level : lattice.getLevels()) {
        for (        final ARXNode node : level) {
          if (filter.isAllowed(lattice,node)) {
            list.add(node);
          }
        }
      }
      Collections.sort(list,new Comparator<ARXNode>(){
        @Override public int compare(        final ARXNode arg0,        final ARXNode arg1){
          return arg0.getHighestScore().compareTo(arg1.getHighestScore());
        }
      }
);
      if (list.size() > getModel().getMaxNodesInViewer()) {
        list.clear();
      }
      if (listener != null) {
        table.removeListener(SWT.SetData,listener);
      }
      listener=new Listener(){
        @Override public void handleEvent(        final Event event){
          final TableItem item=(TableItem)event.item;
          final int index=table.indexOf(item);
          createItem(item,index);
        }
      }
;
      table.addListener(SWT.SetData,listener);
      table.setItemCount(list.size());
      table.setRedraw(true);
    }
  }
);
}",0.9890489913544668
107746,"@Override public void run(){
  if (!table.isEnabled()) {
    SWTUtil.enable(table);
  }
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  list.clear();
  final ARXLattice l=getModel().getProcessStatistics().getNumberOfSteps() > 1 ? getModel().getProcessStatistics().getLattice() : result.getLattice();
  for (  final ARXNode[] level : l.getLevels()) {
    for (    final ARXNode node : level) {
      if (filter.isAllowed(result.getLattice(),node)) {
        list.add(node);
      }
    }
  }
  Collections.sort(list,new Comparator<ARXNode>(){
    @Override public int compare(    final ARXNode arg0,    final ARXNode arg1){
      return arg0.getHighestScore().compareTo(arg1.getHighestScore());
    }
  }
);
  if (list.size() > getModel().getMaxNodesInViewer()) {
    list.clear();
  }
  if (listener != null) {
    table.removeListener(SWT.SetData,listener);
  }
  listener=new Listener(){
    @Override public void handleEvent(    final Event event){
      final TableItem item=(TableItem)event.item;
      final int index=table.indexOf(item);
      createItem(item,index);
    }
  }
;
  table.addListener(SWT.SetData,listener);
  table.setItemCount(list.size());
  table.setRedraw(true);
}","@Override public void run(){
  if (!table.isEnabled()) {
    SWTUtil.enable(table);
  }
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  list.clear();
  final ARXLattice lattice=getModel().getProcessStatistics().getNumberOfSteps() > 1 ? getModel().getProcessStatistics().getLattice() : result.getLattice();
  for (  final ARXNode[] level : lattice.getLevels()) {
    for (    final ARXNode node : level) {
      if (filter.isAllowed(lattice,node)) {
        list.add(node);
      }
    }
  }
  Collections.sort(list,new Comparator<ARXNode>(){
    @Override public int compare(    final ARXNode arg0,    final ARXNode arg1){
      return arg0.getHighestScore().compareTo(arg1.getHighestScore());
    }
  }
);
  if (list.size() > getModel().getMaxNodesInViewer()) {
    list.clear();
  }
  if (listener != null) {
    table.removeListener(SWT.SetData,listener);
  }
  listener=new Listener(){
    @Override public void handleEvent(    final Event event){
      final TableItem item=(TableItem)event.item;
      final int index=table.indexOf(item);
      createItem(item,index);
    }
  }
;
  table.addListener(SWT.SetData,listener);
  table.setItemCount(list.size());
  table.setRedraw(true);
}",0.984689766317486
107747,"@Override protected void eventFilterChanged(ARXResult result,ModelNodeFilter filter){
  if (getModel() != null && result != null) {
    updateFilter(result.getLattice(),filter);
  }
 else {
    reset();
  }
}","@Override protected void eventFilterChanged(ARXResult result,ModelNodeFilter filter){
  if (getModel() != null && result != null) {
    ARXLattice lattice=getModel().getProcessStatistics().getNumberOfSteps() > 1 ? getModel().getProcessStatistics().getLattice() : result.getLattice();
    updateFilter(lattice,filter);
  }
 else {
    reset();
  }
}",0.6762589928057554
107748,"/** 
 * Resets the filter to display everything
 * @param handle
 * @param definition
 */
public void reset(final DataHandle handle,final DataDefinition definition){
  if (handle == null || definition == null) {
    return;
  }
  List<String> attributes=new ArrayList<String>();
  attributes.addAll(definition.getQuasiIdentifiersWithGeneralization());
  Collections.sort(attributes,new Comparator<String>(){
    public int compare(    String arg0,    String arg1){
      return handle.getColumnIndexOf(arg0) - handle.getColumnIndexOf(arg1);
    }
  }
);
  int dimension=0;
  for (  String attribute : attributes) {
    int attributeMin=definition.getMinimumGeneralization(attribute);
    int attributeMax=definition.getMaximumGeneralization(attribute);
    for (int i=attributeMin; i <= attributeMax; i++) {
      this.allowGeneralization(dimension,i);
    }
    dimension++;
  }
  this.allowAllInformationLoss();
  this.allowAnonymous();
  this.allowNonAnonymous();
  this.allowUnknown();
}","/** 
 * Resets the filter to display everything
 * @param handle
 * @param definition
 */
public void reset(final DataHandle handle,final DataDefinition definition){
  if (handle == null || definition == null) {
    return;
  }
  List<String> attributes=new ArrayList<String>();
  attributes.addAll(definition.getQuasiIdentifiersWithGeneralization());
  attributes.addAll(definition.getQuasiIdentifiersWithClusteringAndMicroaggregation());
  Collections.sort(attributes,new Comparator<String>(){
    public int compare(    String arg0,    String arg1){
      return handle.getColumnIndexOf(arg0) - handle.getColumnIndexOf(arg1);
    }
  }
);
  int dimension=0;
  for (  String attribute : attributes) {
    int attributeMin=definition.getMinimumGeneralization(attribute);
    int attributeMax=definition.getMaximumGeneralization(attribute);
    for (int i=attributeMin; i <= attributeMax; i++) {
      this.allowGeneralization(dimension,i);
    }
    dimension++;
  }
  this.allowAllInformationLoss();
  this.allowAnonymous();
  this.allowNonAnonymous();
  this.allowUnknown();
}",0.957487922705314
107749,"/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  DataDefinition definition=model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition();
  DataHandle handle=model.getOutput() != null ? model.getOutput() : model.getInputConfig().getInput().getHandle();
  State state=new State(handle,definition,model.getClassificationModel().getFeatureScaling());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableEditor editor : editors) {
    editor.getEditor().dispose();
    editor.dispose();
  }
  editors.clear();
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  features.removeAll();
  classes.removeAll();
  TableItem itemAllFeatures=new TableItem(features,SWT.NONE);
  itemAllFeatures.setText(new String[]{""String_Node_Str"",LABEL_ALL,""String_Node_Str""});
  TableItem itemAllclasses=new TableItem(classes,SWT.NONE);
  itemAllclasses.setText(new String[]{""String_Node_Str"",LABEL_ALL});
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(new String[]{""String_Node_Str"",attribute});
    image=controller.getResources().getImage(type,state.responseVariables.contains(attribute));
    itemC.setImage(0,image);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    if (definition.getDataType(attribute) instanceof DataTypeWithRatioScale) {
      TableEditor editor=new TableEditor(features);
      editors.add(editor);
      final CCombo combo=new CCombo(features,SWT.NONE);
      final Color defaultColor=combo.getForeground();
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(LABEL_CATEGORICAL);
      combo.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent arg0){
          updateCombo(attribute,combo,defaultColor);
        }
      }
);
      combo.addSelectionListener(new DelayedChangeListener(DELAY){
        public void delayedEvent(){
          updateFunction(attribute,combo);
        }
      }
);
      combo.addKeyListener(new KeyAdapter(){
        @Override public void keyReleased(        KeyEvent arg0){
          updateCombo(attribute,combo,defaultColor);
        }
      }
);
      combo.addKeyListener(new DelayedChangeListener(DELAY){
        public void delayedEvent(){
          updateFunction(attribute,combo);
        }
      }
);
      editor.grabHorizontal=true;
      editor.setEditor(combo,itemF,2);
      String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
      if (function == null || function.equals(""String_Node_Str"")) {
        function=LABEL_CATEGORICAL;
      }
      combo.setText(function);
    }
 else {
      itemF.setText(2,LABEL_CATEGORICAL);
    }
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}","/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  DataDefinition definition=model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition();
  DataHandle handle=model.getOutput() != null ? model.getOutput() : model.getInputConfig().getInput().getHandle();
  State state=new State(handle,definition,model.getClassificationModel().getFeatureScaling());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableEditor editor : editors) {
    editor.getEditor().dispose();
    editor.dispose();
  }
  editors.clear();
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  features.removeAll();
  classes.removeAll();
  TableItem itemAllFeatures=new TableItem(features,SWT.NONE);
  itemAllFeatures.setText(new String[]{""String_Node_Str"",LABEL_ALL,""String_Node_Str""});
  TableItem itemAllclasses=new TableItem(classes,SWT.NONE);
  itemAllclasses.setText(new String[]{""String_Node_Str"",LABEL_ALL});
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(new String[]{""String_Node_Str"",attribute});
    image=controller.getResources().getImage(type,state.responseVariables.contains(attribute));
    itemC.setImage(0,image);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    if (definition.getDataType(attribute) instanceof DataTypeWithRatioScale) {
      TableEditor editor=new TableEditor(features);
      editors.add(editor);
      final CCombo combo=new CCombo(features,SWT.NONE);
      final Color defaultColor=combo.getForeground();
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(LABEL_CATEGORICAL);
      combo.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent arg0){
          updateCombo(attribute,combo,defaultColor);
        }
      }
);
      combo.addSelectionListener(new DelayedChangeListener(DELAY){
        public void delayedEvent(){
          updateFunction(attribute,combo);
        }
      }
);
      combo.addKeyListener(new KeyAdapter(){
        @Override public void keyReleased(        KeyEvent arg0){
          updateCombo(attribute,combo,defaultColor);
          updateFunction(attribute,combo);
        }
      }
);
      combo.addKeyListener(new DelayedChangeListener(DELAY){
        public void delayedEvent(){
          updateFunction(attribute,combo);
        }
      }
);
      editor.grabHorizontal=true;
      editor.setEditor(combo,itemF,2);
      String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
      if (function == null || function.equals(""String_Node_Str"")) {
        function=LABEL_CATEGORICAL;
      }
      combo.setText(function);
    }
 else {
      itemF.setText(2,LABEL_CATEGORICAL);
    }
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}",0.9942025077524606
107750,"@Override public void keyReleased(KeyEvent arg0){
  updateCombo(attribute,combo,defaultColor);
}","@Override public void keyReleased(KeyEvent arg0){
  updateCombo(attribute,combo,defaultColor);
  updateFunction(attribute,combo);
}",0.8458149779735683
107751,"/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 */
public static void main(String[] args) throws ParseException, IOException {
  String[] features=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String clazz=""String_Node_Str"";
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setAttributeType(""String_Node_Str"",AttributeType.INSENSITIVE_ATTRIBUTE);
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setSuppressionLimit(1d);
  config.setQualityModel(Metric.createClassificationMetric());
  ARXResult result=anonymizer.anonymize(data,config);
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXClassificationConfiguration.createLogisticRegression()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXClassificationConfiguration.createNaiveBayes()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXClassificationConfiguration.createRandomForest()));
}","/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 */
public static void main(String[] args) throws ParseException, IOException {
  String[] features=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String clazz=""String_Node_Str"";
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setAttributeType(""String_Node_Str"",AttributeType.INSENSITIVE_ATTRIBUTE);
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  data.getDefinition().setResponseVariable(""String_Node_Str"",true);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setSuppressionLimit(1d);
  config.setQualityModel(Metric.createClassificationMetric());
  ARXResult result=anonymizer.anonymize(data,config);
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXClassificationConfiguration.createLogisticRegression()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXClassificationConfiguration.createNaiveBayes()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXClassificationConfiguration.createRandomForest()));
}",0.9720052083333334
107752,"/** 
 * Creates a new instance
 * @param specification
 * @param config
 */
public MultiClassRandomForest(ClassificationDataSpecification specification,ClassificationConfigurationRandomForest config){
  this.config=config;
  this.specification=specification;
}","/** 
 * Creates a new instance
 * @param specification
 * @param config
 */
public MultiClassRandomForest(ClassificationDataSpecification specification,ClassificationConfigurationRandomForest config){
  this.config=config;
  this.specification=specification;
  if (config.getNumberOfVariablesToSplit() == ClassificationConfigurationRandomForest.DEFAULT_NUMBER_OF_VARIABLES_TO_SPLIT) {
    this.numberOfVariablesToSplit=(int)Math.floor(Math.sqrt(this.specification.featureIndices.length));
  }
 else {
    this.numberOfVariablesToSplit=config.getNumberOfVariablesToSplit();
  }
}",0.6205250596658711
107753,"@Override public void close(){
  SplitRule rule=null;
switch (config.getSplitRule()) {
case CLASSIFICATION_ERROR:
    rule=SplitRule.CLASSIFICATION_ERROR;
  break;
case ENTROPY:
rule=SplitRule.ENTROPY;
break;
case GINI:
rule=SplitRule.GINI;
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
if (config.getNumberOfVariablesToSplit() == ClassificationConfigurationRandomForest.DEFAULT_NUMBER_OF_VARIABLES_TO_SPLIT) {
config.setNumberOfVariablesToSplit((int)Math.floor(Math.sqrt(features.size())));
}
rm=new RandomForest((Attribute[])null,features.toArray(new double[features.size()][]),classes.toArray(),config.getNumberOfTrees(),config.getMaximumNumberOfLeafNodes(),config.getMinimumSizeOfLeafNodes(),config.getNumberOfVariablesToSplit(),config.getSubsample(),rule);
features.clear();
classes.clear();
features=new ArrayList<double[]>();
classes=new IntArrayList();
}","@Override public void close(){
  SplitRule rule=null;
switch (config.getSplitRule()) {
case CLASSIFICATION_ERROR:
    rule=SplitRule.CLASSIFICATION_ERROR;
  break;
case ENTROPY:
rule=SplitRule.ENTROPY;
break;
case GINI:
rule=SplitRule.GINI;
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
rm=new RandomForest((Attribute[])null,features.toArray(new double[features.size()][]),classes.toArray(),config.getNumberOfTrees(),config.getMaximumNumberOfLeafNodes(),config.getMinimumSizeOfLeafNodes(),this.numberOfVariablesToSplit,config.getSubsample(),rule);
features.clear();
classes.clear();
features=new ArrayList<double[]>();
classes=new IntArrayList();
}",0.8551282051282051
107754,"/** 
 * @return the highest risk
 */
public double getHighestRisk(){
  return highestRisk;
}","/** 
 * Returns the threshold set by the user. Please consider the effective threshold,  i.e. the threshold that is actually being used by the software.
 * @return the highest risk
 */
public double getHighestRisk(){
  return highestRisk;
}",0.5542168674698795
107755,"/** 
 * Creates a new instance of a relaxed variant of this criterion with average risk,  highest risk and the fraction of records with a risk exceeding the highest risk
 * @param averageRisk
 * @param highestRisk Please note: due to rounding issues, this risk may be exceeded by up to 1%
 * @param recordsAtRisk
 */
public AverageReidentificationRisk(double averageRisk,double highestRisk,double recordsAtRisk){
  super(true,true,averageRisk);
  if (highestRisk <= 0d || highestRisk > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"" + highestRisk);
  }
  if (recordsAtRisk < 0d || highestRisk > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"" + recordsAtRisk);
  }
  this.highestRisk=highestRisk;
  this.recordsAtRisk=recordsAtRisk;
  this.smallestSize=getSizeThreshold(highestRisk);
}","/** 
 * Creates a new instance of a relaxed variant of this model with average risk,  highest risk and the fraction of records with a risk exceeding the highest risk. Note: Due to rounding issues, the highest risk may be exceeded by up to 1%. To see the threshold that is actually being used, invoke <code>getEffectiveHighestRisk()</code>
 * @param averageRisk
 * @param highestRisk 
 * @param recordsAtRisk
 */
public AverageReidentificationRisk(double averageRisk,double highestRisk,double recordsAtRisk){
  super(true,true,averageRisk);
  if (highestRisk <= 0d || highestRisk > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"" + highestRisk);
  }
  if (recordsAtRisk < 0d || highestRisk > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"" + recordsAtRisk);
  }
  this.highestRisk=highestRisk;
  this.recordsAtRisk=recordsAtRisk;
  this.smallestSize=ParameterTranslation.getSizeThreshold(highestRisk);
}",0.8386727688787186
107756,"@Override public String toString(){
  if (highestRisk == null) {
    return ""String_Node_Str"" + getRiskThreshold() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + getRiskThreshold() + ""String_Node_Str""+ highestRisk+ ""String_Node_Str""+ recordsAtRisk+ ""String_Node_Str"";
  }
}","@Override public String toString(){
  if (highestRisk == null) {
    return ""String_Node_Str"" + getRiskThreshold() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + getRiskThreshold() + ""String_Node_Str""+ getEffectiveHighestRisk()+ ""String_Node_Str""+ highestRisk+ ""String_Node_Str""+ recordsAtRisk+ ""String_Node_Str"";
  }
}",0.8210862619808307
107757,"@Override public ElementData render(){
  ElementData result=new ElementData(""String_Node_Str"");
  result.addProperty(""String_Node_Str"",this.getRiskThreshold());
  if (highestRisk != null) {
    result.addProperty(""String_Node_Str"",highestRisk);
  }
  if (recordsAtRisk != null) {
    result.addProperty(""String_Node_Str"",recordsAtRisk);
  }
  return result;
}","@Override public ElementData render(){
  ElementData result=new ElementData(""String_Node_Str"");
  result.addProperty(""String_Node_Str"",this.getRiskThreshold());
  if (highestRisk != null) {
    result.addProperty(""String_Node_Str"",highestRisk);
    result.addProperty(""String_Node_Str"",getEffectiveHighestRisk());
  }
  if (recordsAtRisk != null) {
    result.addProperty(""String_Node_Str"",recordsAtRisk);
  }
  return result;
}",0.9123252858958067
107758,"/** 
 * Returns a minimal class size for the given risk threshold TODO: There are similar issues in multiple privacy models, e.g. in the game-theoretic model TODO: This should be fixed once and for all
 * @param threshold
 * @return
 */
private Integer getSizeThreshold(double riskThreshold){
  double size=1d / riskThreshold;
  double floor=Math.floor(size);
  if ((1d / floor) - (1d / size) >= 0.01d * riskThreshold) {
    floor+=1d;
  }
  return (int)floor;
}","/** 
 * Returns a minimal class size for the given risk threshold
 * @param threshold
 * @return
 */
public static int getSizeThreshold(double riskThreshold){
  if (riskThreshold < 0d || riskThreshold > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (riskThreshold == 0d) {
    return Integer.MAX_VALUE;
  }
  double size=1d / riskThreshold;
  double floor=Math.floor(size);
  if ((1d / floor) - (1d / size) >= RELATIVE_THRESHOLD_PRECISION * riskThreshold) {
    floor+=1d;
  }
  return (int)floor;
}",0.5540950455005056
107759,"/** 
 * Returns a risk summary, using wildcard matching
 * @param threshold Acceptable highest probability of re-identification for a single record
 * @param wildcard String to interpret as a wildcard
 * @return
 */
public RiskModelSampleWildcard getSampleBasedRiskSummaryWildcard(double threshold,String wildcard){
  progress.value=0;
  return new RiskModelSampleWildcard(handle,identifiers,threshold,wildcard,stop,progress);
}","/** 
 * Returns a risk summary, using wildcard matching
 * @param threshold Acceptable highest probability of re-identification for a single record. Please note that thisthreshold may be exceeded by up to 1% due to rounding issues.
 * @param wildcard String to interpret as a wildcard
 * @return
 */
public RiskModelSampleWildcard getSampleBasedRiskSummaryWildcard(double threshold,String wildcard){
  progress.value=0;
  return new RiskModelSampleWildcard(handle,identifiers,threshold,wildcard,stop,progress);
}",0.9106382978723404
107760,"/** 
 * Returns a risk summary
 * @param threshold Acceptable highest probability of re-identification for a single record
 * @param suppressed
 * @return
 */
public RiskModelSampleSummary getSampleBasedRiskSummary(double threshold,String suppressed){
  progress.value=0;
  return new RiskModelSampleSummary(handle,identifiers,threshold,suppressed,stop,progress);
}","/** 
 * Returns a risk summary
 * @param threshold Acceptable highest probability of re-identification for a single record. Please note that thisthreshold may be exceeded by up to 1% due to rounding issues.
 * @param suppressed
 * @return
 */
public RiskModelSampleSummary getSampleBasedRiskSummary(double threshold,String suppressed){
  progress.value=0;
  return new RiskModelSampleSummary(handle,identifiers,threshold,suppressed,stop,progress);
}",0.8968058968058968
107761,"/** 
 * Returns a risk summary, using wildcard matching
 * @param threshold Acceptable highest probability of re-identification for a single record
 * @param wildcard String to interpret as a wildcard
 * @return
 * @throws InterruptedException 
 */
public RiskModelSampleWildcard getSampleBasedRiskSummaryWildcard(double threshold,String wildcard) throws InterruptedException {
  try {
    return parent.getSampleBasedRiskSummaryWildcard(threshold,wildcard);
  }
 catch (  ComputationInterruptedException e) {
    throw new InterruptedException(""String_Node_Str"");
  }
}","/** 
 * Returns a risk summary, using wildcard matching
 * @param threshold Acceptable highest probability of re-identification for a single record. Please note that thisthreshold may be exceeded by up to 1% due to rounding issues.
 * @param wildcard String to interpret as a wildcard
 * @return
 * @throws InterruptedException 
 */
public RiskModelSampleWildcard getSampleBasedRiskSummaryWildcard(double threshold,String wildcard) throws InterruptedException {
  try {
    return parent.getSampleBasedRiskSummaryWildcard(threshold,wildcard);
  }
 catch (  ComputationInterruptedException e) {
    throw new InterruptedException(""String_Node_Str"");
  }
}",0.931372549019608
107762,"/** 
 * Returns a risk summary
 * @param threshold Acceptable highest probability of re-identification for a single record
 * @param suppressed
 * @return
 * @throws InterruptedException 
 */
public RiskModelSampleSummary getSampleBasedRiskSummary(double threshold,String suppressed) throws InterruptedException {
  try {
    return parent.getSampleBasedRiskSummary(threshold,suppressed);
  }
 catch (  ComputationInterruptedException e) {
    throw new InterruptedException(""String_Node_Str"");
  }
}","/** 
 * Returns a risk summary
 * @param threshold Acceptable highest probability of re-identification for a single record. Please note that thisthreshold may be exceeded by up to 1% due to rounding issues.
 * @param suppressed
 * @return
 * @throws InterruptedException 
 */
public RiskModelSampleSummary getSampleBasedRiskSummary(double threshold,String suppressed) throws InterruptedException {
  try {
    return parent.getSampleBasedRiskSummary(threshold,suppressed);
  }
 catch (  ComputationInterruptedException e) {
    throw new InterruptedException(""String_Node_Str"");
  }
}",0.922509225092251
107763,"@Override protected boolean isFulfilled(HashGroupifyDistribution distribution){
  boolean result=1.0d / (double)distribution.getAverageClassSize() <= getRiskThreshold();
  if (highestRisk == null || !result) {
    return result;
  }
  double fraction=0d;
  for (int size=1; size <= smallestSize; size++) {
    fraction+=distribution.getFractionOfRecordsInClassesOfSize(size);
  }
  return result && (fraction <= recordsAtRisk);
}","@Override protected boolean isFulfilled(HashGroupifyDistribution distribution){
  boolean result=1.0d / (double)distribution.getAverageClassSize() <= getRiskThreshold();
  if (highestRisk == null || !result) {
    return result;
  }
  double fraction=0d;
  for (int size=1; size < smallestSize; size++) {
    fraction+=distribution.getFractionOfRecordsInClassesOfSize(size);
  }
  return result && (fraction <= recordsAtRisk);
}",0.998833138856476
107764,"/** 
 * Returns a minimal class size for the given risk threshold TODO: There are similar issues in multiple privacy models, e.g. in the game-theoretic model TODO: This should be fixed once and for all
 * @param threshold
 * @return
 */
private Integer getSizeThreshold(double riskThreshold){
  double size=1d / highestRisk;
  double floor=Math.floor(size);
  if ((1d / floor) - (1d / size) >= 0.01d * highestRisk) {
    floor+=1d;
  }
  return (int)floor;
}","/** 
 * Returns a minimal class size for the given risk threshold TODO: There are similar issues in multiple privacy models, e.g. in the game-theoretic model TODO: This should be fixed once and for all
 * @param threshold
 * @return
 */
private Integer getSizeThreshold(double riskThreshold){
  double size=1d / riskThreshold;
  double floor=Math.floor(size);
  if ((1d / floor) - (1d / size) >= 0.01d * riskThreshold) {
    floor+=1d;
  }
  return (int)floor;
}",0.9608695652173912
107765,"/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param config - The configuration
 * @param scaling 
 * @param interrupt - The interrupt flag
 * @param progress 
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,ARXClassificationConfiguration<?> config,ARXFeatureScaling scaling,WrappedBoolean interrupt,WrappedInteger progress) throws ParseException {
  this.interrupt=interrupt;
  this.progress=progress;
  this.numSamples=getNumSamples(inputHandle.getNumRows(),config);
  if (!config.isDeterministic()) {
    this.random=new Random();
  }
 else {
    this.random=new Random(config.getSeed());
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,scaling,features,clazz,interrupt);
  this.numClasses=specification.classMap.size();
  int k=numSamples > config.getNumFolds() ? config.getNumFolds() : numSamples;
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),numSamples,k);
  int classifications=0;
  double total=100d / ((double)numSamples * (double)folds.size());
  double done=0d;
  double[] inputConfidences=new double[numSamples * (1 + numClasses)];
  double[] outputConfidences=(inputHandle == outputHandle) ? null : new double[numSamples * (1 + numClasses)];
  double[] zerorConfidences=new double[numSamples * (1 + numClasses)];
  int confidencesIndex=0;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputClassifier=getClassifier(specification,config);
    ClassificationMethod inputZeroR=new MultiClassZeroR(specification);
    ClassificationMethod outputClassifier=null;
    if (inputHandle != outputHandle) {
      outputClassifier=getClassifier(specification,config);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputClassifier.train(inputHandle,outputHandle,index);
            inputZeroR.train(inputHandle,outputHandle,index);
            if (outputClassifier != null && !outputHandle.isOutlier(index)) {
              outputClassifier.train(outputHandle,outputHandle,index);
            }
            trained=true;
            this.progress.value=(int)((++done) * total);
          }
        }
      }
      inputClassifier.close();
      inputZeroR.close();
      if (outputClassifier != null) {
        outputClassifier.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInput=inputClassifier.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZeroR.classify(inputHandle,index);
          ClassificationResult resultOutput=outputClassifier == null ? null : outputClassifier.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex,true);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          double[] confidences=resultInputZR.confidences();
          zerorConfidences[confidencesIndex]=index;
          System.arraycopy(confidences,0,zerorConfidences,confidencesIndex + 1,confidences.length);
          boolean correct=resultInput.correct(actualValue);
          this.originalAverageError+=resultInput.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          confidences=resultInput.confidences();
          inputConfidences[confidencesIndex]=index;
          System.arraycopy(confidences,0,inputConfidences,confidencesIndex + 1,confidences.length);
          if (resultOutput != null) {
            correct=resultOutput.correct(actualValue);
            this.averageError+=resultOutput.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            confidences=resultOutput.confidences();
            outputConfidences[confidencesIndex]=index;
            System.arraycopy(confidences,0,outputConfidences,confidencesIndex + 1,confidences.length);
          }
          confidencesIndex+=numClasses + 1;
        }
        this.progress.value=(int)((++done) * total);
      }
    }
 catch (    Exception e) {
      if (e instanceof ComputationInterruptedException) {
        throw e;
      }
 else {
        throw new UnexpectedErrorException(e);
      }
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  for (  String attr : specification.classMap.keySet()) {
    zerorROC.put(attr,new ROCCurve(attr,zerorConfidences,numClasses,specification.classMap.get(attr),outputHandle,specification.classIndex));
  }
  for (  String attr : specification.classMap.keySet()) {
    originalROC.put(attr,new ROCCurve(attr,inputConfidences,numClasses,specification.classMap.get(attr),outputHandle,specification.classIndex));
  }
  if (inputHandle != outputHandle) {
    for (    String attr : specification.classMap.keySet()) {
      ROC.put(attr,new ROCCurve(attr,outputConfidences,numClasses,specification.classMap.get(attr),outputHandle,specification.classIndex));
    }
  }
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
  }
  this.numMeasurements=classifications;
}","/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param config - The configuration
 * @param scaling 
 * @param interrupt - The interrupt flag
 * @param progress 
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,ARXClassificationConfiguration<?> config,ARXFeatureScaling scaling,WrappedBoolean interrupt,WrappedInteger progress) throws ParseException {
  this.interrupt=interrupt;
  this.progress=progress;
  this.numSamples=getNumSamples(inputHandle.getNumRows(),config);
  if (!config.isDeterministic()) {
    this.random=new Random();
  }
 else {
    this.random=new Random(config.getSeed());
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,scaling,features,clazz,interrupt);
  this.numClasses=specification.classMap.size();
  int k=numSamples > config.getNumFolds() ? config.getNumFolds() : numSamples;
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),numSamples,k);
  int classifications=0;
  double total=100d / ((double)numSamples * (double)folds.size());
  double done=0d;
  double[] inputConfidences=new double[numSamples * (1 + numClasses)];
  double[] outputConfidences=(inputHandle == outputHandle) ? null : new double[numSamples * (1 + numClasses)];
  double[] zerorConfidences=new double[numSamples * (1 + numClasses)];
  int confidencesIndex=0;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputClassifier=getClassifier(specification,config);
    ClassificationMethod inputZeroR=new MultiClassZeroR(specification);
    ClassificationMethod outputClassifier=null;
    if (inputHandle != outputHandle) {
      outputClassifier=getClassifier(specification,config);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputClassifier.train(inputHandle,outputHandle,index);
            inputZeroR.train(inputHandle,outputHandle,index);
            if (outputClassifier != null && !outputHandle.isOutlier(index)) {
              outputClassifier.train(outputHandle,outputHandle,index);
              trained=true;
            }
            this.progress.value=(int)((++done) * total);
          }
        }
      }
      inputClassifier.close();
      inputZeroR.close();
      if (outputClassifier != null && trained) {
        outputClassifier.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        ClassificationResult resultInput=inputClassifier.classify(inputHandle,index);
        ClassificationResult resultInputZR=inputZeroR.classify(inputHandle,index);
        ClassificationResult resultOutput=outputClassifier == null || !trained ? null : outputClassifier.classify(outputHandle,index);
        classifications++;
        String actualValue=outputHandle.getValue(index,specification.classIndex,true);
        this.zeroRAverageError+=resultInputZR.error(actualValue);
        this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
        double[] confidences=resultInputZR.confidences();
        zerorConfidences[confidencesIndex]=index;
        System.arraycopy(confidences,0,zerorConfidences,confidencesIndex + 1,confidences.length);
        boolean correct=resultInput.correct(actualValue);
        this.originalAverageError+=resultInput.error(actualValue);
        this.originalAccuracy+=correct ? 1d : 0d;
        confidences=resultInput.confidences();
        inputConfidences[confidencesIndex]=index;
        System.arraycopy(confidences,0,inputConfidences,confidencesIndex + 1,confidences.length);
        if (resultOutput != null) {
          correct=resultOutput.correct(actualValue);
          this.averageError+=resultOutput.error(actualValue);
          this.accuracy+=correct ? 1d : 0d;
          confidences=resultOutput.confidences();
          outputConfidences[confidencesIndex]=index;
          System.arraycopy(confidences,0,outputConfidences,confidencesIndex + 1,confidences.length);
        }
        confidencesIndex+=numClasses + 1;
        this.progress.value=(int)((++done) * total);
      }
    }
 catch (    Exception e) {
      if (e instanceof ComputationInterruptedException) {
        throw e;
      }
 else {
        throw new UnexpectedErrorException(e);
      }
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  for (  String attr : specification.classMap.keySet()) {
    zerorROC.put(attr,new ROCCurve(attr,zerorConfidences,numClasses,specification.classMap.get(attr),outputHandle,specification.classIndex));
  }
  for (  String attr : specification.classMap.keySet()) {
    originalROC.put(attr,new ROCCurve(attr,inputConfidences,numClasses,specification.classMap.get(attr),outputHandle,specification.classIndex));
  }
  if (inputHandle != outputHandle) {
    for (    String attr : specification.classMap.keySet()) {
      ROC.put(attr,new ROCCurve(attr,outputConfidences,numClasses,specification.classMap.get(attr),outputHandle,specification.classIndex));
    }
  }
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
  }
  this.numMeasurements=classifications;
}",0.9865160964099108
107766,"@Override public ClassificationResult classify(DataHandleInternal handle,int row){
  if (result == null) {
    result=getIndexWithMostCounts();
  }
  return new MultiClassZeroRClassificationResult(result,counts,specification.classMap);
}","@Override public ClassificationResult classify(DataHandleInternal handle,int row){
  return result;
}",0.5857988165680473
107767,"@Override public void close(){
}","@Override public void close(){
  result=new MultiClassZeroRClassificationResult(counts,specification.classMap);
  counts.clear();
}",0.3926380368098159
107768,"@Override public double[] confidences(){
  double[] result=new double[counts.size()];
  int index=0;
  for (  Integer count : counts.values()) {
    result[index]=count;
    index++;
  }
  return result;
}","@Override public double[] confidences(){
  return confidences;
}",0.4089219330855018
107769,"/** 
 * Creates a new instance
 * @param result
 * @param map
 */
MultiClassZeroRClassificationResult(Integer result,Map<Integer,Integer> counts,Map<String,Integer> map){
  this.map=map;
  this.result=result;
  this.counts=counts;
}","/** 
 * Creates a new instance
 * @param result
 * @param map
 */
MultiClassZeroRClassificationResult(Map<Integer,Integer> counts,Map<String,Integer> map){
  this.map=map;
  this.result=getIndexWithMostCounts(counts);
  this.confidences=getConfidences(counts);
}",0.8178137651821862
107770,"/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 * @throws NoSuchAlgorithmException 
 * @throws RollbackRequiredException 
 */
public static void main(String[] args) throws ParseException, IOException, NoSuchAlgorithmException, RollbackRequiredException {
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  data.getDefinition().setMicroAggregationFunction(""String_Node_Str"",MicroAggregationFunction.createArithmeticMean());
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setSuppressionLimit(1d);
  config.setQualityModel(Metric.createLossMetric(0d));
  ARXResult result=anonymizer.anonymize(data,config);
  DataHandle output=result.getOutput();
  result.optimizeIterativeFast(output,0.01d);
  System.out.println(""String_Node_Str"");
  StatisticsQuality utility=data.getHandle().getStatistics().getQualityStatistics();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + utility.getAmbiguity().getValue());
  System.out.println(""String_Node_Str"" + utility.getAverageClassSize().getValue());
  System.out.println(""String_Node_Str"" + utility.getDiscernibility().getValue());
  System.out.println(""String_Node_Str"" + utility.getGranularity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getAttributeLevelSquaredError().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getKullbackLeiblerDivergence().getValue());
  System.out.println(""String_Node_Str"" + utility.getNonUniformEntropy().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getGeneralizationIntensity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getRecordLevelSquaredError().getValue());
  utility=output.getStatistics().getQualityStatistics();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + utility.getAmbiguity().getValue());
  System.out.println(""String_Node_Str"" + utility.getAverageClassSize().getValue());
  System.out.println(""String_Node_Str"" + utility.getDiscernibility().getValue());
  System.out.println(""String_Node_Str"" + utility.getGranularity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getAttributeLevelSquaredError().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getKullbackLeiblerDivergence().getValue());
  System.out.println(""String_Node_Str"" + utility.getNonUniformEntropy().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getGeneralizationIntensity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getRecordLevelSquaredError().getValue());
}","/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 * @throws NoSuchAlgorithmException 
 * @throws RollbackRequiredException 
 */
public static void main(String[] args) throws ParseException, IOException, NoSuchAlgorithmException, RollbackRequiredException {
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  data.getDefinition().setMicroAggregationFunction(""String_Node_Str"",MicroAggregationFunction.createArithmeticMean());
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setSuppressionLimit(1d);
  config.setQualityModel(Metric.createLossMetric(0d));
  ARXResult result=anonymizer.anonymize(data,config);
  DataHandle output=result.getOutput();
  result.optimizeIterativeFast(output,0.01d);
  System.out.println(""String_Node_Str"");
  StatisticsQuality utility=data.getHandle().getStatistics().getQualityStatistics();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + utility.getAmbiguity().getValue());
  System.out.println(""String_Node_Str"" + utility.getAverageClassSize().getValue());
  System.out.println(""String_Node_Str"" + utility.getDiscernibility().getValue());
  System.out.println(""String_Node_Str"" + utility.getGranularity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getAttributeLevelSquaredError().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getNonUniformEntropy().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getGeneralizationIntensity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getRecordLevelSquaredError().getValue());
  utility=output.getStatistics().getQualityStatistics();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + utility.getAmbiguity().getValue());
  System.out.println(""String_Node_Str"" + utility.getAverageClassSize().getValue());
  System.out.println(""String_Node_Str"" + utility.getDiscernibility().getValue());
  System.out.println(""String_Node_Str"" + utility.getGranularity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getAttributeLevelSquaredError().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getNonUniformEntropy().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getGeneralizationIntensity().getArithmeticMean(false));
  System.out.println(""String_Node_Str"" + utility.getRecordLevelSquaredError().getValue());
}",0.8852161278605158
107771,"/** 
 * Returns the lowest score. Lower is better.
 * @return
 */
public InformationLoss<?> getLowestScore(){
  return this.minimumInformationLoss;
}","/** 
 * Returns the lowest score. Lower is better.
 * @return
 */
public InformationLoss<?> getLowestScore(){
  if (this.minimumInformationLoss == null) {
    this.estimateInformationLoss();
  }
  return this.minimumInformationLoss;
}",0.6005221932114883
107772,"/** 
 * Returns the highest score. Lower is better.
 * @return
 */
public InformationLoss<?> getHighestScore(){
  return this.maximumInformationLoss;
}","/** 
 * Returns the highest score. Lower is better.
 * @return
 */
public InformationLoss<?> getHighestScore(){
  if (this.maximumInformationLoss == null) {
    this.estimateInformationLoss();
  }
  return this.maximumInformationLoss;
}",0.7441860465116279
107773,"/** 
 * Update the performance overview on selection.
 */
private void updateOverviewSelection(String attribute){
  int index=0;
  for (  TableItem item : performancePerTargetTable.getItems()) {
    if (item.getText(0).equals(attribute)) {
      performancePerTargetTable.select(index);
      updateOverview(attribute);
      break;
    }
    index++;
  }
}","/** 
 * Update the performance overview on selection.
 */
private void updateOverviewSelection(String attribute){
  int index=0;
  for (  TableItem item : performanceTableOverview.getItems()) {
    if (item.getText(0).equals(attribute)) {
      performanceTableOverview.select(index);
      updateOverview(attribute);
      break;
    }
    index++;
  }
}",0.7584269662921348
107774,"@Override protected void doReset(){
  if (this.manager != null) {
    this.manager.stop();
  }
  performancePerTargetTable.setRedraw(false);
  for (  final TableItem i : performancePerTargetTable.getItems()) {
    i.dispose();
  }
  performancePerTargetTable.setRedraw(true);
  performancePerClassTable.setRedraw(false);
  for (  final TableItem i : performancePerClassTable.getItems()) {
    i.dispose();
  }
  performancePerClassTable.setRedraw(true);
  rocTable.setRedraw(false);
  for (  final TableItem i : rocTable.getItems()) {
    i.dispose();
  }
  rocTable.setRedraw(true);
  if (rocCombo != null && rocCombo.getItemCount() != 0)   rocCombo.select(0);
  if (rocCurves != null) {
    rocCurves.clear();
  }
  if (originalRocCurves != null) {
    originalRocCurves.clear();
  }
  if (zerorRocCurves != null) {
    zerorRocCurves.clear();
  }
  resetChart();
  setStatusEmpty();
}","@Override protected void doReset(){
  if (this.manager != null) {
    this.manager.stop();
  }
  performanceTableOverview.setRedraw(false);
  for (  final TableItem i : performanceTableOverview.getItems()) {
    i.dispose();
  }
  performanceTableOverview.setRedraw(true);
  performanceTableSensitivitySpecificity.setRedraw(false);
  for (  final TableItem i : performanceTableSensitivitySpecificity.getItems()) {
    i.dispose();
  }
  performanceTableSensitivitySpecificity.setRedraw(true);
  rocTable.setRedraw(false);
  for (  final TableItem i : rocTable.getItems()) {
    i.dispose();
  }
  rocTable.setRedraw(true);
  if (rocCombo != null && rocCombo.getItemCount() != 0)   rocCombo.select(0);
  if (rocCurves != null) {
    rocCurves.clear();
  }
  if (originalRocCurves != null) {
    originalRocCurves.clear();
  }
  if (zerorRocCurves != null) {
    zerorRocCurves.clear();
  }
  resetChart();
  setStatusEmpty();
}",0.7280750137892995
107775,"/** 
 * Creates control for ROC curves
 * @param parent
 * @return
 */
private Control createROCControl(Composite parent){
  this.rocRoot=parent;
  this.rocRoot.setLayout(new FillLayout());
  this.rocSash=new SashForm(this.rocRoot,SWT.VERTICAL);
  final Composite composite=new Composite(this.rocSash,SWT.NONE);
  composite.setLayout(SWTUtil.createGridLayout(1));
  final Composite composite2=new Composite(composite,SWT.NONE);
  composite2.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  composite2.setLayout(SWTUtil.createGridLayout(2,false));
  final Label lblTargetVariable=new Label(composite2,SWT.PUSH);
  lblTargetVariable.setText(Resources.getMessage(""String_Node_Str""));
  this.rocCombo=new Combo(composite2,SWT.READ_ONLY);
  this.rocCombo.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  this.rocCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      if (rocCombo.getSelectionIndex() >= 0) {
        String selectedTarget=rocCombo.getItem(rocCombo.getSelectionIndex());
        getModel().setSelectedAttribute(selectedTarget);
        List<String> classes=new ArrayList<>(originalRocCurves.get(selectedTarget).keySet());
        Collections.sort(classes);
        getModel().setSelectedClassValue(classes.get(0));
        updateOverviewSelection(selectedTarget);
        updateROCSelection(classes.get(0));
        getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_ATTRIBUTE,selectedTarget));
      }
    }
  }
);
  this.rocTable=SWTUtil.createTableDynamic(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.rocTable.setHeaderVisible(true);
  this.rocTable.setLinesVisible(true);
  this.rocTable.setMenu(new ClipboardHandlerTable(rocTable).getMenu());
  this.rocTable.setLayoutData(SWTUtil.createFillGridData(2));
  String[] columns=getColumnHeadersForAUCTable();
  String width=String.valueOf(Math.round(100d / ((double)(getTarget() == ModelPart.OUTPUT ? 4 : 3)) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(rocTable,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(rocTable,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(rocTable,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : performancePerTargetTable.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performancePerTargetTable);
  resetChart();
  this.rocSash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.rocSash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (rocChart != null) {
        IAxisSet axisSet=rocChart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          IAxis yAxis=axisSet.getYAxis(0);
          if (xAxis != null && yAxis != null) {
            Point cursor=rocChart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < rocChart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < rocChart.getPlotArea().getSize().y) {
              ISeries[] data=rocChart.getSeriesSet().getSeries();
              if (data != null && data.length > 0) {
                double[] x=data[0].getXSeries();
                double[] y=data[0].getYSeries();
                int index=getIndex(x,xAxis.getDataCoordinate(cursor.x));
                if (index >= 0) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(x[index])).append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(y[index]));
                  builder.append(""String_Node_Str"");
                  rocSash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        rocSash.setToolTipText(null);
      }
    }
  }
);
  rocTable.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=rocTable.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=rocTable.getTopIndex();
      while (index < rocTable.getItemCount()) {
        boolean visible=false;
        TableItem item=rocTable.getItem(index);
        for (int i=0; i < rocTable.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null) {
              rocSetChartSeries((ROCCurve[])item.getData());
            }
            getModel().setSelectedClassValue(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_CLASS_VALUE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.rocRoot;
}","/** 
 * Creates control for ROC curves
 * @param parent
 * @return
 */
private Control createROCControl(Composite parent){
  this.rocRoot=parent;
  this.rocRoot.setLayout(new FillLayout());
  this.rocSash=new SashForm(this.rocRoot,SWT.VERTICAL);
  final Composite composite=new Composite(this.rocSash,SWT.NONE);
  composite.setLayout(SWTUtil.createGridLayout(1));
  final Composite composite2=new Composite(composite,SWT.NONE);
  composite2.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  composite2.setLayout(SWTUtil.createGridLayout(2,false));
  final Label lblTargetVariable=new Label(composite2,SWT.PUSH);
  lblTargetVariable.setText(Resources.getMessage(""String_Node_Str""));
  this.rocCombo=new Combo(composite2,SWT.READ_ONLY);
  this.rocCombo.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  this.rocCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      if (rocCombo.getSelectionIndex() >= 0) {
        String selectedTarget=rocCombo.getItem(rocCombo.getSelectionIndex());
        getModel().setSelectedAttribute(selectedTarget);
        List<String> classes=new ArrayList<>(originalRocCurves.get(selectedTarget).keySet());
        Collections.sort(classes);
        getModel().setSelectedClassValue(classes.get(0));
        updateOverviewSelection(selectedTarget);
        updateROCSelection(classes.get(0));
        getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_ATTRIBUTE,selectedTarget));
      }
    }
  }
);
  this.rocTable=SWTUtil.createTableDynamic(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.rocTable.setHeaderVisible(true);
  this.rocTable.setLinesVisible(true);
  this.rocTable.setMenu(new ClipboardHandlerTable(rocTable).getMenu());
  this.rocTable.setLayoutData(SWTUtil.createFillGridData(2));
  String[] columns=getColumnHeadersForAUCTable();
  String width=String.valueOf(Math.round(100d / ((double)(getTarget() == ModelPart.OUTPUT ? 4 : 3)) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(rocTable,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(rocTable,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(rocTable,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : performanceTableOverview.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableOverview);
  resetChart();
  this.rocSash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.rocSash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (rocChart != null) {
        IAxisSet axisSet=rocChart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          IAxis yAxis=axisSet.getYAxis(0);
          if (xAxis != null && yAxis != null) {
            Point cursor=rocChart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < rocChart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < rocChart.getPlotArea().getSize().y) {
              ISeries[] data=rocChart.getSeriesSet().getSeries();
              if (data != null && data.length > 0) {
                double[] x=data[0].getXSeries();
                double[] y=data[0].getYSeries();
                int index=getIndex(x,xAxis.getDataCoordinate(cursor.x));
                if (index >= 0) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(x[index])).append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(y[index]));
                  builder.append(""String_Node_Str"");
                  rocSash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        rocSash.setToolTipText(null);
      }
    }
  }
);
  rocTable.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=rocTable.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=rocTable.getTopIndex();
      while (index < rocTable.getItemCount()) {
        boolean visible=false;
        TableItem item=rocTable.getItem(index);
        for (int i=0; i < rocTable.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null) {
              rocSetChartSeries((ROCCurve[])item.getData());
            }
            getModel().setSelectedClassValue(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_CLASS_VALUE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.rocRoot;
}",0.9950120081285794
107776,"/** 
 * Updates the performance per class table
 * @param target variable
 */
private void updateOverview(String target){
  performancePerClassTable.setRedraw(false);
  for (  final TableItem i : performancePerClassTable.getItems()) {
    i.dispose();
  }
  performancePerClassTable.setRedraw(true);
  if (!originalRocCurves.containsKey(target)) {
    return;
  }
  List<String> values=new ArrayList<>(originalRocCurves.get(target).keySet());
  Collections.sort(values);
  List<Double> sensitivities=new ArrayList<Double>();
  List<Double> specificities=new ArrayList<Double>();
  List<Double> brierscores=new ArrayList<Double>();
  for (  String clazz : values) {
    ROCCurve c;
    if (isOutput) {
      c=rocCurves.get(target).get(clazz);
    }
 else {
      c=originalRocCurves.get(target).get(clazz);
    }
    TableItem item=new TableItem(performancePerClassTable,SWT.NONE);
    item.setText(0,clazz);
    item.setData(""String_Node_Str"",c.getSensitivity());
    item.setData(""String_Node_Str"",c.getSpecificity());
    item.setData(""String_Node_Str"",c.getBrierScore());
    sensitivities.add(c.getSensitivity());
    specificities.add(c.getSpecificity());
    brierscores.add(c.getBrierScore());
  }
  double[] min=new double[3];
  double[] avg=new double[3];
  double[] max=new double[3];
  for (int i=0; i < sensitivities.size(); i++) {
    double sensitivity=sensitivities.get(i);
    min[0]=min[0] == 0d ? sensitivity : Math.min(min[0],sensitivity);
    max[0]=Math.max(max[0],sensitivity);
    avg[0]+=sensitivity;
    double specificity=specificities.get(i);
    min[1]=min[1] == 0d ? specificity : Math.min(min[1],specificity);
    max[1]=Math.max(max[1],specificity);
    avg[1]+=specificity;
    double brierscore=brierscores.get(i);
    min[2]=min[2] == 0d ? brierscore : Math.min(min[2],brierscore);
    max[2]=Math.max(max[2],brierscore);
    avg[2]+=brierscore;
  }
  TableItem item=new TableItem(performancePerClassTable,SWT.NONE);
  item.setText(0,Resources.getMessage(""String_Node_Str""));
  item.setData(""String_Node_Str"",min[0]);
  item.setData(""String_Node_Str"",min[1]);
  item.setData(""String_Node_Str"",min[2]);
  item=new TableItem(performancePerClassTable,SWT.NONE);
  item.setText(0,Resources.getMessage(""String_Node_Str""));
  item.setData(""String_Node_Str"",avg[0] / values.size());
  item.setData(""String_Node_Str"",avg[1] / values.size());
  item.setData(""String_Node_Str"",avg[2] / values.size());
  item=new TableItem(performancePerClassTable,SWT.NONE);
  item.setText(0,Resources.getMessage(""String_Node_Str""));
  item.setData(""String_Node_Str"",max[0]);
  item.setData(""String_Node_Str"",max[1]);
  item.setData(""String_Node_Str"",max[2]);
}","/** 
 * Updates the performance per class table
 * @param target variable
 */
private void updateOverview(String target){
  performanceTableSensitivitySpecificity.setRedraw(false);
  for (  final TableItem i : performanceTableSensitivitySpecificity.getItems()) {
    i.dispose();
  }
  performanceTableSensitivitySpecificity.setRedraw(true);
  if (!originalRocCurves.containsKey(target)) {
    return;
  }
  List<String> values=new ArrayList<>(originalRocCurves.get(target).keySet());
  Collections.sort(values);
  List<Double> sensitivities=new ArrayList<Double>();
  List<Double> specificities=new ArrayList<Double>();
  List<Double> brierscores=new ArrayList<Double>();
  for (  String clazz : values) {
    ROCCurve c;
    if (isOutput) {
      c=rocCurves.get(target).get(clazz);
    }
 else {
      c=originalRocCurves.get(target).get(clazz);
    }
    TableItem item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
    item.setText(0,clazz);
    item.setData(""String_Node_Str"",c.getSensitivity());
    item.setData(""String_Node_Str"",c.getSpecificity());
    item.setData(""String_Node_Str"",c.getBrierScore());
    sensitivities.add(c.getSensitivity());
    specificities.add(c.getSpecificity());
    brierscores.add(c.getBrierScore());
  }
  double[] min=new double[3];
  double[] avg=new double[3];
  double[] max=new double[3];
  for (int i=0; i < sensitivities.size(); i++) {
    double sensitivity=sensitivities.get(i);
    min[0]=min[0] == 0d ? sensitivity : Math.min(min[0],sensitivity);
    max[0]=Math.max(max[0],sensitivity);
    avg[0]+=sensitivity;
    double specificity=specificities.get(i);
    min[1]=min[1] == 0d ? specificity : Math.min(min[1],specificity);
    max[1]=Math.max(max[1],specificity);
    avg[1]+=specificity;
    double brierscore=brierscores.get(i);
    min[2]=min[2] == 0d ? brierscore : Math.min(min[2],brierscore);
    max[2]=Math.max(max[2],brierscore);
    avg[2]+=brierscore;
  }
  TableItem item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
  item.setText(0,Resources.getMessage(""String_Node_Str""));
  item.setData(""String_Node_Str"",min[0]);
  item.setData(""String_Node_Str"",min[1]);
  item.setData(""String_Node_Str"",min[2]);
  item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
  item.setText(0,Resources.getMessage(""String_Node_Str""));
  item.setData(""String_Node_Str"",avg[0] / values.size());
  item.setData(""String_Node_Str"",avg[1] / values.size());
  item.setData(""String_Node_Str"",avg[2] / values.size());
  item=new TableItem(performanceTableSensitivitySpecificity,SWT.NONE);
  item.setText(0,Resources.getMessage(""String_Node_Str""));
  item.setData(""String_Node_Str"",max[0]);
  item.setData(""String_Node_Str"",max[1]);
  item.setData(""String_Node_Str"",max[2]);
}",0.9613828613460832
107777,"@Override protected void doUpdate(final AnalysisContextClassification context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  final String[] features=context.model.getSelectedFeatures().toArray(new String[0]);
  final String[] targetVariables=context.model.getSelectedClasses().toArray(new String[0]);
  final ARXClassificationConfiguration<?> config=context.model.getClassificationModel().getCurrentConfiguration();
  final ARXFeatureScaling scaling=context.model.getClassificationModel().getFeatureScaling();
  if (context.model.getSelectedFeatures().isEmpty() || context.model.getSelectedClasses().isEmpty()) {
    doReset();
    return;
  }
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private List<List<Double>> values=new ArrayList<>();
    private int progress=0;
    @Override public int getProgress(){
      double result=0d;
      double perBatch=100d / (double)targetVariables.length;
      result+=(double)progress * perBatch;
      result+=(double)builder.getProgress() / 100d * perBatch;
      result=result <= 100d ? result : 100d;
      return (int)result;
    }
    @Override public void onError(){
      rocCurves.clear();
      originalRocCurves.clear();
      zerorRocCurves.clear();
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
        return;
      }
      for (      final TableItem i : performancePerTargetTable.getItems()) {
        i.dispose();
      }
      for (int i=0; i < targetVariables.length; i++) {
        TableItem item=new TableItem(performancePerTargetTable,SWT.NONE);
        item.setText(0,targetVariables[i]);
        for (int j=0; j < values.get(i).size(); j++) {
          item.setData(String.valueOf(1 + j),values.get(i).get(j));
        }
      }
      String targetVariable=getModel().getSelectedAttribute();
      int targetIndex=getIndexOf(targetVariables,targetVariable);
      performancePerTargetTable.setFocus();
      performancePerTargetTable.select(targetIndex);
      updateOverview(performancePerTargetTable.getItem(targetIndex).getText());
      performanceRoot.layout();
      performanceSash.setWeights(new int[]{2,2});
      rocCombo.setItems(targetVariables);
      rocCombo.select(targetIndex);
      rocRoot.layout();
      rocSash.setWeights(new int[]{2,2});
      setStatusDone();
      folder.setSelection(0);
      if (performancePerTargetTable.getItemCount() != 0) {
        updateOverviewSelection(performancePerTargetTable.getItem(targetIndex).getText());
      }
      if (performancePerClassTable.getItemCount() != 0) {
        updateROCSelection(performancePerClassTable.getItem(0).getText(0));
      }
    }
    @Override public void onInterrupt(){
      if (!isEnabled() || getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      rocCurves.clear();
      originalRocCurves.clear();
      zerorRocCurves.clear();
      for (      String targetVariable : targetVariables) {
        StatisticsClassification result=builder.getClassificationPerformance(features,targetVariable,config,scaling);
        progress++;
        if (stopped) {
          break;
        }
        values.add(getColumnValuesForOverallPerformanceTable(result));
        if (!originalRocCurves.containsKey(targetVariable)) {
          originalRocCurves.put(targetVariable,new HashMap<String,ROCCurve>());
          zerorRocCurves.put(targetVariable,new HashMap<String,ROCCurve>());
          rocCurves.put(targetVariable,new HashMap<String,ROCCurve>());
        }
        for (        String c : result.getClassValues()) {
          originalRocCurves.get(targetVariable).put(c,result.getOriginalROCCurve(c));
          zerorRocCurves.get(targetVariable).put(c,result.getZeroRROCCurve(c));
          if (result.getROCCurve(c) != null) {
            rocCurves.get(targetVariable).put(c,result.getROCCurve(c));
          }
        }
      }
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}","@Override protected void doUpdate(final AnalysisContextClassification context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  final String[] features=context.model.getSelectedFeatures().toArray(new String[0]);
  final String[] targetVariables=context.model.getSelectedClasses().toArray(new String[0]);
  final ARXClassificationConfiguration<?> config=context.model.getClassificationModel().getCurrentConfiguration();
  final ARXFeatureScaling scaling=context.model.getClassificationModel().getFeatureScaling();
  if (context.model.getSelectedFeatures().isEmpty() || context.model.getSelectedClasses().isEmpty()) {
    doReset();
    return;
  }
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private List<List<Double>> values=new ArrayList<>();
    private int progress=0;
    @Override public int getProgress(){
      double result=0d;
      double perBatch=100d / (double)targetVariables.length;
      result+=(double)progress * perBatch;
      result+=(double)builder.getProgress() / 100d * perBatch;
      result=result <= 100d ? result : 100d;
      return (int)result;
    }
    @Override public void onError(){
      rocCurves.clear();
      originalRocCurves.clear();
      zerorRocCurves.clear();
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
        return;
      }
      for (      final TableItem i : performanceTableOverview.getItems()) {
        i.dispose();
      }
      for (int i=0; i < targetVariables.length; i++) {
        TableItem item=new TableItem(performanceTableOverview,SWT.NONE);
        item.setText(0,targetVariables[i]);
        for (int j=0; j < values.get(i).size(); j++) {
          item.setData(String.valueOf(1 + j),values.get(i).get(j));
        }
      }
      String targetVariable=getModel().getSelectedAttribute();
      int targetIndex=getIndexOf(targetVariables,targetVariable);
      performanceTableOverview.setFocus();
      performanceTableOverview.select(targetIndex);
      updateOverview(performanceTableOverview.getItem(targetIndex).getText());
      performanceRoot.layout();
      performanceSash.setWeights(new int[]{2,2});
      rocCombo.setItems(targetVariables);
      rocCombo.select(targetIndex);
      rocRoot.layout();
      rocSash.setWeights(new int[]{2,2});
      setStatusDone();
      if (performanceTableOverview.getItemCount() != 0) {
        updateOverviewSelection(performanceTableOverview.getItem(targetIndex).getText());
      }
      String[] classValues=new String[performanceTableSensitivitySpecificity.getItems().length];
      for (int i=0; i < classValues.length; i++) {
        classValues[i]=performanceTableSensitivitySpecificity.getItem(i).getText(0);
      }
      int classIndex=getIndexOf(classValues,getModel().getSelectedClassValue());
      if (performanceTableSensitivitySpecificity.getItemCount() != 0) {
        updateROCSelection(performanceTableSensitivitySpecificity.getItem(classIndex).getText(0));
      }
    }
    @Override public void onInterrupt(){
      if (!isEnabled() || getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      rocCurves.clear();
      originalRocCurves.clear();
      zerorRocCurves.clear();
      for (      String targetVariable : targetVariables) {
        StatisticsClassification result=builder.getClassificationPerformance(features,targetVariable,config,scaling);
        progress++;
        if (stopped) {
          break;
        }
        values.add(getColumnValuesForOverallPerformanceTable(result));
        if (!originalRocCurves.containsKey(targetVariable)) {
          originalRocCurves.put(targetVariable,new HashMap<String,ROCCurve>());
          zerorRocCurves.put(targetVariable,new HashMap<String,ROCCurve>());
          rocCurves.put(targetVariable,new HashMap<String,ROCCurve>());
        }
        for (        String c : result.getClassValues()) {
          originalRocCurves.get(targetVariable).put(c,result.getOriginalROCCurve(c));
          zerorRocCurves.get(targetVariable).put(c,result.getZeroRROCCurve(c));
          if (result.getROCCurve(c) != null) {
            rocCurves.get(targetVariable).put(c,result.getROCCurve(c));
          }
        }
      }
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}",0.9089167908065546
107778,"@Override protected Control createControl(Composite parent){
  Composite root=new Composite(parent,SWT.NONE);
  root.setLayout(new FillLayout());
  ComponentTitledFolderButtonBar bar=new ComponentTitledFolderButtonBar();
  bar.add(Resources.getMessage(""String_Node_Str""),getController().getResources().getManagedImage(""String_Node_Str""),new Runnable(){
    public void run(){
      triggerUpdate();
    }
  }
);
  this.folder=new ComponentTitledFolder(root,null,bar,null,true,false);
  Composite item1=folder.createItem(Resources.getMessage(""String_Node_Str""),getController().getResources().getManagedImage(""String_Node_Str""));
  item1.setLayoutData(SWTUtil.createFillGridData());
  this.createOverviewControl(item1);
  Composite item2=folder.createItem(Resources.getMessage(""String_Node_Str""),getController().getResources().getManagedImage(""String_Node_Str""));
  item2.setLayoutData(SWTUtil.createFillGridData());
  this.createROCControl(item2);
  this.folder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (other != null) {
        other.setSelectionIndex(folder.getSelectionIndex());
      }
    }
  }
);
  return root;
}","@Override protected Control createControl(Composite parent){
  Composite root=new Composite(parent,SWT.NONE);
  root.setLayout(new FillLayout());
  ComponentTitledFolderButtonBar bar=new ComponentTitledFolderButtonBar();
  bar.add(Resources.getMessage(""String_Node_Str""),getController().getResources().getManagedImage(""String_Node_Str""),new Runnable(){
    public void run(){
      triggerUpdate();
    }
  }
);
  this.folder=new ComponentTitledFolder(root,null,bar,null,true,false);
  Composite item1=folder.createItem(Resources.getMessage(""String_Node_Str""),getController().getResources().getManagedImage(""String_Node_Str""));
  item1.setLayoutData(SWTUtil.createFillGridData());
  this.createOverviewControl(item1);
  Composite item2=folder.createItem(Resources.getMessage(""String_Node_Str""),getController().getResources().getManagedImage(""String_Node_Str""));
  item2.setLayoutData(SWTUtil.createFillGridData());
  this.createROCControl(item2);
  this.folder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (other != null) {
        other.setSelectionIndex(folder.getSelectionIndex());
      }
    }
  }
);
  this.folder.setSelection(0);
  return root;
}",0.9872270292542232
107779,"/** 
 * Updates the combo box to the selected target variable, the roc table with according auc values and the chart according to the selected class.
 */
private void updateROCSelection(String classValue){
  String selectedTarget=getModel().getSelectedAttribute();
  for (int i=0; i < rocCombo.getItemCount(); i++) {
    if (rocCombo.getItem(i).equals(selectedTarget)) {
      rocCombo.select(i);
      updateROC(selectedTarget,classValue);
      break;
    }
  }
  int index=0;
  for (  TableItem item : rocTable.getItems()) {
    if (item.getText(0).equals(classValue)) {
      rocTable.select(index);
      if (item.getData() != null) {
        rocSetChartSeries((ROCCurve[])item.getData());
      }
      break;
    }
    index++;
  }
}","/** 
 * Updates the combo box to the selected target variable, the roc table with according auc values and the chart according to the selected class.
 */
private void updateROCSelection(String classValue){
  if (rocCombo.getItemCount() == 0) {
    return;
  }
  final String[] targetVariables=getModel().getSelectedClasses().toArray(new String[0]);
  String targetVariable=getModel().getSelectedAttribute();
  int targetIndex=getIndexOf(targetVariables,targetVariable);
  rocCombo.select(targetIndex);
  updateROC(rocCombo.getItem(targetIndex),classValue);
  int index=0;
  for (  TableItem item : rocTable.getItems()) {
    if (item.getText(0).equals(classValue)) {
      rocTable.select(index);
      if (item.getData() != null) {
        rocSetChartSeries((ROCCurve[])item.getData());
      }
      break;
    }
    index++;
  }
}",0.6929434202161475
107780,"/** 
 * Builds overall performance view
 * @param parent
 * @return
 */
private Control createOverviewControl(Composite parent){
  this.performanceRoot=parent;
  this.performanceRoot.setLayout(new FillLayout());
  this.performanceSash=new SashForm(this.performanceRoot,SWT.VERTICAL);
  this.performancePerTargetTable=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performancePerTargetTable.setHeaderVisible(true);
  this.performancePerTargetTable.setLinesVisible(true);
  this.performancePerTargetTable.setMenu(new ClipboardHandlerTable(performancePerTargetTable).getMenu());
  String[] columns=getColumnHeadersForPerformanceForOverallPerformanceTable();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(performancePerTargetTable,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(performancePerTargetTable,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(performancePerTargetTable,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : performancePerTargetTable.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performancePerTargetTable);
  performancePerTargetTable.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=performancePerTargetTable.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=performancePerTargetTable.getTopIndex();
      while (index < performancePerTargetTable.getItemCount()) {
        boolean visible=false;
        TableItem item=performancePerTargetTable.getItem(index);
        for (int i=0; i < performancePerTargetTable.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            getModel().setSelectedAttribute(item.getText(0));
            List<String> classes=new ArrayList<>(originalRocCurves.get(item.getText(0)).keySet());
            Collections.sort(classes);
            getModel().setSelectedClassValue(classes.get(0));
            updateOverview(getModel().getSelectedAttribute());
            updateROCSelection(classes.get(0));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_ATTRIBUTE,getModel().getSelectedAttribute()));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_CLASS_VALUE,getModel().getSelectedClassValue()));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  this.performancePerClassTable=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performancePerClassTable.setHeaderVisible(true);
  this.performancePerClassTable.setLinesVisible(true);
  this.performancePerClassTable.setMenu(new ClipboardHandlerTable(performancePerClassTable).getMenu());
  width=String.valueOf(Math.round(100d / ((double)4) * 100d) / 100d) + ""String_Node_Str"";
  c=new DynamicTableColumn(performancePerClassTable,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performancePerClassTable,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performancePerClassTable,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performancePerClassTable,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performancePerClassTable,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performancePerClassTable,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performancePerClassTable,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : performancePerClassTable.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performancePerClassTable);
  this.performanceSash.setWeights(new int[]{2,2});
  return this.performanceRoot;
}","/** 
 * Builds overall performance view
 * @param parent
 * @return
 */
private Control createOverviewControl(Composite parent){
  this.performanceRoot=parent;
  this.performanceRoot.setLayout(new FillLayout());
  this.performanceSash=new SashForm(this.performanceRoot,SWT.VERTICAL);
  this.performanceTableOverview=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performanceTableOverview.setHeaderVisible(true);
  this.performanceTableOverview.setLinesVisible(true);
  this.performanceTableOverview.setMenu(new ClipboardHandlerTable(performanceTableOverview).getMenu());
  String[] columns=getColumnHeadersForPerformanceForOverallPerformanceTable();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(performanceTableOverview,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(performanceTableOverview,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(performanceTableOverview,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : performanceTableOverview.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableOverview);
  performanceTableOverview.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=performanceTableOverview.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=performanceTableOverview.getTopIndex();
      while (index < performanceTableOverview.getItemCount()) {
        boolean visible=false;
        TableItem item=performanceTableOverview.getItem(index);
        for (int i=0; i < performanceTableOverview.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            getModel().setSelectedAttribute(item.getText(0));
            List<String> classes=new ArrayList<>(originalRocCurves.get(item.getText(0)).keySet());
            Collections.sort(classes);
            getModel().setSelectedClassValue(classes.get(0));
            updateOverview(getModel().getSelectedAttribute());
            updateROCSelection(classes.get(0));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_ATTRIBUTE,getModel().getSelectedAttribute()));
            getController().update(new ModelEvent(ViewStatisticsClassification.this,ModelPart.SELECTED_CLASS_VALUE,getModel().getSelectedClassValue()));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  this.performanceTableSensitivitySpecificity=SWTUtil.createTableDynamic(this.performanceSash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.performanceTableSensitivitySpecificity.setHeaderVisible(true);
  this.performanceTableSensitivitySpecificity.setLinesVisible(true);
  this.performanceTableSensitivitySpecificity.setMenu(new ClipboardHandlerTable(performanceTableSensitivitySpecificity).getMenu());
  width=String.valueOf(Math.round(100d / ((double)4) * 100d) / 100d) + ""String_Node_Str"";
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(performanceTableSensitivitySpecificity,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(performanceTableSensitivitySpecificity,c);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : performanceTableSensitivitySpecificity.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(performanceTableSensitivitySpecificity);
  this.performanceSash.setWeights(new int[]{2,2});
  return this.performanceRoot;
}",0.8860195903829029
107781,"@Override public void onFinish(){
  if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
    setStatusEmpty();
    return;
  }
  for (  final TableItem i : performancePerTargetTable.getItems()) {
    i.dispose();
  }
  for (int i=0; i < targetVariables.length; i++) {
    TableItem item=new TableItem(performancePerTargetTable,SWT.NONE);
    item.setText(0,targetVariables[i]);
    for (int j=0; j < values.get(i).size(); j++) {
      item.setData(String.valueOf(1 + j),values.get(i).get(j));
    }
  }
  String targetVariable=getModel().getSelectedAttribute();
  int targetIndex=getIndexOf(targetVariables,targetVariable);
  performancePerTargetTable.setFocus();
  performancePerTargetTable.select(targetIndex);
  updateOverview(performancePerTargetTable.getItem(targetIndex).getText());
  performanceRoot.layout();
  performanceSash.setWeights(new int[]{2,2});
  rocCombo.setItems(targetVariables);
  rocCombo.select(targetIndex);
  rocRoot.layout();
  rocSash.setWeights(new int[]{2,2});
  setStatusDone();
  folder.setSelection(0);
  if (performancePerTargetTable.getItemCount() != 0) {
    updateOverviewSelection(performancePerTargetTable.getItem(targetIndex).getText());
  }
  if (performancePerClassTable.getItemCount() != 0) {
    updateROCSelection(performancePerClassTable.getItem(0).getText(0));
  }
}","@Override public void onFinish(){
  if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
    setStatusEmpty();
    return;
  }
  for (  final TableItem i : performanceTableOverview.getItems()) {
    i.dispose();
  }
  for (int i=0; i < targetVariables.length; i++) {
    TableItem item=new TableItem(performanceTableOverview,SWT.NONE);
    item.setText(0,targetVariables[i]);
    for (int j=0; j < values.get(i).size(); j++) {
      item.setData(String.valueOf(1 + j),values.get(i).get(j));
    }
  }
  String targetVariable=getModel().getSelectedAttribute();
  int targetIndex=getIndexOf(targetVariables,targetVariable);
  performanceTableOverview.setFocus();
  performanceTableOverview.select(targetIndex);
  updateOverview(performanceTableOverview.getItem(targetIndex).getText());
  performanceRoot.layout();
  performanceSash.setWeights(new int[]{2,2});
  rocCombo.setItems(targetVariables);
  rocCombo.select(targetIndex);
  rocRoot.layout();
  rocSash.setWeights(new int[]{2,2});
  setStatusDone();
  if (performanceTableOverview.getItemCount() != 0) {
    updateOverviewSelection(performanceTableOverview.getItem(targetIndex).getText());
  }
  String[] classValues=new String[performanceTableSensitivitySpecificity.getItems().length];
  for (int i=0; i < classValues.length; i++) {
    classValues[i]=performanceTableSensitivitySpecificity.getItem(i).getText(0);
  }
  int classIndex=getIndexOf(classValues,getModel().getSelectedClassValue());
  if (performanceTableSensitivitySpecificity.getItemCount() != 0) {
    updateROCSelection(performanceTableSensitivitySpecificity.getItem(classIndex).getText(0));
  }
}",0.7737940026075619
107782,"/** 
 * Converts to double, returns null if not valid
 * @return
 */
private Double getHeuristicSearchTimeLimit(){
  double value=0d;
  try {
    value=Double.valueOf(txtHeuristicSearchTimeLimit.getText());
  }
 catch (  Exception e) {
    return null;
  }
  if (((int)value) > 0d) {
    return value;
  }
 else {
    return null;
  }
}","/** 
 * Converts to double, returns null if not valid
 * @return
 */
private Double getHeuristicSearchTimeLimit(){
  double value=0d;
  try {
    value=Double.valueOf(txtHeuristicSearchTimeLimit.getText());
  }
 catch (  Exception e) {
    return null;
  }
  if (value > 0d) {
    return value;
  }
 else {
    return null;
  }
}",0.974436090225564
107783,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite base=new Composite(composite,SWT.NONE);
  base.setLayoutData(SWTUtil.createFillGridData());
  base.setLayout(SWTUtil.createGridLayout(1,false));
  Group group1=new Group(parent,SWT.SHADOW_ETCHED_IN);
  group1.setText(Resources.getMessage(""String_Node_Str""));
  GridData data1=SWTUtil.createFillGridData();
  data1.horizontalIndent=5;
  group1.setLayoutData(data1);
  group1.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  final Button radio11=new Button(group1,SWT.RADIO);
  radio11.setText(Resources.getMessage(""String_Node_Str""));
  radio11.setLayoutData(GridDataFactory.swtDefaults().span(2,1).create());
  radio11.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio11.getSelection()) {
        result.searchType=SearchType.OPTIMAL;
      }
    }
  }
);
  final Button radio12=new Button(group1,SWT.RADIO);
  radio12.setText(Resources.getMessage(""String_Node_Str""));
  radio12.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio12.getSelection()) {
        result.searchType=SearchType.STEP_LIMIT;
      }
    }
  }
);
  this.txtHeuristicSearchStepLimit=new Text(group1,SWT.BORDER);
  this.txtHeuristicSearchStepLimit.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());
  this.txtHeuristicSearchStepLimit.setText(String.valueOf(result.heuristicSearchStepLimit));
  this.txtHeuristicSearchStepLimit.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      radio12.setSelection(true);
      result.searchType=SearchType.STEP_LIMIT;
      checkValidity();
    }
  }
);
  final Button radio13=new Button(group1,SWT.RADIO);
  radio13.setText(Resources.getMessage(""String_Node_Str""));
  radio13.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio13.getSelection()) {
        result.searchType=SearchType.TIME_LIMIT;
      }
    }
  }
);
  this.txtHeuristicSearchTimeLimit=new Text(group1,SWT.BORDER);
  this.txtHeuristicSearchTimeLimit.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());
  this.txtHeuristicSearchTimeLimit.setText(String.valueOf(result.heuristicSearchTimeLimit));
  this.txtHeuristicSearchTimeLimit.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      radio13.setSelection(true);
      result.searchType=SearchType.TIME_LIMIT;
      checkValidity();
    }
  }
);
  if (this.optimalSearchAvailable) {
    radio11.setSelection(true);
    result.searchType=SearchType.OPTIMAL;
  }
 else {
    radio11.setEnabled(false);
    radio12.setSelection(true);
    result.searchType=SearchType.STEP_LIMIT;
    createMessage(group1,Resources.getMessage(""String_Node_Str""));
  }
  Group group2=new Group(parent,SWT.SHADOW_ETCHED_IN);
  group2.setText(Resources.getMessage(""String_Node_Str""));
  GridData data2=SWTUtil.createFillGridData();
  data2.horizontalIndent=5;
  group2.setLayoutData(data2);
  group2.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  final Button radio21=new Button(group2,SWT.RADIO);
  radio21.setText(Resources.getMessage(""String_Node_Str""));
  radio21.setLayoutData(GridDataFactory.swtDefaults().span(2,1).create());
  radio21.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio21.getSelection()) {
        result.transformationType=TransformationType.GLOBAL;
      }
    }
  }
);
  final Button radio22=new Button(group2,SWT.RADIO);
  radio22.setText(Resources.getMessage(""String_Node_Str""));
  radio22.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio22.getSelection()) {
        result.transformationType=TransformationType.LOCAL;
      }
    }
  }
);
  this.textNumIterations=new Text(group2,SWT.BORDER);
  this.textNumIterations.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());
  this.textNumIterations.setText(String.valueOf(result.numIterations));
  this.textNumIterations.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      radio22.setSelection(true);
      result.transformationType=TransformationType.LOCAL;
      checkValidity();
    }
  }
);
  radio21.setSelection(true);
  result.transformationType=TransformationType.GLOBAL;
  if (this.localRecodingAvailable) {
    radio22.setEnabled(true);
  }
 else {
    radio22.setEnabled(false);
    textNumIterations.setEnabled(false);
    createMessage(group2,Resources.getMessage(""String_Node_Str""));
  }
  applyDialogFont(base);
  checkValidity();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite base=new Composite(composite,SWT.NONE);
  base.setLayoutData(SWTUtil.createFillGridData());
  base.setLayout(SWTUtil.createGridLayout(1,false));
  Group group1=new Group(parent,SWT.SHADOW_ETCHED_IN);
  group1.setText(Resources.getMessage(""String_Node_Str""));
  GridData data1=SWTUtil.createFillGridData();
  data1.horizontalIndent=5;
  group1.setLayoutData(data1);
  group1.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  final Button radio11=new Button(group1,SWT.RADIO);
  radio11.setText(Resources.getMessage(""String_Node_Str""));
  radio11.setLayoutData(GridDataFactory.swtDefaults().span(2,1).create());
  radio11.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio11.getSelection()) {
        result.searchType=SearchType.OPTIMAL;
      }
    }
  }
);
  final Button radio12=new Button(group1,SWT.RADIO);
  radio12.setText(Resources.getMessage(""String_Node_Str""));
  radio12.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio12.getSelection()) {
        result.searchType=SearchType.STEP_LIMIT;
      }
    }
  }
);
  this.txtHeuristicSearchStepLimit=new Text(group1,SWT.BORDER);
  this.txtHeuristicSearchStepLimit.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());
  this.txtHeuristicSearchStepLimit.setText(String.valueOf(result.heuristicSearchStepLimit));
  final Button radio13=new Button(group1,SWT.RADIO);
  radio13.setText(Resources.getMessage(""String_Node_Str""));
  radio13.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio13.getSelection()) {
        result.searchType=SearchType.TIME_LIMIT;
      }
    }
  }
);
  this.txtHeuristicSearchStepLimit.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      radio12.setSelection(true);
      radio11.setSelection(false);
      radio13.setSelection(false);
      result.searchType=SearchType.STEP_LIMIT;
      checkValidity();
    }
  }
);
  this.txtHeuristicSearchTimeLimit=new Text(group1,SWT.BORDER);
  this.txtHeuristicSearchTimeLimit.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());
  this.txtHeuristicSearchTimeLimit.setText(String.valueOf(result.heuristicSearchTimeLimit));
  this.txtHeuristicSearchTimeLimit.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      radio13.setSelection(true);
      radio11.setSelection(false);
      radio12.setSelection(false);
      result.searchType=SearchType.TIME_LIMIT;
      checkValidity();
    }
  }
);
  if (this.optimalSearchAvailable) {
    radio11.setSelection(true);
    result.searchType=SearchType.OPTIMAL;
  }
 else {
    radio11.setEnabled(false);
    radio12.setSelection(true);
    result.searchType=SearchType.STEP_LIMIT;
    createMessage(group1,Resources.getMessage(""String_Node_Str""));
  }
  Group group2=new Group(parent,SWT.SHADOW_ETCHED_IN);
  group2.setText(Resources.getMessage(""String_Node_Str""));
  GridData data2=SWTUtil.createFillGridData();
  data2.horizontalIndent=5;
  group2.setLayoutData(data2);
  group2.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  final Button radio21=new Button(group2,SWT.RADIO);
  radio21.setText(Resources.getMessage(""String_Node_Str""));
  radio21.setLayoutData(GridDataFactory.swtDefaults().span(2,1).create());
  radio21.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio21.getSelection()) {
        result.transformationType=TransformationType.GLOBAL;
      }
    }
  }
);
  final Button radio22=new Button(group2,SWT.RADIO);
  radio22.setText(Resources.getMessage(""String_Node_Str""));
  radio22.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (radio22.getSelection()) {
        result.transformationType=TransformationType.LOCAL;
      }
    }
  }
);
  this.textNumIterations=new Text(group2,SWT.BORDER);
  this.textNumIterations.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());
  this.textNumIterations.setText(String.valueOf(result.numIterations));
  this.textNumIterations.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      radio22.setSelection(true);
      radio21.setSelection(false);
      result.transformationType=TransformationType.LOCAL;
      checkValidity();
    }
  }
);
  radio21.setSelection(true);
  result.transformationType=TransformationType.GLOBAL;
  if (this.localRecodingAvailable) {
    radio22.setEnabled(true);
  }
 else {
    radio22.setEnabled(false);
    textNumIterations.setEnabled(false);
    createMessage(group2,Resources.getMessage(""String_Node_Str""));
  }
  applyDialogFont(base);
  checkValidity();
  return composite;
}",0.9324445328823002
107784,"@Override public void modifyText(ModifyEvent arg0){
  radio22.setSelection(true);
  result.transformationType=TransformationType.LOCAL;
  checkValidity();
}","@Override public void modifyText(ModifyEvent arg0){
  radio22.setSelection(true);
  radio21.setSelection(false);
  result.transformationType=TransformationType.LOCAL;
  checkValidity();
}",0.9096209912536444
107785,"/** 
 * Converts to int, returns null if not valid
 * @return
 */
private Integer getHeuristicSearchStepLimit(){
  int value=0;
  try {
    value=Integer.valueOf(txtHeuristicSearchStepLimit.getText());
  }
 catch (  Exception e) {
    return null;
  }
  if (((int)value) > 0d) {
    return value;
  }
 else {
    return null;
  }
}","/** 
 * Converts to int, returns null if not valid
 * @return
 */
private Integer getHeuristicSearchStepLimit(){
  int value=0;
  try {
    value=Integer.valueOf(txtHeuristicSearchStepLimit.getText());
  }
 catch (  Exception e) {
    return null;
  }
  if (value > 0d) {
    return value;
  }
 else {
    return null;
  }
}",0.9740458015267176
107786,"@Override protected void initializeInternal(DataManager manager,DataDefinition definition,Data input,GeneralizationHierarchy[] hierarchies,ARXConfiguration config){
  super.initializeInternal(manager,definition,input,hierarchies,config);
  List<Integer> indices=new ArrayList<>();
  for (  String variable : definition.getResponseVariables()) {
    int index=manager.getDataAnalyzed().getIndexOf(variable);
    if (index != -1) {
      indices.add(index);
    }
  }
  Collections.sort(indices);
  this.responseVariables=new int[indices.size()];
  for (int i=0; i < indices.size(); i++) {
    responseVariables[i]=indices.get(i);
  }
  this.responseVariablesNotAnalyzed=definition.getResponseVariables().size() - responseVariables.length;
  penaltySuppressed=super.getSuppressionFactor();
  penaltyInfrequentResponse=super.getGeneralizationFactor();
  penaltyNoMajorityResponse=super.getGeneralizationSuppressionFactor();
}","@Override protected void initializeInternal(DataManager manager,DataDefinition definition,Data input,GeneralizationHierarchy[] hierarchies,ARXConfiguration config){
  super.initializeInternal(manager,definition,input,hierarchies,config);
  this.responseVariablesNonQI=getIndices(definition,manager.getDataAnalyzed());
  this.responseVariablesQI=getIndices(definition,manager.getDataGeneralized());
  if (this.responseVariablesQI.length != 0) {
    throw new UnsupportedOperationException();
  }
  penaltySuppressed=super.getGeneralizationSuppressionFactor();
  penaltyInfrequentResponse=super.getGeneralizationFactor();
  penaltyNoMajorityResponse=super.getSuppressionFactor();
  penaltyMax=Math.max(penaltySuppressed,Math.max(penaltyInfrequentResponse,penaltyNoMajorityResponse)) * super.getNumTuples();
}",0.3125
107787,"@Override protected ILSingleDimensionalWithBound getInformationLossInternal(Transformation node,HashGroupifyEntry m){
  if (m.count > 0) {
    return createInformationLoss(getPenalty(m));
  }
 else {
    return createInformationLoss(0d);
  }
}","@Override protected ILSingleDimensionalWithBound getInformationLossInternal(Transformation node,HashGroupifyEntry m){
  if (m.count > 0) {
    return createInformationLoss(getPenaltyNonQI(m));
  }
 else {
    return createInformationLoss(0d);
  }
}",0.989816700610998
107788,"@Override public ILSingleDimensional createMaxInformationLoss(){
  Double rows=getNumTuples();
  if (rows == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else {
    double max=rows * responseVariablesNotAnalyzed * penaltySuppressed;
    double maxPenalty=Math.max(penaltySuppressed,Math.max(penaltyInfrequentResponse,penaltyNoMajorityResponse));
    max+=rows * responseVariables.length * maxPenalty;
    return new ILSingleDimensional(max);
  }
}","@Override public ILSingleDimensional createMaxInformationLoss(){
  return new ILSingleDimensional(1d);
}",0.3547826086956521
107789,"/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public ARXProcessStatistics optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return new ARXProcessStatistics();
  }
  long time=System.currentTimeMillis();
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int initialRecords=0;
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
      initialRecords++;
    }
  }
  initialRecords=output.getNumRows() - initialRecords;
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * output.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setSuppressionLimit(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return new ARXProcessStatistics();
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    time=System.currentTimeMillis() - time;
    return new ARXProcessStatistics(result,initialRecords,optimized,time);
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}","/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public ARXProcessStatistics optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return new ARXProcessStatistics();
  }
  long time=System.currentTimeMillis();
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet baselineRowSet=config.getSubset() == null ? null : config.getSubset().getSet();
  int baselineRecords=baselineRowSet == null ? output.getNumRows() : baselineRowSet.size();
  int initialRecords=0;
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row) && (baselineRowSet == null || baselineRowSet.contains(row))) {
      rowset.add(row);
      initialRecords++;
    }
  }
  initialRecords=baselineRecords - initialRecords;
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * baselineRecords;
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setSuppressionLimit(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return new ARXProcessStatistics();
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    time=System.currentTimeMillis() - time;
    return new ARXProcessStatistics(result,initialRecords,optimized,time);
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}",0.9646655231560892
107790,"/** 
 * Returns whether local recoding can be applied to the given handle
 * @param handle
 * @return
 */
public boolean isOptimizable(DataHandle handle){
  if (!(handle instanceof DataHandleOutput)) {
    return false;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    return false;
  }
  for (  PrivacyCriterion c : config.getPrivacyModels()) {
    if (!c.isLocalRecodingSupported()) {
      return false;
    }
  }
  int outliers=0;
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      outliers++;
    }
  }
  if (config.getMinimalGroupSize() != Integer.MAX_VALUE && outliers < config.getMinimalGroupSize()) {
    return false;
  }
  if (outliers == 0) {
    return false;
  }
  return true;
}","/** 
 * Returns whether local recoding can be applied to the given handle
 * @param handle
 * @return
 */
public boolean isOptimizable(DataHandle handle){
  if (!(handle instanceof DataHandleOutput)) {
    return false;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    return false;
  }
  for (  PrivacyCriterion c : config.getPrivacyModels()) {
    if (!c.isLocalRecodingSupported()) {
      return false;
    }
  }
  RowSet baselineRowSet=config.getSubset() == null ? null : config.getSubset().getSet();
  int outliers=0;
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row) && (baselineRowSet == null || baselineRowSet.contains(row))) {
      outliers++;
    }
  }
  if (config.getMinimalGroupSize() != Integer.MAX_VALUE && outliers < config.getMinimalGroupSize()) {
    return false;
  }
  if (outliers == 0) {
    return false;
  }
  return true;
}",0.9209549071618036
107791,"/** 
 * Performs some sanity checks.
 * @param config
 * @param manager the manager
 */
private void checkAfterEncoding(final ARXConfiguration config,final DataManager manager){
  if (config.isPrivacyModelSpecified(KAnonymity.class)) {
    KAnonymity c=config.getPrivacyModel(KAnonymity.class);
    if ((c.getK() > manager.getDataGeneralized().getDataLength()) || (c.getK() < 1)) {
      throw new IllegalArgumentException(""String_Node_Str"" + c.getK() + ""String_Node_Str""+ manager.getDataGeneralized().getDataLength()+ ""String_Node_Str"");
    }
  }
  if (config.isPrivacyModelSpecified(LDiversity.class)) {
    for (    LDiversity c : config.getPrivacyModels(LDiversity.class)) {
      if ((c.getL() > manager.getDataGeneralized().getDataLength()) || (c.getL() < 1)) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getL() + ""String_Node_Str""+ manager.getDataGeneralized().getDataLength()+ ""String_Node_Str"");
      }
    }
  }
  if (config.isPrivacyModelSpecified(DDisclosurePrivacy.class)) {
    for (    DDisclosurePrivacy c : config.getPrivacyModels(DDisclosurePrivacy.class)) {
      if (c.getD() <= 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getD() + ""String_Node_Str"");
      }
    }
  }
  if (config.isPrivacyModelSpecified(BasicBLikeness.class)) {
    for (    BasicBLikeness c : config.getPrivacyModels(BasicBLikeness.class)) {
      if (c.getB() <= 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getB() + ""String_Node_Str"");
      }
    }
  }
  if (config.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    for (    EnhancedBLikeness c : config.getPrivacyModels(EnhancedBLikeness.class)) {
      if (c.getB() <= 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getB() + ""String_Node_Str"");
      }
    }
  }
  for (  final GeneralizationHierarchy hierarchy : manager.getHierarchies()) {
    hierarchy.checkMonotonicity(manager);
  }
  final int[] hierarchyHeights=manager.getHierachiesHeights();
  final int[] minLevels=manager.getHierarchiesMinLevels();
  final int[] maxLevels=manager.getHierarchiesMaxLevels();
  for (int i=0; i < hierarchyHeights.length; i++) {
    if (minLevels[i] > (hierarchyHeights[i] - 1)) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str""+ minLevels[i]+ ""String_Node_Str""+ (hierarchyHeights[i] - 1));
    }
    if (minLevels[i] < 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str"");
    }
    if (maxLevels[i] > (hierarchyHeights[i] - 1)) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str""+ maxLevels[i]+ ""String_Node_Str""+ (hierarchyHeights[i] - 1));
    }
    if (maxLevels[i] < minLevels[i]) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str"");
    }
  }
}","/** 
 * Performs some sanity checks.
 * @param config
 * @param manager the manager
 */
private void checkAfterEncoding(final ARXConfiguration config,final DataManager manager){
  int numberOfOutputRecords=config.getNumOutputRecords();
  if (config.isPrivacyModelSpecified(KAnonymity.class)) {
    KAnonymity c=config.getPrivacyModel(KAnonymity.class);
    if ((c.getK() > numberOfOutputRecords) || (c.getK() < 1)) {
      throw new IllegalArgumentException(""String_Node_Str"" + c.getK() + ""String_Node_Str""+ manager.getDataGeneralized().getDataLength()+ ""String_Node_Str"");
    }
  }
  if (config.isPrivacyModelSpecified(LDiversity.class)) {
    for (    LDiversity c : config.getPrivacyModels(LDiversity.class)) {
      if ((c.getL() > numberOfOutputRecords) || (c.getL() < 1)) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getL() + ""String_Node_Str""+ manager.getDataGeneralized().getDataLength()+ ""String_Node_Str"");
      }
    }
  }
  if (config.isPrivacyModelSpecified(DDisclosurePrivacy.class)) {
    for (    DDisclosurePrivacy c : config.getPrivacyModels(DDisclosurePrivacy.class)) {
      if (c.getD() <= 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getD() + ""String_Node_Str"");
      }
    }
  }
  if (config.isPrivacyModelSpecified(BasicBLikeness.class)) {
    for (    BasicBLikeness c : config.getPrivacyModels(BasicBLikeness.class)) {
      if (c.getB() <= 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getB() + ""String_Node_Str"");
      }
    }
  }
  if (config.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    for (    EnhancedBLikeness c : config.getPrivacyModels(EnhancedBLikeness.class)) {
      if (c.getB() <= 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + c.getB() + ""String_Node_Str"");
      }
    }
  }
  for (  final GeneralizationHierarchy hierarchy : manager.getHierarchies()) {
    hierarchy.checkMonotonicity(manager);
  }
  final int[] hierarchyHeights=manager.getHierachiesHeights();
  final int[] minLevels=manager.getHierarchiesMinLevels();
  final int[] maxLevels=manager.getHierarchiesMaxLevels();
  for (int i=0; i < hierarchyHeights.length; i++) {
    if (minLevels[i] > (hierarchyHeights[i] - 1)) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str""+ minLevels[i]+ ""String_Node_Str""+ (hierarchyHeights[i] - 1));
    }
    if (minLevels[i] < 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str"");
    }
    if (maxLevels[i] > (hierarchyHeights[i] - 1)) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str""+ maxLevels[i]+ ""String_Node_Str""+ (hierarchyHeights[i] - 1));
    }
    if (maxLevels[i] < minLevels[i]) {
      throw new IllegalArgumentException(""String_Node_Str"" + manager.getHierarchies()[i].getName() + ""String_Node_Str"");
    }
  }
}",0.9684669573968469
107792,"/** 
 * Initializes the configuration.
 * @param manager
 */
protected void initialize(DataManager manager){
  if (criteria.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.requirements=0x0;
  for (  PrivacyCriterion c : criteria) {
    this.requirements|=c.getRequirements();
  }
  if (manager.getDataAnalyzed().getArray() != null && !manager.getDataAnalyzed().isEmpty()) {
    this.requirements|=ARXConfiguration.REQUIREMENT_DISTRIBUTION;
  }
  for (  PrivacyCriterion c : criteria) {
    c.initialize(manager,this);
  }
  int dataLength=0;
  if (this.getSubset() != null) {
    dataLength=getSubset().getArray().length;
  }
 else {
    dataLength=manager.getDataGeneralized().getDataLength();
  }
  if (this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    absMaxOutliers=(int)dataLength;
  }
 else {
    absMaxOutliers=(int)Math.floor(this.relMaxOutliers * (double)dataLength);
  }
  List<PrivacyCriterion> list=new ArrayList<PrivacyCriterion>();
  if (this.isPrivacyModelSpecified(DPresence.class)) {
    list.add(this.getPrivacyModel(DPresence.class));
  }
  if (this.isPrivacyModelSpecified(KMap.class)) {
    list.add(this.getPrivacyModel(KMap.class));
  }
  if (this.isPrivacyModelSpecified(DDisclosurePrivacy.class)) {
    list.addAll(this.getPrivacyModels(DDisclosurePrivacy.class));
  }
  if (this.isPrivacyModelSpecified(BasicBLikeness.class)) {
    list.addAll(this.getPrivacyModels(BasicBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    list.addAll(this.getPrivacyModels(EnhancedBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(LDiversity.class)) {
    list.addAll(this.getPrivacyModels(LDiversity.class));
  }
  if (this.isPrivacyModelSpecified(TCloseness.class)) {
    list.addAll(this.getPrivacyModels(TCloseness.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutor.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutor.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutorNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutorNoAttack.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalist.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalist.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalistNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalistNoAttack.class));
  }
  this.aCriteria=list.toArray(new PrivacyCriterion[0]);
  this.bCriteria=new SampleBasedCriterion[0];
  if (this.isPrivacyModelSpecified(SampleBasedCriterion.class)) {
    this.bCriteria=this.getPrivacyModels(SampleBasedCriterion.class).toArray(new SampleBasedCriterion[0]);
  }
  this.snapshotLength=2;
  if (this.requires(REQUIREMENT_DISTRIBUTION)) {
    this.snapshotLength+=2 * manager.getAggregationInformation().getHotThreshold();
  }
  if (this.requires(REQUIREMENT_SECONDARY_COUNTER)) {
    this.snapshotLength+=1;
  }
}","/** 
 * Initializes the configuration.
 * @param manager
 */
protected void initialize(DataManager manager){
  if (criteria.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.requirements=0x0;
  for (  PrivacyCriterion c : criteria) {
    this.requirements|=c.getRequirements();
  }
  if (manager.getDataAnalyzed().getArray() != null && !manager.getDataAnalyzed().isEmpty()) {
    this.requirements|=ARXConfiguration.REQUIREMENT_DISTRIBUTION;
  }
  for (  PrivacyCriterion c : criteria) {
    c.initialize(manager,this);
  }
  if (this.getSubset() != null) {
    numOutputRecords=getSubset().getArray().length;
  }
 else {
    numOutputRecords=manager.getDataGeneralized().getDataLength();
  }
  if (this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    absMaxOutliers=(int)numOutputRecords;
  }
 else {
    absMaxOutliers=(int)Math.floor(this.relMaxOutliers * (double)numOutputRecords);
  }
  List<PrivacyCriterion> list=new ArrayList<PrivacyCriterion>();
  if (this.isPrivacyModelSpecified(DPresence.class)) {
    list.add(this.getPrivacyModel(DPresence.class));
  }
  if (this.isPrivacyModelSpecified(KMap.class)) {
    list.add(this.getPrivacyModel(KMap.class));
  }
  if (this.isPrivacyModelSpecified(DDisclosurePrivacy.class)) {
    list.addAll(this.getPrivacyModels(DDisclosurePrivacy.class));
  }
  if (this.isPrivacyModelSpecified(BasicBLikeness.class)) {
    list.addAll(this.getPrivacyModels(BasicBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    list.addAll(this.getPrivacyModels(EnhancedBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(LDiversity.class)) {
    list.addAll(this.getPrivacyModels(LDiversity.class));
  }
  if (this.isPrivacyModelSpecified(TCloseness.class)) {
    list.addAll(this.getPrivacyModels(TCloseness.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutor.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutor.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutorNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutorNoAttack.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalist.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalist.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalistNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalistNoAttack.class));
  }
  this.aCriteria=list.toArray(new PrivacyCriterion[0]);
  this.bCriteria=new SampleBasedCriterion[0];
  if (this.isPrivacyModelSpecified(SampleBasedCriterion.class)) {
    this.bCriteria=this.getPrivacyModels(SampleBasedCriterion.class).toArray(new SampleBasedCriterion[0]);
  }
  this.snapshotLength=2;
  if (this.requires(REQUIREMENT_DISTRIBUTION)) {
    this.snapshotLength+=2 * manager.getAggregationInformation().getHotThreshold();
  }
  if (this.requires(REQUIREMENT_SECONDARY_COUNTER)) {
    this.snapshotLength+=1;
  }
}",0.97911051212938
107793,"/** 
 * Constructor.
 * @param solutions The solution space
 * @param complete Is the solution space characterized by an optimal algorithm
 * @param optimum The optimum
 * @param header The header
 * @param config The config
 */
ARXLattice(final SolutionSpace solutions,final boolean complete,final Transformation optimum,final String[] header,final ARXConfigurationInternal config){
  this.solutions=solutions;
  this.metric=config.getQualityModel();
  this.setMonotonicity(config.isSuppressionAlwaysEnabled(),config.getAbsoluteMaxOutliers());
  this.complete=complete;
  this.virtualSize=solutions.getSize();
  this.uncertainty=config.isPracticalMonotonicity();
  final Map<String,Integer> headermap=new HashMap<String,Integer>();
  int index=0;
  for (int i=0; i < header.length; i++) {
    headermap.put(header[i],index++);
  }
  if (complete) {
    buildComplete(optimum,headermap);
  }
 else {
    buildIncomplete(optimum,headermap);
  }
  outer:   for (int i=0; i < this.levels.length; i++) {
    final ARXNode[] level=this.levels[i];
    for (int j=0; j < level.length; j++) {
      final ARXNode node=level[j];
      if (node != null) {
        this.bottom=node;
        break outer;
      }
    }
  }
  outer:   for (int i=this.levels.length - 1; i >= 0; i--) {
    final ARXNode[] level=this.levels[i];
    for (int j=0; j < level.length; j++) {
      final ARXNode node=level[j];
      if (node != null) {
        this.top=node;
        break outer;
      }
    }
  }
  estimateInformationLoss();
}","/** 
 * Constructor.
 * @param solutions The solution space
 * @param complete Is the solution space characterized by an optimal algorithm
 * @param optimum The optimum
 * @param header The header
 * @param config The config
 */
ARXLattice(final SolutionSpace solutions,final boolean complete,final Transformation optimum,final String[] header,final ARXConfigurationInternal config){
  this.solutions=solutions;
  this.metric=config.getQualityModel();
  this.setMonotonicity(config.isSuppressionAlwaysEnabled(),config.getAbsoluteSuppressionLimit());
  this.complete=complete;
  this.virtualSize=solutions.getSize();
  this.uncertainty=config.isPracticalMonotonicity();
  final Map<String,Integer> headermap=new HashMap<String,Integer>();
  int index=0;
  for (int i=0; i < header.length; i++) {
    headermap.put(header[i],index++);
  }
  if (complete) {
    buildComplete(optimum,headermap);
  }
 else {
    buildIncomplete(optimum,headermap);
  }
  outer:   for (int i=0; i < this.levels.length; i++) {
    final ARXNode[] level=this.levels[i];
    for (int j=0; j < level.length; j++) {
      final ARXNode node=level[j];
      if (node != null) {
        this.bottom=node;
        break outer;
      }
    }
  }
  outer:   for (int i=this.levels.length - 1; i >= 0; i--) {
    final ARXNode[] level=this.levels[i];
    for (int j=0; j < level.length; j++) {
      final ARXNode node=level[j];
      if (node != null) {
        this.top=node;
        break outer;
      }
    }
  }
  estimateInformationLoss();
}",0.9910743801652891
107794,"/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public ARXProcessStatistics optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return new ARXProcessStatistics();
  }
  long time=System.currentTimeMillis();
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int initialRecords=0;
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
      initialRecords++;
    }
  }
  initialRecords=output.getNumRows() - initialRecords;
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setSuppressionLimit(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return new ARXProcessStatistics();
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    time=System.currentTimeMillis() - time;
    return new ARXProcessStatistics(result,initialRecords,optimized,time);
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}","/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public ARXProcessStatistics optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return new ARXProcessStatistics();
  }
  long time=System.currentTimeMillis();
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int initialRecords=0;
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
      initialRecords++;
    }
  }
  initialRecords=output.getNumRows() - initialRecords;
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * output.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setSuppressionLimit(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return new ARXProcessStatistics();
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    time=System.currentTimeMillis() - time;
    return new ARXProcessStatistics(result,initialRecords,optimized,time);
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}",0.9985902255639098
107795,"/** 
 * Applies the given transformation and returns the dataset
 * @param transformation
 * @param microaggregationDictionary A dictionary for microaggregated values
 * @return
 */
public TransformedData applyTransformation(final Transformation transformation,final Dictionary microaggregationDictionary){
  microaggregationDictionary.definalizeAll();
  int initialSize=(int)(inputGeneralized.getDataLength() * 0.01d);
  Transformer transformer=new Transformer(inputGeneralized.getArray(),inputAnalyzed,outputGeneralized,aggregation.getHeader().length,hierarchies,config);
  HashGroupify currentGroupify=new HashGroupify(initialSize,config,aggregation.getHeader().length,inputGeneralized.getArray(),outputGeneralized,inputAnalyzed);
  currentGroupify=transformer.apply(0L,transformation.getGeneralization(),currentGroupify);
  currentGroupify.stateAnalyze(transformation,true);
  if (!currentGroupify.isPrivacyModelFulfilled() && !config.isSuppressionAlwaysEnabled()) {
    currentGroupify.stateResetSuppression();
  }
  InformationLoss<?> loss=transformation.getInformationLoss();
  if (loss == null) {
    loss=metric.getInformationLoss(transformation,currentGroupify).getInformationLoss();
  }
  Data microaggregatedOutput=Data.createWrapper(new DataMatrix(0,0),new String[0],new int[0],new Dictionary(0));
  Data generalizedOutput=Data.createWrapper(transformer.getBuffer(),inputGeneralized.getHeader(),inputGeneralized.getColumns(),inputGeneralized.getDictionary());
  if (aggregation.getColdQIsFunctions().length > 0 || aggregation.getHotQIsNotGeneralizedFunctions().length > 0 || aggregation.getHotQIsGeneralizedFunctions().length > 0) {
    microaggregatedOutput=currentGroupify.performMicroaggregation(aggregation,microaggregationDictionary);
  }
  if (config.getAbsoluteMaxOutliers() != 0 || !currentGroupify.isPrivacyModelFulfilled()) {
    currentGroupify.performSuppression();
  }
  return new TransformedData(generalizedOutput,microaggregatedOutput,new TransformationResult(currentGroupify.isPrivacyModelFulfilled(),minimalClassSizeRequired ? currentGroupify.isMinimalClassSizeFulfilled() : null,loss,null));
}","/** 
 * Applies the given transformation and returns the dataset
 * @param transformation
 * @param microaggregationDictionary A dictionary for microaggregated values
 * @return
 */
public TransformedData applyTransformation(final Transformation transformation,final Dictionary microaggregationDictionary){
  microaggregationDictionary.definalizeAll();
  int initialSize=(int)(inputGeneralized.getDataLength() * 0.01d);
  Transformer transformer=new Transformer(inputGeneralized.getArray(),inputAnalyzed,outputGeneralized,aggregation.getHeader().length,hierarchies,config);
  HashGroupify currentGroupify=new HashGroupify(initialSize,config,aggregation.getHeader().length,inputGeneralized.getArray(),outputGeneralized,inputAnalyzed);
  currentGroupify=transformer.apply(0L,transformation.getGeneralization(),currentGroupify);
  currentGroupify.stateAnalyze(transformation,true);
  if (!currentGroupify.isPrivacyModelFulfilled() && !config.isSuppressionAlwaysEnabled()) {
    currentGroupify.stateResetSuppression();
  }
  InformationLoss<?> loss=transformation.getInformationLoss();
  if (loss == null) {
    loss=metric.getInformationLoss(transformation,currentGroupify).getInformationLoss();
  }
  Data microaggregatedOutput=Data.createWrapper(new DataMatrix(0,0),new String[0],new int[0],new Dictionary(0));
  Data generalizedOutput=Data.createWrapper(transformer.getBuffer(),inputGeneralized.getHeader(),inputGeneralized.getColumns(),inputGeneralized.getDictionary());
  if (aggregation.getColdQIsFunctions().length > 0 || aggregation.getHotQIsNotGeneralizedFunctions().length > 0 || aggregation.getHotQIsGeneralizedFunctions().length > 0) {
    microaggregatedOutput=currentGroupify.performMicroaggregation(aggregation,microaggregationDictionary);
  }
  if (config.getAbsoluteSuppressionLimit() != 0 || !currentGroupify.isPrivacyModelFulfilled()) {
    currentGroupify.performSuppression();
  }
  return new TransformedData(generalizedOutput,microaggregatedOutput,new TransformationResult(currentGroupify.isPrivacyModelFulfilled(),minimalClassSizeRequired ? currentGroupify.isMinimalClassSizeFulfilled() : null,loss,null));
}",0.9936545240893068
107796,"/** 
 * Marks all outliers in the output dataset
 */
public void performSuppression(){
  for (int row=0; row < dataOutput.getNumRows(); row++) {
    if (privacyModelDefinesSubset == null || privacyModelDefinesSubset.contains(row)) {
      final int hash=dataOutput.hashCode(row);
      final int index=hash & (hashTableBuckets.length - 1);
      HashGroupifyEntry m=hashTableBuckets[index];
      while ((m != null) && ((m.hashcode != hash) || !dataOutput.equalsIgnoringOutliers(row,m.row))) {
        m=m.next;
      }
      if (m == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (!m.isNotOutlier) {
        dataOutput.or(row,Data.OUTLIER_MASK);
      }
    }
 else {
      dataOutput.or(row,Data.OUTLIER_MASK);
    }
  }
}","/** 
 * Suppresses all records in the output dataset which <br> (a) do not satisfy privacy requirements, or <br> (b) are not included in the research subset
 */
public void performSuppression(){
  for (int row=0; row < dataOutput.getNumRows(); row++) {
    if (privacyModelDefinesSubset == null || privacyModelDefinesSubset.contains(row)) {
      final int hash=dataOutput.hashCode(row);
      final int index=hash & (hashTableBuckets.length - 1);
      HashGroupifyEntry m=hashTableBuckets[index];
      while ((m != null) && ((m.hashcode != hash) || !dataOutput.equalsIgnoringOutliers(row,m.row))) {
        m=m.next;
      }
      if (m == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (!m.isNotOutlier) {
        dataOutput.or(row,Data.OUTLIER_MASK);
      }
    }
 else {
      dataOutput.or(row,Data.OUTLIER_MASK);
    }
  }
}",0.8879310344827587
107797,"/** 
 * Constructs a new hash groupify operator.
 * @param capacity The capacity
 * @param aggregation The aggregation information
 * @param config The config
 * @param input
 * @param output
 * @param analyzed
 */
public HashGroupify(int capacity,final ARXConfigurationInternal config,final int dataAnalyzedNumberOfColumns,final DataMatrix input,final DataMatrix output,final DataMatrix analyzed){
  this.dataInput=input;
  this.dataOutput=output;
  this.dataAnalyzed=analyzed;
  this.dataAnalyzedNumberOfColumns=dataAnalyzedNumberOfColumns;
  capacity=HashTableUtil.calculateCapacity(capacity);
  this.hashTableElementCount=0;
  this.hashTableBuckets=new HashGroupifyEntry[capacity];
  this.hashTableThreshold=HashTableUtil.calculateThreshold(hashTableBuckets.length,hashTableLoadFactor);
  this.currentNumOutliers=0;
  this.suppressionLimit=config.getAbsoluteMaxOutliers();
  this.utilityMeasure=config.getQualityModel();
  this.heuristicForSampleBasedCriteria=config.isUseHeuristicForSampleBasedCriteria();
  if (config.getSubset() != null) {
    this.privacyModelDefinesSubset=config.getSubset().getSet();
  }
 else {
    this.privacyModelDefinesSubset=null;
  }
  this.classBasedCriteria=config.getClassBasedPrivacyModelsAsArray();
  this.sampleBasedCriteria=config.getSampleBasedPrivacyModelsAsArray();
  this.minimalClassSize=config.getMinimalGroupSize();
  for (int i=1; i < classBasedCriteria.length; i++) {
    if (classBasedCriteria[i] instanceof DPresence) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  privacyModelContainsDPresence=(classBasedCriteria.length > 0 && (classBasedCriteria[0] instanceof DPresence) && !(classBasedCriteria[0] instanceof Inclusion));
}","/** 
 * Constructs a new hash groupify operator.
 * @param capacity The capacity
 * @param aggregation The aggregation information
 * @param config The config
 * @param input
 * @param output
 * @param analyzed
 */
public HashGroupify(int capacity,final ARXConfigurationInternal config,final int dataAnalyzedNumberOfColumns,final DataMatrix input,final DataMatrix output,final DataMatrix analyzed){
  this.dataInput=input;
  this.dataOutput=output;
  this.dataAnalyzed=analyzed;
  this.dataAnalyzedNumberOfColumns=dataAnalyzedNumberOfColumns;
  capacity=HashTableUtil.calculateCapacity(capacity);
  this.hashTableElementCount=0;
  this.hashTableBuckets=new HashGroupifyEntry[capacity];
  this.hashTableThreshold=HashTableUtil.calculateThreshold(hashTableBuckets.length,hashTableLoadFactor);
  this.currentNumOutliers=0;
  this.suppressionLimit=config.getAbsoluteSuppressionLimit();
  this.utilityMeasure=config.getQualityModel();
  this.heuristicForSampleBasedCriteria=config.isUseHeuristicForSampleBasedCriteria();
  if (config.getSubset() != null) {
    this.privacyModelDefinesSubset=config.getSubset().getSet();
  }
 else {
    this.privacyModelDefinesSubset=null;
  }
  this.classBasedCriteria=config.getClassBasedPrivacyModelsAsArray();
  this.sampleBasedCriteria=config.getSampleBasedPrivacyModelsAsArray();
  this.minimalClassSize=config.getMinimalGroupSize();
  for (int i=1; i < classBasedCriteria.length; i++) {
    if (classBasedCriteria[i] instanceof DPresence) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  privacyModelContainsDPresence=(classBasedCriteria.length > 0 && (classBasedCriteria[0] instanceof DPresence) && !(classBasedCriteria[0] instanceof Inclusion));
}",0.9920611584827992
107798,"/** 
 * Performs a depth first search (without backtracking) starting from the the given transformation
 * @param queue
 * @param transformation
 */
private void dfs(PriorityQueue<Long> queue,Transformation transformation){
  if (mustStop()) {
    return;
  }
  Transformation next=expand(queue,transformation);
  if (next != null) {
    queue.remove(next);
    dfs(queue,next);
  }
}","/** 
 * Performs a depth first search (without backtracking) starting from the the given transformation
 * @param queue
 * @param transformation
 */
private void dfs(PriorityQueue<Long> queue,Transformation transformation){
  if (mustStop()) {
    return;
  }
  Transformation next=expand(queue,transformation);
  if (next != null) {
    queue.remove(next.getIdentifier());
    dfs(queue,next);
  }
}",0.979591836734694
107799,"/** 
 * Returns whether we can prune this Transformation
 * @param transformation
 * @return
 */
private boolean prune(Transformation transformation){
  if (transformation.hasProperty(propertyExpanded) || transformation.hasProperty(propertyInsufficientUtility)) {
    return true;
  }
  Transformation optimum=getGlobalOptimum();
  if (optimum != null) {
    InformationLoss<?> bound=transformation.getLowerBound();
    if (bound.compareTo(optimum.getInformationLoss()) >= 0) {
      transformation.setProperty(propertyInsufficientUtility);
      return true;
    }
  }
  return false;
}","/** 
 * Returns whether we can prune this Transformation
 * @param transformation
 * @return
 */
private boolean prune(Transformation transformation){
  if (transformation.hasProperty(propertyExpanded) || transformation.hasProperty(propertyInsufficientUtility)) {
    return true;
  }
  Transformation optimum=getGlobalOptimum();
  if (optimum != null) {
    InformationLoss<?> bound=transformation.getLowerBound();
    if (bound != null && bound.compareTo(optimum.getInformationLoss()) >= 0) {
      transformation.setProperty(propertyInsufficientUtility);
      return true;
    }
  }
  return false;
}",0.985726280436608
107800,"@Override public void mouseDown(MouseEvent e){
  Point pt=new Point(e.x,e.y);
  int index=table.getTopIndex();
  while (index < table.getItemCount()) {
    TableItem item=table.getItem(index);
    for (int i=0; i < 5; i++) {
      Rectangle rect=item.getBounds(i);
      if (rect.contains(pt)) {
        if ((i == 2 || i == 3) && e.button == SWT.BUTTON3) {
          menu.setLocation(table.toDisplay(e.x,e.y));
          menu.setVisible(true);
          return;
        }
 else         if (i == 4 && e.button == SWT.BUTTON1) {
          String attribute=model.getInputConfig().getInput().getHandle().getAttributeName(index);
          boolean isResponseVariable=!model.getInputDefinition().isResponseVariable(attribute);
          model.getInputDefinition().setResponseVariable(attribute,isResponseVariable);
          item.setImage(0,controller.getResources().getImage(model.getInputDefinition().getAttributeType(attribute),isResponseVariable));
          item.setImage(4,isResponseVariable ? IMAGE_ENABLED : IMAGE_DISABLED);
          controller.update(new ModelEvent(this,ModelPart.RESPONSE_VARIABLES,attribute));
          return;
        }
      }
    }
    index++;
  }
}","@Override public void mouseDown(MouseEvent e){
  Point pt=new Point(e.x,e.y);
  int index=table.getTopIndex();
  while (index < table.getItemCount()) {
    TableItem item=table.getItem(index);
    for (int i=0; i < 5; i++) {
      Rectangle rect=item.getBounds(i);
      if (rect.contains(pt)) {
        if ((i == 2 || i == 3) && e.button == 3) {
          menu.setLocation(table.toDisplay(e.x,e.y));
          menu.setVisible(true);
          return;
        }
 else         if (i == 4 && e.button == 1) {
          String attribute=model.getInputConfig().getInput().getHandle().getAttributeName(index);
          boolean isResponseVariable=!model.getInputDefinition().isResponseVariable(attribute);
          model.getInputDefinition().setResponseVariable(attribute,isResponseVariable);
          item.setImage(0,controller.getResources().getImage(model.getInputDefinition().getAttributeType(attribute),isResponseVariable));
          item.setImage(4,isResponseVariable ? IMAGE_ENABLED : IMAGE_DISABLED);
          controller.update(new ModelEvent(this,ModelPart.RESPONSE_VARIABLES,attribute));
          return;
        }
      }
    }
    index++;
  }
}",0.9914310197086548
107801,"/** 
 * Creates the required controls.
 * @param parent
 */
private void create(final Composite parent){
  this.table=SWTUtil.createTableDynamic(parent,SWT.SINGLE | SWT.V_SCROLL | SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setLayoutData(SWTUtil.createFillGridData());
  SWTUtil.createGenericTooltip(table);
  DynamicTableColumn column0=new DynamicTableColumn(table,SWT.NONE);
  column0.setText(""String_Node_Str"");
  column0.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column1=new DynamicTableColumn(table,SWT.NONE);
  column1.setText(Resources.getMessage(""String_Node_Str""));
  column1.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column2=new DynamicTableColumn(table,SWT.NONE);
  column2.setText(Resources.getMessage(""String_Node_Str""));
  column2.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column3=new DynamicTableColumn(table,SWT.NONE);
  column3.setText(Resources.getMessage(""String_Node_Str""));
  column3.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column4=new DynamicTableColumn(table,SWT.NONE);
  column4.setText(Resources.getMessage(""String_Node_Str""));
  column4.setWidth(""String_Node_Str"",""String_Node_Str"");
  column1.pack();
  column2.pack();
  column3.pack();
  column4.pack();
  this.table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
        return;
      }
      int index=table.getSelectionIndex();
      if (index >= 0 && index <= model.getInputConfig().getInput().getHandle().getNumColumns()) {
        String attribute=model.getInputConfig().getInput().getHandle().getAttributeName(index);
        model.setSelectedAttribute(attribute);
        controller.update(new ModelEvent(this,ModelPart.SELECTED_ATTRIBUTE,attribute));
      }
    }
  }
);
  final Menu menu=new Menu(this.table);
  for (  final String type : getDataTypes()) {
    MenuItem item=new MenuItem(menu,SWT.NONE);
    item.setText(type);
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        actionDataTypeChanged(type);
      }
    }
);
  }
  this.table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      Point pt=new Point(e.x,e.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        TableItem item=table.getItem(index);
        for (int i=0; i < 5; i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if ((i == 2 || i == 3) && e.button == SWT.BUTTON3) {
              menu.setLocation(table.toDisplay(e.x,e.y));
              menu.setVisible(true);
              return;
            }
 else             if (i == 4 && e.button == SWT.BUTTON1) {
              String attribute=model.getInputConfig().getInput().getHandle().getAttributeName(index);
              boolean isResponseVariable=!model.getInputDefinition().isResponseVariable(attribute);
              model.getInputDefinition().setResponseVariable(attribute,isResponseVariable);
              item.setImage(0,controller.getResources().getImage(model.getInputDefinition().getAttributeType(attribute),isResponseVariable));
              item.setImage(4,isResponseVariable ? IMAGE_ENABLED : IMAGE_DISABLED);
              controller.update(new ModelEvent(this,ModelPart.RESPONSE_VARIABLES,attribute));
              return;
            }
          }
        }
        index++;
      }
    }
  }
);
}","/** 
 * Creates the required controls.
 * @param parent
 */
private void create(final Composite parent){
  this.table=SWTUtil.createTableDynamic(parent,SWT.SINGLE | SWT.V_SCROLL | SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setLayoutData(SWTUtil.createFillGridData());
  SWTUtil.createGenericTooltip(table);
  DynamicTableColumn column0=new DynamicTableColumn(table,SWT.NONE);
  column0.setText(""String_Node_Str"");
  column0.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column1=new DynamicTableColumn(table,SWT.NONE);
  column1.setText(Resources.getMessage(""String_Node_Str""));
  column1.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column2=new DynamicTableColumn(table,SWT.NONE);
  column2.setText(Resources.getMessage(""String_Node_Str""));
  column2.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column3=new DynamicTableColumn(table,SWT.NONE);
  column3.setText(Resources.getMessage(""String_Node_Str""));
  column3.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column4=new DynamicTableColumn(table,SWT.NONE);
  column4.setText(Resources.getMessage(""String_Node_Str""));
  column4.setWidth(""String_Node_Str"",""String_Node_Str"");
  column1.pack();
  column2.pack();
  column3.pack();
  column4.pack();
  this.table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
        return;
      }
      int index=table.getSelectionIndex();
      if (index >= 0 && index <= model.getInputConfig().getInput().getHandle().getNumColumns()) {
        String attribute=model.getInputConfig().getInput().getHandle().getAttributeName(index);
        model.setSelectedAttribute(attribute);
        controller.update(new ModelEvent(this,ModelPart.SELECTED_ATTRIBUTE,attribute));
      }
    }
  }
);
  final Menu menu=new Menu(this.table);
  for (  final String type : getDataTypes()) {
    MenuItem item=new MenuItem(menu,SWT.NONE);
    item.setText(type);
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        actionDataTypeChanged(type);
      }
    }
);
  }
  this.table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      Point pt=new Point(e.x,e.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        TableItem item=table.getItem(index);
        for (int i=0; i < 5; i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if ((i == 2 || i == 3) && e.button == 3) {
              menu.setLocation(table.toDisplay(e.x,e.y));
              menu.setVisible(true);
              return;
            }
 else             if (i == 4 && e.button == 1) {
              String attribute=model.getInputConfig().getInput().getHandle().getAttributeName(index);
              boolean isResponseVariable=!model.getInputDefinition().isResponseVariable(attribute);
              model.getInputDefinition().setResponseVariable(attribute,isResponseVariable);
              item.setImage(0,controller.getResources().getImage(model.getInputDefinition().getAttributeType(attribute),isResponseVariable));
              item.setImage(4,isResponseVariable ? IMAGE_ENABLED : IMAGE_DISABLED);
              controller.update(new ModelEvent(this,ModelPart.RESPONSE_VARIABLES,attribute));
              return;
            }
          }
        }
        index++;
      }
    }
  }
);
}",0.9972811310494836
107802,"/** 
 * Kept only for backwards compatibility
 * @return
 */
boolean _legacySearchedWithFlash(){
  return complete;
}","/** 
 * Kept only for backwards compatibility
 * @return
 */
boolean _legacySearchedWithFlash(){
  return complete == null ? true : complete;
}",0.9
107803,"/** 
 * Builds the component
 * @param parent
 * @return
 */
private Composite build(final Composite parent){
  final Composite mBase=new Composite(parent,SWT.NONE);
  mBase.setLayout(GridLayoutFactory.swtDefaults().numColumns(4).create());
  final Label mLabel=new Label(mBase,SWT.PUSH);
  mLabel.setText(Resources.getMessage(""String_Node_Str""));
  GridData d2=new GridData();
  d2.heightHint=LABEL_HEIGHT;
  d2.minimumHeight=LABEL_HEIGHT;
  d2.grabExcessVerticalSpace=true;
  d2.verticalAlignment=GridData.CENTER;
  mLabel.setLayoutData(d2);
  comboMetric=new Combo(mBase,SWT.READ_ONLY);
  GridData d30=SWTUtil.createFillHorizontallyGridData();
  d30.horizontalSpan=3;
  d30.verticalAlignment=GridData.CENTER;
  d30.grabExcessVerticalSpace=true;
  comboMetric.setLayoutData(d30);
  comboMetric.setItems(LABELS);
  comboMetric.select(0);
  comboMetric.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      if (comboMetric.getSelectionIndex() != -1) {
        MetricDescription metric=METRICS.get(comboMetric.getSelectionIndex());
        if (metric != null && model != null) {
          model.setMetricDescription(metric);
          controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
          updateControls();
        }
      }
    }
  }
);
  final Label mLabel2=new Label(mBase,SWT.PUSH);
  mLabel2.setText(Resources.getMessage(""String_Node_Str""));
  GridData d22=new GridData();
  d22.heightHint=LABEL_HEIGHT;
  d22.minimumHeight=LABEL_HEIGHT;
  d22.grabExcessVerticalSpace=true;
  d22.verticalAlignment=GridData.CENTER;
  mLabel2.setLayoutData(d22);
  monotonicVariant=new Button(mBase,SWT.CHECK);
  monotonicVariant.setText(Resources.getMessage(""String_Node_Str""));
  monotonicVariant.setSelection(false);
  monotonicVariant.setEnabled(false);
  monotonicVariant.setLayoutData(GridDataFactory.swtDefaults().span(3,1).grab(false,true).align(GridData.BEGINNING,GridData.CENTER).create());
  monotonicVariant.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setMonotonic(monotonicVariant.getSelection());
      controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
    }
  }
);
  final Label mLabel4=new Label(mBase,SWT.PUSH);
  mLabel4.setText(Resources.getMessage(""String_Node_Str""));
  GridData d24=new GridData();
  d24.heightHint=LABEL_HEIGHT;
  d24.minimumHeight=LABEL_HEIGHT;
  d24.grabExcessVerticalSpace=true;
  d24.verticalAlignment=GridData.CENTER;
  mLabel4.setLayoutData(d24);
  final Label mLabel3=new Label(mBase,SWT.PUSH);
  mLabel3.setText(Resources.getMessage(""String_Node_Str""));
  GridData d23=new GridData();
  d23.heightHint=LABEL_HEIGHT;
  d23.minimumHeight=LABEL_HEIGHT;
  d23.grabExcessVerticalSpace=true;
  d23.verticalAlignment=GridData.CENTER;
  mLabel3.setLayoutData(d23);
  comboAggregate=new Combo(mBase,SWT.READ_ONLY);
  GridData d31=SWTUtil.createFillHorizontallyGridData();
  d31.horizontalSpan=3;
  d31.grabExcessVerticalSpace=true;
  d31.verticalAlignment=GridData.CENTER;
  comboAggregate.setLayoutData(d31);
  comboAggregate.setEnabled(false);
  comboAggregate.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      String selected=comboAggregate.getItem(comboAggregate.getSelectionIndex());
      for (      AggregateFunction function : model.getMetricDescription().getSupportedAggregateFunctions()) {
        if (function.toString().equals(selected)) {
          model.getMetricConfiguration().setAggregateFunction(function);
          controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
        }
      }
    }
  }
);
  return mBase;
}","/** 
 * Builds the component
 * @param parent
 * @return
 */
private Composite build(final Composite parent){
  final Composite mBase=new Composite(parent,SWT.NONE);
  mBase.setLayout(GridLayoutFactory.swtDefaults().numColumns(4).create());
  final Label mLabel=new Label(mBase,SWT.PUSH);
  mLabel.setText(Resources.getMessage(""String_Node_Str""));
  GridData d2=new GridData();
  d2.heightHint=LABEL_HEIGHT;
  d2.minimumHeight=LABEL_HEIGHT;
  d2.grabExcessVerticalSpace=true;
  d2.verticalAlignment=GridData.CENTER;
  mLabel.setLayoutData(d2);
  comboMetric=new Combo(mBase,SWT.READ_ONLY);
  GridData d30=SWTUtil.createFillHorizontallyGridData();
  d30.horizontalSpan=3;
  d30.verticalAlignment=GridData.CENTER;
  d30.grabExcessVerticalSpace=true;
  comboMetric.setLayoutData(d30);
  comboMetric.setItems(LABELS);
  comboMetric.select(0);
  comboMetric.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      if (comboMetric.getSelectionIndex() != -1) {
        MetricDescription metric=METRICS.get(comboMetric.getSelectionIndex());
        if (metric != null && model != null) {
          model.setMetricDescription(metric);
          controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
          updateControls();
        }
      }
    }
  }
);
  final Label mLabel2=new Label(mBase,SWT.PUSH);
  mLabel2.setText(Resources.getMessage(""String_Node_Str""));
  GridData d22=new GridData();
  d22.heightHint=LABEL_HEIGHT;
  d22.minimumHeight=LABEL_HEIGHT;
  d22.grabExcessVerticalSpace=true;
  d22.verticalAlignment=GridData.CENTER;
  mLabel2.setLayoutData(d22);
  monotonicVariant=new Button(mBase,SWT.CHECK);
  monotonicVariant.setText(Resources.getMessage(""String_Node_Str""));
  monotonicVariant.setSelection(false);
  monotonicVariant.setEnabled(false);
  monotonicVariant.setLayoutData(GridDataFactory.swtDefaults().span(3,1).grab(false,true).align(GridData.BEGINNING,GridData.CENTER).create());
  monotonicVariant.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setMonotonic(monotonicVariant.getSelection());
      controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
    }
  }
);
  final Label mLabel3=new Label(mBase,SWT.PUSH);
  mLabel3.setText(Resources.getMessage(""String_Node_Str""));
  GridData d23=new GridData();
  d23.heightHint=LABEL_HEIGHT;
  d23.minimumHeight=LABEL_HEIGHT;
  d23.grabExcessVerticalSpace=true;
  d23.verticalAlignment=GridData.CENTER;
  mLabel3.setLayoutData(d23);
  comboAggregate=new Combo(mBase,SWT.READ_ONLY);
  GridData d31=SWTUtil.createFillHorizontallyGridData();
  d31.horizontalSpan=3;
  d31.grabExcessVerticalSpace=true;
  d31.verticalAlignment=GridData.CENTER;
  comboAggregate.setLayoutData(d31);
  comboAggregate.setEnabled(false);
  comboAggregate.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      String selected=comboAggregate.getItem(comboAggregate.getSelectionIndex());
      for (      AggregateFunction function : model.getMetricDescription().getSupportedAggregateFunctions()) {
        if (function.toString().equals(selected)) {
          model.getMetricConfiguration().setAggregateFunction(function);
          controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
        }
      }
    }
  }
);
  return mBase;
}",0.9575279063435884
107804,"/** 
 * Initializes the configuration.
 * @param manager
 */
protected void initialize(DataManager manager){
  if (criteria.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.requirements=0x0;
  for (  PrivacyCriterion c : criteria) {
    this.requirements|=c.getRequirements();
  }
  if (manager.getDataAnalyzed().getArray() != null && !manager.getDataAnalyzed().isEmpty()) {
    this.requirements|=ARXConfiguration.REQUIREMENT_DISTRIBUTION;
  }
  for (  PrivacyCriterion c : criteria) {
    c.initialize(manager,this);
  }
  int dataLength=0;
  if (this.getSubset() != null) {
    dataLength=getSubset().getArray().length;
  }
 else {
    dataLength=manager.getDataGeneralized().getDataLength();
  }
  if (this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    absMaxOutliers=(int)dataLength;
  }
 else {
    absMaxOutliers=(int)Math.floor(this.relMaxOutliers * (double)dataLength);
  }
  List<PrivacyCriterion> list=new ArrayList<PrivacyCriterion>();
  if (this.isPrivacyModelSpecified(DPresence.class)) {
    list.add(this.getPrivacyModel(DPresence.class));
  }
  if (this.isPrivacyModelSpecified(KMap.class)) {
    list.add(this.getPrivacyModel(KMap.class));
  }
  if (this.isPrivacyModelSpecified(DDisclosurePrivacy.class)) {
    list.addAll(this.getPrivacyModels(DDisclosurePrivacy.class));
  }
  if (this.isPrivacyModelSpecified(BasicBLikeness.class)) {
    list.addAll(this.getPrivacyModels(BasicBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    list.addAll(this.getPrivacyModels(EnhancedBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(LDiversity.class)) {
    list.addAll(this.getPrivacyModels(LDiversity.class));
  }
  if (this.isPrivacyModelSpecified(TCloseness.class)) {
    list.addAll(this.getPrivacyModels(TCloseness.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutor.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutor.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutorNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutorNoAttack.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalist.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalist.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalistNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalistNoAttack.class));
  }
  this.aCriteria=list.toArray(new PrivacyCriterion[0]);
  this.bCriteria=new SampleBasedCriterion[0];
  if (this.isPrivacyModelSpecified(SampleBasedCriterion.class)) {
    this.bCriteria=this.getPrivacyModels(SampleBasedCriterion.class).toArray(new SampleBasedCriterion[0]);
  }
  this.snapshotLength=2;
  if (this.requires(REQUIREMENT_DISTRIBUTION)) {
    this.snapshotLength+=2 * manager.getDataAnalyzed().getHeader().length;
  }
  if (this.requires(REQUIREMENT_SECONDARY_COUNTER)) {
    this.snapshotLength+=1;
  }
}","/** 
 * Initializes the configuration.
 * @param manager
 */
protected void initialize(DataManager manager){
  if (criteria.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.requirements=0x0;
  for (  PrivacyCriterion c : criteria) {
    this.requirements|=c.getRequirements();
  }
  if (manager.getDataAnalyzed().getArray() != null && !manager.getDataAnalyzed().isEmpty()) {
    this.requirements|=ARXConfiguration.REQUIREMENT_DISTRIBUTION;
  }
  for (  PrivacyCriterion c : criteria) {
    c.initialize(manager,this);
  }
  int dataLength=0;
  if (this.getSubset() != null) {
    dataLength=getSubset().getArray().length;
  }
 else {
    dataLength=manager.getDataGeneralized().getDataLength();
  }
  if (this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    absMaxOutliers=(int)dataLength;
  }
 else {
    absMaxOutliers=(int)Math.floor(this.relMaxOutliers * (double)dataLength);
  }
  List<PrivacyCriterion> list=new ArrayList<PrivacyCriterion>();
  if (this.isPrivacyModelSpecified(DPresence.class)) {
    list.add(this.getPrivacyModel(DPresence.class));
  }
  if (this.isPrivacyModelSpecified(KMap.class)) {
    list.add(this.getPrivacyModel(KMap.class));
  }
  if (this.isPrivacyModelSpecified(DDisclosurePrivacy.class)) {
    list.addAll(this.getPrivacyModels(DDisclosurePrivacy.class));
  }
  if (this.isPrivacyModelSpecified(BasicBLikeness.class)) {
    list.addAll(this.getPrivacyModels(BasicBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    list.addAll(this.getPrivacyModels(EnhancedBLikeness.class));
  }
  if (this.isPrivacyModelSpecified(LDiversity.class)) {
    list.addAll(this.getPrivacyModels(LDiversity.class));
  }
  if (this.isPrivacyModelSpecified(TCloseness.class)) {
    list.addAll(this.getPrivacyModels(TCloseness.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutor.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutor.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityProsecutorNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityProsecutorNoAttack.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalist.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalist.class));
  }
  if (this.isPrivacyModelSpecified(ProfitabilityJournalistNoAttack.class)) {
    list.addAll(this.getPrivacyModels(ProfitabilityJournalistNoAttack.class));
  }
  this.aCriteria=list.toArray(new PrivacyCriterion[0]);
  this.bCriteria=new SampleBasedCriterion[0];
  if (this.isPrivacyModelSpecified(SampleBasedCriterion.class)) {
    this.bCriteria=this.getPrivacyModels(SampleBasedCriterion.class).toArray(new SampleBasedCriterion[0]);
  }
  this.snapshotLength=2;
  if (this.requires(REQUIREMENT_DISTRIBUTION)) {
    this.snapshotLength+=2 * manager.getAggregationInformation().getHotThreshold();
  }
  if (this.requires(REQUIREMENT_SECONDARY_COUNTER)) {
    this.snapshotLength+=1;
  }
}",0.9900388316731388
107805,"/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return 0;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.checker.getInputBuffer())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
    }
  }
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setMaxOutliers(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return 0;
  }
  TransformedData data=result.checker.applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    return optimized;
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}","/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return 0;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
    }
  }
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setMaxOutliers(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return 0;
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    return optimized;
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}",0.9918429773132806
107806,"/** 
 * Returns whether local recoding can be applied to the given handle
 * @param handle
 * @return
 */
public boolean isOptimizable(DataHandle handle){
  if (!(handle instanceof DataHandleOutput)) {
    return false;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.checker.getInputBuffer())) {
    return false;
  }
  for (  PrivacyCriterion c : config.getPrivacyModels()) {
    if (!c.isLocalRecodingSupported()) {
      return false;
    }
  }
  int outliers=0;
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      outliers++;
    }
  }
  if (config.getMinimalGroupSize() != Integer.MAX_VALUE && outliers < config.getMinimalGroupSize()) {
    return false;
  }
  if (outliers == 0) {
    return false;
  }
  return true;
}","/** 
 * Returns whether local recoding can be applied to the given handle
 * @param handle
 * @return
 */
public boolean isOptimizable(DataHandle handle){
  if (!(handle instanceof DataHandleOutput)) {
    return false;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized())) {
    return false;
  }
  for (  PrivacyCriterion c : config.getPrivacyModels()) {
    if (!c.isLocalRecodingSupported()) {
      return false;
    }
  }
  int outliers=0;
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      outliers++;
    }
  }
  if (config.getMinimalGroupSize() != Integer.MAX_VALUE && outliers < config.getMinimalGroupSize()) {
    return false;
  }
  if (outliers == 0) {
    return false;
  }
  return true;
}",0.9719298245614036
107807,"/** 
 * Creates a new instance.
 * @param anonymizer
 * @param registry
 * @param manager
 * @param checker
 * @param definition
 * @param config
 * @param lattice
 * @param duration
 * @param solutionSpace
 */
protected ARXResult(ARXAnonymizer anonymizer,DataRegistry registry,DataManager manager,TransformationChecker checker,DataDefinition definition,ARXConfiguration config,ARXLattice lattice,long duration,SolutionSpace solutionSpace){
  this.anonymizer=anonymizer;
  this.registry=registry;
  this.manager=manager;
  this.checker=checker;
  this.definition=definition;
  this.config=config;
  this.lattice=lattice;
  this.optimalNode=lattice.getOptimum();
  this.duration=duration;
  this.solutionSpace=solutionSpace;
}","/** 
 * Creates a new instance.
 * @param anonymizer
 * @param registry
 * @param manager
 * @param checker
 * @param definition
 * @param config
 * @param lattice
 * @param duration
 * @param solutionSpace
 */
protected ARXResult(ARXAnonymizer anonymizer,DataRegistry registry,DataManager manager,TransformationChecker checker,DataDefinition definition,ARXConfiguration config,ARXLattice lattice,long duration,SolutionSpace solutionSpace){
  this.anonymizer=anonymizer;
  this.registry=registry;
  this.manager=manager;
  this.buffer=checker.getOutputBuffer();
  this.definition=definition;
  this.config=config;
  this.lattice=lattice;
  this.optimalNode=lattice.getOptimum();
  this.duration=duration;
  this.solutionSpace=solutionSpace;
}",0.8275391956373551
107808,"@Override public void traverse(){
  FLASHPhaseConfiguration outerLoopConfiguration;
  if (config.isBinaryPhaseRequired()) {
    outerLoopConfiguration=config.getBinaryPhaseConfiguration();
  }
 else {
    outerLoopConfiguration=config.getLinearPhaseConfiguration();
  }
  checker.getHistory().setStorageStrategy(config.getSnapshotStorageStrategy());
  PriorityQueue<Integer> queue=new PriorityQueue<Integer>(solutionSpace.getTop().getLevel() + 1,strategy);
  Transformation bottom=solutionSpace.getBottom();
  Transformation top=solutionSpace.getTop();
  TransformationChecker.Result result=checker.check(bottom);
  bottom.setProperty(solutionSpace.getPropertyForceSnapshot());
  bottom.setData(result);
  for (int level=bottom.getLevel(); level <= top.getLevel(); level++) {
    for (    int id : getSortedUnprocessedNodes(level,outerLoopConfiguration.getTriggerSkip())) {
      Transformation transformation=solutionSpace.getTransformation(id);
      if (config.isBinaryPhaseRequired()) {
        binarySearch(transformation,queue);
      }
 else {
        linearSearch(transformation);
      }
    }
  }
  computeUtilityForMonotonicMetrics(bottom);
  computeUtilityForMonotonicMetrics(top);
  bottom.setData(null);
  if (potentiallyInsufficientUtility != null) {
    potentiallyInsufficientUtility.clear();
  }
}","@Override public void traverse(){
  FLASHPhaseConfiguration outerLoopConfiguration;
  if (config.isBinaryPhaseRequired()) {
    outerLoopConfiguration=config.getBinaryPhaseConfiguration();
  }
 else {
    outerLoopConfiguration=config.getLinearPhaseConfiguration();
  }
  checker.getHistory().setStorageStrategy(config.getSnapshotStorageStrategy());
  PriorityQueue<Integer> queue=new PriorityQueue<Integer>(solutionSpace.getTop().getLevel() + 1,strategy);
  Transformation bottom=solutionSpace.getBottom();
  Transformation top=solutionSpace.getTop();
  TransformationResult result=checker.check(bottom);
  bottom.setProperty(solutionSpace.getPropertyForceSnapshot());
  bottom.setData(result);
  for (int level=bottom.getLevel(); level <= top.getLevel(); level++) {
    for (    int id : getSortedUnprocessedNodes(level,outerLoopConfiguration.getTriggerSkip())) {
      Transformation transformation=solutionSpace.getTransformation(id);
      if (config.isBinaryPhaseRequired()) {
        binarySearch(transformation,queue);
      }
 else {
        linearSearch(transformation);
      }
    }
  }
  computeUtilityForMonotonicMetrics(bottom);
  computeUtilityForMonotonicMetrics(top);
  bottom.setData(null);
  if (potentiallyInsufficientUtility != null) {
    potentiallyInsufficientUtility.clear();
  }
}",0.9969488939740656
107809,"@Override public void initialize(DataManager manager,ARXConfiguration config){
  this.shares=manager.getDomainShares();
  this.config=config.getCostBenefitConfiguration();
  this.riskModel=new RiskModelCostBenefit(this.config);
  this.aggregation=manager.getMicroAggregationData();
  this.maxIL=MetricSDNMEntropyBasedInformationLoss.getMaximalEntropyBasedInformationLoss(this.shares,this.aggregation);
}","@Override public void initialize(DataManager manager,ARXConfiguration config){
  this.shares=manager.getDomainShares();
  this.config=config.getCostBenefitConfiguration();
  this.riskModel=new RiskModelCostBenefit(this.config);
  this.aggregation=manager.getAggregationInformation();
  this.maxIL=MetricSDNMEntropyBasedInformationLoss.getMaximalEntropyBasedInformationLoss(this.shares,this.aggregation);
}",0.9752475247524752
107810,"/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return 0;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
    }
  }
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setMaxOutliers(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return 0;
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    return optimized;
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}","/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return 0;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
    }
  }
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setMaxOutliers(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return 0;
  }
  TransformedData data=result.checker.getApplicator().applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  DataMatrix oldGeneralized=output.getOutputBufferGeneralized().getArray();
  DataMatrix oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  DataMatrix newGeneralized=data.bufferGeneralized.getArray();
  DataMatrix newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.getNumRows() != 0) {
          oldGeneralized.copyFrom(oldIndex,newGeneralized,newIndex);
          optimized+=(newGeneralized.get(newIndex,0) & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.getNumRows() != 0) {
          oldMicroaggregated.copyFrom(oldIndex,newMicroaggregated,newIndex);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    return optimized;
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}",0.9986035292624096
107811,"/** 
 * Returns whether local recoding can be applied to the given handle
 * @param handle
 * @return
 */
public boolean isOptimizable(DataHandle handle){
  if (!(handle instanceof DataHandleOutput)) {
    return false;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized())) {
    return false;
  }
  for (  PrivacyCriterion c : config.getPrivacyModels()) {
    if (!c.isLocalRecodingSupported()) {
      return false;
    }
  }
  int outliers=0;
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      outliers++;
    }
  }
  if (config.getMinimalGroupSize() != Integer.MAX_VALUE && outliers < config.getMinimalGroupSize()) {
    return false;
  }
  if (outliers == 0) {
    return false;
  }
  return true;
}","/** 
 * Returns whether local recoding can be applied to the given handle
 * @param handle
 * @return
 */
public boolean isOptimizable(DataHandle handle){
  if (!(handle instanceof DataHandleOutput)) {
    return false;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.manager.getDataGeneralized().getArray())) {
    return false;
  }
  for (  PrivacyCriterion c : config.getPrivacyModels()) {
    if (!c.isLocalRecodingSupported()) {
      return false;
    }
  }
  int outliers=0;
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      outliers++;
    }
  }
  if (config.getMinimalGroupSize() != Integer.MAX_VALUE && outliers < config.getMinimalGroupSize()) {
    return false;
  }
  if (outliers == 0) {
    return false;
  }
  return true;
}",0.9936231884057972
107812,"/** 
 * Sets the selected attribute.
 * @param attribute
 */
public void setSelectedAttribute(String attribute){
  int index=-1;
  if (context.getHandle() != null) {
    index=context.getHandle().getColumnIndexOf(attribute);
  }
  this.context.setSelectedIndex(index);
  if (index == -1 || index == 0) {
    this.getViewportLayer().setOriginX(0);
    return;
  }
  int width=this.table.getBounds().width - this.table.getVerticalBar().getSize().x;
  int rowHeaderWidth=gridLayer.getRowHeaderLayer().getClientAreaProvider().getClientArea().width;
  int originX=this.getViewportLayer().getOrigin().getX();
  int columnPositionX=this.getViewportLayer().getStartXOfColumnPosition(this.getViewportLayer().getColumnPositionByIndex(index + 1));
  int positionX=originX + (columnPositionX + rowHeaderWidth);
  if (positionX < originX || positionX > originX + width) {
    this.getViewportLayer().setOriginX(positionX - rowHeaderWidth);
  }
  this.redraw();
}","/** 
 * Sets the selected attribute.
 * @param attribute
 */
public void setSelectedAttribute(String attribute){
  int index=-1;
  if (context.getHandle() != null) {
    index=context.getHandle().getColumnIndexOf(attribute);
  }
  this.context.setSelectedIndex(index);
  if (index == -1 || index == 0) {
    this.getViewportLayer().setOriginX(0);
    this.redraw();
    return;
  }
  int width=this.table.getBounds().width - this.table.getVerticalBar().getSize().x;
  int rowHeaderWidth=gridLayer.getRowHeaderLayer().getClientAreaProvider().getClientArea().width;
  int originX=this.getViewportLayer().getOrigin().getX();
  int columnPositionX=this.getViewportLayer().getStartXOfColumnPosition(this.getViewportLayer().getColumnPositionByIndex(index + 1));
  int positionX=originX + (columnPositionX + rowHeaderWidth);
  if (positionX < originX || positionX > originX + width) {
    this.getViewportLayer().setOriginX(positionX - rowHeaderWidth);
  }
  this.redraw();
}",0.9900886802295252
107813,"/** 
 * Performs a depth first search (without backtracking) starting from the the given transformation
 * @param queue
 * @param transformation
 */
private void dfs(PriorityQueue<Long> queue,Transformation transformation){
  if (mustStop()) {
    return;
  }
  Transformation next=expand(queue,transformation);
  if (next != null) {
    queue.remove(next);
    dfs(queue,next);
  }
}","/** 
 * Performs a depth first search (without backtracking) starting from the the given transformation
 * @param queue
 * @param transformation
 */
private void dfs(PriorityQueue<Long> queue,Transformation transformation){
  if (mustStop()) {
    return;
  }
  Transformation next=expand(queue,transformation);
  if (next != null) {
    queue.remove(next.getIdentifier());
    dfs(queue,next);
  }
}",0.979591836734694
107814,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  Composite upper=new Composite(sash,SWT.NONE);
  upper.setLayout(SWTUtil.createGridLayout(1));
  ComponentTitledSeparator separator1=new ComponentTitledSeparator(upper,SWT.NONE);
  separator1.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  separator1.setText(Resources.getMessage(""String_Node_Str""));
  this.table=SWTUtil.createTableDynamic(upper,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  this.table.setLayoutData(SWTUtil.createFillGridData());
  List<String> columns=getColumns();
  int perc=(int)Math.floor(100d / (double)columns.size());
  for (  String column : columns) {
    DynamicTableColumn c=new DynamicTableColumn(this.table,SWT.LEFT);
    c.setWidth(perc + ""String_Node_Str"",""String_Node_Str"");
    c.setText(column);
    SWTUtil.createColumnWithBarCharts(table,c);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  if (getTarget() == ModelPart.OUTPUT) {
    Composite lower=new Composite(sash,SWT.NONE);
    lower.setLayout(SWTUtil.createGridLayout(1));
    ComponentTitledSeparator separator2=new ComponentTitledSeparator(lower,SWT.NONE);
    separator2.setLayoutData(SWTUtil.createFillHorizontallyGridData());
    separator2.setText(Resources.getMessage(""String_Node_Str""));
    this.table2=SWTUtil.createTableDynamic(lower,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
    this.table2.setHeaderVisible(true);
    this.table2.setLinesVisible(true);
    this.table2.setMenu(new ClipboardHandlerTable(table).getMenu());
    this.table2.setLayoutData(SWTUtil.createFillGridData());
    List<String> columns2=getColumns2();
    int perc2=(int)Math.floor(100d / (double)columns2.size());
    for (    String column : columns2) {
      DynamicTableColumn c=new DynamicTableColumn(this.table2,SWT.LEFT);
      c.setWidth(perc2 + ""String_Node_Str"",""String_Node_Str"");
      c.setText(column);
      SWTUtil.createColumnWithBarCharts(table2,c);
    }
    for (    final TableColumn col : table2.getColumns()) {
      col.pack();
    }
    SWTUtil.createGenericTooltip(table);
  }
  if (getTarget() == ModelPart.OUTPUT) {
    sash.setWeights(new int[]{2,1});
  }
 else {
    sash.setWeights(new int[]{2});
  }
  this.root.layout();
  this.root.pack();
  return this.root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  Composite upper=new Composite(sash,SWT.NONE);
  upper.setLayout(SWTUtil.createGridLayout(1));
  ComponentTitledSeparator separator1=new ComponentTitledSeparator(upper,SWT.NONE);
  separator1.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  separator1.setText(Resources.getMessage(""String_Node_Str""));
  this.table=SWTUtil.createTableDynamic(upper,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  this.table.setLayoutData(SWTUtil.createFillGridData());
  List<String> columns=getColumns();
  int perc=(int)Math.floor(100d / (double)columns.size());
  for (  String column : columns) {
    DynamicTableColumn c=new DynamicTableColumn(this.table,SWT.LEFT);
    c.setWidth(perc + ""String_Node_Str"",""String_Node_Str"");
    c.setText(column);
    SWTUtil.createColumnWithBarCharts(table,c);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  if (getTarget() == ModelPart.OUTPUT) {
    Composite lower=new Composite(sash,SWT.NONE);
    lower.setLayout(SWTUtil.createGridLayout(1));
    ComponentTitledSeparator separator2=new ComponentTitledSeparator(lower,SWT.NONE);
    separator2.setLayoutData(SWTUtil.createFillHorizontallyGridData());
    separator2.setText(Resources.getMessage(""String_Node_Str""));
    this.table2=SWTUtil.createTableDynamic(lower,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
    this.table2.setHeaderVisible(true);
    this.table2.setLinesVisible(true);
    this.table2.setMenu(new ClipboardHandlerTable(table2).getMenu());
    this.table2.setLayoutData(SWTUtil.createFillGridData());
    List<String> columns2=getColumns2();
    int perc2=(int)Math.floor(100d / (double)columns2.size());
    for (    String column : columns2) {
      DynamicTableColumn c=new DynamicTableColumn(this.table2,SWT.LEFT);
      c.setWidth(perc2 + ""String_Node_Str"",""String_Node_Str"");
      c.setText(column);
      SWTUtil.createColumnWithBarCharts(table2,c);
    }
    for (    final TableColumn col : table2.getColumns()) {
      col.pack();
    }
    SWTUtil.createGenericTooltip(table);
  }
  if (getTarget() == ModelPart.OUTPUT) {
    sash.setWeights(new int[]{2,1});
  }
 else {
    sash.setWeights(new int[]{2});
  }
  this.root.layout();
  this.root.pack();
  return this.root;
}",0.9998102826788086
107815,"/** 
 * Reads the data definition from the file.
 * @param config
 * @param output 
 * @param definition
 * @param prefix
 * @param zip
 * @throws IOException
 * @throws SAXException
 */
private void readDefinition(final ModelConfiguration config,final boolean output,final DataDefinition definition,final String prefix,final ZipFile zip) throws IOException, SAXException {
  final ZipEntry entry=zip.getEntry(prefix + ""String_Node_Str"");
  if (entry == null) {
    return;
  }
  final XMLReader xmlReader=XMLReaderFactory.createXMLReader();
  final InputSource inputSource=new InputSource(new BufferedInputStream(zip.getInputStream(entry)));
  xmlReader.setContentHandler(new XMLHandler(){
    String attr, dtype, atype, ref, min, max, format;
    @Override protected boolean end(    final String uri,    final String localName,    final String qName) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        if (attr == null) {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          if (dtype.equals(DataType.STRING.toString())) {
            definition.setDataType(attr,DataType.STRING);
          }
 else           if (dtype.equals(DataType.DECIMAL.toString())) {
            definition.setDataType(attr,DataType.DECIMAL);
          }
 else {
            definition.setDataType(attr,DataType.createDate(dtype));
          }
        }
 else         if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          DataType<?> datatype=null;
          for (          DataTypeDescription<?> description : DataType.list()) {
            if (description.getLabel().equals(dtype)) {
              if (format != null) {
                if (!description.hasFormat()) {
                  throw new RuntimeException(Resources.getMessage(""String_Node_Str""));
                }
                datatype=description.newInstance(format);
              }
 else {
                datatype=description.newInstance();
              }
              break;
            }
          }
          if (datatype == null) {
            throw new RuntimeException(Resources.getMessage(""String_Node_Str"") + attr);
          }
          definition.setDataType(attr,datatype);
        }
        if (atype.equals(AttributeType.IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.IDENTIFYING_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.SENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.SENSITIVE_ATTRIBUTE);
          if (ref != null) {
            try {
              if (config.getHierarchy(attr) == null) {
                config.setHierarchy(attr,readHierarchy(zip,prefix,ref));
              }
            }
 catch (            final IOException e) {
              throw new SAXException(e);
            }
          }
        }
 else         if (atype.equals(AttributeType.INSENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.INSENSITIVE_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.QUASI_IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.QUASI_IDENTIFYING_ATTRIBUTE);
          if (config.getTransformationMode(attr) == ModelTransformationMode.MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation);
          }
          Hierarchy hierarchy=config.getHierarchy(attr);
          if (hierarchy == null) {
            if (ref != null) {
              try {
                if (output && zip.getEntry(prefix + ref) == null) {
                  String[] data=config.getInput().getHandle().getDistinctValues(config.getInput().getHandle().getColumnIndexOf(attr));
                  String[][] array=new String[data.length][];
                  for (int i=0; i < data.length; i++) {
                    array[i]=new String[]{data[i]};
                  }
                  hierarchy=Hierarchy.create(array);
                }
 else {
                  hierarchy=readHierarchy(zip,prefix,ref);
                }
              }
 catch (              final IOException e) {
                throw new SAXException(e);
              }
            }
          }
          if (hierarchy != null && hierarchy.getHierarchy() != null) {
            config.setHierarchy(attr,hierarchy);
            definition.setHierarchy(attr,hierarchy);
            int height=hierarchy.getHierarchy().length > 0 ? hierarchy.getHierarchy()[0].length : 0;
            if (min.equals(""String_Node_Str"")) {
              config.setMinimumGeneralization(attr,null);
              definition.setMinimumGeneralization(attr,0);
            }
 else {
              config.setMinimumGeneralization(attr,Integer.valueOf(min));
              definition.setMinimumGeneralization(attr,Integer.valueOf(min));
            }
            if (max.equals(""String_Node_Str"")) {
              config.setMaximumGeneralization(attr,null);
              definition.setMaximumGeneralization(attr,height - 1);
            }
 else {
              config.setMaximumGeneralization(attr,Integer.valueOf(max));
              definition.setMaximumGeneralization(attr,Integer.valueOf(max));
            }
            if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
              if (config.getMinimumGeneralization(attr) != null && config.getMinimumGeneralization(attr).equals(0)) {
                config.setMinimumGeneralization(attr,null);
              }
              if (config.getMaximumGeneralization(attr) != null && config.getMaximumGeneralization(attr).equals(height - 1)) {
                config.setMaximumGeneralization(attr,null);
              }
            }
          }
        }
 else {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        attr=null;
        atype=null;
        dtype=null;
        ref=null;
        min=null;
        max=null;
        format=null;
        return true;
      }
 else       if (vocabulary.isName(localName)) {
        attr=payload;
        return true;
      }
 else       if (vocabulary.isType(localName)) {
        atype=payload;
        return true;
      }
 else       if (vocabulary.isDatatype(localName)) {
        dtype=payload;
        return true;
      }
 else       if (vocabulary.isFormat(localName)) {
        format=payload;
        return true;
      }
 else       if (vocabulary.isRef(localName)) {
        ref=payload;
        return true;
      }
 else       if (vocabulary.isMin(localName)) {
        min=payload;
        return true;
      }
 else       if (vocabulary.isMax(localName)) {
        max=payload;
        return true;
      }
 else       if (vocabulary.isMicroaggregationFunction(localName)) {
        return true;
      }
 else       if (vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean start(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        attr=null;
        dtype=null;
        atype=null;
        ref=null;
        min=null;
        max=null;
        return true;
      }
 else       if (vocabulary.isName(localName) || vocabulary.isType(localName) || vocabulary.isDatatype(localName)|| vocabulary.isFormat(localName)|| vocabulary.isRef(localName)|| vocabulary.isMin(localName)|| vocabulary.isMax(localName)|| vocabulary.isMicroaggregationFunction(localName)|| vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  xmlReader.parse(inputSource);
}","/** 
 * Reads the data definition from the file.
 * @param config
 * @param output 
 * @param definition
 * @param prefix
 * @param zip
 * @throws IOException
 * @throws SAXException
 */
private void readDefinition(final ModelConfiguration config,final boolean output,final DataDefinition definition,final String prefix,final ZipFile zip) throws IOException, SAXException {
  final ZipEntry entry=zip.getEntry(prefix + ""String_Node_Str"");
  if (entry == null) {
    return;
  }
  final XMLReader xmlReader=XMLReaderFactory.createXMLReader();
  final InputSource inputSource=new InputSource(new BufferedInputStream(zip.getInputStream(entry)));
  xmlReader.setContentHandler(new XMLHandler(){
    String attr, dtype, atype, ref, min, max, format, locale;
    @Override protected boolean end(    final String uri,    final String localName,    final String qName) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        if (attr == null) {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          if (dtype.equals(DataType.STRING.toString())) {
            definition.setDataType(attr,DataType.STRING);
          }
 else           if (dtype.equals(DataType.DECIMAL.toString())) {
            definition.setDataType(attr,DataType.DECIMAL);
          }
 else {
            definition.setDataType(attr,DataType.createDate(dtype));
          }
        }
 else         if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          DataType<?> datatype=null;
          for (          DataTypeDescription<?> description : DataType.list()) {
            if (description.getLabel().equals(dtype)) {
              if (format != null) {
                if (!description.hasFormat()) {
                  throw new RuntimeException(Resources.getMessage(""String_Node_Str""));
                }
                if (locale != null) {
                  Locale lLocale=getLocale(locale);
                  datatype=description.newInstance(format,lLocale);
                }
 else {
                  datatype=description.newInstance(format);
                }
              }
 else {
                if (locale != null) {
                  Locale lLocale=getLocale(locale);
                  datatype=description.newInstance(lLocale);
                }
 else {
                  datatype=description.newInstance();
                }
              }
              break;
            }
          }
          if (datatype == null) {
            throw new RuntimeException(Resources.getMessage(""String_Node_Str"") + attr);
          }
          definition.setDataType(attr,datatype);
        }
        if (atype.equals(AttributeType.IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.IDENTIFYING_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.SENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.SENSITIVE_ATTRIBUTE);
          if (ref != null) {
            try {
              if (config.getHierarchy(attr) == null) {
                config.setHierarchy(attr,readHierarchy(zip,prefix,ref));
              }
            }
 catch (            final IOException e) {
              throw new SAXException(e);
            }
          }
        }
 else         if (atype.equals(AttributeType.INSENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.INSENSITIVE_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.QUASI_IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.QUASI_IDENTIFYING_ATTRIBUTE);
          if (config.getTransformationMode(attr) == ModelTransformationMode.MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation);
          }
          Hierarchy hierarchy=config.getHierarchy(attr);
          if (hierarchy == null) {
            if (ref != null) {
              try {
                if (output && zip.getEntry(prefix + ref) == null) {
                  String[] data=config.getInput().getHandle().getDistinctValues(config.getInput().getHandle().getColumnIndexOf(attr));
                  String[][] array=new String[data.length][];
                  for (int i=0; i < data.length; i++) {
                    array[i]=new String[]{data[i]};
                  }
                  hierarchy=Hierarchy.create(array);
                }
 else {
                  hierarchy=readHierarchy(zip,prefix,ref);
                }
              }
 catch (              final IOException e) {
                throw new SAXException(e);
              }
            }
          }
          if (hierarchy != null && hierarchy.getHierarchy() != null) {
            config.setHierarchy(attr,hierarchy);
            definition.setHierarchy(attr,hierarchy);
            int height=hierarchy.getHierarchy().length > 0 ? hierarchy.getHierarchy()[0].length : 0;
            if (min.equals(""String_Node_Str"")) {
              config.setMinimumGeneralization(attr,null);
              definition.setMinimumGeneralization(attr,0);
            }
 else {
              config.setMinimumGeneralization(attr,Integer.valueOf(min));
              definition.setMinimumGeneralization(attr,Integer.valueOf(min));
            }
            if (max.equals(""String_Node_Str"")) {
              config.setMaximumGeneralization(attr,null);
              definition.setMaximumGeneralization(attr,height - 1);
            }
 else {
              config.setMaximumGeneralization(attr,Integer.valueOf(max));
              definition.setMaximumGeneralization(attr,Integer.valueOf(max));
            }
            if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
              if (config.getMinimumGeneralization(attr) != null && config.getMinimumGeneralization(attr).equals(0)) {
                config.setMinimumGeneralization(attr,null);
              }
              if (config.getMaximumGeneralization(attr) != null && config.getMaximumGeneralization(attr).equals(height - 1)) {
                config.setMaximumGeneralization(attr,null);
              }
            }
          }
        }
 else {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        attr=null;
        atype=null;
        dtype=null;
        ref=null;
        min=null;
        max=null;
        format=null;
        locale=null;
        return true;
      }
 else       if (vocabulary.isName(localName)) {
        attr=payload;
        return true;
      }
 else       if (vocabulary.isType(localName)) {
        atype=payload;
        return true;
      }
 else       if (vocabulary.isDatatype(localName)) {
        dtype=payload;
        return true;
      }
 else       if (vocabulary.isFormat(localName)) {
        format=payload;
        return true;
      }
 else       if (vocabulary.isLocale(localName)) {
        locale=payload;
        return true;
      }
 else       if (vocabulary.isRef(localName)) {
        ref=payload;
        return true;
      }
 else       if (vocabulary.isMin(localName)) {
        min=payload;
        return true;
      }
 else       if (vocabulary.isMax(localName)) {
        max=payload;
        return true;
      }
 else       if (vocabulary.isMicroaggregationFunction(localName)) {
        return true;
      }
 else       if (vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean start(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        attr=null;
        dtype=null;
        atype=null;
        format=null;
        locale=null;
        ref=null;
        min=null;
        max=null;
        return true;
      }
 else       if (vocabulary.isName(localName) || vocabulary.isType(localName) || vocabulary.isDatatype(localName)|| vocabulary.isFormat(localName)|| vocabulary.isLocale(localName)|| vocabulary.isRef(localName)|| vocabulary.isMin(localName)|| vocabulary.isMax(localName)|| vocabulary.isMicroaggregationFunction(localName)|| vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  xmlReader.parse(inputSource);
}",0.9599009317136454
107816,"/** 
 * Returns an XML representation of the data definition.
 * @param config
 * @param handle
 * @param definition
 * @return
 * @throws IOException
 */
private String toXML(final ModelConfiguration config,final DataHandle handle,final DataDefinition definition) throws IOException {
  XMLWriter writer=new XMLWriter();
  writer.indent(vocabulary.getDefinition());
  for (int i=0; i < handle.getNumColumns(); i++) {
    final String attr=handle.getAttributeName(i);
    AttributeType t=definition.getAttributeType(attr);
    DataType<?> dt=definition.getDataType(attr);
    if (t == null)     t=AttributeType.IDENTIFYING_ATTRIBUTE;
    if (dt == null)     dt=DataType.STRING;
    writer.indent(vocabulary.getAssigment());
    writer.write(vocabulary.getName(),attr);
    writer.write(vocabulary.getType(),t.toString());
    writer.write(vocabulary.getDatatype(),dt.getDescription().getLabel());
    if (dt.getDescription().hasFormat()) {
      String format=((DataTypeWithFormat)dt).getFormat();
      if (format != null) {
        writer.write(vocabulary.getFormat(),format);
      }
    }
    if (definition.getHierarchy(attr) != null && definition.getHierarchy(attr).length != 0 && definition.getHierarchy(attr)[0].length != 0) {
      writer.write(vocabulary.getRef(),""String_Node_Str"" + toFileName(attr) + ""String_Node_Str"");
      Integer min=config.getMinimumGeneralization(attr);
      Integer max=config.getMaximumGeneralization(attr);
      writer.write(vocabulary.getMin(),min == null ? ""String_Node_Str"" : String.valueOf(min));
      writer.write(vocabulary.getMax(),max == null ? ""String_Node_Str"" : String.valueOf(max));
    }
    if (definition.getMicroAggregationFunction(attr) != null) {
      writer.write(vocabulary.getMicroAggregationFunction(),config.getMicroAggregationFunction(attr).getLabel());
      writer.write(vocabulary.getMicroAggregationIgnoreMissingData(),config.getMicroAggregationIgnoreMissingData(attr));
    }
    writer.unindent();
  }
  writer.unindent();
  return writer.toString();
}","/** 
 * Returns an XML representation of the data definition.
 * @param config
 * @param handle
 * @param definition
 * @return
 * @throws IOException
 */
private String toXML(final ModelConfiguration config,final DataHandle handle,final DataDefinition definition) throws IOException {
  XMLWriter writer=new XMLWriter();
  writer.indent(vocabulary.getDefinition());
  for (int i=0; i < handle.getNumColumns(); i++) {
    final String attr=handle.getAttributeName(i);
    AttributeType t=definition.getAttributeType(attr);
    DataType<?> dt=definition.getDataType(attr);
    if (t == null)     t=AttributeType.IDENTIFYING_ATTRIBUTE;
    if (dt == null)     dt=DataType.STRING;
    writer.indent(vocabulary.getAssigment());
    writer.write(vocabulary.getName(),attr);
    writer.write(vocabulary.getType(),t.toString());
    writer.write(vocabulary.getDatatype(),dt.getDescription().getLabel());
    if (dt.getDescription().hasFormat()) {
      String format=((DataTypeWithFormat)dt).getFormat();
      if (format != null) {
        writer.write(vocabulary.getFormat(),format);
      }
      Locale locale=((DataTypeWithFormat)dt).getLocale();
      if (locale != null) {
        writer.write(vocabulary.getLocale(),locale.getLanguage().toUpperCase());
      }
    }
    if (definition.getHierarchy(attr) != null && definition.getHierarchy(attr).length != 0 && definition.getHierarchy(attr)[0].length != 0) {
      writer.write(vocabulary.getRef(),""String_Node_Str"" + toFileName(attr) + ""String_Node_Str"");
      Integer min=config.getMinimumGeneralization(attr);
      Integer max=config.getMaximumGeneralization(attr);
      writer.write(vocabulary.getMin(),min == null ? ""String_Node_Str"" : String.valueOf(min));
      writer.write(vocabulary.getMax(),max == null ? ""String_Node_Str"" : String.valueOf(max));
    }
    if (definition.getMicroAggregationFunction(attr) != null) {
      writer.write(vocabulary.getMicroAggregationFunction(),config.getMicroAggregationFunction(attr).getLabel());
      writer.write(vocabulary.getMicroAggregationIgnoreMissingData(),config.getMicroAggregationIgnoreMissingData(attr));
    }
    writer.unindent();
  }
  writer.unindent();
  return writer.toString();
}",0.9585798816568049
107817,"/** 
 * Creates a new instance with the given format string and the given locale.
 * @param format
 * @param locale
 * @return
 */
public abstract DataType<T> newInstance(String format,Locale locale);","/** 
 * Creates a new instance with default format and the given locale.
 * @param locale
 * @return
 */
public DataType<T> newInstance(Locale locale){
  return newInstance(null,locale);
}",0.7474226804123711
107818,"/** 
 * Reads the data definition from the file.
 * @param config
 * @param output 
 * @param definition
 * @param prefix
 * @param zip
 * @throws IOException
 * @throws SAXException
 */
private void readDefinition(final ModelConfiguration config,final boolean output,final DataDefinition definition,final String prefix,final ZipFile zip) throws IOException, SAXException {
  final ZipEntry entry=zip.getEntry(prefix + ""String_Node_Str"");
  if (entry == null) {
    return;
  }
  final XMLReader xmlReader=XMLReaderFactory.createXMLReader();
  final InputSource inputSource=new InputSource(new BufferedInputStream(zip.getInputStream(entry)));
  xmlReader.setContentHandler(new XMLHandler(){
    String attr, dtype, atype, ref, min, max, format, locale;
    @Override protected boolean end(    final String uri,    final String localName,    final String qName) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        if (attr == null) {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          if (dtype.equals(DataType.STRING.toString())) {
            definition.setDataType(attr,DataType.STRING);
          }
 else           if (dtype.equals(DataType.DECIMAL.toString())) {
            definition.setDataType(attr,DataType.DECIMAL);
          }
 else {
            definition.setDataType(attr,DataType.createDate(dtype));
          }
        }
 else         if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          DataType<?> datatype=null;
          for (          DataTypeDescription<?> description : DataType.list()) {
            if (description.getLabel().equals(dtype)) {
              if (format != null) {
                if (!description.hasFormat()) {
                  throw new RuntimeException(Resources.getMessage(""String_Node_Str""));
                }
                if (locale != null) {
                  Locale lLocale=getLocale(locale);
                  datatype=description.newInstance(format,lLocale);
                }
 else {
                  datatype=description.newInstance(format);
                }
              }
 else {
                if (locale != null) {
                  Locale lLocale=getLocale(locale);
                  datatype=description.newInstance(lLocale);
                }
 else {
                  datatype=description.newInstance();
                }
              }
              break;
            }
          }
          if (datatype == null) {
            throw new RuntimeException(Resources.getMessage(""String_Node_Str"") + attr);
          }
          definition.setDataType(attr,datatype);
        }
        if (atype.equals(AttributeType.IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.IDENTIFYING_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.SENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.SENSITIVE_ATTRIBUTE);
          if (ref != null) {
            try {
              if (config.getHierarchy(attr) == null) {
                config.setHierarchy(attr,readHierarchy(zip,prefix,ref));
              }
            }
 catch (            final IOException e) {
              throw new SAXException(e);
            }
          }
        }
 else         if (atype.equals(AttributeType.INSENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.INSENSITIVE_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.QUASI_IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.QUASI_IDENTIFYING_ATTRIBUTE);
          if (config.getTransformationMode(attr) == ModelTransformationMode.MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation);
          }
 else           if (config.getTransformationMode(attr) == ModelTransformationMode.CLUSTERING_AND_MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation,true);
          }
          Hierarchy hierarchy=config.getHierarchy(attr);
          if (hierarchy == null) {
            if (ref != null) {
              try {
                if (output && zip.getEntry(prefix + ref) == null) {
                  String[] data=config.getInput().getHandle().getDistinctValues(config.getInput().getHandle().getColumnIndexOf(attr));
                  String[][] array=new String[data.length][];
                  for (int i=0; i < data.length; i++) {
                    array[i]=new String[]{data[i]};
                  }
                  hierarchy=Hierarchy.create(array);
                }
 else {
                  hierarchy=readHierarchy(zip,prefix,ref);
                }
              }
 catch (              final IOException e) {
                throw new SAXException(e);
              }
            }
          }
          if (hierarchy != null && hierarchy.getHierarchy() != null) {
            config.setHierarchy(attr,hierarchy);
            definition.setHierarchy(attr,hierarchy);
            int height=hierarchy.getHierarchy().length > 0 ? hierarchy.getHierarchy()[0].length : 0;
            if (min.equals(""String_Node_Str"")) {
              config.setMinimumGeneralization(attr,null);
              definition.setMinimumGeneralization(attr,0);
            }
 else {
              config.setMinimumGeneralization(attr,Integer.valueOf(min));
              definition.setMinimumGeneralization(attr,Integer.valueOf(min));
            }
            if (max.equals(""String_Node_Str"")) {
              config.setMaximumGeneralization(attr,null);
              definition.setMaximumGeneralization(attr,height - 1);
            }
 else {
              config.setMaximumGeneralization(attr,Integer.valueOf(max));
              definition.setMaximumGeneralization(attr,Integer.valueOf(max));
            }
            if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
              if (config.getMinimumGeneralization(attr) != null && config.getMinimumGeneralization(attr).equals(0)) {
                config.setMinimumGeneralization(attr,null);
              }
              if (config.getMaximumGeneralization(attr) != null && config.getMaximumGeneralization(attr).equals(height - 1)) {
                config.setMaximumGeneralization(attr,null);
              }
            }
          }
        }
 else {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        attr=null;
        atype=null;
        dtype=null;
        ref=null;
        min=null;
        max=null;
        format=null;
        locale=null;
        return true;
      }
 else       if (vocabulary.isName(localName)) {
        attr=payload;
        return true;
      }
 else       if (vocabulary.isType(localName)) {
        atype=payload;
        return true;
      }
 else       if (vocabulary.isDatatype(localName)) {
        dtype=payload;
        return true;
      }
 else       if (vocabulary.isFormat(localName)) {
        format=payload;
        return true;
      }
 else       if (vocabulary.isLocale(localName)) {
        locale=payload;
        return true;
      }
 else       if (vocabulary.isRef(localName)) {
        ref=payload;
        return true;
      }
 else       if (vocabulary.isMin(localName)) {
        min=payload;
        return true;
      }
 else       if (vocabulary.isMax(localName)) {
        max=payload;
        return true;
      }
 else       if (vocabulary.isMicroaggregationFunction(localName)) {
        return true;
      }
 else       if (vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean start(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        attr=null;
        dtype=null;
        atype=null;
        format=null;
        locale=null;
        ref=null;
        min=null;
        max=null;
        return true;
      }
 else       if (vocabulary.isName(localName) || vocabulary.isType(localName) || vocabulary.isDatatype(localName)|| vocabulary.isFormat(localName)|| vocabulary.isLocale(localName)|| vocabulary.isRef(localName)|| vocabulary.isMin(localName)|| vocabulary.isMax(localName)|| vocabulary.isMicroaggregationFunction(localName)|| vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  xmlReader.parse(inputSource);
}","/** 
 * Reads the data definition from the file.
 * @param config
 * @param output 
 * @param definition
 * @param prefix
 * @param zip
 * @throws IOException
 * @throws SAXException
 */
private void readDefinition(final ModelConfiguration config,final boolean output,final DataDefinition definition,final String prefix,final ZipFile zip) throws IOException, SAXException {
  final ZipEntry entry=zip.getEntry(prefix + ""String_Node_Str"");
  if (entry == null) {
    return;
  }
  final XMLReader xmlReader=XMLReaderFactory.createXMLReader();
  final InputSource inputSource=new InputSource(new BufferedInputStream(zip.getInputStream(entry)));
  xmlReader.setContentHandler(new XMLHandler(){
    String attr, dtype, atype, ref, min, max, format, locale, response;
    @Override protected boolean end(    final String uri,    final String localName,    final String qName) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        if (attr == null) {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          if (dtype.equals(DataType.STRING.toString())) {
            definition.setDataType(attr,DataType.STRING);
          }
 else           if (dtype.equals(DataType.DECIMAL.toString())) {
            definition.setDataType(attr,DataType.DECIMAL);
          }
 else {
            definition.setDataType(attr,DataType.createDate(dtype));
          }
        }
 else         if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          DataType<?> datatype=null;
          for (          DataTypeDescription<?> description : DataType.list()) {
            if (description.getLabel().equals(dtype)) {
              if (format != null) {
                if (!description.hasFormat()) {
                  throw new RuntimeException(Resources.getMessage(""String_Node_Str""));
                }
                if (locale != null) {
                  Locale lLocale=getLocale(locale);
                  datatype=description.newInstance(format,lLocale);
                }
 else {
                  datatype=description.newInstance(format);
                }
              }
 else {
                if (locale != null) {
                  Locale lLocale=getLocale(locale);
                  datatype=description.newInstance(lLocale);
                }
 else {
                  datatype=description.newInstance();
                }
              }
              break;
            }
          }
          if (datatype == null) {
            throw new RuntimeException(Resources.getMessage(""String_Node_Str"") + attr);
          }
          definition.setDataType(attr,datatype);
        }
        if (response != null && response.equals(""String_Node_Str"")) {
          definition.setResponseVariable(attr,true);
        }
        if (atype.equals(AttributeType.IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.IDENTIFYING_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.SENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.SENSITIVE_ATTRIBUTE);
          if (ref != null) {
            try {
              if (config.getHierarchy(attr) == null) {
                config.setHierarchy(attr,readHierarchy(zip,prefix,ref));
              }
            }
 catch (            final IOException e) {
              throw new SAXException(e);
            }
          }
        }
 else         if (atype.equals(AttributeType.INSENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.INSENSITIVE_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.QUASI_IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.QUASI_IDENTIFYING_ATTRIBUTE);
          if (config.getTransformationMode(attr) == ModelTransformationMode.MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation);
          }
 else           if (config.getTransformationMode(attr) == ModelTransformationMode.CLUSTERING_AND_MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation,true);
          }
          Hierarchy hierarchy=config.getHierarchy(attr);
          if (hierarchy == null) {
            if (ref != null) {
              try {
                if (output && zip.getEntry(prefix + ref) == null) {
                  String[] data=config.getInput().getHandle().getDistinctValues(config.getInput().getHandle().getColumnIndexOf(attr));
                  String[][] array=new String[data.length][];
                  for (int i=0; i < data.length; i++) {
                    array[i]=new String[]{data[i]};
                  }
                  hierarchy=Hierarchy.create(array);
                }
 else {
                  hierarchy=readHierarchy(zip,prefix,ref);
                }
              }
 catch (              final IOException e) {
                throw new SAXException(e);
              }
            }
          }
          if (hierarchy != null && hierarchy.getHierarchy() != null) {
            config.setHierarchy(attr,hierarchy);
            definition.setHierarchy(attr,hierarchy);
            int height=hierarchy.getHierarchy().length > 0 ? hierarchy.getHierarchy()[0].length : 0;
            if (min.equals(""String_Node_Str"")) {
              config.setMinimumGeneralization(attr,null);
              definition.setMinimumGeneralization(attr,0);
            }
 else {
              config.setMinimumGeneralization(attr,Integer.valueOf(min));
              definition.setMinimumGeneralization(attr,Integer.valueOf(min));
            }
            if (max.equals(""String_Node_Str"")) {
              config.setMaximumGeneralization(attr,null);
              definition.setMaximumGeneralization(attr,height - 1);
            }
 else {
              config.setMaximumGeneralization(attr,Integer.valueOf(max));
              definition.setMaximumGeneralization(attr,Integer.valueOf(max));
            }
            if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
              if (config.getMinimumGeneralization(attr) != null && config.getMinimumGeneralization(attr).equals(0)) {
                config.setMinimumGeneralization(attr,null);
              }
              if (config.getMaximumGeneralization(attr) != null && config.getMaximumGeneralization(attr).equals(height - 1)) {
                config.setMaximumGeneralization(attr,null);
              }
            }
          }
        }
 else {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        attr=null;
        atype=null;
        dtype=null;
        ref=null;
        min=null;
        max=null;
        format=null;
        locale=null;
        response=null;
        return true;
      }
 else       if (vocabulary.isName(localName)) {
        attr=payload;
        return true;
      }
 else       if (vocabulary.isType(localName)) {
        atype=payload;
        return true;
      }
 else       if (vocabulary.isDatatype(localName)) {
        dtype=payload;
        return true;
      }
 else       if (vocabulary.isFormat(localName)) {
        format=payload;
        return true;
      }
 else       if (vocabulary.isLocale(localName)) {
        locale=payload;
        return true;
      }
 else       if (vocabulary.isResponseVariable(localName)) {
        response=payload;
        return true;
      }
 else       if (vocabulary.isRef(localName)) {
        ref=payload;
        return true;
      }
 else       if (vocabulary.isMin(localName)) {
        min=payload;
        return true;
      }
 else       if (vocabulary.isMax(localName)) {
        max=payload;
        return true;
      }
 else       if (vocabulary.isMicroaggregationFunction(localName)) {
        return true;
      }
 else       if (vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean start(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        attr=null;
        dtype=null;
        atype=null;
        format=null;
        locale=null;
        ref=null;
        min=null;
        max=null;
        response=null;
        return true;
      }
 else       if (vocabulary.isName(localName) || vocabulary.isType(localName) || vocabulary.isDatatype(localName)|| vocabulary.isFormat(localName)|| vocabulary.isLocale(localName)|| vocabulary.isRef(localName)|| vocabulary.isResponseVariable(localName)|| vocabulary.isMin(localName)|| vocabulary.isMax(localName)|| vocabulary.isMicroaggregationFunction(localName)|| vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  xmlReader.parse(inputSource);
}",0.9783995283271696
107819,"/** 
 * Returns an XML representation of the data definition.
 * @param config
 * @param handle
 * @param definition
 * @return
 * @throws IOException
 */
private String toXML(final ModelConfiguration config,final DataHandle handle,final DataDefinition definition) throws IOException {
  XMLWriter writer=new XMLWriter();
  writer.indent(vocabulary.getDefinition());
  for (int i=0; i < handle.getNumColumns(); i++) {
    final String attr=handle.getAttributeName(i);
    AttributeType t=definition.getAttributeType(attr);
    DataType<?> dt=definition.getDataType(attr);
    if (t == null)     t=AttributeType.IDENTIFYING_ATTRIBUTE;
    if (dt == null)     dt=DataType.STRING;
    writer.indent(vocabulary.getAssigment());
    writer.write(vocabulary.getName(),attr);
    writer.write(vocabulary.getType(),t.toString());
    writer.write(vocabulary.getDatatype(),dt.getDescription().getLabel());
    if (dt.getDescription().hasFormat()) {
      String format=((DataTypeWithFormat)dt).getFormat();
      if (format != null) {
        writer.write(vocabulary.getFormat(),format);
      }
      Locale locale=((DataTypeWithFormat)dt).getLocale();
      if (locale != null) {
        writer.write(vocabulary.getLocale(),locale.getLanguage().toUpperCase());
      }
    }
    if (definition.getHierarchy(attr) != null && definition.getHierarchy(attr).length != 0 && definition.getHierarchy(attr)[0].length != 0) {
      writer.write(vocabulary.getRef(),""String_Node_Str"" + toFileName(attr) + ""String_Node_Str"");
      Integer min=config.getMinimumGeneralization(attr);
      Integer max=config.getMaximumGeneralization(attr);
      writer.write(vocabulary.getMin(),min == null ? ""String_Node_Str"" : String.valueOf(min));
      writer.write(vocabulary.getMax(),max == null ? ""String_Node_Str"" : String.valueOf(max));
    }
    if (definition.getMicroAggregationFunction(attr) != null) {
      writer.write(vocabulary.getMicroAggregationFunction(),config.getMicroAggregationFunction(attr).getLabel());
      writer.write(vocabulary.getMicroAggregationIgnoreMissingData(),config.getMicroAggregationIgnoreMissingData(attr));
    }
    writer.unindent();
  }
  writer.unindent();
  return writer.toString();
}","/** 
 * Returns an XML representation of the data definition.
 * @param config
 * @param handle
 * @param definition
 * @return
 * @throws IOException
 */
private String toXML(final ModelConfiguration config,final DataHandle handle,final DataDefinition definition) throws IOException {
  XMLWriter writer=new XMLWriter();
  writer.indent(vocabulary.getDefinition());
  for (int i=0; i < handle.getNumColumns(); i++) {
    final String attr=handle.getAttributeName(i);
    AttributeType t=definition.getAttributeType(attr);
    DataType<?> dt=definition.getDataType(attr);
    if (t == null)     t=AttributeType.IDENTIFYING_ATTRIBUTE;
    if (dt == null)     dt=DataType.STRING;
    writer.indent(vocabulary.getAssigment());
    writer.write(vocabulary.getName(),attr);
    writer.write(vocabulary.getType(),t.toString());
    writer.write(vocabulary.getDatatype(),dt.getDescription().getLabel());
    if (dt.getDescription().hasFormat()) {
      String format=((DataTypeWithFormat)dt).getFormat();
      if (format != null) {
        writer.write(vocabulary.getFormat(),format);
      }
      Locale locale=((DataTypeWithFormat)dt).getLocale();
      if (locale != null) {
        writer.write(vocabulary.getLocale(),locale.getLanguage().toUpperCase());
      }
    }
    if (definition.isResponseVariable(attr)) {
      writer.write(vocabulary.getResponseVariable(),""String_Node_Str"");
    }
    if (definition.getHierarchy(attr) != null && definition.getHierarchy(attr).length != 0 && definition.getHierarchy(attr)[0].length != 0) {
      writer.write(vocabulary.getRef(),""String_Node_Str"" + toFileName(attr) + ""String_Node_Str"");
      Integer min=config.getMinimumGeneralization(attr);
      Integer max=config.getMaximumGeneralization(attr);
      writer.write(vocabulary.getMin(),min == null ? ""String_Node_Str"" : String.valueOf(min));
      writer.write(vocabulary.getMax(),max == null ? ""String_Node_Str"" : String.valueOf(max));
    }
    if (definition.getMicroAggregationFunction(attr) != null) {
      writer.write(vocabulary.getMicroAggregationFunction(),config.getMicroAggregationFunction(attr).getLabel());
      writer.write(vocabulary.getMicroAggregationIgnoreMissingData(),config.getMicroAggregationIgnoreMissingData(attr));
    }
    writer.unindent();
  }
  writer.unindent();
  return writer.toString();
}",0.9723756906077348
107820,"/** 
 * Returns the penalty for the given entry
 * @param entry
 * @return
 */
private double getPenalty(HashGroupifyEntry entry){
  double result=0d;
  if (!entry.isNotOutlier) {
    result+=entry.count * (responseVariablesNotAnalyzed + responseVariables.length) * penaltySuppressed;
  }
 else {
    for (    int index : this.responseVariables) {
      int top1=-1;
      int top2=-1;
      Distribution distribution=entry.distributions[index];
      int[] buckets=distribution.getBuckets();
      for (int i=0; i < buckets.length; i+=2) {
        int frequency=buckets[i + 1];
        boolean largerThanTop1=frequency > top1;
        boolean largerThanTop2=frequency > top2;
        top2=largerThanTop1 ? top1 : top2;
        top1=largerThanTop1 ? frequency : top1;
        top2=largerThanTop2 && frequency != top1 ? frequency : top2;
      }
      if (top1 != top2) {
        result+=(entry.count - top1) * penaltyInfrequentResponse;
      }
 else {
        result+=(entry.count - top1) * penaltyNoMajorityResponse;
      }
    }
  }
  return result;
}","/** 
 * Returns the penalty for the given entry
 * @param entry
 * @return
 */
private double getPenalty(HashGroupifyEntry entry){
  double result=0d;
  if (!entry.isNotOutlier) {
    result+=entry.count * (responseVariablesNotAnalyzed + responseVariables.length) * penaltySuppressed;
  }
 else {
    for (    int index : this.responseVariables) {
      int top1=-1;
      int top2=-1;
      Distribution distribution=entry.distributions[index];
      int[] buckets=distribution.getBuckets();
      for (int i=0; i < buckets.length; i+=2) {
        int frequency=buckets[i + 1];
        boolean largerThanTop1=frequency > top1;
        boolean largerThanTop2=frequency > top2;
        top2=largerThanTop1 ? top1 : top2;
        top1=largerThanTop1 ? frequency : top1;
        top2=largerThanTop2 && frequency != top1 ? frequency : top2;
      }
      if (top1 != top2) {
        result+=(entry.count - top1) * penaltyInfrequentResponse;
      }
 else {
        result+=entry.count * penaltyNoMajorityResponse;
      }
    }
  }
  return result;
}",0.9957163255592576
107821,"/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param config - The configuration
 * @param interrupt - The interrupt flag
 * @param progress 
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,ARXLogisticRegressionConfiguration config,WrappedBoolean interrupt,WrappedInteger progress) throws ParseException {
  this.interrupt=interrupt;
  this.progress=progress;
  double samplingFraction=(double)config.getMaxRecords() / (double)inputHandle.getNumRows();
  if (samplingFraction <= 0d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (samplingFraction > 1d) {
    samplingFraction=1d;
  }
  if (!config.isDeterministic()) {
    this.random=new Random();
  }
 else {
    this.random=new Random(config.getSeed());
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,features,clazz,interrupt);
  int k=inputHandle.getNumRows() > config.getNumFolds() ? config.getNumFolds() : inputHandle.getNumRows();
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),k);
  int classifications=0;
  double total=100d / ((double)inputHandle.getNumRows() * (double)folds.size());
  double done=0d;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputLR=new MultiClassLogisticRegression(specification,config);
    ClassificationMethod inputZR=new MultiClassZeroR(specification);
    ClassificationMethod outputLR=null;
    if (inputHandle != outputHandle) {
      outputLR=new MultiClassLogisticRegression(specification,config);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputLR.train(inputHandle,outputHandle,index);
            inputZR.train(inputHandle,outputHandle,index);
            if (outputLR != null && !outputHandle.isOutlier(index)) {
              outputLR.train(outputHandle,outputHandle,index);
            }
            trained=true;
            this.progress.value=(int)((++done) * total);
          }
        }
      }
      inputLR.close();
      inputZR.close();
      if (outputLR != null) {
        outputLR.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInputLR=inputLR.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZR.classify(inputHandle,index);
          ClassificationResult resultOutputLR=outputLR == null ? null : outputLR.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex,true);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          boolean correct=resultInputLR.correct(actualValue);
          this.originalAverageError+=resultInputLR.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          this.originalMatrix.add(resultInputLR.confidence(),correct);
          if (resultOutputLR != null) {
            correct=resultOutputLR.correct(actualValue);
            this.averageError+=resultOutputLR.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            this.matrix.add(resultOutputLR.confidence(),correct);
          }
        }
        this.progress.value=(int)((++done) * total);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  this.originalMatrix.pack();
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
    this.matrix.pack();
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
    this.matrix=this.originalMatrix;
  }
  this.numClasses=specification.classMap.size();
  this.numMeasurements=classifications;
}","/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param config - The configuration
 * @param interrupt - The interrupt flag
 * @param progress 
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,ARXLogisticRegressionConfiguration config,WrappedBoolean interrupt,WrappedInteger progress) throws ParseException {
  this.interrupt=interrupt;
  this.progress=progress;
  double samplingFraction=(double)config.getMaxRecords() / (double)inputHandle.getNumRows();
  if (samplingFraction <= 0d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (samplingFraction > 1d) {
    samplingFraction=1d;
  }
  if (!config.isDeterministic()) {
    this.random=new Random();
  }
 else {
    this.random=new Random(config.getSeed());
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,features,clazz,interrupt);
  int k=inputHandle.getNumRows() > config.getNumFolds() ? config.getNumFolds() : inputHandle.getNumRows();
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),k);
  int classifications=0;
  double total=100d / ((double)inputHandle.getNumRows() * (double)folds.size());
  double done=0d;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputLR=new MultiClassLogisticRegression(specification,config);
    ClassificationMethod inputZR=new MultiClassZeroR(specification);
    ClassificationMethod outputLR=null;
    if (inputHandle != outputHandle) {
      outputLR=new MultiClassLogisticRegression(specification,config);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputLR.train(inputHandle,outputHandle,index);
            inputZR.train(inputHandle,outputHandle,index);
            if (outputLR != null && !outputHandle.isOutlier(index)) {
              outputLR.train(outputHandle,outputHandle,index);
            }
            trained=true;
            this.progress.value=(int)((++done) * total);
          }
        }
      }
      inputLR.close();
      inputZR.close();
      if (outputLR != null) {
        outputLR.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInputLR=inputLR.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZR.classify(inputHandle,index);
          ClassificationResult resultOutputLR=outputLR == null ? null : outputLR.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex,true);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          boolean correct=resultInputLR.correct(actualValue);
          this.originalAverageError+=resultInputLR.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          this.originalMatrix.add(resultInputLR.confidence(),correct);
          if (resultOutputLR != null) {
            correct=resultOutputLR.correct(actualValue);
            this.averageError+=resultOutputLR.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            this.matrix.add(resultOutputLR.confidence(),correct);
          }
        }
        this.progress.value=(int)((++done) * total);
      }
    }
 catch (    Exception e) {
      if (e instanceof ComputationInterruptedException) {
        throw e;
      }
 else {
        throw new UnexpectedErrorException(e);
      }
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  this.originalMatrix.pack();
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
    this.matrix.pack();
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
    this.matrix=this.originalMatrix;
  }
  this.numClasses=specification.classMap.size();
  this.numMeasurements=classifications;
}",0.9839249109936348
107822,"/** 
 * Performs some sanity checks.
 * @param handle the data handle
 * @param config the configuration
 */
private void checkBeforeEncoding(final DataHandle handle,final ARXConfiguration config){
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (config.isPrivacyModelSpecified(LDiversity.class) || config.isPrivacyModelSpecified(TCloseness.class) || config.isPrivacyModelSpecified(DDisclosurePrivacy.class)|| config.isPrivacyModelSpecified(BasicBLikeness.class)|| config.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    if (handle.getDefinition().getSensitiveAttributes().size() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (config.getQualityModel() instanceof MetricSDClassification) {
    for (    String attribute : ((MetricSDClassification)config.getQualityModel()).getClassAttributes()) {
      if (!(handle.getDefinition().getSensitiveAttributes().contains(attribute) || handle.getDefinition().getInsensitiveAttributes().contains(attribute))) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  for (  String attribute : handle.getDefinition().getQuasiIdentifiersWithGeneralization()) {
    if (handle.getDefinition().getHierarchy(attribute) == null) {
      throw new IllegalStateException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attr : handle.getDefinition().getSensitiveAttributes()) {
    boolean found=false;
    for (    LDiversity c : config.getPrivacyModels(LDiversity.class)) {
      if (c.getAttribute().equals(attr)) {
        found=true;
        break;
      }
    }
    if (!found) {
      for (      TCloseness c : config.getPrivacyModels(TCloseness.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      for (      DDisclosurePrivacy c : config.getPrivacyModels(DDisclosurePrivacy.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      for (      BasicBLikeness c : config.getPrivacyModels(BasicBLikeness.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      for (      EnhancedBLikeness c : config.getPrivacyModels(EnhancedBLikeness.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      throw new IllegalArgumentException(""String_Node_Str"" + attr + ""String_Node_Str"");
    }
  }
  for (  LDiversity c : config.getPrivacyModels(LDiversity.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  TCloseness c : config.getPrivacyModels(TCloseness.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  DDisclosurePrivacy c : config.getPrivacyModels(DDisclosurePrivacy.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  BasicBLikeness c : config.getPrivacyModels(BasicBLikeness.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  EnhancedBLikeness c : config.getPrivacyModels(EnhancedBLikeness.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  if (!(handle instanceof DataHandleInput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DataDefinition definition=handle.getDefinition();
  Set<String> attributes=new HashSet<String>();
  for (int i=0; i < handle.getNumColumns(); i++) {
    attributes.add(handle.getAttributeName(i));
  }
  for (  String attribute : handle.getDefinition().getSensitiveAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getInsensitiveAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getIdentifyingAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getQuasiIdentifyingAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getQuasiIdentifiersWithMicroaggregation()) {
    if (handle.getDefinition().getMicroAggregationFunction(attribute) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
    MicroAggregationFunction f=(MicroAggregationFunction)definition.getMicroAggregationFunction(attribute);
    DataType<?> t=definition.getDataType(attribute);
    if (!t.getDescription().getScale().provides(f.getRequiredScale())) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str""+ f.getRequiredScale());
    }
  }
  if (config.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    if (!definition.getQuasiIdentifiersWithMicroaggregation().isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  Set<String> genQis=definition.getQuasiIdentifiersWithGeneralization();
  if ((config.getMaxOutliers() < 0d) || (config.getMaxOutliers() > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"" + config.getMaxOutliers() + ""String_Node_Str"");
  }
  if (genQis.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (genQis.size() > maxQuasiIdentifiers) {
    throw new IllegalArgumentException(""String_Node_Str"" + genQis.size() + ""String_Node_Str"");
  }
}","/** 
 * Performs some sanity checks.
 * @param handle the data handle
 * @param config the configuration
 */
private void checkBeforeEncoding(final DataHandle handle,final ARXConfiguration config){
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (config.isPrivacyModelSpecified(LDiversity.class) || config.isPrivacyModelSpecified(TCloseness.class) || config.isPrivacyModelSpecified(DDisclosurePrivacy.class)|| config.isPrivacyModelSpecified(BasicBLikeness.class)|| config.isPrivacyModelSpecified(EnhancedBLikeness.class)) {
    if (handle.getDefinition().getSensitiveAttributes().size() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (config.getQualityModel() instanceof MetricSDClassification) {
    for (    String attribute : ((MetricSDClassification)config.getQualityModel()).getClassAttributes()) {
      if (!(handle.getDefinition().getSensitiveAttributes().contains(attribute) || handle.getDefinition().getInsensitiveAttributes().contains(attribute))) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  for (  String attribute : handle.getDefinition().getQuasiIdentifiersWithGeneralization()) {
    if (handle.getDefinition().getHierarchy(attribute) == null) {
      throw new IllegalStateException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attr : handle.getDefinition().getSensitiveAttributes()) {
    boolean found=false;
    for (    LDiversity c : config.getPrivacyModels(LDiversity.class)) {
      if (c.getAttribute().equals(attr)) {
        found=true;
        break;
      }
    }
    if (!found) {
      for (      TCloseness c : config.getPrivacyModels(TCloseness.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      for (      DDisclosurePrivacy c : config.getPrivacyModels(DDisclosurePrivacy.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      for (      BasicBLikeness c : config.getPrivacyModels(BasicBLikeness.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      for (      EnhancedBLikeness c : config.getPrivacyModels(EnhancedBLikeness.class)) {
        if (c.getAttribute().equals(attr)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      throw new IllegalArgumentException(""String_Node_Str"" + attr + ""String_Node_Str"");
    }
  }
  for (  LDiversity c : config.getPrivacyModels(LDiversity.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  TCloseness c : config.getPrivacyModels(TCloseness.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  DDisclosurePrivacy c : config.getPrivacyModels(DDisclosurePrivacy.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  BasicBLikeness c : config.getPrivacyModels(BasicBLikeness.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  for (  EnhancedBLikeness c : config.getPrivacyModels(EnhancedBLikeness.class)) {
    if (handle.getDefinition().getAttributeType(c.getAttribute()) != AttributeType.SENSITIVE_ATTRIBUTE) {
      throw new RuntimeException(""String_Node_Str"" + c.getAttribute() + ""String_Node_Str"");
    }
  }
  if (!(handle instanceof DataHandleInput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DataDefinition definition=handle.getDefinition();
  Set<String> attributes=new HashSet<String>();
  for (int i=0; i < handle.getNumColumns(); i++) {
    attributes.add(handle.getAttributeName(i));
  }
  for (  String attribute : handle.getDefinition().getSensitiveAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getInsensitiveAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getIdentifyingAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getQuasiIdentifyingAttributes()) {
    if (!attributes.contains(attribute)) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
  }
  for (  String attribute : handle.getDefinition().getQuasiIdentifiersWithMicroaggregation()) {
    if (handle.getDefinition().getMicroAggregationFunction(attribute) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str"");
    }
    MicroAggregationFunction f=(MicroAggregationFunction)definition.getMicroAggregationFunction(attribute);
    DataType<?> t=definition.getDataType(attribute);
    if (!t.getDescription().getScale().provides(f.getRequiredScale())) {
      throw new IllegalArgumentException(""String_Node_Str"" + attribute + ""String_Node_Str""+ f.getRequiredScale());
    }
  }
  if (config.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    if (!definition.getQuasiIdentifiersWithMicroaggregation().isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  Set<String> genQis=definition.getQuasiIdentifiersWithGeneralization();
  Set<String> clusterQis=definition.getQuasiIdentifiersWithClusteringAndMicroaggregation();
  if ((config.getMaxOutliers() < 0d) || (config.getMaxOutliers() > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"" + config.getMaxOutliers() + ""String_Node_Str"");
  }
  if ((genQis.size() + clusterQis.size()) == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if ((genQis.size() + clusterQis.size()) > maxQuasiIdentifiers) {
    throw new IllegalArgumentException(""String_Node_Str"" + genQis.size() + ""String_Node_Str"");
  }
}",0.9897974493623406
107823,"/** 
 * Returns an ordered list of the distinct set of data items from the given column. This method assumes that the order of string data items can (and should) be derived from the provided hierarchy
 * @param column The column
 * @param hierarchy The hierarchy, may be null
 * @return
 */
public String[] getDistinctValuesOrdered(int column,String[][] hierarchy){
  interrupt.value=false;
  final String[] list=getDistinctValues(column);
  final String attribute=handle.getAttributeName(column);
  final DataType<?> datatype=handle.getDataType(attribute);
  final int level=handle.getGeneralization(attribute);
  progress.value=20;
  if (hierarchy == null || level == 0) {
    sort(list,datatype);
  }
 else {
    final Map<String,Integer> order=new HashMap<String,Integer>();
    int max=0;
    Set<String> baseSet=new HashSet<String>();
    DataType<?> baseType=handle.getBaseDataType(attribute);
    for (int i=0; i < hierarchy.length; i++) {
      String element=hierarchy[i][0];
      checkInterrupt();
      if (baseType.isValid(element))       baseSet.add(element);
    }
    String[] baseArray=baseSet.toArray(new String[baseSet.size()]);
    sort(baseArray,handle.getBaseDataType(attribute));
    Map<String,Integer> baseOrder=new HashMap<String,Integer>();
    for (int i=0; i < baseArray.length; i++) {
      checkInterrupt();
      baseOrder.put(baseArray[i],i);
    }
    int lower=handle.isOptimized() ? 0 : level;
    int upper=handle.isOptimized() ? hierarchy[0].length : level + 1;
    for (int i=0; i < hierarchy.length; i++) {
      checkInterrupt();
      for (int j=lower; j < upper; j++) {
        if (!order.containsKey(hierarchy[i][j])) {
          Integer position=baseOrder.get(hierarchy[i][0]);
          if (position != null) {
            order.put(hierarchy[i][j],position);
            max=Math.max(position,max) + 1;
          }
        }
      }
    }
    order.put(DataType.ANY_VALUE,max);
    sort(list,order);
  }
  progress.value=40;
  return list;
}","/** 
 * Returns an ordered list of the distinct set of data items from the given column. This method assumes that the order of string data items can (and should) be derived from the provided hierarchy
 * @param column The column
 * @param hierarchy The hierarchy, may be null
 * @return
 */
public String[] getDistinctValuesOrdered(int column,String[][] hierarchy){
  interrupt.value=false;
  String[] list=getDistinctValues(column);
  String attribute=handle.getAttributeName(column);
  DataType<?> datatype=handle.getDataType(attribute);
  int level=handle.getGeneralization(attribute);
  progress.value=20;
  if ((datatype instanceof DataTypeWithRatioScale) || hierarchy == null || level == 0) {
    sort(list,datatype);
  }
 else {
    Map<String,Integer> order=new HashMap<String,Integer>();
    int max=0;
    Set<String> baseSet=new HashSet<String>();
    DataType<?> baseType=handle.getBaseDataType(attribute);
    for (int i=0; i < hierarchy.length; i++) {
      String element=hierarchy[i][0];
      checkInterrupt();
      if (baseType.isValid(element))       baseSet.add(element);
    }
    String[] baseArray=baseSet.toArray(new String[baseSet.size()]);
    sort(baseArray,handle.getBaseDataType(attribute));
    Map<String,Integer> baseOrder=new HashMap<String,Integer>();
    for (int i=0; i < baseArray.length; i++) {
      checkInterrupt();
      baseOrder.put(baseArray[i],i);
    }
    int lower=handle.isOptimized() ? 0 : level;
    int upper=handle.isOptimized() ? hierarchy[0].length : level + 1;
    for (int i=0; i < hierarchy.length; i++) {
      checkInterrupt();
      for (int j=lower; j < upper; j++) {
        if (!order.containsKey(hierarchy[i][j])) {
          Integer position=baseOrder.get(hierarchy[i][0]);
          if (position != null) {
            order.put(hierarchy[i][j],position);
            max=Math.max(position,max) + 1;
          }
        }
      }
    }
    order.put(DataType.ANY_VALUE,max);
    progress.value=30;
    boolean allCovered=true;
    for (    String value : list) {
      if (!order.containsKey(value)) {
        allCovered=false;
        break;
      }
    }
    progress.value=35;
    if (allCovered) {
      sort(list,order);
    }
 else {
      sort(list);
    }
  }
  progress.value=40;
  return list;
}",0.9110954726718272
107824,"@Override public void update(ModelEvent event){
  super.update(event);
  if (event.part == ModelPart.SELECTED_FEATURES_OR_CLASSES || event.part == ModelPart.DATA_TYPE) {
    if (getModel() != null && (getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty())) {
      doReset();
      return;
    }
 else {
      triggerUpdate();
    }
  }
  if (event.part == ModelPart.SELECTED_ATTRIBUTE) {
    int index=0;
    for (    TableItem item : precisionRecallTable.getItems()) {
      if (item.getText(0).equals(super.getModel().getSelectedAttribute())) {
        precisionRecallTable.select(index);
        if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
          precisionRecallSetChartSeries((PrecisionRecallMatrix)item.getData());
        }
        break;
      }
      index++;
    }
    final String selectedAttribute=(String)event.data;
    for (int i=0; i < rocCombo.getItemCount(); i++) {
      if (rocCombo.getItem(i).equals(selectedAttribute)) {
        rocCombo.select(i);
        rocUpdateTableAndChart(selectedAttribute);
        break;
      }
    }
  }
  if (event.part == ModelPart.SELECTED_CLASS_VALUE) {
    int index=0;
    for (    TableItem item : precisionRecallTable.getItems()) {
      if (item.getText(0).equals(super.getModel().getSelectedClassValue())) {
        precisionRecallTable.select(index);
        if (item.getData() != null) {
          rocSetChartSeries((ROCCurve[])item.getData());
        }
        return;
      }
      index++;
    }
  }
}","@Override public void update(ModelEvent event){
  super.update(event);
  if (event.part == ModelPart.SELECTED_FEATURES_OR_CLASSES || event.part == ModelPart.DATA_TYPE) {
    if (getModel() != null && (getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty())) {
      doReset();
      return;
    }
 else {
      triggerUpdate();
    }
  }
  if (event.part == ModelPart.SELECTED_ATTRIBUTE) {
    int index=0;
    for (    TableItem item : precisionRecallTable.getItems()) {
      if (item.getText(0).equals(super.getModel().getSelectedAttribute())) {
        precisionRecallTable.select(index);
        if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
          precisionRecallSetChartSeries((PrecisionRecallMatrix)item.getData());
        }
        break;
      }
      index++;
    }
    final String selectedAttribute=(String)event.data;
    for (int i=0; i < rocCombo.getItemCount(); i++) {
      if (rocCombo.getItem(i).equals(selectedAttribute)) {
        rocCombo.select(i);
        rocUpdateTableAndChart(selectedAttribute);
        break;
      }
    }
  }
  if (event.part == ModelPart.SELECTED_CLASS_VALUE) {
    int index=0;
    for (    TableItem item : rocTable.getItems()) {
      if (item.getText(0).equals(super.getModel().getSelectedClassValue())) {
        rocTable.select(index);
        if (item.getData() != null) {
          rocSetChartSeries((ROCCurve[])item.getData());
        }
        return;
      }
      index++;
    }
  }
}",0.9882352941176472
107825,"@Override protected int internalGetEncodedValue(final int row,final int column,final boolean ignoreSuppression){
  return data[row][column];
}","@Override protected int internalGetEncodedValue(final int row,final int column,final boolean ignoreSuppression){
  return data.get(row,column);
}",0.9616724738675958
107826,"/** 
 * Returns a summary statistics object for the given attribute
 * @param generalization
 * @param dataType
 * @param baseDataType
 * @param hierarchy
 * @return
 */
private <U,V>StatisticsSummaryOrdinal getSummaryStatisticsOrdinal(final int generalization,final DataType<U> dataType,final DataType<V> baseDataType,final String[][] hierarchy){
  if (generalization == 0 || !(dataType instanceof ARXString)) {
    return new StatisticsSummaryOrdinal(dataType);
  }
 else   if (baseDataType instanceof ARXString) {
    return new StatisticsSummaryOrdinal(dataType);
  }
 else   if (hierarchy == null) {
    return new StatisticsSummaryOrdinal(dataType);
  }
 else {
    final Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < hierarchy.length; i++) {
      map.put(hierarchy[i][generalization],hierarchy[i][0]);
    }
    return new StatisticsSummaryOrdinal(new Comparator<String>(){
      public int compare(      String o1,      String o2){
        V _o1=null;
        try {
          _o1=baseDataType.parse(map.get(o1));
        }
 catch (        Exception e) {
        }
        V _o2=null;
        try {
          _o2=baseDataType.parse(map.get(o2));
        }
 catch (        Exception e) {
        }
        try {
          return baseDataType.compare(_o1,_o2);
        }
 catch (        Exception e) {
          return 0;
        }
      }
    }
);
  }
}","/** 
 * Returns a summary statistics object for the given attribute
 * @param generalization
 * @param dataType
 * @param baseDataType
 * @param hierarchy
 * @return
 */
private <U,V>StatisticsSummaryOrdinal<?> getSummaryStatisticsOrdinal(final int generalization,final DataType<U> dataType,final DataType<V> baseDataType,final String[][] hierarchy){
  if (generalization == 0 || !(dataType instanceof ARXString)) {
    return new StatisticsSummaryOrdinal<U>(dataType);
  }
 else   if (baseDataType instanceof ARXString) {
    return new StatisticsSummaryOrdinal<U>(dataType);
  }
 else   if (hierarchy == null) {
    return new StatisticsSummaryOrdinal<U>(dataType);
  }
 else {
    final Map<String,String> map=new HashMap<String,String>();
    for (int i=0; i < hierarchy.length; i++) {
      map.put(hierarchy[i][generalization],hierarchy[i][0]);
    }
    return new StatisticsSummaryOrdinal<V>(new Comparator<String>(){
      public int compare(      String o1,      String o2){
        V _o1=null;
        try {
          _o1=baseDataType.parse(map.get(o1));
        }
 catch (        Exception e) {
        }
        V _o2=null;
        try {
          _o2=baseDataType.parse(map.get(o2));
        }
 catch (        Exception e) {
        }
        try {
          return baseDataType.compare(_o1,_o2);
        }
 catch (        Exception e) {
          return 0;
        }
      }
    }
);
  }
}",0.9946294307196564
107827,"/** 
 * Analyzes the data
 */
<T>void analyze(){
  Collections.sort(values,comparator);
  if (values.size() == 0) {
    min=DataType.NULL_VALUE;
    max=DataType.NULL_VALUE;
    mode=DataType.NULL_VALUE;
    median=DataType.NULL_VALUE;
    distinctNumberOfValues=0;
    numberOfMeasures=0;
  }
 else {
    min=values.get(0);
    max=values.get(values.size() - 1);
    if (values.size() % 2 == 1) {
      median=values.get(values.size() / 2);
    }
 else     if (type != null && type instanceof DataTypeWithRatioScale<?>) {
      @SuppressWarnings(""String_Node_Str"") DataType<T> dType=(DataType<T>)type;
      @SuppressWarnings(""String_Node_Str"") DataTypeWithRatioScale<T> rType=(DataTypeWithRatioScale<T>)dType;
      double median1=rType.toDouble(dType.parse(values.get(values.size() / 2 - 1)));
      double median2=rType.toDouble(dType.parse(values.get(values.size() / 2)));
      median=dType.format(rType.fromDouble((median1 + median2) / 2d));
    }
 else {
      String median1=values.get(values.size() / 2 - 1);
      String median2=values.get(values.size() / 2);
      if (median1 == median2) {
        median=median1;
      }
 else {
        median=DataType.NULL_VALUE;
      }
    }
    numberOfMeasures=values.size();
    Set<String> distinct=new HashSet<String>();
    distinct.addAll(values);
    distinctNumberOfValues=distinct.size();
    distinct.clear();
    int count=0;
    int index=0;
    mode=values.get(0);
    while (index < values.size()) {
      int nIndex=moveWhileEqual(index,values);
      int nCount=nIndex - index;
      if (nCount > count) {
        mode=values.get(index);
        count=nCount;
      }
      index=nIndex;
    }
  }
  values.clear();
}","/** 
 * Analyzes the data
 */
void analyze(){
  Collections.sort(values,comparator);
  if (values.size() == 0) {
    min=DataType.NULL_VALUE;
    max=DataType.NULL_VALUE;
    mode=DataType.NULL_VALUE;
    median=DataType.NULL_VALUE;
    distinctNumberOfValues=0;
    numberOfMeasures=0;
  }
 else {
    min=values.get(0);
    max=values.get(values.size() - 1);
    if (values.size() % 2 == 1) {
      median=values.get(values.size() / 2);
    }
 else     if (type != null && type instanceof DataTypeWithRatioScale<?>) {
      DataType<T> dType=(DataType<T>)type;
      @SuppressWarnings(""String_Node_Str"") DataTypeWithRatioScale<T> rType=(DataTypeWithRatioScale<T>)dType;
      double median1=rType.toDouble(dType.parse(values.get(values.size() / 2 - 1)));
      double median2=rType.toDouble(dType.parse(values.get(values.size() / 2)));
      median=dType.format(rType.fromDouble((median1 + median2) / 2d));
    }
 else {
      String median1=values.get(values.size() / 2 - 1);
      String median2=values.get(values.size() / 2);
      if (median1 == median2) {
        median=median1;
      }
 else {
        median=DataType.NULL_VALUE;
      }
    }
    numberOfMeasures=values.size();
    Set<String> distinct=new HashSet<String>();
    distinct.addAll(values);
    distinctNumberOfValues=distinct.size();
    distinct.clear();
    int count=0;
    int index=0;
    mode=values.get(0);
    while (index < values.size()) {
      int nIndex=moveWhileEqual(index,values);
      int nCount=nIndex - index;
      if (nCount > count) {
        mode=values.get(index);
        count=nCount;
      }
      index=nIndex;
    }
    if (type != null) {
      min=type.format(type.parse(min));
      max=type.format(type.parse(max));
      mode=type.format(type.parse(mode));
      median=type.format(type.parse(median));
    }
  }
  values.clear();
}",0.9325396825396826
107828,"/** 
 * Constructor
 * @param type
 */
StatisticsSummaryOrdinal(final DataType<?> type){
  this.type=type;
  this.comparator=new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      try {
        return type.compare(o1,o2);
      }
 catch (      NumberFormatException|ParseException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}","/** 
 * Constructor
 * @param type
 */
StatisticsSummaryOrdinal(final DataType<T> type){
  this.type=type;
  this.comparator=new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      try {
        return type.compare(o1,o2);
      }
 catch (      NumberFormatException|ParseException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}",0.9974093264248703
107829,"/** 
 * Creates a new data handle.
 * @param data
 */
protected DataHandleInput(final Data data){
  Iterator<String[]> iterator=data.iterator();
  if (!iterator.hasNext()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.setRegistry(new DataRegistry());
  this.getRegistry().updateInput(this);
  this.definition=data.getDefinition().clone();
  String[] columns=iterator.next();
  super.header=Arrays.copyOf(columns,columns.length);
  this.dictionary=new Dictionary(header.length);
  List<int[]> vals=new ArrayList<int[]>();
  while (iterator.hasNext()) {
    String[] strings=iterator.next();
    int[] tuple=new int[header.length];
    for (int i=0; i < header.length; i++) {
      String value=(i < strings.length) ? strings[i] : DataType.NULL_VALUE;
      value=(value != null) ? value : DataType.NULL_VALUE;
      tuple[i]=dictionary.register(i,value);
    }
    vals.add(tuple);
  }
  this.data=new DataMatrix(vals.size(),header.length);
  for (int row=0; row < vals.size(); row++) {
    this.data.setRow(row,vals.get(row));
  }
  this.dictionary.finalizeAll();
  this.columnToDataType=getColumnToDataType();
}","/** 
 * Creates a new data handle.
 * @param data
 */
protected DataHandleInput(final Data data){
  Iterator<String[]> iterator=data.iterator();
  if (!iterator.hasNext()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.setRegistry(new DataRegistry());
  this.getRegistry().updateInput(this);
  this.definition=data.getDefinition().clone();
  String[] columns=iterator.next();
  super.setHeader(Arrays.copyOf(columns,columns.length));
  this.dictionary=new Dictionary(header.length);
  List<int[]> vals=new ArrayList<int[]>();
  while (iterator.hasNext()) {
    String[] strings=iterator.next();
    int[] tuple=new int[header.length];
    for (int i=0; i < header.length; i++) {
      String value=(i < strings.length) ? strings[i] : DataType.NULL_VALUE;
      value=(value != null) ? value : DataType.NULL_VALUE;
      tuple[i]=dictionary.register(i,value);
    }
    vals.add(tuple);
  }
  this.data=new DataMatrix(vals.size(),header.length);
  for (int row=0; row < vals.size(); row++) {
    this.data.setRow(row,vals.get(row));
  }
  this.dictionary.finalizeAll();
  this.columnToDataType=getColumnToDataType();
}",0.9921052631578948
107830,"/** 
 * Materializes all functional hierarchies.
 * @param handle
 */
protected void materializeHierarchies(DataHandle handle){
  Set<String> attributes=new HashSet<>(this.getQuasiIdentifiersWithGeneralization());
  attributes.addAll(this.getQuasiIdentifiersWithClusteringAndMicroaggregation());
  for (  String attribute : attributes) {
    String[] data=handle.getDistinctValues(handle.getColumnIndexOf(attribute));
    if (isHierarchyBuilderAvailable(attribute)) {
      try {
        this.hierarchies.put(attribute,this.getHierarchyBuilder(attribute).build(data));
      }
 catch (      Exception e) {
        throw new IllegalStateException(""String_Node_Str"" + attribute + ""String_Node_Str"",e);
      }
    }
 else {
      String[][] hierarchy=new String[data.length][];
      for (int i=0; i < data.length; i++) {
        hierarchy[i]=new String[]{data[i]};
      }
      this.hierarchies.put(attribute,Hierarchy.create(hierarchy));
    }
  }
}","/** 
 * Materializes all functional hierarchies.
 * @param handle
 */
protected void materializeHierarchies(DataHandle handle){
  Set<String> attributes=new HashSet<>(this.getQuasiIdentifiersWithGeneralization());
  attributes.addAll(this.getQuasiIdentifiersWithClusteringAndMicroaggregation());
  for (  String attribute : attributes) {
    String[] data=handle.getDistinctValues(handle.getColumnIndexOf(attribute));
    if (isHierarchyBuilderAvailable(attribute)) {
      try {
        this.hierarchies.put(attribute,this.getHierarchyBuilder(attribute).build(data));
      }
 catch (      Exception e) {
        throw new IllegalStateException(""String_Node_Str"" + attribute + ""String_Node_Str"",e);
      }
    }
 else     if (!isHierarchyAvailable(attribute)) {
      String[][] hierarchy=new String[data.length][];
      for (int i=0; i < data.length; i++) {
        hierarchy[i]=new String[]{data[i]};
      }
      this.hierarchies.put(attribute,Hierarchy.create(hierarchy));
    }
  }
}",0.9783728115345004
107831,"/** 
 * Returns an array of indices for the given subset of strings. The first set will be encoded first. The second must be a subset of the first.
 * @param header
 * @param first
 * @param second
 * @return
 */
private int[] getColumns(String[] header,Set<String> first,Set<String> second){
  int[] result=new int[first.size()];
  int index=0;
  for (int i=0; i < header.length; i++) {
    if (first.contains(header[i]) && !second.contains(header)) {
      result[index++]=i;
    }
  }
  for (int i=0; i < header.length; i++) {
    if (first.contains(header[i]) && second.contains(header)) {
      result[index++]=i;
    }
  }
  return result;
}","/** 
 * Returns an array of indices for the given subset of strings. The first set will be encoded first. The second must be a subset of the first.
 * @param header
 * @param first
 * @param second
 * @return
 */
private int[] getColumns(String[] header,Set<String> first,Set<String> second){
  int[] result=new int[first.size()];
  int index=0;
  for (int i=0; i < header.length; i++) {
    String attribute=header[i];
    if (first.contains(attribute) && !second.contains(attribute)) {
      result[index++]=i;
    }
  }
  for (int i=0; i < header.length; i++) {
    String attribute=header[i];
    if (first.contains(attribute) && second.contains(attribute)) {
      result[index++]=i;
    }
  }
  return result;
}",0.875366568914956
107832,"/** 
 * Updates the definition with further data to swap.
 * @param matrixGH
 * @param matrixDI
 * @param matrixIS
 */
protected void update(DataMatrix matrixGH,DataMatrix matrixDI,DataMatrix matrixIS){
  this.dataGH=matrixGH;
  this.dataDI=matrixDI;
  this.dataIS=matrixIS;
}","/** 
 * Updates the definition with further data to swap.
 * @param dataGeneralized
 * @param dataAnalyzed
 * @param matrixIS
 */
protected void update(DataMatrix dataGeneralized,DataMatrix dataAnalyzed){
  this.dataGeneralized=dataGeneralized;
  this.dataAnalyzed=dataAnalyzed;
}",0.6510791366906474
107833,"/** 
 * Swaps the rows.
 * @param row1
 * @param row2
 */
protected void internalSwap(final int row1,final int row2){
  checkRow(row1,data.getNumRows());
  checkRow(row2,data.getNumRows());
  swap(row1,row2,data);
  if (dataGH != null)   swap(row1,row2,dataGH);
  if (dataDI != null)   swap(row1,row2,dataDI);
  if (dataIS != null)   swap(row1,row2,dataIS);
}","/** 
 * Swaps the rows.
 * @param row1
 * @param row2
 */
protected void internalSwap(final int row1,final int row2){
  checkRow(row1,data.getNumRows());
  checkRow(row2,data.getNumRows());
  data.swap(row1,row2);
  if (dataGeneralized != null)   dataGeneralized.swap(row1,row2);
  if (dataAnalyzed != null)   dataAnalyzed.swap(row1,row2);
}",0.72
107834,"/** 
 * Releases all resources.
 */
protected void doRelease(){
  this.setLocked(false);
  dataGH=null;
  dataDI=null;
  dataIS=null;
}","/** 
 * Releases all resources.
 */
protected void doRelease(){
  this.setLocked(false);
  dataGeneralized=null;
  dataAnalyzed=null;
}",0.8888888888888888
107835,"/** 
 * Returns the input buffer
 * @return
 */
protected DataMatrix getInputBuffer(){
  checkRegistry();
  return this.dataGH;
}","/** 
 * Returns the input buffer
 * @return
 */
protected DataMatrix getInputBuffer(){
  checkRegistry();
  return this.dataGeneralized;
}",0.9588014981273408
107836,"/** 
 * Releases all resources.
 */
protected void doRelease(){
  result.releaseBuffer(this);
  node=null;
  dataStatic=null;
  dataGeneralized=null;
  dataAggregated=null;
  registry=null;
  subset=null;
  columnToDataType=null;
  columnToIndex=null;
  columnToData=null;
  definition=null;
  header=null;
  headerMap=null;
  node=null;
}","/** 
 * Releases all resources.
 */
protected void doRelease(){
  result.releaseBuffer(this);
  node=null;
  dataInput=null;
  dataGeneralized=null;
  dataAggregated=null;
  registry=null;
  subset=null;
  columnToDataType=null;
  columnToIndex=null;
  columnToData=null;
  definition=null;
  header=null;
  headerMap=null;
  node=null;
}",0.983751846381093
107837,"/** 
 * Initialization method
 * @param result
 * @param registry
 * @param manager
 * @param outputGeneralized
 * @param outputMicroaggregated
 * @param node
 * @param definition
 * @param config
 */
private void initialize(final ARXResult result,final DataRegistry registry,final DataManager manager,final Data outputGeneralized,final Data outputMicroaggregated,final ARXNode node,final DataDefinition definition,final ARXConfiguration config){
  registry.updateOutput(node,this);
  this.setRegistry(registry);
  this.dataGeneralized=outputGeneralized;
  this.dataAggregated=outputMicroaggregated;
  this.dataStatic=manager.getDataStatic();
  this.setHeader(manager.getHeader());
  this.columnToData=new Data[header.length];
  this.columnToIndex=new int[header.length];
  for (  Data data : new Data[]{dataStatic,dataGeneralized,dataAggregated}) {
    for (int i=0; i < data.getHeader().length; i++) {
      int column=data.getColumns()[i];
      this.columnToIndex[column]=i;
      this.columnToData[column]=data;
    }
  }
  this.columnToSuppressionStatus=getColumnToSuppressionStatus(config,definition);
  this.result=result;
  this.definition=definition;
  this.anonymous=node.getAnonymity() == Anonymity.ANONYMOUS;
  this.node=node;
  this.getRegistry().createOutputSubset(node,config);
}","/** 
 * Initialization method
 * @param result
 * @param registry
 * @param manager
 * @param outputGeneralized
 * @param outputMicroaggregated
 * @param node
 * @param definition
 * @param config
 */
private void initialize(final ARXResult result,final DataRegistry registry,final DataManager manager,final Data outputGeneralized,final Data outputMicroaggregated,final ARXNode node,final DataDefinition definition,final ARXConfiguration config){
  registry.updateOutput(node,this);
  this.setRegistry(registry);
  this.dataGeneralized=outputGeneralized;
  this.dataAggregated=outputMicroaggregated;
  this.dataInput=manager.getDataInput();
  this.setHeader(manager.getHeader());
  this.columnToData=new Data[header.length];
  this.columnToIndex=new int[header.length];
  for (  Data data : new Data[]{dataGeneralized,dataAggregated}) {
    for (int i=0; i < data.getHeader().length; i++) {
      int column=data.getColumns()[i];
      this.columnToIndex[column]=i;
      this.columnToData[column]=data;
    }
  }
  for (int column=0; column < header.length; column++) {
    String attribute=header[column];
    if (definition.getSensitiveAttributes().contains(attribute) || definition.getInsensitiveAttributes().contains(attribute)) {
      this.columnToIndex[column]=column;
      this.columnToData[column]=dataInput;
    }
  }
  this.columnToSuppressionStatus=getColumnToSuppressionStatus(config,definition);
  this.result=result;
  this.definition=definition;
  this.anonymous=node.getAnonymity() == Anonymity.ANONYMOUS;
  this.node=node;
  this.getRegistry().createOutputSubset(node,config);
}",0.879363982025579
107838,"/** 
 * Returns an instance of this data manager, that is projected onto the given rowset
 * @param rowset
 * @return
 */
public DataManager getSubsetInstance(RowSet rowset){
  return new DataManagerSubset(this,dataAnalyzed.getSubsetInstance(rowset),dataGeneralized.getSubsetInstance(rowset),dataStatic.getSubsetInstance(rowset),definition,shares,header,hierarchiesGeneralized,hierarchiesAnalyzed,generalizationLevelsMinimum,generalizationLevelsMaximum,microaggregationData.getSubsetInstance());
}","/** 
 * Returns an instance of this data manager, that is projected onto the given rowset
 * @param rowset
 * @return
 */
public DataManager getSubsetInstance(RowSet rowset){
  return new DataManagerSubset(this,dataAnalyzed.getSubsetInstance(rowset),dataGeneralized.getSubsetInstance(rowset),dataInput.getSubsetInstance(rowset),definition,shares,header,hierarchiesGeneralized,hierarchiesAnalyzed,generalizationLevelsMinimum,generalizationLevelsMaximum,microaggregationData.getSubsetInstance());
}",0.9889224572004028
107839,"/** 
 * For creating a projected instance
 * @param dataAnalyzed
 * @param dataGeneralized
 * @param dataStatic
 * @param definition
 * @param shares
 * @param header
 * @param hierarchiesGeneralized
 * @param hierarchiesAnalyzed
 * @param generalizationLevelsMinimum
 * @param generalizationLevelsMaximum
 * @param microaggregationFunctions
 * @param microaggregationDomainSizes
 * @param microaggregationHeader
 * @param microaggregationStartIndex
 */
protected DataManager(Data dataAnalyzed,Data dataGeneralized,Data dataStatic,DataDefinition definition,DomainShare[] shares,String[] header,GeneralizationHierarchy[] hierarchiesGeneralized,GeneralizationHierarchy[] hierarchiesAnalyzed,int[] generalizationLevelsMinimum,int[] generalizationLevelsMaximum,DataMicroAggregation microaggregationData){
  this.dataAnalyzed=dataAnalyzed;
  this.dataGeneralized=dataGeneralized;
  this.dataStatic=dataStatic;
  this.definition=definition;
  this.shares=shares;
  this.header=header;
  this.hierarchiesGeneralized=hierarchiesGeneralized;
  this.hierarchiesAnalyzed=hierarchiesAnalyzed;
  this.generalizationLevelsMinimum=generalizationLevelsMinimum;
  this.generalizationLevelsMaximum=generalizationLevelsMaximum;
  this.microaggregationData=microaggregationData;
  this.subset=null;
  this.subsetSize=0;
}","/** 
 * For creating a projected instance
 * @param dataAnalyzed
 * @param dataGeneralized
 * @param dataInput
 * @param definition
 * @param shares
 * @param header
 * @param hierarchiesGeneralized
 * @param hierarchiesAnalyzed
 * @param generalizationLevelsMinimum
 * @param generalizationLevelsMaximum
 * @param microaggregationFunctions
 * @param microaggregationDomainSizes
 * @param microaggregationHeader
 * @param microaggregationStartIndex
 */
protected DataManager(Data dataAnalyzed,Data dataGeneralized,Data dataInput,DataDefinition definition,DomainShare[] shares,String[] header,GeneralizationHierarchy[] hierarchiesGeneralized,GeneralizationHierarchy[] hierarchiesAnalyzed,int[] generalizationLevelsMinimum,int[] generalizationLevelsMaximum,DataMicroAggregation microaggregationData){
  this.dataAnalyzed=dataAnalyzed;
  this.dataGeneralized=dataGeneralized;
  this.dataInput=dataInput;
  this.definition=definition;
  this.shares=shares;
  this.header=header;
  this.hierarchiesGeneralized=hierarchiesGeneralized;
  this.hierarchiesAnalyzed=hierarchiesAnalyzed;
  this.generalizationLevelsMinimum=generalizationLevelsMinimum;
  this.generalizationLevelsMaximum=generalizationLevelsMaximum;
  this.microaggregationData=microaggregationData;
  this.subset=null;
  this.subsetSize=0;
}",0.98306389530408
107840,"/** 
 * Constructor
 * @param source
 * @param dataAnalyzed
 * @param dataGeneralized
 * @param dataStatic
 * @param definition
 * @param shares
 * @param header
 * @param hierarchiesGeneralized
 * @param hierarchiesAnalyzed
 * @param generalizationLevelsMinimum
 * @param generalizationLevelsMaximum
 * @param microaggregationData
 */
protected DataManagerSubset(DataManager source,Data dataAnalyzed,Data dataGeneralized,Data dataStatic,DataDefinition definition,DomainShare[] shares,String[] header,GeneralizationHierarchy[] hierarchiesGeneralized,GeneralizationHierarchy[] hierarchiesAnalyzed,int[] generalizationLevelsMinimum,int[] generalizationLevelsMaximum,DataMicroAggregation microaggregationData){
  super(dataAnalyzed,dataGeneralized,dataStatic,source.getDataDefinition(),shares,header,hierarchiesGeneralized,hierarchiesAnalyzed,generalizationLevelsMinimum,generalizationLevelsMaximum,microaggregationData);
  this.source=source;
}","/** 
 * Constructor
 * @param source
 * @param dataAnalyzed
 * @param dataGeneralized
 * @param dataInput
 * @param definition
 * @param shares
 * @param header
 * @param hierarchiesGeneralized
 * @param hierarchiesAnalyzed
 * @param generalizationLevelsMinimum
 * @param generalizationLevelsMaximum
 * @param microaggregationData
 */
protected DataManagerSubset(DataManager source,Data dataAnalyzed,Data dataGeneralized,Data dataInput,DataDefinition definition,DomainShare[] shares,String[] header,GeneralizationHierarchy[] hierarchiesGeneralized,GeneralizationHierarchy[] hierarchiesAnalyzed,int[] generalizationLevelsMinimum,int[] generalizationLevelsMaximum,DataMicroAggregation microaggregationData){
  super(dataAnalyzed,dataGeneralized,dataInput,source.getDataDefinition(),shares,header,hierarchiesGeneralized,hierarchiesAnalyzed,generalizationLevelsMinimum,generalizationLevelsMaximum,microaggregationData);
  this.source=source;
}",0.6496544391281234
107841,"@Override public String[] next(){
  initParser();
  String[] result=next;
  next=parser.parseNext();
  if (result.length != next.length) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (cleansing) {
    if (result.length != datatypes.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    for (int i=0; i < result.length; i++) {
      if (!datatypes[i].isValid(result[i])) {
        result[i]=DataType.NULL_VALUE;
      }
    }
  }
  return result;
}","@Override public String[] next(){
  initParser();
  String[] result=next;
  next=parser.parseNext();
  if (next != null && result != null && result.length != next.length) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (cleansing) {
    if (result.length != datatypes.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    for (int i=0; i < result.length; i++) {
      if (!datatypes[i].isValid(result[i])) {
        result[i]=DataType.NULL_VALUE;
      }
    }
  }
  return result;
}",0.966796875
107842,"/** 
 * Returns an iterator. <b>You must iterate trough all elements to prevent resource leaks!</b>
 * @return the iterator
 */
public Iterator<String[]> iterator(){
  return new Iterator<String[]>(){
    boolean initialized=false;
    CsvParser parser=null;
    String[] next=null;
    @Override public boolean hasNext(){
      initParser();
      boolean result=next != null;
      if (!result && parser != null) {
        parser.stopParsing();
        parser=null;
      }
      return result;
    }
    @Override public String[] next(){
      initParser();
      String[] result=next;
      next=parser.parseNext();
      if (result.length != next.length) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (cleansing) {
        if (result.length != datatypes.length) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        for (int i=0; i < result.length; i++) {
          if (!datatypes[i].isValid(result[i])) {
            result[i]=DataType.NULL_VALUE;
          }
        }
      }
      return result;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    /** 
 * Initializes the parser 
 */
    private void initParser(){
      if (!initialized) {
        parser=new CsvParser(settings);
        parser.beginParsing(reader);
        next=parser.parseNext();
        initialized=true;
      }
    }
  }
;
}","/** 
 * Returns an iterator. <b>You must iterate trough all elements to prevent resource leaks!</b>
 * @return the iterator
 */
public Iterator<String[]> iterator(){
  return new Iterator<String[]>(){
    boolean initialized=false;
    CsvParser parser=null;
    String[] next=null;
    @Override public boolean hasNext(){
      initParser();
      boolean result=next != null;
      if (!result && parser != null) {
        parser.stopParsing();
        parser=null;
      }
      return result;
    }
    @Override public String[] next(){
      initParser();
      String[] result=next;
      next=parser.parseNext();
      if (next != null && result != null && result.length != next.length) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (cleansing) {
        if (result.length != datatypes.length) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        for (int i=0; i < result.length; i++) {
          if (!datatypes[i].isValid(result[i])) {
            result[i]=DataType.NULL_VALUE;
          }
        }
      }
      return result;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    /** 
 * Initializes the parser 
 */
    private void initParser(){
      if (!initialized) {
        parser=new CsvParser(settings);
        parser.beginParsing(reader);
        next=parser.parseNext();
        initialized=true;
      }
    }
  }
;
}",0.9883081155433288
107843,"/** 
 * Creates an object which projects the given data onto the given set of columns
 * @param data
 * @param header
 * @param columns
 * @param dictionary
 * @return
 */
public static Data createProjection(final DataMatrix data,final String[] header,final int[] columns,final Dictionary dictionary){
  if (columns.length == 0) {
    return new Data(null,new String[0],new int[0],new Dictionary(0));
  }
  DataMatrix matrix=new DataMatrix(data.getNumRows(),columns.length);
  for (int row=0; row < data.getNumRows(); row++) {
    matrix.setRow(row);
    data.setRow(row);
    for (    int column : columns) {
      matrix.setValueAtColumn(column,data.getValueAtColumn(column));
    }
  }
  String[] newHeader=new String[columns.length];
  int index=0;
  for (  int column : columns) {
    newHeader[index++]=header[column];
  }
  return new Data(matrix,newHeader,columns,new Dictionary(dictionary,columns));
}","/** 
 * Creates an object which projects the given data onto the given set of columns
 * @param data
 * @param header
 * @param columns
 * @param dictionary
 * @return
 */
public static Data createProjection(final DataMatrix data,final String[] header,final int[] columns,final Dictionary dictionary){
  if (columns.length == 0) {
    return new Data(null,new String[0],new int[0],new Dictionary(0));
  }
  DataMatrix matrix=new DataMatrix(data.getNumRows(),columns.length);
  for (int row=0; row < data.getNumRows(); row++) {
    matrix.setRow(row);
    data.setRow(row);
    for (int index=0; index < columns.length; index++) {
      matrix.setValueAtColumn(index,data.getValueAtColumn(columns[index]));
    }
  }
  String[] newHeader=new String[columns.length];
  int index=0;
  for (  int column : columns) {
    newHeader[index++]=header[column];
  }
  return new Data(matrix,newHeader,columns,new Dictionary(dictionary,columns));
}",0.952896589063346
107844,"@Override public void onFinish(){
  if (stopped || !isEnabled()) {
    return;
  }
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  for (  String attribute : quality.getAttributes()) {
    createItem(attribute,quality);
  }
  table.setRedraw(true);
  table.layout();
  if (table2 != null) {
    table2.setRedraw(false);
    for (    final TableItem i : table2.getItems()) {
      i.dispose();
    }
    TableItem item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getGeneralizationIntensity().getArithmeticMean(false));
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getGranularity().getArithmeticMean(false));
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getGranularity().getArithmeticMean(false));
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getDiscernibility().getValue());
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getAverageClassSize().getValue());
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getKullbackLeiblerDivergence().getValue());
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getSumOfSquaredErrors().getValue());
    table2.setRedraw(true);
    table2.layout();
  }
  setStatusDone();
}","@Override public void onFinish(){
  if (stopped || !isEnabled()) {
    return;
  }
  table.setRedraw(false);
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  for (  String attribute : quality.getAttributes()) {
    createItem(attribute,quality);
  }
  table.setRedraw(true);
  table.layout();
  if (table2 != null) {
    table2.setRedraw(false);
    for (    final TableItem i : table2.getItems()) {
      i.dispose();
    }
    TableItem item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getGeneralizationIntensity().getArithmeticMean(false));
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getGranularity().getArithmeticMean(false));
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getNonUniformEntropy().getArithmeticMean(false));
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getDiscernibility().getValue());
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getAverageClassSize().getValue());
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getKullbackLeiblerDivergence().getValue());
    item=new TableItem(table2,SWT.NONE);
    item.setText(0,""String_Node_Str"");
    setNumericValueAtIndex(item,1,quality.getSumOfSquaredErrors().getValue());
    table2.setRedraw(true);
    table2.layout();
  }
  setStatusDone();
}",0.992266508030934
107845,"@Override protected void doUpdate(AnalysisContextQuality context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private StatisticsQuality quality;
    @Override public int getProgress(){
      return 0;
    }
    @Override public void onError(){
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled()) {
        return;
      }
      table.setRedraw(false);
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      for (      String attribute : quality.getAttributes()) {
        createItem(attribute,quality);
      }
      table.setRedraw(true);
      table.layout();
      if (table2 != null) {
        table2.setRedraw(false);
        for (        final TableItem i : table2.getItems()) {
          i.dispose();
        }
        TableItem item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getGeneralizationIntensity().getArithmeticMean(false));
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getGranularity().getArithmeticMean(false));
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getGranularity().getArithmeticMean(false));
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getDiscernibility().getValue());
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getAverageClassSize().getValue());
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getKullbackLeiblerDivergence().getValue());
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getSumOfSquaredErrors().getValue());
        table2.setRedraw(true);
        table2.layout();
      }
      setStatusDone();
    }
    @Override public void onInterrupt(){
      if (!isEnabled()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      this.quality=builder.getQualityStatistics();
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}","@Override protected void doUpdate(AnalysisContextQuality context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private StatisticsQuality quality;
    @Override public int getProgress(){
      return 0;
    }
    @Override public void onError(){
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled()) {
        return;
      }
      table.setRedraw(false);
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      for (      String attribute : quality.getAttributes()) {
        createItem(attribute,quality);
      }
      table.setRedraw(true);
      table.layout();
      if (table2 != null) {
        table2.setRedraw(false);
        for (        final TableItem i : table2.getItems()) {
          i.dispose();
        }
        TableItem item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getGeneralizationIntensity().getArithmeticMean(false));
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getGranularity().getArithmeticMean(false));
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getNonUniformEntropy().getArithmeticMean(false));
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getDiscernibility().getValue());
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getAverageClassSize().getValue());
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getKullbackLeiblerDivergence().getValue());
        item=new TableItem(table2,SWT.NONE);
        item.setText(0,""String_Node_Str"");
        setNumericValueAtIndex(item,1,quality.getSumOfSquaredErrors().getValue());
        table2.setRedraw(true);
        table2.layout();
      }
      setStatusDone();
    }
    @Override public void onInterrupt(){
      if (!isEnabled()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      this.quality=builder.getQualityStatistics();
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}",0.9954321855235418
107846,"/** 
 * Builds a generalization function mapping input values to the given level of the hierarchy
 * @param hierarchies
 * @param index
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private Map<String,String>[] getGeneralizationFunctions(String[][][] hierarchies,int index){
  Map<String,String>[] result=new HashMap[hierarchies.length];
  for (int level=0; level < hierarchies[index][0].length; level++) {
    Map<String,String> map=new HashMap<String,String>();
    for (int row=0; row < hierarchies[index].length; row++) {
      map.put(hierarchies[index][row][0],hierarchies[index][row][level]);
    }
    result[level]=map;
  }
  return result;
}","/** 
 * Builds a generalization function mapping input values to the given level of the hierarchy
 * @param hierarchies
 * @param index
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private Map<String,String>[] getGeneralizationFunctions(String[][][] hierarchies,int index){
  Map<String,String>[] result=new HashMap[hierarchies[index][0].length];
  for (int level=0; level < hierarchies[index][0].length; level++) {
    Map<String,String> map=new HashMap<String,String>();
    for (int row=0; row < hierarchies[index].length; row++) {
      map.put(hierarchies[index][row][0],hierarchies[index][row][level]);
    }
    result[level]=map;
  }
  return result;
}",0.9924471299093656
107847,"@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandle output=getOutput();
  QualityDomainShare[] shares=getDomainShares();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    for (int row=0; row < output.getNumRows(); row++) {
      try {
        double share=1d;
        if (!isSuppressed(output,indices,row)) {
          share=shares[i].getShare(output.getValue(row,column),0);
        }
        result[i]+=share;
      }
 catch (      Exception e) {
        result[i]=Double.NaN;
        break;
      }
      checkInterrupt();
    }
  }
  for (int i=0; i < result.length; i++) {
    result[i]/=(double)output.getNumRows();
    min[i]=shares[i].getDomainSize() == 0d ? 0d : 1d / shares[i].getDomainSize();
    max[i]=1d;
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}","@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandle output=getOutput();
  QualityDomainShare[] shares=getDomainShares();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    for (int row=0; row < output.getNumRows(); row++) {
      try {
        double share=1d;
        if (!isSuppressed(output,indices,row)) {
          share=shares[i].getShare(output.getValue(row,column),0);
        }
        result[i]+=share;
      }
 catch (      Exception e) {
        result[i]=Double.NaN;
      }
      checkInterrupt();
    }
  }
  for (int i=0; i < result.length; i++) {
    result[i]/=(double)output.getNumRows();
    min[i]=shares[i].getDomainSize() == 0d ? 0d : 1d / shares[i].getDomainSize();
    max[i]=1d;
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}",0.9924585218702866
107848,"@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandle output=getOutput();
  String[][][] hierarchies=getHierarchies();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandle input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[currentLevel].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          checkInterrupt();
        }
      }
      DataHandle input=getInput();
      Map<String,Double> inputFrequencies=getInputFrequencies(transformations,column,0);
      for (int row=0; row < input.getNumRows(); row++) {
        max[i]+=log2(inputFrequencies.get(input.getValue(row,column)) / (double)input.getNumRows());
        checkInterrupt();
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}","@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandle output=getOutput();
  String[][][] hierarchies=getHierarchies();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandle input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[currentLevel].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          checkInterrupt();
        }
      }
      DataHandle input=getInput();
      Map<String,Double> inputFrequencies=getInputFrequencies(transformations,column,0);
      for (int row=0; row < input.getNumRows(); row++) {
        max[i]+=log2(inputFrequencies.get(input.getValue(row,column)) / (double)input.getNumRows());
        checkInterrupt();
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
    }
    checkInterrupt();
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}",0.9976402250862224
107849,"@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandle output=getOutput();
  String[][][] hierarchies=getHierarchies();
  Map<String,Double>[] precisions=getPrecisions(hierarchies);
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    for (int row=0; row < output.getNumRows(); row++) {
      try {
        double precision=1d;
        if (!isSuppressed(output,indices,row)) {
          Double temp=precisions[i].get(output.getValue(row,column));
          precision=temp != null ? temp : 1d;
        }
        result[i]+=precision;
      }
 catch (      Exception e) {
        result[i]=Double.NaN;
        break;
      }
      checkInterrupt();
    }
  }
  for (int i=0; i < result.length; i++) {
    result[i]/=(double)output.getNumRows();
    min[i]=0d;
    max[i]=1d;
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}","@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandle output=getOutput();
  String[][][] hierarchies=getHierarchies();
  Map<String,Double>[] precisions=getPrecisions(hierarchies);
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    for (int row=0; row < output.getNumRows(); row++) {
      try {
        double precision=1d;
        if (!isSuppressed(output,indices,row)) {
          Double temp=precisions[i].get(output.getValue(row,column));
          precision=temp != null ? temp : 1d;
        }
        result[i]+=precision;
      }
 catch (      Exception e) {
        result[i]=Double.NaN;
      }
      checkInterrupt();
    }
  }
  for (int i=0; i < result.length; i++) {
    result[i]/=(double)output.getNumRows();
    min[i]=0d;
    max[i]=1d;
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}",0.9928057553956836
107850,"/** 
 * Returns minimum, maximum for the input column
 * @param inputColumnAsNumbers
 * @return
 */
private double[] getMinMax(double[] inputColumnAsNumbers){
  double min=Double.MAX_VALUE;
  double max=-Double.MAX_VALUE;
  for (int i=0; i < inputColumnAsNumbers.length; i+=2) {
    double value=inputColumnAsNumbers[i];
    min=Math.min(min,value);
    max=Math.max(max,value);
  }
  return new double[]{min,max};
}","/** 
 * Returns minimum, maximum for the input column
 * @param inputColumnAsNumbers
 * @return
 */
private double[] getMinMax(double[] inputColumnAsNumbers){
  double min=Double.MAX_VALUE;
  double max=-Double.MAX_VALUE;
  for (int i=0; i < inputColumnAsNumbers.length; i++) {
    double value=inputColumnAsNumbers[i];
    min=Math.min(min,value);
    max=Math.max(max,value);
  }
  return new double[]{min,max};
}",0.9963898916967509
107851,"@Override public QualityMeasureRowOriented evaluate(){
  try {
    int[] indices=getIndices();
    List<double[]> columns1=new ArrayList<>();
    List<double[]> columns2=new ArrayList<>();
    List<Double> stdDevs=new ArrayList<>();
    String[][][] hierarchies=getHierarchies();
    for (int index=0; index < indices.length; index++) {
      try {
        int column=indices[index];
        double[][] columnsAsNumbers=getColumnsAsNumbers(getInput(),getOutput(),hierarchies[index],column);
        if (columnsAsNumbers != null) {
          double stdDev=getStandardDeviation(columnsAsNumbers[0]);
          columns1.add(columnsAsNumbers[0]);
          columns2.add(columnsAsNumbers[1]);
          stdDevs.add(stdDev);
        }
      }
 catch (      Exception e) {
      }
    }
    if (columns1.isEmpty() || columns2.isEmpty() || stdDevs.isEmpty()) {
      return new QualityMeasureRowOriented();
    }
    double realDistance=getEuclideanDistance(columns1.toArray(new double[columns1.size()][]),columns2.toArray(new double[columns2.size()][]),stdDevs.toArray(new Double[stdDevs.size()]));
    double maxDistance=getEuclideanDistance(columns1.toArray(new double[columns1.size()][]),stdDevs.toArray(new Double[stdDevs.size()]));
    realDistance/=(double)columns1.size();
    realDistance/=(double)getOutput().getNumRows();
    maxDistance/=(double)columns1.size();
    maxDistance/=(double)getOutput().getNumRows();
    return new QualityMeasureRowOriented(0d,realDistance,maxDistance);
  }
 catch (  Exception e) {
    return new QualityMeasureRowOriented();
  }
}","@Override public QualityMeasureRowOriented evaluate(){
  try {
    int[] indices=getIndices();
    List<double[]> columns1=new ArrayList<>();
    List<double[]> columns2=new ArrayList<>();
    List<Double> stdDevs=new ArrayList<>();
    String[][][] hierarchies=getHierarchies();
    for (int index=0; index < indices.length; index++) {
      try {
        int column=indices[index];
        double[][] columnsAsNumbers=getColumnsAsNumbers(getInput(),getOutput(),hierarchies[index],column);
        if (columnsAsNumbers != null) {
          double stdDev=getStandardDeviation(columnsAsNumbers[0]);
          columns1.add(columnsAsNumbers[0]);
          columns2.add(columnsAsNumbers[1]);
          stdDevs.add(stdDev);
        }
      }
 catch (      Exception e) {
      }
    }
    if (columns1.isEmpty() || columns2.isEmpty() || stdDevs.isEmpty()) {
      return new QualityMeasureRowOriented();
    }
    double realDistance=getEuclideanDistance(columns1.toArray(new double[columns1.size()][]),columns2.toArray(new double[columns2.size()][]),stdDevs.toArray(new Double[stdDevs.size()]));
    double maxDistance=getMaximumEuclideanDistance(columns1.toArray(new double[columns1.size()][]),columns2.toArray(new double[columns2.size()][]),stdDevs.toArray(new Double[stdDevs.size()]));
    realDistance/=(double)columns1.size();
    realDistance/=(double)getOutput().getNumRows();
    maxDistance/=(double)columns1.size();
    maxDistance/=(double)getOutput().getNumRows();
    return new QualityMeasureRowOriented(0d,realDistance,maxDistance);
  }
 catch (  Exception e) {
    return new QualityMeasureRowOriented();
  }
}",0.9827532141737222
107852,"@Override public UtilityMeasureColumnOriented evaluate(final DataHandleInternal output){
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getHelper().getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getHelper().getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? inputFrequencies=getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandleInternal input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[levels.get(currentLevel)].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          max[i]+=log2(inputFrequencies.get(inputValue) / (double)input.getNumRows());
          checkInterrupt();
        }
      }
      result[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new UtilityMeasureColumnOriented(output,indices,min,result,max);
}","@Override public UtilityMeasureColumnOriented evaluate(final DataHandleInternal output){
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getHelper().getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getHelper().getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? inputFrequencies=getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandleInternal input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[levels.get(currentLevel)].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          max[i]+=log2(inputFrequencies.get(inputValue) / (double)input.getNumRows());
          checkInterrupt();
        }
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new UtilityMeasureColumnOriented(output,indices,min,result,max);
}",0.9964100518548066
107853,"@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandleInternal output=getOutput();
  String[][][] hierarchies=getHierarchies();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? inputFrequencies=getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandleInternal input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[currentLevel].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          max[i]+=log2(inputFrequencies.get(inputValue) / (double)input.getNumRows());
          checkInterrupt();
        }
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}","@Override public QualityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandleInternal output=getOutput();
  String[][][] hierarchies=getHierarchies();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandleInternal input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[currentLevel].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          checkInterrupt();
        }
      }
      DataHandleInternal input=getInput();
      Map<String,Double> inputFrequencies=getInputFrequencies(transformations,column,0);
      for (int row=0; row < input.getNumRows(); row++) {
        max[i]+=log2(inputFrequencies.get(input.getValue(row,column)) / (double)input.getNumRows());
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new QualityMeasureColumnOriented(output,indices,min,result,max);
}",0.8726521412471826
107854,"@Override public UtilityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandleInternal output=getOutput();
  String[][][] hierarchies=getHierarchies();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? inputFrequencies=getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandleInternal input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[levels.get(currentLevel)].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          max[i]+=log2(inputFrequencies.get(inputValue) / (double)input.getNumRows());
          checkInterrupt();
        }
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new UtilityMeasureColumnOriented(output,indices,min,result,max);
}","@Override public UtilityMeasureColumnOriented evaluate(){
  int[] indices=getIndices();
  DataHandleInternal output=getOutput();
  String[][][] hierarchies=getHierarchies();
  double[] result=new double[indices.length];
  double[] min=new double[indices.length];
  double[] max=new double[indices.length];
  for (int i=0; i < result.length; i++) {
    int column=indices[i];
    try {
      Map<String,String>[] generalizationFunctions=getGeneralizationFunctions(hierarchies,i);
      Map<String,Integer> inverseGeneralizationFunction=getInverseGeneralizationFunction(hierarchies,i);
      final int[] transformations=new int[output.getNumRows()];
      for (int row=0; row < output.getNumRows(); row++) {
        transformations[row]=inverseGeneralizationFunction.get(output.getValue(row,column));
      }
      Set<Integer> _levels=new HashSet<Integer>();
      for (      int level : transformations) {
        _levels.add(level);
      }
      List<Integer> levels=new ArrayList<Integer>();
      levels.addAll(_levels);
      Collections.sort(levels);
      for (int levelIndex=0; levelIndex < levels.size(); levelIndex++) {
        int currentLevel=levels.get(levelIndex);
        int previousLevel=levelIndex > 0 ? levels.get(levelIndex - 1) : currentLevel;
        Map<String,Double> inputFrequencies=levelIndex == 0 ? inputFrequencies=getInputFrequencies(transformations,column,currentLevel) : getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,previousLevel);
        Map<String,Double> outputFrequencies=getOutputFrequencies(transformations,generalizationFunctions,column,currentLevel,currentLevel);
        DataHandleInternal input=getInput();
        for (int row=0; row < input.getNumRows(); row++) {
          String value=input.getValue(row,column);
          String inputValue=levelIndex == 0 ? value : generalizationFunctions[previousLevel].get(value);
          String outputValue=generalizationFunctions[currentLevel].get(value);
          if (transformations[row] >= currentLevel) {
            result[i]+=log2(inputFrequencies.get(inputValue) / outputFrequencies.get(outputValue));
          }
          max[i]+=log2(inputFrequencies.get(inputValue) / (double)input.getNumRows());
          checkInterrupt();
        }
      }
      result[i]*=-1;
      max[i]*=-1;
      min[i]=0;
    }
 catch (    Exception e) {
      result[i]=Double.NaN;
      min[i]=Double.NaN;
      max[i]=Double.NaN;
      break;
    }
    checkInterrupt();
  }
  return new UtilityMeasureColumnOriented(output,indices,min,result,max);
}",0.997666277712952
107855,"/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records < 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return 0;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.checker.getInputBuffer())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
    }
  }
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setMaxOutliers(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return 0;
  }
  TransformedData data=result.checker.applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  int[][] oldGeneralized=output.getOutputBufferGeneralized().getArray();
  int[][] oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  int[][] newGeneralized=data.bufferGeneralized.getArray();
  int[][] newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.length != 0) {
          System.arraycopy(newGeneralized[newIndex],0,oldGeneralized[oldIndex],0,newGeneralized[newIndex].length);
          optimized+=(newGeneralized[newIndex][0] & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.length != 0) {
          System.arraycopy(newMicroaggregated[newIndex],0,oldMicroaggregated[oldIndex],0,newMicroaggregated[newIndex].length);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    return optimized;
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}","/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param records A fraction [0,1] of records that need to be optimized.
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimizeFast(DataHandle handle,double records,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  if (listener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (handle == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!Double.isNaN(records) && (records <= 0d || records > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!Double.isNaN(gsFactor) && (gsFactor < 0d || gsFactor > 1d)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!(handle instanceof DataHandleOutput)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOptimizable(handle)) {
    return 0;
  }
  DataHandleOutput output=(DataHandleOutput)handle;
  if (output.getInputBuffer() == null || !output.getInputBuffer().equals(this.checker.getInputBuffer())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  RowSet rowset=RowSet.create(output.getNumRows());
  for (int row=0; row < output.getNumRows(); row++) {
    if (output.isOutlier(row)) {
      rowset.add(row);
    }
  }
  ARXConfiguration config=this.config.getInstanceForLocalRecoding(rowset,gsFactor);
  if (!Double.isNaN(records)) {
    double absoluteRecords=records * handle.getNumRows();
    double relativeRecords=absoluteRecords / (double)rowset.size();
    relativeRecords=relativeRecords < 0d ? 0d : relativeRecords;
    relativeRecords=relativeRecords > 1d ? 1d : relativeRecords;
    config.setMaxOutliers(1d - relativeRecords);
  }
  DataDefinition definition=this.definition.clone();
  DataManager manager=this.manager.getSubsetInstance(rowset);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  if (listener != null) {
    anonymizer.setListener(listener);
  }
  if (this.anonymizer != null) {
    anonymizer.parse(this.anonymizer);
  }
  Result result=null;
  try {
    result=anonymizer.anonymize(manager,definition,config);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (result.optimum == null) {
    return 0;
  }
  TransformedData data=result.checker.applyTransformation(result.optimum,output.getOutputBufferMicroaggregated().getDictionary());
  int newIndex=-1;
  int[][] oldGeneralized=output.getOutputBufferGeneralized().getArray();
  int[][] oldMicroaggregated=output.getOutputBufferMicroaggregated().getArray();
  int[][] newGeneralized=data.bufferGeneralized.getArray();
  int[][] newMicroaggregated=data.bufferMicroaggregated.getArray();
  try {
    int optimized=0;
    for (int oldIndex=0; oldIndex < rowset.length(); oldIndex++) {
      if (rowset.contains(oldIndex)) {
        newIndex++;
        if (oldGeneralized != null && oldGeneralized.length != 0) {
          System.arraycopy(newGeneralized[newIndex],0,oldGeneralized[oldIndex],0,newGeneralized[newIndex].length);
          optimized+=(newGeneralized[newIndex][0] & Data.OUTLIER_MASK) != 0 ? 0 : 1;
        }
        if (oldMicroaggregated != null && oldMicroaggregated.length != 0) {
          System.arraycopy(newMicroaggregated[newIndex],0,oldMicroaggregated[oldIndex],0,newMicroaggregated[newIndex].length);
        }
      }
    }
    output.updateDataTypes(result.optimum.getGeneralization());
    if (optimized != 0) {
      output.setOptimized(true);
    }
    return optimized;
  }
 catch (  Exception e) {
    throw new RollbackRequiredException(""String_Node_Str"",e);
  }
}",0.999874419188748
107856,"@Override protected int getValueIdentifier(int column,String value){
  int key=column * 2;
  int type=inverseMap[key];
  String[] values=inverseDictionaries[type].getMapping()[column];
  for (int index=0; index < values.length; index++) {
    if (values[index].equals(value)) {
      return index;
    }
  }
  return -1;
}","@Override protected int getValueIdentifier(int column,String value){
  final int key=column * 2;
  final int type=inverseMap[key];
switch (type) {
case AttributeTypeInternal.IDENTIFYING:
    return -1;
default :
  String[] values=inverseDictionaries[type].getMapping()[inverseMap[key + 1]];
for (int index=0; index < values.length; index++) {
  if (values[index].equals(value)) {
    return index;
  }
}
return -1;
}
}",0.8135135135135135
107857,"/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  DataDefinition definition=model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition();
  DataHandle handle=model.getOutput() != null ? model.getOutput() : model.getInputConfig().getInput().getHandle();
  State state=new State(handle,definition);
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableEditor editor : editors) {
    editor.getEditor().dispose();
    editor.dispose();
  }
  editors.clear();
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  features.removeAll();
  classes.removeAll();
  TableItem itemAllFeatures=new TableItem(features,SWT.NONE);
  itemAllFeatures.setText(new String[]{""String_Node_Str"",ALL,""String_Node_Str""});
  TableItem itemAllclasses=new TableItem(classes,SWT.NONE);
  itemAllclasses.setText(new String[]{""String_Node_Str"",ALL});
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(new String[]{""String_Node_Str"",attribute});
    itemC.setImage(0,image);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    TableEditor editor=new TableEditor(features);
    editors.add(editor);
    final CCombo combo=new CCombo(features,SWT.NONE);
    final Color defaultColor=combo.getForeground();
    if (definition.getDataType(attribute) instanceof DataTypeWithRatioScale) {
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
    }
 else {
      combo.setEditable(false);
    }
    combo.add(LABEL_CATEGORICAL);
    combo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addSelectionListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    combo.addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addKeyListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    editor.grabHorizontal=true;
    editor.setEditor(combo,itemF,2);
    String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
    if (function == null || function.equals(""String_Node_Str"")) {
      function=LABEL_CATEGORICAL;
    }
    combo.setText(function);
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}","/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  DataDefinition definition=model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition();
  DataHandle handle=model.getOutput() != null ? model.getOutput() : model.getInputConfig().getInput().getHandle();
  State state=new State(handle,definition,model.getClassificationModel().getFeatureScaling());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableEditor editor : editors) {
    editor.getEditor().dispose();
    editor.dispose();
  }
  editors.clear();
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  features.removeAll();
  classes.removeAll();
  TableItem itemAllFeatures=new TableItem(features,SWT.NONE);
  itemAllFeatures.setText(new String[]{""String_Node_Str"",ALL,""String_Node_Str""});
  TableItem itemAllclasses=new TableItem(classes,SWT.NONE);
  itemAllclasses.setText(new String[]{""String_Node_Str"",ALL});
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(new String[]{""String_Node_Str"",attribute});
    itemC.setImage(0,image);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    TableEditor editor=new TableEditor(features);
    editors.add(editor);
    final CCombo combo=new CCombo(features,SWT.NONE);
    final Color defaultColor=combo.getForeground();
    if (definition.getDataType(attribute) instanceof DataTypeWithRatioScale) {
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
      combo.add(""String_Node_Str"");
    }
 else {
      combo.setEditable(false);
    }
    combo.add(LABEL_CATEGORICAL);
    combo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addSelectionListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    combo.addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addKeyListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    editor.grabHorizontal=true;
    editor.setEditor(combo,itemF,2);
    String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
    if (function == null || function.equals(""String_Node_Str"")) {
      function=LABEL_CATEGORICAL;
    }
    combo.setText(function);
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}",0.9926629261976694
107858,"/** 
 * Creates a new instance
 * @param model
 * @param handle
 * @param definition
 */
private State(DataHandle handle,DataDefinition definition){
  for (int col=0; col < handle.getNumColumns(); col++) {
    String attribute=handle.getAttributeName(col);
    attributes.add(attribute);
    types.add(definition.getAttributeType(attribute));
    dtypes.add(definition.getDataType(attribute));
  }
  features.addAll(model.getSelectedFeatures());
  classes.addAll(model.getSelectedClasses());
}","/** 
 * Creates a new instance
 * @param handle
 * @param definition
 * @param featureScaling 
 */
private State(DataHandle handle,DataDefinition definition,ARXFeatureScaling featureScaling){
  for (int col=0; col < handle.getNumColumns(); col++) {
    String attribute=handle.getAttributeName(col);
    attributes.add(attribute);
    types.add(definition.getAttributeType(attribute));
    dtypes.add(definition.getDataType(attribute));
    scaling.add(featureScaling.getScalingFunction(attribute));
  }
  features.addAll(model.getSelectedFeatures());
  classes.addAll(model.getSelectedClasses());
}",0.8644688644688645
107859,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((attributes == null) ? 0 : attributes.hashCode());
  result=prime * result + ((classes == null) ? 0 : classes.hashCode());
  result=prime * result + ((features == null) ? 0 : features.hashCode());
  result=prime * result + ((types == null) ? 0 : types.hashCode());
  result=prime * result + ((dtypes == null) ? 0 : dtypes.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((attributes == null) ? 0 : attributes.hashCode());
  result=prime * result + ((classes == null) ? 0 : classes.hashCode());
  result=prime * result + ((features == null) ? 0 : features.hashCode());
  result=prime * result + ((types == null) ? 0 : types.hashCode());
  result=prime * result + ((dtypes == null) ? 0 : dtypes.hashCode());
  result=prime * result + ((scaling == null) ? 0 : scaling.hashCode());
  return result;
}",0.9260780287474332
107860,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  State other=(State)obj;
  if (attributes == null) {
    if (other.attributes != null)     return false;
  }
 else   if (!attributes.equals(other.attributes))   return false;
  if (classes == null) {
    if (other.classes != null)     return false;
  }
 else   if (!classes.equals(other.classes))   return false;
  if (features == null) {
    if (other.features != null)     return false;
  }
 else   if (!features.equals(other.features))   return false;
  if (types == null) {
    if (other.types != null)     return false;
  }
 else   if (!types.equals(other.types))   return false;
  if (dtypes == null) {
    if (other.dtypes != null)     return false;
  }
 else   if (!dtypes.equals(other.dtypes))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  State other=(State)obj;
  if (attributes == null) {
    if (other.attributes != null)     return false;
  }
 else   if (!attributes.equals(other.attributes))   return false;
  if (classes == null) {
    if (other.classes != null)     return false;
  }
 else   if (!classes.equals(other.classes))   return false;
  if (features == null) {
    if (other.features != null)     return false;
  }
 else   if (!features.equals(other.features))   return false;
  if (types == null) {
    if (other.types != null)     return false;
  }
 else   if (!types.equals(other.types))   return false;
  if (dtypes == null) {
    if (other.dtypes != null)     return false;
  }
 else   if (!dtypes.equals(other.dtypes))   return false;
  if (scaling == null) {
    if (other.scaling != null)     return false;
  }
 else   if (!scaling.equals(other.scaling))   return false;
  return true;
}",0.9155509783728116
107861,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewStatisticsClassificationAttributesInput(final Composite parent,final Controller controller){
  controller.addListener(ModelPart.INPUT,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(ModelPart.SELECTED_FEATURES_OR_CLASSES,this);
  controller.addListener(ModelPart.ATTRIBUTE_TYPE,this);
  controller.addListener(ModelPart.OUTPUT,this);
  this.controller=controller;
  root=parent;
  root.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  Label label=new Label(parent,SWT.LEFT);
  label.setText(Resources.getMessage(""String_Node_Str""));
  label.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  label=new Label(parent,SWT.LEFT);
  label.setText(Resources.getMessage(""String_Node_Str""));
  label.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  features=SWTUtil.createTableDynamic(parent,SWT.CHECK | SWT.V_SCROLL | SWT.H_SCROLL| SWT.BORDER);
  features.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).span(1,1).create());
  features.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      Set<String> newSelection=new HashSet<String>();
      boolean update=fireEvent(arg0,features,model.getSelectedFeatures(),newSelection);
      if (update) {
        model.setSelectedFeatures(newSelection);
        controller.update(new ModelEvent(ViewStatisticsClassificationAttributesInput.this,ModelPart.SELECTED_FEATURES_OR_CLASSES,null));
      }
    }
  }
);
  DynamicTableColumn column0=new DynamicTableColumn(features,SWT.NONE);
  column0.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column1=new DynamicTableColumn(features,SWT.NONE);
  column1.setWidth(""String_Node_Str"");
  DynamicTableColumn column2=new DynamicTableColumn(features,SWT.NONE);
  column2.setWidth(""String_Node_Str"");
  classes=SWTUtil.createTableDynamic(parent,SWT.CHECK | SWT.V_SCROLL | SWT.H_SCROLL| SWT.BORDER);
  classes.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).span(1,1).create());
  classes.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      Set<String> newSelection=new HashSet<String>();
      boolean update=fireEvent(arg0,classes,model.getSelectedClasses(),newSelection);
      if (update) {
        model.setSelectedClasses(newSelection);
        controller.update(new ModelEvent(ViewStatisticsClassificationAttributesInput.this,ModelPart.SELECTED_FEATURES_OR_CLASSES,null));
      }
    }
  }
);
  DynamicTableColumn column3=new DynamicTableColumn(classes,SWT.NONE);
  column3.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column4=new DynamicTableColumn(classes,SWT.NONE);
  column4.setWidth(""String_Node_Str"");
  reset();
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewStatisticsClassificationAttributesInput(final Composite parent,final Controller controller){
  controller.addListener(ModelPart.INPUT,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(ModelPart.SELECTED_FEATURES_OR_CLASSES,this);
  controller.addListener(ModelPart.ATTRIBUTE_TYPE,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.OUTPUT,this);
  this.controller=controller;
  root=parent;
  root.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  Label label=new Label(parent,SWT.LEFT);
  label.setText(Resources.getMessage(""String_Node_Str""));
  label.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  label=new Label(parent,SWT.LEFT);
  label.setText(Resources.getMessage(""String_Node_Str""));
  label.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  features=SWTUtil.createTableDynamic(parent,SWT.CHECK | SWT.V_SCROLL | SWT.H_SCROLL| SWT.BORDER);
  features.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).span(1,1).create());
  features.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      Set<String> newSelection=new HashSet<String>();
      boolean update=fireEvent(arg0,features,model.getSelectedFeatures(),newSelection);
      if (update) {
        model.setSelectedFeatures(newSelection);
        controller.update(new ModelEvent(ViewStatisticsClassificationAttributesInput.this,ModelPart.SELECTED_FEATURES_OR_CLASSES,null));
      }
    }
  }
);
  DynamicTableColumn column0=new DynamicTableColumn(features,SWT.NONE);
  column0.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column1=new DynamicTableColumn(features,SWT.NONE);
  column1.setWidth(""String_Node_Str"");
  DynamicTableColumn column2=new DynamicTableColumn(features,SWT.NONE);
  column2.setWidth(""String_Node_Str"");
  classes=SWTUtil.createTableDynamic(parent,SWT.CHECK | SWT.V_SCROLL | SWT.H_SCROLL| SWT.BORDER);
  classes.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).span(1,1).create());
  classes.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      Set<String> newSelection=new HashSet<String>();
      boolean update=fireEvent(arg0,classes,model.getSelectedClasses(),newSelection);
      if (update) {
        model.setSelectedClasses(newSelection);
        controller.update(new ModelEvent(ViewStatisticsClassificationAttributesInput.this,ModelPart.SELECTED_FEATURES_OR_CLASSES,null));
      }
    }
  }
);
  DynamicTableColumn column3=new DynamicTableColumn(classes,SWT.NONE);
  column3.setWidth(""String_Node_Str"",""String_Node_Str"");
  DynamicTableColumn column4=new DynamicTableColumn(classes,SWT.NONE);
  column4.setWidth(""String_Node_Str"");
  reset();
}",0.9909816163718348
107862,"/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 */
public static void main(String[] args) throws ParseException, IOException {
  String[] features=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String clazz=""String_Node_Str"";
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setAttributeType(""String_Node_Str"",AttributeType.INSENSITIVE_ATTRIBUTE);
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setMaxOutliers(1d);
  config.setQualityModel(Metric.createLossMetric());
  ARXResult result=anonymizer.anonymize(data,config);
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXLogisticRegressionConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXNaiveBayesConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXSVMConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXSVMConfiguration.create()));
}","/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 */
public static void main(String[] args) throws ParseException, IOException {
  String[] features=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String clazz=""String_Node_Str"";
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setAttributeType(""String_Node_Str"",AttributeType.INSENSITIVE_ATTRIBUTE);
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setMaxOutliers(1d);
  config.setQualityModel(Metric.createLossMetric());
  ARXResult result=anonymizer.anonymize(data,config);
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXLogisticRegressionConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXNaiveBayesConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXRandomForestConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXSVMConfiguration.create()));
}",0.8906009244992296
107863,"/** 
 * Updates the chart with a new matrix
 * @param matrix
 */
private void setChartSeries(PrecisionRecallMatrix matrix){
  String[] xAxisLabels=new String[matrix.getConfidenceThresholds().length];
  double[] ySeriesPrecision=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesRecall=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesFscore=new double[matrix.getConfidenceThresholds().length];
  for (int i=0; i < xAxisLabels.length; i++) {
    xAxisLabels[i]=SWTUtil.getPrettyString(matrix.getConfidenceThresholds()[i] * 100d);
    ySeriesPrecision[i]=matrix.getPrecision()[i] * 100d;
    ySeriesRecall[i]=matrix.getRecall()[i] * 100d;
    ySeriesFscore[i]=matrix.getFscore()[i] * 100d;
  }
  chart.setRedraw(false);
  ISeriesSet seriesSet=chart.getSeriesSet();
  ILineSeries series1=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,Resources.getMessage(""String_Node_Str""));
  series1.getLabel().setVisible(false);
  series1.getLabel().setFont(chart.getFont());
  series1.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  series1.setYSeries(ySeriesPrecision);
  series1.setAntialias(SWT.ON);
  series1.setSymbolType(PlotSymbolType.NONE);
  series1.enableArea(true);
  ILineSeries series2=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,Resources.getMessage(""String_Node_Str""));
  series2.getLabel().setVisible(false);
  series2.getLabel().setFont(chart.getFont());
  series2.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
  series2.setYSeries(ySeriesRecall);
  series2.setSymbolType(PlotSymbolType.NONE);
  series2.enableArea(true);
  ILineSeries series3=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,Resources.getMessage(""String_Node_Str""));
  series3.getLabel().setVisible(false);
  series3.getLabel().setFont(chart.getFont());
  series3.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GREEN));
  series3.setYSeries(ySeriesFscore);
  series3.setSymbolType(PlotSymbolType.NONE);
  series3.enableArea(true);
  seriesSet.bringToFront(Resources.getMessage(""String_Node_Str""));
  chart.getLegend().setVisible(true);
  chart.getLegend().setPosition(SWT.TOP);
  IAxisSet axisSet=chart.getAxisSet();
  IAxis yAxis=axisSet.getYAxis(0);
  yAxis.setRange(new Range(0d,100d));
  IAxis xAxis=axisSet.getXAxis(0);
  xAxis.setCategorySeries(xAxisLabels);
  xAxis.adjustRange();
  updateCategories();
  chart.setRedraw(true);
  chart.updateLayout();
  chart.update();
  chart.redraw();
}","/** 
 * Updates the chart with a new matrix
 * @param matrix
 */
private void setChartSeries(PrecisionRecallMatrix matrix){
  String[] xAxisLabels=new String[matrix.getConfidenceThresholds().length];
  double[] ySeriesPrecision=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesRecall=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesFscore=new double[matrix.getConfidenceThresholds().length];
  for (int i=0; i < xAxisLabels.length; i++) {
    xAxisLabels[i]=SWTUtil.getPrettyString(matrix.getConfidenceThresholds()[i] * 100d);
    ySeriesPrecision[i]=matrix.getPrecision()[i] * 100d;
    ySeriesRecall[i]=matrix.getRecall()[i] * 100d;
    ySeriesFscore[i]=matrix.getFscore()[i] * 100d;
  }
  chart.setRedraw(false);
  ISeriesSet seriesSet=chart.getSeriesSet();
  ILineSeries series1=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,precision);
  series1.getLabel().setVisible(false);
  series1.getLabel().setFont(chart.getFont());
  series1.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  series1.setYSeries(ySeriesPrecision);
  series1.setAntialias(SWT.ON);
  series1.setSymbolType(PlotSymbolType.NONE);
  series1.enableArea(true);
  ILineSeries series2=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,recall);
  series2.getLabel().setVisible(false);
  series2.getLabel().setFont(chart.getFont());
  series2.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
  series2.setYSeries(ySeriesRecall);
  series2.setSymbolType(PlotSymbolType.NONE);
  series2.enableArea(true);
  ILineSeries series3=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,fscore);
  series3.getLabel().setVisible(false);
  series3.getLabel().setFont(chart.getFont());
  series3.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GREEN));
  series3.setYSeries(ySeriesFscore);
  series3.setSymbolType(PlotSymbolType.NONE);
  series3.enableArea(true);
  seriesSet.bringToFront(recall);
  chart.getLegend().setVisible(true);
  chart.getLegend().setPosition(SWT.TOP);
  IAxisSet axisSet=chart.getAxisSet();
  IAxis yAxis=axisSet.getYAxis(0);
  yAxis.setRange(new Range(0d,100d));
  IAxis xAxis=axisSet.getXAxis(0);
  xAxis.setCategorySeries(xAxisLabels);
  xAxis.adjustRange();
  updateCategories();
  chart.setRedraw(true);
  chart.updateLayout();
  chart.update();
  chart.redraw();
}",0.9621822690638562
107864,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 * @param part
 */
public ViewStatisticsLogisticRegression(final Composite parent,final Controller controller,final ModelPart part){
  super(parent,controller,part,null,false);
  this.manager=new AnalysisManager(parent.getDisplay());
  controller.addListener(ModelPart.SELECTED_FEATURES_OR_CLASSES,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.SELECTED_ATTRIBUTE,this);
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 * @param part
 */
public ViewStatisticsLogisticRegression(final Composite parent,final Controller controller,final ModelPart part){
  super(parent,controller,part,null,false);
  this.manager=new AnalysisManager(parent.getDisplay());
  controller.addListener(ModelPart.SELECTED_FEATURES_OR_CLASSES,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.SELECTED_ATTRIBUTE,this);
  precision=Resources.getMessage(""String_Node_Str"");
  recall=Resources.getMessage(""String_Node_Str"");
  fscore=Resources.getMessage(""String_Node_Str"");
}",0.8647214854111406
107865,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length > 0 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  table.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=table.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        boolean visible=false;
        TableItem item=table.getItem(index);
        for (int i=0; i < table.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
              setChartSeries((PrecisionRecallMatrix)item.getData());
            }
            getModel().setSelectedAttribute(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length == 3 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(precision).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(chart.getSeriesSet().getSeries(precision).getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(recall).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(chart.getSeriesSet().getSeries(recall).getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(fscore).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(chart.getSeriesSet().getSeries(fscore).getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  table.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=table.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        boolean visible=false;
        TableItem item=table.getItem(index);
        for (int i=0; i < table.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
              setChartSeries((PrecisionRecallMatrix)item.getData());
            }
            getModel().setSelectedAttribute(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.root;
}",0.9557665585919408
107866,"/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 */
public static void main(String[] args) throws ParseException, IOException {
  String[] features=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String clazz=""String_Node_Str"";
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setAttributeType(""String_Node_Str"",AttributeType.INSENSITIVE_ATTRIBUTE);
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setMaxOutliers(1d);
  config.setQualityModel(Metric.createLossMetric());
  ARXResult result=anonymizer.anonymize(data,config);
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXLogisticRegressionConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXNaiveBayesConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXSVMConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXSVMConfiguration.create()));
}","/** 
 * Entry point.
 * @param args the arguments
 * @throws ParseException
 * @throws IOException
 */
public static void main(String[] args) throws ParseException, IOException {
  String[] features=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String clazz=""String_Node_Str"";
  Data data=createData(""String_Node_Str"");
  data.getDefinition().setAttributeType(""String_Node_Str"",AttributeType.INSENSITIVE_ATTRIBUTE);
  data.getDefinition().setDataType(""String_Node_Str"",DataType.INTEGER);
  ARXAnonymizer anonymizer=new ARXAnonymizer();
  ARXConfiguration config=ARXConfiguration.create();
  config.addPrivacyModel(new KAnonymity(5));
  config.setMaxOutliers(1d);
  config.setQualityModel(Metric.createLossMetric());
  ARXResult result=anonymizer.anonymize(data,config);
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXLogisticRegressionConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXNaiveBayesConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXRandomForestConfiguration.create()));
  System.out.println(""String_Node_Str"");
  System.out.println(result.getOutput().getStatistics().getClassificationPerformance(features,clazz,ARXSVMConfiguration.create()));
}",0.8906009244992296
107867,"/** 
 * Updates the chart with a new matrix
 * @param matrix
 */
private void setChartSeries(PrecisionRecallMatrix matrix){
  String[] xAxisLabels=new String[matrix.getConfidenceThresholds().length];
  double[] ySeriesPrecision=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesRecall=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesFscore=new double[matrix.getConfidenceThresholds().length];
  for (int i=0; i < xAxisLabels.length; i++) {
    xAxisLabels[i]=SWTUtil.getPrettyString(matrix.getConfidenceThresholds()[i] * 100d);
    ySeriesPrecision[i]=matrix.getPrecision()[i] * 100d;
    ySeriesRecall[i]=matrix.getRecall()[i] * 100d;
    ySeriesFscore[i]=matrix.getFscore()[i] * 100d;
  }
  chart.setRedraw(false);
  ISeriesSet seriesSet=chart.getSeriesSet();
  ILineSeries series1=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,Resources.getMessage(""String_Node_Str""));
  series1.getLabel().setVisible(false);
  series1.getLabel().setFont(chart.getFont());
  series1.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  series1.setYSeries(ySeriesPrecision);
  series1.setAntialias(SWT.ON);
  series1.setSymbolType(PlotSymbolType.NONE);
  series1.enableArea(true);
  ILineSeries series2=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,Resources.getMessage(""String_Node_Str""));
  series2.getLabel().setVisible(false);
  series2.getLabel().setFont(chart.getFont());
  series2.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
  series2.setYSeries(ySeriesRecall);
  series2.setSymbolType(PlotSymbolType.NONE);
  series2.enableArea(true);
  ILineSeries series3=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,Resources.getMessage(""String_Node_Str""));
  series3.getLabel().setVisible(false);
  series3.getLabel().setFont(chart.getFont());
  series3.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GREEN));
  series3.setYSeries(ySeriesFscore);
  series3.setSymbolType(PlotSymbolType.NONE);
  series3.enableArea(true);
  seriesSet.bringToFront(Resources.getMessage(""String_Node_Str""));
  chart.getLegend().setVisible(true);
  chart.getLegend().setPosition(SWT.TOP);
  IAxisSet axisSet=chart.getAxisSet();
  IAxis yAxis=axisSet.getYAxis(0);
  yAxis.setRange(new Range(0d,100d));
  IAxis xAxis=axisSet.getXAxis(0);
  xAxis.setCategorySeries(xAxisLabels);
  xAxis.adjustRange();
  updateCategories();
  chart.setRedraw(true);
  chart.updateLayout();
  chart.update();
  chart.redraw();
}","/** 
 * Updates the chart with a new matrix
 * @param matrix
 */
private void setChartSeries(PrecisionRecallMatrix matrix){
  String[] xAxisLabels=new String[matrix.getConfidenceThresholds().length];
  double[] ySeriesPrecision=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesRecall=new double[matrix.getConfidenceThresholds().length];
  double[] ySeriesFscore=new double[matrix.getConfidenceThresholds().length];
  for (int i=0; i < xAxisLabels.length; i++) {
    xAxisLabels[i]=SWTUtil.getPrettyString(matrix.getConfidenceThresholds()[i] * 100d);
    ySeriesPrecision[i]=matrix.getPrecision()[i] * 100d;
    ySeriesRecall[i]=matrix.getRecall()[i] * 100d;
    ySeriesFscore[i]=matrix.getFscore()[i] * 100d;
  }
  chart.setRedraw(false);
  ISeriesSet seriesSet=chart.getSeriesSet();
  ILineSeries series1=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,precision);
  series1.getLabel().setVisible(false);
  series1.getLabel().setFont(chart.getFont());
  series1.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  series1.setYSeries(ySeriesPrecision);
  series1.setAntialias(SWT.ON);
  series1.setSymbolType(PlotSymbolType.NONE);
  series1.enableArea(true);
  ILineSeries series2=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,recall);
  series2.getLabel().setVisible(false);
  series2.getLabel().setFont(chart.getFont());
  series2.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
  series2.setYSeries(ySeriesRecall);
  series2.setSymbolType(PlotSymbolType.NONE);
  series2.enableArea(true);
  ILineSeries series3=(ILineSeries)seriesSet.createSeries(SeriesType.LINE,fscore);
  series3.getLabel().setVisible(false);
  series3.getLabel().setFont(chart.getFont());
  series3.setLineColor(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GREEN));
  series3.setYSeries(ySeriesFscore);
  series3.setSymbolType(PlotSymbolType.NONE);
  series3.enableArea(true);
  seriesSet.bringToFront(recall);
  chart.getLegend().setVisible(true);
  chart.getLegend().setPosition(SWT.TOP);
  IAxisSet axisSet=chart.getAxisSet();
  IAxis yAxis=axisSet.getYAxis(0);
  yAxis.setRange(new Range(0d,100d));
  IAxis xAxis=axisSet.getXAxis(0);
  xAxis.setCategorySeries(xAxisLabels);
  xAxis.adjustRange();
  updateCategories();
  chart.setRedraw(true);
  chart.updateLayout();
  chart.update();
  chart.redraw();
}",0.9621822690638562
107868,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 * @param part
 */
public ViewStatisticsLogisticRegression(final Composite parent,final Controller controller,final ModelPart part){
  super(parent,controller,part,null,false);
  this.manager=new AnalysisManager(parent.getDisplay());
  controller.addListener(ModelPart.SELECTED_FEATURES_OR_CLASSES,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.SELECTED_ATTRIBUTE,this);
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 * @param part
 */
public ViewStatisticsLogisticRegression(final Composite parent,final Controller controller,final ModelPart part){
  super(parent,controller,part,null,false);
  this.manager=new AnalysisManager(parent.getDisplay());
  controller.addListener(ModelPart.SELECTED_FEATURES_OR_CLASSES,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.SELECTED_ATTRIBUTE,this);
  precision=Resources.getMessage(""String_Node_Str"");
  recall=Resources.getMessage(""String_Node_Str"");
  fscore=Resources.getMessage(""String_Node_Str"");
}",0.8647214854111406
107869,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length > 0 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  table.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=table.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        boolean visible=false;
        TableItem item=table.getItem(index);
        for (int i=0; i < table.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
              setChartSeries((PrecisionRecallMatrix)item.getData());
            }
            getModel().setSelectedAttribute(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length == 3 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(precision).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(chart.getSeriesSet().getSeries(precision).getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(recall).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(chart.getSeriesSet().getSeries(recall).getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(fscore).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(chart.getSeriesSet().getSeries(fscore).getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  table.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=table.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        boolean visible=false;
        TableItem item=table.getItem(index);
        for (int i=0; i < table.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
              setChartSeries((PrecisionRecallMatrix)item.getData());
            }
            getModel().setSelectedAttribute(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.root;
}",0.9557665585919408
107870,"/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  State state=new State(model,model.getInputConfig().getInput().getHandle(),model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(attribute);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    TableEditor editor=new TableEditor(features);
    final CCombo combo=new CCombo(features,SWT.NONE);
    final Color defaultColor=combo.getForeground();
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(LABEL_CATEGORICAL);
    combo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addSelectionListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    combo.addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addKeyListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    editor.grabHorizontal=true;
    editor.setEditor(combo,itemF,2);
    String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
    if (function == null || function.equals(""String_Node_Str"")) {
      function=LABEL_CATEGORICAL;
    }
    combo.setText(function);
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}","/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  State state=new State(model,model.getInputConfig().getInput().getHandle(),model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableEditor editor : editors) {
    editor.getEditor().dispose();
    editor.dispose();
  }
  editors.clear();
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  features.removeAll();
  classes.removeAll();
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(attribute);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    TableEditor editor=new TableEditor(features);
    editors.add(editor);
    final CCombo combo=new CCombo(features,SWT.NONE);
    final Color defaultColor=combo.getForeground();
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(LABEL_CATEGORICAL);
    combo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addSelectionListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    combo.addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addKeyListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    editor.grabHorizontal=true;
    editor.setEditor(combo,itemF,2);
    String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
    if (function == null || function.equals(""String_Node_Str"")) {
      function=LABEL_CATEGORICAL;
    }
    combo.setText(function);
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}",0.9653804543815362
107871,"@Override public void reset(){
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  state=null;
  SWTUtil.disable(root);
}","@Override public void reset(){
  for (  TableEditor editor : editors) {
    editor.getEditor().dispose();
    editor.dispose();
  }
  editors.clear();
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  features.removeAll();
  classes.removeAll();
  SWTUtil.disable(root);
  state=null;
}",0.6911519198664441
107872,"/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimize(DataHandle handle,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  return optimizeFast(handle,gsFactor,Double.NaN,listener);
}","/** 
 * This method optimizes the given data output with local recoding to improve its utility
 * @param handle
 * @param gsFactor A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 * @param listener 
 * @return The number of optimized records
 */
public int optimize(DataHandle handle,double gsFactor,ARXListener listener) throws RollbackRequiredException {
  return optimizeFast(handle,Double.NaN,gsFactor,listener);
}",0.9865671641791044
107873,"/** 
 * Returns the ROC curve for this class value calculated using a one-vs-all approach.
 * @param clazz
 * @return
 */
public ROCCurve getOriginalROCCurve(String clazz){
  return this.originalRocCurves.get(clazz);
}","/** 
 * Returns the ROC curve for this class value calculated using the one-vs-all approach.
 * @param clazz
 * @return
 */
public ROCCurve getOriginalROCCurve(String clazz){
  return this.originalROC.get(clazz);
}",0.9675925925925926
107874,"/** 
 * Returns the set of class attributes
 * @return
 */
public Set<String> getClassValues(){
  return this.rocCurves.keySet();
}","/** 
 * Returns the set of class attributes
 * @return
 */
public Set<String> getClassValues(){
  return this.ROC.keySet();
}",0.9609375
107875,"/** 
 * @return the falsePositive
 */
public double[] getFalsePositiveRate(){
  return falsePositive;
}","/** 
 * Returns false-positive rates for all cut-off points
 * @return the falsePositive
 */
public double[] getFalsePositiveRate(){
  return falsePositive;
}",0.789272030651341
107876,"/** 
 * Returns the ROC curve for this class value calculated using a one-vs-all approach.
 * @param clazz
 * @return
 */
public ROCCurve getROCCurve(String clazz){
  return this.rocCurves.get(clazz);
}","/** 
 * Returns the ROC curve for this class value calculated using the one-vs-all approach.
 * @param clazz
 * @return
 */
public ROCCurve getROCCurve(String clazz){
  return this.ROC.get(clazz);
}",0.965
107877,"/** 
 * Adds a new value
 * @param confidence
 * @param correct
 */
void add(double confidence,boolean correct){
  for (int i=0; i < CONFIDENCE_THRESHOLDS.length; i++) {
    if (confidence >= CONFIDENCE_THRESHOLDS[i]) {
      falsePositive[i]++;
      truePositive[i]+=correct ? 1d : 0d;
    }
  }
}","/** 
 * Adds a new value
 * @param confidence
 * @param correct
 */
void add(double confidence,boolean correct){
  for (int i=0; i < CONFIDENCE_THRESHOLDS.length; i++) {
    if (confidence >= CONFIDENCE_THRESHOLDS[i]) {
      falsePositive[i]+=correct ? 0d : 1d;
      truePositive[i]+=correct ? 1d : 0d;
    }
  }
}",0.9691056910569106
107878,"/** 
 * @return the truePositive
 */
public double[] getTruePositiveRate(){
  return truePositive;
}","/** 
 * Returns true-positive rates for all cut-off points
 * @return the truePositive
 */
public double[] getTruePositiveRate(){
  return truePositive;
}",0.7874015748031497
107879,"/** 
 * Packs the results
 */
void pack(){
  for (int i=0; i < CONFIDENCE_THRESHOLDS.length; i++) {
    if (falsePositive[i] == 0d) {
      truePositive[i]=0d;
    }
 else {
      double total=falsePositive[i];
      falsePositive[i]-=truePositive[i];
      falsePositive[i]/=total;
      truePositive[i]/=total;
    }
  }
}","/** 
 * Packs the results
 * @param classifications 
 */
void pack(int classifications){
  for (int i=0; i < CONFIDENCE_THRESHOLDS.length; i++) {
    truePositive[i]/=(double)exists;
    falsePositive[i]/=(double)(classifications - exists);
  }
  GenericSorting.mergeSort(0,falsePositive.length,new IntComparator(){
    @Override public int compare(    int arg0,    int arg1){
      return Double.compare(falsePositive[arg0],falsePositive[arg1]);
    }
  }
,new Swapper(){
    @Override public void swap(    int arg0,    int arg1){
      double temp=falsePositive[arg0];
      falsePositive[arg0]=falsePositive[arg1];
      falsePositive[arg1]=temp;
      temp=truePositive[arg0];
      truePositive[arg0]=truePositive[arg1];
      truePositive[arg1]=temp;
    }
  }
);
  if (truePositive[0] != 0 && falsePositive[0] != 0) {
    truePositive=insert(truePositive,0,0d);
    falsePositive=insert(falsePositive,0,0d);
  }
  if (truePositive[truePositive.length - 1] != 1 && falsePositive[falsePositive.length - 1] != 1) {
    truePositive=insert(truePositive,truePositive.length,1d);
    falsePositive=insert(falsePositive,falsePositive.length,1d);
  }
}",0.1857627118644068
107880,"/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param config - The configuration
 * @param scaling 
 * @param interrupt - The interrupt flag
 * @param progress 
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,ARXClassificationConfiguration config,ARXFeatureScaling scaling,WrappedBoolean interrupt,WrappedInteger progress) throws ParseException {
  this.interrupt=interrupt;
  this.progress=progress;
  double samplingFraction=(double)config.getMaxRecords() / (double)inputHandle.getNumRows();
  if (samplingFraction <= 0d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (samplingFraction > 1d) {
    samplingFraction=1d;
  }
  if (!config.isDeterministic()) {
    this.random=new Random();
  }
 else {
    this.random=new Random(config.getSeed());
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,scaling,features,clazz,interrupt);
  for (  String classValue : specification.classMap.keySet()) {
    rocCurves.put(classValue,new ROCCurve());
    originalRocCurves.put(classValue,new ROCCurve());
  }
  int k=inputHandle.getNumRows() > config.getNumFolds() ? config.getNumFolds() : inputHandle.getNumRows();
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),k);
  int classifications=0;
  double total=100d / ((double)inputHandle.getNumRows() * (double)folds.size());
  double done=0d;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputLR=getClassifier(specification,config);
    ClassificationMethod inputZR=new MultiClassZeroR(specification);
    ClassificationMethod outputLR=null;
    if (inputHandle != outputHandle) {
      outputLR=getClassifier(specification,config);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputLR.train(inputHandle,outputHandle,index);
            inputZR.train(inputHandle,outputHandle,index);
            if (outputLR != null && !outputHandle.isOutlier(index)) {
              outputLR.train(outputHandle,outputHandle,index);
            }
            trained=true;
            this.progress.value=(int)((++done) * total);
          }
        }
      }
      inputLR.close();
      inputZR.close();
      if (outputLR != null) {
        outputLR.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInputLR=inputLR.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZR.classify(inputHandle,index);
          ClassificationResult resultOutputLR=outputLR == null ? null : outputLR.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex,true);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          boolean correct=resultInputLR.correct(actualValue);
          this.originalAverageError+=resultInputLR.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          this.originalMatrix.add(resultInputLR.confidence(),correct);
          this.originalRocCurves.get(actualValue).add(resultInputLR.confidence(),correct);
          if (resultOutputLR != null) {
            correct=resultOutputLR.correct(actualValue);
            this.averageError+=resultOutputLR.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            this.matrix.add(resultOutputLR.confidence(),correct);
            this.rocCurves.get(actualValue).add(resultOutputLR.confidence(),correct);
          }
        }
        this.progress.value=(int)((++done) * total);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  this.originalMatrix.pack();
  for (  ROCCurve curve : this.rocCurves.values()) {
    curve.pack();
  }
  for (  ROCCurve curve : this.originalRocCurves.values()) {
    curve.pack();
  }
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
    this.matrix.pack();
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
    this.matrix=this.originalMatrix;
  }
  this.numClasses=specification.classMap.size();
  this.numMeasurements=classifications;
}","/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param config - The configuration
 * @param scaling 
 * @param interrupt - The interrupt flag
 * @param progress 
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,ARXClassificationConfiguration config,ARXFeatureScaling scaling,WrappedBoolean interrupt,WrappedInteger progress) throws ParseException {
  this.interrupt=interrupt;
  this.progress=progress;
  double samplingFraction=(double)config.getMaxRecords() / (double)inputHandle.getNumRows();
  if (samplingFraction <= 0d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (samplingFraction > 1d) {
    samplingFraction=1d;
  }
  if (!config.isDeterministic()) {
    this.random=new Random();
  }
 else {
    this.random=new Random(config.getSeed());
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,scaling,features,clazz,interrupt);
  for (  String classValue : specification.classMap.keySet()) {
    ROC.put(classValue,new ROCCurve());
    originalROC.put(classValue,new ROCCurve());
  }
  int k=inputHandle.getNumRows() > config.getNumFolds() ? config.getNumFolds() : inputHandle.getNumRows();
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),k);
  int classifications=0;
  double total=100d / ((double)inputHandle.getNumRows() * (double)folds.size());
  double done=0d;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputLR=getClassifier(specification,config);
    ClassificationMethod inputZR=new MultiClassZeroR(specification);
    ClassificationMethod outputLR=null;
    if (inputHandle != outputHandle) {
      outputLR=getClassifier(specification,config);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputLR.train(inputHandle,outputHandle,index);
            inputZR.train(inputHandle,outputHandle,index);
            if (outputLR != null && !outputHandle.isOutlier(index)) {
              outputLR.train(outputHandle,outputHandle,index);
            }
            trained=true;
            this.progress.value=(int)((++done) * total);
          }
        }
      }
      inputLR.close();
      inputZR.close();
      if (outputLR != null) {
        outputLR.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInputLR=inputLR.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZR.classify(inputHandle,index);
          ClassificationResult resultOutputLR=outputLR == null ? null : outputLR.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex,true);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          boolean correct=resultInputLR.correct(actualValue);
          this.originalAverageError+=resultInputLR.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          this.originalMatrix.add(resultInputLR.confidence(),correct);
          this.originalROC.get(actualValue).exists();
          this.originalROC.get(specification.classMapInverse.get(resultInputLR.index())).add(resultInputLR.confidence(),correct);
          if (resultOutputLR != null) {
            correct=resultOutputLR.correct(actualValue);
            this.averageError+=resultOutputLR.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            this.matrix.add(resultOutputLR.confidence(),correct);
            this.ROC.get(actualValue).exists();
            this.ROC.get(specification.classMapInverse.get(resultOutputLR.index())).add(resultOutputLR.confidence(),correct);
          }
        }
        this.progress.value=(int)((++done) * total);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  this.originalMatrix.pack();
  for (  ROCCurve curve : this.ROC.values()) {
    curve.pack(classifications);
  }
  for (  ROCCurve curve : this.originalROC.values()) {
    curve.pack(classifications);
  }
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
    this.matrix.pack();
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
    this.matrix=this.originalMatrix;
  }
  this.numClasses=specification.classMap.size();
  this.numMeasurements=classifications;
}",0.960578313253012
107881,"/** 
 * Creates a new instance
 * @param inputFeatureHandle
 * @param outputFeatureHandle
 * @param scaling
 * @param classHandle
 * @param features
 * @param clazz
 * @param interrupt
 */
public ClassificationDataSpecification(DataHandleInternal inputFeatureHandle,DataHandleInternal outputFeatureHandle,ARXFeatureScaling scaling,String[] features,String clazz,WrappedBoolean interrupt){
  if (clazz == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (outputFeatureHandle.getColumnIndexOf(clazz) == -1) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str"");
  }
  if (features == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  String feature : features) {
    if (feature == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (inputFeatureHandle.getColumnIndexOf(feature) == -1) {
      throw new IllegalArgumentException(""String_Node_Str"" + feature + ""String_Node_Str"");
    }
  }
  this.interrupt=interrupt;
  this.featureIndices=getFeatureIndices(inputFeatureHandle,features,clazz);
  this.featureMetadata=getFeatureMetadata(inputFeatureHandle,featureIndices,scaling);
  this.classIndex=getClassIndex(outputFeatureHandle,clazz);
  this.classMap=getClassMap(outputFeatureHandle,classIndex);
  if (classMap.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Creates a new instance
 * @param inputFeatureHandle
 * @param outputFeatureHandle
 * @param scaling
 * @param classHandle
 * @param features
 * @param clazz
 * @param interrupt
 */
public ClassificationDataSpecification(DataHandleInternal inputFeatureHandle,DataHandleInternal outputFeatureHandle,ARXFeatureScaling scaling,String[] features,String clazz,WrappedBoolean interrupt){
  if (clazz == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (outputFeatureHandle.getColumnIndexOf(clazz) == -1) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str"");
  }
  if (features == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  String feature : features) {
    if (feature == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (inputFeatureHandle.getColumnIndexOf(feature) == -1) {
      throw new IllegalArgumentException(""String_Node_Str"" + feature + ""String_Node_Str"");
    }
  }
  this.interrupt=interrupt;
  this.featureIndices=getFeatureIndices(inputFeatureHandle,features,clazz);
  this.featureMetadata=getFeatureMetadata(inputFeatureHandle,featureIndices,scaling);
  this.classIndex=getClassIndex(outputFeatureHandle,clazz);
  this.classMap=getClassMap(outputFeatureHandle,classIndex);
  classMapInverse=getInverseClassMap(this.classMap);
  if (classMap.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9816036098576884
107882,"/** 
 * Frees resources
 */
public void reset(){
  history.reset();
  history.setSize(0);
  currentGroupify.stateClear();
  lastGroupify.stateClear();
}","/** 
 * Frees resources
 */
public void reset(){
  stateMachine.reset();
  history.reset();
  history.setSize(0);
  currentGroupify.stateClear();
  lastGroupify.stateClear();
}",0.926829268292683
107883,"/** 
 * Disposes the given item.
 * @param text
 */
public void disposeItem(String text){
  for (  CTabItem item : folder.getItems()) {
    if (item.getText().equals(text)) {
      item.dispose();
    }
  }
}","/** 
 * Disposes the given item.
 * @param text
 */
public void disposeItem(String text){
  for (  CTabItem item : folder.getItems()) {
    if (item.getText().equals(text)) {
      Iterator<TitledFolderEntry> iter=this.entries.iterator();
      while (iter.hasNext()) {
        if (iter.next().control == item.getControl()) {
          iter.remove();
        }
      }
      item.dispose();
    }
  }
}",0.6819672131147541
107884,"/** 
 * Shows the settings for the attribute weights.
 */
private void showSettingsAttributeWeights(){
  if (this.viewAttributeWeights != null)   return;
  Composite composite1=folder.createItem(Resources.getMessage(""String_Node_Str""),null);
  composite1.setLayout(new FillLayout());
  this.viewAttributeWeights=new ViewAttributeWeights(composite1,controller);
  this.viewAttributeWeights.update(new ModelEvent(this,ModelPart.MODEL,this.model));
}","/** 
 * Shows the settings for the attribute weights.
 */
private void showSettingsAttributeWeights(){
  if (this.viewAttributeWeights == null) {
    Composite composite1=folder.createItem(Resources.getMessage(""String_Node_Str""),null);
    composite1.setLayout(new FillLayout());
    this.viewAttributeWeights=new ViewAttributeWeights(composite1,controller);
  }
  this.viewAttributeWeights.update(new ModelEvent(this,ModelPart.MODEL,this.model));
}",0.9575892857142856
107885,"/** 
 * Shows the settings for the coding model.
 */
private void showSettingsCodingModel(){
  if (this.viewCodingModel != null)   return;
  Composite composite2=folder.createItem(Resources.getMessage(""String_Node_Str""),null);
  composite2.setLayout(new FillLayout());
  this.viewCodingModel=new ViewCodingModel(composite2,controller);
  this.viewCodingModel.update(new ModelEvent(this,ModelPart.MODEL,this.model));
}","/** 
 * Shows the settings for the coding model.
 */
private void showSettingsCodingModel(){
  if (this.viewCodingModel == null) {
    Composite composite2=folder.createItem(Resources.getMessage(""String_Node_Str""),null);
    composite2.setLayout(new FillLayout());
    this.viewCodingModel=new ViewCodingModel(composite2,controller);
  }
  this.viewCodingModel.update(new ModelEvent(this,ModelPart.MODEL,this.model));
}",0.9545454545454546
107886,"@Override public void reset(){
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  SWTUtil.disable(root);
}","@Override public void reset(){
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  state=null;
  SWTUtil.disable(root);
}",0.9665071770334928
107887,"@Override public void modifyText(ModifyEvent arg0){
  Granularity g=null;
  if (table.getSelection() != null && table.getSelection().length != 0) {
    g=(Granularity)table.getSelection()[0].getData();
  }
  if (g.isFormatSupported()) {
    String formatString=text.getText();
    if (g != null && model.getFormat().isValid(formatString,g.getDefaultFormat())) {
      decoration.hide();
      model.getFormat().set((Granularity)table.getSelection()[0].getData(),formatString);
    }
 else {
      decoration.setDescriptionText(Resources.getMessage(""String_Node_Str""));
      Image image=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_ERROR).getImage();
      decoration.setImage(image);
      decoration.show();
    }
  }
 else {
    decoration.hide();
  }
}","@Override public void modifyText(ModifyEvent arg0){
  Granularity g=null;
  if (table.getSelection() != null && table.getSelection().length != 0) {
    g=(Granularity)table.getSelection()[0].getData();
  }
  if (g.isFormatSupported()) {
    String formatString=text.getText();
    if (g != null && model.getFormat().isValid(formatString,g.getDefaultFormat())) {
      decoration.hide();
      Format format=model.getFormat();
      format.set((Granularity)table.getSelection()[0].getData(),formatString);
      model.setFormat(format);
    }
 else {
      decoration.setDescriptionText(Resources.getMessage(""String_Node_Str""));
      Image image=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_ERROR).getImage();
      decoration.setImage(image);
      decoration.show();
    }
  }
 else {
    decoration.hide();
  }
}",0.9508793208004852
107888,"@Override public void createControl(final Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(SWTUtil.createGridLayout(1,false));
  Group group1=new Group(composite,SWT.SHADOW_ETCHED_IN);
  group1.setText(Resources.getMessage(""String_Node_Str""));
  group1.setLayout(SWTUtil.createGridLayout(1,false));
  group1.setLayoutData(SWTUtil.createFillGridData());
  table=SWTUtil.createTableDynamic(group1,SWT.CHECK | SWT.SINGLE | SWT.BORDER);
  table.setLayoutData(SWTUtil.createFillGridData());
  DynamicTableColumn column1=new DynamicTableColumn(table,SWT.NONE);
  column1.setWidth(""String_Node_Str"",""String_Node_Str"");
  createItems(table);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (table.getSelection() == null || table.getSelection().length == 0) {
        text.setText(""String_Node_Str"");
        text.setEnabled(false);
        setPageComplete(isPageComplete());
        return;
      }
      Granularity g=(Granularity)table.getSelection()[0].getData();
      if (g.isFormatSupported()) {
        String _format=model.getFormat().get(g);
        _format=_format != null ? _format : g.getDefaultFormat();
        text.setText(_format);
        text.setEnabled(true);
      }
 else {
        text.setText(""String_Node_Str"");
        text.setEnabled(false);
      }
      model.getGranularities().clear();
      for (      TableItem item : table.getItems()) {
        if (item.getChecked()) {
          model.getGranularities().add((Granularity)item.getData());
        }
      }
    }
  }
);
  Group group2=new Group(composite,SWT.SHADOW_ETCHED_IN);
  group2.setText(Resources.getMessage(""String_Node_Str""));
  group2.setLayout(SWTUtil.createGridLayout(1,false));
  group2.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  text=new Text(group2,SWT.BORDER);
  text.setLayoutData(SWTUtil.createFillGridData());
  decorateAndStore(text);
  Group group3=new Group(composite,SWT.SHADOW_ETCHED_IN);
  group3.setText(Resources.getMessage(""String_Node_Str""));
  group3.setLayout(SWTUtil.createGridLayout(2,false));
  group3.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  combo=new Combo(group3,SWT.SINGLE);
  combo.setLayoutData(SWTUtil.createFillGridData());
  createItems(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (combo.getSelectionIndex() < 0) {
        return;
      }
      String label=combo.getItem(combo.getSelectionIndex());
      String[] ids=TimeZone.getAvailableIDs();
      for (      String id : ids) {
        TimeZone timezone=TimeZone.getTimeZone(id);
        if (label.equals(timezone.getDisplayName())) {
          model.setTimeZone(timezone);
        }
      }
    }
  }
);
  updatePage();
  setControl(composite);
}","@Override public void createControl(final Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(SWTUtil.createGridLayout(1,false));
  Group group1=new Group(composite,SWT.SHADOW_ETCHED_IN);
  group1.setText(Resources.getMessage(""String_Node_Str""));
  group1.setLayout(SWTUtil.createGridLayout(1,false));
  group1.setLayoutData(SWTUtil.createFillGridData());
  table=SWTUtil.createTableDynamic(group1,SWT.CHECK | SWT.SINGLE | SWT.BORDER);
  table.setLayoutData(SWTUtil.createFillGridData());
  DynamicTableColumn column1=new DynamicTableColumn(table,SWT.NONE);
  column1.setWidth(""String_Node_Str"",""String_Node_Str"");
  createItems(table);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (table.getSelection() == null || table.getSelection().length == 0) {
        text.setText(""String_Node_Str"");
        text.setEnabled(false);
        setPageComplete(isPageComplete());
        return;
      }
      Granularity g=(Granularity)table.getSelection()[0].getData();
      if (g.isFormatSupported()) {
        String _format=model.getFormat().get(g);
        _format=_format != null ? _format : g.getDefaultFormat();
        text.setText(_format);
        text.setEnabled(true);
      }
 else {
        text.setText(""String_Node_Str"");
        text.setEnabled(false);
      }
      List<Granularity> granularities=new ArrayList<>();
      for (      TableItem item : table.getItems()) {
        if (item.getChecked()) {
          granularities.add((Granularity)item.getData());
        }
      }
      model.setGranularities(granularities);
    }
  }
);
  Group group2=new Group(composite,SWT.SHADOW_ETCHED_IN);
  group2.setText(Resources.getMessage(""String_Node_Str""));
  group2.setLayout(SWTUtil.createGridLayout(1,false));
  group2.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  text=new Text(group2,SWT.BORDER);
  text.setLayoutData(SWTUtil.createFillGridData());
  text.addModifyListener(new ModifyListener(){
    ControlDecoration decoration=new ControlDecoration(text,SWT.RIGHT);
    @Override public void modifyText(    ModifyEvent arg0){
      Granularity g=null;
      if (table.getSelection() != null && table.getSelection().length != 0) {
        g=(Granularity)table.getSelection()[0].getData();
      }
      if (g.isFormatSupported()) {
        String formatString=text.getText();
        if (g != null && model.getFormat().isValid(formatString,g.getDefaultFormat())) {
          decoration.hide();
          Format format=model.getFormat();
          format.set((Granularity)table.getSelection()[0].getData(),formatString);
          model.setFormat(format);
        }
 else {
          decoration.setDescriptionText(Resources.getMessage(""String_Node_Str""));
          Image image=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_ERROR).getImage();
          decoration.setImage(image);
          decoration.show();
        }
      }
 else {
        decoration.hide();
      }
    }
  }
);
  Group group3=new Group(composite,SWT.SHADOW_ETCHED_IN);
  group3.setText(Resources.getMessage(""String_Node_Str""));
  group3.setLayout(SWTUtil.createGridLayout(2,false));
  group3.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  combo=new Combo(group3,SWT.SINGLE);
  combo.setLayoutData(SWTUtil.createFillGridData());
  createItems(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (combo.getSelectionIndex() < 0) {
        return;
      }
      String label=combo.getItem(combo.getSelectionIndex());
      String[] ids=TimeZone.getAvailableIDs();
      for (      String id : ids) {
        TimeZone timezone=TimeZone.getTimeZone(id);
        if (label.equals(timezone.getDisplayName())) {
          model.setTimeZone(timezone);
        }
      }
    }
  }
);
  updatePage();
  setControl(composite);
}",0.8125
107889,"/** 
 * Creates a list of all available granularities
 * @param table
 */
private void createItems(DynamicTable table){
  for (  Granularity g : Granularity.values()) {
    TableItem item=new TableItem(table,SWT.CHECK);
    item.setText(Resources.getMessage(""String_Node_Str"" + g.toString()));
    item.setData(g);
  }
}","/** 
 * Creates a list of all available granularities
 * @param table
 */
private void createItems(DynamicTable table){
  for (  Granularity g : Granularity.values()) {
    TableItem item=new TableItem(table,SWT.CHECK);
    item.setText(Resources.getMessage(""String_Node_Str"" + g.toString()));
    item.setData(g);
    item.setChecked(model.getGranularities().contains(g));
  }
}",0.915593705293276
107890,"/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  State state=new State(model,model.getInputConfig().getInput().getHandle(),model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  DataHandle handle=model.getInputConfig().getInput().getHandle();
  root.setRedraw(false);
  root.setRedraw(false);
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (int i=0; i < handle.getNumColumns(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(attribute);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    TableEditor editor=new TableEditor(features);
    final CCombo combo=new CCombo(features,SWT.NONE);
    final Color defaultColor=combo.getForeground();
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(LABEL_CATEGORICAL);
    combo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addSelectionListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    combo.addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addKeyListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    editor.grabHorizontal=true;
    editor.setEditor(combo,itemF,1);
    String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
    if (function == null || function.equals(""String_Node_Str"")) {
      function=LABEL_CATEGORICAL;
    }
    combo.setText(function);
  }
  root.setRedraw(true);
  SWTUtil.enable(root);
}","/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  State state=new State(model,model.getInputConfig().getInput().getHandle(),model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition());
  if (this.state == null || !this.state.equals(state)) {
    this.state=state;
  }
 else {
    return;
  }
  root.setRedraw(false);
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (int i=0; i < state.attributes.size(); i++) {
    final String attribute=state.attributes.get(i);
    AttributeType type=state.types.get(i);
    Image image=controller.getResources().getImage(type);
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute,""String_Node_Str""});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(attribute);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
    TableEditor editor=new TableEditor(features);
    final CCombo combo=new CCombo(features,SWT.NONE);
    final Color defaultColor=combo.getForeground();
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(""String_Node_Str"");
    combo.add(LABEL_CATEGORICAL);
    combo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addSelectionListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    combo.addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent arg0){
        updateCombo(attribute,combo,defaultColor);
      }
    }
);
    combo.addKeyListener(new DelayedChangeListener(DELAY){
      public void delayedEvent(){
        updateFunction(attribute,combo);
      }
    }
);
    editor.grabHorizontal=true;
    editor.setEditor(combo,itemF,2);
    String function=model.getClassificationModel().getFeatureScaling().getScalingFunction(attribute);
    if (function == null || function.equals(""String_Node_Str"")) {
      function=LABEL_CATEGORICAL;
    }
    combo.setText(function);
  }
  features.layout();
  root.setRedraw(true);
  SWTUtil.enable(root);
}",0.966932725199544
107891,"/** 
 * Sets the result.
 * @param result
 */
public void setResult(final ARXResult result){
  this.result=result;
  if ((result != null) && (result.getGlobalOptimum() != null)) {
    optimalNodeAsString=Arrays.toString(result.getGlobalOptimum().getTransformation());
  }
  setModified();
}","/** 
 * Sets the result.
 * @param result
 */
public void setResult(final ARXResult result){
  this.result=result;
  if ((result != null) && (result.getGlobalOptimum() != null)) {
    optimalNodeAsString=Arrays.toString(result.getGlobalOptimum().getTransformation());
  }
 else {
    optimalNodeAsString=null;
  }
  setModified();
}",0.932475884244373
107892,"/** 
 * Returns the output definition.
 * @return
 */
public DataDefinition getOutputDefinition(){
  if (this.output == null)   return null;
 else   return this.output.getDefinition();
}","/** 
 * Returns the output definition.
 * @return
 */
public DataDefinition getOutputDefinition(){
  if (this.output == null) {
    if (this.result != null) {
      return this.result.getDataDefinition();
    }
 else {
      return null;
    }
  }
 else   return this.output.getDefinition();
}",0.7223382045929019
107893,"/** 
 * Data type changed
 */
private void actionDataTypeChanged(String label){
  if (label != null) {
    if ((model != null) && (model.getInputConfig().getInput() != null)) {
      String attribute=model.getSelectedAttribute();
      DataTypeDescription<?> description=getDataTypeDescription(label);
      DataType<?> type;
      if (description.getLabel().equals(""String_Node_Str"")) {
        final String text1=Resources.getMessage(""String_Node_Str"");
        final String text2=Resources.getMessage(""String_Node_Str"");
        String[] array=controller.actionShowOrderValuesDialog(controller.getResources().getShell(),text1,text2,DataType.STRING,model.getLocale(),getValuesAsArray(attribute));
        if (array == null) {
          type=DataType.STRING;
        }
 else {
          try {
            type=DataType.createOrderedString(array);
            if (!isValidDataType(type,getValuesAsList(attribute))) {
              type=DataType.STRING;
            }
          }
 catch (          Exception e) {
            controller.actionShowInfoDialog(controller.getResources().getShell(),Resources.getMessage(""String_Node_Str""),Resources.getMessage(""String_Node_Str"") + e.getMessage());
            type=DataType.STRING;
          }
        }
      }
 else       if (description.hasFormat()) {
        final String text1=Resources.getMessage(""String_Node_Str"");
        final String text2=Resources.getMessage(""String_Node_Str"");
        final String format=controller.actionShowFormatInputDialog(controller.getResources().getShell(),text1,text2,model.getLocale(),description,getValuesAsList(attribute));
        if (format == null) {
          type=DataType.STRING;
        }
 else {
          type=description.newInstance(format,model.getLocale());
        }
      }
 else {
        type=description.newInstance();
        if (!isValidDataType(type,getValuesAsList(attribute))) {
          type=DataType.STRING;
        }
      }
      this.model.getInputDefinition().setDataType(attribute,type);
      this.updateDataTypes();
      this.controller.update(new ModelEvent(this,ModelPart.DATA_TYPE,attribute));
    }
  }
}","/** 
 * Data type changed
 */
private void actionDataTypeChanged(String label){
  if (label != null && model != null && model.getInputConfig().getInput() != null) {
    String attribute=model.getSelectedAttribute();
    DataTypeDescription<?> description=getDataTypeDescription(label);
    DataType<?> type=model.getInputDefinition().getDataType(attribute);
    boolean changed=false;
    try {
      if (description.getLabel().equals(""String_Node_Str"")) {
        final String text1=Resources.getMessage(""String_Node_Str"");
        final String text2=Resources.getMessage(""String_Node_Str"");
        String[] array=controller.actionShowOrderValuesDialog(controller.getResources().getShell(),text1,text2,DataType.STRING,model.getLocale(),getValuesAsArray(attribute));
        if (array != null) {
          DataType<?> tempType=DataType.createOrderedString(array);
          if (isValidDataType(tempType,getValuesAsList(attribute))) {
            type=tempType;
            changed=true;
          }
        }
      }
 else       if (description.hasFormat()) {
        final String text1=Resources.getMessage(""String_Node_Str"");
        final String text2=Resources.getMessage(""String_Node_Str"");
        final String format=controller.actionShowFormatInputDialog(controller.getResources().getShell(),text1,text2,model.getLocale(),description,getValuesAsList(attribute));
        if (format != null) {
          type=description.newInstance(format,model.getLocale());
          changed=true;
        }
      }
 else {
        DataType<?> typeTemp=description.newInstance();
        if (isValidDataType(typeTemp,getValuesAsList(attribute))) {
          type=typeTemp;
          changed=true;
        }
      }
    }
 catch (    Exception e) {
      controller.actionShowInfoDialog(controller.getResources().getShell(),Resources.getMessage(""String_Node_Str""),Resources.getMessage(""String_Node_Str"") + e.getMessage());
      type=DataType.STRING;
      changed=true;
    }
    if (changed) {
      this.model.getInputDefinition().setDataType(attribute,type);
      this.updateDataTypes();
      this.controller.update(new ModelEvent(this,ModelPart.DATA_TYPE,attribute));
    }
  }
}",0.4305620065025545
107894,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewClipboard(final Composite parent,final Controller controller){
  Image imageDown=controller.getResources().getManagedImage(""String_Node_Str"");
  Image imageUp=controller.getResources().getManagedImage(""String_Node_Str"");
  Image imageSort=controller.getResources().getManagedImage(""String_Node_Str"");
  Image imageRemove=controller.getResources().getManagedImage(""String_Node_Str"");
  controller.addListener(ModelPart.CLIPBOARD,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(ModelPart.SELECTED_NODE,this);
  this.controller=controller;
  ComponentTitledFolderButtonBar bar=new ComponentTitledFolderButtonBar(""String_Node_Str"");
  bar.add(Resources.getMessage(""String_Node_Str""),imageRemove,new Runnable(){
    public void run(){
      actionRemove();
    }
  }
);
  bar.add(Resources.getMessage(""String_Node_Str""),imageUp,new Runnable(){
    public void run(){
      actionUp();
    }
  }
);
  bar.add(Resources.getMessage(""String_Node_Str""),imageDown,new Runnable(){
    public void run(){
      actionDown();
    }
  }
);
  bar.add(Resources.getMessage(""String_Node_Str""),imageSort,new Runnable(){
    public void run(){
      actionSort();
    }
  }
);
  ComponentTitledFolder border=new ComponentTitledFolder(parent,controller,bar,null);
  GridData data=SWTUtil.createFillGridData();
  data.heightHint=70;
  border.setLayoutData(data);
  root=border.createItem(Resources.getMessage(""String_Node_Str""),null);
  root.setLayout(new FillLayout());
  border.setSelection(0);
  border.setEnabled(true);
  table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL| SWT.H_SCROLL);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setText(Resources.getMessage(""String_Node_Str""));
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  final DynamicTableColumn c2=new DynamicTableColumn(table,SWT.LEFT);
  c2.setText(Resources.getMessage(""String_Node_Str""));
  c2.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.pack();
  c2.pack();
  SWTUtil.createGenericTooltip(table);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      final TableItem[] s=table.getSelection();
      if (s.length > 0) {
        final ARXNode node=(ARXNode)s[0].getData();
        selectedItem=s[0];
        model.setSelectedNode(node);
        controller.update(new ModelEvent(ViewClipboard.this,ModelPart.SELECTED_NODE,node));
      }
    }
  }
);
  this.menu=createMenu(parent);
  table.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    final Event event){
      if (event.button == 3) {
        final TableItem i=getItemAt(event.x,event.y);
        if (i != null) {
          final ARXNode node=(ARXNode)i.getData();
          model.setSelectedNode(node);
          controller.update(new ModelEvent(ViewClipboard.this,ModelPart.SELECTED_NODE,node));
          selectedItem=i;
          Point point=table.toDisplay(event.x,event.y);
          Rectangle bounds=i.getBounds();
          bounds.x=table.toDisplay(bounds.x,bounds.y).x;
          bounds.y=table.toDisplay(bounds.x,bounds.y).y;
          menu.setLocation(point);
          menu.setVisible(true);
        }
      }
    }
  }
);
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewClipboard(final Composite parent,final Controller controller){
  Image imageDown=controller.getResources().getManagedImage(""String_Node_Str"");
  Image imageUp=controller.getResources().getManagedImage(""String_Node_Str"");
  Image imageSort=controller.getResources().getManagedImage(""String_Node_Str"");
  Image imageRemove=controller.getResources().getManagedImage(""String_Node_Str"");
  controller.addListener(ModelPart.CLIPBOARD,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(ModelPart.SELECTED_NODE,this);
  this.controller=controller;
  ComponentTitledFolderButtonBar bar=new ComponentTitledFolderButtonBar(""String_Node_Str"");
  bar.add(Resources.getMessage(""String_Node_Str""),imageRemove,new Runnable(){
    public void run(){
      actionRemove();
    }
  }
);
  bar.add(Resources.getMessage(""String_Node_Str""),imageUp,new Runnable(){
    public void run(){
      actionUp();
    }
  }
);
  bar.add(Resources.getMessage(""String_Node_Str""),imageDown,new Runnable(){
    public void run(){
      actionDown();
    }
  }
);
  bar.add(Resources.getMessage(""String_Node_Str""),imageSort,new Runnable(){
    public void run(){
      actionSort();
    }
  }
);
  ComponentTitledFolder border=new ComponentTitledFolder(parent,controller,bar,null);
  GridData data=SWTUtil.createFillGridData();
  data.heightHint=70;
  border.setLayoutData(data);
  root=border.createItem(Resources.getMessage(""String_Node_Str""),null);
  root.setLayout(new FillLayout());
  border.setSelection(0);
  border.setEnabled(true);
  table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL| SWT.H_SCROLL| SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setText(Resources.getMessage(""String_Node_Str""));
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  final DynamicTableColumn c2=new DynamicTableColumn(table,SWT.LEFT);
  c2.setText(Resources.getMessage(""String_Node_Str""));
  c2.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.pack();
  c2.pack();
  SWTUtil.createGenericTooltip(table);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      final TableItem[] s=table.getSelection();
      if (s.length > 0) {
        final ARXNode node=(ARXNode)s[0].getData();
        selectedItem=s[0];
        model.setSelectedNode(node);
        controller.update(new ModelEvent(ViewClipboard.this,ModelPart.SELECTED_NODE,node));
      }
    }
  }
);
  this.menu=createMenu(parent);
  table.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    final Event event){
      if (event.button == 3) {
        final TableItem i=getItemAt(event.x,event.y);
        if (i != null) {
          final ARXNode node=(ARXNode)i.getData();
          model.setSelectedNode(node);
          controller.update(new ModelEvent(ViewClipboard.this,ModelPart.SELECTED_NODE,node));
          selectedItem=i;
          Point point=table.toDisplay(event.x,event.y);
          Rectangle bounds=i.getBounds();
          bounds.x=table.toDisplay(bounds.x,bounds.y).x;
          bounds.y=table.toDisplay(bounds.x,bounds.y).y;
          menu.setLocation(point);
          menu.setVisible(true);
        }
      }
    }
  }
);
}",0.9970648664514236
107895,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewProperties(final Composite parent,final Controller controller){
  controller.addListener(ModelPart.RESULT,this);
  controller.addListener(ModelPart.SELECTED_NODE,this);
  this.controller=controller;
  ComponentTitledBorder border=new ComponentTitledBorder(parent,controller,Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  root=new Composite(border.getControl(),SWT.NONE);
  border.setChild(root);
  border.setLayoutData(SWTUtil.createFillGridData());
  final GridLayout groupNodeGridLayout=new GridLayout();
  groupNodeGridLayout.numColumns=1;
  root.setLayout(groupNodeGridLayout);
  table=SWTUtil.createTable(root,SWT.BORDER);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final GridData gdata=SWTUtil.createFillGridData();
  table.setLayoutData(gdata);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  TableColumn c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  SWTUtil.createGenericTooltip(table);
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  reset();
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewProperties(final Composite parent,final Controller controller){
  controller.addListener(ModelPart.RESULT,this);
  controller.addListener(ModelPart.SELECTED_NODE,this);
  this.controller=controller;
  ComponentTitledBorder border=new ComponentTitledBorder(parent,controller,Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  root=new Composite(border.getControl(),SWT.NONE);
  border.setChild(root);
  border.setLayoutData(SWTUtil.createFillGridData());
  final GridLayout groupNodeGridLayout=new GridLayout();
  groupNodeGridLayout.numColumns=1;
  root.setLayout(groupNodeGridLayout);
  table=SWTUtil.createTable(root,SWT.BORDER | SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  final GridData gdata=SWTUtil.createFillGridData();
  table.setLayoutData(gdata);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  TableColumn c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new TableColumn(table,SWT.NONE);
  c.setText(Resources.getMessage(""String_Node_Str""));
  SWTUtil.createGenericTooltip(table);
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  reset();
}",0.99170288423548
107896,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(SWTUtil.createGridLayout(1));
  table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  table.setLayoutData(SWTUtil.createFillGridData());
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(table,c);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(SWTUtil.createGridLayout(1));
  table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  table.setLayoutData(SWTUtil.createFillGridData());
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(table,c);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return root;
}",0.9891304347826086
107897,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(table,c);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(table,c);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return this.root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setMenu(new ClipboardHandlerTable(table).getMenu());
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(table,c);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  SWTUtil.createColumnWithBarCharts(table,c);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return this.root;
}",0.990530303030303
107898,"/** 
 * Creates the view.
 * @param root
 */
private void create(final Composite root){
  root.setLayout(new FillLayout());
  Tree tree=new Tree(root,SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
  tree.setHeaderVisible(true);
  treeViewer=new TreeViewer(tree);
  tree.setMenu(new ClipboardHandlerTree(treeViewer).getMenu());
  final TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  tree.setLinesVisible(true);
  column1.setAlignment(SWT.LEFT);
  column1.setText(Resources.getMessage(""String_Node_Str""));
  column1.setWidth(160);
  final TreeColumn column2=new TreeColumn(tree,SWT.RIGHT);
  column2.setAlignment(SWT.LEFT);
  column2.setText(Resources.getMessage(""String_Node_Str""));
  column2.setWidth(100);
  final TreeColumn column6=new TreeColumn(tree,SWT.RIGHT);
  column6.setAlignment(SWT.LEFT);
  column6.setText(Resources.getMessage(""String_Node_Str""));
  column6.setWidth(100);
  final TreeColumn column7=new TreeColumn(tree,SWT.RIGHT);
  column7.setAlignment(SWT.LEFT);
  column7.setText(Resources.getMessage(""String_Node_Str""));
  column7.setWidth(80);
  final TreeColumn column3=new TreeColumn(tree,SWT.RIGHT);
  column3.setAlignment(SWT.LEFT);
  column3.setText(Resources.getMessage(""String_Node_Str""));
  column3.setWidth(50);
  final TreeColumn column4=new TreeColumn(tree,SWT.RIGHT);
  column4.setAlignment(SWT.LEFT);
  column4.setText(Resources.getMessage(""String_Node_Str""));
  column4.setWidth(50);
  final TreeColumn column5=new TreeColumn(tree,SWT.RIGHT);
  column5.setAlignment(SWT.LEFT);
  column5.setText(Resources.getMessage(""String_Node_Str""));
  column5.setWidth(50);
  final TreeColumn column8=new TreeColumn(tree,SWT.RIGHT);
  column8.setAlignment(SWT.LEFT);
  column8.setText(Resources.getMessage(""String_Node_Str""));
  column8.setWidth(50);
  final TreeColumn column9=new TreeColumn(tree,SWT.RIGHT);
  column9.setAlignment(SWT.LEFT);
  column9.setText(Resources.getMessage(""String_Node_Str""));
  column9.setWidth(50);
  treeViewer.setContentProvider(new InputContentProvider());
  treeViewer.setLabelProvider(new InputLabelProvider());
  treeViewer.setInput(roots);
  treeViewer.expandAll();
}","/** 
 * Creates the view.
 * @param root
 */
private void create(final Composite root){
  root.setLayout(new FillLayout());
  Tree tree=new Tree(root,SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
  tree.setHeaderVisible(true);
  treeViewer=new TreeViewer(tree);
  tree.setMenu(new ClipboardHandlerTree(treeViewer).getMenu());
  final TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  tree.setLinesVisible(true);
  column1.setAlignment(SWT.LEFT);
  column1.setText(Resources.getMessage(""String_Node_Str""));
  column1.setWidth(160);
  final TreeColumn column2=new TreeColumn(tree,SWT.RIGHT);
  column2.setAlignment(SWT.LEFT);
  column2.setText(Resources.getMessage(""String_Node_Str""));
  column2.setWidth(100);
  final TreeColumn column6=new TreeColumn(tree,SWT.RIGHT);
  column6.setAlignment(SWT.LEFT);
  column6.setText(Resources.getMessage(""String_Node_Str""));
  column6.setWidth(100);
  final TreeColumn column7=new TreeColumn(tree,SWT.RIGHT);
  column7.setAlignment(SWT.LEFT);
  column7.setText(Resources.getMessage(""String_Node_Str""));
  column7.setWidth(80);
  final TreeColumn column3=new TreeColumn(tree,SWT.RIGHT);
  column3.setAlignment(SWT.LEFT);
  column3.setText(Resources.getMessage(""String_Node_Str""));
  column3.setWidth(50);
  final TreeColumn column4=new TreeColumn(tree,SWT.RIGHT);
  column4.setAlignment(SWT.LEFT);
  column4.setText(Resources.getMessage(""String_Node_Str""));
  column4.setWidth(50);
  final TreeColumn column5=new TreeColumn(tree,SWT.RIGHT);
  column5.setAlignment(SWT.LEFT);
  column5.setText(Resources.getMessage(""String_Node_Str""));
  column5.setWidth(50);
  final TreeColumn column8=new TreeColumn(tree,SWT.RIGHT);
  column8.setAlignment(SWT.LEFT);
  column8.setText(Resources.getMessage(""String_Node_Str""));
  column8.setWidth(50);
  final TreeColumn column9=new TreeColumn(tree,SWT.RIGHT);
  column9.setAlignment(SWT.LEFT);
  column9.setText(Resources.getMessage(""String_Node_Str""));
  column9.setWidth(50);
  treeViewer.setContentProvider(new InputContentProvider());
  treeViewer.setLabelProvider(new InputLabelProvider());
  treeViewer.setInput(roots);
  treeViewer.expandAll();
}",0.9953117674636662
107899,"/** 
 * Creates the view.
 * @param root
 */
private void create(final Composite root){
  root.setLayout(new FillLayout());
  final Tree tree=new Tree(root,SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
  tree.setHeaderVisible(true);
  treeViewer=new TreeViewer(tree);
  tree.setMenu(new ClipboardHandlerTree(treeViewer).getMenu());
  final TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  tree.setLinesVisible(true);
  column1.setAlignment(SWT.LEFT);
  column1.setText(Resources.getMessage(""String_Node_Str""));
  column1.setWidth(160);
  final TreeColumn column2=new TreeColumn(tree,SWT.RIGHT);
  column2.setAlignment(SWT.LEFT);
  column2.setText(Resources.getMessage(""String_Node_Str""));
  column2.setWidth(100);
  treeViewer.setContentProvider(new OutputContentProvider());
  treeViewer.setLabelProvider(new OutputLabelProvider());
  treeViewer.setInput(roots);
  treeViewer.expandAll();
}","/** 
 * Creates the view.
 * @param root
 */
private void create(final Composite root){
  root.setLayout(new FillLayout());
  final Tree tree=new Tree(root,SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
  tree.setHeaderVisible(true);
  treeViewer=new TreeViewer(tree);
  tree.setMenu(new ClipboardHandlerTree(treeViewer).getMenu());
  final TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  tree.setLinesVisible(true);
  column1.setAlignment(SWT.LEFT);
  column1.setText(Resources.getMessage(""String_Node_Str""));
  column1.setWidth(160);
  final TreeColumn column2=new TreeColumn(tree,SWT.RIGHT);
  column2.setAlignment(SWT.LEFT);
  column2.setText(Resources.getMessage(""String_Node_Str""));
  column2.setWidth(100);
  treeViewer.setContentProvider(new OutputContentProvider());
  treeViewer.setLabelProvider(new OutputLabelProvider());
  treeViewer.setInput(roots);
  treeViewer.expandAll();
}",0.9889012208657048
107900,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String size=""String_Node_Str"";
  if (super.getTarget() == ModelPart.OUTPUT) {
    size=""String_Node_Str"";
  }
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(size,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(size,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  if (super.getTarget() == ModelPart.OUTPUT) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    c.setWidth(size,""String_Node_Str"");
    c.setText(Resources.getMessage(""String_Node_Str""));
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String size=""String_Node_Str"";
  if (super.getTarget() == ModelPart.OUTPUT) {
    size=""String_Node_Str"";
  }
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(size,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(size,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  if (super.getTarget() == ModelPart.OUTPUT) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    c.setWidth(size,""String_Node_Str"");
    c.setText(Resources.getMessage(""String_Node_Str""));
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return root;
}",0.9909828674481514
107901,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length > 0 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  table.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=table.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        boolean visible=false;
        TableItem item=table.getItem(index);
        for (int i=0; i < table.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
              setChartSeries((PrecisionRecallMatrix)item.getData());
            }
            getModel().setSelectedAttribute(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length > 0 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  table.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      Rectangle clientArea=table.getClientArea();
      Point pt=new Point(event.x,event.y);
      int index=table.getTopIndex();
      while (index < table.getItemCount()) {
        boolean visible=false;
        TableItem item=table.getItem(index);
        for (int i=0; i < table.getColumnCount(); i++) {
          Rectangle rect=item.getBounds(i);
          if (rect.contains(pt)) {
            if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
              setChartSeries((PrecisionRecallMatrix)item.getData());
            }
            getModel().setSelectedAttribute(item.getText(0));
            getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
            return;
          }
          if (!visible && rect.intersects(clientArea)) {
            visible=true;
          }
        }
        if (!visible)         return;
        index++;
      }
    }
  }
);
  return this.root;
}",0.997620180866254
107902,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.table=SWTUtil.createTableDynamic(root,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(""String_Node_Str"",""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  return root;
}",0.9879518072289156
107903,"/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  DataHandle handle=model.getInputConfig().getInput().getHandle();
  root.setRedraw(false);
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  for (int col=0; col < handle.getNumColumns(); col++) {
    String attribute=handle.getAttributeName(col);
    DataDefinition def=model.getOutputDefinition() == null ? model.getInputDefinition() : model.getInputDefinition();
    Image image=controller.getResources().getImage(def.getAttributeType(attribute));
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(attribute);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
  }
  root.setRedraw(true);
  SWTUtil.enable(root);
}","/** 
 * Updates the view.
 * @param node
 */
private void update(){
  if (model == null || model.getInputConfig() == null || model.getInputConfig().getInput() == null) {
    return;
  }
  DataHandle handle=model.getInputConfig().getInput().getHandle();
  root.setRedraw(false);
  for (  TableItem item : features.getItems()) {
    item.dispose();
  }
  for (  TableItem item : classes.getItems()) {
    item.dispose();
  }
  for (int col=0; col < handle.getNumColumns(); col++) {
    String attribute=handle.getAttributeName(col);
    DataDefinition def=model.getOutputDefinition() == null ? model.getInputDefinition() : model.getOutputDefinition();
    Image image=controller.getResources().getImage(def.getAttributeType(attribute));
    TableItem itemF=new TableItem(features,SWT.NONE);
    itemF.setText(new String[]{""String_Node_Str"",attribute});
    itemF.setImage(0,image);
    itemF.setChecked(model.getSelectedFeatures().contains(attribute));
    TableItem itemC=new TableItem(classes,SWT.NONE);
    itemC.setText(attribute);
    itemC.setChecked(model.getSelectedClasses().contains(attribute));
  }
  root.setRedraw(true);
  SWTUtil.enable(root);
}",0.9978383052313012
107904,"/** 
 * Checks the selected items and fires an event on changes
 */
private void fireEvent(){
  Set<String> selectedFeatures=new HashSet<String>();
  for (  TableItem item : features.getItems()) {
    if (item.getChecked()) {
      selectedFeatures.add(item.getText());
    }
  }
  Set<String> selectedClasses=new HashSet<String>();
  for (  TableItem item : classes.getItems()) {
    if (item.getChecked()) {
      selectedClasses.add(item.getText());
    }
  }
  if (model != null) {
    boolean modified=false;
    if (!selectedFeatures.equals(model.getSelectedFeatures())) {
      model.setSelectedFeatures(selectedFeatures);
      modified=true;
    }
    if (!selectedClasses.equals(model.getSelectedClasses())) {
      model.setSelectedClasses(selectedClasses);
      modified=true;
    }
    if (modified) {
      controller.update(new ModelEvent(ViewClassificationAttributes.this,ModelPart.SELECTED_FEATURES_OR_CLASSES,null));
    }
  }
}","/** 
 * Checks the selected items and fires an event on changes
 */
private void fireEvent(){
  Set<String> selectedFeatures=new HashSet<String>();
  for (  TableItem item : features.getItems()) {
    if (item.getChecked()) {
      selectedFeatures.add(item.getText(1));
    }
  }
  Set<String> selectedClasses=new HashSet<String>();
  for (  TableItem item : classes.getItems()) {
    if (item.getChecked()) {
      selectedClasses.add(item.getText());
    }
  }
  if (model != null) {
    boolean modified=false;
    if (!selectedFeatures.equals(model.getSelectedFeatures())) {
      model.setSelectedFeatures(selectedFeatures);
      modified=true;
    }
    if (!selectedClasses.equals(model.getSelectedClasses())) {
      model.setSelectedClasses(selectedClasses);
      modified=true;
    }
    if (modified) {
      controller.update(new ModelEvent(ViewClassificationAttributes.this,ModelPart.SELECTED_FEATURES_OR_CLASSES,null));
    }
  }
}",0.999472295514512
107905,"@Override public int compare(int arg0,int arg1){
  checkInterrupt();
  Integer order1=order.get(array[arg0]);
  Integer order2=order.get(array[arg1]);
  if (order1 == null || order2 == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    return order1.compareTo(order2);
  }
}","@Override public int compare(int arg0,int arg1){
  checkInterrupt();
  Integer order1=order.get(array[arg0]);
  Integer order2=order.get(array[arg1]);
  if (order1 == null || order2 == null) {
    String message=""String_Node_Str"";
    message+=order1 == null ? ""String_Node_Str"" + array[arg0] + ""String_Node_Str"" : ""String_Node_Str"";
    message+=order2 == null ? ""String_Node_Str"" + array[arg1] + ""String_Node_Str"" : ""String_Node_Str"";
    throw new RuntimeException(message);
  }
 else {
    return order1.compareTo(order2);
  }
}",0.6771084337349398
107906,"/** 
 * Returns an ordered list of the distinct set of data items from the given column. This method assumes that the order of string data items can (and should) be derived from the provided hierarchy
 * @param column The column
 * @param hierarchy The hierarchy, may be null
 * @return
 */
public String[] getDistinctValuesOrdered(int column,String[][] hierarchy){
  interrupt.value=false;
  final String[] list=getDistinctValues(column);
  final String attribute=handle.getAttributeName(column);
  final DataType<?> datatype=handle.getDataType(attribute);
  final int level=handle.getGeneralization(attribute);
  if (hierarchy == null || level == 0) {
    sort(list,datatype);
  }
 else {
    final Map<String,Integer> order=new HashMap<String,Integer>();
    int max=0;
    Set<String> baseSet=new HashSet<String>();
    DataType<?> baseType=handle.getBaseDataType(attribute);
    for (int i=0; i < hierarchy.length; i++) {
      String element=hierarchy[i][0];
      checkInterrupt();
      if (baseType.isValid(element))       baseSet.add(element);
    }
    String[] baseArray=baseSet.toArray(new String[baseSet.size()]);
    sort(baseArray,handle.getBaseDataType(attribute));
    Map<String,Integer> baseOrder=new HashMap<String,Integer>();
    for (int i=0; i < baseArray.length; i++) {
      checkInterrupt();
      baseOrder.put(baseArray[i],i);
    }
    int lower=handle.isOptimized() ? 1 : level;
    int upper=handle.isOptimized() ? hierarchy[0].length : level + 1;
    for (int i=0; i < hierarchy.length; i++) {
      checkInterrupt();
      for (int j=lower; j < upper; j++) {
        if (!order.containsKey(hierarchy[i][j])) {
          Integer position=baseOrder.get(hierarchy[i][0]);
          if (position != null) {
            order.put(hierarchy[i][j],position);
            max=Math.max(position,max) + 1;
          }
        }
      }
    }
    order.put(DataType.ANY_VALUE,max);
    sort(list,order);
  }
  return list;
}","/** 
 * Returns an ordered list of the distinct set of data items from the given column. This method assumes that the order of string data items can (and should) be derived from the provided hierarchy
 * @param column The column
 * @param hierarchy The hierarchy, may be null
 * @return
 */
public String[] getDistinctValuesOrdered(int column,String[][] hierarchy){
  interrupt.value=false;
  final String[] list=getDistinctValues(column);
  final String attribute=handle.getAttributeName(column);
  final DataType<?> datatype=handle.getDataType(attribute);
  final int level=handle.getGeneralization(attribute);
  if (hierarchy == null || level == 0) {
    sort(list,datatype);
  }
 else {
    final Map<String,Integer> order=new HashMap<String,Integer>();
    int max=0;
    Set<String> baseSet=new HashSet<String>();
    DataType<?> baseType=handle.getBaseDataType(attribute);
    for (int i=0; i < hierarchy.length; i++) {
      String element=hierarchy[i][0];
      checkInterrupt();
      if (baseType.isValid(element))       baseSet.add(element);
    }
    String[] baseArray=baseSet.toArray(new String[baseSet.size()]);
    sort(baseArray,handle.getBaseDataType(attribute));
    Map<String,Integer> baseOrder=new HashMap<String,Integer>();
    for (int i=0; i < baseArray.length; i++) {
      checkInterrupt();
      baseOrder.put(baseArray[i],i);
    }
    int lower=handle.isOptimized() ? 0 : level;
    int upper=handle.isOptimized() ? hierarchy[0].length : level + 1;
    for (int i=0; i < hierarchy.length; i++) {
      checkInterrupt();
      for (int j=lower; j < upper; j++) {
        if (!order.containsKey(hierarchy[i][j])) {
          Integer position=baseOrder.get(hierarchy[i][0]);
          if (position != null) {
            order.put(hierarchy[i][j],position);
            max=Math.max(position,max) + 1;
          }
        }
      }
    }
    order.put(DataType.ANY_VALUE,max);
    sort(list,order);
  }
  return list;
}",0.9994863893168978
107907,"/** 
 * Orders the given array by the given sort order.
 * @param array
 * @param order
 */
private void sort(final String[] array,final Map<String,Integer> order){
  GenericSorting.mergeSort(0,array.length,new IntComparator(){
    @Override public int compare(    int arg0,    int arg1){
      checkInterrupt();
      Integer order1=order.get(array[arg0]);
      Integer order2=order.get(array[arg1]);
      if (order1 == null || order2 == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        return order1.compareTo(order2);
      }
    }
  }
,new Swapper(){
    @Override public void swap(    int arg0,    int arg1){
      String temp=array[arg0];
      array[arg0]=array[arg1];
      array[arg1]=temp;
    }
  }
);
}","/** 
 * Orders the given array by the given sort order.
 * @param array
 * @param order
 */
private void sort(final String[] array,final Map<String,Integer> order){
  GenericSorting.mergeSort(0,array.length,new IntComparator(){
    @Override public int compare(    int arg0,    int arg1){
      checkInterrupt();
      Integer order1=order.get(array[arg0]);
      Integer order2=order.get(array[arg1]);
      if (order1 == null || order2 == null) {
        String message=""String_Node_Str"";
        message+=order1 == null ? ""String_Node_Str"" + array[arg0] + ""String_Node_Str"" : ""String_Node_Str"";
        message+=order2 == null ? ""String_Node_Str"" + array[arg1] + ""String_Node_Str"" : ""String_Node_Str"";
        throw new RuntimeException(message);
      }
 else {
        return order1.compareTo(order2);
      }
    }
  }
,new Swapper(){
    @Override public void swap(    int arg0,    int arg1){
      String temp=array[arg0];
      array[arg0]=array[arg1];
      array[arg1]=temp;
    }
  }
);
}",0.8403648802736602
107908,"/** 
 * Creates a new instance. Min is inclusive, max is exclusive
 * @param builder
 * @param type
 * @param min
 * @param max
 * @param function
 */
private Interval(HierarchyBuilderGroupingBased<T> builder,DataType<T> type,T min,T max,AggregateFunction<T> function){
  super(function.aggregate(new String[]{type.format(min),type.format(max)}));
  this.builder=builder;
  this.min=min;
  this.max=max;
  this.function=function;
  this.lower=false;
}","/** 
 * Creates a new instance. Min is inclusive, max is exclusive
 * @param builder
 * @param type
 * @param min
 * @param max
 * @param function
 */
private Interval(HierarchyBuilderGroupingBased<T> builder,DataType<T> type,T min,T max,AggregateFunction<T> function){
  super(function.aggregate(new String[]{type.format(min),type.format(max)}));
  this.builder=builder;
  this.min=min;
  this.max=max;
  this.function=function;
  this.lower=null;
}",0.9900110987791344
107909,"@Override public String toString(){
  double prunedPercentage=(double)this.numTransformationsPruned / (double)this.numMaterializedTransformations * 100d;
  double materializedPercentage=(double)this.numMaterializedTransformations / (double)this.numTransformationsInSearchSpace * 100d;
  StringBuilder sb=new StringBuilder();
  sb.append(Resources.getMessage(""String_Node_Str""));
  sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsInSearchSpace).append(""String_Node_Str"");
  sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numMaterializedTransformations);
  sb.append(""String_Node_Str"").append(SWTUtil.getPrettyString(materializedPercentage)).append(""String_Node_Str"");
  sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsPruned);
  sb.append(""String_Node_Str"").append(SWTUtil.getPrettyString(prunedPercentage)).append(""String_Node_Str"");
  sb.append(Resources.getMessage(""String_Node_Str"")).append(SWTUtil.getPrettyString(this.executionTime)).append(""String_Node_Str"");
  if (this.numTransformationsAnonymous != 0 || this.numTransformationsNotAnonymous != 0 || this.numTransformationsProbablyAnonymous != 0 || this.numTransformationsProbablyNotAnonymous != 0 || this.numTransformationsAnonymityUnknown != 0 || this.numTransformationsInfolossAvailable != 0) {
    sb.append(Resources.getMessage(""String_Node_Str""));
    if (this.numTransformationsAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsAnonymous);
    }
    if (this.numTransformationsNotAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsNotAnonymous);
    }
    if (this.numTransformationsProbablyAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsProbablyAnonymous);
    }
    if (this.numTransformationsProbablyNotAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsProbablyNotAnonymous);
    }
    if (this.numTransformationsAnonymityUnknown != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsAnonymityUnknown);
    }
    if (this.numTransformationsInfolossAvailable != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsInfolossAvailable);
    }
    sb.append(""String_Node_Str"");
  }
  if (this.optimum != null) {
    sb.append(Resources.getMessage(""String_Node_Str"")).append(Resources.getMessage(""String_Node_Str"")).append(SWTUtil.getPrettyString(this.heuristic)).append(Resources.getMessage(""String_Node_Str"")).append(Arrays.toString(this.optimum.getTransformation()));
    sb.append(Resources.getMessage(""String_Node_Str"")).append(this.optimum.getHighestScore().toString());
    for (    QualityMetadata<?> metadata : this.optimum.getHighestScore().getMetadata()) {
      sb.append(""String_Node_Str"").append(metadata.getParameter()).append(""String_Node_Str"").append(SWTUtil.getPrettyString(metadata.getValue()));
    }
  }
  return sb.toString();
}","@Override public String toString(){
  double prunedPercentage=(double)this.numTransformationsPruned / (double)this.numMaterializedTransformations * 100d;
  double materializedPercentage=(double)this.numMaterializedTransformations / (double)this.numTransformationsInSearchSpace * 100d;
  StringBuilder sb=new StringBuilder();
  sb.append(Resources.getMessage(""String_Node_Str""));
  sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsInSearchSpace).append(""String_Node_Str"");
  sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numMaterializedTransformations);
  sb.append(""String_Node_Str"").append(SWTUtil.getPrettyString(materializedPercentage)).append(""String_Node_Str"");
  sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsPruned);
  sb.append(""String_Node_Str"").append(SWTUtil.getPrettyString(prunedPercentage)).append(""String_Node_Str"");
  sb.append(Resources.getMessage(""String_Node_Str"")).append(SWTUtil.getPrettyString(this.executionTime)).append(""String_Node_Str"");
  if (this.numTransformationsAnonymous != 0 || this.numTransformationsNotAnonymous != 0 || this.numTransformationsProbablyAnonymous != 0 || this.numTransformationsProbablyNotAnonymous != 0 || this.numTransformationsAnonymityUnknown != 0 || this.numTransformationsInfolossAvailable != 0) {
    sb.append(Resources.getMessage(""String_Node_Str""));
    if (this.numTransformationsAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsAnonymous);
    }
    if (this.numTransformationsNotAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsNotAnonymous);
    }
    if (this.numTransformationsProbablyAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsProbablyAnonymous);
    }
    if (this.numTransformationsProbablyNotAnonymous != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsProbablyNotAnonymous);
    }
    if (this.numTransformationsAnonymityUnknown != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsAnonymityUnknown);
    }
    if (this.numTransformationsInfolossAvailable != 0) {
      sb.append(Resources.getMessage(""String_Node_Str"")).append(this.numTransformationsInfolossAvailable);
    }
    sb.append(""String_Node_Str"");
  }
  if (this.optimum != null) {
    sb.append(Resources.getMessage(""String_Node_Str"")).append(Resources.getMessage(""String_Node_Str"")).append(SWTUtil.getPrettyString(!this.heuristic)).append(Resources.getMessage(""String_Node_Str"")).append(Arrays.toString(this.optimum.getTransformation()));
    sb.append(Resources.getMessage(""String_Node_Str"")).append(this.optimum.getHighestScore().toString());
    for (    QualityMetadata<?> metadata : this.optimum.getHighestScore().getMetadata()) {
      sb.append(""String_Node_Str"").append(metadata.getParameter()).append(""String_Node_Str"").append(SWTUtil.getPrettyString(metadata.getValue()));
    }
  }
  return sb.toString();
}",0.9998385273696108
107910,"@Override public int compare(int arg0,int arg1){
  checkInterrupt();
  Integer order1=order.get(array[arg0]);
  Integer order2=order.get(array[arg1]);
  if (order1 == null || order2 == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    return order1.compareTo(order2);
  }
}","@Override public int compare(int arg0,int arg1){
  checkInterrupt();
  Integer order1=order.get(array[arg0]);
  Integer order2=order.get(array[arg1]);
  if (order1 == null || order2 == null) {
    String message=""String_Node_Str"";
    message+=order1 == null ? ""String_Node_Str"" + array[arg0] + ""String_Node_Str"" : ""String_Node_Str"";
    message+=order2 == null ? ""String_Node_Str"" + array[arg1] + ""String_Node_Str"" : ""String_Node_Str"";
    throw new RuntimeException(message);
  }
 else {
    return order1.compareTo(order2);
  }
}",0.6771084337349398
107911,"/** 
 * Returns an ordered list of the distinct set of data items from the given column. This method assumes that the order of string data items can (and should) be derived from the provided hierarchy
 * @param column The column
 * @param hierarchy The hierarchy, may be null
 * @return
 */
public String[] getDistinctValuesOrdered(int column,String[][] hierarchy){
  interrupt.value=false;
  final String[] list=getDistinctValues(column);
  final String attribute=handle.getAttributeName(column);
  final DataType<?> datatype=handle.getDataType(attribute);
  final int level=handle.getGeneralization(attribute);
  if (hierarchy == null || level == 0) {
    sort(list,datatype);
  }
 else {
    final Map<String,Integer> order=new HashMap<String,Integer>();
    int max=0;
    Set<String> baseSet=new HashSet<String>();
    DataType<?> baseType=handle.getBaseDataType(attribute);
    for (int i=0; i < hierarchy.length; i++) {
      String element=hierarchy[i][0];
      checkInterrupt();
      if (baseType.isValid(element))       baseSet.add(element);
    }
    String[] baseArray=baseSet.toArray(new String[baseSet.size()]);
    sort(baseArray,handle.getBaseDataType(attribute));
    Map<String,Integer> baseOrder=new HashMap<String,Integer>();
    for (int i=0; i < baseArray.length; i++) {
      checkInterrupt();
      baseOrder.put(baseArray[i],i);
    }
    int lower=handle.isOptimized() ? 1 : level;
    int upper=handle.isOptimized() ? hierarchy[0].length : level + 1;
    for (int i=0; i < hierarchy.length; i++) {
      checkInterrupt();
      for (int j=lower; j < upper; j++) {
        if (!order.containsKey(hierarchy[i][j])) {
          Integer position=baseOrder.get(hierarchy[i][0]);
          if (position != null) {
            order.put(hierarchy[i][j],position);
            max=Math.max(position,max) + 1;
          }
        }
      }
    }
    order.put(DataType.ANY_VALUE,max);
    sort(list,order);
  }
  return list;
}","/** 
 * Returns an ordered list of the distinct set of data items from the given column. This method assumes that the order of string data items can (and should) be derived from the provided hierarchy
 * @param column The column
 * @param hierarchy The hierarchy, may be null
 * @return
 */
public String[] getDistinctValuesOrdered(int column,String[][] hierarchy){
  interrupt.value=false;
  final String[] list=getDistinctValues(column);
  final String attribute=handle.getAttributeName(column);
  final DataType<?> datatype=handle.getDataType(attribute);
  final int level=handle.getGeneralization(attribute);
  if (hierarchy == null || level == 0) {
    sort(list,datatype);
  }
 else {
    final Map<String,Integer> order=new HashMap<String,Integer>();
    int max=0;
    Set<String> baseSet=new HashSet<String>();
    DataType<?> baseType=handle.getBaseDataType(attribute);
    for (int i=0; i < hierarchy.length; i++) {
      String element=hierarchy[i][0];
      checkInterrupt();
      if (baseType.isValid(element))       baseSet.add(element);
    }
    String[] baseArray=baseSet.toArray(new String[baseSet.size()]);
    sort(baseArray,handle.getBaseDataType(attribute));
    Map<String,Integer> baseOrder=new HashMap<String,Integer>();
    for (int i=0; i < baseArray.length; i++) {
      checkInterrupt();
      baseOrder.put(baseArray[i],i);
    }
    int lower=handle.isOptimized() ? 0 : level;
    int upper=handle.isOptimized() ? hierarchy[0].length : level + 1;
    for (int i=0; i < hierarchy.length; i++) {
      checkInterrupt();
      for (int j=lower; j < upper; j++) {
        if (!order.containsKey(hierarchy[i][j])) {
          Integer position=baseOrder.get(hierarchy[i][0]);
          if (position != null) {
            order.put(hierarchy[i][j],position);
            max=Math.max(position,max) + 1;
          }
        }
      }
    }
    order.put(DataType.ANY_VALUE,max);
    sort(list,order);
  }
  return list;
}",0.9994863893168978
107912,"/** 
 * Orders the given array by the given sort order.
 * @param array
 * @param order
 */
private void sort(final String[] array,final Map<String,Integer> order){
  GenericSorting.mergeSort(0,array.length,new IntComparator(){
    @Override public int compare(    int arg0,    int arg1){
      checkInterrupt();
      Integer order1=order.get(array[arg0]);
      Integer order2=order.get(array[arg1]);
      if (order1 == null || order2 == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        return order1.compareTo(order2);
      }
    }
  }
,new Swapper(){
    @Override public void swap(    int arg0,    int arg1){
      String temp=array[arg0];
      array[arg0]=array[arg1];
      array[arg1]=temp;
    }
  }
);
}","/** 
 * Orders the given array by the given sort order.
 * @param array
 * @param order
 */
private void sort(final String[] array,final Map<String,Integer> order){
  GenericSorting.mergeSort(0,array.length,new IntComparator(){
    @Override public int compare(    int arg0,    int arg1){
      checkInterrupt();
      Integer order1=order.get(array[arg0]);
      Integer order2=order.get(array[arg1]);
      if (order1 == null || order2 == null) {
        String message=""String_Node_Str"";
        message+=order1 == null ? ""String_Node_Str"" + array[arg0] + ""String_Node_Str"" : ""String_Node_Str"";
        message+=order2 == null ? ""String_Node_Str"" + array[arg1] + ""String_Node_Str"" : ""String_Node_Str"";
        throw new RuntimeException(message);
      }
 else {
        return order1.compareTo(order2);
      }
    }
  }
,new Swapper(){
    @Override public void swap(    int arg0,    int arg1){
      String temp=array[arg0];
      array[arg0]=array[arg1];
      array[arg1]=temp;
    }
  }
);
}",0.8403648802736602
107913,"/** 
 * Materializes any non-materialized predecessors and successors
 */
public void expand(ARXNode center){
  if (this.isComplete()) {
    return;
  }
  int[] indices=center.getTransformation();
  Transformation transformation=solutions.getTransformation(indices);
  LongArrayList neighbors=transformation.getPredecessors();
  LongArrayList successors=transformation.getSuccessors();
  neighbors.addAllOfFromTo(successors,0,successors.size() - 1);
  Map<String,Integer> headermap=null;
  LongObjectOpenHashMap<ARXNode> map=new LongObjectOpenHashMap<ARXNode>();
  Set<Long> missing=new HashSet<Long>();
  for (int i=0; i < neighbors.size(); i++) {
    missing.add(neighbors.getQuick(i));
  }
  for (  ARXNode[] level : this.levels) {
    for (    ARXNode node : level) {
      headermap=headermap != null ? headermap : node.headermap;
      Long id=solutions.getTransformation(node.getTransformation()).getIdentifier();
      map.put(id,node);
      missing.remove(id);
    }
  }
  Map<Integer,List<ARXNode>> levels=new HashMap<Integer,List<ARXNode>>();
  for (  long id : missing) {
    transformation=solutions.getTransformation(id);
    ARXNode node=new ARXNode(this,solutions,transformation,headermap);
    map.put(id,node);
    if (!levels.containsKey(transformation.getLevel())) {
      levels.put(transformation.getLevel(),new ArrayList<ARXNode>());
    }
    levels.get(transformation.getLevel()).add(node);
  }
  for (  int level : levels.keySet()) {
    List<ARXNode> nodes=levels.get(level);
    Collections.sort(nodes,new Comparator<ARXNode>(){
      public int compare(      ARXNode o1,      ARXNode o2){
        return compareLexicographically(o1,o2);
      }
    }
);
    List<ARXNode> list=new ArrayList<ARXNode>();
    int index=0;
    for (    ARXNode node : this.levels[level]) {
      while (index < nodes.size() && compareLexicographically(nodes.get(index),node) < 0) {
        list.add(nodes.get(index++));
      }
      list.add(node);
    }
    while (index < nodes.size()) {
      list.add(nodes.get(index++));
    }
    this.levels[level]=list.toArray(new ARXNode[list.size()]);
  }
  for (  long id : missing) {
    this.createExpandedRelationships(solutions,map,id);
  }
  this.estimateInformationLoss();
}","/** 
 * Materializes any non-materialized predecessors and successors
 */
public void expand(ARXNode center){
  int[] indices=center.getTransformation();
  Transformation transformation=solutions.getTransformation(indices);
  LongArrayList neighbors=transformation.getPredecessors();
  LongArrayList successors=transformation.getSuccessors();
  neighbors.addAllOfFromTo(successors,0,successors.size() - 1);
  Map<String,Integer> headermap=null;
  LongObjectOpenHashMap<ARXNode> map=new LongObjectOpenHashMap<ARXNode>();
  Set<Long> missing=new HashSet<Long>();
  for (int i=0; i < neighbors.size(); i++) {
    missing.add(neighbors.getQuick(i));
  }
  for (  ARXNode[] level : this.levels) {
    for (    ARXNode node : level) {
      headermap=headermap != null ? headermap : node.headermap;
      Long id=solutions.getTransformation(node.getTransformation()).getIdentifier();
      map.put(id,node);
      missing.remove(id);
    }
  }
  Map<Integer,List<ARXNode>> levels=new HashMap<Integer,List<ARXNode>>();
  for (  long id : missing) {
    transformation=solutions.getTransformation(id);
    ARXNode node=new ARXNode(this,solutions,transformation,headermap);
    map.put(id,node);
    if (!levels.containsKey(transformation.getLevel())) {
      levels.put(transformation.getLevel(),new ArrayList<ARXNode>());
    }
    levels.get(transformation.getLevel()).add(node);
  }
  for (  int level : levels.keySet()) {
    List<ARXNode> nodes=levels.get(level);
    Collections.sort(nodes,new Comparator<ARXNode>(){
      public int compare(      ARXNode o1,      ARXNode o2){
        return compareLexicographically(o1,o2);
      }
    }
);
    List<ARXNode> list=new ArrayList<ARXNode>();
    int index=0;
    for (    ARXNode node : this.levels[level]) {
      while (index < nodes.size() && compareLexicographically(nodes.get(index),node) < 0) {
        list.add(nodes.get(index++));
      }
      list.add(node);
    }
    while (index < nodes.size()) {
      list.add(nodes.get(index++));
    }
    this.levels[level]=list.toArray(new ARXNode[list.size()]);
  }
  for (  long id : missing) {
    this.createExpandedRelationships(solutions,map,id);
  }
  if (!missing.isEmpty()) {
    this.estimateInformationLoss();
  }
}",0.9827392961219458
107914,"/** 
 * Clones this config and projects everything onto the given subset.<br> - All privacy models will be cloned<br> - Subsets in d-presence will be projected accordingly<br> - Utility measures will be cloned<br> - Replaces estimated k-map with according k-anonymity<br>
 * @param gsFactor 
 * @return
 */
protected ARXConfiguration getInstanceForLocalRecoding(RowSet rowset,double gsFactor){
  for (  PrivacyCriterion criterion : this.getPrivacyModels()) {
    if (!criterion.isLocalRecodingSupported()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  DataSubset subset=this.getSubset();
  if (subset != null) {
    subset=subset.getSubsetInstance(rowset);
  }
 else {
    subset=DataSubset.create(rowset.length(),rowset);
  }
  boolean subsetAdded=false;
  HashSet<PrivacyCriterion> criteria=new HashSet<PrivacyCriterion>();
  for (  PrivacyCriterion criterion : this.getPrivacyModels()) {
    PrivacyCriterion clone=criterion.clone(subset);
    subsetAdded|=criterion.isSubsetAvailable();
    if (clone instanceof KAnonymity) {
      Iterator<PrivacyCriterion> iter=criteria.iterator();
      while (iter.hasNext()) {
        PrivacyCriterion other=iter.next();
        if (other instanceof KAnonymity) {
          if (((KAnonymity)other).getK() <= ((KAnonymity)clone).getK()) {
            iter.remove();
          }
 else {
            clone=null;
          }
        }
      }
      if (clone != null) {
        criteria.add(clone);
      }
    }
 else {
      criteria.add(clone);
    }
  }
  if (!subsetAdded) {
    criteria.add(new Inclusion(subset));
  }
  ARXConfiguration result=this.clone();
  result.aCriteria=null;
  result.criteria=criteria;
  MetricConfiguration utilityConfig=result.getQualityModel().getConfiguration();
  utilityConfig.setGsFactor(gsFactor);
  result.metric=result.getQualityModel().getDescription().createInstance(utilityConfig);
  return result;
}","/** 
 * Clones this config and projects everything onto the given subset.<br> - All privacy models will be cloned<br> - Subsets in d-presence will be projected accordingly<br> - Utility measures will be cloned<br> - Replaces estimated k-map with according k-anonymity<br>
 * @param gsFactor 
 * @return
 */
protected ARXConfiguration getInstanceForLocalRecoding(RowSet rowset,double gsFactor){
  for (  PrivacyCriterion criterion : this.getPrivacyModels()) {
    if (!criterion.isLocalRecodingSupported()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  DataSubset subset=this.getSubset();
  if (subset != null) {
    subset=subset.getSubsetInstance(rowset);
  }
  HashSet<PrivacyCriterion> criteria=new HashSet<PrivacyCriterion>();
  for (  PrivacyCriterion criterion : this.getPrivacyModels()) {
    PrivacyCriterion clone=criterion.clone(subset);
    if (clone instanceof KAnonymity) {
      Iterator<PrivacyCriterion> iter=criteria.iterator();
      while (iter.hasNext()) {
        PrivacyCriterion other=iter.next();
        if (other instanceof KAnonymity) {
          if (((KAnonymity)other).getK() <= ((KAnonymity)clone).getK()) {
            iter.remove();
          }
 else {
            clone=null;
          }
        }
      }
      if (clone != null) {
        criteria.add(clone);
      }
    }
 else {
      criteria.add(clone);
    }
  }
  ARXConfiguration result=this.clone();
  result.aCriteria=null;
  result.criteria=criteria;
  MetricConfiguration utilityConfig=result.getQualityModel().getConfiguration();
  utilityConfig.setGsFactor(gsFactor);
  result.metric=result.getQualityModel().getDescription().createInstance(utilityConfig);
  return result;
}",0.9418282548476454
107915,"/** 
 * @param rowIndex
 */
public void add(int rowIndex){
  int offset=rowIndex >> ADDRESS_BITS_PER_UNIT;
  long temp=array[offset];
  this.array[offset]|=1L << (rowIndex & BIT_INDEX_MASK);
  this.size+=array[offset] != temp ? 1 : 0;
}","/** 
 * Sets a bit
 * @param rowIndex
 */
public void add(int rowIndex){
  int offset=rowIndex >> ADDRESS_BITS_PER_UNIT;
  long temp=array[offset];
  this.array[offset]|=1L << (rowIndex & BIT_INDEX_MASK);
  this.size+=array[offset] != temp ? 1 : 0;
}",0.97119341563786
107916,"/** 
 * @param rowIndex
 * @return
 */
public boolean contains(int rowIndex){
  return ((array[rowIndex >> ADDRESS_BITS_PER_UNIT] & (1L << (rowIndex & BIT_INDEX_MASK))) != 0);
}","/** 
 * Checks whether the bit is set
 * @param rowIndex
 * @return
 */
public boolean contains(int rowIndex){
  return ((array[rowIndex >> ADDRESS_BITS_PER_UNIT] & (1L << (rowIndex & BIT_INDEX_MASK))) != 0);
}",0.9147286821705426
107917,"/** 
 * @return
 */
public int size(){
  return this.size;
}","/** 
 * Returns the number of bits set
 * @return
 */
public int size(){
  return this.size;
}",0.7792207792207793
107918,"/** 
 * @param rowIndex1
 * @param rowIndex2
 */
public void swap(int rowIndex1,int rowIndex2){
  final boolean temp1=contains(rowIndex1);
  final boolean temp2=contains(rowIndex2);
  if (temp2) {
    add(rowIndex1);
  }
 else {
    remove(rowIndex1);
  }
  if (temp1) {
    add(rowIndex2);
  }
 else {
    remove(rowIndex2);
  }
}","/** 
 * Swaps two bits
 * @param rowIndex1
 * @param rowIndex2
 */
public void swap(int rowIndex1,int rowIndex2){
  final boolean temp1=contains(rowIndex1);
  final boolean temp2=contains(rowIndex2);
  if (temp2) {
    add(rowIndex1);
  }
 else {
    remove(rowIndex1);
  }
  if (temp1) {
    add(rowIndex2);
  }
 else {
    remove(rowIndex2);
  }
}",0.973529411764706
107919,"/** 
 * @param length
 */
private RowSet(int length){
  this.length=length;
  int chunks=(int)(Math.ceil((double)this.length / 64d));
  this.array=new long[chunks];
}","/** 
 * Creates a new instance
 * @param length
 */
private RowSet(int length){
  this.length=length;
  int chunks=(int)(Math.ceil((double)this.length / 64d));
  this.array=new long[chunks];
}",0.9273743016759776
107920,"/** 
 * @return
 */
public int length(){
  return this.length;
}","/** 
 * Returns the number of available bits
 * @return
 */
public int length(){
  return this.length;
}",0.7619047619047619
107921,"/** 
 * @param rowIndex
 */
public void remove(int rowIndex){
  int offset=rowIndex >> ADDRESS_BITS_PER_UNIT;
  long temp=array[offset];
  this.array[offset]&=~(1L << (rowIndex & BIT_INDEX_MASK));
  this.size-=array[offset] != temp ? 1 : 0;
}","/** 
 * Unsets a bit
 * @param rowIndex
 */
public void remove(int rowIndex){
  int offset=rowIndex >> ADDRESS_BITS_PER_UNIT;
  long temp=array[offset];
  this.array[offset]&=~(1L << (rowIndex & BIT_INDEX_MASK));
  this.size-=array[offset] != temp ? 1 : 0;
}",0.968
107922,"/** 
 * Adds a privacy model to the configuration.
 * @param c
 * @return
 */
public ARXConfiguration addPrivacyModel(PrivacyCriterion c){
  checkArgument(c);
  if ((c instanceof DPresence) && this.isPrivacyModelSpecified(DPresence.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((c instanceof KMap) && this.isPrivacyModelSpecified(KMap.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((c instanceof KAnonymity) && this.isPrivacyModelSpecified(KAnonymity.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((c instanceof EDDifferentialPrivacy) && this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (c.isSubsetAvailable()) {
    List<int[]> subsets=new ArrayList<int[]>();
    subsets.add(c.getDataSubset().getArray());
    for (    PrivacyCriterion other : this.getPrivacyModels()) {
      if (other.isSubsetAvailable()) {
        subsets.add(other.getDataSubset().getArray());
      }
    }
    for (int i=0; i < subsets.size() - 1; i++) {
      if (!Arrays.equals(subsets.get(i),subsets.get(i + 1))) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  criteria.add(c);
  if (this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    for (    PrivacyCriterion other : this.getPrivacyModels()) {
      if (other != c && other.isSubsetAvailable()) {
        criteria.remove(c);
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  return this;
}","/** 
 * Adds a privacy model to the configuration.
 * @param c
 * @return
 */
public ARXConfiguration addPrivacyModel(PrivacyCriterion c){
  checkArgument(c);
  if ((c instanceof DPresence) && this.isPrivacyModelSpecified(DPresence.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((c instanceof KMap) && this.isPrivacyModelSpecified(KMap.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((c instanceof KAnonymity) && this.isPrivacyModelSpecified(KAnonymity.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((c instanceof EDDifferentialPrivacy) && this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (c.isSubsetAvailable()) {
    List<int[]> subsets=new ArrayList<int[]>();
    subsets.add(c.getDataSubset().getArray());
    for (    PrivacyCriterion other : this.getPrivacyModels()) {
      if (other.isSubsetAvailable()) {
        subsets.add(other.getDataSubset().getArray());
      }
    }
    for (int i=0; i < subsets.size() - 1; i++) {
      if (!Arrays.equals(subsets.get(i),subsets.get(i + 1))) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  criteria.add(c);
  if (this.isPrivacyModelSpecified(EDDifferentialPrivacy.class)) {
    for (    PrivacyCriterion other : this.getPrivacyModels()) {
      if (!(other instanceof EDDifferentialPrivacy) && other.isSubsetAvailable()) {
        criteria.remove(c);
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  return this;
}",0.98424943747991
107923,"/** 
 * This will return the normalized numer of aggregated values in range [1/#distinct-values, 1].
 * @param distribution
 * @return
 */
public <T>double getInformationLoss(Distribution distribution){
  double result=0d;
  int[] buckets=distribution.getBuckets();
  for (int i=0; i < buckets.length; i+=2) {
    result+=buckets[i] != -1 ? 1 : 0;
  }
  return result / (double)hierarchy.length;
}","/** 
 * This will return the normalized numer of aggregated values in range [1/#distinct-values, 1].
 * @param distribution
 * @return
 */
public <T>double getInformationLoss(Distribution distribution){
  double result=0d;
  int[] buckets=distribution.getBuckets();
  for (int i=0; i < buckets.length; i+=2) {
    result+=buckets[i] != -1 ? 1 : 0;
  }
  return result / (double)dictionary.length;
}",0.978616352201258
107924,"/** 
 * Creates the content of   {@link #compositeLocal}This adds a file chooser and an appropriate combo to select files. Selecting a file from the combo will trigger a read of the tables. If everything is fine, the tables from the database will be read.
 * @see {@link #readTables()}
 */
private void createCompositeLocal(){
  compositeLocal=new Composite(compositeSwap,SWT.NONE);
  compositeLocal.setLayout(new GridLayout(3,false));
  lblLocation=new Label(compositeLocal,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblLocation.setText(Resources.getMessage(""String_Node_Str""));
  comboLocation=new Combo(compositeLocal,SWT.READ_ONLY);
  comboLocation.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  comboLocation.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setPageComplete(false);
      setErrorMessage(null);
      connect();
      readTables();
    }
  }
);
  btnChoose=new Button(compositeLocal,SWT.NONE);
  btnChoose.setText(Resources.getMessage(""String_Node_Str""));
  btnChoose.addSelectionListener(new SelectionAdapter(){
    /** 
 * Opens a file selection dialog for ""*.db"" files If a valid file was selected, it is added to   {@link #comboLocation} when it wasn't already there. It is thenpreselected within  {@link #comboLocation}.
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      final String path=wizardImport.getController().actionShowOpenFileDialog(getShell(),""String_Node_Str"");
      if (path == null) {
        return;
      }
      if (comboLocation.indexOf(path) == -1) {
        comboLocation.add(path,0);
      }
      comboLocation.select(comboLocation.indexOf(path));
      comboLocation.notifyListeners(SWT.Selection,null);
    }
  }
);
}","/** 
 * Creates the content of   {@link #compositeLocal}This adds a file chooser and an appropriate combo to select files. Selecting a file from the combo will trigger a read of the tables. If everything is fine, the tables from the database will be read.
 * @see {@link #readTables()}
 */
private void createCompositeLocal(){
  compositeLocal=new Composite(compositeSwap,SWT.NONE);
  compositeLocal.setLayout(new GridLayout(3,false));
  lblLocation=new Label(compositeLocal,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblLocation.setText(Resources.getMessage(""String_Node_Str""));
  comboLocation=new Combo(compositeLocal,SWT.READ_ONLY);
  comboLocation.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  comboLocation.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setErrorMessage(null);
      connect();
      boolean ok=readTables();
      setPageComplete(ok);
      if (ok) {
        setMessage(Resources.getMessage(""String_Node_Str""),INFORMATION);
      }
    }
  }
);
  btnChoose=new Button(compositeLocal,SWT.NONE);
  btnChoose.setText(Resources.getMessage(""String_Node_Str""));
  btnChoose.addSelectionListener(new SelectionAdapter(){
    /** 
 * Opens a file selection dialog for ""*.db"" files If a valid file was selected, it is added to   {@link #comboLocation} when it wasn't already there. It is thenpreselected within  {@link #comboLocation}.
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      final String path=wizardImport.getController().actionShowOpenFileDialog(getShell(),""String_Node_Str"");
      if (path == null) {
        return;
      }
      if (comboLocation.indexOf(path) == -1) {
        comboLocation.add(path,0);
      }
      comboLocation.select(comboLocation.indexOf(path));
      comboLocation.notifyListeners(SWT.Selection,null);
    }
  }
);
}",0.9387105332979572
107925,"/** 
 * Creates a new instance of this page and sets its title and description.
 * @param wizardImport Reference to wizard containing this page
 */
public ImportWizardPageTable(ImportWizard wizardImport){
  super(""String_Node_Str"");
  this.wizardImport=wizardImport;
  setTitle(Resources.getMessage(""String_Node_Str""));
  setDescription(Resources.getMessage(""String_Node_Str""));
}","/** 
 * Creates a new instance of this page and sets its title and description.
 * @param wizardImport Reference to wizard containing this page
 */
public ImportWizardPageTable(ImportWizard wizardImport){
  super(""String_Node_Str"");
  this.wizardImport=wizardImport;
  this.setTitle(Resources.getMessage(""String_Node_Str""));
  this.setDescription(Resources.getMessage(""String_Node_Str""));
}",0.987012987012987
107926,"/** 
 * Reads in the preview data for currently selected table If this can be performed successful, the preview data will be made available for the following pages by   {@link ImportWizardModel#setPreviewData(List)}. Otherwise an appropriate error message is set.
 */
protected void readPreview(){
  String selectedTable=wizardImport.getData().getSelectedJdbcTable();
  List<String[]> previewData=new ArrayList<String[]>();
  Connection connection=wizardImport.getData().getJdbcConnection();
  Statement statement=null;
  ResultSet rs=null;
  try {
    statement=connection.createStatement();
    statement.setMaxRows(ImportWizardModel.PREVIEW_MAX_LINES);
    statement.execute(""String_Node_Str"" + selectedTable);
    rs=statement.getResultSet();
    while (rs.next()) {
      String[] previewRow=new String[rs.getMetaData().getColumnCount()];
      for (int j=0; j < previewRow.length; j++) {
        previewRow[j]=IOUtil.trim(rs.getString(j + 1));
      }
      previewData.add(previewRow);
    }
  }
 catch (  SQLException e) {
    setErrorMessage(Resources.getMessage(""String_Node_Str""));
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
    }
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  wizardImport.getData().setPreviewData(previewData);
}","/** 
 * Reads in the preview data for currently selected table If this can be performed successful, the preview data will be made available for the following pages by   {@link ImportWizardModel#setPreviewData(List)}. Otherwise an appropriate error message is set.
 */
private boolean readPreview(){
  String selectedTable=wizardImport.getData().getSelectedJdbcTable();
  Connection connection=wizardImport.getData().getJdbcConnection();
  Statement statement=null;
  ResultSet rs=null;
  try {
    statement=connection.createStatement();
    statement.setMaxRows(ImportWizardModel.PREVIEW_MAX_LINES);
    statement.execute(""String_Node_Str"" + selectedTable);
    rs=statement.getResultSet();
    List<String[]> previewData=new ArrayList<String[]>();
    while (rs.next()) {
      String[] previewRow=new String[rs.getMetaData().getColumnCount()];
      for (int j=0; j < previewRow.length; j++) {
        previewRow[j]=IOUtil.trim(rs.getString(j + 1));
      }
      previewData.add(previewRow);
    }
    wizardImport.getData().setPreviewData(previewData);
    return true;
  }
 catch (  SQLException e) {
    setErrorMessage(Resources.getMessage(""String_Node_Str""));
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
    }
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  wizardImport.getData().setPreviewData(new ArrayList<String[]>());
  return false;
}",0.9084604715672676
107927,"/** 
 * Reads in the columns and preview data for selected table
 */
@Override public void selectionChanged(SelectionChangedEvent arg0){
  int index=table.getSelectionIndex();
  String selectedTable=wizardImport.getData().getJdbcTables().get(index);
  wizardImport.getData().setSelectedJdbcTable(selectedTable);
  readColumns();
  readPreview();
  setPageComplete(true);
}","/** 
 * Reads in the columns and preview data for selected table
 */
@Override public void selectionChanged(SelectionChangedEvent arg0){
  int index=table.getSelectionIndex();
  String selectedTable=wizardImport.getData().getJdbcTables().get(index);
  wizardImport.getData().setSelectedJdbcTable(selectedTable);
  readColumns();
  setPageComplete(readPreview());
}",0.9347826086956522
107928,"/** 
 * Returns number of rows for table If the number of rows couldn't be determined, three question marks are returned.
 */
@Override public String getText(Object element){
  long rows=getNumberOfRows((String)element);
  if (rows != -1) {
    return ""String_Node_Str"" + humanReadableRowCount(rows);
  }
 else {
    return ""String_Node_Str"";
  }
}","/** 
 * Returns number of rows for table If the number of rows couldn't be determined, three question marks are returned.
 */
@Override public String getText(Object element){
  long rows=getNumberOfRows((String)element);
  if (rows != -1) {
    return ""String_Node_Str"" + getHumanReadableCount(rows);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9885057471264368
107929,"/** 
 * Gets the number of rows for given table This uses the JDBC connection   {@link ImportWizardModel#getJdbcConnection()} to determine the number ofrows for given table.
 * @param table Table number of rows should be returned for
 * @return Number of rows for given table, -1 in case of error
 */
protected long getNumberOfRows(String table){
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=wizardImport.getData().getJdbcConnection().createStatement();
    statement.execute(""String_Node_Str"" + table);
    resultSet=statement.getResultSet();
    if (resultSet.next()) {
      return resultSet.getLong(1);
    }
  }
 catch (  SQLException e) {
    setErrorMessage(Resources.getMessage(""String_Node_Str""));
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
    }
 catch (    SQLException e) {
    }
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return -1L;
}","/** 
 * Gets the number of rows for given table This uses the JDBC connection   {@link ImportWizardModel#getJdbcConnection()} to determine the number ofrows for given table.
 * @param table Table number of rows should be returned for
 * @return Number of rows for given table, -1 in case of error
 */
private long getNumberOfRows(String table){
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=wizardImport.getData().getJdbcConnection().createStatement();
    statement.execute(""String_Node_Str"" + table);
    resultSet=statement.getResultSet();
    if (resultSet.next()) {
      return resultSet.getLong(1);
    }
  }
 catch (  SQLException e) {
    setErrorMessage(Resources.getMessage(""String_Node_Str""));
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
    }
 catch (    SQLException e) {
    }
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return -1L;
}",0.9940535183349852
107930,"/** 
 * Gets the number of columns for given table This uses the JDBC connection   {@link ImportWizardModel#getJdbcConnection()} to determine the number ofcolumns for given table.
 * @param table Table number of rows should be returned for
 * @return Number of rows for given table, -1 in case of error
 */
protected int getNumberOfColumns(String table){
  ResultSet rs=null;
  int i=0;
  try {
    Connection connection=wizardImport.getData().getJdbcConnection();
    rs=connection.getMetaData().getColumns(null,null,table,null);
    while (rs.next()) {
      i++;
    }
    return i;
  }
 catch (  SQLException e) {
    setErrorMessage(Resources.getMessage(""String_Node_Str""));
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return -1;
}","/** 
 * Gets the number of columns for given table This uses the JDBC connection   {@link ImportWizardModel#getJdbcConnection()} to determine the number ofcolumns for given table.
 * @param table Table number of rows should be returned for
 * @return Number of rows for given table, -1 in case of error
 */
private int getNumberOfColumns(String table){
  ResultSet rs=null;
  int i=0;
  try {
    Connection connection=wizardImport.getData().getJdbcConnection();
    rs=connection.getMetaData().getColumns(null,null,table,null);
    while (rs.next()) {
      i++;
    }
    return i;
  }
 catch (  SQLException e) {
    setErrorMessage(Resources.getMessage(""String_Node_Str""));
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return -1;
}",0.9926470588235294
107931,"/** 
 * Creates the design of this page along with the appropriate listeners.
 * @param parent
 */
public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  setControl(container);
  container.setLayout(new GridLayout(1,false));
  tableViewer=SWTUtil.createTableViewer(container,SWT.BORDER | SWT.FULL_SELECTION);
  tableViewer.setContentProvider(new ArrayContentProvider());
  ColumnViewerToolTipSupport.enableFor(tableViewer,ToolTip.NO_RECREATE);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * Reads in the columns and preview data for selected table
 */
    @Override public void selectionChanged(    SelectionChangedEvent arg0){
      int index=table.getSelectionIndex();
      String selectedTable=wizardImport.getData().getJdbcTables().get(index);
      wizardImport.getData().setSelectedJdbcTable(selectedTable);
      readColumns();
      readPreview();
      setPageComplete(true);
    }
  }
);
  table=tableViewer.getTable();
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  TableViewerColumn tableViewerColumnName=new TableViewerColumn(tableViewer,SWT.NONE);
  tableViewerColumnName.setLabelProvider(new ColumnLabelProvider(){
    /** 
 * Returns table name 
 */
    @Override public String getText(    Object element){
      return (String)element;
    }
  }
);
  TableColumn tblclmnColumnName=tableViewerColumnName.getColumn();
  tblclmnColumnName.setToolTipText(Resources.getMessage(""String_Node_Str""));
  tblclmnColumnName.setWidth(300);
  tblclmnColumnName.setText(Resources.getMessage(""String_Node_Str""));
  TableViewerColumn tableViewerColumnColumns=new TableViewerColumn(tableViewer,SWT.NONE);
  tableViewerColumnColumns.setLabelProvider(new ColumnLabelProvider(){
    /** 
 * Returns number of columns for table If the number of columns couldn't be determined, three question marks are returned.
 */
    @Override public String getText(    Object element){
      int columns=getNumberOfColumns((String)element);
      if (columns != -1) {
        return ""String_Node_Str"" + columns;
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
);
  TableColumn tblclmnColumns=tableViewerColumnColumns.getColumn();
  tblclmnColumns.setToolTipText(Resources.getMessage(""String_Node_Str""));
  tblclmnColumns.setWidth(100);
  tblclmnColumns.setText(Resources.getMessage(""String_Node_Str""));
  TableViewerColumn tableViewerColumnRows=new TableViewerColumn(tableViewer,SWT.NONE);
  tableViewerColumnRows.setLabelProvider(new ColumnLabelProvider(){
    /** 
 * Returns number of rows for table If the number of rows couldn't be determined, three question marks are returned.
 */
    @Override public String getText(    Object element){
      long rows=getNumberOfRows((String)element);
      if (rows != -1) {
        return ""String_Node_Str"" + humanReadableRowCount(rows);
      }
 else {
        return ""String_Node_Str"";
      }
    }
    /** 
 * Returns the exact number of rows as tooltip This will return the exact number of rows for tables with a row count greater than thousand, as the column itself will only show a human readable string.
 * @see #getText(Object)
 * @see #getNumberOfRows(String)
 */
    @Override public String getToolTipText(    Object element){
      long rows=getNumberOfRows((String)element);
      if (rows > 1000) {
        return ""String_Node_Str"" + rows;
      }
 else {
        return null;
      }
    }
  }
);
  TableColumn tblclmnRows=tableViewerColumnRows.getColumn();
  tblclmnRows.setToolTipText(Resources.getMessage(""String_Node_Str""));
  tblclmnRows.setWidth(100);
  tblclmnRows.setText(Resources.getMessage(""String_Node_Str""));
  setPageComplete(false);
}","/** 
 * Creates the design of this page along with the appropriate listeners.
 * @param parent
 */
public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  setControl(container);
  container.setLayout(new GridLayout(1,false));
  tableViewer=SWTUtil.createTableViewer(container,SWT.BORDER | SWT.FULL_SELECTION);
  tableViewer.setContentProvider(new ArrayContentProvider());
  ColumnViewerToolTipSupport.enableFor(tableViewer,ToolTip.NO_RECREATE);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * Reads in the columns and preview data for selected table
 */
    @Override public void selectionChanged(    SelectionChangedEvent arg0){
      int index=table.getSelectionIndex();
      String selectedTable=wizardImport.getData().getJdbcTables().get(index);
      wizardImport.getData().setSelectedJdbcTable(selectedTable);
      readColumns();
      setPageComplete(readPreview());
    }
  }
);
  table=tableViewer.getTable();
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  TableViewerColumn tableViewerColumnName=new TableViewerColumn(tableViewer,SWT.NONE);
  tableViewerColumnName.setLabelProvider(new ColumnLabelProvider(){
    /** 
 * Returns table name 
 */
    @Override public String getText(    Object element){
      return (String)element;
    }
  }
);
  TableColumn tblclmnColumnName=tableViewerColumnName.getColumn();
  tblclmnColumnName.setToolTipText(Resources.getMessage(""String_Node_Str""));
  tblclmnColumnName.setWidth(300);
  tblclmnColumnName.setText(Resources.getMessage(""String_Node_Str""));
  TableViewerColumn tableViewerColumnColumns=new TableViewerColumn(tableViewer,SWT.NONE);
  tableViewerColumnColumns.setLabelProvider(new ColumnLabelProvider(){
    /** 
 * Returns number of columns for table If the number of columns couldn't be determined, three question marks are returned.
 */
    @Override public String getText(    Object element){
      int columns=getNumberOfColumns((String)element);
      if (columns != -1) {
        return ""String_Node_Str"" + columns;
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
);
  TableColumn tblclmnColumns=tableViewerColumnColumns.getColumn();
  tblclmnColumns.setToolTipText(Resources.getMessage(""String_Node_Str""));
  tblclmnColumns.setWidth(100);
  tblclmnColumns.setText(Resources.getMessage(""String_Node_Str""));
  TableViewerColumn tableViewerColumnRows=new TableViewerColumn(tableViewer,SWT.NONE);
  tableViewerColumnRows.setLabelProvider(new ColumnLabelProvider(){
    /** 
 * Returns number of rows for table If the number of rows couldn't be determined, three question marks are returned.
 */
    @Override public String getText(    Object element){
      long rows=getNumberOfRows((String)element);
      if (rows != -1) {
        return ""String_Node_Str"" + getHumanReadableCount(rows);
      }
 else {
        return ""String_Node_Str"";
      }
    }
    /** 
 * Returns the exact number of rows as tooltip This will return the exact number of rows for tables with a row count greater than thousand, as the column itself will only show a human readable string.
 * @see #getText(Object)
 * @see #getNumberOfRows(String)
 */
    @Override public String getToolTipText(    Object element){
      long rows=getNumberOfRows((String)element);
      if (rows > 1000) {
        return ""String_Node_Str"" + rows;
      }
 else {
        return null;
      }
    }
  }
);
  TableColumn tblclmnRows=tableViewerColumnRows.getColumn();
  tblclmnRows.setToolTipText(Resources.getMessage(""String_Node_Str""));
  tblclmnRows.setWidth(100);
  tblclmnRows.setText(Resources.getMessage(""String_Node_Str""));
  setPageComplete(false);
}",0.992
107932,"@Override protected void doUpdate(final AnalysisContextClassification context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  final String[] features=context.model.getSelectedFeatures().toArray(new String[0]);
  final String[] classes=context.model.getSelectedClasses().toArray(new String[0]);
  final ARXLogisticRegressionConfiguration config=context.model.getClassificationModel().getARXLogisticRegressionConfiguration();
  if (context.model.getSelectedFeatures().isEmpty() || context.model.getSelectedClasses().isEmpty()) {
    doReset();
    return;
  }
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private List<List<Double>> values=new ArrayList<>();
    private List<Integer> numClasses=new ArrayList<>();
    private List<PrecisionRecallMatrix> matrixes=new ArrayList<>();
    private int progress=0;
    @Override public int getProgress(){
      double result=0d;
      double perBatch=100d / (double)classes.length;
      if (progress >= 1) {
        result+=(double)(progress - 1) * perBatch;
      }
      result+=(double)builder.getProgress() / 100d * perBatch;
      result=result <= 100d ? result : 100d;
      return (int)result;
    }
    @Override public void onError(){
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
        return;
      }
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      for (int i=0; i < classes.length; i++) {
        TableItem item=new TableItem(table,SWT.NONE);
        item.setText(0,classes[i]);
        item.setText(1,String.valueOf(numClasses.get(i)));
        for (int j=0; j < values.get(i).size(); j++) {
          item.setData(String.valueOf(2 + j),values.get(i).get(j));
        }
        item.setData(matrixes.get(i));
      }
      table.setFocus();
      table.select(0);
      setChartSeries(matrixes.get(0));
      root.layout();
      sash.setWeights(new int[]{2,2});
      setStatusDone();
    }
    @Override public void onInterrupt(){
      if (!isEnabled() || getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      for (      String clazz : classes) {
        StatisticsClassification result=builder.getClassificationPerformance(features,clazz,config);
        progress++;
        if (stopped) {
          break;
        }
        numClasses.add(result.getNumClasses());
        values.add(getColumnValues(result));
        matrixes.add(result.getPrecisionRecall());
      }
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}","@Override protected void doUpdate(final AnalysisContextClassification context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  final String[] features=context.model.getSelectedFeatures().toArray(new String[0]);
  final String[] classes=context.model.getSelectedClasses().toArray(new String[0]);
  final ARXLogisticRegressionConfiguration config=context.model.getClassificationModel().getARXLogisticRegressionConfiguration();
  if (context.model.getSelectedFeatures().isEmpty() || context.model.getSelectedClasses().isEmpty()) {
    doReset();
    return;
  }
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private List<List<Double>> values=new ArrayList<>();
    private List<Integer> numClasses=new ArrayList<>();
    private List<PrecisionRecallMatrix> matrixes=new ArrayList<>();
    private int progress=0;
    @Override public int getProgress(){
      double result=0d;
      double perBatch=100d / (double)classes.length;
      result+=(double)progress * perBatch;
      result+=(double)builder.getProgress() / 100d * perBatch;
      result=result <= 100d ? result : 100d;
      return (int)result;
    }
    @Override public void onError(){
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
        return;
      }
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      for (int i=0; i < classes.length; i++) {
        TableItem item=new TableItem(table,SWT.NONE);
        item.setText(0,classes[i]);
        item.setText(1,String.valueOf(numClasses.get(i)));
        for (int j=0; j < values.get(i).size(); j++) {
          item.setData(String.valueOf(2 + j),values.get(i).get(j));
        }
        item.setData(matrixes.get(i));
      }
      table.setFocus();
      table.select(0);
      setChartSeries(matrixes.get(0));
      root.layout();
      sash.setWeights(new int[]{2,2});
      setStatusDone();
    }
    @Override public void onInterrupt(){
      if (!isEnabled() || getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      for (      String clazz : classes) {
        StatisticsClassification result=builder.getClassificationPerformance(features,clazz,config);
        progress++;
        if (stopped) {
          break;
        }
        numClasses.add(result.getNumClasses());
        values.add(getColumnValues(result));
        matrixes.add(result.getPrecisionRecall());
      }
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}",0.9905159942131492
107933,"@Override public boolean isAbleToHandleMicroaggregation(){
  return false;
}","@Override public boolean isAbleToHandleMicroaggregation(){
  return true;
}",0.9536423841059604
107934,"@Override public boolean isAbleToHandleMicroaggregation(){
  return false;
}","@Override public boolean isAbleToHandleMicroaggregation(){
  return true;
}",0.9536423841059604
107935,"/** 
 * Sets the selection
 * @param selection
 */
public void setSelection(double selection){
  if (selection > 1d) {
    selection=1d;
  }
  if (selection < 0d) {
    selection=0d;
  }
  int value=(int)(MINIMUM + selection * (double)(MAXIMUM - MINIMUM));
  if (!this.slider.isDisposed())   this.slider.setSelection(value);
  if (!this.canvas.isDisposed())   this.canvas.redraw();
}","/** 
 * Sets the selection
 * @param selection
 */
public void setSelection(double selection){
  if (selection > 1d) {
    selection=1d;
  }
  if (selection < 0d) {
    selection=0d;
  }
  int value=(int)(MINIMUM + selection * (double)(MAXIMUM - MINIMUM));
  if (!this.root.isDisposed())   this.root.setRedraw(false);
  if (!this.slider.isDisposed())   this.slider.setSelection(value);
  if (!this.canvas.isDisposed())   this.canvas.redraw();
  if (!this.root.isDisposed())   this.root.setRedraw(true);
}",0.8500563697857948
107936,"/** 
 * Updates the controls
 */
private void updateControls(){
  DataDefinition definition=model.getInputDefinition();
  List<String> qis=new ArrayList<String>();
  if (definition != null) {
    Set<String> _qis=definition.getQuasiIdentifyingAttributes();
    if (this.attributes.equals(_qis)) {
      return;
    }
    DataHandle handle=model.getInputConfig().getInput().getHandle();
    for (int i=0; i < handle.getNumColumns(); i++) {
      String attr=handle.getAttributeName(i);
      if (_qis.contains(attr)) {
        qis.add(attr);
      }
    }
    attributes.clear();
    attributes.addAll(qis);
  }
  if (root.isDisposed())   return;
  root.setRedraw(false);
  if (panel != null) {
    panel.dispose();
  }
  panel=new Composite(root,SWT.NONE);
  panel.setLayoutData(GridDataFactory.swtDefaults().grab(true,true).align(SWT.FILL,SWT.CENTER).create());
  panel.setLayout(GridLayoutFactory.swtDefaults().numColumns(qis.size()).margins(0,0).equalWidth(true).create());
  List<Composite> composites=new ArrayList<Composite>();
  for (int i=0; i < qis.size(); i++) {
    Composite c=new Composite(panel,SWT.NONE);
    c.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).align(SWT.FILL,SWT.CENTER).create());
    c.setLayout(GridLayoutFactory.swtDefaults().numColumns(1).margins(2,0).create());
    composites.add(c);
  }
  for (int i=0; i < qis.size(); i++) {
    Label label=new Label(composites.get(i),SWT.CENTER);
    label.setText(qis.get(i));
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
  }
  List<Knob<Double>> knobs=new ArrayList<Knob<Double>>();
  for (int i=0; i < qis.size(); i++) {
    Knob<Double> knob=new Knob<Double>(composites.get(i),SWT.NULL,new KnobRange.Double(0d,1d));
    knob.setLayoutData(GridDataFactory.swtDefaults().grab(false,false).align(SWT.CENTER,SWT.CENTER).hint(MIN_KNOB,MIN_KNOB).create());
    knob.setDefaultColorProfile(defaultColorProfile);
    knob.setFocusedColorProfile(focusedColorProfile);
    knobs.add(knob);
  }
  for (int i=0; i < qis.size(); i++) {
    final Label label=new Label(composites.get(i),SWT.CENTER);
    label.setText(""String_Node_Str"");
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    final String attribute=qis.get(i);
    final Knob<Double> knob=knobs.get(i);
    knob.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent arg0){
        double value=knob.getValue();
        label.setText(SWTUtil.getPrettyString(value));
        label.setToolTipText(String.valueOf(value));
        try {
          double parsedValue=Double.valueOf(SWTUtil.getPrettyString(value)).doubleValue();
          if (parsedValue == 0d && value > 0d) {
            label.setText(""String_Node_Str"");
          }
          if (parsedValue == 1d && value < 1d) {
            label.setText(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
        }
        if (model != null && model.getInputConfig() != null) {
          model.getInputConfig().setAttributeWeight(attribute,value);
        }
      }
    }
);
  }
  for (int i=0; i < qis.size(); i++) {
    if (model != null && model.getInputConfig() != null) {
      knobs.get(i).setValue(model.getInputConfig().getAttributeWeight(qis.get(i)));
    }
  }
  root.setContent(panel);
  root.setMinWidth(MIN_SPACE * qis.size());
  root.setExpandHorizontal(true);
  root.setExpandVertical(true);
  root.setVisible(!qis.isEmpty());
  root.layout(true,true);
  root.setRedraw(true);
}","/** 
 * Updates the controls
 */
private void updateControls(){
  DataDefinition definition=model.getInputDefinition();
  List<String> qis=new ArrayList<String>();
  if (definition != null) {
    Set<String> _qis=definition.getQuasiIdentifyingAttributes();
    if (this.attributes.equals(_qis)) {
      return;
    }
    DataHandle handle=model.getInputConfig().getInput().getHandle();
    for (int i=0; i < handle.getNumColumns(); i++) {
      String attr=handle.getAttributeName(i);
      if (_qis.contains(attr)) {
        qis.add(attr);
      }
    }
    attributes.clear();
    attributes.addAll(qis);
  }
  if (root.isDisposed())   return;
  root.setRedraw(false);
  if (panel != null) {
    panel.dispose();
  }
  panel=new Composite(root,SWT.NONE);
  panel.setLayoutData(GridDataFactory.swtDefaults().grab(true,true).align(SWT.FILL,SWT.CENTER).create());
  panel.setLayout(GridLayoutFactory.swtDefaults().numColumns(qis.size()).margins(0,0).equalWidth(true).create());
  List<Composite> composites=new ArrayList<Composite>();
  for (int i=0; i < qis.size(); i++) {
    Composite c=new Composite(panel,SWT.NONE);
    c.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).align(SWT.FILL,SWT.CENTER).create());
    c.setLayout(GridLayoutFactory.swtDefaults().numColumns(1).margins(2,0).create());
    composites.add(c);
  }
  for (int i=0; i < qis.size(); i++) {
    Label label=new Label(composites.get(i),SWT.CENTER);
    label.setText(qis.get(i));
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
  }
  List<Knob<Double>> knobs=new ArrayList<Knob<Double>>();
  for (int i=0; i < qis.size(); i++) {
    Knob<Double> knob=new Knob<Double>(composites.get(i),SWT.NULL,new KnobRange.Double(0d,1d));
    knob.setLayoutData(GridDataFactory.swtDefaults().grab(false,false).align(SWT.CENTER,SWT.CENTER).hint(MIN_KNOB,MIN_KNOB).create());
    knob.setDefaultColorProfile(defaultColorProfile);
    knob.setFocusedColorProfile(focusedColorProfile);
    knobs.add(knob);
  }
  for (int i=0; i < qis.size(); i++) {
    final Label label=new Label(composites.get(i),SWT.CENTER);
    label.setText(""String_Node_Str"");
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    final String attribute=qis.get(i);
    final Knob<Double> knob=knobs.get(i);
    knob.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent arg0){
        double value=knob.getValue();
        label.setText(SWTUtil.getPrettyString(value));
        label.setToolTipText(String.valueOf(value));
        try {
          double parsedValue=Double.valueOf(SWTUtil.getPrettyString(value)).doubleValue();
          if (parsedValue == 0d && value > 0d) {
            label.setText(""String_Node_Str"");
          }
          if (parsedValue == 1d && value < 1d) {
            label.setText(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
        }
        if (model != null && model.getInputConfig() != null) {
          model.getInputConfig().setAttributeWeight(attribute,value);
        }
      }
    }
);
    knob.addSelectionListener(new DelayedChangeListener(100){
      @Override public void delayedEvent(){
        controller.update(new ModelEvent(ViewAttributeWeights.this,ModelPart.ATTRIBUTE_WEIGHT,model.getInputConfig().getAttributeWeight(attribute)));
      }
    }
);
  }
  for (int i=0; i < qis.size(); i++) {
    if (model != null && model.getInputConfig() != null) {
      knobs.get(i).setValue(model.getInputConfig().getAttributeWeight(qis.get(i)));
    }
  }
  root.setContent(panel);
  root.setMinWidth(MIN_SPACE * qis.size());
  root.setExpandHorizontal(true);
  root.setExpandVertical(true);
  root.setVisible(!qis.isEmpty());
  root.layout(true,true);
  root.setRedraw(true);
}",0.9625257378174332
107937,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewCodingModel(final Composite parent,final Controller controller){
  this.controller=controller;
  this.controller.addListener(ModelPart.ATTRIBUTE_TYPE,this);
  this.controller.addListener(ModelPart.MODEL,this);
  this.controller.addListener(ModelPart.INPUT,this);
  this.slider=new ComponentGSSlider(parent);
  this.slider.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      if (model != null && model.getInputConfig() != null) {
        model.getInputConfig().setSuppressionWeight(slider.getSelection());
        model.getMetricConfiguration().setGsFactor(slider.getSelection());
      }
    }
  }
);
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public ViewCodingModel(final Composite parent,final Controller controller){
  this.controller=controller;
  this.controller.addListener(ModelPart.MODEL,this);
  this.slider=new ComponentGSSlider(parent);
  this.slider.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent arg0){
      if (model != null && model.getInputConfig() != null) {
        model.getInputConfig().setSuppressionWeight(slider.getSelection());
        model.getMetricConfiguration().setGsFactor(slider.getSelection());
      }
    }
  }
);
  this.slider.addSelectionListener(new DelayedChangeListener(100){
    @Override public void delayedEvent(){
      controller.update(new ModelEvent(ViewCodingModel.this,ModelPart.GS_FACTOR,model.getInputConfig().getSuppressionWeight()));
    }
  }
);
}",0.7743526510480888
107938,"/** 
 * Implement this to update the view.
 */
protected abstract void update();","@Override public void update(final ModelEvent event){
  if (event.part == reset) {
    this.reset();
  }
 else   if (event.part == ModelPart.MODEL) {
    this.model=(Model)event.data;
    this.context.setModel(model);
    reset();
  }
 else {
    SWTUtil.enable(root);
    this.doUpdate(event.part);
  }
}",0.0363636363636363
107939,"/** 
 * Constructor.
 * @param parent
 * @param controller
 * @param target
 * @param reset
 */
protected ViewProperties(final Composite parent,final Controller controller,final ModelPart target,final ModelPart reset){
  controller.addListener(ModelPart.SELECTED_VIEW_CONFIG,this);
  controller.addListener(ModelPart.SELECTED_ATTRIBUTE,this);
  controller.addListener(ModelPart.ATTRIBUTE_TYPE,this);
  controller.addListener(ModelPart.METRIC,this);
  controller.addListener(ModelPart.MAX_OUTLIERS,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(target,this);
  if (reset != null) {
    controller.addListener(reset,this);
  }
  this.reset=reset;
  this.root=parent;
  this.controller=controller;
  this.context.setTarget(target);
}","/** 
 * Constructor.
 * @param parent
 * @param controller
 * @param target
 * @param reset
 */
protected ViewProperties(final Composite parent,final Controller controller,final ModelPart target,final ModelPart reset){
  controller.addListener(ModelPart.SELECTED_VIEW_CONFIG,this);
  controller.addListener(ModelPart.SELECTED_ATTRIBUTE,this);
  controller.addListener(ModelPart.ATTRIBUTE_TYPE,this);
  controller.addListener(ModelPart.METRIC,this);
  controller.addListener(ModelPart.ATTRIBUTE_WEIGHT,this);
  controller.addListener(ModelPart.GS_FACTOR,this);
  controller.addListener(ModelPart.MAX_OUTLIERS,this);
  controller.addListener(ModelPart.DATA_TYPE,this);
  controller.addListener(ModelPart.MODEL,this);
  controller.addListener(target,this);
  if (reset != null) {
    controller.addListener(reset,this);
  }
  this.reset=reset;
  this.root=parent;
  this.controller=controller;
  this.context.setTarget(target);
}",0.9362435381964388
107940,"/** 
 * Builds this view
 * @param parent
 * @return
 */
private Composite build(final Composite parent){
  Composite group=new Composite(parent,SWT.NONE);
  group.setLayout(SWTUtil.createGridLayout(4,false));
  final Label sLabel=new Label(group,SWT.PUSH);
  sLabel.setText(Resources.getMessage(""String_Node_Str""));
  Composite outliersBase=new Composite(group,SWT.NONE);
  GridData baseData=SWTUtil.createFillHorizontallyGridData();
  baseData.horizontalSpan=3;
  outliersBase.setLayoutData(baseData);
  outliersBase.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  labelOutliers=new Label(outliersBase,SWT.BORDER | SWT.CENTER);
  GridData d2=new GridData();
  d2.minimumWidth=LABEL_WIDTH;
  d2.widthHint=LABEL_WIDTH;
  d2.heightHint=LABEL_HEIGHT;
  labelOutliers.setLayoutData(d2);
  labelOutliers.setText(""String_Node_Str"");
  sliderOutliers=new Scale(outliersBase,SWT.HORIZONTAL);
  sliderOutliers.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  sliderOutliers.setMaximum(SWTUtil.SLIDER_MAX);
  sliderOutliers.setMinimum(0);
  sliderOutliers.setSelection(0);
  sliderOutliers.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getInputConfig().setAllowedOutliers(SWTUtil.sliderToDouble(0d,1d,sliderOutliers.getSelection()));
      labelOutliers.setText(SWTUtil.getPrettyString(model.getInputConfig().getAllowedOutliers() * 100d) + ""String_Node_Str"");
      if (model.getInputConfig().getAllowedOutliers() != 0) {
        buttonPracticalMonotonicity.setEnabled(true);
      }
 else {
        buttonPracticalMonotonicity.setSelection(false);
        buttonPracticalMonotonicity.setEnabled(false);
        model.getInputConfig().setPracticalMonotonicity(false);
      }
    }
  }
);
  final Label m2Label=new Label(group,SWT.PUSH);
  m2Label.setText(Resources.getMessage(""String_Node_Str""));
  d2=new GridData();
  d2.heightHint=LABEL_HEIGHT;
  d2.minimumHeight=LABEL_HEIGHT;
  m2Label.setLayoutData(d2);
  final GridData d82=SWTUtil.createFillHorizontallyGridData();
  d82.horizontalSpan=3;
  buttonPracticalMonotonicity=new Button(group,SWT.CHECK);
  buttonPracticalMonotonicity.setText(Resources.getMessage(""String_Node_Str""));
  buttonPracticalMonotonicity.setSelection(false);
  buttonPracticalMonotonicity.setEnabled(false);
  buttonPracticalMonotonicity.setLayoutData(d82);
  buttonPracticalMonotonicity.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getInputConfig().setPracticalMonotonicity(buttonPracticalMonotonicity.getSelection());
    }
  }
);
  final Label sLabel2=new Label(group,SWT.PUSH);
  sLabel2.setText(Resources.getMessage(""String_Node_Str""));
  precomputedVariant=new Button(group,SWT.CHECK);
  precomputedVariant.setText(Resources.getMessage(""String_Node_Str""));
  precomputedVariant.setSelection(false);
  precomputedVariant.setEnabled(false);
  precomputedVariant.setLayoutData(GridDataFactory.swtDefaults().span(1,1).create());
  precomputedVariant.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setPrecomputed(precomputedVariant.getSelection());
      if (precomputedVariant.getSelection()) {
        precomputationThreshold.setSelection(SWTUtil.doubleToSlider(0d,1d,model.getMetricConfiguration().getPrecomputationThreshold()));
        precomputationThreshold.setEnabled(true);
        labelThreshold.setText(SWTUtil.getPrettyString((model.getMetricConfiguration().getPrecomputationThreshold() * 100d)) + ""String_Node_Str"");
      }
 else {
        precomputationThreshold.setEnabled(false);
      }
    }
  }
);
  labelThreshold=new Label(group,SWT.BORDER | SWT.CENTER);
  GridData d24=new GridData();
  d24.minimumWidth=LABEL_WIDTH;
  d24.widthHint=LABEL_WIDTH;
  d24.heightHint=LABEL_HEIGHT;
  labelThreshold.setLayoutData(d24);
  labelThreshold.setText(""String_Node_Str"");
  precomputationThreshold=new Scale(group,SWT.HORIZONTAL);
  precomputationThreshold.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  precomputationThreshold.setMaximum(SWTUtil.SLIDER_MAX);
  precomputationThreshold.setMinimum(0);
  precomputationThreshold.setSelection(0);
  precomputationThreshold.setEnabled(false);
  precomputationThreshold.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setPrecomputationThreshold(SWTUtil.sliderToDouble(0d,1d,precomputationThreshold.getSelection()));
      labelThreshold.setText(SWTUtil.getPrettyString(model.getMetricConfiguration().getPrecomputationThreshold() * 100d) + ""String_Node_Str"");
    }
  }
);
  return group;
}","/** 
 * Builds this view
 * @param parent
 * @return
 */
private Composite build(final Composite parent){
  Composite group=new Composite(parent,SWT.NONE);
  group.setLayout(SWTUtil.createGridLayout(4,false));
  final Label sLabel=new Label(group,SWT.PUSH);
  sLabel.setText(Resources.getMessage(""String_Node_Str""));
  Composite outliersBase=new Composite(group,SWT.NONE);
  GridData baseData=SWTUtil.createFillHorizontallyGridData();
  baseData.horizontalSpan=3;
  outliersBase.setLayoutData(baseData);
  outliersBase.setLayout(GridLayoutFactory.swtDefaults().numColumns(2).create());
  labelOutliers=new Label(outliersBase,SWT.BORDER | SWT.CENTER);
  GridData d2=new GridData();
  d2.minimumWidth=LABEL_WIDTH;
  d2.widthHint=LABEL_WIDTH;
  d2.heightHint=LABEL_HEIGHT;
  labelOutliers.setLayoutData(d2);
  labelOutliers.setText(""String_Node_Str"");
  sliderOutliers=new Scale(outliersBase,SWT.HORIZONTAL);
  sliderOutliers.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  sliderOutliers.setMaximum(SWTUtil.SLIDER_MAX);
  sliderOutliers.setMinimum(0);
  sliderOutliers.setSelection(0);
  sliderOutliers.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getInputConfig().setAllowedOutliers(SWTUtil.sliderToDouble(0d,1d,sliderOutliers.getSelection()));
      labelOutliers.setText(SWTUtil.getPrettyString(model.getInputConfig().getAllowedOutliers() * 100d) + ""String_Node_Str"");
      if (model.getInputConfig().getAllowedOutliers() != 0) {
        buttonPracticalMonotonicity.setEnabled(true);
      }
 else {
        buttonPracticalMonotonicity.setSelection(false);
        buttonPracticalMonotonicity.setEnabled(false);
        model.getInputConfig().setPracticalMonotonicity(false);
      }
    }
  }
);
  final Label m2Label=new Label(group,SWT.PUSH);
  m2Label.setText(Resources.getMessage(""String_Node_Str""));
  d2=new GridData();
  d2.heightHint=LABEL_HEIGHT;
  d2.minimumHeight=LABEL_HEIGHT;
  m2Label.setLayoutData(d2);
  final GridData d82=SWTUtil.createFillHorizontallyGridData();
  d82.horizontalSpan=3;
  buttonPracticalMonotonicity=new Button(group,SWT.CHECK);
  buttonPracticalMonotonicity.setText(Resources.getMessage(""String_Node_Str""));
  buttonPracticalMonotonicity.setSelection(false);
  buttonPracticalMonotonicity.setEnabled(false);
  buttonPracticalMonotonicity.setLayoutData(d82);
  buttonPracticalMonotonicity.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getInputConfig().setPracticalMonotonicity(buttonPracticalMonotonicity.getSelection());
    }
  }
);
  final Label sLabel2=new Label(group,SWT.PUSH);
  sLabel2.setText(Resources.getMessage(""String_Node_Str""));
  precomputedVariant=new Button(group,SWT.CHECK);
  precomputedVariant.setText(Resources.getMessage(""String_Node_Str""));
  precomputedVariant.setSelection(false);
  precomputedVariant.setEnabled(false);
  precomputedVariant.setLayoutData(GridDataFactory.swtDefaults().span(1,1).create());
  precomputedVariant.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setPrecomputed(precomputedVariant.getSelection());
      if (precomputedVariant.getSelection()) {
        precomputationThreshold.setSelection(SWTUtil.doubleToSlider(0d,1d,model.getMetricConfiguration().getPrecomputationThreshold()));
        precomputationThreshold.setEnabled(true);
        labelThreshold.setText(SWTUtil.getPrettyString((model.getMetricConfiguration().getPrecomputationThreshold() * 100d)) + ""String_Node_Str"");
      }
 else {
        precomputationThreshold.setEnabled(false);
      }
      controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
    }
  }
);
  labelThreshold=new Label(group,SWT.BORDER | SWT.CENTER);
  GridData d24=new GridData();
  d24.minimumWidth=LABEL_WIDTH;
  d24.widthHint=LABEL_WIDTH;
  d24.heightHint=LABEL_HEIGHT;
  labelThreshold.setLayoutData(d24);
  labelThreshold.setText(""String_Node_Str"");
  precomputationThreshold=new Scale(group,SWT.HORIZONTAL);
  precomputationThreshold.setLayoutData(SWTUtil.createFillHorizontallyGridData());
  precomputationThreshold.setMaximum(SWTUtil.SLIDER_MAX);
  precomputationThreshold.setMinimum(0);
  precomputationThreshold.setSelection(0);
  precomputationThreshold.setEnabled(false);
  precomputationThreshold.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setPrecomputationThreshold(SWTUtil.sliderToDouble(0d,1d,precomputationThreshold.getSelection()));
      labelThreshold.setText(SWTUtil.getPrettyString(model.getMetricConfiguration().getPrecomputationThreshold() * 100d) + ""String_Node_Str"");
    }
  }
);
  return group;
}",0.9903895835486204
107941,"@Override public void widgetSelected(final SelectionEvent arg0){
  String selected=comboAggregate.getItem(comboAggregate.getSelectionIndex());
  for (  AggregateFunction function : model.getMetricDescription().getSupportedAggregateFunctions()) {
    if (function.toString().equals(selected)) {
      model.getMetricConfiguration().setAggregateFunction(function);
    }
  }
}","@Override public void widgetSelected(final SelectionEvent arg0){
  String selected=comboAggregate.getItem(comboAggregate.getSelectionIndex());
  for (  AggregateFunction function : model.getMetricDescription().getSupportedAggregateFunctions()) {
    if (function.toString().equals(selected)) {
      model.getMetricConfiguration().setAggregateFunction(function);
      controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
    }
  }
}",0.8894173602853745
107942,"/** 
 * Builds the component
 * @param parent
 * @return
 */
private Composite build(final Composite parent){
  final Composite mBase=new Composite(parent,SWT.NONE);
  mBase.setLayout(GridLayoutFactory.swtDefaults().numColumns(4).create());
  final Label mLabel=new Label(mBase,SWT.PUSH);
  mLabel.setText(Resources.getMessage(""String_Node_Str""));
  GridData d2=new GridData();
  d2.heightHint=LABEL_HEIGHT;
  d2.minimumHeight=LABEL_HEIGHT;
  d2.grabExcessVerticalSpace=true;
  d2.verticalAlignment=GridData.CENTER;
  mLabel.setLayoutData(d2);
  comboMetric=new Combo(mBase,SWT.READ_ONLY);
  GridData d30=SWTUtil.createFillHorizontallyGridData();
  d30.horizontalSpan=3;
  d30.verticalAlignment=GridData.CENTER;
  d30.grabExcessVerticalSpace=true;
  comboMetric.setLayoutData(d30);
  comboMetric.setItems(LABELS);
  comboMetric.select(0);
  comboMetric.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      if (comboMetric.getSelectionIndex() != -1) {
        selectMetricAction(METRICS.get(comboMetric.getSelectionIndex()));
      }
    }
  }
);
  final Label mLabel2=new Label(mBase,SWT.PUSH);
  mLabel2.setText(Resources.getMessage(""String_Node_Str""));
  GridData d22=new GridData();
  d22.heightHint=LABEL_HEIGHT;
  d22.minimumHeight=LABEL_HEIGHT;
  d22.grabExcessVerticalSpace=true;
  d22.verticalAlignment=GridData.CENTER;
  mLabel2.setLayoutData(d22);
  monotonicVariant=new Button(mBase,SWT.CHECK);
  monotonicVariant.setText(Resources.getMessage(""String_Node_Str""));
  monotonicVariant.setSelection(false);
  monotonicVariant.setEnabled(false);
  monotonicVariant.setLayoutData(GridDataFactory.swtDefaults().span(3,1).grab(false,true).align(GridData.BEGINNING,GridData.CENTER).create());
  monotonicVariant.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setMonotonic(monotonicVariant.getSelection());
    }
  }
);
  final Label mLabel4=new Label(mBase,SWT.PUSH);
  mLabel4.setText(Resources.getMessage(""String_Node_Str""));
  GridData d24=new GridData();
  d24.heightHint=LABEL_HEIGHT;
  d24.minimumHeight=LABEL_HEIGHT;
  d24.grabExcessVerticalSpace=true;
  d24.verticalAlignment=GridData.CENTER;
  mLabel4.setLayoutData(d24);
  utilityBasedMicroaggregation=new Button(mBase,SWT.CHECK);
  utilityBasedMicroaggregation.setText(Resources.getMessage(""String_Node_Str""));
  utilityBasedMicroaggregation.setSelection(false);
  utilityBasedMicroaggregation.setEnabled(false);
  utilityBasedMicroaggregation.setLayoutData(GridDataFactory.swtDefaults().span(3,1).grab(false,true).align(GridData.BEGINNING,GridData.CENTER).create());
  utilityBasedMicroaggregation.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getInputConfig().setUseUtilityBasedMicroaggregation(utilityBasedMicroaggregation.getSelection());
    }
  }
);
  final Label mLabel3=new Label(mBase,SWT.PUSH);
  mLabel3.setText(Resources.getMessage(""String_Node_Str""));
  GridData d23=new GridData();
  d23.heightHint=LABEL_HEIGHT;
  d23.minimumHeight=LABEL_HEIGHT;
  d23.grabExcessVerticalSpace=true;
  d23.verticalAlignment=GridData.CENTER;
  mLabel3.setLayoutData(d23);
  comboAggregate=new Combo(mBase,SWT.READ_ONLY);
  GridData d31=SWTUtil.createFillHorizontallyGridData();
  d31.horizontalSpan=3;
  d31.grabExcessVerticalSpace=true;
  d31.verticalAlignment=GridData.CENTER;
  comboAggregate.setLayoutData(d31);
  comboAggregate.setEnabled(false);
  comboAggregate.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      String selected=comboAggregate.getItem(comboAggregate.getSelectionIndex());
      for (      AggregateFunction function : model.getMetricDescription().getSupportedAggregateFunctions()) {
        if (function.toString().equals(selected)) {
          model.getMetricConfiguration().setAggregateFunction(function);
        }
      }
    }
  }
);
  return mBase;
}","/** 
 * Builds the component
 * @param parent
 * @return
 */
private Composite build(final Composite parent){
  final Composite mBase=new Composite(parent,SWT.NONE);
  mBase.setLayout(GridLayoutFactory.swtDefaults().numColumns(4).create());
  final Label mLabel=new Label(mBase,SWT.PUSH);
  mLabel.setText(Resources.getMessage(""String_Node_Str""));
  GridData d2=new GridData();
  d2.heightHint=LABEL_HEIGHT;
  d2.minimumHeight=LABEL_HEIGHT;
  d2.grabExcessVerticalSpace=true;
  d2.verticalAlignment=GridData.CENTER;
  mLabel.setLayoutData(d2);
  comboMetric=new Combo(mBase,SWT.READ_ONLY);
  GridData d30=SWTUtil.createFillHorizontallyGridData();
  d30.horizontalSpan=3;
  d30.verticalAlignment=GridData.CENTER;
  d30.grabExcessVerticalSpace=true;
  comboMetric.setLayoutData(d30);
  comboMetric.setItems(LABELS);
  comboMetric.select(0);
  comboMetric.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      if (comboMetric.getSelectionIndex() != -1) {
        MetricDescription metric=METRICS.get(comboMetric.getSelectionIndex());
        if (metric != null && model != null) {
          model.setMetricDescription(metric);
          controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
          updateControls();
        }
      }
    }
  }
);
  final Label mLabel2=new Label(mBase,SWT.PUSH);
  mLabel2.setText(Resources.getMessage(""String_Node_Str""));
  GridData d22=new GridData();
  d22.heightHint=LABEL_HEIGHT;
  d22.minimumHeight=LABEL_HEIGHT;
  d22.grabExcessVerticalSpace=true;
  d22.verticalAlignment=GridData.CENTER;
  mLabel2.setLayoutData(d22);
  monotonicVariant=new Button(mBase,SWT.CHECK);
  monotonicVariant.setText(Resources.getMessage(""String_Node_Str""));
  monotonicVariant.setSelection(false);
  monotonicVariant.setEnabled(false);
  monotonicVariant.setLayoutData(GridDataFactory.swtDefaults().span(3,1).grab(false,true).align(GridData.BEGINNING,GridData.CENTER).create());
  monotonicVariant.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getMetricConfiguration().setMonotonic(monotonicVariant.getSelection());
      controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
    }
  }
);
  final Label mLabel4=new Label(mBase,SWT.PUSH);
  mLabel4.setText(Resources.getMessage(""String_Node_Str""));
  GridData d24=new GridData();
  d24.heightHint=LABEL_HEIGHT;
  d24.minimumHeight=LABEL_HEIGHT;
  d24.grabExcessVerticalSpace=true;
  d24.verticalAlignment=GridData.CENTER;
  mLabel4.setLayoutData(d24);
  utilityBasedMicroaggregation=new Button(mBase,SWT.CHECK);
  utilityBasedMicroaggregation.setText(Resources.getMessage(""String_Node_Str""));
  utilityBasedMicroaggregation.setSelection(false);
  utilityBasedMicroaggregation.setEnabled(false);
  utilityBasedMicroaggregation.setLayoutData(GridDataFactory.swtDefaults().span(3,1).grab(false,true).align(GridData.BEGINNING,GridData.CENTER).create());
  utilityBasedMicroaggregation.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      model.getInputConfig().setUseUtilityBasedMicroaggregation(utilityBasedMicroaggregation.getSelection());
      controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
    }
  }
);
  final Label mLabel3=new Label(mBase,SWT.PUSH);
  mLabel3.setText(Resources.getMessage(""String_Node_Str""));
  GridData d23=new GridData();
  d23.heightHint=LABEL_HEIGHT;
  d23.minimumHeight=LABEL_HEIGHT;
  d23.grabExcessVerticalSpace=true;
  d23.verticalAlignment=GridData.CENTER;
  mLabel3.setLayoutData(d23);
  comboAggregate=new Combo(mBase,SWT.READ_ONLY);
  GridData d31=SWTUtil.createFillHorizontallyGridData();
  d31.horizontalSpan=3;
  d31.grabExcessVerticalSpace=true;
  d31.verticalAlignment=GridData.CENTER;
  comboAggregate.setLayoutData(d31);
  comboAggregate.setEnabled(false);
  comboAggregate.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      String selected=comboAggregate.getItem(comboAggregate.getSelectionIndex());
      for (      AggregateFunction function : model.getMetricDescription().getSupportedAggregateFunctions()) {
        if (function.toString().equals(selected)) {
          model.getMetricConfiguration().setAggregateFunction(function);
          controller.update(new ModelEvent(this,ModelPart.METRIC,model.getMetricDescription()));
        }
      }
    }
  }
);
  return mBase;
}",0.9370096908167974
107943,"/** 
 * This method updates the view
 */
private void updateControls(){
  if (model == null) {
    return;
  }
  MetricConfiguration config=model.getMetricConfiguration();
  MetricDescription description=model.getMetricDescription();
  if (config == null || description == null) {
    reset();
    return;
  }
  root.setRedraw(false);
  if (!description.isMonotonicVariantSupported()) {
    this.monotonicVariant.setSelection(false);
    this.monotonicVariant.setEnabled(false);
  }
 else {
    this.monotonicVariant.setEnabled(true);
    this.monotonicVariant.setSelection(config.isMonotonic());
  }
  utilityBasedMicroaggregation.setSelection(model.getInputConfig().isUtilityBasedMicroaggregation());
  comboAggregate.removeAll();
  int index=0;
  int selected=-1;
  for (  AggregateFunction function : description.getSupportedAggregateFunctions()) {
    comboAggregate.add(function.toString());
    if (function.toString().equals(config.getAggregateFunction().toString())) {
      selected=index;
    }
    index++;
  }
  if (selected != -1) {
    comboAggregate.select(selected);
  }
  SWTUtil.enable(root);
  if (comboAggregate.getItemCount() == 0) {
    comboAggregate.add(Resources.getMessage(""String_Node_Str""));
    comboAggregate.select(0);
    comboAggregate.setEnabled(false);
  }
  root.setRedraw(true);
}","/** 
 * This method updates the view
 */
private void updateControls(){
  if (this.model == null) {
    return;
  }
  MetricConfiguration config=this.model.getMetricConfiguration();
  MetricDescription description=this.model.getMetricDescription();
  if (config == null || description == null) {
    reset();
    return;
  }
  this.root.setRedraw(false);
  if (!description.isMonotonicVariantSupported()) {
    this.monotonicVariant.setSelection(false);
  }
 else {
    this.monotonicVariant.setSelection(config.isMonotonic());
  }
  boolean isAbleToHandleMicroaggregation=description.createInstance(config).isAbleToHandleMicroaggregation();
  this.utilityBasedMicroaggregation.setSelection(isAbleToHandleMicroaggregation && this.model.getInputConfig().isUtilityBasedMicroaggregation());
  this.comboAggregate.removeAll();
  int index=0;
  int selected=-1;
  for (  AggregateFunction function : description.getSupportedAggregateFunctions()) {
    comboAggregate.add(function.toString());
    if (function.toString().equals(config.getAggregateFunction().toString())) {
      selected=index;
    }
    index++;
  }
  if (selected != -1) {
    this.comboAggregate.select(selected);
  }
  SWTUtil.enable(this.root);
  if (this.comboAggregate.getItemCount() == 0) {
    this.comboAggregate.add(Resources.getMessage(""String_Node_Str""));
    this.comboAggregate.select(0);
    this.comboAggregate.setEnabled(false);
  }
  this.monotonicVariant.setEnabled(description.isMonotonicVariantSupported());
  this.utilityBasedMicroaggregation.setEnabled(isAbleToHandleMicroaggregation);
  this.root.setRedraw(true);
}",0.8013698630136986
107944,"@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelDifferentialPrivacyCriterion)) {
    return;
  }
  ModelDifferentialPrivacyCriterion other=(ModelDifferentialPrivacyCriterion)criterion;
  this.epsilon=other.epsilon;
  this.delta=other.delta;
  if (!_default) {
    this.generalization=other.generalization.clone();
  }
  this.setEnabled(other.isEnabled());
}","@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelDifferentialPrivacyCriterion)) {
    return;
  }
  ModelDifferentialPrivacyCriterion other=(ModelDifferentialPrivacyCriterion)criterion;
  this.epsilon=other.epsilon;
  this.delta=other.delta;
  if (!_default) {
    this.generalization=other.generalization.clone();
  }
  if (!_default) {
    this.setEnabled(other.isEnabled());
  }
}",0.9707602339181286
107945,"@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelKAnonymityCriterion)) {
    return;
  }
  ModelKAnonymityCriterion other=(ModelKAnonymityCriterion)criterion;
  this.k=other.k;
  this.setEnabled(other.isEnabled());
}","@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelKAnonymityCriterion)) {
    return;
  }
  ModelKAnonymityCriterion other=(ModelKAnonymityCriterion)criterion;
  this.k=other.k;
  if (!_default) {
    this.setEnabled(other.isEnabled());
  }
}",0.956217162872154
107946,"@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelKMapCriterion)) {
    return;
  }
  ModelKMapCriterion other=(ModelKMapCriterion)criterion;
  this.k=other.k;
  this.setEnabled(other.isEnabled());
  this.setEstimator(other.estimator);
  this.significanceLevel=other.significanceLevel;
}","@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelKMapCriterion)) {
    return;
  }
  ModelKMapCriterion other=(ModelKMapCriterion)criterion;
  this.k=other.k;
  this.setEstimator(other.estimator);
  this.significanceLevel=other.significanceLevel;
  if (!_default) {
    this.setEnabled(other.isEnabled());
  }
}",0.7229254571026723
107947,"@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelLDiversityCriterion)) {
    return;
  }
  ModelLDiversityCriterion other=(ModelLDiversityCriterion)criterion;
  this.l=other.l;
  this.c=other.c;
  this.variant=other.variant;
  this.setEnabled(other.isEnabled());
}","@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelLDiversityCriterion)) {
    return;
  }
  ModelLDiversityCriterion other=(ModelLDiversityCriterion)criterion;
  this.l=other.l;
  this.c=other.c;
  this.variant=other.variant;
  if (!_default) {
    this.setEnabled(other.isEnabled());
  }
}",0.9625187406296852
107948,"@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelRiskBasedCriterion)) {
    return;
  }
  ModelRiskBasedCriterion other=(ModelRiskBasedCriterion)criterion;
  this.threshold=other.threshold;
  this.variant=other.variant;
  this.setEnabled(other.isEnabled());
}","@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelRiskBasedCriterion)) {
    return;
  }
  ModelRiskBasedCriterion other=(ModelRiskBasedCriterion)criterion;
  this.threshold=other.threshold;
  this.variant=other.variant;
  if (!_default) {
    this.setEnabled(other.isEnabled());
  }
}",0.9619482496194824
107949,"@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelTClosenessCriterion)) {
    return;
  }
  ModelTClosenessCriterion other=(ModelTClosenessCriterion)criterion;
  this.t=other.t;
  this.variant=other.variant;
  this.setEnabled(other.isEnabled());
}","@Override public void parse(ModelCriterion criterion,boolean _default){
  if (!(criterion instanceof ModelTClosenessCriterion)) {
    return;
  }
  ModelTClosenessCriterion other=(ModelTClosenessCriterion)criterion;
  this.t=other.t;
  this.variant=other.variant;
  if (!_default) {
    this.setEnabled(other.isEnabled());
  }
}",0.960380348652932
107950,"@Override public void widgetSelected(final SelectionEvent arg0){
  layoutTopLeft.setSelectionIdex(layoutTopRight.getSelectionIndex());
  if (layoutTopRight.getSelectionIndex() == 2) {
    layoutBottomLeft.setSelectionIdex(4);
  }
 else   if (layoutTopRight.getSelectionIndex() == 3) {
    layoutBottomLeft.setSelectionIdex(0);
    layoutBottomRight.setSelectionIdex(0);
  }
  controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
}","@Override public void widgetSelected(final SelectionEvent arg0){
  layoutTopLeft.setSelectionIdex(layoutTopRight.getSelectionIndex());
  if (layoutTopRight.getSelectionIndex() == 2) {
    layoutBottomLeft.setSelectionIdex(3);
  }
 else   if (layoutTopRight.getSelectionIndex() == 3) {
    layoutBottomLeft.setSelectionIdex(0);
    layoutBottomRight.setSelectionIdex(0);
  }
  controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
}",0.9978308026030368
107951,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public LayoutRisks(final Composite parent,final Controller controller){
  centerSash=new SashForm(parent,SWT.VERTICAL);
  centerSash.setLayoutData(SWTUtil.createFillGridData());
  SashForm center=new SashForm(centerSash,SWT.HORIZONTAL | SWT.SMOOTH);
  center.setLayoutData(SWTUtil.createFillGridData());
  centerLeft=new Composite(center,SWT.NONE);
  centerLeft.setLayoutData(SWTUtil.createFillGridData());
  centerLeft.setLayout(new FillLayout());
  centerRight=new Composite(center,SWT.NONE);
  centerRight.setLayoutData(SWTUtil.createFillGridData());
  centerRight.setLayout(new FillLayout());
  layoutTopLeft=new LayoutRisksTop(centerLeft,controller,ModelPart.INPUT,null);
  layoutTopRight=new LayoutRisksTop(centerRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  final Composite compositeBottom=new Composite(centerSash,SWT.NONE);
  compositeBottom.setLayout(new FillLayout());
  final SashForm bottomSash=new SashForm(compositeBottom,SWT.HORIZONTAL | SWT.SMOOTH);
  bottomLeft=new Composite(bottomSash,SWT.NONE);
  bottomLeft.setLayout(new FillLayout());
  bottomRight=new Composite(bottomSash,SWT.NONE);
  bottomRight.setLayout(new FillLayout());
  layoutBottomLeft=new LayoutRisksBottom(bottomLeft,controller,ModelPart.INPUT,null);
  layoutBottomRight=new LayoutRisksBottom(bottomRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  layoutBottomLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomRight.setSelectionIdex(layoutBottomLeft.getSelectionIndex());
      if (layoutBottomLeft.getSelectionIndex() == 4) {
        layoutTopLeft.setSelectionIdex(2);
        layoutTopRight.setSelectionIdex(2);
      }
 else       if (layoutBottomLeft.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutBottomRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomLeft.setSelectionIdex(layoutBottomRight.getSelectionIndex());
      if (layoutBottomRight.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopRight.setSelectionIdex(layoutTopLeft.getSelectionIndex());
      if (layoutTopLeft.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(4);
      }
 else       if (layoutTopLeft.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopLeft.setSelectionIdex(layoutTopRight.getSelectionIndex());
      if (layoutTopRight.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(4);
      }
 else       if (layoutTopRight.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  centerSash.setWeights(new int[]{WEIGHT_TOP,WEIGHT_BOTTOM});
  bottomSash.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  center.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  SWTUtil.fixOSXSashBug(centerSash);
  SWTUtil.fixOSXSashBug(bottomSash);
  SWTUtil.fixOSXSashBug(center);
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public LayoutRisks(final Composite parent,final Controller controller){
  centerSash=new SashForm(parent,SWT.VERTICAL);
  centerSash.setLayoutData(SWTUtil.createFillGridData());
  SashForm center=new SashForm(centerSash,SWT.HORIZONTAL | SWT.SMOOTH);
  center.setLayoutData(SWTUtil.createFillGridData());
  centerLeft=new Composite(center,SWT.NONE);
  centerLeft.setLayoutData(SWTUtil.createFillGridData());
  centerLeft.setLayout(new FillLayout());
  centerRight=new Composite(center,SWT.NONE);
  centerRight.setLayoutData(SWTUtil.createFillGridData());
  centerRight.setLayout(new FillLayout());
  layoutTopLeft=new LayoutRisksTop(centerLeft,controller,ModelPart.INPUT,null);
  layoutTopRight=new LayoutRisksTop(centerRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  final Composite compositeBottom=new Composite(centerSash,SWT.NONE);
  compositeBottom.setLayout(new FillLayout());
  final SashForm bottomSash=new SashForm(compositeBottom,SWT.HORIZONTAL | SWT.SMOOTH);
  bottomLeft=new Composite(bottomSash,SWT.NONE);
  bottomLeft.setLayout(new FillLayout());
  bottomRight=new Composite(bottomSash,SWT.NONE);
  bottomRight.setLayout(new FillLayout());
  layoutBottomLeft=new LayoutRisksBottom(bottomLeft,controller,ModelPart.INPUT,null);
  layoutBottomRight=new LayoutRisksBottom(bottomRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  layoutBottomLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomRight.setSelectionIdex(layoutBottomLeft.getSelectionIndex());
      if (layoutBottomLeft.getSelectionIndex() == 3) {
        layoutTopLeft.setSelectionIdex(2);
        layoutTopRight.setSelectionIdex(2);
      }
 else       if (layoutBottomLeft.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutBottomRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomLeft.setSelectionIdex(layoutBottomRight.getSelectionIndex());
      if (layoutBottomRight.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopRight.setSelectionIdex(layoutTopLeft.getSelectionIndex());
      if (layoutTopLeft.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(3);
      }
 else       if (layoutTopLeft.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopLeft.setSelectionIdex(layoutTopRight.getSelectionIndex());
      if (layoutTopRight.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(3);
      }
 else       if (layoutTopRight.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  centerSash.setWeights(new int[]{WEIGHT_TOP,WEIGHT_BOTTOM});
  bottomSash.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  center.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  SWTUtil.fixOSXSashBug(centerSash);
  SWTUtil.fixOSXSashBug(bottomSash);
  SWTUtil.fixOSXSashBug(center);
}",0.9992428066633012
107952,"/** 
 * Creates a new instance
 * @param population
 * @param handle
 * @param identifiers
 * @param stop
 * @param percentageDone
 * @param solverconfig
 * @param arxconfig
 */
RiskModelAttributes(final ARXPopulationModel population,final DataHandleInternal handle,final Set<String> identifiers,final WrappedBoolean stop,final WrappedInteger percentageDone,final ARXSolverConfiguration solverconfig,final ARXConfiguration arxconfig){
  this.population=population;
  this.handle=handle;
  this.stop=stop;
  this.solverconfig=solverconfig;
  this.arxconfig=arxconfig;
  List<List<String>> qis=new ArrayList<>();
  Set<Set<String>> powerset=getPowerSet(identifiers);
  for (  Set<String> set : powerset) {
    if (!set.isEmpty()) {
      List<String> qi=new ArrayList<String>(set);
      Collections.sort(qi,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          int index1=handle.getColumnIndexOf(o1);
          int index2=handle.getColumnIndexOf(o2);
          return new Integer(index1).compareTo(index2);
        }
      }
);
    }
  }
  Map<List<String>,QuasiIdentifierRisk> scores=new HashMap<>();
  int done=0;
  for (  List<String> qi : qis) {
    checkInterrupt();
    scores.put(qi,new QuasiIdentifierRisk(qi));
    percentageDone.value=(int)Math.round((double)done++ / (double)(powerset.size() - 1) * 100d);
  }
  risks=new QuasiIdentifierRisk[scores.size()];
  int idx=0;
  for (  QuasiIdentifierRisk value : scores.values()) {
    risks[idx++]=value;
  }
  Arrays.sort(risks);
}","/** 
 * Creates a new instance
 * @param population
 * @param handle
 * @param identifiers
 * @param stop
 * @param percentageDone
 * @param solverconfig
 * @param arxconfig
 */
RiskModelAttributes(final ARXPopulationModel population,final DataHandleInternal handle,final Set<String> identifiers,final WrappedBoolean stop,final WrappedInteger percentageDone,final ARXSolverConfiguration solverconfig,final ARXConfiguration arxconfig){
  this.population=population;
  this.handle=handle;
  this.stop=stop;
  this.solverconfig=solverconfig;
  this.arxconfig=arxconfig;
  List<List<String>> qis=new ArrayList<>();
  Set<Set<String>> powerset=getPowerSet(identifiers);
  for (  Set<String> set : powerset) {
    if (!set.isEmpty()) {
      List<String> qi=new ArrayList<String>(set);
      qis.add(qi);
      Collections.sort(qi,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          int index1=handle.getColumnIndexOf(o1);
          int index2=handle.getColumnIndexOf(o2);
          return new Integer(index1).compareTo(index2);
        }
      }
);
    }
  }
  Map<List<String>,QuasiIdentifierRisk> scores=new HashMap<>();
  int done=0;
  for (  List<String> qi : qis) {
    checkInterrupt();
    scores.put(qi,new QuasiIdentifierRisk(qi));
    percentageDone.value=(int)Math.round((double)done++ / (double)(powerset.size() - 1) * 100d);
  }
  risks=new QuasiIdentifierRisk[scores.size()];
  int idx=0;
  for (  QuasiIdentifierRisk value : scores.values()) {
    risks[idx++]=value;
  }
  Arrays.sort(risks);
}",0.9938887101962046
107953,"/** 
 * Creates a new instance for the given data type.
 * @param dataType
 * @param locale
 * @param data
 */
public HierarchyWizardModel(DataType<T> dataType,Locale locale,String[] data){
  this.data=data;
  this.dataType=dataType;
  orderModel=new HierarchyWizardModelOrder<T>(dataType,locale,getOrderData());
  if (dataType instanceof DataTypeWithRatioScale) {
    if (data.length > 1 || data[0] != DataType.NULL_VALUE) {
      intervalModel=new HierarchyWizardModelIntervals<T>(dataType,data);
    }
  }
  redactionModel=new HierarchyWizardModelRedaction<T>(dataType,data);
  if (equals(dataType,DataType.DATE)) {
    this.type=intervalModel != null ? Type.INTERVAL_BASED : Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.DECIMAL)) {
    this.type=intervalModel != null ? Type.INTERVAL_BASED : Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.INTEGER)) {
    this.type=intervalModel != null ? Type.INTERVAL_BASED : Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.ORDERED_STRING)) {
    this.type=Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.STRING)) {
    this.type=Type.REDACTION_BASED;
  }
}","/** 
 * Creates a new instance for the given data type.
 * @param dataType
 * @param locale
 * @param data
 */
public HierarchyWizardModel(DataType<T> dataType,Locale locale,String[] data){
  this.data=data;
  this.dataType=dataType;
  this.sort(this.getDataType());
  orderModel=new HierarchyWizardModelOrder<T>(dataType,locale,getOrderData());
  if (dataType instanceof DataTypeWithRatioScale) {
    if (data.length > 1 || data[0] != DataType.NULL_VALUE) {
      intervalModel=new HierarchyWizardModelIntervals<T>(dataType,data);
    }
  }
  redactionModel=new HierarchyWizardModelRedaction<T>(dataType,data);
  if (equals(dataType,DataType.DATE)) {
    this.type=intervalModel != null ? Type.INTERVAL_BASED : Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.DECIMAL)) {
    this.type=intervalModel != null ? Type.INTERVAL_BASED : Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.INTEGER)) {
    this.type=intervalModel != null ? Type.INTERVAL_BASED : Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.ORDERED_STRING)) {
    this.type=Type.ORDER_BASED;
  }
 else   if (equals(dataType,DataType.STRING)) {
    this.type=Type.REDACTION_BASED;
  }
}",0.985781990521327
107954,"/** 
 * Constructor to create an initial definition.
 * @param dataType
 * @param data
 */
public HierarchyWizardModelIntervals(final DataType<T> dataType,String[] data){
  super(data,dataType,true);
  this.data=data;
  this.update();
}","/** 
 * Constructor to create an initial definition.
 * @param dataType
 * @param data
 */
public HierarchyWizardModelIntervals(final DataType<T> dataType,String[] data){
  super(data,dataType,true);
  this.update();
}",0.960352422907489
107955,"/** 
 * Constructor to create an initial definition.
 * @param dataType
 * @param locale
 * @param data
 */
public HierarchyWizardModelOrder(final DataType<T> dataType,final Locale locale,String[] data){
  super(data,dataType,false);
  this.data=data;
  this.locale=locale;
  this.internalSort(super.getDataType());
  this.update();
}","/** 
 * Constructor to create an initial definition.
 * @param dataType
 * @param locale
 * @param data
 */
public HierarchyWizardModelOrder(final DataType<T> dataType,final Locale locale,String[] data){
  super(data,dataType,false);
  this.locale=locale;
  this.update();
}",0.8618421052631579
107956,"/** 
 * Sorts the data.
 * @param type
 * @return
 */
public boolean sort(DataType<?> type){
  boolean result=internalSort(type);
  update();
  return result;
}","/** 
 * Sorts the data.
 * @param type
 * @return
 */
public boolean sort(final DataType<?> type){
  boolean result=true;
  try {
    Arrays.sort(this.data,new Comparator<String>(){
      @Override public int compare(      String o1,      String o2){
        try {
          return type.compare(o1,o2);
        }
 catch (        NumberFormatException|ParseException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
 catch (  Exception e) {
    result=false;
  }
  update();
  return result;
}",0.3294117647058823
107957,"/** 
 * Writes the hierarchies to the file.
 * @param config
 * @param prefix
 * @param zip
 * @throws IOException
 */
private void writeHierarchies(final ModelConfiguration config,final String prefix,final ZipOutputStream zip) throws IOException {
  for (  Entry<String,Hierarchy> entry : config.getHierarchies().entrySet()) {
    zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(entry.getKey())+ ""String_Node_Str""));
    final CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
    out.write(entry.getValue().getHierarchy());
  }
}","/** 
 * Writes the hierarchies to the file.
 * @param config
 * @param prefix
 * @param zip
 * @throws IOException
 */
private void writeHierarchies(final ModelConfiguration config,final String prefix,final ZipOutputStream zip) throws IOException {
  Set<String> saved=new HashSet<>();
  for (  Entry<String,Hierarchy> entry : config.getHierarchies().entrySet()) {
    zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(entry.getKey())+ ""String_Node_Str""));
    CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
    out.write(entry.getValue().getHierarchy());
    saved.add(entry.getKey());
  }
  DataDefinition definition=null;
  if (config == model.getInputConfig())   definition=model.getInputDefinition();
 else   definition=model.getOutputDefinition();
  DataHandle handle=config.getInput().getHandle();
  for (int i=0; i < handle.getNumColumns(); i++) {
    final String attr=handle.getAttributeName(i);
    if (!saved.contains(attr) && definition.getHierarchy(attr) != null && definition.getHierarchy(attr).length != 0 && definition.getHierarchy(attr)[0].length != 0) {
      zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(attr)+ ""String_Node_Str""));
      CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
      out.write(definition.getHierarchy(attr));
      saved.add(attr);
    }
  }
}",0.5822784810126582
107958,"/** 
 * Returns statistics about the equivalence classes.
 * @return
 */
public StatisticsEquivalenceClasses getEquivalenceClassStatistics(){
  interrupt.value=false;
  Set<String> attributes=handle.getDefinition().getQuasiIdentifyingAttributes();
  final int[] indices=new int[attributes.size()];
  int index=0;
  for (int column=0; column < handle.getNumColumns(); column++) {
    if (attributes.contains(handle.getAttributeName(column))) {
      indices[index++]=column;
    }
  }
  int capacity=handle.getNumRows() / 10;
  capacity=capacity > 10 ? capacity : 10;
  Groupify<TupleWrapper> map=new Groupify<TupleWrapper>(capacity);
  int numRows=handle.getNumRows();
  for (int row=0; row < numRows; row++) {
    TupleWrapper tuple=new TupleWrapper(handle,indices,row,false);
    map.add(tuple);
    checkInterrupt();
  }
  double averageEquivalenceClassSize=0d;
  double averageEquivalenceClassSizeIncludingOutliers=0d;
  int maximalEquivalenceClassSize=Integer.MIN_VALUE;
  int maximalEquivalenceClassSizeIncludingOutliers=Integer.MIN_VALUE;
  int minimalEquivalenceClassSize=Integer.MAX_VALUE;
  int minimalEquivalenceClassSizeIncludingOutliers=Integer.MAX_VALUE;
  int numberOfEquivalenceClasses=0;
  int numberOfEquivalenceClassesIncludingOutliers=map.size();
  int numberOfTuples=0;
  int numberOfOutlyingTuples=0;
  boolean containsOutliers=false;
  Group<TupleWrapper> element=map.first();
  while (element != null) {
    checkInterrupt();
    maximalEquivalenceClassSizeIncludingOutliers=Math.max(element.getCount(),maximalEquivalenceClassSizeIncludingOutliers);
    minimalEquivalenceClassSizeIncludingOutliers=Math.min(element.getCount(),minimalEquivalenceClassSizeIncludingOutliers);
    averageEquivalenceClassSizeIncludingOutliers+=element.getCount();
    numberOfTuples+=element.getCount();
    if (!element.getElement().isOutlier()) {
      maximalEquivalenceClassSize=Math.max(element.getCount(),maximalEquivalenceClassSize);
      minimalEquivalenceClassSize=Math.min(element.getCount(),minimalEquivalenceClassSize);
      averageEquivalenceClassSize+=element.getCount();
    }
 else {
      containsOutliers=true;
      numberOfOutlyingTuples=element.getCount();
    }
    element=element.next();
  }
  numberOfEquivalenceClasses=numberOfEquivalenceClassesIncludingOutliers;
  if (containsOutliers) {
    numberOfEquivalenceClasses-=1;
  }
  averageEquivalenceClassSize/=(double)numberOfEquivalenceClasses;
  averageEquivalenceClassSizeIncludingOutliers/=(double)numberOfEquivalenceClassesIncludingOutliers;
  return new StatisticsEquivalenceClasses(averageEquivalenceClassSize,averageEquivalenceClassSizeIncludingOutliers,maximalEquivalenceClassSize,maximalEquivalenceClassSizeIncludingOutliers,minimalEquivalenceClassSize,minimalEquivalenceClassSizeIncludingOutliers,numberOfEquivalenceClasses,numberOfEquivalenceClassesIncludingOutliers,numberOfTuples,numberOfOutlyingTuples);
}","/** 
 * Returns statistics about the equivalence classes.
 * @return
 */
public StatisticsEquivalenceClasses getEquivalenceClassStatistics(){
  interrupt.value=false;
  Set<String> attributes=handle.getDefinition().getQuasiIdentifyingAttributes();
  final int[] indices=new int[attributes.size()];
  int index=0;
  for (int column=0; column < handle.getNumColumns(); column++) {
    if (attributes.contains(handle.getAttributeName(column))) {
      indices[index++]=column;
    }
  }
  int capacity=handle.getNumRows() / 10;
  capacity=capacity > 10 ? capacity : 10;
  Groupify<TupleWrapper> map=new Groupify<TupleWrapper>(capacity);
  int numRows=handle.getNumRows();
  for (int row=0; row < numRows; row++) {
    TupleWrapper tuple=new TupleWrapper(handle,indices,row,false);
    map.add(tuple);
    checkInterrupt();
  }
  double averageEquivalenceClassSize=0d;
  double averageEquivalenceClassSizeIncludingOutliers=0d;
  int maximalEquivalenceClassSize=Integer.MIN_VALUE;
  int maximalEquivalenceClassSizeIncludingOutliers=Integer.MIN_VALUE;
  int minimalEquivalenceClassSize=Integer.MAX_VALUE;
  int minimalEquivalenceClassSizeIncludingOutliers=Integer.MAX_VALUE;
  int numberOfEquivalenceClasses=0;
  int numberOfEquivalenceClassesIncludingOutliers=map.size();
  int numberOfTuples=0;
  int numberOfOutlyingTuples=0;
  boolean containsOutliers=false;
  Group<TupleWrapper> element=map.first();
  while (element != null) {
    checkInterrupt();
    maximalEquivalenceClassSizeIncludingOutliers=Math.max(element.getCount(),maximalEquivalenceClassSizeIncludingOutliers);
    minimalEquivalenceClassSizeIncludingOutliers=Math.min(element.getCount(),minimalEquivalenceClassSizeIncludingOutliers);
    averageEquivalenceClassSizeIncludingOutliers+=element.getCount();
    numberOfTuples+=element.getCount();
    if (!element.getElement().isOutlier()) {
      maximalEquivalenceClassSize=Math.max(element.getCount(),maximalEquivalenceClassSize);
      minimalEquivalenceClassSize=Math.min(element.getCount(),minimalEquivalenceClassSize);
      averageEquivalenceClassSize+=element.getCount();
    }
 else {
      containsOutliers=true;
      numberOfOutlyingTuples=element.getCount();
    }
    element=element.next();
  }
  numberOfEquivalenceClasses=numberOfEquivalenceClassesIncludingOutliers;
  if (containsOutliers) {
    numberOfEquivalenceClasses-=1;
  }
  averageEquivalenceClassSize/=(double)numberOfEquivalenceClasses;
  averageEquivalenceClassSizeIncludingOutliers/=(double)numberOfEquivalenceClassesIncludingOutliers;
  if (numberOfEquivalenceClasses == 0) {
    averageEquivalenceClassSize=0;
    maximalEquivalenceClassSize=0;
    minimalEquivalenceClassSize=0;
  }
  return new StatisticsEquivalenceClasses(averageEquivalenceClassSize,averageEquivalenceClassSizeIncludingOutliers,maximalEquivalenceClassSize,maximalEquivalenceClassSizeIncludingOutliers,minimalEquivalenceClassSize,minimalEquivalenceClassSizeIncludingOutliers,numberOfEquivalenceClasses,numberOfEquivalenceClassesIncludingOutliers,numberOfTuples,numberOfOutlyingTuples);
}",0.9748068525361102
107959,"public void layout(IFigure container){
  Rectangle area=container.getClientArea();
  if (scale != null && scale.isDirty()) {
    M=Math.max(FigureUtilities.getTextWidth(scale.format(scale.getRange().getLower()),scale.getFont()),FigureUtilities.getTextWidth(scale.format(scale.getRange().getUpper()),scale.getFont())) / 2;
  }
  int h=area.height;
  int w=area.width;
  int offsetY=0;
  int offsetX=0;
  if (h > HW_RATIO * (w - 2 * M)) {
    h=(int)(HW_RATIO * (w - 2 * M));
    offsetY=(area.height - h) / 2;
    if (offsetY > 10) {
      offsetY-=10;
    }
 else {
      offsetY=0;
    }
  }
 else {
    offsetX=((int)(HW_RATIO * (w - 2 * M)) - h);
  }
  double r=h / (1 - Math.sin(ALPHA) / 2);
  int x=(int)(area.x - r * (1.0 - Math.cos(ALPHA)) + M);
  int y=area.y;
  area=new Rectangle(x + offsetX,y + offsetY,(int)(2 * r),(int)(2 * r));
  Point center=area.getCenter();
  if (scale != null) {
    scale.setBounds(area);
  }
  if (ramp != null && ramp.isVisible()) {
    Rectangle rampBounds=area.getCopy();
    ramp.setBounds(rampBounds.shrink(area.width / 4 - ramp.getRampWidth(),area.height / 4 - ramp.getRampWidth()));
  }
  if (valueLabel != null) {
    Dimension labelSize=valueLabel.getPreferredSize();
    int lY1=area.y + area.height / 2 - (scale.getInnerRadius() - area.height / 5) / 2 - labelSize.height / 2;
    int lY2=container.getClientArea().height - labelSize.height + 3;
    valueLabel.setBounds(new Rectangle(area.x + area.width / 2 - labelSize.width / 2,Math.min(lY1,lY2),labelSize.width,labelSize.height));
  }
  if (needle != null && scale != null) {
    needlePoints.setPoint(new Point(center.x + area.width / 4,center.y - NEEDLE_WIDTH / 2 + 3),0);
    scale.getScaleTickMarks();
    needlePoints.setPoint(new Point(center.x + scale.getInnerRadius() - GAP_BTW_NEEDLE_SCALE,center.y),1);
    needlePoints.setPoint(new Point(center.x + area.width / 4,center.y + NEEDLE_WIDTH / 2 - 3),2);
    double valuePosition=360 - scale.getValuePosition(getCoercedValue(),false);
    if (maximum > minimum) {
      if (value > maximum)       valuePosition+=8;
 else       if (value < minimum)       valuePosition-=8;
    }
 else {
      if (value > minimum)       valuePosition-=8;
 else       if (value < maximum)       valuePosition+=8;
    }
    needlePoints.setPoint(PointsUtil.rotate(needlePoints.getPoint(0),valuePosition,center),0);
    needlePoints.setPoint(PointsUtil.rotate(needlePoints.getPoint(1),valuePosition,center),1);
    needlePoints.setPoint(PointsUtil.rotate(needlePoints.getPoint(2),valuePosition,center),2);
    needle.setPoints(needlePoints);
  }
}","public void layout(IFigure container){
  Rectangle area=container.getClientArea();
  if (scale != null && scale.isDirty()) {
    M=Math.max(FigureUtilities.getTextWidth(scale.format(scale.getRange().getLower()),scale.getFont()),FigureUtilities.getTextWidth(scale.format(scale.getRange().getUpper()),scale.getFont())) / 2;
  }
  int h=area.height;
  int w=area.width;
  int offsetY=0;
  int offsetX=0;
  if (h > HW_RATIO * (w - 2 * M)) {
    h=(int)(HW_RATIO * (w - 2 * M));
    offsetY=(area.height - h) / 2;
    if (offsetY > 10) {
      offsetY-=10;
    }
 else {
      offsetY=0;
    }
  }
 else {
    offsetX=((int)(HW_RATIO * (w - 2 * M)) - h);
  }
  double r=h / (1 - Math.sin(ALPHA) / 2);
  int x=(int)(area.x - r * (1.0 - Math.cos(ALPHA)) + M);
  int y=area.y;
  area=new Rectangle(x + offsetX,y + offsetY,(int)(2 * r),(int)(2 * r));
  Point center=area.getCenter();
  if (scale != null) {
    scale.setBounds(area);
  }
  if (ramp != null && ramp.isVisible()) {
    Rectangle rampBounds=area.getCopy();
    ramp.setBounds(rampBounds.shrink(area.width / 4 - ramp.getRampWidth(),area.height / 4 - ramp.getRampWidth()));
  }
  if (valueLabel != null) {
    Dimension labelSize=valueLabel.getPreferredSize();
    int lY1=area.y + area.height / 2 - (scale.getInnerRadius() - area.height / 5) / 2 - labelSize.height / 2;
    int lY2=container.getClientArea().height - labelSize.height - 3;
    valueLabel.setBounds(new Rectangle(area.x + area.width / 2 - labelSize.width / 2,Math.min(lY1,lY2),labelSize.width,labelSize.height));
  }
  if (needle != null && scale != null) {
    needlePoints.setPoint(new Point(center.x + area.width / 4,center.y - NEEDLE_WIDTH / 2 + 3),0);
    scale.getScaleTickMarks();
    needlePoints.setPoint(new Point(center.x + scale.getInnerRadius() - GAP_BTW_NEEDLE_SCALE,center.y),1);
    needlePoints.setPoint(new Point(center.x + area.width / 4,center.y + NEEDLE_WIDTH / 2 - 3),2);
    double valuePosition=360 - scale.getValuePosition(getCoercedValue(),false);
    if (maximum > minimum) {
      if (value > maximum)       valuePosition+=8;
 else       if (value < minimum)       valuePosition-=8;
    }
 else {
      if (value > minimum)       valuePosition-=8;
 else       if (value < maximum)       valuePosition+=8;
    }
    needlePoints.setPoint(PointsUtil.rotate(needlePoints.getPoint(0),valuePosition,center),0);
    needlePoints.setPoint(PointsUtil.rotate(needlePoints.getPoint(1),valuePosition,center),1);
    needlePoints.setPoint(PointsUtil.rotate(needlePoints.getPoint(2),valuePosition,center),2);
    needle.setPoints(needlePoints);
  }
}",0.9996130030959752
107960,"/** 
 * Creates the folds
 * @param length
 * @param k
 * @param random
 * @return
 */
private List<List<Integer>> getFolds(int length,int k){
  List<Integer> rows=new ArrayList<>();
  for (int row=0; row < length; row++) {
    rows.add(row);
  }
  Collections.shuffle(rows,random);
  List<List<Integer>> folds=new ArrayList<>();
  int size=rows.size() / k;
  size=size > 1 ? size : 1;
  for (int i=0; i < k; i++) {
    int min=i * size;
    int max=(i + 1) * size;
    if (i == k - 1) {
      max=rows.size();
    }
    if (max < rows.size()) {
      List<Integer> fold=new ArrayList<>();
      for (int j=min; j < max; j++) {
        fold.add(rows.get(j));
      }
      folds.add(fold);
    }
  }
  rows.clear();
  rows=null;
  return folds;
}","/** 
 * Creates the folds
 * @param length
 * @param k
 * @param random
 * @return
 */
private List<List<Integer>> getFolds(int length,int k){
  List<Integer> rows=new ArrayList<>();
  for (int row=0; row < length; row++) {
    rows.add(row);
  }
  Collections.shuffle(rows,random);
  List<List<Integer>> folds=new ArrayList<>();
  int size=rows.size() / k;
  size=size > 1 ? size : 1;
  for (int i=0; i < k; i++) {
    int min=i * size;
    int max=(i + 1) * size;
    if (i == k - 1) {
      max=rows.size();
    }
    List<Integer> fold=new ArrayList<>();
    for (int j=min; j < max; j++) {
      fold.add(rows.get(j));
    }
    folds.add(fold);
  }
  rows.clear();
  rows=null;
  return folds;
}",0.968901174844506
107961,"/** 
 * Reads the data definition from the file.
 * @param config
 * @param definition
 * @param prefix
 * @param zip
 * @throws IOException
 * @throws SAXException
 */
private void readDefinition(final ModelConfiguration config,final DataDefinition definition,final String prefix,final ZipFile zip) throws IOException, SAXException {
  final ZipEntry entry=zip.getEntry(prefix + ""String_Node_Str"");
  if (entry == null) {
    return;
  }
  final XMLReader xmlReader=XMLReaderFactory.createXMLReader();
  final InputSource inputSource=new InputSource(new BufferedInputStream(zip.getInputStream(entry)));
  xmlReader.setContentHandler(new XMLHandler(){
    String attr, dtype, atype, ref, min, max, format;
    @Override protected boolean end(    final String uri,    final String localName,    final String qName) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        if (attr == null) {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          if (dtype.equals(DataType.STRING.toString())) {
            definition.setDataType(attr,DataType.STRING);
          }
 else           if (dtype.equals(DataType.DECIMAL.toString())) {
            definition.setDataType(attr,DataType.DECIMAL);
          }
 else {
            definition.setDataType(attr,DataType.createDate(dtype));
          }
        }
 else         if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          DataType<?> datatype=null;
          for (          DataTypeDescription<?> description : DataType.list()) {
            if (description.getLabel().equals(dtype)) {
              if (format != null) {
                if (!description.hasFormat()) {
                  throw new RuntimeException(Resources.getMessage(""String_Node_Str""));
                }
                datatype=description.newInstance(format);
              }
 else {
                datatype=description.newInstance();
              }
              break;
            }
          }
          if (datatype == null) {
            throw new RuntimeException(Resources.getMessage(""String_Node_Str"") + attr);
          }
          definition.setDataType(attr,datatype);
        }
        if (atype.equals(AttributeType.IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.IDENTIFYING_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.SENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.SENSITIVE_ATTRIBUTE);
          if (ref != null) {
            try {
              if (config.getHierarchy(attr) == null) {
                config.setHierarchy(attr,readHierarchy(zip,prefix,ref));
              }
            }
 catch (            final IOException e) {
              throw new SAXException(e);
            }
          }
        }
 else         if (atype.equals(AttributeType.INSENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.INSENSITIVE_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.QUASI_IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.QUASI_IDENTIFYING_ATTRIBUTE);
          if (config.getTransformationMode(attr) == ModelTransformationMode.MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation);
          }
          Hierarchy hierarchy=config.getHierarchy(attr);
          if (hierarchy == null) {
            if (ref != null) {
              try {
                hierarchy=readHierarchy(zip,prefix,ref);
              }
 catch (              final IOException e) {
                throw new SAXException(e);
              }
            }
          }
          if (hierarchy != null) {
            config.setHierarchy(attr,hierarchy);
            definition.setHierarchy(attr,hierarchy);
            int height=hierarchy.getHierarchy().length > 0 ? hierarchy.getHierarchy()[0].length : 0;
            if (min.equals(""String_Node_Str"")) {
              config.setMinimumGeneralization(attr,null);
              definition.setMinimumGeneralization(attr,0);
            }
 else {
              config.setMinimumGeneralization(attr,Integer.valueOf(min));
              definition.setMinimumGeneralization(attr,Integer.valueOf(min));
            }
            if (max.equals(""String_Node_Str"")) {
              config.setMaximumGeneralization(attr,null);
              definition.setMaximumGeneralization(attr,height - 1);
            }
 else {
              config.setMaximumGeneralization(attr,Integer.valueOf(max));
              definition.setMaximumGeneralization(attr,Integer.valueOf(max));
            }
            if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
              if (config.getMinimumGeneralization(attr) != null && config.getMinimumGeneralization(attr).equals(0)) {
                config.setMinimumGeneralization(attr,null);
              }
              if (config.getMaximumGeneralization(attr) != null && config.getMaximumGeneralization(attr).equals(height - 1)) {
                config.setMaximumGeneralization(attr,null);
              }
            }
          }
        }
 else {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        attr=null;
        atype=null;
        dtype=null;
        ref=null;
        min=null;
        max=null;
        format=null;
        return true;
      }
 else       if (vocabulary.isName(localName)) {
        attr=payload;
        return true;
      }
 else       if (vocabulary.isType(localName)) {
        atype=payload;
        return true;
      }
 else       if (vocabulary.isDatatype(localName)) {
        dtype=payload;
        return true;
      }
 else       if (vocabulary.isFormat(localName)) {
        format=payload;
        return true;
      }
 else       if (vocabulary.isRef(localName)) {
        ref=payload;
        return true;
      }
 else       if (vocabulary.isMin(localName)) {
        min=payload;
        return true;
      }
 else       if (vocabulary.isMax(localName)) {
        max=payload;
        return true;
      }
 else       if (vocabulary.isMicroaggregationFunction(localName)) {
        return true;
      }
 else       if (vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean start(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        attr=null;
        dtype=null;
        atype=null;
        ref=null;
        min=null;
        max=null;
        return true;
      }
 else       if (vocabulary.isName(localName) || vocabulary.isType(localName) || vocabulary.isDatatype(localName)|| vocabulary.isFormat(localName)|| vocabulary.isRef(localName)|| vocabulary.isMin(localName)|| vocabulary.isMax(localName)|| vocabulary.isMicroaggregationFunction(localName)|| vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  xmlReader.parse(inputSource);
}","/** 
 * Reads the data definition from the file.
 * @param config
 * @param definition
 * @param prefix
 * @param zip
 * @throws IOException
 * @throws SAXException
 */
private void readDefinition(final ModelConfiguration config,final DataDefinition definition,final String prefix,final ZipFile zip) throws IOException, SAXException {
  final ZipEntry entry=zip.getEntry(prefix + ""String_Node_Str"");
  if (entry == null) {
    return;
  }
  final XMLReader xmlReader=XMLReaderFactory.createXMLReader();
  final InputSource inputSource=new InputSource(new BufferedInputStream(zip.getInputStream(entry)));
  xmlReader.setContentHandler(new XMLHandler(){
    String attr, dtype, atype, ref, min, max, format;
    @Override protected boolean end(    final String uri,    final String localName,    final String qName) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        if (attr == null) {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          if (dtype.equals(DataType.STRING.toString())) {
            definition.setDataType(attr,DataType.STRING);
          }
 else           if (dtype.equals(DataType.DECIMAL.toString())) {
            definition.setDataType(attr,DataType.DECIMAL);
          }
 else {
            definition.setDataType(attr,DataType.createDate(dtype));
          }
        }
 else         if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
          DataType<?> datatype=null;
          for (          DataTypeDescription<?> description : DataType.list()) {
            if (description.getLabel().equals(dtype)) {
              if (format != null) {
                if (!description.hasFormat()) {
                  throw new RuntimeException(Resources.getMessage(""String_Node_Str""));
                }
                datatype=description.newInstance(format);
              }
 else {
                datatype=description.newInstance();
              }
              break;
            }
          }
          if (datatype == null) {
            throw new RuntimeException(Resources.getMessage(""String_Node_Str"") + attr);
          }
          definition.setDataType(attr,datatype);
        }
        if (atype.equals(AttributeType.IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.IDENTIFYING_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.SENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.SENSITIVE_ATTRIBUTE);
          if (ref != null) {
            try {
              if (config.getHierarchy(attr) == null) {
                config.setHierarchy(attr,readHierarchy(zip,prefix,ref));
              }
            }
 catch (            final IOException e) {
              throw new SAXException(e);
            }
          }
        }
 else         if (atype.equals(AttributeType.INSENSITIVE_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.INSENSITIVE_ATTRIBUTE);
        }
 else         if (atype.equals(AttributeType.QUASI_IDENTIFYING_ATTRIBUTE.toString())) {
          definition.setAttributeType(attr,AttributeType.QUASI_IDENTIFYING_ATTRIBUTE);
          if (config.getTransformationMode(attr) == ModelTransformationMode.MICRO_AGGREGATION) {
            MicroAggregationFunction microaggregation=config.getMicroAggregationFunction(attr).createInstance(config.getMicroAggregationIgnoreMissingData(attr));
            definition.setMicroAggregationFunction(attr,microaggregation);
          }
          Hierarchy hierarchy=config.getHierarchy(attr);
          if (hierarchy == null) {
            if (ref != null) {
              try {
                hierarchy=readHierarchy(zip,prefix,ref);
              }
 catch (              final IOException e) {
                throw new SAXException(e);
              }
            }
          }
          if (hierarchy != null && hierarchy.getHierarchy() != null) {
            config.setHierarchy(attr,hierarchy);
            definition.setHierarchy(attr,hierarchy);
            int height=hierarchy.getHierarchy().length > 0 ? hierarchy.getHierarchy()[0].length : 0;
            if (min.equals(""String_Node_Str"")) {
              config.setMinimumGeneralization(attr,null);
              definition.setMinimumGeneralization(attr,0);
            }
 else {
              config.setMinimumGeneralization(attr,Integer.valueOf(min));
              definition.setMinimumGeneralization(attr,Integer.valueOf(min));
            }
            if (max.equals(""String_Node_Str"")) {
              config.setMaximumGeneralization(attr,null);
              definition.setMaximumGeneralization(attr,height - 1);
            }
 else {
              config.setMaximumGeneralization(attr,Integer.valueOf(max));
              definition.setMaximumGeneralization(attr,Integer.valueOf(max));
            }
            if (vocabulary.getVocabularyVersion().equals(""String_Node_Str"")) {
              if (config.getMinimumGeneralization(attr) != null && config.getMinimumGeneralization(attr).equals(0)) {
                config.setMinimumGeneralization(attr,null);
              }
              if (config.getMaximumGeneralization(attr) != null && config.getMaximumGeneralization(attr).equals(height - 1)) {
                config.setMaximumGeneralization(attr,null);
              }
            }
          }
        }
 else {
          throw new SAXException(Resources.getMessage(""String_Node_Str""));
        }
        attr=null;
        atype=null;
        dtype=null;
        ref=null;
        min=null;
        max=null;
        format=null;
        return true;
      }
 else       if (vocabulary.isName(localName)) {
        attr=payload;
        return true;
      }
 else       if (vocabulary.isType(localName)) {
        atype=payload;
        return true;
      }
 else       if (vocabulary.isDatatype(localName)) {
        dtype=payload;
        return true;
      }
 else       if (vocabulary.isFormat(localName)) {
        format=payload;
        return true;
      }
 else       if (vocabulary.isRef(localName)) {
        ref=payload;
        return true;
      }
 else       if (vocabulary.isMin(localName)) {
        min=payload;
        return true;
      }
 else       if (vocabulary.isMax(localName)) {
        max=payload;
        return true;
      }
 else       if (vocabulary.isMicroaggregationFunction(localName)) {
        return true;
      }
 else       if (vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean start(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      if (vocabulary.isDefinition(localName)) {
        return true;
      }
 else       if (vocabulary.isAssigment(localName)) {
        attr=null;
        dtype=null;
        atype=null;
        ref=null;
        min=null;
        max=null;
        return true;
      }
 else       if (vocabulary.isName(localName) || vocabulary.isType(localName) || vocabulary.isDatatype(localName)|| vocabulary.isFormat(localName)|| vocabulary.isRef(localName)|| vocabulary.isMin(localName)|| vocabulary.isMax(localName)|| vocabulary.isMicroaggregationFunction(localName)|| vocabulary.isMicroaggregationIgnoreMissingData(localName)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  xmlReader.parse(inputSource);
}",0.997639653815893
107962,"@Override @SuppressWarnings(""String_Node_Str"") public void initialize(DataManager manager){
  super.initialize(manager);
  if (this.populationModel != null) {
    this.populationModel.makeBackwardsCompatible(manager.getDataGeneralized().getDataLength());
  }
  if (this.estimator != null) {
    double samplingFraction=(double)manager.getDataGeneralized().getDataLength() / (double)this.populationModel.getPopulationSize();
switch (this.estimator) {
case POISSON:
      this.derivedK=calculateKPoisson(Math.round(samplingFraction * (double)this.k));
    break;
case ZERO_TRUNCATED_POISSON:
  this.derivedK=calculateKZeroPoisson(Math.round(samplingFraction * (double)this.k));
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + this.estimator);
}
}
if (this.derivedK > manager.getDataGeneralized().getDataLength()) {
this.derivedK=manager.getDataGeneralized().getDataLength();
}
this.derivedK=Math.min(this.k,this.derivedK);
}","@Override @SuppressWarnings(""String_Node_Str"") public void initialize(DataManager manager){
  super.initialize(manager);
  if (this.populationModel != null) {
    this.populationModel.makeBackwardsCompatible(manager.getDataGeneralized().getDataLength());
  }
  if (this.estimator != null) {
    double samplingFraction=(double)manager.getDataGeneralized().getDataLength() / (double)this.populationModel.getPopulationSize();
switch (this.estimator) {
case POISSON:
      this.derivedK=calculateKPoisson(samplingFraction * (double)this.k);
    break;
case ZERO_TRUNCATED_POISSON:
  this.derivedK=calculateKZeroPoisson(samplingFraction * (double)this.k);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + this.estimator);
}
}
if (this.derivedK > manager.getDataGeneralized().getDataLength()) {
this.derivedK=manager.getDataGeneralized().getDataLength();
}
this.derivedK=Math.min(this.k,this.derivedK);
}",0.987152034261242
107963,"/** 
 * Called when the hierarchy changes
 * @param hierarchy
 */
private void actionHierarchyChanged(Hierarchy hierarchy){
  if (model == null || model.getInputConfig() == null) {
    return;
  }
  updateMinMax();
  if (hierarchy == null) {
    model.getInputConfig().removeHierarchy(attribute);
  }
 else {
    model.getInputConfig().setHierarchy(attribute,hierarchy);
  }
  model.getInputConfig().removeHierarchyBuilder(attribute);
  controller.update(new ModelEvent(ViewAttributeTransformation.this,ModelPart.HIERARCHY,hierarchy));
}","/** 
 * Called when the hierarchy changes
 * @param hierarchy
 */
private void actionHierarchyChanged(Hierarchy hierarchy){
  if (model == null || model.getInputConfig() == null) {
    return;
  }
  updateMinMax();
  if (hierarchy == null || hierarchy.getHierarchy() == null) {
    model.getInputConfig().removeHierarchy(attribute);
  }
 else {
    model.getInputConfig().setHierarchy(attribute,hierarchy);
  }
  model.getInputConfig().removeHierarchyBuilder(attribute);
  controller.update(new ModelEvent(ViewAttributeTransformation.this,ModelPart.HIERARCHY,hierarchy));
}",0.9675675675675676
107964,"/** 
 * Writes the hierarchies to the file.
 * @param config
 * @param prefix
 * @param zip
 * @throws IOException
 */
private void writeHierarchies(final ModelConfiguration config,final String prefix,final ZipOutputStream zip) throws IOException {
  for (  Entry<String,Hierarchy> entry : config.getHierarchies().entrySet()) {
    zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(entry.getKey())+ ""String_Node_Str""));
    final CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
    if (entry.getValue().getHierarchy() != null) {
      out.write(entry.getValue().getHierarchy());
    }
  }
}","/** 
 * Writes the hierarchies to the file.
 * @param config
 * @param prefix
 * @param zip
 * @throws IOException
 */
private void writeHierarchies(final ModelConfiguration config,final String prefix,final ZipOutputStream zip) throws IOException {
  for (  Entry<String,Hierarchy> entry : config.getHierarchies().entrySet()) {
    zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(entry.getKey())+ ""String_Node_Str""));
    final CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
    out.write(entry.getValue().getHierarchy());
  }
}",0.9369369369369368
107965,"@Override public void widgetDisposed(DisposeEvent arg0){
  if (boldFont != null && !boldFont.isDisposed()) {
    boldFont.dispose();
  }
}","@Override public void widgetDisposed(DisposeEvent arg0){
  if (image != null && !image.isDisposed()) {
    image.dispose();
  }
}",0.8539325842696629
107966,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public LayoutRisks(final Composite parent,final Controller controller){
  centerSash=new SashForm(parent,SWT.VERTICAL);
  centerSash.setLayoutData(SWTUtil.createFillGridData());
  SashForm center=new SashForm(centerSash,SWT.HORIZONTAL | SWT.SMOOTH);
  center.setLayoutData(SWTUtil.createFillGridData());
  centerLeft=new Composite(center,SWT.NONE);
  centerLeft.setLayoutData(SWTUtil.createFillGridData());
  centerLeft.setLayout(new FillLayout());
  centerRight=new Composite(center,SWT.NONE);
  centerRight.setLayoutData(SWTUtil.createFillGridData());
  centerRight.setLayout(new FillLayout());
  layoutTopLeft=new LayoutRisksTop(centerLeft,controller,ModelPart.INPUT,null);
  layoutTopRight=new LayoutRisksTop(centerRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  final Composite compositeBottom=new Composite(centerSash,SWT.NONE);
  compositeBottom.setLayout(new FillLayout());
  final SashForm bottomSash=new SashForm(compositeBottom,SWT.HORIZONTAL | SWT.SMOOTH);
  bottomLeft=new Composite(bottomSash,SWT.NONE);
  bottomLeft.setLayout(new FillLayout());
  bottomRight=new Composite(bottomSash,SWT.NONE);
  bottomRight.setLayout(new FillLayout());
  layoutBottomLeft=new LayoutRisksBottom(bottomLeft,controller,ModelPart.INPUT,null);
  layoutBottomRight=new LayoutRisksBottom(bottomRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  layoutBottomLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomRight.setSelectionIdex(layoutBottomLeft.getSelectionIndex());
      if (layoutBottomLeft.getSelectionIndex() == 4) {
        layoutTopLeft.setSelectionIdex(2);
        layoutTopRight.setSelectionIdex(2);
      }
 else       if (layoutBottomLeft.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutBottomRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomLeft.setSelectionIdex(layoutBottomRight.getSelectionIndex());
      if (layoutBottomRight.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopRight.setSelectionIdex(layoutTopLeft.getSelectionIndex());
      if (layoutTopLeft.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(4);
      }
 else       if (layoutTopLeft.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopLeft.setSelectionIdex(layoutTopRight.getSelectionIndex());
      if (layoutTopRight.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(4);
      }
 else       if (layoutTopRight.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  centerSash.setWeights(new int[]{WEIGHT_TOP,WEIGHT_BOTTOM});
  bottomSash.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  center.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public LayoutRisks(final Composite parent,final Controller controller){
  centerSash=new SashForm(parent,SWT.VERTICAL);
  centerSash.setLayoutData(SWTUtil.createFillGridData());
  SashForm center=new SashForm(centerSash,SWT.HORIZONTAL | SWT.SMOOTH);
  center.setLayoutData(SWTUtil.createFillGridData());
  centerLeft=new Composite(center,SWT.NONE);
  centerLeft.setLayoutData(SWTUtil.createFillGridData());
  centerLeft.setLayout(new FillLayout());
  centerRight=new Composite(center,SWT.NONE);
  centerRight.setLayoutData(SWTUtil.createFillGridData());
  centerRight.setLayout(new FillLayout());
  layoutTopLeft=new LayoutRisksTop(centerLeft,controller,ModelPart.INPUT,null);
  layoutTopRight=new LayoutRisksTop(centerRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  final Composite compositeBottom=new Composite(centerSash,SWT.NONE);
  compositeBottom.setLayout(new FillLayout());
  final SashForm bottomSash=new SashForm(compositeBottom,SWT.HORIZONTAL | SWT.SMOOTH);
  bottomLeft=new Composite(bottomSash,SWT.NONE);
  bottomLeft.setLayout(new FillLayout());
  bottomRight=new Composite(bottomSash,SWT.NONE);
  bottomRight.setLayout(new FillLayout());
  layoutBottomLeft=new LayoutRisksBottom(bottomLeft,controller,ModelPart.INPUT,null);
  layoutBottomRight=new LayoutRisksBottom(bottomRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  layoutBottomLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomRight.setSelectionIdex(layoutBottomLeft.getSelectionIndex());
      if (layoutBottomLeft.getSelectionIndex() == 4) {
        layoutTopLeft.setSelectionIdex(2);
        layoutTopRight.setSelectionIdex(2);
      }
 else       if (layoutBottomLeft.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutBottomRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutBottomLeft.setSelectionIdex(layoutBottomRight.getSelectionIndex());
      if (layoutBottomRight.getSelectionIndex() == 0) {
        layoutTopLeft.setSelectionIdex(3);
        layoutTopRight.setSelectionIdex(3);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopLeft.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopRight.setSelectionIdex(layoutTopLeft.getSelectionIndex());
      if (layoutTopLeft.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(4);
      }
 else       if (layoutTopLeft.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  layoutTopRight.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      layoutTopLeft.setSelectionIdex(layoutTopRight.getSelectionIndex());
      if (layoutTopRight.getSelectionIndex() == 2) {
        layoutBottomLeft.setSelectionIdex(4);
      }
 else       if (layoutTopRight.getSelectionIndex() == 3) {
        layoutBottomLeft.setSelectionIdex(0);
        layoutBottomRight.setSelectionIdex(0);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_RISK_VISUALIZATION,null));
    }
  }
);
  centerSash.setWeights(new int[]{WEIGHT_TOP,WEIGHT_BOTTOM});
  bottomSash.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  center.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  SWTUtil.fixOSXSashBug(centerSash);
  SWTUtil.fixOSXSashBug(bottomSash);
  SWTUtil.fixOSXSashBug(center);
}",0.9863118843546116
107967,"/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public LayoutUtility(final Composite parent,final Controller controller){
  centerSash=new SashForm(parent,SWT.VERTICAL);
  centerSash.setLayoutData(SWTUtil.createFillGridData());
  final Composite center=new Composite(centerSash,SWT.NONE);
  center.setLayoutData(SWTUtil.createFillGridData());
  center.setLayout(SWTUtil.createGridLayoutWithEqualWidth(2));
  centerLeft=new Composite(center,SWT.NONE);
  centerLeft.setLayoutData(SWTUtil.createFillGridData());
  centerLeft.setLayout(SWTUtil.createGridLayout(1));
  centerRight=new Composite(center,SWT.NONE);
  centerRight.setLayoutData(SWTUtil.createFillGridData());
  centerRight.setLayout(SWTUtil.createGridLayout(1));
  dataInputView=new ViewDataInput(centerLeft,controller,""String_Node_Str"");
  dataOutputView=new ViewDataOutput(centerRight,controller,""String_Node_Str"");
  dataInputView.addScrollBarListener(new Listener(){
    @Override public void handleEvent(    final Event arg0){
      PixelCoordinate coordinate=dataInputView.getViewportLayer().getOrigin();
      final int row=coordinate.getY();
      final int col=coordinate.getX();
      if (dataOutputView != null) {
        dataOutputView.getViewportLayer().setOriginY(row);
        dataOutputView.getViewportLayer().setOriginX(col);
        synchronize(dataInputView,dataOutputView);
      }
    }
  }
);
  dataOutputView.addScrollBarListener(new Listener(){
    @Override public void handleEvent(    final Event arg0){
      PixelCoordinate coordinate=dataOutputView.getViewportLayer().getOrigin();
      final int row=coordinate.getY();
      final int col=coordinate.getX();
      if (dataInputView != null) {
        dataInputView.getViewportLayer().setOriginY(row);
        dataInputView.getViewportLayer().setOriginX(col);
        synchronize(dataOutputView,dataInputView);
      }
    }
  }
);
  Composite classificationInput=dataInputView.createAdditionalItem(Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  classificationInput.setLayout(new FillLayout());
  new ViewStatisticsLogisticRegressionInput(classificationInput,controller);
  Composite classificationOutput=dataOutputView.createAdditionalItem(Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  classificationOutput.setLayout(new FillLayout());
  new ViewStatisticsLogisticRegressionOutput(classificationOutput,controller);
  final Composite compositeBottom=new Composite(centerSash,SWT.NONE);
  compositeBottom.setLayout(new FillLayout());
  final SashForm bottomSash=new SashForm(compositeBottom,SWT.HORIZONTAL | SWT.SMOOTH);
  bottomLeft=new Composite(bottomSash,SWT.NONE);
  bottomLeft.setLayout(new FillLayout());
  bottomRight=new Composite(bottomSash,SWT.NONE);
  bottomRight.setLayout(new FillLayout());
  statisticsInputLayout=new LayoutUtilityStatistics(bottomLeft,controller,ModelPart.INPUT,null);
  statisticsOutputLayout=new LayoutUtilityStatistics(bottomRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  dataInputView.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      dataOutputView.setSelectionIndex(dataInputView.getSelectionIndex());
      if (dataInputView.getSelectionIndex() == 1) {
        statisticsInputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
        statisticsOutputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  dataOutputView.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      dataInputView.setSelectionIndex(dataOutputView.getSelectionIndex());
      if (dataOutputView.getSelectionIndex() == 1) {
        statisticsInputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
        statisticsOutputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsInputLayout.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsOutputLayout.setSelectedView(statisticsInputLayout.getSelectedView());
      if (statisticsInputLayout.getSelectedView() == ViewUtilityType.CLASSIFICATION) {
        dataOutputView.setSelectionIndex(1);
        dataInputView.setSelectionIndex(1);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsOutputLayout.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsInputLayout.setSelectedView(statisticsOutputLayout.getSelectedView());
      if (statisticsOutputLayout.getSelectedView() == ViewUtilityType.CLASSIFICATION) {
        dataOutputView.setSelectionIndex(1);
        dataInputView.setSelectionIndex(1);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsInputLayout.setItemVisibilityListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsOutputLayout.setVisibleItems(statisticsInputLayout.getVisibleItems());
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsOutputLayout.setItemVisibilityListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsInputLayout.setVisibleItems(statisticsOutputLayout.getVisibleItems());
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  centerSash.setWeights(new int[]{WEIGHT_TOP,WEIGHT_BOTTOM});
  bottomSash.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
}","/** 
 * Creates a new instance.
 * @param parent
 * @param controller
 */
public LayoutUtility(final Composite parent,final Controller controller){
  centerSash=new SashForm(parent,SWT.VERTICAL);
  centerSash.setLayoutData(SWTUtil.createFillGridData());
  final Composite center=new Composite(centerSash,SWT.NONE);
  center.setLayoutData(SWTUtil.createFillGridData());
  center.setLayout(SWTUtil.createGridLayoutWithEqualWidth(2));
  centerLeft=new Composite(center,SWT.NONE);
  centerLeft.setLayoutData(SWTUtil.createFillGridData());
  centerLeft.setLayout(SWTUtil.createGridLayout(1));
  centerRight=new Composite(center,SWT.NONE);
  centerRight.setLayoutData(SWTUtil.createFillGridData());
  centerRight.setLayout(SWTUtil.createGridLayout(1));
  dataInputView=new ViewDataInput(centerLeft,controller,""String_Node_Str"");
  dataOutputView=new ViewDataOutput(centerRight,controller,""String_Node_Str"");
  dataInputView.addScrollBarListener(new Listener(){
    @Override public void handleEvent(    final Event arg0){
      PixelCoordinate coordinate=dataInputView.getViewportLayer().getOrigin();
      final int row=coordinate.getY();
      final int col=coordinate.getX();
      if (dataOutputView != null) {
        dataOutputView.getViewportLayer().setOriginY(row);
        dataOutputView.getViewportLayer().setOriginX(col);
        synchronize(dataInputView,dataOutputView);
      }
    }
  }
);
  dataOutputView.addScrollBarListener(new Listener(){
    @Override public void handleEvent(    final Event arg0){
      PixelCoordinate coordinate=dataOutputView.getViewportLayer().getOrigin();
      final int row=coordinate.getY();
      final int col=coordinate.getX();
      if (dataInputView != null) {
        dataInputView.getViewportLayer().setOriginY(row);
        dataInputView.getViewportLayer().setOriginX(col);
        synchronize(dataOutputView,dataInputView);
      }
    }
  }
);
  Composite classificationInput=dataInputView.createAdditionalItem(Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  classificationInput.setLayout(new FillLayout());
  new ViewStatisticsLogisticRegressionInput(classificationInput,controller);
  Composite classificationOutput=dataOutputView.createAdditionalItem(Resources.getMessage(""String_Node_Str""),""String_Node_Str"");
  classificationOutput.setLayout(new FillLayout());
  new ViewStatisticsLogisticRegressionOutput(classificationOutput,controller);
  final Composite compositeBottom=new Composite(centerSash,SWT.NONE);
  compositeBottom.setLayout(new FillLayout());
  final SashForm bottomSash=new SashForm(compositeBottom,SWT.HORIZONTAL | SWT.SMOOTH);
  bottomLeft=new Composite(bottomSash,SWT.NONE);
  bottomLeft.setLayout(new FillLayout());
  bottomRight=new Composite(bottomSash,SWT.NONE);
  bottomRight.setLayout(new FillLayout());
  statisticsInputLayout=new LayoutUtilityStatistics(bottomLeft,controller,ModelPart.INPUT,null);
  statisticsOutputLayout=new LayoutUtilityStatistics(bottomRight,controller,ModelPart.OUTPUT,ModelPart.INPUT);
  dataInputView.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      dataOutputView.setSelectionIndex(dataInputView.getSelectionIndex());
      if (dataInputView.getSelectionIndex() == 1) {
        statisticsInputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
        statisticsOutputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  dataOutputView.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      dataInputView.setSelectionIndex(dataOutputView.getSelectionIndex());
      if (dataOutputView.getSelectionIndex() == 1) {
        statisticsInputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
        statisticsOutputLayout.setSelectedView(ViewUtilityType.CLASSIFICATION);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsInputLayout.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsOutputLayout.setSelectedView(statisticsInputLayout.getSelectedView());
      if (statisticsInputLayout.getSelectedView() == ViewUtilityType.CLASSIFICATION) {
        dataOutputView.setSelectionIndex(1);
        dataInputView.setSelectionIndex(1);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsOutputLayout.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsInputLayout.setSelectedView(statisticsOutputLayout.getSelectedView());
      if (statisticsOutputLayout.getSelectedView() == ViewUtilityType.CLASSIFICATION) {
        dataOutputView.setSelectionIndex(1);
        dataInputView.setSelectionIndex(1);
      }
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsInputLayout.setItemVisibilityListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsOutputLayout.setVisibleItems(statisticsInputLayout.getVisibleItems());
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  statisticsOutputLayout.setItemVisibilityListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent arg0){
      statisticsInputLayout.setVisibleItems(statisticsOutputLayout.getVisibleItems());
      controller.update(new ModelEvent(this,ModelPart.SELECTED_UTILITY_VISUALIZATION,null));
    }
  }
);
  centerSash.setWeights(new int[]{WEIGHT_TOP,WEIGHT_BOTTOM});
  bottomSash.setWeights(new int[]{WEIGHT_LEFT,WEIGHT_RIGHT});
  SWTUtil.fixOSXSashBug(centerSash);
  SWTUtil.fixOSXSashBug(bottomSash);
}",0.9937909045141804
107968,"@Deprecated public void makeBackwardsCompatible(int sampleSize){
  if (populationSize == null) {
    populationSize=(long)(Math.round((double)sampleSize / this.sampleFraction));
  }
}","@Deprecated public void makeBackwardsCompatible(int sampleSize){
  if (populationSize == null) {
    if (region == null || region == Region.NONE) {
      populationSize=(long)(Math.round((double)sampleSize / this.sampleFraction));
    }
 else {
      populationSize=region.getPopulationSize();
    }
  }
}",0.75
107969,"/** 
 * Creates a new data manager from pre-encoded data.
 * @param header
 * @param data
 * @param dictionary
 * @param definition
 * @param criteria
 * @param function
 */
public DataManager(final String[] header,final int[][] data,final Dictionary dictionary,final DataDefinition definition,final Set<PrivacyCriterion> criteria,final Map<String,DistributionAggregateFunction> functions){
  this.header=header;
  Set<String> attributesGemeralized=definition.getQuasiIdentifiersWithGeneralization();
  Set<String> attributesSensitive=definition.getSensitiveAttributes();
  Set<String> attributesMicroaggregated=definition.getQuasiIdentifiersWithMicroaggregation();
  Set<String> attributesInsensitive=definition.getInsensitiveAttributes();
  final Dictionary dictionaryGeneralized=new Dictionary(attributesGemeralized.size());
  final Dictionary dictionaryAnalyzed=new Dictionary(attributesSensitive.size() + attributesMicroaggregated.size());
  final Dictionary dictionaryStatic=new Dictionary(attributesInsensitive.size());
  final int[] mapGeneralized=new int[dictionaryGeneralized.getNumDimensions()];
  final int[] mapAnalyzed=new int[dictionaryAnalyzed.getNumDimensions()];
  final int[] mapStatic=new int[dictionaryStatic.getNumDimensions()];
  this.microaggregationMap=new int[attributesMicroaggregated.size()];
  this.microaggregationStartIndex=attributesSensitive.size();
  this.microaggregationNumAttributes=attributesMicroaggregated.size();
  int indexStatic=0;
  int indexGeneralized=0;
  int indexAnalyzed=0;
  int indexSensitive=0;
  int indexMicroaggregated=this.microaggregationStartIndex;
  int counter=0;
  final int[] map=new int[header.length * 2];
  final String[] headerGH=new String[dictionaryGeneralized.getNumDimensions()];
  final String[] headerDI=new String[dictionaryAnalyzed.getNumDimensions()];
  final String[] headerIS=new String[dictionaryStatic.getNumDimensions()];
  microaggregationHeader=new String[attributesMicroaggregated.size()];
  for (  final String column : header) {
    final int idx=counter * 2;
    if (attributesGemeralized.contains(column)) {
      map[idx]=AttributeTypeInternal.QUASI_IDENTIFYING_GENERALIZED;
      map[idx + 1]=indexGeneralized;
      mapGeneralized[indexGeneralized]=counter;
      dictionaryGeneralized.registerAll(indexGeneralized,dictionary,counter);
      headerGH[indexGeneralized]=header[counter];
      indexGeneralized++;
    }
 else     if (attributesMicroaggregated.contains(column)) {
      map[idx]=AttributeTypeInternal.QUASI_IDENTIFYING_MICROAGGREGATED;
      map[idx + 1]=indexMicroaggregated;
      mapAnalyzed[indexMicroaggregated]=counter;
      dictionaryAnalyzed.registerAll(indexMicroaggregated,dictionary,counter);
      headerDI[indexMicroaggregated]=header[counter];
      indexMicroaggregated++;
      microaggregationMap[indexAnalyzed]=counter;
      microaggregationHeader[indexAnalyzed]=header[counter];
      indexAnalyzed++;
    }
 else     if (attributesInsensitive.contains(column)) {
      map[idx]=AttributeTypeInternal.INSENSITIVE;
      map[idx + 1]=indexStatic;
      mapStatic[indexStatic]=counter;
      dictionaryStatic.registerAll(indexStatic,dictionary,counter);
      headerIS[indexStatic]=header[counter];
      indexStatic++;
    }
 else     if (attributesSensitive.contains(column)) {
      map[idx]=AttributeTypeInternal.SENSITIVE;
      map[idx + 1]=indexSensitive;
      mapAnalyzed[indexSensitive]=counter;
      dictionaryAnalyzed.registerAll(indexSensitive,dictionary,counter);
      headerDI[indexSensitive]=header[counter];
      indexSensitive++;
    }
 else {
      map[idx]=AttributeTypeInternal.IDENTIFYING;
      map[idx + 1]=-1;
    }
    counter++;
  }
  final Data[] ddata=encode(data,map,mapGeneralized,mapAnalyzed,mapStatic,dictionaryGeneralized,dictionaryAnalyzed,dictionaryStatic,headerGH,headerDI,headerIS);
  dataGeneralized=ddata[0];
  dataAnalyzed=ddata[1];
  dataStatic=ddata[2];
  minLevels=new int[attributesGemeralized.size()];
  hierarchiesHeights=new int[attributesGemeralized.size()];
  maxLevels=new int[attributesGemeralized.size()];
  hierarchiesGeneralized=new GeneralizationHierarchy[attributesGemeralized.size()];
  for (int i=0; i < header.length; i++) {
    final int idx=i * 2;
    if (attributesGemeralized.contains(header[i]) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_GENERALIZED) {
      final int dictionaryIndex=map[idx + 1];
      final String name=header[i];
      if (definition.getHierarchy(name) != null) {
        hierarchiesGeneralized[dictionaryIndex]=new GeneralizationHierarchy(name,definition.getHierarchy(name),dictionaryIndex,dictionaryGeneralized);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + header[i] + ""String_Node_Str"");
      }
      hierarchiesHeights[dictionaryIndex]=hierarchiesGeneralized[dictionaryIndex].getArray()[0].length;
      final Integer minGenLevel=definition.getMinimumGeneralization(name);
      minLevels[dictionaryIndex]=minGenLevel == null ? 0 : minGenLevel;
      final Integer maxGenLevel=definition.getMaximumGeneralization(name);
      maxLevels[dictionaryIndex]=maxGenLevel == null ? hierarchiesHeights[dictionaryIndex] - 1 : maxGenLevel;
    }
  }
  for (  PrivacyCriterion c : criteria) {
    if (c instanceof EDDifferentialPrivacy) {
      DataGeneralizationScheme scheme=((EDDifferentialPrivacy)c).getGeneralizationScheme();
      for (int i=0; i < header.length; i++) {
        final int idx=i * 2;
        if (attributesGemeralized.contains(header[i]) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_GENERALIZED) {
          minLevels[map[idx + 1]]=scheme.getGeneralizationLevel(header[i],definition);
          maxLevels[map[idx + 1]]=scheme.getGeneralizationLevel(header[i],definition);
        }
      }
      break;
    }
  }
  Map<String,String[][]> sensitiveHierarchies=new HashMap<String,String[][]>();
  for (  PrivacyCriterion c : criteria) {
    if (c instanceof HierarchicalDistanceTCloseness) {
      HierarchicalDistanceTCloseness t=(HierarchicalDistanceTCloseness)c;
      sensitiveHierarchies.put(t.getAttribute(),t.getHierarchy().getHierarchy());
    }
  }
  hierarchiesSensitive=new HashMap<String,GeneralizationHierarchy>();
  indexesSensitive=new HashMap<String,Integer>();
  int index=0;
  for (int i=0; i < header.length; i++) {
    final String name=header[i];
    final int idx=i * 2;
    if (sensitiveHierarchies.containsKey(name) && map[idx] == AttributeTypeInternal.SENSITIVE) {
      final int dictionaryIndex=map[idx + 1];
      final String[][] hiers=sensitiveHierarchies.get(name);
      if (hiers != null) {
        hierarchiesSensitive.put(name,new GeneralizationHierarchy(name,hiers,dictionaryIndex,dictionaryAnalyzed));
      }
    }
    if (attributesSensitive.contains(header[i])) {
      indexesSensitive.put(name,index);
      index++;
    }
  }
  Map<String,String[][]> maHierarchies=new HashMap<String,String[][]>();
  for (  String attribute : functions.keySet()) {
    if (functions.get(attribute) instanceof DistributionAggregateFunctionGeneralization) {
      maHierarchies.put(attribute,definition.getHierarchy(attribute));
    }
  }
  Map<String,int[][]> hierarchiesMA=new HashMap<String,int[][]>();
  index=0;
  for (int i=0; i < header.length; i++) {
    final String name=header[i];
    final int idx=i * 2;
    if (maHierarchies.containsKey(name) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_MICROAGGREGATED) {
      final int dictionaryIndex=map[idx + 1];
      final String[][] hiers=maHierarchies.get(name);
      if (hiers != null) {
        hierarchiesMA.put(name,new GeneralizationHierarchy(name,hiers,dictionaryIndex,dictionaryAnalyzed).map);
      }
    }
  }
  dictionaryGeneralized.finalizeAll();
  dictionaryAnalyzed.finalizeAll();
  dictionaryStatic.finalizeAll();
  microaggregationFunctions=new DistributionAggregateFunction[attributesMicroaggregated.size()];
  for (int i=0; i < header.length; i++) {
    final int idx=i * 2;
    if (attributesMicroaggregated.contains(header[i]) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_MICROAGGREGATED) {
      final int dictionaryIndex=map[idx + 1] - microaggregationStartIndex;
      final String name=header[i];
      if (definition.getMicroAggregationFunction(name) != null) {
        microaggregationFunctions[dictionaryIndex]=functions.get(name);
        microaggregationFunctions[dictionaryIndex].initialize(dictionaryAnalyzed.getMapping()[dictionaryIndex + microaggregationStartIndex],definition.getDataType(name),hierarchiesMA.get(name));
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + header[i] + ""String_Node_Str"");
      }
    }
  }
  for (  PrivacyCriterion c : criteria) {
    if (c.getSubset() != null) {
      subset=c.getSubset().getSet();
      subsetSize=c.getSubset().getArray().length;
    }
  }
}","/** 
 * Creates a new data manager from pre-encoded data.
 * @param header
 * @param data
 * @param dictionary
 * @param definition
 * @param criteria
 * @param function
 */
public DataManager(final String[] header,final int[][] data,final Dictionary dictionary,final DataDefinition definition,final Set<PrivacyCriterion> criteria,final Map<String,DistributionAggregateFunction> functions){
  this.header=header;
  Set<String> attributesGemeralized=definition.getQuasiIdentifiersWithGeneralization();
  Set<String> attributesSensitive=definition.getSensitiveAttributes();
  Set<String> attributesMicroaggregated=definition.getQuasiIdentifiersWithMicroaggregation();
  Set<String> attributesInsensitive=definition.getInsensitiveAttributes();
  final Dictionary dictionaryGeneralized=new Dictionary(attributesGemeralized.size());
  final Dictionary dictionaryAnalyzed=new Dictionary(attributesSensitive.size() + attributesMicroaggregated.size());
  final Dictionary dictionaryStatic=new Dictionary(attributesInsensitive.size());
  final int[] mapGeneralized=new int[dictionaryGeneralized.getNumDimensions()];
  final int[] mapAnalyzed=new int[dictionaryAnalyzed.getNumDimensions()];
  final int[] mapStatic=new int[dictionaryStatic.getNumDimensions()];
  this.microaggregationMap=new int[attributesMicroaggregated.size()];
  this.microaggregationStartIndex=attributesSensitive.size();
  this.microaggregationNumAttributes=attributesMicroaggregated.size();
  int indexStatic=0;
  int indexGeneralized=0;
  int indexAnalyzed=0;
  int indexSensitive=0;
  int indexMicroaggregated=this.microaggregationStartIndex;
  int counter=0;
  final int[] map=new int[header.length * 2];
  final String[] headerGH=new String[dictionaryGeneralized.getNumDimensions()];
  final String[] headerDI=new String[dictionaryAnalyzed.getNumDimensions()];
  final String[] headerIS=new String[dictionaryStatic.getNumDimensions()];
  microaggregationHeader=new String[attributesMicroaggregated.size()];
  for (  final String column : header) {
    final int idx=counter * 2;
    if (attributesGemeralized.contains(column)) {
      map[idx]=AttributeTypeInternal.QUASI_IDENTIFYING_GENERALIZED;
      map[idx + 1]=indexGeneralized;
      mapGeneralized[indexGeneralized]=counter;
      dictionaryGeneralized.registerAll(indexGeneralized,dictionary,counter);
      headerGH[indexGeneralized]=header[counter];
      indexGeneralized++;
    }
 else     if (attributesMicroaggregated.contains(column)) {
      map[idx]=AttributeTypeInternal.QUASI_IDENTIFYING_MICROAGGREGATED;
      map[idx + 1]=indexMicroaggregated;
      mapAnalyzed[indexMicroaggregated]=counter;
      dictionaryAnalyzed.registerAll(indexMicroaggregated,dictionary,counter);
      headerDI[indexMicroaggregated]=header[counter];
      indexMicroaggregated++;
      microaggregationMap[indexAnalyzed]=counter;
      microaggregationHeader[indexAnalyzed]=header[counter];
      indexAnalyzed++;
    }
 else     if (attributesInsensitive.contains(column)) {
      map[idx]=AttributeTypeInternal.INSENSITIVE;
      map[idx + 1]=indexStatic;
      mapStatic[indexStatic]=counter;
      dictionaryStatic.registerAll(indexStatic,dictionary,counter);
      headerIS[indexStatic]=header[counter];
      indexStatic++;
    }
 else     if (attributesSensitive.contains(column)) {
      map[idx]=AttributeTypeInternal.SENSITIVE;
      map[idx + 1]=indexSensitive;
      mapAnalyzed[indexSensitive]=counter;
      dictionaryAnalyzed.registerAll(indexSensitive,dictionary,counter);
      headerDI[indexSensitive]=header[counter];
      indexSensitive++;
    }
 else {
      map[idx]=AttributeTypeInternal.IDENTIFYING;
      map[idx + 1]=-1;
    }
    counter++;
  }
  final Data[] ddata=encode(data,map,mapGeneralized,mapAnalyzed,mapStatic,dictionaryGeneralized,dictionaryAnalyzed,dictionaryStatic,headerGH,headerDI,headerIS);
  dataGeneralized=ddata[0];
  dataAnalyzed=ddata[1];
  dataStatic=ddata[2];
  minLevels=new int[attributesGemeralized.size()];
  hierarchiesHeights=new int[attributesGemeralized.size()];
  maxLevels=new int[attributesGemeralized.size()];
  hierarchiesGeneralized=new GeneralizationHierarchy[attributesGemeralized.size()];
  for (int i=0; i < header.length; i++) {
    final int idx=i * 2;
    if (attributesGemeralized.contains(header[i]) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_GENERALIZED) {
      final int dictionaryIndex=map[idx + 1];
      final String name=header[i];
      if (definition.getHierarchy(name) != null) {
        hierarchiesGeneralized[dictionaryIndex]=new GeneralizationHierarchy(name,definition.getHierarchy(name),dictionaryIndex,dictionaryGeneralized);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + header[i] + ""String_Node_Str"");
      }
      hierarchiesHeights[dictionaryIndex]=hierarchiesGeneralized[dictionaryIndex].getArray()[0].length;
      final Integer minGenLevel=definition.getMinimumGeneralization(name);
      minLevels[dictionaryIndex]=minGenLevel == null ? 0 : minGenLevel;
      final Integer maxGenLevel=definition.getMaximumGeneralization(name);
      maxLevels[dictionaryIndex]=maxGenLevel == null ? hierarchiesHeights[dictionaryIndex] - 1 : maxGenLevel;
    }
  }
  for (  PrivacyCriterion c : criteria) {
    if (c instanceof EDDifferentialPrivacy) {
      DataGeneralizationScheme scheme=((EDDifferentialPrivacy)c).getGeneralizationScheme();
      for (int i=0; i < header.length; i++) {
        final int idx=i * 2;
        if (attributesGemeralized.contains(header[i]) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_GENERALIZED) {
          minLevels[map[idx + 1]]=scheme.getGeneralizationLevel(header[i],definition);
          maxLevels[map[idx + 1]]=scheme.getGeneralizationLevel(header[i],definition);
        }
      }
      break;
    }
  }
  Map<String,String[][]> sensitiveHierarchies=new HashMap<String,String[][]>();
  for (  PrivacyCriterion c : criteria) {
    if (c instanceof HierarchicalDistanceTCloseness) {
      HierarchicalDistanceTCloseness t=(HierarchicalDistanceTCloseness)c;
      sensitiveHierarchies.put(t.getAttribute(),t.getHierarchy().getHierarchy());
    }
  }
  hierarchiesSensitive=new HashMap<String,GeneralizationHierarchy>();
  indexesSensitive=new HashMap<String,Integer>();
  int index=0;
  for (int i=0; i < header.length; i++) {
    final String name=header[i];
    final int idx=i * 2;
    if (sensitiveHierarchies.containsKey(name) && map[idx] == AttributeTypeInternal.SENSITIVE) {
      final int dictionaryIndex=map[idx + 1];
      final String[][] hiers=sensitiveHierarchies.get(name);
      if (hiers != null) {
        hierarchiesSensitive.put(name,new GeneralizationHierarchy(name,hiers,dictionaryIndex,dictionaryAnalyzed));
      }
    }
    if (attributesSensitive.contains(header[i])) {
      indexesSensitive.put(name,index);
      index++;
    }
  }
  Map<String,String[][]> maHierarchies=new HashMap<String,String[][]>();
  for (  String attribute : functions.keySet()) {
    if (functions.get(attribute) instanceof DistributionAggregateFunctionGeneralization) {
      maHierarchies.put(attribute,definition.getHierarchy(attribute));
    }
  }
  Map<String,int[][]> hierarchiesMA=new HashMap<String,int[][]>();
  index=0;
  for (int i=0; i < header.length; i++) {
    final String name=header[i];
    final int idx=i * 2;
    if (maHierarchies.containsKey(name) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_MICROAGGREGATED) {
      final int dictionaryIndex=map[idx + 1];
      final String[][] hiers=maHierarchies.get(name);
      if (hiers != null) {
        hierarchiesMA.put(name,new GeneralizationHierarchy(name,hiers,dictionaryIndex,dictionaryAnalyzed).map);
      }
    }
  }
  dictionaryGeneralized.finalizeAll();
  dictionaryAnalyzed.finalizeAll();
  dictionaryStatic.finalizeAll();
  microaggregationFunctions=new DistributionAggregateFunction[attributesMicroaggregated.size()];
  for (int i=0; i < header.length; i++) {
    final int idx=i * 2;
    if (attributesMicroaggregated.contains(header[i]) && map[idx] == AttributeTypeInternal.QUASI_IDENTIFYING_MICROAGGREGATED) {
      final int dictionaryIndex=map[idx + 1] - microaggregationStartIndex;
      final String name=header[i];
      if (definition.getMicroAggregationFunction(name) != null) {
        microaggregationFunctions[dictionaryIndex]=functions.get(name);
        microaggregationFunctions[dictionaryIndex].initialize(dictionaryAnalyzed.getMapping()[dictionaryIndex + microaggregationStartIndex],definition.getDataType(name),hierarchiesMA.get(name));
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + header[i] + ""String_Node_Str"");
      }
    }
  }
  for (  PrivacyCriterion c : criteria) {
    if (c instanceof EDDifferentialPrivacy) {
      ((EDDifferentialPrivacy)c).initialize(this);
    }
    if (c.getSubset() != null) {
      subset=c.getSubset().getSet();
      subsetSize=c.getSubset().getArray().length;
    }
  }
}",0.9942059965123474
107970,"/** 
 * Writes the hierarchies to the file.
 * @param config
 * @param prefix
 * @param zip
 * @throws IOException
 */
private void writeHierarchies(final ModelConfiguration config,final String prefix,final ZipOutputStream zip) throws IOException {
  for (  Entry<String,Hierarchy> entry : config.getHierarchies().entrySet()) {
    zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(entry.getKey())+ ""String_Node_Str""));
    final CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
    out.write(entry.getValue().getHierarchy());
  }
}","/** 
 * Writes the hierarchies to the file.
 * @param config
 * @param prefix
 * @param zip
 * @throws IOException
 */
private void writeHierarchies(final ModelConfiguration config,final String prefix,final ZipOutputStream zip) throws IOException {
  for (  Entry<String,Hierarchy> entry : config.getHierarchies().entrySet()) {
    zip.putNextEntry(new ZipEntry(prefix + ""String_Node_Str"" + toFileName(entry.getKey())+ ""String_Node_Str""));
    final CSVDataOutput out=new CSVDataOutput(zip,model.getCSVSyntax().getDelimiter());
    if (entry.getValue().getHierarchy() != null) {
      out.write(entry.getValue().getHierarchy());
    }
  }
}",0.9516789516789516
107971,"/** 
 * Creates the design of this page This adds all the controls to the page along with their listeners.
 * @param parent
 * @note {@link #tablePreview} is not visible until a file is loaded.
 */
public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  setControl(container);
  container.setLayout(new GridLayout(3,false));
  lblLocation=new Label(container,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblLocation.setText(Resources.getMessage(""String_Node_Str""));
  comboLocation=new Combo(container,SWT.READ_ONLY);
  comboLocation.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  comboLocation.addSelectionListener(new SelectionAdapter(){
    /** 
 * Reads the sheets and selects active one
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      try {
        readSheets();
      }
 catch (      IOException e) {
        setErrorMessage(Resources.getMessage(""String_Node_Str""));
        return;
      }
      comboSheet.setVisible(true);
      lblSheet.setVisible(true);
      btnContainsHeader.setVisible(true);
      comboSheet.select(workbook.getActiveSheetIndex());
      comboSheet.notifyListeners(SWT.Selection,null);
    }
  }
);
  btnChoose=new Button(container,SWT.NONE);
  btnChoose.setText(Resources.getMessage(""String_Node_Str""));
  btnChoose.addSelectionListener(new SelectionAdapter(){
    /** 
 * Opens a file selection dialog for Excel files Both XLS and XLSX files can be selected. If a valid file was selected, it is added to   {@link #comboLocation} when it wasn'talready there. In either case it gets preselected.
 * @see {@link Controller#actionShowOpenFileDialog(String)}
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      final String path=wizardImport.getController().actionShowOpenFileDialog(getShell(),""String_Node_Str"");
      if (path == null) {
        return;
      }
      if (comboLocation.indexOf(path) == -1) {
        comboLocation.add(path,0);
      }
      comboLocation.select(comboLocation.indexOf(path));
      comboLocation.notifyListeners(SWT.Selection,null);
    }
  }
);
  lblSheet=new Label(container,SWT.NONE);
  lblSheet.setVisible(false);
  lblSheet.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblSheet.setText(Resources.getMessage(""String_Node_Str""));
  comboSheet=new Combo(container,SWT.READ_ONLY);
  comboSheet.setVisible(false);
  comboSheet.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  comboSheet.addSelectionListener(new SelectionAdapter(){
    /** 
 * (Re-)Evaluate page
 */
    @Override public void widgetSelected(    final SelectionEvent arg0){
      evaluatePage();
    }
  }
);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  btnContainsHeader=new Button(container,SWT.CHECK);
  btnContainsHeader.setVisible(false);
  btnContainsHeader.setText(Resources.getMessage(""String_Node_Str""));
  btnContainsHeader.setSelection(true);
  btnContainsHeader.addSelectionListener(new SelectionAdapter(){
    /** 
 * (Re-)Evaluate page
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      evaluatePage();
    }
  }
);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  tableViewerPreview=SWTUtil.createTableViewer(container,SWT.BORDER | SWT.FULL_SELECTION);
  tableViewerPreview.setContentProvider(new ArrayContentProvider());
  tablePreview=tableViewerPreview.getTable();
  GridData gd_tablePreview=new GridData(SWT.FILL,SWT.FILL,true,true,3,1);
  gd_tablePreview.heightHint=150;
  tablePreview.setLayoutData(gd_tablePreview);
  tablePreview.setLinesVisible(true);
  tablePreview.setVisible(false);
  setPageComplete(false);
}","/** 
 * Creates the design of this page This adds all the controls to the page along with their listeners.
 * @param parent
 * @note {@link #tablePreview} is not visible until a file is loaded.
 */
public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  setControl(container);
  container.setLayout(new GridLayout(3,false));
  lblLocation=new Label(container,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblLocation.setText(Resources.getMessage(""String_Node_Str""));
  comboLocation=new Combo(container,SWT.READ_ONLY);
  comboLocation.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  comboLocation.addSelectionListener(new SelectionAdapter(){
    /** 
 * Reads the sheets and selects active one
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      try {
        readSheets();
      }
 catch (      IOException e) {
        setErrorMessage(Resources.getMessage(""String_Node_Str""));
        resetPage();
        return;
      }
      comboSheet.setVisible(true);
      lblSheet.setVisible(true);
      btnContainsHeader.setVisible(true);
      comboSheet.select(workbook.getActiveSheetIndex());
      comboSheet.notifyListeners(SWT.Selection,null);
    }
  }
);
  btnChoose=new Button(container,SWT.NONE);
  btnChoose.setText(Resources.getMessage(""String_Node_Str""));
  btnChoose.addSelectionListener(new SelectionAdapter(){
    /** 
 * Opens a file selection dialog for Excel files Both XLS and XLSX files can be selected. If a valid file was selected, it is added to   {@link #comboLocation} when it wasn'talready there. In either case it gets preselected.
 * @see {@link Controller#actionShowOpenFileDialog(String)}
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      final String path=wizardImport.getController().actionShowOpenFileDialog(getShell(),""String_Node_Str"");
      if (path == null) {
        return;
      }
      if (comboLocation.indexOf(path) == -1) {
        comboLocation.add(path,0);
      }
      comboLocation.select(comboLocation.indexOf(path));
      comboLocation.notifyListeners(SWT.Selection,null);
    }
  }
);
  lblSheet=new Label(container,SWT.NONE);
  lblSheet.setVisible(false);
  lblSheet.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblSheet.setText(Resources.getMessage(""String_Node_Str""));
  comboSheet=new Combo(container,SWT.READ_ONLY);
  comboSheet.setVisible(false);
  comboSheet.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  comboSheet.addSelectionListener(new SelectionAdapter(){
    /** 
 * (Re-)Evaluate page
 */
    @Override public void widgetSelected(    final SelectionEvent arg0){
      evaluatePage();
    }
  }
);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  btnContainsHeader=new Button(container,SWT.CHECK);
  btnContainsHeader.setVisible(false);
  btnContainsHeader.setText(Resources.getMessage(""String_Node_Str""));
  btnContainsHeader.setSelection(true);
  btnContainsHeader.addSelectionListener(new SelectionAdapter(){
    /** 
 * (Re-)Evaluate page
 */
    @Override public void widgetSelected(    SelectionEvent arg0){
      evaluatePage();
    }
  }
);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  new Label(container,SWT.NONE);
  tableViewerPreview=SWTUtil.createTableViewer(container,SWT.BORDER | SWT.FULL_SELECTION);
  tableViewerPreview.setContentProvider(new ArrayContentProvider());
  tablePreview=tableViewerPreview.getTable();
  GridData gd_tablePreview=new GridData(SWT.FILL,SWT.FILL,true,true,3,1);
  gd_tablePreview.heightHint=150;
  tablePreview.setLayoutData(gd_tablePreview);
  tablePreview.setLinesVisible(true);
  tablePreview.setVisible(false);
  setPageComplete(false);
}",0.9972523878058354
107972,"/** 
 * Creates a new instance which may be configured to produce deterministic output. Note: *never* use this in production. It is implemented for testing purposes, only.
 * @param epsilon
 * @param delta
 * @param generalization
 * @param deterministic
 */
public EDDifferentialPrivacy(double epsilon,double delta,DataGeneralizationScheme generalization,boolean deterministic){
  super(false,false);
  this.epsilon=epsilon;
  this.delta=delta;
  this.generalization=generalization;
  this.beta=calculateBeta(epsilon);
  this.k=calculateK(delta,epsilon,this.beta);
  if (deterministic) {
    this.random=new Random(0xDEADBEEF);
  }
}","/** 
 * Creates a new instance which may be configured to produce deterministic output. Note: *never* use this in production. It is implemented for testing purposes, only.
 * @param epsilon
 * @param delta
 * @param generalization
 * @param deterministic
 */
public EDDifferentialPrivacy(double epsilon,double delta,DataGeneralizationScheme generalization,boolean deterministic){
  super(false,false);
  this.epsilon=epsilon;
  this.delta=delta;
  this.generalization=generalization;
  this.beta=calculateBeta(epsilon);
  this.k=calculateK(delta,epsilon,this.beta);
  this.deterministic=true;
}",0.9283387622149836
107973,"/** 
 * Creates a random sample based on beta
 * @param manager
 */
public void initialize(DataManager manager){
  if (subset != null && this.manager == null) {
    this.manager=manager;
    return;
  }
  if (subset != null && this.manager == manager) {
    return;
  }
  Set<Integer> subsetIndices=new HashSet<Integer>();
  if (random == null) {
    random=new SecureRandom();
  }
  int records=manager.getDataGeneralized().getDataLength();
  for (int i=0; i < records; ++i) {
    if (random.nextDouble() < beta) {
      subsetIndices.add(i);
    }
  }
  this.subset=DataSubset.create(records,subsetIndices);
  this.manager=manager;
}","/** 
 * Creates a random sample based on beta
 * @param manager
 */
public void initialize(DataManager manager){
  if (subset != null && this.manager == null) {
    this.manager=manager;
    return;
  }
  if (subset != null && this.manager == manager) {
    return;
  }
  Random random;
  if (deterministic) {
    random=new Random(0xDEADBEEF);
  }
 else {
    random=new SecureRandom();
  }
  Set<Integer> subsetIndices=new HashSet<Integer>();
  int records=manager.getDataGeneralized().getDataLength();
  for (int i=0; i < records; ++i) {
    if (random.nextDouble() < beta) {
      subsetIndices.add(i);
    }
  }
  this.subset=DataSubset.create(records,subsetIndices);
  this.manager=manager;
}",0.8642160540135033
107974,"@Override public void onInterrupt(){
  if (!isEnabled()) {
    setStatusEmpty();
  }
 else {
    setStatusWorking();
  }
}","@Override public void onInterrupt(){
  if (!isEnabled() || getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty()) {
    setStatusEmpty();
  }
 else {
    setStatusWorking();
  }
}",0.7283582089552239
107975,"@Override public void update(ModelEvent event){
  super.update(event);
  if (event.part == ModelPart.SELECTED_FEATURES_OR_CLASSES || event.part == ModelPart.DATA_TYPE) {
    triggerUpdate();
  }
  if (event.part == ModelPart.SELECTED_ATTRIBUTE) {
    int index=0;
    for (    TableItem item : table.getItems()) {
      if (item.getText(0).equals(super.getModel().getSelectedAttribute())) {
        table.select(index);
        if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
          setChartSeries((PrecisionRecallMatrix)item.getData());
        }
        return;
      }
      index++;
    }
  }
}","@Override public void update(ModelEvent event){
  super.update(event);
  if (event.part == ModelPart.SELECTED_FEATURES_OR_CLASSES || event.part == ModelPart.DATA_TYPE) {
    if (getModel() != null && (getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty())) {
      doReset();
      return;
    }
 else {
      triggerUpdate();
    }
  }
  if (event.part == ModelPart.SELECTED_ATTRIBUTE) {
    int index=0;
    for (    TableItem item : table.getItems()) {
      if (item.getText(0).equals(super.getModel().getSelectedAttribute())) {
        table.select(index);
        if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
          setChartSeries((PrecisionRecallMatrix)item.getData());
        }
        return;
      }
      index++;
    }
  }
}",0.8781163434903048
107976,"@Override public void onFinish(){
  if (stopped || !isEnabled()) {
    return;
  }
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  for (int i=0; i < classes.length; i++) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(0,classes[i]);
    item.setText(1,String.valueOf(numClasses.get(i)));
    for (int j=0; j < values.get(i).size(); j++) {
      item.setData(String.valueOf(2 + j),values.get(i).get(j));
    }
    item.setData(matrixes.get(i));
  }
  table.setFocus();
  table.select(0);
  setChartSeries(matrixes.get(0));
  root.layout();
  sash.setWeights(new int[]{2,2});
  setStatusDone();
}","@Override public void onFinish(){
  if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
    setStatusEmpty();
    return;
  }
  for (  final TableItem i : table.getItems()) {
    i.dispose();
  }
  for (int i=0; i < classes.length; i++) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(0,classes[i]);
    item.setText(1,String.valueOf(numClasses.get(i)));
    for (int j=0; j < values.get(i).size(); j++) {
      item.setData(String.valueOf(2 + j),values.get(i).get(j));
    }
    item.setData(matrixes.get(i));
  }
  table.setFocus();
  table.select(0);
  setChartSeries(matrixes.get(0));
  root.layout();
  sash.setWeights(new int[]{2,2});
  setStatusDone();
}",0.9194244604316548
107977,"@Override protected void doUpdate(final AnalysisContextClassification context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  final String[] features=context.model.getSelectedFeatures().toArray(new String[0]);
  final String[] classes=context.model.getSelectedClasses().toArray(new String[0]);
  final double fraction=context.handle.getNumRows() > context.model.getClassificationModel().getMaximalNumberOfRecords() ? (double)context.model.getClassificationModel().getMaximalNumberOfRecords() / (double)context.handle.getNumRows() : 1d;
  final Integer seed=context.model.getClassificationModel().getSeed();
  final Integer numberOfFolds=context.model.getClassificationModel().getNumberOfFolds();
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private List<List<Double>> values=new ArrayList<>();
    private List<Integer> numClasses=new ArrayList<>();
    private List<PrecisionRecallMatrix> matrixes=new ArrayList<>();
    private int progress=0;
    @Override public int getProgress(){
      return (int)((double)progress / (double)classes.length * 100d);
    }
    @Override public void onError(){
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled()) {
        return;
      }
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      for (int i=0; i < classes.length; i++) {
        TableItem item=new TableItem(table,SWT.NONE);
        item.setText(0,classes[i]);
        item.setText(1,String.valueOf(numClasses.get(i)));
        for (int j=0; j < values.get(i).size(); j++) {
          item.setData(String.valueOf(2 + j),values.get(i).get(j));
        }
        item.setData(matrixes.get(i));
      }
      table.setFocus();
      table.select(0);
      setChartSeries(matrixes.get(0));
      root.layout();
      sash.setWeights(new int[]{2,2});
      setStatusDone();
    }
    @Override public void onInterrupt(){
      if (!isEnabled()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      for (      String clazz : classes) {
        StatisticsClassification result=builder.getClassificationPerformance(features,clazz,seed,fraction);
        progress++;
        if (stopped) {
          break;
        }
        numClasses.add(result.getNumClasses());
        values.add(getColumnValues(result));
        matrixes.add(result.getPrecisionRecall());
      }
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}","@Override protected void doUpdate(final AnalysisContextClassification context){
  final StatisticsBuilderInterruptible builder=context.handle.getStatistics().getInterruptibleInstance();
  final String[] features=context.model.getSelectedFeatures().toArray(new String[0]);
  final String[] classes=context.model.getSelectedClasses().toArray(new String[0]);
  final double fraction=context.handle.getNumRows() > context.model.getClassificationModel().getMaximalNumberOfRecords() ? (double)context.model.getClassificationModel().getMaximalNumberOfRecords() / (double)context.handle.getNumRows() : 1d;
  final Integer seed=context.model.getClassificationModel().getSeed();
  final Integer numberOfFolds=context.model.getClassificationModel().getNumberOfFolds();
  if (context.model.getSelectedFeatures().isEmpty() || context.model.getSelectedClasses().isEmpty()) {
    doReset();
    return;
  }
  Analysis analysis=new Analysis(){
    private boolean stopped=false;
    private List<List<Double>> values=new ArrayList<>();
    private List<Integer> numClasses=new ArrayList<>();
    private List<PrecisionRecallMatrix> matrixes=new ArrayList<>();
    private int progress=0;
    @Override public int getProgress(){
      return (int)((double)progress / (double)classes.length * 100d);
    }
    @Override public void onError(){
      setStatusEmpty();
    }
    @Override public void onFinish(){
      if (stopped || !isEnabled() || getModel().getSelectedFeatures().isEmpty()|| getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
        return;
      }
      for (      final TableItem i : table.getItems()) {
        i.dispose();
      }
      for (int i=0; i < classes.length; i++) {
        TableItem item=new TableItem(table,SWT.NONE);
        item.setText(0,classes[i]);
        item.setText(1,String.valueOf(numClasses.get(i)));
        for (int j=0; j < values.get(i).size(); j++) {
          item.setData(String.valueOf(2 + j),values.get(i).get(j));
        }
        item.setData(matrixes.get(i));
      }
      table.setFocus();
      table.select(0);
      setChartSeries(matrixes.get(0));
      root.layout();
      sash.setWeights(new int[]{2,2});
      setStatusDone();
    }
    @Override public void onInterrupt(){
      if (!isEnabled() || getModel().getSelectedFeatures().isEmpty() || getModel().getSelectedClasses().isEmpty()) {
        setStatusEmpty();
      }
 else {
        setStatusWorking();
      }
    }
    @Override public void run() throws InterruptedException {
      long time=System.currentTimeMillis();
      for (      String clazz : classes) {
        StatisticsClassification result=builder.getClassificationPerformance(features,clazz,seed,fraction);
        progress++;
        if (stopped) {
          break;
        }
        numClasses.add(result.getNumClasses());
        values.add(getColumnValues(result));
        matrixes.add(result.getPrecisionRecall());
      }
      while (System.currentTimeMillis() - time < MINIMAL_WORKING_TIME && !stopped) {
        Thread.sleep(10);
      }
    }
    @Override public void stop(){
      builder.interrupt();
      this.stopped=true;
    }
  }
;
  this.manager.start(analysis);
}",0.9434212709474034
107978,"@Override protected List<Double> getColumnValues(StatisticsClassification result){
  List<Double> list=new ArrayList<Double>();
  list.add(result.getZeroRAccuracy());
  list.add(result.getOriginalAccuracy());
  list.add(result.getAccuracy());
  list.add((result.getAccuracy() - result.getZeroRAccuracy()) / (result.getOriginalAccuracy() - result.getZeroRAccuracy()));
  list.add(result.getAverageError());
  list.add(result.getAverageError() - result.getOriginalAverageError());
  return list;
}","@Override protected List<Double> getColumnValues(StatisticsClassification result){
  List<Double> list=new ArrayList<Double>();
  list.add(result.getZeroRAccuracy());
  list.add(result.getOriginalAccuracy());
  list.add(result.getAccuracy());
  if (result.getOriginalAccuracy() - result.getZeroRAccuracy() == 0d) {
    list.add(result.getAccuracy() / result.getZeroRAccuracy());
  }
 else {
    list.add((result.getAccuracy() - result.getZeroRAccuracy()) / (result.getOriginalAccuracy() - result.getZeroRAccuracy()));
  }
  list.add(result.getAverageError());
  list.add(result.getAverageError() - result.getOriginalAverageError());
  return list;
}",0.8304195804195804
107979,"/** 
 * Packs the results
 */
void pack(){
  for (int i=0; i < CONFIDENCE_THRESHOLDS.length; i++) {
    precision[i]/=recall[i];
    recall[i]/=measurements;
  }
}","/** 
 * Packs the results
 */
void pack(){
  for (int i=0; i < CONFIDENCE_THRESHOLDS.length; i++) {
    if (recall[i] == 0d) {
      precision[i]=1d;
    }
 else {
      precision[i]/=recall[i];
      recall[i]/=measurements;
    }
  }
}",0.735
107980,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getAlpha()
 */
public double getAlpha(){
  return config.getAlpha();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getAlpha()
 */
public double getAlpha(){
  return getConfig().getAlpha();
}",0.9770491803278688
107981,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getLambda()
 */
public double getLambda(){
  return config.getLambda();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getLambda()
 */
public double getLambda(){
  return getConfig().getLambda();
}",0.977491961414791
107982,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getStepOffset()
 */
public int getStepOffset(){
  return config.getStepOffset();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getStepOffset()
 */
public int getStepOffset(){
  return getConfig().getStepOffset();
}",0.9787234042553192
107983,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getPriorFunction()
 */
public PriorFunction getPriorFunction(){
  return config.getPriorFunction();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getPriorFunction()
 */
public PriorFunction getPriorFunction(){
  return getConfig().getPriorFunction();
}",0.9809264305177112
107984,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getDecayExponent()
 */
public double getDecayExponent(){
  return config.getDecayExponent();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getDecayExponent()
 */
public double getDecayExponent(){
  return getConfig().getDecayExponent();
}",0.980169971671388
107985,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getSeed()
 */
public Integer getSeed(){
  return config.getSeed();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getSeed()
 */
public Integer getSeed(){
  return getConfig().getSeed();
}",0.9767441860465116
107986,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getVectorLength()
 */
public int getVectorLength(){
  return config.getVectorLength();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getVectorLength()
 */
public int getVectorLength(){
  return getConfig().getVectorLength();
}",0.9794721407624634
107987,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getMaxRecords()
 */
public int getMaxRecords(){
  return config.getMaxRecords();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getMaxRecords()
 */
public int getMaxRecords(){
  return getConfig().getMaxRecords();
}",0.9787234042553192
107988,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getNumFolds()
 */
public Integer getNumberOfFolds(){
  return config.getNumFolds();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getNumFolds()
 */
public Integer getNumberOfFolds(){
  return getConfig().getNumFolds();
}",0.9791044776119404
107989,"/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getLearningRate()
 */
public double getLearningRate(){
  return config.getLearningRate();
}","/** 
 * @return
 * @see org.deidentifier.arx.ARXLogisticRegressionConfiguration#getLearningRate()
 */
public double getLearningRate(){
  return getConfig().getLearningRate();
}",0.9798270893371758
107990,"/** 
 * Returns the maximum generalization for the attribute.
 * @param attribute
 * @return
 */
public int getMaximumGeneralization(final String attribute){
  checkQuasiIdentifier(attribute);
  Integer result=maxGeneralization.get(attribute);
  if (result != null)   return result;
  if (this.getHierarchy(attribute) != null) {
    String[][] hierarchy=this.getHierarchy(attribute);
    if (hierarchy.length == 0 || hierarchy[0] == null) {
      return 0;
    }
 else {
      return hierarchy[0].length - 1;
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + attribute + ""String_Node_Str"");
  }
}","/** 
 * Returns the maximum generalization for the attribute.
 * @param attribute
 * @return
 */
public int getMaximumGeneralization(final String attribute){
  checkQuasiIdentifier(attribute);
  Integer result=maxGeneralization.get(attribute);
  if (result != null)   return result;
  if (this.getHierarchy(attribute) != null) {
    String[][] hierarchy=this.getHierarchy(attribute);
    if (hierarchy.length == 0 || hierarchy[0] == null) {
      return 0;
    }
 else {
      return hierarchy[0].length - 1;
    }
  }
 else {
    return 0;
  }
}",0.9228130360205832
107991,"@Override public void handleEvent(Event event){
  if (chart != null) {
    IAxisSet axisSet=chart.getAxisSet();
    if (axisSet != null) {
      IAxis xAxis=axisSet.getXAxis(0);
      if (xAxis != null) {
        Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
        if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
          String[] series=xAxis.getCategorySeries();
          ISeries[] data=chart.getSeriesSet().getSeries();
          if (data != null && data.length > 0 && series != null) {
            int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
            if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
              builder.setLength(0);
              builder.append(""String_Node_Str"");
              builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
              builder.append(series[x]);
              builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
              builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
              builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
              builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
              builder.append(""String_Node_Str"");
              root.setToolTipText(builder.toString());
              return;
            }
          }
        }
      }
    }
    root.setToolTipText(null);
  }
}","@Override public void handleEvent(Event event){
  if (chart != null) {
    IAxisSet axisSet=chart.getAxisSet();
    if (axisSet != null) {
      IAxis xAxis=axisSet.getXAxis(0);
      if (xAxis != null) {
        Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
        if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
          String[] series=xAxis.getCategorySeries();
          ISeries[] data=chart.getSeriesSet().getSeries();
          if (data != null && data.length > 0 && series != null) {
            int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
            if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
              builder.setLength(0);
              builder.append(""String_Node_Str"");
              builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
              builder.append(series[x]);
              builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
              builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
              builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
              builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
              builder.append(""String_Node_Str"");
              sash.setToolTipText(builder.toString());
              return;
            }
          }
        }
      }
    }
    sash.setToolTipText(null);
  }
}",0.9938042131350682
107992,"@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.root.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length > 0 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  root.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        root.setToolTipText(null);
      }
    }
  }
);
  this.table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (table.getSelectionIndex() >= 0 && table.getSelectionIndex() < table.getItemCount()) {
        TableItem item=table.getItem(table.getSelectionIndex());
        if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
          setChartSeries((PrecisionRecallMatrix)item.getData());
        }
        getModel().setSelectedAttribute(item.getText(0));
        getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
      }
    }
  }
);
  return this.root;
}","@Override protected Control createControl(Composite parent){
  this.root=new Composite(parent,SWT.NONE);
  this.root.setLayout(new FillLayout());
  this.sash=new SashForm(this.root,SWT.VERTICAL);
  this.table=SWTUtil.createTableDynamic(this.sash,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  this.table.setHeaderVisible(true);
  this.table.setLinesVisible(true);
  this.table.setMenu(new ClipboardHandlerTable(table).getMenu());
  String[] columns=getColumnHeaders();
  String width=String.valueOf(Math.round(100d / ((double)columns.length + 2) * 100d) / 100d) + ""String_Node_Str"";
  DynamicTableColumn c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  c=new DynamicTableColumn(table,SWT.LEFT);
  c.setWidth(width,""String_Node_Str"");
  c.setText(Resources.getMessage(""String_Node_Str""));
  for (  String column : columns) {
    c=new DynamicTableColumn(table,SWT.LEFT);
    SWTUtil.createColumnWithBarCharts(table,c);
    c.setWidth(width,""String_Node_Str"");
    c.setText(column);
  }
  for (  final TableColumn col : table.getColumns()) {
    col.pack();
  }
  SWTUtil.createGenericTooltip(table);
  resetChart();
  this.sash.setWeights(new int[]{2,2});
  final StringBuilder builder=new StringBuilder();
  this.sash.addListener(SWT.MouseMove,new Listener(){
    @Override public void handleEvent(    Event event){
      if (chart != null) {
        IAxisSet axisSet=chart.getAxisSet();
        if (axisSet != null) {
          IAxis xAxis=axisSet.getXAxis(0);
          if (xAxis != null) {
            Point cursor=chart.getPlotArea().toControl(Display.getCurrent().getCursorLocation());
            if (cursor.x >= 0 && cursor.x < chart.getPlotArea().getSize().x && cursor.y >= 0 && cursor.y < chart.getPlotArea().getSize().y) {
              String[] series=xAxis.getCategorySeries();
              ISeries[] data=chart.getSeriesSet().getSeries();
              if (data != null && data.length > 0 && series != null) {
                int x=(int)Math.round(xAxis.getDataCoordinate(cursor.x));
                if (x >= 0 && x < series.length && !series[x].equals(""String_Node_Str"")) {
                  builder.setLength(0);
                  builder.append(""String_Node_Str"");
                  builder.append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(series[x]);
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[0].getYSeries()[x]));
                  builder.append(""String_Node_Str"").append(Resources.getMessage(""String_Node_Str"")).append(""String_Node_Str"");
                  builder.append(SWTUtil.getPrettyString(data[1].getYSeries()[x]));
                  builder.append(""String_Node_Str"");
                  sash.setToolTipText(builder.toString());
                  return;
                }
              }
            }
          }
        }
        sash.setToolTipText(null);
      }
    }
  }
);
  this.table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (table.getSelectionIndex() >= 0 && table.getSelectionIndex() < table.getItemCount()) {
        TableItem item=table.getItem(table.getSelectionIndex());
        if (item.getData() != null && item.getData() instanceof PrecisionRecallMatrix) {
          setChartSeries((PrecisionRecallMatrix)item.getData());
        }
        getModel().setSelectedAttribute(item.getText(0));
        getController().update(new ModelEvent(ViewStatisticsLogisticRegression.this,ModelPart.SELECTED_ATTRIBUTE,item.getText(0)));
      }
    }
  }
);
  return this.root;
}",0.9962992334126356
107993,"/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param seed - The random seed, null, if the process should be randomized
 * @param samplingFraction - The sampling fraction
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,Integer seed,double samplingFraction,WrappedBoolean interrupt) throws ParseException {
  this.interrupt=interrupt;
  if (samplingFraction <= 0d || samplingFraction > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (seed == null) {
    this.random=new Random();
  }
 else {
    this.random=new Random(seed);
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,features,clazz,interrupt);
  int k=inputHandle.getNumRows() > 10 ? 10 : inputHandle.getNumRows();
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),k);
  int classifications=0;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputLR=new MultiClassLogisticRegression(specification);
    ClassificationMethod inputZR=new MultiClassZeroR(specification);
    ClassificationMethod outputLR=null;
    if (inputHandle != outputHandle) {
      outputLR=new MultiClassLogisticRegression(specification);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputLR.train(inputHandle,outputHandle,index);
            inputZR.train(inputHandle,outputHandle,index);
            if (outputLR != null && !outputHandle.isOutlier(index)) {
              outputLR.train(outputHandle,outputHandle,index);
            }
            trained=true;
          }
        }
      }
      inputLR.close();
      inputZR.close();
      if (outputLR != null) {
        outputLR.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInputLR=inputLR.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZR.classify(inputHandle,index);
          ClassificationResult resultOutputLR=outputLR == null ? null : outputLR.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          boolean correct=resultInputLR.correct(actualValue);
          this.originalAverageError+=resultInputLR.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          this.originalMatrix.add(resultInputLR.confidence(),correct);
          if (resultOutputLR != null) {
            correct=resultOutputLR.correct(actualValue);
            this.averageError+=resultOutputLR.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            this.matrix.add(resultOutputLR.confidence(),correct);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  this.originalMatrix.pack();
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
    this.matrix.pack();
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
    this.matrix=this.originalMatrix;
  }
  this.numClasses=specification.classMap.size();
  this.numMeasurements=classifications;
}","/** 
 * Creates a new set of statistics for the given classification task
 * @param inputHandle - The input features handle
 * @param outputHandle - The output features handle
 * @param features - The feature attributes
 * @param clazz - The class attributes
 * @param seed - The random seed, null, if the process should be randomized
 * @param samplingFraction - The sampling fraction
 * @throws ParseException 
 */
StatisticsClassification(DataHandleInternal inputHandle,DataHandleInternal outputHandle,String[] features,String clazz,Integer seed,double samplingFraction,WrappedBoolean interrupt) throws ParseException {
  this.interrupt=interrupt;
  if (samplingFraction <= 0d || samplingFraction > 1d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (seed == null) {
    this.random=new Random();
  }
 else {
    this.random=new Random(seed);
  }
  ClassificationDataSpecification specification=new ClassificationDataSpecification(inputHandle,outputHandle,features,clazz,interrupt);
  int k=inputHandle.getNumRows() > 10 ? 10 : inputHandle.getNumRows();
  List<List<Integer>> folds=getFolds(inputHandle.getNumRows(),k);
  int classifications=0;
  for (int evaluationFold=0; evaluationFold < folds.size(); evaluationFold++) {
    ClassificationMethod inputLR=new MultiClassLogisticRegression(specification);
    ClassificationMethod inputZR=new MultiClassZeroR(specification);
    ClassificationMethod outputLR=null;
    if (inputHandle != outputHandle) {
      outputLR=new MultiClassLogisticRegression(specification);
    }
    try {
      boolean trained=false;
      for (int trainingFold=0; trainingFold < folds.size(); trainingFold++) {
        if (trainingFold != evaluationFold) {
          for (          int index : folds.get(trainingFold)) {
            checkInterrupt();
            inputLR.train(inputHandle,outputHandle,index);
            inputZR.train(inputHandle,outputHandle,index);
            if (outputLR != null && !outputHandle.isOutlier(index)) {
              outputLR.train(outputHandle,outputHandle,index);
            }
            trained=true;
          }
        }
      }
      inputLR.close();
      inputZR.close();
      if (outputLR != null) {
        outputLR.close();
      }
      for (      int index : folds.get(evaluationFold)) {
        checkInterrupt();
        if (trained) {
          ClassificationResult resultInputLR=inputLR.classify(inputHandle,index);
          ClassificationResult resultInputZR=inputZR.classify(inputHandle,index);
          ClassificationResult resultOutputLR=outputLR == null ? null : outputLR.classify(outputHandle,index);
          classifications++;
          String actualValue=outputHandle.getValue(index,specification.classIndex,true);
          this.zeroRAverageError+=resultInputZR.error(actualValue);
          this.zeroRAccuracy+=resultInputZR.correct(actualValue) ? 1d : 0d;
          boolean correct=resultInputLR.correct(actualValue);
          this.originalAverageError+=resultInputLR.error(actualValue);
          this.originalAccuracy+=correct ? 1d : 0d;
          this.originalMatrix.add(resultInputLR.confidence(),correct);
          if (resultOutputLR != null) {
            correct=resultOutputLR.correct(actualValue);
            this.averageError+=resultOutputLR.error(actualValue);
            this.accuracy+=correct ? 1d : 0d;
            this.matrix.add(resultOutputLR.confidence(),correct);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  this.zeroRAverageError/=(double)classifications;
  this.zeroRAccuracy/=(double)classifications;
  this.originalAverageError/=(double)classifications;
  this.originalAccuracy/=(double)classifications;
  this.originalMatrix.pack();
  if (inputHandle != outputHandle) {
    this.averageError/=(double)classifications;
    this.accuracy/=(double)classifications;
    this.matrix.pack();
  }
 else {
    this.averageError=this.originalAverageError;
    this.accuracy=this.originalAccuracy;
    this.matrix=this.originalMatrix;
  }
  this.numClasses=specification.classMap.size();
  this.numMeasurements=classifications;
}",0.999396062326368
107994,"@Override public boolean correct(String clazz){
  if (result == null) {
    return false;
  }
  if (map.get(clazz) == null) {
    System.out.println(clazz);
    System.out.println(map);
    System.exit(0);
  }
  return result.intValue() == map.get(clazz).intValue();
}","@Override public boolean correct(String clazz){
  if (result == null) {
    return false;
  }
  return result.intValue() == map.get(clazz).intValue();
}",0.7238095238095238
107995,"/** 
 * Calculates k, based on Poisson distribution.
 * @param lambda
 * @return
 */
private int calculateKPoisson(double lambda){
  final double threshold=1d - this.significanceLevel;
  final PoissonDistribution distribution=new PoissonDistribution(lambda);
  int counter=0;
  double value=0;
  while (value < threshold) {
    value=distribution.cumulativeProbability(counter);
    counter++;
  }
  this.type1Error=1d - value;
  return counter + 1;
}","/** 
 * Calculates k, based on Poisson distribution.
 * @param lambda
 * @return
 */
private int calculateKPoisson(double lambda){
  final double threshold=1d - this.significanceLevel;
  final PoissonDistribution distribution=new PoissonDistribution(lambda);
  int counter=0;
  double value=0;
  while (value < threshold) {
    value=distribution.cumulativeProbability(counter);
    counter++;
    if (counter >= this.k) {
      value=1d;
      break;
    }
  }
  this.type1Error=1d - value;
  return counter + 1;
}",0.9337474120082816
107996,"/** 
 * Calculates k, based on Zero-truncated Poisson distribution. https://en.wikipedia.org/wiki/Zero-truncated_Poisson_distribution
 * @param lambda
 * @return
 */
private int calculateKZeroPoisson(double lambda){
  final double threshold=1d - this.significanceLevel;
  final PoissonDistribution distribution=new PoissonDistribution(lambda);
  final double v2=1d - distribution.probability(0);
  int counter=1;
  double value=0d;
  while (value < threshold) {
    value+=distribution.probability(counter) / v2;
    counter++;
  }
  this.type1Error=1d - value;
  return counter;
}","/** 
 * Calculates k, based on Zero-truncated Poisson distribution. https://en.wikipedia.org/wiki/Zero-truncated_Poisson_distribution
 * @param lambda
 * @return
 */
private int calculateKZeroPoisson(double lambda){
  final double threshold=1d - this.significanceLevel;
  final PoissonDistribution distribution=new PoissonDistribution(lambda);
  final double v2=1d - distribution.probability(0);
  int counter=1;
  double value=0d;
  while (value < threshold) {
    value+=distribution.probability(counter) / v2;
    counter++;
    if (counter >= this.k) {
      value=1d;
      break;
    }
  }
  this.type1Error=1d - value;
  return counter;
}",0.9477977161500816
107997,"/** 
 * @throws IOException
 */
@Test public void test() throws IOException {
  boolean benchmark=false;
  List<String> arguments=ManagementFactory.getRuntimeMXBean().getInputArguments();
  for (  String argument : arguments) {
    if (argument.startsWith(""String_Node_Str"")) {
      benchmark=true;
      break;
    }
  }
  final Data data=getDataObject(testCase);
  final ARXAnonymizer anonymizer=new ARXAnonymizer();
  testCase.config.setPracticalMonotonicity(testCase.practical);
  ARXResult result=anonymizer.anonymize(data,testCase.config);
  if (testCase.hashcode != -1) {
    try {
      result.optimize(result.getOutput());
    }
 catch (    RollbackRequiredException e) {
      throw new RuntimeException(e);
    }
  }
  if (benchmark) {
    String version=System.getProperty(""String_Node_Str"");
    String path=System.getProperty(""String_Node_Str"");
    if (path == null || path.length() == 0) {
      path=""String_Node_Str"";
    }
    String testClass=this.getClass().getSimpleName();
    final int REPETITIONS=5;
    long time=System.currentTimeMillis();
    long time2=0;
    for (int i=0; i < REPETITIONS; i++) {
      data.getHandle().release();
      result=anonymizer.anonymize(data,testCase.config);
      try {
        result.optimize(result.getOutput());
      }
 catch (      RollbackRequiredException e) {
        throw new RuntimeException(e);
      }
      time2+=result.getTime();
    }
    time=(System.currentTimeMillis() - time) / REPETITIONS;
    time2/=REPETITIONS;
    StringBuilder line=new StringBuilder();
    line.append(Resources.getVersion());
    line.append(""String_Node_Str"");
    line.append(version);
    line.append(""String_Node_Str"");
    line.append(testClass);
    line.append(""String_Node_Str"");
    line.append(testCase.id);
    line.append(""String_Node_Str"");
    line.append(time);
    line.append(""String_Node_Str"");
    line.append(time2);
    output(line.toString(),path + ""String_Node_Str"" + version+ ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ testClass+ ""String_Node_Str"");
  }
  if (testCase.hashcode != -1) {
    int hashcode=23;
    DataHandle handle=result.getOutput();
    for (int row=0; row < handle.getNumRows(); row++) {
      for (int column=0; column < handle.getNumColumns(); column++) {
        hashcode=(37 * hashcode) + handle.getValue(row,column).hashCode();
      }
    }
    assertEquals(""String_Node_Str"",hashcode,testCase.hashcode);
    return;
  }
  if (testCase.optimalTransformation == null) {
    assertTrue(result.getGlobalOptimum() == null);
  }
 else {
    String lossActual=result.getGlobalOptimum().getMaximumInformationLoss().toString();
    String lossExpected=testCase.optimalInformationLoss;
    assertEquals(testCase.dataset + ""String_Node_Str"" + lossExpected+ ""String_Node_Str""+ lossActual+ ""String_Node_Str""+ result.getGlobalOptimum().getMinimumInformationLoss().toString()+ ""String_Node_Str"",lossExpected,lossActual);
    if (!Arrays.equals(result.getGlobalOptimum().getTransformation(),testCase.optimalTransformation)) {
      System.err.println(""String_Node_Str"");
      System.err.println(""String_Node_Str"" + Arrays.toString(testCase.optimalTransformation) + ""String_Node_Str""+ Arrays.toString(result.getGlobalOptimum().getTransformation()));
      System.err.println(""String_Node_Str"" + testCase.toString());
    }
  }
  if (testCase.statistics != null) {
    int[] statistics=new int[7];
    for (    ARXNode[] level : result.getLattice().getLevels()) {
      for (      ARXNode arxNode : level) {
        statistics[0]++;
        if (arxNode.isChecked()) {
          statistics[1]++;
        }
        if (arxNode.getAnonymity() == Anonymity.ANONYMOUS) {
          statistics[2]++;
        }
        if (arxNode.getAnonymity() == Anonymity.NOT_ANONYMOUS) {
          statistics[3]++;
        }
        if (arxNode.getAnonymity() == Anonymity.PROBABLY_ANONYMOUS) {
          statistics[4]++;
        }
        if (arxNode.getAnonymity() == Anonymity.PROBABLY_NOT_ANONYMOUS) {
          statistics[5]++;
        }
        if (arxNode.getMaximumInformationLoss() == arxNode.getMinimumInformationLoss()) {
          statistics[6]++;
        }
      }
    }
    String algorithmConfiguration=getAlgorithmConfiguration(testCase.config);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[0],statistics[0]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[1],statistics[1]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[2],statistics[2]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[3],statistics[3]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[4],statistics[4]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[5],statistics[5]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[6],statistics[6]);
  }
}","/** 
 * @throws IOException
 */
@Test public void test() throws IOException {
  boolean benchmark=false;
  List<String> arguments=ManagementFactory.getRuntimeMXBean().getInputArguments();
  for (  String argument : arguments) {
    if (argument.startsWith(""String_Node_Str"")) {
      benchmark=true;
      break;
    }
  }
  final Data data=getDataObject(testCase);
  final ARXAnonymizer anonymizer=new ARXAnonymizer();
  testCase.config.setPracticalMonotonicity(testCase.practical);
  ARXResult result=anonymizer.anonymize(data,testCase.config);
  if (testCase.hashcode != -1) {
    try {
      result.optimize(result.getOutput());
    }
 catch (    RollbackRequiredException e) {
      throw new RuntimeException(e);
    }
  }
  if (benchmark) {
    String version=System.getProperty(""String_Node_Str"");
    String path=System.getProperty(""String_Node_Str"");
    if (path == null || path.length() == 0) {
      path=""String_Node_Str"";
    }
    String testClass=this.getClass().getSimpleName();
    final int REPETITIONS=5;
    long time=System.currentTimeMillis();
    long time2=0;
    for (int i=0; i < REPETITIONS; i++) {
      data.getHandle().release();
      result=anonymizer.anonymize(data,testCase.config);
      if (testCase.hashcode != -1) {
        try {
          result.optimize(result.getOutput());
        }
 catch (        RollbackRequiredException e) {
          throw new RuntimeException(e);
        }
      }
      time2+=result.getTime();
    }
    time=(System.currentTimeMillis() - time) / REPETITIONS;
    time2/=REPETITIONS;
    StringBuilder line=new StringBuilder();
    line.append(Resources.getVersion());
    line.append(""String_Node_Str"");
    line.append(version);
    line.append(""String_Node_Str"");
    line.append(testClass);
    line.append(""String_Node_Str"");
    line.append(testCase.id);
    line.append(""String_Node_Str"");
    line.append(time);
    line.append(""String_Node_Str"");
    line.append(time2);
    output(line.toString(),path + ""String_Node_Str"" + version+ ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ testClass+ ""String_Node_Str"");
  }
  if (testCase.hashcode != -1) {
    int hashcode=23;
    DataHandle handle=result.getOutput();
    for (int row=0; row < handle.getNumRows(); row++) {
      for (int column=0; column < handle.getNumColumns(); column++) {
        hashcode=(37 * hashcode) + handle.getValue(row,column).hashCode();
      }
    }
    assertEquals(""String_Node_Str"",hashcode,testCase.hashcode);
    return;
  }
  if (testCase.optimalTransformation == null) {
    assertTrue(result.getGlobalOptimum() == null);
  }
 else {
    String lossActual=result.getGlobalOptimum().getMaximumInformationLoss().toString();
    String lossExpected=testCase.optimalInformationLoss;
    assertEquals(testCase.dataset + ""String_Node_Str"" + lossExpected+ ""String_Node_Str""+ lossActual+ ""String_Node_Str""+ result.getGlobalOptimum().getMinimumInformationLoss().toString()+ ""String_Node_Str"",lossExpected,lossActual);
    if (!Arrays.equals(result.getGlobalOptimum().getTransformation(),testCase.optimalTransformation)) {
      System.err.println(""String_Node_Str"");
      System.err.println(""String_Node_Str"" + Arrays.toString(testCase.optimalTransformation) + ""String_Node_Str""+ Arrays.toString(result.getGlobalOptimum().getTransformation()));
      System.err.println(""String_Node_Str"" + testCase.toString());
    }
  }
  if (testCase.statistics != null) {
    int[] statistics=new int[7];
    for (    ARXNode[] level : result.getLattice().getLevels()) {
      for (      ARXNode arxNode : level) {
        statistics[0]++;
        if (arxNode.isChecked()) {
          statistics[1]++;
        }
        if (arxNode.getAnonymity() == Anonymity.ANONYMOUS) {
          statistics[2]++;
        }
        if (arxNode.getAnonymity() == Anonymity.NOT_ANONYMOUS) {
          statistics[3]++;
        }
        if (arxNode.getAnonymity() == Anonymity.PROBABLY_ANONYMOUS) {
          statistics[4]++;
        }
        if (arxNode.getAnonymity() == Anonymity.PROBABLY_NOT_ANONYMOUS) {
          statistics[5]++;
        }
        if (arxNode.getMaximumInformationLoss() == arxNode.getMinimumInformationLoss()) {
          statistics[6]++;
        }
      }
    }
    String algorithmConfiguration=getAlgorithmConfiguration(testCase.config);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[0],statistics[0]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[1],statistics[1]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[2],statistics[2]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[3],statistics[3]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[4],statistics[4]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[5],statistics[5]);
    assertEquals(algorithmConfiguration + ""String_Node_Str"",testCase.statistics[6],statistics[6]);
  }
}",0.9942569269521412
107998,"/** 
 * Returns the factor used weight generalized values.
 * @return
 */
public double getGeneralizationFactor(){
  return gFactor;
}","/** 
 * Returns the factor used weight generalized values.
 * @return
 */
public double getGeneralizationFactor(){
  return gFactor != null ? gFactor : 1d;
}",0.9209621993127148
107999,"/** 
 * Returns the factor weighting generalization and suppression.
 * @return A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 */
public double getGeneralizationSuppressionFactor(){
  return gsFactor;
}","/** 
 * Returns the factor weighting generalization and suppression.
 * @return A factor [0,1] weighting generalization and suppression.The default value is 0.5, which means that generalization and suppression will be treated equally. A factor of 0 will favor suppression, and a factor of 1 will favor generalization. The values in between can be used for balancing both methods.
 */
public double getGeneralizationSuppressionFactor(){
  return gsFactor != null ? gsFactor : 0.5d;
}",0.9722814498933902
108000,"/** 
 * Returns the factor used to weight suppressed values.
 * @return
 */
public double getSuppressionFactor(){
  return sFactor;
}","/** 
 * Returns the factor used to weight suppressed values.
 * @return
 */
public double getSuppressionFactor(){
  return sFactor != null ? sFactor : 1d;
}",0.9204152249134948
