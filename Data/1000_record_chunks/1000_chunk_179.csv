record_number,buggy_code,fixed_code,code_similarity
178001,"/** 
 * Allows to configure some layer attributes such and DefaultStyle
 * @TODO WmsPath
 */
public boolean configureLayer(final String workspace,final String layerName,final GSLayerEncoder layer){
  if (layer.isEmpty()) {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"");
    return true;
  }
  final String fqLayerName;
  if (workspace == null) {
    fqLayerName=layerName;
    if (LOGGER.isEnabledFor(Level.WARN)) {
      LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
    }
  }
 else {
    fqLayerName=workspace + ""String_Node_Str"" + layerName;
  }
  final String url=restURL + ""String_Node_Str"" + fqLayerName;
  String layerXml=layer.toString();
  String sendResult=HTTPUtils.putXml(url,layerXml,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"" + fqLayerName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + fqLayerName + ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}","/** 
 * Allows to configure some layer attributes such and DefaultStyle
 * @param workspace
 * @param resourceName the name of the resource to use (featureStore or coverageStore name)
 * @param layer the layer encoder used to configure the layer
 * @return true if success
 * @throws IllegalArgumentException if some arguments are null or empty
 * @TODO WmsPath
 */
public boolean configureLayer(final String workspace,final String resourceName,final GSLayerEncoder layer) throws IllegalArgumentException {
  if (workspace == null || resourceName == null || layer == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (workspace.isEmpty() || resourceName.isEmpty() || layer.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String fqLayerName=workspace + ""String_Node_Str"" + resourceName;
  final String url=restURL + ""String_Node_Str"" + fqLayerName;
  String layerXml=layer.toString();
  String sendResult=HTTPUtils.putXml(url,layerXml,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"" + fqLayerName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + fqLayerName + ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}",0.2737547090832984
178002,"/** 
 * Publish imagemosaic as zip file
 * @see {@link #publishWorldImage(String,String,File,ParameterConfigure,NameValuePair)}
 */
public boolean publishImageMosaic(String workspace,String storeName,File zipFile,ParameterConfigure configure,NameValuePair... params) throws FileNotFoundException {
  return publishCoverage(workspace,storeName,""String_Node_Str"",""String_Node_Str"",zipFile,configure,params);
}","/** 
 * Publish imagemosaic as zip file
 * @see {@link #publishWorldImage(String,String,File,ParameterConfigure,NameValuePair)}
 */
public boolean publishImageMosaic(String workspace,String storeName,File zipFile,ParameterConfigure configure,NameValuePair... params) throws FileNotFoundException {
  return publishCoverage(workspace,storeName,CoverageStoreExtension.imagemosaic,""String_Node_Str"",zipFile,configure,params);
}",0.9386281588447654
178003,"/** 
 * Publish a zipped worldimage file. It is assumed that the the zip-file contain the *.prj to set the srs. <P> This is equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$COVERAGESTORE/file.worldimage </PRE>}
 * @param workspace Workspace to use
 * @param coveragestore Name of the coveragestore
 * @param file file to upload
 * @param configure Configure parameter. It may be null.
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are: <ul> <li> <b>coverageName=name</b> coverageName parameter to append. Only works if configure is not set to ParameterConfigure.NONE. </li> </ul>
 * @see #{@link ParameterConfigure}
 * @return true if the operation completed successfully.
 */
private boolean publishCoverage(String workspace,String coveragestore,String format,String mimeType,File file,ParameterConfigure configure,NameValuePair... params) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(coveragestore).append(""String_Node_Str"").append(format);
  if (configure != null) {
    sbUrl.append(""String_Node_Str"").append(configure);
    if (params != (NameValuePair[])null && !configure.equals(ParameterConfigure.NONE)) {
      final String paramString=appendParameters(params);
      if (!paramString.isEmpty()) {
        sbUrl.append(""String_Node_Str"").append(paramString);
      }
    }
  }
  String sentResult=HTTPUtils.put(sbUrl.toString(),file,mimeType,gsuser,gspass);
  boolean fileSent=sentResult != null;
  if (fileSent) {
    if (LOGGER.isInfoEnabled())     LOGGER.info(""String_Node_Str"" + file + ""String_Node_Str"");
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + file);
  }
  return fileSent;
}","/** 
 * Publish a file.  <P> This is an example with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$COVERAGESTORE/file.worldimage </PRE>}
 * @param workspace Workspace to use
 * @param coveragestore Name of the coveragestore
 * @param file file to upload
 * @param configure Configure parameter. It may be null.
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are: <ul> <li> <b>coverageName=name</b> coverageName parameter to append. Only works if configure is not set to ParameterConfigure.NONE. </li> </ul>
 * @see #{@link ParameterConfigure}
 * @return true if the operation completed successfully.
 */
private boolean publishCoverage(String workspace,String coveragestore,CoverageStoreExtension extension,String mimeType,File file,ParameterConfigure configure,NameValuePair... params) throws FileNotFoundException {
  return createCoverageStore(workspace,coveragestore,UploadMethod.file,extension,mimeType,file.toURI(),configure,params);
}",0.6287015945330297
178004,"/** 
 * Publish a Mosaic already in a filesystem readable by GeoServer. <P> Sample cUrl usage:<BR> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param coverageEncoder the set of parameters to be set to the coverage (bbox, srs, ...)
 * @param layerEncoder the set of parameters to be set to the layer (defaultstyle, wmspath, ...)
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException
 */
public boolean createExternalMosaic(String workspace,String storeName,File mosaicDir,GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder) throws FileNotFoundException {
  RESTCoverageStore store=createExternaMosaicDatastore(workspace,storeName,mosaicDir,ParameterConfigure.NONE,ParameterUpdate.OVERWRITE);
  final String coverageStoreName=FilenameUtils.getBaseName(mosaicDir.getName());
  if (coverageEncoder == null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + workspace + ""String_Node_Str""+ storeName);
    }
    coverageEncoder=new GSCoverageEncoder();
    coverageEncoder.setName(coverageStoreName);
  }
  if (layerEncoder == null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + workspace + ""String_Node_Str""+ storeName);
    }
    layerEncoder=new GSLayerEncoder();
  }
  if (store != null) {
    try {
      coverageEncoder.setName(coverageStoreName);
      if (!createCoverage(coverageEncoder,workspace,storeName)) {
        if (LOGGER.isEnabledFor(Level.ERROR))         LOGGER.error(""String_Node_Str"" + storeName);
        return false;
      }
      if (!configureLayer(workspace,coverageStoreName,layerEncoder)) {
        if (LOGGER.isEnabledFor(Level.ERROR))         LOGGER.error(""String_Node_Str"" + coverageStoreName);
        return false;
      }
    }
 catch (    Exception e) {
      if (LOGGER.isEnabledFor(Level.WARN))       LOGGER.warn(""String_Node_Str"" + storeName,e);
      store=null;
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * @deprecated use {@link #publishExternalMosaic(String workspace, final String storeName, File mosaicDir, GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder)}
 * @param workspace
 * @param storeName
 * @param mosaicDir
 * @param coverageEncoder
 * @param layerEncoder
 * @return
 * @throws FileNotFoundException
 */
public boolean createExternalMosaic(String workspace,String storeName,File mosaicDir,GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder) throws FileNotFoundException {
  return publishExternalMosaic(workspace,storeName,mosaicDir,coverageEncoder,layerEncoder);
}",0.0539419087136929
178005,"/** 
 * Publish a zipped worldimage file. It is assumed that the the zip-file contain the *.prj to set the srs. <P> This is equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$COVERAGESTORE/file.worldimage </PRE>}
 * @param workspace Workspace to use
 * @param coveragestore Name of the coveragestore
 * @param zipFile zip file to upload
 * @param configure Configure parameter. It may be null.
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are: <ul> <li> <b>coverageName=name</b> coverageName parameter to append. Only works if configure is not set to ParameterConfigure.NONE. </li> </ul>
 * @see #{@link ParameterConfigure}
 * @return true if the operation completed successfully.
 */
public boolean publishWorldImage(String workspace,String coveragestore,File zipFile,ParameterConfigure configure,NameValuePair... params) throws FileNotFoundException {
  return publishCoverage(workspace,coveragestore,""String_Node_Str"",""String_Node_Str"",zipFile,configure,params);
}","/** 
 * Publish a zipped worldimage file. It is assumed that the the zip-file contain the *.prj to set the srs. <P> This is equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$COVERAGESTORE/file.worldimage </PRE>}
 * @param workspace Workspace to use
 * @param coveragestore Name of the coveragestore
 * @param zipFile zip file to upload
 * @param configure Configure parameter. It may be null.
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are: <ul> <li> <b>coverageName=name</b> coverageName parameter to append. Only works if configure is not set to ParameterConfigure.NONE. </li> </ul>
 * @see #{@link ParameterConfigure}
 * @return true if the operation completed successfully.
 */
public boolean publishWorldImage(String workspace,String coveragestore,File zipFile,ParameterConfigure configure,NameValuePair... params) throws FileNotFoundException {
  return publishCoverage(workspace,coveragestore,CoverageStoreExtension.worldimage,""String_Node_Str"",zipFile,configure,params);
}",0.9804088586030664
178006,"public void setDefaultStyle(String defaultStyle){
  set(""String_Node_Str"",defaultStyle);
}","/** 
 * @param defaultStyle The style that will be applied if no style is specified.
 * @throws IllegalArgumentException if defaultStyle is null or empty
 */
public void setDefaultStyle(final String defaultStyle) throws IllegalArgumentException {
  if (defaultStyle == null || defaultStyle.isEmpty())   throw new IllegalArgumentException(""String_Node_Str"");
  set(""String_Node_Str"",defaultStyle);
}",0.2663934426229508
178007,"/** 
 * @param defaultStyle
 * @deprecated will be set to protected in the next release, please use setDefaultStyle
 */
public void addDefaultStyle(String defaultStyle){
  add(""String_Node_Str"",defaultStyle);
}","/** 
 * @see {@link GSLayerEncoder#setDefaultStyle(String)}
 * @param defaultStyle 
 */
protected void addDefaultStyle(String defaultStyle){
  add(""String_Node_Str"",defaultStyle);
}",0.629156010230179
178008,"protected void addEnabled(){
  add(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * enabled the layer
 */
protected void addEnabled(){
  add(""String_Node_Str"",""String_Node_Str"");
}",0.8314606741573034
178009,"public void insertExternalGeotiff() throws FileNotFoundException, IOException {
  String storeName=""String_Node_Str"";
  String layerName=""String_Node_Str"";
  File geotiff=new ClassPathResource(""String_Node_Str"").getFile();
  RESTCoverageStore pc=publisher.publishExternalGeoTIFF(DEFAULT_WS,storeName,geotiff,null,null);
  assertNotNull(pc);
}","public void insertExternalGeotiff() throws FileNotFoundException, IOException {
  String storeName=""String_Node_Str"";
  String layerName=""String_Node_Str"";
  File geotiff=new ClassPathResource(""String_Node_Str"").getFile();
  boolean pc=publisher.publishExternalGeoTIFF(DEFAULT_WS,storeName,geotiff,layerName,""String_Node_Str"",ProjectionPolicy.FORCE_DECLARED,""String_Node_Str"");
  assertTrue(pc);
}",0.8064952638700947
178010,"public void testExternalGeotiff() throws FileNotFoundException, IOException {
  if (!enabled())   return;
  deleteAll();
  String storeName=""String_Node_Str"";
  String layerName=""String_Node_Str"";
  assertTrue(reader.getWorkspaces().isEmpty());
  assertTrue(publisher.createWorkspace(DEFAULT_WS));
  File geotiff=new ClassPathResource(""String_Node_Str"").getFile();
  assertFalse(""String_Node_Str"",existsLayer(layerName));
  RESTCoverageStore pc=publisher.publishExternalGeoTIFF(DEFAULT_WS,storeName,geotiff,null,null);
  assertNotNull(""String_Node_Str"",pc);
  assertTrue(existsLayer(layerName));
  LOGGER.info(pc);
  RESTCoverageStore reloadedCS=reader.getCoverageStore(DEFAULT_WS,storeName);
  assertEquals(pc.getName(),reloadedCS.getName());
  assertEquals(pc.getWorkspaceName(),reloadedCS.getWorkspaceName());
  assertTrue(""String_Node_Str"",publisher.unpublishCoverage(DEFAULT_WS,storeName,layerName));
  assertTrue(""String_Node_Str"",publisher.removeCoverageStore(DEFAULT_WS,storeName));
  assertFalse(""String_Node_Str"",publisher.unpublishCoverage(DEFAULT_WS,storeName,layerName));
  assertFalse(existsLayer(layerName));
}","public void testExternalGeotiff() throws FileNotFoundException, IOException {
  if (!enabled())   return;
  deleteAll();
  String storeName=""String_Node_Str"";
  String layerName=""String_Node_Str"";
  assertTrue(reader.getWorkspaces().isEmpty());
  assertTrue(publisher.createWorkspace(DEFAULT_WS));
  File geotiff=new ClassPathResource(""String_Node_Str"").getFile();
  assertFalse(""String_Node_Str"",existsLayer(layerName));
  boolean pc=publisher.publishExternalGeoTIFF(DEFAULT_WS,storeName,geotiff,layerName,""String_Node_Str"",ProjectionPolicy.FORCE_DECLARED,""String_Node_Str"");
  assertTrue(""String_Node_Str"",pc);
  assertTrue(existsLayer(layerName));
  LOGGER.info(pc);
  RESTCoverageStore reloadedCS=reader.getCoverageStore(DEFAULT_WS,storeName);
  assertEquals(storeName,reloadedCS.getName());
  assertEquals(DEFAULT_WS,reloadedCS.getWorkspaceName());
  assertTrue(""String_Node_Str"",publisher.unpublishCoverage(DEFAULT_WS,storeName,layerName));
  assertTrue(""String_Node_Str"",publisher.removeCoverageStore(DEFAULT_WS,storeName));
  assertFalse(""String_Node_Str"",publisher.unpublishCoverage(DEFAULT_WS,storeName,layerName));
  assertFalse(existsLayer(layerName));
}",0.7830641641204714
178011,"public void testCreateDeleteImageMosaicDatastore(){
  if (!enabled()) {
    return;
  }
  deleteAll();
  final String wsName=""String_Node_Str"";
  final String coverageStoreName=""String_Node_Str"";
  final GSImageMosaicEncoder coverageEncoder=new GSImageMosaicEncoder();
  coverageEncoder.setName(""String_Node_Str"");
  coverageEncoder.setAllowMultithreading(true);
  coverageEncoder.setBackgroundValues(""String_Node_Str"");
  coverageEncoder.setFilter(""String_Node_Str"");
  coverageEncoder.setInputTransparentColor(""String_Node_Str"");
  coverageEncoder.setLatLonBoundingBox(-180,-90,180,90,""String_Node_Str"");
  coverageEncoder.setMaxAllowedTiles(6000);
  coverageEncoder.setNativeBoundingBox(-180,-90,180,90,""String_Node_Str"");
  coverageEncoder.setOutputTransparentColor(""String_Node_Str"");
  coverageEncoder.setProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
  coverageEncoder.setSRS(""String_Node_Str"");
  coverageEncoder.setSUGGESTED_TILE_SIZE(""String_Node_Str"");
  coverageEncoder.setUSE_JAI_IMAGEREAD(true);
  final GSDimensionInfoEncoder time=new GSDimensionInfoEncoder(true);
  time.setPresentation(Presentation.LIST);
  coverageEncoder.setMetadata(""String_Node_Str"",time);
  coverageEncoder.setMetadata(""String_Node_Str"",new GSDimensionInfoEncoder());
  assertTrue(publisher.createWorkspace(wsName));
  LOGGER.info(coverageEncoder.toString());
  final String styleName=""String_Node_Str"";
  File sldFile;
  try {
    sldFile=new ClassPathResource(""String_Node_Str"").getFile();
    assertTrue(publisher.publishStyle(sldFile));
  }
 catch (  IOException e1) {
    assertFalse(e1.getLocalizedMessage(),Boolean.FALSE);
    e1.printStackTrace();
  }
  GSLayerEncoder layerEncoder=new GSLayerEncoder();
  layerEncoder.setDefaultStyle(styleName);
  LOGGER.info(layerEncoder.toString());
  RESTCoverageStore coverageStore=null;
  try {
    final File mosaicFile=new ClassPathResource(""String_Node_Str"").getFile();
    if (!publisher.createExternalMosaic(wsName,coverageStoreName,mosaicFile,coverageEncoder,layerEncoder)) {
      fail();
    }
    coverageStore=reader.getCoverageStore(wsName,coverageStoreName);
    if (coverageStore == null) {
      LOGGER.error(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
      fail(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    fail(e.getLocalizedMessage());
  }
catch (  IOException e) {
    e.printStackTrace();
    fail(e.getLocalizedMessage());
  }
  boolean removed=publisher.removeCoverageStore(coverageStore.getWorkspaceName(),coverageStore.getName(),true);
  if (!removed) {
    LOGGER.error(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
    fail(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
  }
  assertTrue(publisher.removeStyle(styleName));
  assertTrue(publisher.removeWorkspace(wsName));
}","public void testCreateDeleteImageMosaicDatastore(){
  if (!enabled()) {
    return;
  }
  deleteAll();
  final String wsName=""String_Node_Str"";
  final String coverageStoreName=""String_Node_Str"";
  final GSImageMosaicEncoder coverageEncoder=new GSImageMosaicEncoder();
  coverageEncoder.setName(""String_Node_Str"");
  coverageEncoder.setAllowMultithreading(true);
  coverageEncoder.setBackgroundValues(""String_Node_Str"");
  coverageEncoder.setFilter(""String_Node_Str"");
  coverageEncoder.setInputTransparentColor(""String_Node_Str"");
  coverageEncoder.setLatLonBoundingBox(-180,-90,180,90,""String_Node_Str"");
  coverageEncoder.setMaxAllowedTiles(6000);
  coverageEncoder.setNativeBoundingBox(-180,-90,180,90,""String_Node_Str"");
  coverageEncoder.setOutputTransparentColor(""String_Node_Str"");
  coverageEncoder.setProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
  coverageEncoder.setSRS(""String_Node_Str"");
  coverageEncoder.setSUGGESTED_TILE_SIZE(""String_Node_Str"");
  coverageEncoder.setUSE_JAI_IMAGEREAD(true);
  final GSDimensionInfoEncoder time=new GSDimensionInfoEncoder(true);
  time.setPresentation(Presentation.LIST);
  coverageEncoder.setMetadata(""String_Node_Str"",time);
  coverageEncoder.setMetadata(""String_Node_Str"",new GSDimensionInfoEncoder());
  assertTrue(publisher.createWorkspace(wsName));
  LOGGER.info(coverageEncoder.toString());
  final String styleName=""String_Node_Str"";
  File sldFile;
  try {
    sldFile=new ClassPathResource(""String_Node_Str"").getFile();
    assertTrue(publisher.publishStyle(sldFile));
  }
 catch (  IOException e1) {
    assertFalse(e1.getLocalizedMessage(),Boolean.FALSE);
    e1.printStackTrace();
  }
  GSLayerEncoder layerEncoder=new GSLayerEncoder();
  layerEncoder.setDefaultStyle(styleName);
  LOGGER.info(layerEncoder.toString());
  RESTCoverageStore coverageStore=null;
  try {
    final File mosaicFile=new ClassPathResource(""String_Node_Str"").getFile();
    if (!publisher.publishExternalMosaic(wsName,coverageStoreName,mosaicFile,coverageEncoder,layerEncoder)) {
      fail();
    }
    coverageStore=reader.getCoverageStore(wsName,coverageStoreName);
    if (coverageStore == null) {
      LOGGER.error(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
      fail(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    fail(e.getLocalizedMessage());
  }
catch (  IOException e) {
    e.printStackTrace();
    fail(e.getLocalizedMessage());
  }
  boolean removed=publisher.removeCoverageStore(coverageStore.getWorkspaceName(),coverageStore.getName(),true);
  if (!removed) {
    LOGGER.error(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
    fail(""String_Node_Str"" + coverageStoreName + ""String_Node_Str"");
  }
  assertTrue(publisher.removeStyle(styleName));
  assertTrue(publisher.removeWorkspace(wsName));
}",0.9977442304355372
178012,"/** 
 * remove workspace and all of its contents
 * @throws IOException
 */
public void testWorkspaceRemoval() throws IOException {
  if (!enabled())   return;
  deleteAll();
  String storeName=""String_Node_Str"";
  String layerName=""String_Node_Str"";
  assertTrue(reader.getWorkspaces().isEmpty());
  assertTrue(publisher.createWorkspace(DEFAULT_WS));
  File geotiff=new ClassPathResource(""String_Node_Str"").getFile();
  assertFalse(""String_Node_Str"",existsLayer(layerName));
  RESTCoverageStore pc=publisher.publishExternalGeoTIFF(DEFAULT_WS,storeName,geotiff,null,null);
  assertTrue(publisher.removeWorkspace(DEFAULT_WS,true));
}","/** 
 * remove workspace and all of its contents
 * @throws IOException
 */
public void testWorkspaceRemoval() throws IOException {
  if (!enabled())   return;
  deleteAll();
  String storeName=""String_Node_Str"";
  String layerName=""String_Node_Str"";
  assertTrue(reader.getWorkspaces().isEmpty());
  assertTrue(publisher.createWorkspace(DEFAULT_WS));
  File geotiff=new ClassPathResource(""String_Node_Str"").getFile();
  assertFalse(""String_Node_Str"",existsLayer(layerName));
  boolean pc=publisher.publishExternalGeoTIFF(DEFAULT_WS,storeName,geotiff,layerName,""String_Node_Str"",ProjectionPolicy.REPROJECT_TO_DECLARED,""String_Node_Str"");
  assertTrue(publisher.removeWorkspace(DEFAULT_WS,true));
}",0.91196388261851
178013,"/** 
 * Store and publish an SLD, assigning it a name.
 * @param sldFile the File containing the SLD document.
 * @param name    the Style name.
 * @return <TT>true</TT> if the operation completed successfully.
 */
public boolean publishStyle(File sldFile,String name){
  String sUrl=restURL + ""String_Node_Str"";
  if (name != null) {
    sUrl+=""String_Node_Str"" + encode(name);
  }
  LOGGER.debug(""String_Node_Str"" + name + ""String_Node_Str""+ sUrl);
  String result=HTTPUtils.post(sUrl,sldFile,""String_Node_Str"",gsuser,gspass);
  return result != null;
}","/** 
 * Store and publish an SLD, assigning it a name.
 * @param sldFile the File containing the SLD document.
 * @param name the Style name.
 * @return <TT>true</TT> if the operation completed successfully.
 */
public boolean publishStyle(File sldFile,String name){
  String sUrl=restURL + ""String_Node_Str"";
  if (name != null) {
    sUrl+=""String_Node_Str"" + encode(name);
  }
  LOGGER.debug(""String_Node_Str"" + name + ""String_Node_Str""+ sUrl);
  String result=HTTPUtils.post(sUrl,sldFile,""String_Node_Str"",gsuser,gspass);
  return result != null;
}",0.997289972899729
178014,"/** 
 * Removes the featuretype and the associated layer. <BR>You may also want to   {@link #removeDatastore(String,String) remove the datastore}.
 * @return true if the operation completed successfully.
 */
public boolean unpublishFeatureType(String workspace,String storename,String layername){
  try {
    URL deleteLayerUrl=new URL(restURL + ""String_Node_Str"" + layername);
    boolean layerDeleted=HTTPUtils.delete(deleteLayerUrl.toExternalForm(),gsuser,gspass);
    if (!layerDeleted) {
      LOGGER.warn(""String_Node_Str"" + layername + ""String_Node_Str"");
      return false;
    }
    URL deleteFtUrl=new URL(restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    boolean ftDeleted=HTTPUtils.delete(deleteFtUrl.toExternalForm(),gsuser,gspass);
    if (!ftDeleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    }
    return ftDeleted;
  }
 catch (  MalformedURLException ex) {
    LOGGER.error(ex);
    return false;
  }
}","/** 
 * Removes the featuretype and the associated layer. <BR> You may also want to   {@link #removeDatastore(String,String) remove thedatastore}.
 * @return true if the operation completed successfully.
 */
public boolean unpublishFeatureType(String workspace,String storename,String layerName){
  try {
    final String fqLayerName;
    if (workspace == null) {
      fqLayerName=layerName;
      if (LOGGER.isEnabledFor(Level.WARN)) {
        LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
      }
    }
 else {
      fqLayerName=workspace + ""String_Node_Str"" + layerName;
    }
    URL deleteLayerUrl=new URL(restURL + ""String_Node_Str"" + fqLayerName);
    boolean layerDeleted=HTTPUtils.delete(deleteLayerUrl.toExternalForm(),gsuser,gspass);
    if (!layerDeleted) {
      LOGGER.warn(""String_Node_Str"" + fqLayerName + ""String_Node_Str"");
      return false;
    }
    URL deleteFtUrl=new URL(restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName);
    boolean ftDeleted=HTTPUtils.delete(deleteFtUrl.toExternalForm(),gsuser,gspass);
    if (!ftDeleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName+ ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName);
    }
    return ftDeleted;
  }
 catch (  MalformedURLException ex) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(ex);
    return false;
  }
}",0.863003663003663
178015,"/** 
 * Create a PostGIS datastore.
 * @param workspace Name of the workspace to contain the database. This will also be the prefix of any layer names created from tables in the database.
 * @param datastoreEncoder the set of parameters to be set to the datastore (including connection params)
 * @return <TT>true</TT> if the PostGIS datastore has been successfully created, <TT>false</TT> otherwise
 */
public boolean createPostGISDatastore(String workspace,GSPostGISDatastoreEncoder datastoreEncoder){
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str"";
  String xml=datastoreEncoder.toString();
  String result=HTTPUtils.postXml(sUrl,xml,gsuser,gspass);
  return result != null;
}","/** 
 * Create a PostGIS datastore.
 * @param workspace Name of the workspace to contain the database. This will also be the prefix of any layer names created from tables in the database.
 * @param datastoreEncoder the set of parameters to be set to the datastore (including connection params)
 * @return <TT>true</TT> if the PostGIS datastore has been successfullycreated, <TT>false</TT> otherwise
 */
public boolean createPostGISDatastore(String workspace,GSPostGISDatastoreEncoder datastoreEncoder){
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str"";
  String xml=datastoreEncoder.toString();
  String result=HTTPUtils.postXml(sUrl,xml,gsuser,gspass);
  return result != null;
}",0.9992902767920512
178016,"public boolean removeLayer(final String workspace,final String layerName){
  final String fqLayerName;
  if (workspace == null) {
    fqLayerName=layerName;
    if (LOGGER.isEnabledFor(Level.WARN)) {
      LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
    }
  }
 else {
    fqLayerName=workspace + ""String_Node_Str"" + layerName;
  }
  if (layerName == null) {
    if (LOGGER.isEnabledFor(Level.ERROR)) {
      LOGGER.error(""String_Node_Str"" + layerName);
    }
    return false;
  }
  final String url=restURL + ""String_Node_Str"" + fqLayerName;
  boolean result=HTTPUtils.delete(url,gsuser,gspass);
  if (result) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"" + fqLayerName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + fqLayerName);
  }
  return result;
}","/** 
 * remove a generic given layer from a given workspace
 * @param workspace
 * @param layerName
 * @return true if success
 */
public boolean removeLayer(final String workspace,final String layerName){
  final String fqLayerName;
  if (workspace == null) {
    fqLayerName=layerName;
    if (LOGGER.isEnabledFor(Level.WARN)) {
      LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
    }
  }
 else {
    fqLayerName=workspace + ""String_Node_Str"" + layerName;
  }
  if (layerName == null) {
    if (LOGGER.isEnabledFor(Level.ERROR)) {
      LOGGER.error(""String_Node_Str"" + layerName);
    }
    return false;
  }
  final String url=restURL + ""String_Node_Str"" + fqLayerName;
  boolean result=HTTPUtils.delete(url,gsuser,gspass);
  if (result) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"" + fqLayerName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + fqLayerName);
  }
  return result;
}",0.9284543965046422
178017,"/** 
 * Publish a zipped shapefile. <P>These are the equivalent calls with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/datastores/$STORENAME/file.shp curl -u admin:geoserver -XPOST -H 'Content-type: text/xml'  \ -d ""<featureType><name>$BARE</name><nativeCRS>EPSG:4326</nativeCRS><enabled>true</enabled></featureType>""  \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/datastores/$STORENAME/featuretypes/$LAYERNAME}</PRE>
 * @return true if the operation completed successfully.
 */
public boolean publishShp(String workspace,String storename,String layername,File zipFile,String srs) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  String sentResult=HTTPUtils.put(sbUrl.toString(),zipFile,""String_Node_Str"",gsuser,gspass);
  boolean shpSent=sentResult != null;
  if (shpSent) {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str""+ zipFile+ ""String_Node_Str"");
    StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"").append(layername);
    GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
    fte.addName(layername);
    fte.addSRS(srs);
    fte.addProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
    String configuredResult=HTTPUtils.putXml(postUrl.toString(),fte.toString(),this.gsuser,this.gspass);
    boolean shpConfigured=configuredResult != null;
    if (!shpConfigured) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
    return shpConfigured;
  }
 else {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    return false;
  }
}","/** 
 * Publish a zipped shapefile. <P> These are the equivalent calls with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/datastores/$STORENAME/file.shp curl -u admin:geoserver -XPOST -H 'Content-type: text/xml'  \ -d ""<featureType><name>$BARE</name><nativeCRS>EPSG:4326</nativeCRS><enabled>true</enabled></featureType>""  \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/datastores/$STORENAME/featuretypes/$LAYERNAME}</PRE>
 * @return true if the operation completed successfully.
 */
public boolean publishShp(String workspace,String storename,String layername,File zipFile,String srs) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  String sentResult=HTTPUtils.put(sbUrl.toString(),zipFile,""String_Node_Str"",gsuser,gspass);
  boolean shpSent=sentResult != null;
  if (shpSent) {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str""+ zipFile+ ""String_Node_Str"");
    StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"").append(layername);
    GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
    fte.addName(layername);
    fte.addSRS(srs);
    fte.addProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
    String configuredResult=HTTPUtils.putXml(postUrl.toString(),fte.toString(),this.gsuser,this.gspass);
    boolean shpConfigured=configuredResult != null;
    if (!shpConfigured) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
    return shpConfigured;
  }
 else {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    return false;
  }
}",0.9997653133067356
178018,"/** 
 * Publish a GeoTiff. <P>This is the equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$FULLPATH"" \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$STORENAME/external.geotiff}</PRE>
 * @return true if the operation completed successfully.
 * @deprecated UNTESTED
 */
public boolean publishGeoTIFF(String workspace,String storeName,File geotiff) throws FileNotFoundException {
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storeName+ ""String_Node_Str"";
  String sendResult=HTTPUtils.put(sUrl,geotiff,""String_Node_Str"",gsuser,gspass);
  boolean sent=sendResult != null;
  return sent;
}","/** 
 * Publish a GeoTiff. <P> This is the equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$FULLPATH"" \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$STORENAME/external.geotiff}</PRE>
 * @return true if the operation completed successfully.
 * @deprecated UNTESTED
 */
public boolean publishGeoTIFF(String workspace,String storeName,File geotiff) throws FileNotFoundException {
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storeName+ ""String_Node_Str"";
  String sendResult=HTTPUtils.put(sUrl,geotiff,""String_Node_Str"",gsuser,gspass);
  boolean sent=sendResult != null;
  return sent;
}",0.9992821249102656
178019,"/** 
 * Publish a table in a PostGis store as a new layer. <P>This is the equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPOST -H 'Content-type: text/xml' \-d ""<featureType><name>easia_gaul_1_aggr</name><nativeCRS>EPSG:4326</nativeCRS><enabled>true</enabled></featureType>"" \ http://localhost:8080/geoserver/rest/workspaces/it.geosolutions/datastores/pg_kids/featuretypes}</PRE> and a PUT to <BR>restURL + ""/rest/layers/"" + layerName
 */
public boolean publishDBLayer(String workspace,String storename,String layername,String srs,String defaultStyle){
  StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
  fte.addName(layername);
  fte.addSRS(srs);
  String ftypeXml=fte.toString();
  String configuredResult=HTTPUtils.postXml(postUrl.toString(),ftypeXml,this.gsuser,this.gspass);
  boolean published=configuredResult != null;
  boolean configured=false;
  if (!published) {
    LOGGER.warn(""String_Node_Str"" + configuredResult + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
  }
 else {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    GSLayerEncoder layerEncoder=new GSLayerEncoder();
    layerEncoder.addDefaultStyle(defaultStyle);
    configured=configureLayer(workspace,layername,layerEncoder);
    if (!configured) {
      LOGGER.warn(""String_Node_Str"" + configuredResult + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
  }
  return published && configured;
}","/** 
 * Publish a table in a PostGis store as a new layer. <P> This is the equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPOST -H 'Content-type: text/xml' \-d ""<featureType><name>easia_gaul_1_aggr</name><nativeCRS>EPSG:4326</nativeCRS><enabled>true</enabled></featureType>"" \ http://localhost:8080/geoserver/rest/workspaces/it.geosolutions/datastores/pg_kids/featuretypes}</PRE> and a PUT to <BR> restURL + ""/rest/layers/"" + layerName
 */
public boolean publishDBLayer(String workspace,String storename,String layername,String srs,String defaultStyle){
  StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
  fte.addName(layername);
  fte.addSRS(srs);
  String ftypeXml=fte.toString();
  String configuredResult=HTTPUtils.postXml(postUrl.toString(),ftypeXml,this.gsuser,this.gspass);
  boolean published=configuredResult != null;
  boolean configured=false;
  if (!published) {
    LOGGER.warn(""String_Node_Str"" + configuredResult + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
  }
 else {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    GSLayerEncoder layerEncoder=new GSLayerEncoder();
    layerEncoder.addDefaultStyle(defaultStyle);
    configured=configureLayer(workspace,layername,layerEncoder);
    if (!configured) {
      LOGGER.warn(""String_Node_Str"" + configuredResult + ""String_Node_Str""+ workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
  }
  return published && configured;
}",0.9994308480364256
178020,"/** 
 * Allows to configure some coverage's attributes
 */
protected boolean configureCoverage(final GSCoverageEncoder ce,String wsname,String csname,String cname){
  final String url=restURL + ""String_Node_Str"" + wsname+ ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname+ ""String_Node_Str"";
  String xmlBody=ce.toString();
  String sendResult=HTTPUtils.putXml(url,xmlBody,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + wsname + ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + wsname + ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname+ ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}","/** 
 * Allows to configure some coverage's attributes
 * @param ce Coverage encoder
 * @param wsname workspace name
 * @param csname coveragestore name
 * @param cname coverage name (if != null will override the CoverageEncoder name)
 * @return true if success
 * @deprecated
 */
protected boolean configureCoverage(final GSCoverageEncoder ce,final String wsname,final String csname,String cname){
  if (cname != null)   ce.setName(cname);
 else   cname=ce.getName();
  return configureCoverage(ce,wsname,csname);
}",0.2572298325722983
178021,"/** 
 * Publish a Mosaic already in a filesystem readable by GeoServer. <P> Sample cUrl usage:<BR> <> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException
 */
public RESTCoverageStore configureExternaMosaicDatastore(String workspace,String storeName,File mosaicDir) throws FileNotFoundException {
  if (!mosaicDir.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + mosaicDir + ""String_Node_Str"");
  }
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storeName+ ""String_Node_Str"";
  String sendResult=HTTPUtils.put(sUrl,mosaicDir.toURI().toString(),""String_Node_Str"",gsuser,gspass);
  return RESTCoverageStore.build(sendResult);
}","/** 
 * @deprecated provided for backward compatibility use {@link
	 *             createExternaMosaicDatastore(String workspace, StringstoreName, File mosaicDir, CoverageConfigure configure)}
 * @param workspace
 * @param storeName
 * @param mosaicDir
 * @return
 * @throws FileNotFoundException
 */
public RESTCoverageStore configureExternaMosaicDatastore(String workspace,String storeName,File mosaicDir) throws FileNotFoundException {
  return createExternaMosaicDatastore(workspace,storeName,mosaicDir,ParameterConfigure.FIRST,ParameterUpdate.APPEND);
}",0.0256410256410256
178022,"/** 
 * Publish a Mosaic already in a filesystem readable by GeoServer. <P> Sample cUrl usage:<BR> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param coverageEncoder the set of parameters to be set to the coverage (bbox, srs, ...)
 * @param layerEncoder  the set of parameters to be set to the layer (defaultstyle, wmspath, ...)
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException
 */
public RESTCoverageStore publishExternalMosaic(String workspace,String storeName,File mosaicDir,GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder) throws FileNotFoundException {
  RESTCoverageStore store=configureExternaMosaicDatastore(workspace,storeName,mosaicDir);
  if (coverageEncoder == null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + workspace + ""String_Node_Str""+ storeName);
    }
    coverageEncoder=new GSCoverageEncoder();
  }
  if (layerEncoder == null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + workspace + ""String_Node_Str""+ storeName);
    }
    layerEncoder=new GSLayerEncoder();
  }
  if (store != null) {
    try {
      GeoServerRESTReader reader=new GeoServerRESTReader(restURL,gsuser,gspass);
      RESTCoverageList covList=reader.getCoverages(store.getWorkspaceName(),storeName);
      if (covList.isEmpty()) {
        LOGGER.error(""String_Node_Str"" + storeName);
        return null;
      }
      String coverageName=covList.get(0).getName();
      coverageEncoder.setName(FilenameUtils.getBaseName(mosaicDir.getName()));
      configureCoverage(coverageEncoder,workspace,storeName,coverageName);
      configureLayer(workspace,storeName,layerEncoder);
    }
 catch (    Exception e) {
      if (LOGGER.isEnabledFor(Level.WARN))       LOGGER.warn(""String_Node_Str"" + storeName,e);
      store=null;
    }
  }
  return store;
}","/** 
 * Publish a Mosaic already in a filesystem readable by GeoServer. <P> Sample cUrl usage:<BR> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param coverageEncoder the set of parameters to be set to the coverage (bbox, srs, ...)
 * @param layerEncoder the set of parameters to be set to the layer (defaultstyle, wmspath, ...)
 * @return the created RESTCoverageStore
 * @deprecated this is keep only for backward compatibility usecreateExternalMosaic and getCoverageStore separately
 * @throws FileNotFoundException
 */
public RESTCoverageStore publishExternalMosaic(String workspace,String storeName,File mosaicDir,GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder) throws FileNotFoundException {
  if (!createExternalMosaic(workspace,storeName,mosaicDir,coverageEncoder,layerEncoder)) {
    return null;
  }
  GeoServerRESTReader reader;
  try {
    reader=new GeoServerRESTReader(restURL,gsuser,gspass);
  }
 catch (  MalformedURLException e1) {
    LOGGER.warn(""String_Node_Str"" + storeName,e1);
    return null;
  }
  final RESTCoverageStore store=reader.getCoverageStore(workspace,storeName);
  if (store == null) {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storeName+ ""String_Node_Str"");
    return null;
  }
  return store;
}",0.5583244962884412
178023,"/** 
 * reload the target geoserver configuration
 * @return true if success
 * @see http://docs.geoserver.org/stable/en/user/restconfig/rest-config-api.html
 */
public boolean reload(){
  String sUrl=restURL + ""String_Node_Str"";
  String result=HTTPUtils.post(sUrl,""String_Node_Str"",""String_Node_Str"",gsuser,gspass);
  return result != null;
}","/** 
 * reload the target geoserver configuration
 * @return true if success
 * @see http ://docs.geoserver.org/stable/en/user/restconfig/rest-config-api.html
 */
public boolean reload(){
  String sUrl=restURL + ""String_Node_Str"";
  String result=HTTPUtils.post(sUrl,""String_Node_Str"",""String_Node_Str"",gsuser,gspass);
  return result != null;
}",0.9985486211901308
178024,"/** 
 * reset the target geoserver configuration
 * @return true if success
 * @see http://docs.geoserver.org/stable/en/user/restconfig/rest-config-api.html
 */
public boolean reset(){
  String sUrl=restURL + ""String_Node_Str"";
  String result=HTTPUtils.post(sUrl,""String_Node_Str"",""String_Node_Str"",gsuser,gspass);
  return result != null;
}","/** 
 * reset the target geoserver configuration
 * @return true if success
 * @see http ://docs.geoserver.org/stable/en/user/restconfig/rest-config-api.html
 */
public boolean reset(){
  String sUrl=restURL + ""String_Node_Str"";
  String result=HTTPUtils.post(sUrl,""String_Node_Str"",""String_Node_Str"",gsuser,gspass);
  return result != null;
}",0.9985401459854014
178025,"/** 
 * Create a new Workspace
 * @param workspace The name of the new workspace.<P> This is the equivalent call with cUrl: <PRE> {@code curl -u admin:geoserver -XPOST \-H 'Content-type: text/xml' \ -d ""<workspace><name>$WORKSPACE</name></workspace>"" \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces}</PRE>
 */
public boolean createWorkspace(final String workspace){
  final String sUrl=restURL + ""String_Node_Str"";
  final GSWorkspaceEncoder wsenc=new GSWorkspaceEncoder(workspace);
  final String wsxml=wsenc.toString();
  final String result=HTTPUtils.postXml(sUrl,wsxml,gsuser,gspass);
  return result != null;
}","/** 
 * Create a new Workspace
 * @param workspace The name of the new workspace. <P> This is the equivalent call with cUrl: <PRE> {@code curl -u admin:geoserver -XPOST \-H 'Content-type: text/xml' \ -d ""<workspace><name>$WORKSPACE</name></workspace>"" \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces}</PRE>
 */
public boolean createWorkspace(final String workspace){
  final String sUrl=restURL + ""String_Node_Str"";
  final GSWorkspaceEncoder wsenc=new GSWorkspaceEncoder(workspace);
  final String wsxml=wsenc.toString();
  final String result=HTTPUtils.postXml(sUrl,wsxml,gsuser,gspass);
  return result != null;
}",0.9991876523151908
178026,"/** 
 * Allows to configure some layer attributes such as WmsPath and DefaultStyle
 */
public boolean configureLayer(final String workspace,final String layerName,final GSLayerEncoder layer){
  if (layer.isEmpty()) {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"");
    return true;
  }
  final String fqLayerName;
  if (workspace == null) {
    fqLayerName=layerName;
    if (LOGGER.isEnabledFor(Level.WARN)) {
      LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
    }
  }
 else {
    fqLayerName=workspace + ""String_Node_Str"" + layerName;
  }
  final String url=restURL + ""String_Node_Str"" + fqLayerName;
  String layerXml=layer.toString();
  String sendResult=HTTPUtils.putXml(url,layerXml,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"" + fqLayerName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + fqLayerName + ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}","/** 
 * Allows to configure some layer attributes such and DefaultStyle TODO WmsPath
 */
public boolean configureLayer(final String workspace,final String layerName,final GSLayerEncoder layer){
  if (layer.isEmpty()) {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"");
    return true;
  }
  final String fqLayerName;
  if (workspace == null) {
    fqLayerName=layerName;
    if (LOGGER.isEnabledFor(Level.WARN)) {
      LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
    }
  }
 else {
    fqLayerName=workspace + ""String_Node_Str"" + layerName;
  }
  final String url=restURL + ""String_Node_Str"" + fqLayerName;
  String layerXml=layer.toString();
  String sendResult=HTTPUtils.putXml(url,layerXml,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"" + fqLayerName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + fqLayerName + ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}",0.9821428571428572
178027,"/** 
 * Remove a given CoverageStore in a given Workspace.
 * @param workspace The name of the workspace
 * @param storename The name of the CoverageStore to remove.
 * @return <TT>true</TT> if the CoverageStore was successfully removed.
 */
public boolean removeCoverageStore(String workspace,String storename){
  try {
    URL deleteStore=new URL(restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storename);
    boolean deleted=HTTPUtils.delete(deleteStore.toExternalForm(),gsuser,gspass);
    if (!deleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
    return deleted;
  }
 catch (  MalformedURLException ex) {
    LOGGER.error(ex);
    return false;
  }
}","/** 
 * Remove a given CoverageStore in a given Workspace.
 * @param workspace The name of the workspace
 * @param storename The name of the CoverageStore to remove.
 * @param recurse if remove should be performed recursively
 * @return <TT>true</TT> if the CoverageStore was successfully removed.
 */
public boolean removeCoverageStore(final String workspace,final String storename,final boolean recurse){
  try {
    final StringBuilder url=new StringBuilder(restURL);
    url.append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename);
    if (recurse)     url.append(""String_Node_Str"");
    final URL deleteStore=new URL(url.toString());
    boolean deleted=HTTPUtils.delete(deleteStore.toExternalForm(),gsuser,gspass);
    if (!deleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
    return deleted;
  }
 catch (  MalformedURLException ex) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(ex);
    return false;
  }
}",0.7463465553235908
178028,"/** 
 * Remove the Coverage configuration from GeoServer. <BR> First, the associated layer is removed, then the Coverage configuration itself. <P> <B>CHECKME</B> Maybe the coveragestore has to be removed as well. <P> REST URL: <TT>http://localhost:8080/geoserver/rest/workspaces/it.geosolutions/coveragestores/gbRESTtestStore/coverages/resttestdem.xml</TT>
 * @return true if the operation completed successfully.
 */
public boolean unpublishCoverage(String workspace,String storename,String layername){
  try {
    URL deleteLayerUrl=new URL(restURL + ""String_Node_Str"" + layername);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + ""String_Node_Str"" + layername);
    }
    boolean layerDeleted=HTTPUtils.delete(deleteLayerUrl.toExternalForm(),gsuser,gspass);
    if (!layerDeleted) {
      LOGGER.warn(""String_Node_Str"" + layername + ""String_Node_Str"");
      return false;
    }
    URL deleteCovUrl=new URL(restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + ""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    }
    boolean covDeleted=HTTPUtils.delete(deleteCovUrl.toExternalForm(),gsuser,gspass);
    if (!covDeleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername);
    }
    return covDeleted;
  }
 catch (  MalformedURLException ex) {
    LOGGER.error(ex);
    return false;
  }
}","/** 
 * Remove the Coverage configuration from GeoServer. <BR> First, the associated layer is removed, then the Coverage configuration itself. <P> <B>CHECKME</B> Maybe the coveragestore has to be removed as well. <P> REST URL: <TT>http://localhost:8080/geoserver/rest/workspaces/it.geosolutions/coveragestores/gbRESTtestStore/coverages/resttestdem.xml</TT>
 * @return true if the operation completed successfully.
 */
public boolean unpublishCoverage(String workspace,String storename,String layerName){
  try {
    final String fqLayerName;
    if (workspace == null) {
      fqLayerName=layerName;
      if (LOGGER.isEnabledFor(Level.WARN)) {
        LOGGER.warn(""String_Node_Str"" + layerName + ""String_Node_Str"");
      }
    }
 else {
      fqLayerName=workspace + ""String_Node_Str"" + layerName;
    }
    URL deleteLayerUrl=new URL(restURL + ""String_Node_Str"" + fqLayerName);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + ""String_Node_Str"" + fqLayerName);
    }
    boolean layerDeleted=HTTPUtils.delete(deleteLayerUrl.toExternalForm(),gsuser,gspass);
    if (!layerDeleted) {
      LOGGER.warn(""String_Node_Str"" + fqLayerName + ""String_Node_Str"");
      return false;
    }
    URL deleteCovUrl=new URL(restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + ""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName);
    }
    boolean covDeleted=HTTPUtils.delete(deleteCovUrl.toExternalForm(),gsuser,gspass);
    if (!covDeleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName+ ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layerName);
    }
    return covDeleted;
  }
 catch (  MalformedURLException ex) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(ex);
    return false;
  }
}",0.8958668813741277
178029,"/** 
 * Remove a given Datastore in a given Workspace.
 * @param workspace The name of the workspace
 * @param storename The name of the Datastore to remove.
 * @return <TT>true</TT> if the datastore was successfully removed.
 */
public boolean removeDatastore(String workspace,String storename){
  try {
    URL deleteStore=new URL(restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storename);
    boolean deleted=HTTPUtils.delete(deleteStore.toExternalForm(),gsuser,gspass);
    if (!deleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
    return deleted;
  }
 catch (  MalformedURLException ex) {
    LOGGER.error(ex);
    return false;
  }
}","/** 
 * Remove a given Datastore in a given Workspace.
 * @param workspace The name of the workspace
 * @param storename The name of the Datastore to remove.
 * @param recurse if remove should be performed recursively
 * @return <TT>true</TT> if the datastore was successfully removed.
 */
public boolean removeDatastore(String workspace,String storename,final boolean recurse){
  try {
    final StringBuilder url=new StringBuilder(restURL);
    url.append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename);
    if (recurse)     url.append(""String_Node_Str"");
    final URL deleteStore=new URL(url.toString());
    boolean deleted=HTTPUtils.delete(deleteStore.toExternalForm(),gsuser,gspass);
    if (!deleted) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
 else {
      LOGGER.info(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename);
    }
    return deleted;
  }
 catch (  MalformedURLException ex) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(ex);
    return false;
  }
}",0.7767094017094017
178030,"public static RESTCoverageStore build(String response){
  if (response == null)   return null;
  Element pb=JDOMBuilder.buildElement(response);
  if (pb != null)   return new RESTCoverageStore(pb);
 else   return null;
}","public static RESTCoverageStore build(String response){
  if (response == null)   return null;
  if (response.isEmpty())   return new RESTCoverageStore(new Element(""String_Node_Str""));
  Element pb=JDOMBuilder.buildElement(response);
  if (pb != null)   return new RESTCoverageStore(pb);
 else   return null;
}",0.8301886792452831
178031,"public void setLatLonBoundingBox(double minx,double maxy,double maxx,double miny,final String crs){
  set(LATLONBBMINX,String.valueOf(minx));
  set(LATLONBBMAXY,String.valueOf(maxy));
  set(LATLONBBMAXX,String.valueOf(maxx));
  set(LATLONBBMINY,String.valueOf(miny));
  set(LATLONBBCRS,crs);
}","public void setLatLonBoundingBox(double minx,double miny,double maxx,double maxy,final String crs){
  set(LATLONBBMINX,String.valueOf(minx));
  set(LATLONBBMAXY,String.valueOf(maxy));
  set(LATLONBBMAXX,String.valueOf(maxx));
  set(LATLONBBMINY,String.valueOf(miny));
  set(LATLONBBCRS,crs);
}",0.9112627986348124
178032,"/** 
 * @deprecated use the setSRS. <br>This method will be set as protected in the next release
 * @param minx
 * @param maxy
 * @param maxx
 * @param miny
 * @param crs
 */
public void addLatLonBoundingBox(double minx,double maxy,double maxx,double miny,final String crs){
  add(LATLONBBMINX,String.valueOf(minx));
  add(LATLONBBMAXY,String.valueOf(maxy));
  add(LATLONBBMAXX,String.valueOf(maxx));
  add(LATLONBBMINY,String.valueOf(miny));
  add(LATLONBBCRS,crs);
}","/** 
 * @deprecated use the setSRS. <br>This method will be set as protected in the next release
 * @param minx
 * @param maxy
 * @param maxx
 * @param miny
 * @param crs
 */
public void addLatLonBoundingBox(double minx,double miny,double maxx,double maxy,final String crs){
  add(LATLONBBMINX,String.valueOf(minx));
  add(LATLONBBMINY,String.valueOf(miny));
  add(LATLONBBMAXY,String.valueOf(maxy));
  add(LATLONBBMAXX,String.valueOf(maxx));
  add(LATLONBBCRS,crs);
}",0.8547008547008547
178033,"public void setNativeBoundingBox(double minx,double maxy,double maxx,double miny,final String crs){
  set(NATIVEBBMINX,String.valueOf(minx));
  set(NATIVEBBMAXY,String.valueOf(maxy));
  set(NATIVEBBMAXX,String.valueOf(maxx));
  set(NATIVEBBMINY,String.valueOf(miny));
  set(NATIVEBBCRS,crs);
}","public void setNativeBoundingBox(double minx,double miny,double maxx,double maxy,final String crs){
  set(NATIVEBBMINX,String.valueOf(minx));
  set(NATIVEBBMAXY,String.valueOf(maxy));
  set(NATIVEBBMAXX,String.valueOf(maxx));
  set(NATIVEBBMINY,String.valueOf(miny));
  set(NATIVEBBCRS,crs);
}",0.9112627986348124
178034,"/** 
 * @deprecated use the setSRS. <br>This method will be set as protected in the next release
 * @param minx
 * @param maxy
 * @param maxx
 * @param miny
 * @param crs
 */
public void addNativeBoundingBox(double minx,double maxy,double maxx,double miny,final String crs){
  add(NATIVEBBMINX,String.valueOf(minx));
  add(NATIVEBBMAXY,String.valueOf(maxy));
  add(NATIVEBBMAXX,String.valueOf(maxx));
  add(NATIVEBBMINY,String.valueOf(miny));
  add(NATIVEBBCRS,crs);
}","/** 
 * @deprecated use the setSRS. <br>This method will be set as protected in the next release
 * @param minx
 * @param maxy
 * @param maxx
 * @param miny
 * @param crs
 */
public void addNativeBoundingBox(double minx,double miny,double maxx,double maxy,final String crs){
  add(NATIVEBBMINX,String.valueOf(minx));
  add(NATIVEBBMAXY,String.valueOf(maxy));
  add(NATIVEBBMAXX,String.valueOf(maxx));
  add(NATIVEBBMINY,String.valueOf(miny));
  add(NATIVEBBCRS,crs);
}",0.9444444444444444
178035,"/** 
 * @deprecated will be set to protected in the next release
 * @param val
 */
public void addFilter(final String val){
  final Element param=new Element(ENTRY);
  param.addContent(new Element(STRING).setText(filter));
  param.addContent(new Element(STRING).setText(val));
  parameters.add(null,param);
}","/** 
 * @deprecated will be set to protected in the next release
 * @param val
 */
public void addFilter(final String val){
  final List<Element> list=new ArrayList<Element>(2);
  list.add(new Element(STRING).setText(filter));
  list.add(new Element(STRING).setText(val));
  parameters.add(null,list);
}",0.8477905073649754
178036,"/** 
 * Publish a Mosaic from a filesystem currently readable by GeoServer. <P> Sample cUrl usage:<BR> <> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param configure a specify if a coverage should be configured
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException
 */
public RESTCoverageStore createExternaMosaicDatastore(String workspace,String storeName,File mosaicDir,ParameterConfigure configure,ParameterUpdate update) throws FileNotFoundException {
  if (!mosaicDir.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + mosaicDir + ""String_Node_Str"");
  }
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storeName+ ""String_Node_Str""+ configure.toString()+ ""String_Node_Str""+ update.toString();
  String sendResult=HTTPUtils.put(sUrl,mosaicDir.toURI().toString(),""String_Node_Str"",gsuser,gspass);
  return RESTCoverageStore.build(sendResult);
}","/** 
 * Publish a Mosaic from a filesystem currently readable by GeoServer. <P> Sample cUrl usage:<BR> <> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param configure a specify if a coverage should be configured
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException
 */
public RESTCoverageStore createExternaMosaicDatastore(String workspace,String storeName,File mosaicDir,ParameterConfigure configure,ParameterUpdate update) throws FileNotFoundException {
  if (!mosaicDir.isDirectory()) {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + mosaicDir + ""String_Node_Str"");
  }
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storeName+ ""String_Node_Str""+ configure.toString()+ ""String_Node_Str""+ update.toString();
  String sendResult=HTTPUtils.put(sUrl,mosaicDir.toURI().toString(),""String_Node_Str"",gsuser,gspass);
  return RESTCoverageStore.build(sendResult);
}",0.967640094711918
178037,"/** 
 * Returns item's name, with a maximum length
 * @param itemStack ItemStack to name
 * @param maxLength The max length that the name should have; 0 or below if it should be unlimited
 * @return ItemStack's name
 */
public static String getName(ItemStack itemStack,int maxLength){
  String alias=Odd.getAlias(itemStack);
  String itemName=alias != null ? alias : itemStack.getType().toString();
  String data=DataValue.name(itemStack);
  String durability=""String_Node_Str"";
  if (data == null) {
    if (itemStack.getDurability() != 0) {
      durability=""String_Node_Str"" + itemStack.getDurability();
    }
  }
  data=data != null ? data + ""String_Node_Str"" : ""String_Node_Str"";
  String metaData=""String_Node_Str"";
  if (itemStack.hasItemMeta()) {
    metaData=""String_Node_Str"" + Metadata.getItemCode(itemStack);
  }
  String code=data + itemName + durability+ metaData;
  if (maxLength > 0 && code.length() > maxLength) {
    int exceeding=code.length() - maxLength;
    code=data + getShortenedName(itemName,itemName.length() - exceeding) + durability+ metaData;
  }
  code=StringUtil.capitalizeFirstLetter(code,'_');
  ItemStack codeItem=getItem(code);
  if (!equals(itemStack,codeItem)) {
    throw new IllegalArgumentException(""String_Node_Str"" + itemStack + ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ code);
  }
  return code;
}","/** 
 * Returns item's name, with a maximum length
 * @param itemStack ItemStack to name
 * @param maxLength The max length that the name should have; 0 or below if it should be unlimited
 * @return ItemStack's name
 */
public static String getName(ItemStack itemStack,int maxLength){
  String alias=Odd.getAlias(itemStack);
  String itemName=alias != null ? alias : itemStack.getType().toString();
  String data=DataValue.name(itemStack);
  String durability=""String_Node_Str"";
  if (data == null) {
    if (itemStack.getDurability() != 0) {
      durability=""String_Node_Str"" + itemStack.getDurability();
    }
  }
  data=data != null ? data + ""String_Node_Str"" : ""String_Node_Str"";
  String metaData=""String_Node_Str"";
  if (itemStack.hasItemMeta()) {
    metaData=""String_Node_Str"" + Metadata.getItemCode(itemStack);
  }
  int codeLength=(data + itemName + durability+ metaData).length();
  String code=data + itemName;
  if (maxLength > 0 && codeLength > maxLength) {
    int exceeding=codeLength - maxLength;
    code=getShortenedName(code,code.length() - exceeding);
  }
  code=StringUtil.capitalizeFirstLetter(code,'_') + durability + metaData;
  ItemStack codeItem=getItem(code);
  if (!equals(itemStack,codeItem)) {
    throw new IllegalArgumentException(""String_Node_Str"" + itemStack + ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ code+ ""String_Node_Str""+ codeItem+ ""String_Node_Str"");
  }
  return code;
}",0.9079089924160346
178038,"public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){
  ItemStack item;
  if (args.length == 0) {
    if (!(sender instanceof HumanEntity)) {
      return false;
    }
    item=((HumanEntity)sender).getItemInHand();
  }
 else {
    item=MaterialUtil.getItem(StringUtil.joinArray(args));
  }
  if (MaterialUtil.isEmpty(item)) {
    return false;
  }
  sender.sendMessage(Messages.prefix(iteminfo));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GRAY+ MaterialUtil.getName(item));
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GRAY+ MaterialUtil.getSignName(item));
  ItemInfoEvent event=new ItemInfoEvent(sender,item);
  ChestShop.callEvent(event);
  return true;
}","public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){
  ItemStack item;
  if (args.length == 0) {
    if (!(sender instanceof HumanEntity)) {
      return false;
    }
    item=((HumanEntity)sender).getItemInHand();
  }
 else {
    item=MaterialUtil.getItem(StringUtil.joinArray(args));
  }
  if (MaterialUtil.isEmpty(item)) {
    return false;
  }
  sender.sendMessage(Messages.prefix(iteminfo));
  try {
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GRAY+ MaterialUtil.getName(item));
  }
 catch (  IllegalArgumentException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
  }
  try {
    sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GRAY+ MaterialUtil.getSignName(item));
  }
 catch (  IllegalArgumentException e) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + e.getMessage());
  }
  ItemInfoEvent event=new ItemInfoEvent(sender,item);
  ChestShop.callEvent(event);
  return true;
}",0.8472063854047891
178039,"/** 
 * Returns item's name, with a maximum length
 * @param itemStack ItemStack to name
 * @param maxLength The max length that the name should have; 0 or below if it should be unlimited
 * @return ItemStack's name
 */
public static String getName(ItemStack itemStack,int maxLength){
  String alias=Odd.getAlias(itemStack);
  String itemName=alias != null ? alias : itemStack.getType().toString();
  String data=DataValue.name(itemStack);
  String durability=""String_Node_Str"";
  if (data == null) {
    if (itemStack.getDurability() != 0) {
      durability=""String_Node_Str"" + itemStack.getDurability();
    }
  }
  data=data != null ? data + ""String_Node_Str"" : ""String_Node_Str"";
  String metaData=""String_Node_Str"";
  if (itemStack.hasItemMeta()) {
    metaData=""String_Node_Str"" + Metadata.getItemCode(itemStack);
  }
  int codeLength=(data + itemName + durability+ metaData).length();
  String code=data + itemName;
  if (maxLength > 0 && codeLength > maxLength) {
    int exceeding=codeLength - maxLength;
    code=getShortenedName(code,code.length() - exceeding);
  }
  code=StringUtil.capitalizeFirstLetter(code,'_') + durability + metaData;
  ItemStack codeItem=getItem(code);
  if (!equals(itemStack,codeItem)) {
    throw new IllegalArgumentException(""String_Node_Str"" + itemStack + ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ code+ ""String_Node_Str""+ codeItem+ ""String_Node_Str"");
  }
  return code;
}","/** 
 * Returns item's name, with a maximum length
 * @param itemStack ItemStack to name
 * @param maxLength The max length that the name should have; 0 or below if it should be unlimited
 * @return ItemStack's name
 */
public static String getName(ItemStack itemStack,int maxLength){
  String alias=Odd.getAlias(itemStack);
  String itemName=alias != null ? alias : itemStack.getType().toString();
  if (itemStack.getType() != Material.HUGE_MUSHROOM_2 && itemName.endsWith(""String_Node_Str"")) {
    itemName=itemName.substring(0,itemName.length() - 2);
  }
  String data=DataValue.name(itemStack);
  String durability=""String_Node_Str"";
  if (data == null) {
    if (itemStack.getDurability() != 0) {
      durability=""String_Node_Str"" + itemStack.getDurability();
    }
  }
  data=data != null ? data + ""String_Node_Str"" : ""String_Node_Str"";
  String metaData=""String_Node_Str"";
  if (itemStack.hasItemMeta()) {
    metaData=""String_Node_Str"" + Metadata.getItemCode(itemStack);
  }
  int codeLength=(data + itemName + durability+ metaData).length();
  String code=data + itemName;
  if (maxLength > 0 && codeLength > maxLength) {
    int exceeding=codeLength - maxLength;
    code=getShortenedName(code,code.length() - exceeding);
  }
  code=StringUtil.capitalizeFirstLetter(code,'_') + durability + metaData;
  ItemStack codeItem=getItem(code);
  if (!equals(itemStack,codeItem)) {
    throw new IllegalArgumentException(""String_Node_Str"" + itemStack + ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ code+ ""String_Node_Str""+ codeItem+ ""String_Node_Str"");
  }
  return code;
}",0.7717427524158614
178040,"/** 
 * Gives you an ItemStack from a String
 * @param itemName Item name
 * @return ItemStack
 */
public static ItemStack getItem(String itemName){
  ItemStack itemStack=Odd.getFromString(itemName);
  if (itemStack != null) {
    return itemStack;
  }
  String[] split=itemName.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    split[i]=split[i].trim();
  }
  Material material=getMaterial(split[0]);
  short durability=getDurability(itemName);
  MaterialData data=null;
  if (material == null) {
    if (!split[0].contains(""String_Node_Str"")) {
      return null;
    }
    for (int index=split[0].indexOf(' '); index >= 0 && index + 1 < split[0].length(); index=split[0].indexOf(' ',index + 1)) {
      material=getMaterial(split[0].substring(index + 1));
      if (material != null) {
        data=DataValue.getData(split[0].substring(0,index),material);
        break;
      }
    }
    if (material == null) {
      return null;
    }
  }
  itemStack=new ItemStack(material);
  if (data != null) {
    itemStack.setData(data);
    durability=data.getData();
  }
  itemStack.setDurability(durability);
  ItemMeta meta=getMetadata(itemName);
  if (meta != null) {
    itemStack.setItemMeta(meta);
  }
  return itemStack;
}","/** 
 * Gives you an ItemStack from a String
 * @param itemName Item name
 * @return ItemStack
 */
public static ItemStack getItem(String itemName){
  ItemStack itemStack=Odd.getFromString(itemName);
  if (itemStack != null) {
    return itemStack;
  }
  String[] split=itemName.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    split[i]=split[i].trim();
  }
  Material material=getMaterial(split[0]);
  short durability=getDurability(itemName);
  MaterialData data=null;
  if (material == null) {
    if (!split[0].contains(""String_Node_Str"")) {
      return null;
    }
    for (int index=split[0].indexOf(' '); index >= 0 && index + 1 < split[0].length(); index=split[0].indexOf(' ',index + 1)) {
      material=getMaterial(split[0].substring(index + 1));
      if (material != null) {
        data=DataValue.getData(split[0].substring(0,index),material);
        material=data.getItemType();
        break;
      }
    }
    if (material == null) {
      return null;
    }
  }
  itemStack=new ItemStack(material);
  if (data != null) {
    itemStack.setData(data);
    durability=data.getData();
  }
  itemStack.setDurability(durability);
  ItemMeta meta=getMetadata(itemName);
  if (meta != null) {
    itemStack.setItemMeta(meta);
  }
  return itemStack;
}",0.9853812722244172
178041,"/** 
 * Gets the dat from a string
 * @param type     Data Value string
 * @param material Material
 * @return data
 */
public static MaterialData getData(String type,Material material){
  type=type.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  MaterialData materialData=new ItemStack(material).getData();
  if (materialData instanceof TexturedMaterial) {
    TexturedMaterial texturedMaterial=(TexturedMaterial)materialData;
    Material texture=new EnumParser<Material>().parse(type,texturedMaterial.getTextures().toArray(new Material[0]));
    if (texture != null) {
      ((TexturedMaterial)materialData).setMaterial(texture);
    }
  }
 else   if (materialData instanceof Colorable) {
    DyeColor color=new EnumParser<DyeColor>().parse(type,DyeColor.values());
    if (color != null) {
      ((Colorable)materialData).setColor(color);
    }
  }
 else   if (materialData instanceof Wood) {
    TreeSpecies species=new EnumParser<TreeSpecies>().parse(type,TreeSpecies.values());
    if (species != null) {
      ((Wood)materialData).setSpecies(species);
    }
  }
 else   if (materialData instanceof SpawnEgg) {
    EntityType entityType=new EnumParser<EntityType>().parse(type,EntityType.values());
    if (entityType != null) {
      ((SpawnEgg)materialData).setSpawnedType(entityType);
    }
  }
 else   if (materialData instanceof Coal) {
    CoalType coalType=new EnumParser<CoalType>().parse(type,CoalType.values());
    if (coalType != null) {
      ((Coal)materialData).setType(coalType);
    }
  }
 else   if (materialData instanceof Sandstone) {
    SandstoneType sandstoneType=new EnumParser<SandstoneType>().parse(type,SandstoneType.values());
    if (sandstoneType != null) {
      ((Sandstone)materialData).setType(sandstoneType);
    }
  }
  return materialData;
}","/** 
 * Gets the dat from a string
 * @param type     Data Value string
 * @param material Material
 * @return data    The Material data with that name, under some circumstances the type of the data might bedifferent from the inputted Material. (e.g. with LOG_2 or similar alternatives) It's advised to use the type of the MaterialData going forward when using the data
 */
public static MaterialData getData(String type,Material material){
  type=type.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  MaterialData materialData=new ItemStack(material).getData();
  if (materialData instanceof TexturedMaterial) {
    TexturedMaterial texturedMaterial=(TexturedMaterial)materialData;
    Material texture=new EnumParser<Material>().parse(type,texturedMaterial.getTextures().toArray(new Material[0]));
    if (texture != null) {
      ((TexturedMaterial)materialData).setMaterial(texture);
    }
  }
 else   if (materialData instanceof Colorable) {
    DyeColor color=new EnumParser<DyeColor>().parse(type,DyeColor.values());
    if (color != null) {
      ((Colorable)materialData).setColor(color);
    }
  }
 else   if (materialData instanceof Wood) {
    TreeSpecies species=new EnumParser<TreeSpecies>().parse(type,TreeSpecies.values());
    if (species != null) {
      try {
        ((Wood)materialData).setSpecies(species);
      }
 catch (      IllegalArgumentException e) {
        String materialName=material.toString();
        if (materialName.endsWith(""String_Node_Str"")) {
          Material mat=Material.getMaterial(materialName.substring(0,materialName.length() - 2));
          if (mat != null) {
            materialData=new ItemStack(mat).getData();
          }
        }
 else {
          Material mat=Material.getMaterial(materialName + ""String_Node_Str"");
          if (mat != null) {
            materialData=new ItemStack(mat).getData();
          }
        }
        ((Wood)materialData).setSpecies(species);
      }
    }
  }
 else   if (materialData instanceof SpawnEgg) {
    EntityType entityType=new EnumParser<EntityType>().parse(type,EntityType.values());
    if (entityType != null) {
      ((SpawnEgg)materialData).setSpawnedType(entityType);
    }
  }
 else   if (materialData instanceof Coal) {
    CoalType coalType=new EnumParser<CoalType>().parse(type,CoalType.values());
    if (coalType != null) {
      ((Coal)materialData).setType(coalType);
    }
  }
 else   if (materialData instanceof Sandstone) {
    SandstoneType sandstoneType=new EnumParser<SandstoneType>().parse(type,SandstoneType.values());
    if (sandstoneType != null) {
      ((Sandstone)materialData).setType(sandstoneType);
    }
  }
  return materialData;
}",0.8034836980794998
178042,"/** 
 * Returns item's name, with a maximum length
 * @param itemStack ItemStack to name
 * @param maxLength The max length that the name should have; 0 or below if it should be unlimited
 * @return ItemStack's name
 */
public static String getName(ItemStack itemStack,int maxLength){
  String alias=Odd.getAlias(itemStack);
  String itemName=alias != null ? alias : itemStack.getType().toString();
  String data=DataValue.name(itemStack);
  String durability=""String_Node_Str"";
  if (data == null) {
    if (itemStack.getDurability() != 0) {
      durability=""String_Node_Str"" + itemStack.getDurability();
    }
  }
  data=data != null ? data + ""String_Node_Str"" : ""String_Node_Str"";
  String metaData=""String_Node_Str"";
  if (itemStack.hasItemMeta()) {
    metaData=""String_Node_Str"" + Metadata.getItemCode(itemStack);
  }
  String code=data + itemName + durability+ metaData;
  if (maxLength > 0 && code.length() > maxLength) {
    int exceeding=code.length() - maxLength;
    code=data + getShortenedName(itemName,itemName.length() - exceeding) + durability+ metaData;
  }
  code=StringUtil.capitalizeFirstLetter(code,'_');
  ItemStack codeItem=getItem(code);
  if (!equals(itemStack,codeItem)) {
    throw new IllegalArgumentException(""String_Node_Str"" + itemStack + ""String_Node_Str""+ maxLength);
  }
  return code;
}","/** 
 * Returns item's name, with a maximum length
 * @param itemStack ItemStack to name
 * @param maxLength The max length that the name should have; 0 or below if it should be unlimited
 * @return ItemStack's name
 */
public static String getName(ItemStack itemStack,int maxLength){
  String alias=Odd.getAlias(itemStack);
  String itemName=alias != null ? alias : itemStack.getType().toString();
  String data=DataValue.name(itemStack);
  String durability=""String_Node_Str"";
  if (data == null) {
    if (itemStack.getDurability() != 0) {
      durability=""String_Node_Str"" + itemStack.getDurability();
    }
  }
  data=data != null ? data + ""String_Node_Str"" : ""String_Node_Str"";
  String metaData=""String_Node_Str"";
  if (itemStack.hasItemMeta()) {
    metaData=""String_Node_Str"" + Metadata.getItemCode(itemStack);
  }
  String code=data + itemName + durability+ metaData;
  if (maxLength > 0 && code.length() > maxLength) {
    int exceeding=code.length() - maxLength;
    code=data + getShortenedName(itemName,itemName.length() - exceeding) + durability+ metaData;
  }
  code=StringUtil.capitalizeFirstLetter(code,'_');
  ItemStack codeItem=getItem(code);
  if (!equals(itemStack,codeItem)) {
    throw new IllegalArgumentException(""String_Node_Str"" + itemStack + ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ code);
  }
  return code;
}",0.9906402096593036
178043,"/** 
 * Gives you an ItemStack from a String
 * @param itemName Item name
 * @return ItemStack
 */
public static ItemStack getItem(String itemName){
  ItemStack itemStack=Odd.getFromString(itemName);
  if (itemStack != null) {
    return itemStack;
  }
  String[] split=itemName.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    split[i]=split[i].trim();
  }
  Material material=getMaterial(split[0]);
  short durability=getDurability(itemName);
  if (material == null) {
    if (!split[0].contains(""String_Node_Str"")) {
      return null;
    }
    for (int index=split[0].indexOf(' '); index >= 0 && index + 1 < split[0].length(); index=split[0].indexOf(' ',index + 1)) {
      material=getMaterial(split[0].substring(index + 1));
      if (material != null) {
        if (durability == 0) {
          durability=DataValue.get(split[0].substring(0,index),material);
        }
        break;
      }
    }
    if (material == null) {
      return null;
    }
  }
  itemStack=new ItemStack(material);
  itemStack.setDurability(durability);
  ItemMeta meta=getMetadata(itemName);
  if (meta != null) {
    itemStack.setItemMeta(meta);
  }
  return itemStack;
}","/** 
 * Gives you an ItemStack from a String
 * @param itemName Item name
 * @return ItemStack
 */
public static ItemStack getItem(String itemName){
  ItemStack itemStack=Odd.getFromString(itemName);
  if (itemStack != null) {
    return itemStack;
  }
  String[] split=itemName.split(""String_Node_Str"");
  for (int i=0; i < split.length; i++) {
    split[i]=split[i].trim();
  }
  Material material=getMaterial(split[0]);
  short durability=getDurability(itemName);
  byte data=-1;
  if (material == null) {
    if (!split[0].contains(""String_Node_Str"")) {
      return null;
    }
    for (int index=split[0].indexOf(' '); index >= 0 && index + 1 < split[0].length(); index=split[0].indexOf(' ',index + 1)) {
      material=getMaterial(split[0].substring(index + 1));
      if (material != null) {
        if (durability == 0) {
          durability=data=DataValue.get(split[0].substring(0,index),material);
        }
        break;
      }
    }
    if (material == null) {
      return null;
    }
  }
  itemStack=new ItemStack(material);
  itemStack.setDurability(durability);
  if (data > -1) {
    itemStack.getData().setData(data);
  }
  ItemMeta meta=getMetadata(itemName);
  if (meta != null) {
    itemStack.setItemMeta(meta);
  }
  return itemStack;
}",0.9660253786328284
178044,"/** 
 * Checks if the itemStacks are equal, ignoring their amount
 * @param one first itemStack
 * @param two second itemStack
 * @return Are they equal?
 */
public static boolean equals(ItemStack one,ItemStack two){
  if (one == null || two == null) {
    return one == two;
  }
  if (one.isSimilar(two)) {
    return true;
  }
  return one.getType() == two.getType() && one.getDurability() == two.getDurability() && one.getData().equals(two.getData()) && one.hasItemMeta() && two.hasItemMeta() && one.getItemMeta() instanceof BookMeta && two.getItemMeta() instanceof BookMeta && one.getItemMeta().serialize().equals(two.getItemMeta().serialize());
}","/** 
 * Checks if the itemStacks are equal, ignoring their amount
 * @param one first itemStack
 * @param two second itemStack
 * @return Are they equal?
 */
public static boolean equals(ItemStack one,ItemStack two){
  if (one == null || two == null) {
    return one == two;
  }
  if (one.isSimilar(two)) {
    return true;
  }
  if (one.getType() == two.getType() && one.getType() == Material.BANNER && one.getDurability() == two.getDurability()) {
    Map<String,Object> m1=new HashMap<>(one.getItemMeta().serialize());
    Map<String,Object> m2=new HashMap<>(two.getItemMeta().serialize());
    Object c1=m1.remove(""String_Node_Str"");
    Object c2=m2.remove(""String_Node_Str"");
    return (one.getData().equals(two.getData()) || c1.equals(c2)) && m1.equals(m2);
  }
  return one.getType() == two.getType() && one.getDurability() == two.getDurability() && one.getData().equals(two.getData()) && one.hasItemMeta() && two.hasItemMeta() && one.getItemMeta() instanceof BookMeta && two.getItemMeta() instanceof BookMeta && one.getItemMeta().serialize().equals(two.getItemMeta().serialize());
}",0.7339449541284404
178045,"/** 
 * Gets the data value from a string
 * @param type     Data Value string
 * @param material Material
 * @return data value
 */
public static byte get(String type,Material material){
  if (material == null || material.getData() == null) {
    return 0;
  }
  type=type.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  MaterialData materialData=material.getNewData((byte)0);
  if (materialData instanceof TexturedMaterial) {
    TexturedMaterial texturedMaterial=(TexturedMaterial)materialData;
    for (    Material mat : texturedMaterial.getTextures()) {
      if (mat.name().startsWith(type) && !mat.equals(material)) {
        return (byte)texturedMaterial.getTextures().indexOf(mat);
      }
    }
  }
 else   if (materialData instanceof Colorable) {
    DyeColor color;
    try {
      color=DyeColor.valueOf(type);
    }
 catch (    IllegalArgumentException exception) {
      return 0;
    }
    if (material == Material.INK_SACK) {
      return color.getDyeData();
    }
    return color.getWoolData();
  }
 else   if (materialData instanceof Tree) {
    try {
      return TreeSpecies.valueOf(type).getData();
    }
 catch (    IllegalArgumentException ex) {
      return 0;
    }
  }
 else   if (materialData instanceof SpawnEgg) {
    try {
      EntityType entityType=EntityType.valueOf(type);
      return (byte)entityType.getTypeId();
    }
 catch (    IllegalArgumentException ex) {
      return 0;
    }
  }
 else   if (materialData instanceof Coal) {
    try {
      return CoalType.valueOf(type).getData();
    }
 catch (    IllegalArgumentException ex) {
      return 0;
    }
  }
  return 0;
}","/** 
 * Gets the data value from a string
 * @param type     Data Value string
 * @param material Material
 * @return data value
 */
public static byte get(String type,Material material){
  if (material == null || material.getData() == null) {
    return 0;
  }
  type=type.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"");
  MaterialData materialData=material.getNewData((byte)0);
  if (materialData instanceof TexturedMaterial) {
    TexturedMaterial texturedMaterial=(TexturedMaterial)materialData;
    for (    Material mat : texturedMaterial.getTextures()) {
      if (mat.name().startsWith(type) && !mat.equals(material)) {
        return (byte)texturedMaterial.getTextures().indexOf(mat);
      }
    }
  }
 else   if (materialData instanceof Colorable || material == Material.BANNER) {
    DyeColor color;
    try {
      color=DyeColor.valueOf(type);
    }
 catch (    IllegalArgumentException exception) {
      return 0;
    }
    if (material == Material.INK_SACK || material == Material.BANNER) {
      return color.getDyeData();
    }
    return color.getWoolData();
  }
 else   if (materialData instanceof Tree) {
    try {
      return TreeSpecies.valueOf(type).getData();
    }
 catch (    IllegalArgumentException ex) {
      return 0;
    }
  }
 else   if (materialData instanceof SpawnEgg) {
    try {
      EntityType entityType=EntityType.valueOf(type);
      return (byte)entityType.getTypeId();
    }
 catch (    IllegalArgumentException ex) {
      return 0;
    }
  }
 else   if (materialData instanceof Coal) {
    try {
      return CoalType.valueOf(type).getData();
    }
 catch (    IllegalArgumentException ex) {
      return 0;
    }
  }
  return 0;
}",0.9813477737665464
178046,"/** 
 * Returns a string with the DataValue
 * @param itemStack ItemStack to describe
 * @return Data value string
 */
public static String name(ItemStack itemStack){
  MaterialData data=itemStack.getData();
  if (data == null) {
    return null;
  }
  if (data instanceof TexturedMaterial) {
    return ((TexturedMaterial)data).getMaterial().name();
  }
 else   if (data instanceof Colorable) {
    DyeColor color=((Colorable)data).getColor();
    return (color != null ? color.name() : null);
  }
 else   if (data instanceof Tree) {
    TreeSpecies specie=((Tree)data).getSpecies();
    return (specie != null && specie != TreeSpecies.GENERIC ? specie.name() : null);
  }
 else   if (data instanceof SpawnEgg) {
    EntityType type=((SpawnEgg)data).getSpawnedType();
    return (type != null ? type.name() : null);
  }
 else   if (data instanceof Coal) {
    CoalType coal=((Coal)data).getType();
    return (coal != null && coal != CoalType.COAL ? coal.name() : null);
  }
 else {
    return null;
  }
}","/** 
 * Returns a string with the DataValue
 * @param itemStack ItemStack to describe
 * @return Data value string
 */
public static String name(ItemStack itemStack){
  MaterialData data=itemStack.getData();
  if (data == null) {
    return null;
  }
  if (data.getItemType() == Material.BANNER && data.getData() < 16) {
    return DyeColor.getByDyeData(data.getData()).name();
  }
  if (data instanceof TexturedMaterial) {
    return ((TexturedMaterial)data).getMaterial().name();
  }
 else   if (data instanceof Colorable) {
    DyeColor color=((Colorable)data).getColor();
    return (color != null ? color.name() : null);
  }
 else   if (data instanceof Tree) {
    TreeSpecies specie=((Tree)data).getSpecies();
    return (specie != null && specie != TreeSpecies.GENERIC ? specie.name() : null);
  }
 else   if (data instanceof SpawnEgg) {
    EntityType type=((SpawnEgg)data).getSpawnedType();
    return (type != null ? type.name() : null);
  }
 else   if (data instanceof Coal) {
    CoalType coal=((Coal)data).getType();
    return (coal != null && coal != CoalType.COAL ? coal.name() : null);
  }
 else {
    return null;
  }
}",0.9388707419505368
178047,"/** 
 * Checks if the inventory has stock of this type
 * @param items     items
 * @param inventory inventory
 * @return Does the inventory contain stock of this type?
 */
public static boolean hasItems(ItemStack[] items,Inventory inventory){
  for (  ItemStack item : items) {
    if (getAmount(item,inventory) < item.getAmount()) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if the inventory has stock of this type
 * @param items     items
 * @param inventory inventory
 * @return Does the inventory contain stock of this type?
 */
public static boolean hasItems(ItemStack[] items,Inventory inventory){
  ItemStack[] mergedItems=mergeSimilarStacks(items);
  for (  ItemStack item : mergedItems) {
    if (getAmount(item,inventory) < item.getAmount()) {
      return false;
    }
  }
  return true;
}",0.9086479902557856
178048,"/** 
 * Checks if the item fits the inventory
 * @param item      Item to check
 * @param inventory inventory
 * @return Does item fit inside inventory?
 */
public static boolean fits(ItemStack item,Inventory inventory){
  int left=item.getAmount();
  if (inventory.getMaxStackSize() == Integer.MAX_VALUE) {
    return true;
  }
  for (  ItemStack iStack : getStorageContents(inventory)) {
    if (left <= 0) {
      return true;
    }
    if (MaterialUtil.isEmpty(iStack)) {
      left-=item.getMaxStackSize();
      continue;
    }
    if (!MaterialUtil.equals(iStack,item)) {
      continue;
    }
    left-=(iStack.getMaxStackSize() - iStack.getAmount());
  }
  return left <= 0;
}","/** 
 * Checks if the item fits the inventory
 * @param item      Item to check
 * @param inventory inventory
 * @return Does item fit inside inventory?
 */
public static boolean fits(ItemStack item,Inventory inventory){
  int left=item.getAmount();
  if (inventory.getMaxStackSize() == Integer.MAX_VALUE) {
    return true;
  }
  for (  ItemStack iStack : getStorageContents(inventory)) {
    if (left <= 0) {
      return true;
    }
    if (MaterialUtil.isEmpty(iStack)) {
      left-=getMaxStackSize(item);
      continue;
    }
    if (!MaterialUtil.equals(iStack,item)) {
      continue;
    }
    left-=(getMaxStackSize(iStack) - iStack.getAmount());
  }
  return left <= 0;
}",0.9839181286549707
178049,"/** 
 * Removes an item from the inventory
 * @param item      Item to remove
 * @param inventory Inventory
 * @return Number of items that couldn't be removed
 */
public static int remove(ItemStack item,Inventory inventory){
  Map<Integer,ItemStack> leftovers=inventory.removeItem(item);
  if (!leftovers.isEmpty()) {
    for (Iterator<ItemStack> iterator=leftovers.values().iterator(); iterator.hasNext(); ) {
      ItemStack left=iterator.next();
      if (removeManually(left,inventory) == 0) {
        iterator.remove();
      }
    }
  }
  return countItems(leftovers);
}","/** 
 * Removes an item from the inventory
 * @param item      Item to remove
 * @param inventory Inventory
 * @return Number of items that couldn't be removed
 */
public static int remove(ItemStack item,Inventory inventory){
  Map<Integer,ItemStack> leftovers=inventory.removeItem(item);
  if (!leftovers.isEmpty()) {
    leftovers.values().removeIf(left -> removeManually(left,inventory) == 0);
  }
  return countItems(leftovers);
}",0.731948565776459
178050,"/** 
 * If items in arguments are similar, this function merges them into stacks of the same type
 * @param items Items to merge
 * @return Merged stack array
 */
public static ItemStack[] mergeSimilarStacks(ItemStack... items){
  if (items.length <= 1) {
    return items;
  }
  List<ItemStack> itemList=new LinkedList<ItemStack>();
  Iterating:   for (  ItemStack item : items) {
    for (    ItemStack iStack : itemList) {
      if (MaterialUtil.equals(item,iStack)) {
        iStack.setAmount(iStack.getAmount() + item.getAmount());
        continue Iterating;
      }
    }
    itemList.add(item);
  }
  return itemList.toArray(new ItemStack[itemList.size()]);
}","/** 
 * If items in arguments are similar, this function merges them into stacks of the same type
 * @param items Items to merge
 * @return Merged stack array
 */
public static ItemStack[] mergeSimilarStacks(ItemStack... items){
  if (items.length <= 1) {
    return items;
  }
  List<ItemStack> itemList=new LinkedList<ItemStack>();
  Iterating:   for (  ItemStack item : items) {
    for (    ItemStack iStack : itemList) {
      if (MaterialUtil.equals(item,iStack)) {
        iStack.setAmount(iStack.getAmount() + item.getAmount());
        continue Iterating;
      }
    }
    itemList.add(item.clone());
  }
  return itemList.toArray(new ItemStack[itemList.size()]);
}",0.9940387481371088
178051,"private static PreTransactionEvent preparePreTransactionEvent(Sign sign,Player player,Action action){
  String name=sign.getLine(NAME_LINE);
  String quantity=sign.getLine(QUANTITY_LINE);
  String prices=sign.getLine(PRICE_LINE);
  String material=sign.getLine(ITEM_LINE);
  Account account=NameManager.getAccountFromShortName(name);
  if (account == null)   return null;
  OfflinePlayer owner=account.getUuid().version() != 4 ? Bukkit.getOfflinePlayer(account.getName()) : Bukkit.getOfflinePlayer(account.getUuid());
  if (!ChestShopSign.isAdminShop(sign) && (owner == null || owner.getName() == null || !VaultListener.getProvider().hasAccount(owner)))   return null;
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  double price=(action == buy ? PriceUtil.getBuyPrice(prices) : PriceUtil.getSellPrice(prices));
  Chest chest=uBlock.findConnectedChest(sign);
  Inventory ownerInventory=(ChestShopSign.isAdminShop(sign) ? new AdminInventory() : chest != null ? chest.getInventory() : null);
  ItemStack item=MaterialUtil.getItem(material);
  if (item == null || !NumberUtil.isInteger(quantity)) {
    player.sendMessage(Messages.prefix(Messages.INVALID_SHOP_DETECTED));
    return null;
  }
  int amount=Integer.parseInt(quantity);
  if (amount < 1) {
    amount=1;
  }
  if (Properties.SHIFT_SELLS_IN_STACKS && player.isSneaking() && price != PriceUtil.NO_PRICE && isAllowedForShift(action == buy)) {
    int newAmount=getStackAmount(item,ownerInventory,player,action);
    if (newAmount > 0) {
      price=(price / amount) * newAmount;
      amount=newAmount;
    }
  }
  item.setAmount(amount);
  ItemStack[] items={item};
  TransactionType transactionType=(action == buy ? BUY : SELL);
  return new PreTransactionEvent(ownerInventory,player.getInventory(),items,price,player,owner,sign,transactionType);
}","private static PreTransactionEvent preparePreTransactionEvent(Sign sign,Player player,Action action){
  String name=sign.getLine(NAME_LINE);
  String quantity=sign.getLine(QUANTITY_LINE);
  String prices=sign.getLine(PRICE_LINE);
  String material=sign.getLine(ITEM_LINE);
  Account account=NameManager.getAccountFromShortName(name);
  if (account == null)   return null;
  OfflinePlayer owner=account.getUuid().version() != 4 ? Bukkit.getOfflinePlayer(account.getName()) : Bukkit.getOfflinePlayer(account.getUuid());
  if (!ChestShopSign.isAdminShop(sign) && (owner == null || owner.getName() == null || !VaultListener.getProvider().hasAccount(owner)))   return null;
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  double price=(action == buy ? PriceUtil.getBuyPrice(prices) : PriceUtil.getSellPrice(prices));
  Chest chest=uBlock.findConnectedChest(sign);
  Inventory ownerInventory=(ChestShopSign.isAdminShop(sign) ? new AdminInventory() : chest != null ? chest.getInventory() : null);
  ItemStack item=MaterialUtil.getItem(material);
  if (item == null || !NumberUtil.isInteger(quantity)) {
    player.sendMessage(Messages.prefix(Messages.INVALID_SHOP_DETECTED));
    return null;
  }
  int amount=Integer.parseInt(quantity);
  if (amount < 1) {
    amount=1;
  }
  if (Properties.SHIFT_SELLS_IN_STACKS && player.isSneaking() && price != PriceUtil.NO_PRICE && isAllowedForShift(action == buy)) {
    int newAmount=getStackAmount(item,ownerInventory,player,action);
    if (newAmount > 0) {
      price=(price / amount) * newAmount;
      amount=newAmount;
    }
  }
  item.setAmount(amount);
  ItemStack[] items=InventoryUtil.getItemsStacked(item);
  TransactionType transactionType=(action == buy ? BUY : SELL);
  return new PreTransactionEvent(ownerInventory,player.getInventory(),items,price,player,owner,sign,transactionType);
}",0.9889577161325074
178052,"private static int getStackAmount(ItemStack item,Inventory inventory,Player player,Action action){
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  Inventory checkedInventory=(action == buy ? inventory : player.getInventory());
  if (checkedInventory.containsAtLeast(item,item.getMaxStackSize())) {
    return item.getMaxStackSize();
  }
 else {
    return InventoryUtil.getAmount(item,checkedInventory);
  }
}","private static int getStackAmount(ItemStack item,Inventory inventory,Player player,Action action){
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  Inventory checkedInventory=(action == buy ? inventory : player.getInventory());
  if (checkedInventory.containsAtLeast(item,InventoryUtil.getMaxStackSize(item))) {
    return InventoryUtil.getMaxStackSize(item);
  }
 else {
    return InventoryUtil.getAmount(item,checkedInventory);
  }
}",0.9539473684210528
178053,"private static boolean itemsFitInInventory(ItemStack[] items,Inventory inventory){
  for (  ItemStack item : items) {
    if (!InventoryUtil.fits(item,inventory)) {
      return false;
    }
  }
  return true;
}","private static boolean itemsFitInInventory(ItemStack[] items,Inventory inventory){
  ItemStack[] mergedItems=InventoryUtil.mergeSimilarStacks(items);
  for (  ItemStack item : mergedItems) {
    if (!InventoryUtil.fits(item,inventory)) {
      return false;
    }
  }
  return true;
}",0.8484848484848485
178054,"/** 
 * Make an array of items fit into an inventory.
 * @param stock     The items to fit in the inventory
 * @param inventory The inventory to fit it in
 * @return Whether or not the items fit into the inventory
 */
private static ItemStack[] getItemsThatFit(ItemStack[] stock,Inventory inventory){
  List<ItemStack> resultStock=new ArrayList<>();
  int emptySlots=InventoryUtil.countEmpty(inventory);
  ItemStack[] itemsInInventory=getItems(stock,inventory);
  for (  ItemStack item : stock) {
    int maxStackSize=InventoryUtil.getMaxStackSize(item);
    int free=0;
    for (    ItemStack itemInInventory : itemsInInventory) {
      if (MaterialUtil.equals(item,itemInInventory)) {
        free=(maxStackSize - itemInInventory.getAmount()) % maxStackSize;
        break;
      }
    }
    if (free == 0 && emptySlots == 0) {
      continue;
    }
    ItemStack clone=item.clone();
    if (item.getAmount() > free) {
      if (emptySlots > 0) {
        int requiredSlots=(int)Math.ceil((item.getAmount() - free) / maxStackSize);
        if (requiredSlots <= emptySlots) {
          emptySlots=emptySlots - requiredSlots;
        }
 else {
          emptySlots=0;
          clone.setAmount(free + maxStackSize * emptySlots);
        }
      }
 else {
        clone.setAmount(free);
      }
    }
    resultStock.add(clone);
  }
  return (ItemStack[])resultStock.toArray();
}","/** 
 * Make an array of items fit into an inventory.
 * @param stock     The items to fit in the inventory
 * @param inventory The inventory to fit it in
 * @return Whether or not the items fit into the inventory
 */
private static ItemStack[] getItemsThatFit(ItemStack[] stock,Inventory inventory){
  List<ItemStack> resultStock=new ArrayList<>();
  int emptySlots=InventoryUtil.countEmpty(inventory);
  ItemStack[] itemsInInventory=getItems(stock,inventory);
  for (  ItemStack item : stock) {
    int maxStackSize=InventoryUtil.getMaxStackSize(item);
    int free=0;
    for (    ItemStack itemInInventory : itemsInInventory) {
      if (MaterialUtil.equals(item,itemInInventory)) {
        free=(maxStackSize - itemInInventory.getAmount()) % maxStackSize;
        break;
      }
    }
    if (free == 0 && emptySlots == 0) {
      continue;
    }
    ItemStack clone=item.clone();
    if (item.getAmount() > free) {
      if (emptySlots > 0) {
        int requiredSlots=(int)Math.ceil((item.getAmount() - free) / maxStackSize);
        if (requiredSlots <= emptySlots) {
          emptySlots=emptySlots - requiredSlots;
        }
 else {
          emptySlots=0;
          clone.setAmount(free + maxStackSize * emptySlots);
        }
      }
 else {
        clone.setAmount(free);
      }
    }
    resultStock.add(clone);
  }
  return resultStock.toArray(new ItemStack[resultStock.size()]);
}",0.976928622927181
178055,"public static String getServerAccountName(){
  return Properties.SERVER_ECONOMY_ACCOUNT;
}","/** 
 * Get the name of the server conomy account
 * @return The username of te server economy account
 * @deprecated Use {@link NameManager#getServerEconomyAccount()} or {@link Properties#SERVER_ECONOMY_ACCOUNT}
 */
@Deprecated public static String getServerAccountName(){
  return Properties.SERVER_ECONOMY_ACCOUNT;
}",0.2836185819070904
178056,"public static boolean isOwnerEconomicallyActive(Inventory inventory){
  return !ChestShopSign.isAdminShop(inventory) || !getServerAccountName().isEmpty();
}","public static boolean isOwnerEconomicallyActive(Inventory inventory){
  return !ChestShopSign.isAdminShop(inventory) || NameManager.getServerEconomyAccount() != null;
}",0.8703703703703703
178057,"@EventHandler(priority=EventPriority.LOWEST) public static void onBalanceCheck(CurrencyAmountEvent event){
  UUID target=event.getAccount();
  if (!NameManager.isAdminShop(target) || NameManager.isServerEconomyAccount(target)) {
    return;
  }
  if (SERVER_ECONOMY_ACCOUNT.isEmpty()) {
    event.setAmount(BigDecimal.valueOf(Double.MAX_VALUE));
    return;
  }
 else {
    Account account=NameManager.getAccount(SERVER_ECONOMY_ACCOUNT);
    if (account == null || account.getUuid() == null) {
      return;
    }
    target=account.getUuid();
  }
  CurrencyAmountEvent currencyAmountEvent=new CurrencyAmountEvent(target,event.getWorld());
  ChestShop.callEvent(currencyAmountEvent);
  event.setAmount(currencyAmountEvent.getAmount());
}","@EventHandler(priority=EventPriority.LOWEST) public static void onBalanceCheck(CurrencyAmountEvent event){
  UUID target=event.getAccount();
  if (!NameManager.isAdminShop(target) || NameManager.isServerEconomyAccount(target)) {
    return;
  }
  Account account=NameManager.getServerEconomyAccount();
  target=account != null ? account.getUuid() : null;
  if (target == null) {
    event.setAmount(BigDecimal.valueOf(Double.MAX_VALUE));
    return;
  }
  CurrencyAmountEvent currencyAmountEvent=new CurrencyAmountEvent(target,event.getWorld());
  ChestShop.callEvent(currencyAmountEvent);
  event.setAmount(currencyAmountEvent.getAmount());
}",0.7521739130434782
178058,"@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencySubtract(CurrencySubtractEvent event){
  UUID target=event.getTarget();
  if (!NameManager.isAdminShop(target) || SERVER_ECONOMY_ACCOUNT.equals(NameManager.getUsername(target))) {
    return;
  }
  if (SERVER_ECONOMY_ACCOUNT.isEmpty()) {
    event.setSubtracted(true);
    return;
  }
 else {
    Account account=NameManager.getAccount(SERVER_ECONOMY_ACCOUNT);
    if (account != null) {
      target=account.getUuid();
    }
 else {
      target=null;
    }
  }
  event.setSubtracted(true);
  if (target == null) {
    return;
  }
  CurrencySubtractEvent currencySubtractEvent=new CurrencySubtractEvent(event.getAmount(),target,event.getWorld());
  ChestShop.callEvent(currencySubtractEvent);
}","@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencySubtract(CurrencySubtractEvent event){
  UUID target=event.getTarget();
  if (!NameManager.isAdminShop(target) || NameManager.isServerEconomyAccount(target)) {
    return;
  }
  Account account=NameManager.getServerEconomyAccount();
  target=account != null ? account.getUuid() : null;
  event.setSubtracted(true);
  if (target == null) {
    return;
  }
  CurrencySubtractEvent currencySubtractEvent=new CurrencySubtractEvent(event.getAmount(),target,event.getWorld());
  ChestShop.callEvent(currencySubtractEvent);
}",0.6274797942689199
178059,"@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencyAdd(CurrencyAddEvent event){
  UUID target=event.getTarget();
  if (!NameManager.isAdminShop(target) || SERVER_ECONOMY_ACCOUNT.equals(NameManager.getUsername(target))) {
    return;
  }
  if (SERVER_ECONOMY_ACCOUNT.isEmpty()) {
    event.setAdded(true);
    return;
  }
 else {
    Account account=NameManager.getAccount(SERVER_ECONOMY_ACCOUNT);
    if (account == null || account.getUuid() == null) {
      return;
    }
    target=account.getUuid();
  }
  event.setAdded(true);
  if (target == null) {
    return;
  }
  CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(event.getAmount(),target,event.getWorld());
  ChestShop.callEvent(currencyAddEvent);
}","@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencyAdd(CurrencyAddEvent event){
  UUID target=event.getTarget();
  if (!NameManager.isAdminShop(target) || NameManager.isServerEconomyAccount(target)) {
    return;
  }
  Account account=NameManager.getServerEconomyAccount();
  target=account != null ? account.getUuid() : null;
  event.setAdded(true);
  if (target == null) {
    return;
  }
  CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(event.getAmount(),target,event.getWorld());
  ChestShop.callEvent(currencyAddEvent);
}",0.6027820710973725
178060,"@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencyCheck(CurrencyCheckEvent event){
  UUID target=event.getAccount();
  if (!NameManager.isAdminShop(target) || SERVER_ECONOMY_ACCOUNT.equals(NameManager.getUsername(target))) {
    return;
  }
  if (SERVER_ECONOMY_ACCOUNT.isEmpty()) {
    event.hasEnough(true);
    return;
  }
 else {
    Account account=NameManager.getAccount(SERVER_ECONOMY_ACCOUNT);
    if (account == null || account.getUuid() == null) {
      event.hasEnough(true);
      return;
    }
    target=account.getUuid();
  }
  CurrencyCheckEvent currencyCheckEvent=new CurrencyCheckEvent(event.getAmount(),target,event.getWorld());
  ChestShop.callEvent(currencyCheckEvent);
  event.hasEnough(currencyCheckEvent.hasEnough());
}","@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencyCheck(CurrencyCheckEvent event){
  UUID target=event.getAccount();
  if (!NameManager.isAdminShop(target) || NameManager.isServerEconomyAccount(target)) {
    return;
  }
  Account account=NameManager.getServerEconomyAccount();
  target=account != null ? account.getUuid() : null;
  if (target == null) {
    event.hasEnough(true);
    return;
  }
  CurrencyCheckEvent currencyCheckEvent=new CurrencyCheckEvent(event.getAmount(),target,event.getWorld());
  ChestShop.callEvent(currencyCheckEvent);
  event.hasEnough(currencyCheckEvent.hasEnough());
}",0.5708123652048885
178061,"@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencyHoldCheck(CurrencyHoldEvent event){
  UUID target=event.getAccount();
  if (!NameManager.isAdminShop(target) || SERVER_ECONOMY_ACCOUNT.equals(NameManager.getUsername(target))) {
    return;
  }
  event.canHold(true);
  event.setAccount(null);
}","@EventHandler(priority=EventPriority.LOWEST) public static void onCurrencyHoldCheck(CurrencyHoldEvent event){
  UUID target=event.getAccount();
  if (!NameManager.isAdminShop(target) || NameManager.isServerEconomyAccount(target)) {
    return;
  }
  event.canHold(true);
  event.setAccount(null);
}",0.8376623376623377
178062,"@EventHandler(priority=EventPriority.LOW) public static void onCurrencyAdd(CurrencyAddEvent event){
  if (event.isAdded()) {
    return;
  }
  UUID target=event.getTarget();
  if (Economy.getServerAccountName().equals(NameManager.getUsername(target))) {
    return;
  }
  float taxAmount=isServerAccount(target) ? Properties.SERVER_TAX_AMOUNT : Properties.TAX_AMOUNT;
  if (taxAmount == 0) {
    return;
  }
  BigDecimal tax=getTax(event.getAmount(),taxAmount);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(tax,NameManager.getUUID(Economy.getServerAccountName()),event.getWorld());
    ChestShop.callEvent(currencyAddEvent);
  }
  event.setAmount(event.getAmount().subtract(tax));
}","@EventHandler(priority=EventPriority.LOW) public static void onCurrencyAdd(CurrencyAddEvent event){
  if (event.isAdded()) {
    return;
  }
  UUID target=event.getTarget();
  if (NameManager.isServerEconomyAccount(target)) {
    return;
  }
  float taxAmount=isServerAccount(target) ? Properties.SERVER_TAX_AMOUNT : Properties.TAX_AMOUNT;
  if (taxAmount == 0) {
    return;
  }
  BigDecimal tax=getTax(event.getAmount(),taxAmount);
  if (NameManager.getServerEconomyAccount() != null) {
    CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(tax,NameManager.getServerEconomyAccount().getUuid(),event.getWorld());
    ChestShop.callEvent(currencyAddEvent);
  }
  event.setAmount(event.getAmount().subtract(tax));
}",0.8321964529331515
178063,"@EventHandler public static void onShopCreation(ShopCreatedEvent event){
  double shopCreationPrice=Properties.SHOP_CREATION_PRICE;
  if (shopCreationPrice == 0) {
    return;
  }
  if (ChestShopSign.isAdminShop(event.getSignLine(NAME_LINE))) {
    return;
  }
  Player player=event.getPlayer();
  if (Permission.has(player,NOFEE)) {
    return;
  }
  CurrencySubtractEvent subtractionEvent=new CurrencySubtractEvent(BigDecimal.valueOf(shopCreationPrice),player);
  ChestShop.callEvent(subtractionEvent);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(BigDecimal.valueOf(shopCreationPrice),NameManager.getUUID(Economy.getServerAccountName()),player.getWorld());
    ChestShop.callEvent(currencyAddEvent);
  }
  player.sendMessage(Messages.prefix(Messages.SHOP_FEE_PAID.replace(""String_Node_Str"",Economy.formatBalance(shopCreationPrice))));
}","@EventHandler public static void onShopCreation(ShopCreatedEvent event){
  double shopCreationPrice=Properties.SHOP_CREATION_PRICE;
  if (shopCreationPrice == 0) {
    return;
  }
  if (ChestShopSign.isAdminShop(event.getSignLine(NAME_LINE))) {
    return;
  }
  Player player=event.getPlayer();
  if (Permission.has(player,NOFEE)) {
    return;
  }
  CurrencySubtractEvent subtractionEvent=new CurrencySubtractEvent(BigDecimal.valueOf(shopCreationPrice),player);
  ChestShop.callEvent(subtractionEvent);
  if (NameManager.getServerEconomyAccount() != null) {
    CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(BigDecimal.valueOf(shopCreationPrice),NameManager.getServerEconomyAccount().getUuid(),player.getWorld());
    ChestShop.callEvent(currencyAddEvent);
  }
  player.sendMessage(Messages.prefix(Messages.SHOP_FEE_PAID.replace(""String_Node_Str"",Economy.formatBalance(shopCreationPrice))));
}",0.918141592920354
178064,"@EventHandler(priority=EventPriority.MONITOR) public static void onShopDestroy(ShopDestroyedEvent event){
  double refundPrice=Properties.SHOP_REFUND_PRICE;
  if (event.getDestroyer() == null || Permission.has(event.getDestroyer(),NOFEE) || refundPrice == 0) {
    return;
  }
  Account account=NameManager.getAccountFromShortName(event.getSign().getLine(NAME_LINE));
  if (account == null) {
    return;
  }
  CurrencyAddEvent currencyEvent=new CurrencyAddEvent(BigDecimal.valueOf(refundPrice),account.getUuid(),event.getSign().getWorld());
  ChestShop.callEvent(currencyEvent);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencySubtractEvent currencySubtractEvent=new CurrencySubtractEvent(BigDecimal.valueOf(refundPrice),NameManager.getUUID(Economy.getServerAccountName()),event.getSign().getWorld());
    ChestShop.callEvent(currencySubtractEvent);
  }
  String message=Messages.SHOP_REFUNDED.replace(""String_Node_Str"",Economy.formatBalance(refundPrice));
  event.getDestroyer().sendMessage(Messages.prefix(message));
}","@EventHandler(priority=EventPriority.MONITOR) public static void onShopDestroy(ShopDestroyedEvent event){
  double refundPrice=Properties.SHOP_REFUND_PRICE;
  if (event.getDestroyer() == null || Permission.has(event.getDestroyer(),NOFEE) || refundPrice == 0) {
    return;
  }
  Account account=NameManager.getAccountFromShortName(event.getSign().getLine(NAME_LINE));
  if (account == null) {
    return;
  }
  CurrencyAddEvent currencyEvent=new CurrencyAddEvent(BigDecimal.valueOf(refundPrice),account.getUuid(),event.getSign().getWorld());
  ChestShop.callEvent(currencyEvent);
  if (NameManager.getServerEconomyAccount() != null) {
    CurrencySubtractEvent currencySubtractEvent=new CurrencySubtractEvent(BigDecimal.valueOf(refundPrice),NameManager.getServerEconomyAccount().getUuid(),event.getSign().getWorld());
    ChestShop.callEvent(currencySubtractEvent);
  }
  String message=Messages.SHOP_REFUNDED.replace(""String_Node_Str"",Economy.formatBalance(refundPrice));
  event.getDestroyer().sendMessage(Messages.prefix(message));
}",0.9285714285714286
178065,"public static void load(){
  try {
    accounts=DaoCreator.getDaoAndCreateTable(Account.class);
    adminAccount=new Account(Properties.ADMIN_SHOP_NAME,Bukkit.getOfflinePlayer(Properties.ADMIN_SHOP_NAME).getUniqueId());
    accounts.createOrUpdate(adminAccount);
    if (!Properties.SERVER_ECONOMY_ACCOUNT.isEmpty()) {
      serverEconomyAccount=getAccount(Properties.SERVER_ECONOMY_ACCOUNT);
      if (serverEconomyAccount == null || serverEconomyAccount.getUuid() == null) {
        ChestShop.getBukkitLogger().log(Level.WARNING,""String_Node_Str"" + Properties.SERVER_ECONOMY_ACCOUNT + ""String_Node_Str"");
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public static void load(){
  try {
    accounts=DaoCreator.getDaoAndCreateTable(Account.class);
    adminAccount=new Account(Properties.ADMIN_SHOP_NAME,Bukkit.getOfflinePlayer(Properties.ADMIN_SHOP_NAME).getUniqueId());
    accounts.createOrUpdate(adminAccount);
    if (!Properties.SERVER_ECONOMY_ACCOUNT.isEmpty()) {
      serverEconomyAccount=getAccount(Properties.SERVER_ECONOMY_ACCOUNT);
      if (serverEconomyAccount == null || serverEconomyAccount.getUuid() == null) {
        serverEconomyAccount=null;
        ChestShop.getBukkitLogger().log(Level.WARNING,""String_Node_Str"" + Properties.SERVER_ECONOMY_ACCOUNT + ""String_Node_Str"");
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9750178443968592
178066,"/** 
 * Checks if the itemStacks are equal, ignoring their amount
 * @param one first itemStack
 * @param two second itemStack
 * @return Are they equal?
 */
public static boolean equals(ItemStack one,ItemStack two){
  if (one == null || two == null) {
    return one != two;
  }
  if (one.isSimilar(two)) {
    return true;
  }
  return one.getType() == two.getType() && one.getDurability() == two.getDurability() && one.getData().equals(two.getData()) && one.hasItemMeta() && two.hasItemMeta() && one.getItemMeta() instanceof BookMeta && two.getItemMeta() instanceof BookMeta && one.getItemMeta().serialize().equals(two.getItemMeta().serialize());
}","/** 
 * Checks if the itemStacks are equal, ignoring their amount
 * @param one first itemStack
 * @param two second itemStack
 * @return Are they equal?
 */
public static boolean equals(ItemStack one,ItemStack two){
  if (one == null || two == null) {
    return one == two;
  }
  if (one.isSimilar(two)) {
    return true;
  }
  return one.getType() == two.getType() && one.getDurability() == two.getDurability() && one.getData().equals(two.getData()) && one.hasItemMeta() && two.hasItemMeta() && one.getItemMeta() instanceof BookMeta && two.getItemMeta() instanceof BookMeta && one.getItemMeta().serialize().equals(two.getItemMeta().serialize());
}",0.998463901689708
178067,"/** 
 * Make an array of items fit into an inventory.
 * @param stock     The items to fit in the inventory
 * @param inventory The inventory to fit it in
 * @return Whether or not the items fit into the inventory
 */
private static ItemStack[] getItemsThatFit(ItemStack[] stock,Inventory inventory){
  List<ItemStack> resultStock=new ArrayList<>();
  int emptySlots=InventoryUtil.countEmpty(inventory);
  ItemStack[] itemsInInventory=getItems(stock,inventory);
  for (  ItemStack item : stock) {
    int maxStackSize=InventoryUtil.getMaxStackSize(item);
    int free=0;
    for (    ItemStack itemInInventory : itemsInInventory) {
      if (MaterialUtil.equals(item,itemInInventory)) {
        free=(maxStackSize - itemInInventory.getAmount()) % maxStackSize;
        break;
      }
    }
    if (free == 0 && emptySlots == 0) {
      continue;
    }
    ItemStack clone=item.clone();
    if (item.getAmount() > free) {
      if (emptySlots > 0) {
        int requiredSlots=(int)Math.ceil((item.getAmount() - free) / maxStackSize);
        if (requiredSlots <= emptySlots) {
          emptySlots=emptySlots - requiredSlots;
        }
 else {
          emptySlots=0;
          clone.setAmount(free + maxStackSize * emptySlots);
        }
      }
 else {
        clone.setAmount(free);
      }
    }
    resultStock.add(clone);
  }
  return resultStock.toArray(new ItemStack[resultStock.size()]);
}","/** 
 * Make an array of items fit into an inventory.
 * @param stock     The items to fit in the inventory
 * @param inventory The inventory to fit it in
 * @return Whether or not the items fit into the inventory
 */
private static ItemStack[] getItemsThatFit(ItemStack[] stock,Inventory inventory){
  List<ItemStack> resultStock=new ArrayList<>();
  int emptySlots=InventoryUtil.countEmpty(inventory);
  for (  ItemStack item : InventoryUtil.mergeSimilarStacks(stock)) {
    int maxStackSize=InventoryUtil.getMaxStackSize(item);
    int free=0;
    for (    ItemStack itemInInventory : inventory.getContents()) {
      if (MaterialUtil.equals(item,itemInInventory)) {
        free+=(maxStackSize - itemInInventory.getAmount()) % maxStackSize;
      }
    }
    if (free == 0 && emptySlots == 0) {
      continue;
    }
    if (item.getAmount() > free) {
      if (emptySlots > 0) {
        int requiredSlots=(int)Math.ceil(((double)item.getAmount() - free) / maxStackSize);
        if (requiredSlots <= emptySlots) {
          emptySlots=emptySlots - requiredSlots;
        }
 else {
          item.setAmount(free + maxStackSize * emptySlots);
          emptySlots=0;
        }
      }
 else {
        item.setAmount(free);
      }
    }
    resultStock.add(item);
  }
  return resultStock.toArray(new ItemStack[resultStock.size()]);
}",0.7885881492318947
178068,"private static PreTransactionEvent preparePreTransactionEvent(Sign sign,Player player,Action action){
  String name=sign.getLine(NAME_LINE);
  String quantity=sign.getLine(QUANTITY_LINE);
  String prices=sign.getLine(PRICE_LINE);
  String material=sign.getLine(ITEM_LINE);
  Account account=NameManager.getAccountFromShortName(name);
  if (account == null)   return null;
  OfflinePlayer owner=account.getUuid().version() != 4 ? Bukkit.getOfflinePlayer(account.getName()) : Bukkit.getOfflinePlayer(account.getUuid());
  if (!ChestShopSign.isAdminShop(sign) && (owner == null || owner.getName() == null || !VaultListener.getProvider().hasAccount(owner)))   return null;
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  double price=(action == buy ? PriceUtil.getBuyPrice(prices) : PriceUtil.getSellPrice(prices));
  Chest chest=uBlock.findConnectedChest(sign);
  Inventory ownerInventory=(ChestShopSign.isAdminShop(sign) ? new AdminInventory() : chest != null ? chest.getInventory() : null);
  ItemStack item=MaterialUtil.getItem(material);
  if (item == null || !NumberUtil.isInteger(quantity)) {
    player.sendMessage(Messages.prefix(Messages.INVALID_SHOP_DETECTED));
    return null;
  }
  int amount=Integer.parseInt(quantity);
  if (amount < 1) {
    amount=1;
  }
  if (Properties.SHIFT_SELLS_IN_STACKS && player.isSneaking() && price != PriceUtil.NO_PRICE && isAllowedForShift(action == buy)) {
    int newAmount=getStackAmount(item,ownerInventory,player,action);
    if (newAmount > 0) {
      price=(price / amount) * newAmount;
      amount=newAmount;
    }
  }
  item.setAmount(amount);
  ItemStack[] items={item};
  TransactionType transactionType=(action == buy ? BUY : SELL);
  return new PreTransactionEvent(ownerInventory,player.getInventory(),items,price,player,owner,sign,transactionType);
}","private static PreTransactionEvent preparePreTransactionEvent(Sign sign,Player player,Action action){
  String name=sign.getLine(NAME_LINE);
  String quantity=sign.getLine(QUANTITY_LINE);
  String prices=sign.getLine(PRICE_LINE);
  String material=sign.getLine(ITEM_LINE);
  Account account=NameManager.getAccountFromShortName(name);
  if (account == null)   return null;
  boolean adminShop=ChestShopSign.isAdminShop(sign);
  OfflinePlayer owner=account.getUuid().version() != 4 || adminShop ? Bukkit.getOfflinePlayer(account.getName()) : Bukkit.getOfflinePlayer(account.getUuid());
  if (!adminShop && (owner == null || owner.getName() == null || !VaultListener.getProvider().hasAccount(owner)))   return null;
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  double price=(action == buy ? PriceUtil.getBuyPrice(prices) : PriceUtil.getSellPrice(prices));
  Chest chest=uBlock.findConnectedChest(sign);
  Inventory ownerInventory=(adminShop ? new AdminInventory() : chest != null ? chest.getInventory() : null);
  ItemStack item=MaterialUtil.getItem(material);
  if (item == null || !NumberUtil.isInteger(quantity)) {
    player.sendMessage(Messages.prefix(Messages.INVALID_SHOP_DETECTED));
    return null;
  }
  int amount=Integer.parseInt(quantity);
  if (amount < 1) {
    amount=1;
  }
  if (Properties.SHIFT_SELLS_IN_STACKS && player.isSneaking() && price != PriceUtil.NO_PRICE && isAllowedForShift(action == buy)) {
    int newAmount=getStackAmount(item,ownerInventory,player,action);
    if (newAmount > 0) {
      price=(price / amount) * newAmount;
      amount=newAmount;
    }
  }
  item.setAmount(amount);
  ItemStack[] items={item};
  TransactionType transactionType=(action == buy ? BUY : SELL);
  return new PreTransactionEvent(ownerInventory,player.getInventory(),items,price,player,owner,sign,transactionType);
}",0.9616837560712358
178069,"/** 
 * Adds an item to the inventor
 * @param item      Item to add
 * @param inventory Inventory
 * @return Number of leftover items
 */
public static int add(ItemStack item,Inventory inventory){
  Map<Integer,ItemStack> leftovers=inventory.addItem(item.clone());
  return countItems(leftovers);
}","/** 
 * Adds an item to the inventor
 * @param item      Item to add
 * @param inventory Inventory
 * @return Number of leftover items
 */
public static int add(ItemStack item,Inventory inventory){
  Map<Integer,ItemStack> leftovers=inventory.addItem(item.clone());
  if (!leftovers.isEmpty()) {
    for (Iterator<ItemStack> iterator=leftovers.values().iterator(); iterator.hasNext(); ) {
      ItemStack left=iterator.next();
      int amountLeft=addManually(left,inventory,left.getMaxStackSize());
      if (amountLeft == 0) {
        iterator.remove();
      }
 else {
        left.setAmount(amountLeft);
      }
    }
  }
  return countItems(leftovers);
}",0.5615866388308977
178070,"/** 
 * Counts leftovers from a map
 * @param items Leftovers
 * @return Number of leftovers
 */
public static int countItems(Map<Integer,?> items){
  int totalLeft=0;
  for (  int left : items.keySet()) {
    totalLeft+=left;
  }
  return totalLeft;
}","/** 
 * Counts leftovers from a map
 * @param items Leftovers
 * @return Number of leftovers
 */
public static int countItems(Map<Integer,ItemStack> items){
  int totalLeft=0;
  for (  ItemStack left : items.values()) {
    totalLeft+=left.getAmount();
  }
  return totalLeft;
}",0.9132075471698112
178071,"/** 
 * Checks if the inventory has stock of this type
 * @param items     items
 * @param inventory inventory
 * @return Does the inventory contain stock of this type?
 */
public static boolean hasItems(ItemStack[] items,Inventory inventory){
  for (  ItemStack item : items) {
    if (!inventory.containsAtLeast(item,item.getAmount())) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if the inventory has stock of this type
 * @param items     items
 * @param inventory inventory
 * @return Does the inventory contain stock of this type?
 */
public static boolean hasItems(ItemStack[] items,Inventory inventory){
  for (  ItemStack item : items) {
    if (getAmount(item,inventory) < item.getAmount()) {
      return false;
    }
  }
  return true;
}",0.9413298565840938
178072,"/** 
 * Removes an item from the inventory
 * @param item      Item to remove
 * @param inventory Inventory
 * @return Number of items that couldn't be removed
 */
public static int remove(ItemStack item,Inventory inventory){
  Map<Integer,ItemStack> leftovers=inventory.removeItem(item);
  return countItems(leftovers);
}","/** 
 * Removes an item from the inventory
 * @param item      Item to remove
 * @param inventory Inventory
 * @return Number of items that couldn't be removed
 */
public static int remove(ItemStack item,Inventory inventory){
  Map<Integer,ItemStack> leftovers=inventory.removeItem(item);
  if (!leftovers.isEmpty()) {
    for (Iterator<ItemStack> iterator=leftovers.values().iterator(); iterator.hasNext(); ) {
      ItemStack left=iterator.next();
      if (removeManually(left,inventory) == 0) {
        iterator.remove();
      }
    }
  }
  return countItems(leftovers);
}",0.6540600667408232
178073,"/** 
 * Checks if the itemStacks are equal, ignoring their amount
 * @param one first itemStack
 * @param two second itemStack
 * @return Are they equal?
 */
public static boolean equals(ItemStack one,ItemStack two){
  return one.isSimilar(two);
}","/** 
 * Checks if the itemStacks are equal, ignoring their amount
 * @param one first itemStack
 * @param two second itemStack
 * @return Are they equal?
 */
public static boolean equals(ItemStack one,ItemStack two){
  if (one == null || two == null) {
    return one != two;
  }
  if (one.isSimilar(two)) {
    return true;
  }
  return one.getType() == two.getType() && one.getDurability() == two.getDurability() && one.getData().equals(two.getData()) && one.hasItemMeta() && two.hasItemMeta() && one.getItemMeta() instanceof BookMeta && two.getItemMeta() instanceof BookMeta && one.getItemMeta().serialize().equals(two.getItemMeta().serialize());
}",0.534521158129176
178074,"public static boolean canAccess(Player player,Sign sign){
  if (player == null)   return false;
  if (sign == null)   return true;
  return NameManager.canUseName(player,sign.getLine(NAME_LINE));
}","public static boolean canAccess(Player player,Sign sign){
  if (player == null)   return false;
  if (sign == null)   return true;
  String name=sign.getLine(NAME_LINE);
  if (name == null || name.isEmpty())   return true;
  return NameManager.canUseName(player,name);
}",0.6852248394004282
178075,"@Override public void run(){
  String playerName=NameUtil.stripUsername(playerDTO.getName());
  UUID uuid=NameManager.getUUID(playerName);
  NameManager.storeUsername(playerDTO);
}","@Override public void run(){
  NameManager.storeUsername(playerDTO);
}",0.56
178076,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public static void onPlayerConnect(final PlayerJoinEvent event){
  final PlayerDTO playerDTO=new PlayerDTO(event.getPlayer());
  Bukkit.getScheduler().runTaskAsynchronously(ChestShop.getPlugin(),new Runnable(){
    @Override public void run(){
      String playerName=NameUtil.stripUsername(playerDTO.getName());
      UUID uuid=NameManager.getUUID(playerName);
      NameManager.storeUsername(playerDTO);
    }
  }
);
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public static void onPlayerConnect(final PlayerJoinEvent event){
  final PlayerDTO playerDTO=new PlayerDTO(event.getPlayer());
  Bukkit.getScheduler().runTaskAsynchronously(ChestShop.getPlugin(),new Runnable(){
    @Override public void run(){
      NameManager.storeUsername(playerDTO);
    }
  }
);
}",0.8060747663551402
178077,"private static PreTransactionEvent preparePreTransactionEvent(Sign sign,Player player,Action action){
  String name=sign.getLine(NAME_LINE);
  String quantity=sign.getLine(QUANTITY_LINE);
  String prices=sign.getLine(PRICE_LINE);
  String material=sign.getLine(ITEM_LINE);
  String ownerName=NameManager.getFullUsername(name);
  UUID uuid=NameManager.getUUID(ownerName);
  if (uuid == null) {
    return null;
  }
  OfflinePlayer owner=Bukkit.getOfflinePlayer(uuid);
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  double price=(action == buy ? PriceUtil.getBuyPrice(prices) : PriceUtil.getSellPrice(prices));
  Chest chest=uBlock.findConnectedChest(sign);
  Inventory ownerInventory=(ChestShopSign.isAdminShop(sign) ? new AdminInventory() : chest != null ? chest.getInventory() : null);
  ItemStack item=MaterialUtil.getItem(material);
  if (item == null || !NumberUtil.isInteger(quantity)) {
    player.sendMessage(Messages.prefix(Messages.INVALID_SHOP_DETECTED));
    return null;
  }
  int amount=Integer.parseInt(quantity);
  if (amount < 1) {
    amount=1;
  }
  if (Properties.SHIFT_SELLS_IN_STACKS && player.isSneaking() && price != PriceUtil.NO_PRICE && isAllowedForShift(action == buy)) {
    int newAmount=getStackAmount(item,ownerInventory,player,action);
    if (newAmount > 0) {
      price=(price / amount) * newAmount;
      amount=newAmount;
    }
  }
  item.setAmount(amount);
  ItemStack[] items={item};
  TransactionType transactionType=(action == buy ? BUY : SELL);
  return new PreTransactionEvent(ownerInventory,player.getInventory(),items,price,player,owner,sign,transactionType);
}","private static PreTransactionEvent preparePreTransactionEvent(Sign sign,Player player,Action action){
  String name=sign.getLine(NAME_LINE);
  String quantity=sign.getLine(QUANTITY_LINE);
  String prices=sign.getLine(PRICE_LINE);
  String material=sign.getLine(ITEM_LINE);
  String ownerName=NameManager.getFullUsername(name);
  if (ownerName == null || ownerName.isEmpty()) {
    return null;
  }
  UUID uuid=NameManager.getUUID(ownerName);
  if (uuid == null) {
    return null;
  }
  OfflinePlayer owner=Bukkit.getOfflinePlayer(uuid);
  Action buy=Properties.REVERSE_BUTTONS ? LEFT_CLICK_BLOCK : RIGHT_CLICK_BLOCK;
  double price=(action == buy ? PriceUtil.getBuyPrice(prices) : PriceUtil.getSellPrice(prices));
  Chest chest=uBlock.findConnectedChest(sign);
  Inventory ownerInventory=(ChestShopSign.isAdminShop(sign) ? new AdminInventory() : chest != null ? chest.getInventory() : null);
  ItemStack item=MaterialUtil.getItem(material);
  if (item == null || !NumberUtil.isInteger(quantity)) {
    player.sendMessage(Messages.prefix(Messages.INVALID_SHOP_DETECTED));
    return null;
  }
  int amount=Integer.parseInt(quantity);
  if (amount < 1) {
    amount=1;
  }
  if (Properties.SHIFT_SELLS_IN_STACKS && player.isSneaking() && price != PriceUtil.NO_PRICE && isAllowedForShift(action == buy)) {
    int newAmount=getStackAmount(item,ownerInventory,player,action);
    if (newAmount > 0) {
      price=(price / amount) * newAmount;
      amount=newAmount;
    }
  }
  item.setAmount(amount);
  ItemStack[] items={item};
  TransactionType transactionType=(action == buy ? BUY : SELL);
  return new PreTransactionEvent(ownerInventory,player.getInventory(),items,price,player,owner,sign,transactionType);
}",0.978812294837362
178078,"@EventHandler(priority=EventPriority.MONITOR) public static void onShopDestroy(ShopDestroyedEvent event){
  double refundPrice=Properties.SHOP_REFUND_PRICE;
  if (event.getDestroyer() == null || Permission.has(event.getDestroyer(),NOFEE) || refundPrice == 0) {
    return;
  }
  String ownerName=NameManager.getFullUsername(event.getSign().getLine(NAME_LINE));
  UUID owner=NameManager.getUUID(ownerName);
  CurrencyAddEvent currencyEvent=new CurrencyAddEvent(BigDecimal.valueOf(refundPrice),owner,event.getSign().getWorld());
  ChestShop.callEvent(currencyEvent);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencySubtractEvent currencySubtractEvent=new CurrencySubtractEvent(BigDecimal.valueOf(refundPrice),NameManager.getUUID(Economy.getServerAccountName()),event.getSign().getWorld());
    ChestShop.callEvent(currencySubtractEvent);
  }
  String message=Messages.SHOP_REFUNDED.replace(""String_Node_Str"",Economy.formatBalance(refundPrice));
  event.getDestroyer().sendMessage(Messages.prefix(message));
}","@EventHandler(priority=EventPriority.MONITOR) public static void onShopDestroy(ShopDestroyedEvent event){
  double refundPrice=Properties.SHOP_REFUND_PRICE;
  if (event.getDestroyer() == null || Permission.has(event.getDestroyer(),NOFEE) || refundPrice == 0) {
    return;
  }
  String ownerName=NameManager.getFullUsername(event.getSign().getLine(NAME_LINE));
  if (ownerName.isEmpty()) {
    return;
  }
  UUID owner=NameManager.getUUID(ownerName);
  CurrencyAddEvent currencyEvent=new CurrencyAddEvent(BigDecimal.valueOf(refundPrice),owner,event.getSign().getWorld());
  ChestShop.callEvent(currencyEvent);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencySubtractEvent currencySubtractEvent=new CurrencySubtractEvent(BigDecimal.valueOf(refundPrice),NameManager.getUUID(Economy.getServerAccountName()),event.getSign().getWorld());
    ChestShop.callEvent(currencySubtractEvent);
  }
  String message=Messages.SHOP_REFUNDED.replace(""String_Node_Str"",Economy.formatBalance(refundPrice));
  event.getDestroyer().sendMessage(Messages.prefix(message));
}",0.9784379492093914
178079,"public static UUID getUUID(String username){
  if (usernameToUUID.containsKey(username)) {
    return usernameToUUID.get(username);
  }
  String shortenedName=NameUtil.stripUsername(username);
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",shortenedName).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    return Bukkit.getOfflinePlayer(username).getUniqueId();
  }
  UUID uuid=account.getUuid();
  if (uuid != null && !usernameToUUID.containsValue(uuid)) {
    usernameToUUID.put(account.getName(),uuid);
  }
  return uuid;
}","public static UUID getUUID(String username){
  Validate.notEmpty(username,""String_Node_Str"");
  if (usernameToUUID.containsKey(username)) {
    return usernameToUUID.get(username);
  }
  String shortenedName=NameUtil.stripUsername(username);
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",shortenedName).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    return Bukkit.getOfflinePlayer(username).getUniqueId();
  }
  UUID uuid=account.getUuid();
  if (uuid != null && !usernameToUUID.containsValue(uuid)) {
    usernameToUUID.put(account.getName(),uuid);
  }
  return uuid;
}",0.9653220099079972
178080,"public static boolean canUseName(Player player,String name){
  String shortenedName=NameUtil.stripUsername(getUsername(player.getUniqueId()));
  if (ChestShopSign.isAdminShop(name)) {
    return false;
  }
  return shortenedName.equals(name) || Permission.otherName(player,name) || player.getUniqueId().equals(getUUID(name));
}","public static boolean canUseName(Player player,String name){
  String shortenedName=NameUtil.stripUsername(getUsername(player.getUniqueId()));
  if (ChestShopSign.isAdminShop(name)) {
    return false;
  }
  return shortenedName.equals(name) || Permission.otherName(player,name) || (!name.isEmpty() && player.getUniqueId().equals(getUUID(name)));
}",0.9688888888888888
178081,"@EventHandler public static void onSignChange(SignChangeEvent event){
  Block signBlock=event.getBlock();
  String[] line=event.getLines();
  if (!BlockUtil.isSign(signBlock)) {
    return;
  }
  if (!ChestShopSign.isValidPreparedSign(line)) {
    return;
  }
  PreShopCreationEvent preEvent=new PreShopCreationEvent(event.getPlayer(),(Sign)signBlock.getState(),line);
  ChestShop.callEvent(preEvent);
  if (preEvent.isCancelled()) {
    return;
  }
  for (byte i=0; i < event.getLines().length; ++i) {
    event.setLine(i,preEvent.getSignLine(i));
  }
  ShopCreatedEvent postEvent=new ShopCreatedEvent(preEvent.getPlayer(),preEvent.getSign(),uBlock.findConnectedChest(preEvent.getSign()),preEvent.getSignLines());
  ChestShop.callEvent(postEvent);
}","@EventHandler public static void onSignChange(SignChangeEvent event){
  Block signBlock=event.getBlock();
  String[] line=StringUtil.stripColourCodes(event.getLines());
  if (!BlockUtil.isSign(signBlock)) {
    return;
  }
  if (!ChestShopSign.isValidPreparedSign(line)) {
    return;
  }
  PreShopCreationEvent preEvent=new PreShopCreationEvent(event.getPlayer(),(Sign)signBlock.getState(),line);
  ChestShop.callEvent(preEvent);
  if (preEvent.isCancelled()) {
    return;
  }
  for (byte i=0; i < event.getLines().length; ++i) {
    event.setLine(i,preEvent.getSignLine(i));
  }
  ShopCreatedEvent postEvent=new ShopCreatedEvent(preEvent.getPlayer(),preEvent.getSign(),uBlock.findConnectedChest(preEvent.getSign()),preEvent.getSignLines());
  ChestShop.callEvent(postEvent);
}",0.9810333551340744
178082,"public static void load(){
  File databaseFile=ChestShop.loadFile(""String_Node_Str"");
  String uri=ConnectionManager.getURI(databaseFile);
  ConnectionSource connection;
  try {
    connection=new JdbcConnectionSource(uri);
    accounts=DaoManager.createDao(connection,Account.class);
    TableUtils.createTableIfNotExists(connection,Account.class);
    Account adminAccount=new Account(Properties.ADMIN_SHOP_NAME,Bukkit.getOfflinePlayer(Properties.ADMIN_SHOP_NAME).getUniqueId());
    accounts.createIfNotExists(adminAccount);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public static void load(){
  File databaseFile=ChestShop.loadFile(""String_Node_Str"");
  String uri=ConnectionManager.getURI(databaseFile);
  ConnectionSource connection;
  try {
    connection=new JdbcConnectionSource(uri);
    accounts=DaoManager.createDao(connection,Account.class);
    TableUtils.createTableIfNotExists(connection,Account.class);
    Account adminAccount=new Account(Properties.ADMIN_SHOP_NAME,Bukkit.getOfflinePlayer(Properties.ADMIN_SHOP_NAME).getUniqueId());
    accounts.createOrUpdate(adminAccount);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.983857264231096
178083,"@Override public void run(){
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",uuid).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return;
  }
  if (account != null) {
    return;
  }
  account=new Account(player.getName(),player.getUniqueId());
  try {
    accounts.create(account);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",uuid).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return;
  }
  if (account != null) {
    return;
  }
  account=new Account(player.getName(),player.getUniqueId());
  try {
    accounts.createOrUpdate(account);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9913419913419912
178084,"public static void storeUsername(final Player player){
  final UUID uuid=player.getUniqueId();
  if (!usernameToUUID.inverse().containsKey(uuid)) {
    usernameToUUID.inverse().put(uuid,player.getName());
  }
  Bukkit.getScheduler().runTaskAsynchronously(ChestShop.getPlugin(),new Runnable(){
    @Override public void run(){
      Account account=null;
      try {
        account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",uuid).queryForFirst();
      }
 catch (      SQLException e) {
        e.printStackTrace();
        return;
      }
      if (account != null) {
        return;
      }
      account=new Account(player.getName(),player.getUniqueId());
      try {
        accounts.create(account);
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
);
}","public static void storeUsername(final Player player){
  final UUID uuid=player.getUniqueId();
  if (!usernameToUUID.inverse().containsKey(uuid)) {
    usernameToUUID.inverse().put(uuid,player.getName());
  }
  Bukkit.getScheduler().runTaskAsynchronously(ChestShop.getPlugin(),new Runnable(){
    @Override public void run(){
      Account account=null;
      try {
        account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",uuid).queryForFirst();
      }
 catch (      SQLException e) {
        e.printStackTrace();
        return;
      }
      if (account != null) {
        return;
      }
      account=new Account(player.getName(),player.getUniqueId());
      try {
        accounts.createOrUpdate(account);
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.995260663507109
178085,"/** 
 * Returns item's name, just like on the sign
 * @param itemStack ItemStack to name
 * @return ItemStack's name
 */
public static String getSignName(ItemStack itemStack){
  StringBuilder name=new StringBuilder(15);
  name.append(itemStack.getType().name());
  if (itemStack.getDurability() != 0) {
    name.append(':').append(itemStack.getDurability());
  }
  if (itemStack.hasItemMeta()) {
    name.append('#').append(Metadata.getItemCode(itemStack));
  }
  return StringUtil.capitalizeFirstLetter(name.toString(),'_');
}","/** 
 * Returns item's name, just like on the sign
 * @param itemStack ItemStack to name
 * @return ItemStack's name
 */
public static String getSignName(ItemStack itemStack){
  StringBuilder name=new StringBuilder(15);
  String itemName=itemStack.getType().name();
  itemName=StringUtil.capitalizeFirstLetter(itemName,'_');
  name.append(itemName);
  if (itemStack.getDurability() != 0) {
    name.append(':').append(itemStack.getDurability());
  }
  if (itemStack.hasItemMeta()) {
    name.append('#').append(Metadata.getItemCode(itemStack));
  }
  return name.toString();
}",0.8649138712601995
178086,"public static boolean canUseName(Player player,String name){
  String shortenedName=NameUtil.stripUsername(getUsername(player.getUniqueId()));
  return shortenedName.equals(name) || Permission.otherName(player,name) || player.getUniqueId().equals(getUUID(name));
}","public static boolean canUseName(Player player,String name){
  String shortenedName=NameUtil.stripUsername(getUsername(player.getUniqueId()));
  if (ChestShopSign.isAdminShop(name)) {
    return false;
  }
  return shortenedName.equals(name) || Permission.otherName(player,name) || player.getUniqueId().equals(getUUID(name));
}",0.8934010152284264
178087,"public static String getLastSeenName(UUID uuid){
  if (lastSeenName.containsKey(uuid)) {
    return lastSeenName.get(uuid);
  }
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"",""String_Node_Str"").where().eq(""String_Node_Str"",uuid).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    return ""String_Node_Str"";
  }
  if (account.getLastSeenName() != null) {
    lastSeenName.put(uuid,account.getLastSeenName());
  }
 else   if (account.getName() != null) {
    lastSeenName.put(uuid,account.getName());
  }
  return account.getLastSeenName();
}","public static String getLastSeenName(UUID uuid){
  if (lastSeenName.containsKey(uuid)) {
    return lastSeenName.get(uuid);
  }
  if (Bukkit.getOfflinePlayer(uuid).getName() != null) {
    String lastSeen=Bukkit.getOfflinePlayer(uuid).getName();
    lastSeenName.put(uuid,lastSeen);
    return lastSeen;
  }
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"",""String_Node_Str"").where().eq(""String_Node_Str"",uuid).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    return ""String_Node_Str"";
  }
  if (account.getLastSeenName() != null) {
    lastSeenName.put(uuid,account.getLastSeenName());
  }
 else   if (account.getName() != null) {
    lastSeenName.put(uuid,account.getName());
  }
  return account.getLastSeenName();
}",0.8807947019867549
178088,"public static UUID getUUID(String username){
  if (usernameToUUID.containsKey(username)) {
    return usernameToUUID.get(username);
  }
  String shortenedName=NameUtil.stripUsername(username);
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",shortenedName).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    UUID uuid=Bukkit.getOfflinePlayer(username).getUniqueId();
    usernameToUUID.put(username,uuid);
    return uuid;
  }
  UUID uuid=account.getUuid();
  if (uuid != null) {
    usernameToUUID.put(account.getName(),uuid);
  }
  return uuid;
}","public static UUID getUUID(String username){
  if (usernameToUUID.containsKey(username)) {
    return usernameToUUID.get(username);
  }
  String shortenedName=NameUtil.stripUsername(username);
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",shortenedName).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    UUID uuid=Bukkit.getOfflinePlayer(username).getUniqueId();
    usernameToUUID.put(username,uuid);
    return uuid;
  }
  UUID uuid=account.getUuid();
  if (uuid != null && !usernameToUUID.containsValue(uuid)) {
    usernameToUUID.put(account.getName(),uuid);
  }
  return uuid;
}",0.972972972972973
178089,"public static boolean canUseName(Player player,String name){
  String shortenedName=NameUtil.stripUsername(getUsername(player.getUniqueId()));
  return shortenedName.equals(name) || Permission.otherName(player,name);
}","public static boolean canUseName(Player player,String name){
  String shortenedName=NameUtil.stripUsername(getUsername(player.getUniqueId()));
  return shortenedName.equals(name) || Permission.otherName(player,name) || player.getUniqueId().equals(getUUID(name));
}",0.9045643153526972
178090,"@EventHandler public void onAmountCheck(CurrencyAmountEvent event){
  if (!event.getAmount().equals(BigDecimal.ZERO)) {
    return;
  }
  double balance=provider.getBalance(Bukkit.getOfflinePlayer(event.getAccount()),event.getWorld().getName());
  if (balance > Double.MAX_VALUE) {
    balance=Double.MAX_VALUE;
  }
  event.setAmount(balance);
}","@EventHandler public void onAmountCheck(CurrencyAmountEvent event){
  if (!event.getAmount().equals(BigDecimal.ZERO)) {
    return;
  }
  double balance=provider.getBalance(NameManager.getUsername(event.getAccount()),event.getWorld().getName());
  if (balance > Double.MAX_VALUE) {
    balance=Double.MAX_VALUE;
  }
  event.setAmount(balance);
}",0.9333333333333332
178091,"@EventHandler public void onCurrencyCheck(CurrencyCheckEvent event){
  if (event.hasEnough()) {
    return;
  }
  World world=event.getWorld();
  if (provider.has(Bukkit.getOfflinePlayer(event.getAccount()),world.getName(),event.getDoubleAmount())) {
    event.hasEnough(true);
  }
}","@EventHandler public void onCurrencyCheck(CurrencyCheckEvent event){
  if (event.hasEnough()) {
    return;
  }
  World world=event.getWorld();
  if (provider.has(NameManager.getUsername(event.getAccount()),world.getName(),event.getDoubleAmount())) {
    event.hasEnough(true);
  }
}",0.9187279151943464
178092,"@EventHandler public void onCurrencyAdd(CurrencyAddEvent event){
  if (event.isAdded()) {
    return;
  }
  World world=event.getWorld();
  provider.depositPlayer(Bukkit.getOfflinePlayer(event.getTarget()),world.getName(),event.getDoubleAmount());
}","@EventHandler public void onCurrencyAdd(CurrencyAddEvent event){
  if (event.isAdded()) {
    return;
  }
  World world=event.getWorld();
  provider.depositPlayer(NameManager.getUsername(event.getTarget()),world.getName(),event.getDoubleAmount());
}",0.9076305220883534
178093,"@EventHandler public void onCurrencySubtraction(CurrencySubtractEvent event){
  if (event.isSubtracted()) {
    return;
  }
  World world=event.getWorld();
  provider.withdrawPlayer(Bukkit.getOfflinePlayer(event.getTarget()),world.getName(),event.getDoubleAmount());
}","@EventHandler public void onCurrencySubtraction(CurrencySubtractEvent event){
  if (event.isSubtracted()) {
    return;
  }
  World world=event.getWorld();
  provider.withdrawPlayer(NameManager.getUsername(event.getTarget()),world.getName(),event.getDoubleAmount());
}",0.914179104477612
178094,"@EventHandler public void onCurrencyHoldCheck(CurrencyHoldEvent event){
  if (event.getAccount() == null || !transactionCanFail()) {
    return;
  }
  if (!provider.hasAccount(Bukkit.getOfflinePlayer(event.getAccount()),event.getWorld().getName())) {
    event.canHold(false);
    return;
  }
  EconomyResponse response=provider.depositPlayer(Bukkit.getOfflinePlayer(event.getAccount()),event.getWorld().getName(),event.getDoubleAmount());
  if (!response.transactionSuccess()) {
    event.canHold(false);
    return;
  }
  provider.withdrawPlayer(Bukkit.getOfflinePlayer(event.getAccount()),event.getWorld().getName(),event.getDoubleAmount());
}","@EventHandler public void onCurrencyHoldCheck(CurrencyHoldEvent event){
  if (event.getAccount() == null || !transactionCanFail()) {
    return;
  }
  if (!provider.hasAccount(NameManager.getUsername(event.getAccount()),event.getWorld().getName())) {
    event.canHold(false);
    return;
  }
  EconomyResponse response=provider.depositPlayer(NameManager.getUsername(event.getAccount()),event.getWorld().getName(),event.getDoubleAmount());
  if (!response.transactionSuccess()) {
    event.canHold(false);
    return;
  }
  provider.withdrawPlayer(NameManager.getUsername(event.getAccount()),event.getWorld().getName(),event.getDoubleAmount());
}",0.8931888544891641
178095,"@EventHandler public void onAccountCheck(AccountCheckEvent event){
  if (event.hasAccount()) {
    return;
  }
  World world=event.getWorld();
  if (!provider.hasAccount(Bukkit.getOfflinePlayer(event.getAccount()),world.getName())) {
    event.hasAccount(false);
  }
}","@EventHandler public void onAccountCheck(AccountCheckEvent event){
  if (event.hasAccount()) {
    return;
  }
  World world=event.getWorld();
  if (!provider.hasAccount(NameManager.getUsername(event.getAccount()),world.getName())) {
    event.hasAccount(false);
  }
}",0.914179104477612
178096,"@EventHandler(priority=EventPriority.LOW) public static void onCurrencyAdd(CurrencyAddEvent event){
  if (event.isAdded()) {
    return;
  }
  UUID target=event.getTarget();
  if (Bukkit.getOfflinePlayer(target).getName().equals(Economy.getServerAccountName())) {
    return;
  }
  float taxAmount=isServerAccount(target) ? Properties.SERVER_TAX_AMOUNT : Properties.TAX_AMOUNT;
  if (taxAmount == 0) {
    return;
  }
  BigDecimal tax=getTax(event.getAmount(),taxAmount);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(tax,NameManager.getUUID(Economy.getServerAccountName()),event.getWorld());
    ChestShop.callEvent(currencyAddEvent);
  }
  event.setAmount(event.getAmount().subtract(tax));
}","@EventHandler(priority=EventPriority.LOW) public static void onCurrencyAdd(CurrencyAddEvent event){
  if (event.isAdded()) {
    return;
  }
  UUID target=event.getTarget();
  if (NameManager.getUsername(target).equals(Economy.getServerAccountName())) {
    return;
  }
  float taxAmount=isServerAccount(target) ? Properties.SERVER_TAX_AMOUNT : Properties.TAX_AMOUNT;
  if (taxAmount == 0) {
    return;
  }
  BigDecimal tax=getTax(event.getAmount(),taxAmount);
  if (!Economy.getServerAccountName().isEmpty()) {
    CurrencyAddEvent currencyAddEvent=new CurrencyAddEvent(tax,NameManager.getUUID(Economy.getServerAccountName()),event.getWorld());
    ChestShop.callEvent(currencyAddEvent);
  }
  event.setAmount(event.getAmount().subtract(tax));
}",0.9587765957446808
178097,"@EventHandler(priority=EventPriority.MONITOR) public static void onShopDestroy(ShopDestroyedEvent event){
  double refundPrice=Properties.SHOP_REFUND_PRICE;
  if (event.getDestroyer() == null || Permission.has(event.getDestroyer(),NOFEE) || refundPrice == 0) {
    return;
  }
  UUID owner=NameManager.getUUID(event.getSign().getLine(NAME_LINE));
  CurrencyAddEvent currencyEvent=new CurrencyAddEvent(BigDecimal.valueOf(refundPrice),owner,event.getSign().getWorld());
  ChestShop.callEvent(currencyEvent);
  String message=Messages.SHOP_REFUNDED.replace(""String_Node_Str"",Economy.formatBalance(refundPrice));
  event.getDestroyer().sendMessage(Messages.prefix(message));
}","@EventHandler(priority=EventPriority.MONITOR) public static void onShopDestroy(ShopDestroyedEvent event){
  double refundPrice=Properties.SHOP_REFUND_PRICE;
  if (event.getDestroyer() == null || Permission.has(event.getDestroyer(),NOFEE) || refundPrice == 0) {
    return;
  }
  String ownerName=NameManager.getFullUsername(event.getSign().getLine(NAME_LINE));
  UUID owner=NameManager.getUUID(ownerName);
  CurrencyAddEvent currencyEvent=new CurrencyAddEvent(BigDecimal.valueOf(refundPrice),owner,event.getSign().getWorld());
  ChestShop.callEvent(currencyEvent);
  String message=Messages.SHOP_REFUNDED.replace(""String_Node_Str"",Economy.formatBalance(refundPrice));
  event.getDestroyer().sendMessage(Messages.prefix(message));
}",0.909479686386315
178098,"public static UUID getUUID(String username){
  if (usernameToUUID.containsKey(username)) {
    return usernameToUUID.get(username);
  }
  String shortenedName=NameUtil.stripUsername(username);
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",shortenedName).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    UUID uuid=Bukkit.getOfflinePlayer(username).getUniqueId();
    usernameToUUID.put(username,uuid);
    return uuid;
  }
  UUID uuid=account.getUuid();
  if (uuid != null) {
    usernameToUUID.put(username,uuid);
  }
  return uuid;
}","public static UUID getUUID(String username){
  if (usernameToUUID.containsKey(username)) {
    return usernameToUUID.get(username);
  }
  String shortenedName=NameUtil.stripUsername(username);
  Account account=null;
  try {
    account=accounts.queryBuilder().selectColumns(""String_Node_Str"").where().eq(""String_Node_Str"",shortenedName).queryForFirst();
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
  if (account == null) {
    UUID uuid=Bukkit.getOfflinePlayer(username).getUniqueId();
    usernameToUUID.put(username,uuid);
    return uuid;
  }
  UUID uuid=account.getUuid();
  if (uuid != null) {
    usernameToUUID.put(account.getName(),uuid);
  }
  return uuid;
}",0.982078853046595
178099,"/** 
 * Gets the price from the text
 * @param text      Text to check
 * @param indicator Price indicator (for example, B for buy)
 * @return price
 */
public static double get(String text,char indicator){
  String[] split=text.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase().split(""String_Node_Str"");
  String character=String.valueOf(indicator).toLowerCase();
  for (  String part : split) {
    if (!part.contains(character)) {
      continue;
    }
    part=part.replace(character,""String_Node_Str"");
    if (part.equals(FREE_TEXT)) {
      return FREE;
    }
    if (NumberUtil.isDouble(part)) {
      double price=Double.valueOf(part);
      if (price <= 0) {
        return NO_PRICE;
      }
 else {
        return price;
      }
    }
  }
  return NO_PRICE;
}","/** 
 * Gets the price from the text
 * @param text      Text to check
 * @param indicator Price indicator (for example, B for buy)
 * @return price
 */
public static double get(String text,char indicator){
  String[] split=text.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase().split(""String_Node_Str"");
  String character=String.valueOf(indicator).toLowerCase();
  for (  String part : split) {
    if (!part.contains(character)) {
      continue;
    }
    part=part.replace(character,""String_Node_Str"");
    if (part.equals(FREE_TEXT)) {
      return FREE;
    }
    if (NumberUtil.isDouble(part)) {
      double price=Double.valueOf(part);
      if (Double.isInfinite(price) || price <= 0) {
        return NO_PRICE;
      }
 else {
        return price;
      }
    }
  }
  return NO_PRICE;
}",0.9823455233291298
178100,"/** 
 * Checks if the string is a valid price
 * @param text Text to check
 * @return Is the string a valid price
 */
public static boolean isPrice(String text){
  if (NumberUtil.isFloat(text)) {
    return true;
  }
  return text.trim().equalsIgnoreCase(FREE_TEXT);
}","/** 
 * Checks if the string is a valid price
 * @param text Text to check
 * @return Is the string a valid price
 */
public static boolean isPrice(String text){
  if (NumberUtil.isDouble(text)) {
    return true;
  }
  return text.trim().equalsIgnoreCase(FREE_TEXT);
}",0.9795158286778398
178101,"/** 
 * Gets the item code for this item
 * @param item Item
 * @return Item code for this item
 */
public String getItemCode(ItemStack item){
  try {
    ItemStack clone=item.clone();
    clone.setAmount(1);
    String code=Base64.encodeObject(yaml.dump(clone));
    table.insertRow(""String_Node_Str"" + code + '\'');
    int id=Integer.parseInt(table.getRow(""String_Node_Str"" + code + '\'').get(""String_Node_Str""));
    return Base62.encode(id);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Gets the item code for this item
 * @param item Item
 * @return Item code for this item
 */
public String getItemCode(ItemStack item){
  try {
    ItemStack clone=new ItemStack(item);
    clone.setAmount(1);
    String code=Base64.encodeObject(yaml.dump(clone));
    table.insertRow(""String_Node_Str"" + code + '\'');
    int id=Integer.parseInt(table.getRow(""String_Node_Str"" + code + '\'').get(""String_Node_Str""));
    return Base62.encode(id);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  SQLException e) {
    e.printStackTrace();
    return null;
  }
catch (  IllegalArgumentException e) {
    return null;
  }
}",0.9295328582739508
178102,"@EventHandler public void onCurrencyHoldCheck(CurrencyHoldEvent event){
  EconomyResponse response=provider.depositPlayer(event.getAccount(),event.getWorld().getName(),event.getDoubleAmount());
  if (!response.transactionSuccess()) {
    event.canHold(false);
  }
  provider.withdrawPlayer(event.getAccount(),event.getWorld().getName(),event.getDoubleAmount());
}","@EventHandler public void onCurrencyHoldCheck(CurrencyHoldEvent event){
  if (event.getAccount().isEmpty() || !transactionCanFail()) {
    return;
  }
  if (!provider.hasAccount(event.getAccount(),event.getWorld().getName())) {
    event.canHold(false);
    return;
  }
  EconomyResponse response=provider.depositPlayer(event.getAccount(),event.getWorld().getName(),event.getDoubleAmount());
  if (!response.transactionSuccess()) {
    event.canHold(false);
    return;
  }
  provider.withdrawPlayer(event.getAccount(),event.getWorld().getName(),event.getDoubleAmount());
}",0.7756410256410257
178103,"@EventHandler public static void onPlayerTeleport(PlayerTeleportEvent event){
  event.getPlayer().closeInventory();
}","@EventHandler public static void onPlayerTeleport(PlayerTeleportEvent event){
  if (!event.getPlayer().isConversing()) {
    event.getPlayer().closeInventory();
  }
}",0.8268551236749117
178104,"@EventHandler public static void onPlayerTeleport(PlayerTeleportEvent event){
  if (!event.getPlayer().isConversing()) {
    event.getPlayer().closeInventory();
  }
}","@EventHandler public static void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.getPlayer().getOpenInventory().getType() != InventoryType.CRAFTING) {
    event.getPlayer().closeInventory();
  }
}",0.5660377358490566
178105,"private void setupDB(){
  Database DB;
  DB=new Database(this){
    protected java.util.List<Class<?>> getDatabaseClasses(){
      List<Class<?>> list=new ArrayList<Class<?>>();
      list.add(Transaction.class);
      return list;
    }
  }
;
  FileConfiguration config=YamlConfiguration.loadConfiguration(new File(""String_Node_Str""));
  DB.initializeDatabase(config.getString(""String_Node_Str""),config.getString(""String_Node_Str""),config.getString(""String_Node_Str""),config.getString(""String_Node_Str""),config.getString(""String_Node_Str""));
  database=DB.getDatabase();
  scheduleTask(new Queue(),200L,200L);
}","private void setupDB(){
  loadFile(new File(""String_Node_Str""));
  Database DB;
  DB=new Database(this){
    protected java.util.List<Class<?>> getDatabaseClasses(){
      List<Class<?>> list=new ArrayList<Class<?>>();
      list.add(Transaction.class);
      return list;
    }
  }
;
  FileConfiguration config=YamlConfiguration.loadConfiguration(new File(""String_Node_Str""));
  DB.initializeDatabase(config.getString(""String_Node_Str""),config.getString(""String_Node_Str""),config.getString(""String_Node_Str""),config.getString(""String_Node_Str""),config.getString(""String_Node_Str""));
  database=DB.getDatabase();
  scheduleTask(new Queue(),200L,200L);
}",0.967588932806324
178106,"@EventHandler(priority=EventPriority.LOW) public static void onPreBuyTransaction(PreTransactionEvent event){
  if (event.isCancelled() || event.getTransactionType() != BUY) {
    return;
  }
  Player client=event.getClient();
  String clientName=client.getName();
  ItemStack[] stock=event.getStock();
  double price=event.getPrice();
  double pricePerItem=event.getPrice() / InventoryUtil.countItems(stock);
  double walletMoney=Economy.getBalance(clientName);
  if (!Economy.hasEnough(clientName,price)) {
    int amountAffordable=getAmountOfAffordableItems(walletMoney,pricePerItem);
    if (amountAffordable < 1) {
      event.setCancelled(CLIENT_DOES_NOT_HAVE_ENOUGH_MONEY);
      return;
    }
    event.setPrice(amountAffordable * pricePerItem);
    event.setStock(getCountedItemStack(stock,amountAffordable));
  }
  String seller=event.getOwner().getName();
  if (Economy.transactionCanFail()) {
    if (Economy.add(seller,price)) {
      Economy.subtract(seller,price);
    }
 else {
      event.setCancelled(SHOP_DEPOSIT_FAILED);
      return;
    }
  }
  stock=event.getStock();
  if (!InventoryUtil.hasItems(stock,event.getOwnerInventory())) {
    ItemStack[] itemsHad=getItems(stock,event.getOwnerInventory());
    int posessedItemCount=InventoryUtil.countItems(itemsHad);
    if (posessedItemCount <= 0) {
      event.setCancelled(NOT_ENOUGH_STOCK_IN_CHEST);
      return;
    }
    event.setPrice(pricePerItem * posessedItemCount);
    event.setStock(itemsHad);
  }
}","@EventHandler(priority=EventPriority.LOW) public static void onPreBuyTransaction(PreTransactionEvent event){
  if (event.isCancelled() || event.getTransactionType() != BUY) {
    return;
  }
  Player client=event.getClient();
  String clientName=client.getName();
  ItemStack[] stock=event.getStock();
  double price=event.getPrice();
  double pricePerItem=event.getPrice() / InventoryUtil.countItems(stock);
  double walletMoney=Economy.getBalance(clientName);
  if (!Economy.hasEnough(clientName,price)) {
    int amountAffordable=getAmountOfAffordableItems(walletMoney,pricePerItem);
    if (amountAffordable < 1) {
      event.setCancelled(CLIENT_DOES_NOT_HAVE_ENOUGH_MONEY);
      return;
    }
    event.setPrice(amountAffordable * pricePerItem);
    event.setStock(getCountedItemStack(stock,amountAffordable));
  }
  String seller=event.getOwner().getName();
  if (!Economy.canHold(seller,price)) {
    event.setCancelled(SHOP_DEPOSIT_FAILED);
    return;
  }
  stock=event.getStock();
  if (!InventoryUtil.hasItems(stock,event.getOwnerInventory())) {
    ItemStack[] itemsHad=getItems(stock,event.getOwnerInventory());
    int posessedItemCount=InventoryUtil.countItems(itemsHad);
    if (posessedItemCount <= 0) {
      event.setCancelled(NOT_ENOUGH_STOCK_IN_CHEST);
      return;
    }
    event.setPrice(pricePerItem * posessedItemCount);
    event.setStock(itemsHad);
  }
}",0.9508196721311476
178107,"@EventHandler(priority=EventPriority.LOW) public static void onPreSellTransaction(PreTransactionEvent event){
  if (event.isCancelled() || event.getTransactionType() != SELL) {
    return;
  }
  String player=event.getClient().getName();
  String ownerName=event.getOwner().getName();
  ItemStack[] stock=event.getStock();
  double price=event.getPrice();
  double pricePerItem=event.getPrice() / InventoryUtil.countItems(stock);
  double walletMoney=Economy.getBalance(ownerName);
  if (Economy.isOwnerEconomicallyActive(event.getOwnerInventory()) && !Economy.hasEnough(ownerName,price)) {
    int amountAffordable=getAmountOfAffordableItems(walletMoney,pricePerItem);
    if (amountAffordable < 1) {
      event.setCancelled(SHOP_DOES_NOT_HAVE_ENOUGH_MONEY);
      return;
    }
    event.setPrice(amountAffordable * pricePerItem);
    event.setStock(getCountedItemStack(stock,amountAffordable));
  }
  stock=event.getStock();
  if (Economy.add(player,price)) {
    Economy.subtract(player,price);
  }
 else {
    event.setCancelled(CLIENT_DEPOSIT_FAILED);
    return;
  }
  if (!InventoryUtil.hasItems(stock,event.getClientInventory())) {
    ItemStack[] itemsHad=getItems(stock,event.getClientInventory());
    int posessedItemCount=InventoryUtil.countItems(itemsHad);
    if (posessedItemCount <= 0) {
      event.setCancelled(NOT_ENOUGH_STOCK_IN_INVENTORY);
      return;
    }
    event.setPrice(pricePerItem * posessedItemCount);
    event.setStock(itemsHad);
  }
}","@EventHandler(priority=EventPriority.LOW) public static void onPreSellTransaction(PreTransactionEvent event){
  if (event.isCancelled() || event.getTransactionType() != SELL) {
    return;
  }
  String player=event.getClient().getName();
  String ownerName=event.getOwner().getName();
  ItemStack[] stock=event.getStock();
  double price=event.getPrice();
  double pricePerItem=event.getPrice() / InventoryUtil.countItems(stock);
  double walletMoney=Economy.getBalance(ownerName);
  if (Economy.isOwnerEconomicallyActive(event.getOwnerInventory()) && !Economy.hasEnough(ownerName,price)) {
    int amountAffordable=getAmountOfAffordableItems(walletMoney,pricePerItem);
    if (amountAffordable < 1) {
      event.setCancelled(SHOP_DOES_NOT_HAVE_ENOUGH_MONEY);
      return;
    }
    event.setPrice(amountAffordable * pricePerItem);
    event.setStock(getCountedItemStack(stock,amountAffordable));
  }
  stock=event.getStock();
  if (!Economy.canHold(player,price)) {
    event.setCancelled(CLIENT_DEPOSIT_FAILED);
    return;
  }
  if (!InventoryUtil.hasItems(stock,event.getClientInventory())) {
    ItemStack[] itemsHad=getItems(stock,event.getClientInventory());
    int posessedItemCount=InventoryUtil.countItems(itemsHad);
    if (posessedItemCount <= 0) {
      event.setCancelled(NOT_ENOUGH_STOCK_IN_INVENTORY);
      return;
    }
    event.setPrice(pricePerItem * posessedItemCount);
    event.setStock(itemsHad);
  }
}",0.974853599724423
178108,"public void onEnable(){
  plugin=this;
  logger=getLogger();
  dataFolder=getDataFolder();
  description=getDescription();
  server=getServer();
  itemDatabase=new ItemDatabase();
  Configuration.pairFileAndClass(loadFile(""String_Node_Str""),Properties.class);
  Configuration.pairFileAndClass(loadFile(""String_Node_Str""),Messages.class);
  uName.file=loadFile(""String_Node_Str"");
  uName.load();
  Methods.setPreferred(Properties.PREFERRED_ECONOMY_PLUGIN);
  Dependencies.load();
  registerEvents();
  if (Properties.LOG_TO_DATABASE || Properties.GENERATE_STATISTICS_PAGE) {
    setupDB();
  }
  if (Properties.GENERATE_STATISTICS_PAGE) {
    File htmlFolder=new File(Properties.STATISTICS_PAGE_PATH);
    scheduleTask(new Generator(htmlFolder),300L,Properties.STATISTICS_PAGE_GENERATION_INTERVAL * 20L);
  }
  if (Properties.LOG_TO_FILE) {
    File log=loadFile(""String_Node_Str"");
    FileHandler handler=loadHandler(log.getAbsolutePath());
    handler.setFormatter(new FileFormatter());
    this.handler=handler;
    logger.addHandler(handler);
  }
  if (!Properties.LOG_TO_CONSOLE) {
    logger.setUseParentHandlers(false);
  }
  getCommand(""String_Node_Str"").setExecutor(new ItemInfo());
  getCommand(""String_Node_Str"").setExecutor(new Version());
  startStatistics();
}","public void onEnable(){
  plugin=this;
  logger=getLogger();
  dataFolder=getDataFolder();
  description=getDescription();
  server=getServer();
  Configuration.pairFileAndClass(loadFile(""String_Node_Str""),Properties.class);
  Configuration.pairFileAndClass(loadFile(""String_Node_Str""),Messages.class);
  itemDatabase=new ItemDatabase();
  uName.file=loadFile(""String_Node_Str"");
  uName.load();
  Methods.setPreferred(Properties.PREFERRED_ECONOMY_PLUGIN);
  Dependencies.load();
  registerEvents();
  if (Properties.LOG_TO_DATABASE || Properties.GENERATE_STATISTICS_PAGE) {
    setupDB();
  }
  if (Properties.GENERATE_STATISTICS_PAGE) {
    File htmlFolder=new File(Properties.STATISTICS_PAGE_PATH);
    scheduleTask(new Generator(htmlFolder),300L,Properties.STATISTICS_PAGE_GENERATION_INTERVAL * 20L);
  }
  if (Properties.LOG_TO_FILE) {
    File log=loadFile(""String_Node_Str"");
    FileHandler handler=loadHandler(log.getAbsolutePath());
    handler.setFormatter(new FileFormatter());
    this.handler=handler;
    logger.addHandler(handler);
  }
  if (!Properties.LOG_TO_CONSOLE) {
    logger.setUseParentHandlers(false);
  }
  getCommand(""String_Node_Str"").setExecutor(new ItemInfo());
  getCommand(""String_Node_Str"").setExecutor(new Version());
  startStatistics();
}",0.876078431372549
178109,"public ItemDatabase(){
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    ChestShop.getBukkitLogger().severe(""String_Node_Str"");
  }
  Database database=new Database(""String_Node_Str"" + new File(ChestShop.getFolder(),""String_Node_Str"").getAbsolutePath());
  yaml=new Yaml(new YamlConstructor(),new YamlRepresenter(),new DumperOptions());
  try {
    Statement statement=database.getConnection().createStatement();
    statement.executeUpdate(""String_Node_Str"");
    statement.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  try {
    table=database.getTable(""String_Node_Str"");
    table.create(""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public ItemDatabase(){
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    ChestShop.getBukkitLogger().severe(""String_Node_Str"");
  }
  Database database=new Database(""String_Node_Str"" + ChestShop.loadFile(""String_Node_Str"").getAbsolutePath());
  yaml=new Yaml(new YamlConstructor(),new YamlRepresenter(),new DumperOptions());
  try {
    Statement statement=database.getConnection().createStatement();
    statement.executeUpdate(""String_Node_Str"");
    statement.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  try {
    table=database.getTable(""String_Node_Str"");
    table.create(""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9816031537450722
178110,"private void registerEvents(){
  registerEvent(new com.Acrobot.ChestShop.Plugins.ChestShop());
  registerPreShopCreationEvents();
  registerPreTransactionEvents();
  registerPostShopCreationEvents();
  registerPostTransactionEvents();
  registerEvent(new SignBreak());
  registerEvent(new SignCreate());
  registerEvent(new ChestBreak());
  registerEvent(new BlockPlace());
  registerEvent(new PlayerConnect());
  registerEvent(new PlayerInteract());
  registerEvent(new PlayerInventory());
  registerEvent(new ItemInfoListener());
  registerEvent(new RestrictedSign());
  registerEvent(new ShopRefundListener());
  registerEvent(new ShortNameSaver());
  registerEvent(new TeleportFixListener());
}","private void registerEvents(){
  registerEvent(new com.Acrobot.ChestShop.Plugins.ChestShop());
  registerPreShopCreationEvents();
  registerPreTransactionEvents();
  registerPostShopCreationEvents();
  registerPostTransactionEvents();
  registerEvent(new SignBreak());
  registerEvent(new SignCreate());
  registerEvent(new ChestBreak());
  registerEvent(new BlockPlace());
  registerEvent(new PlayerConnect());
  registerEvent(new PlayerInteract());
  registerEvent(new PlayerInventory());
  registerEvent(new ItemInfoListener());
  registerEvent(new RestrictedSign());
  registerEvent(new ShopRefundListener());
  registerEvent(new ShortNameSaver());
  if (!Properties.TURN_OFF_CRAFTBUKKIT_TELEPORTATION_BUGFIX) {
    registerEvent(new TeleportFixListener());
  }
}",0.952901023890785
178111,"private void registerEvents(){
  registerEvent(new com.Acrobot.ChestShop.Plugins.ChestShop());
  registerPreShopCreationEvents();
  registerPreTransactionEvents();
  registerPostShopCreationEvents();
  registerPostTransactionEvents();
  registerEvent(new SignBreak());
  registerEvent(new SignCreate());
  registerEvent(new ChestBreak());
  registerEvent(new BlockPlace());
  registerEvent(new PlayerConnect());
  registerEvent(new PlayerInteract());
  registerEvent(new PlayerInventory());
  registerEvent(new ItemInfoListener());
  registerEvent(new RestrictedSign());
  registerEvent(new ShopRefundListener());
  registerEvent(new ShortNameSaver());
  if (!Properties.TURN_OFF_CRAFTBUKKIT_TELEPORTATION_BUGFIX) {
    registerEvent(new TeleportFixListener());
  }
}","private void registerEvents(){
  registerEvent(new com.Acrobot.ChestShop.Plugins.ChestShop());
  registerPreShopCreationEvents();
  registerPreTransactionEvents();
  registerPostShopCreationEvents();
  registerPostTransactionEvents();
  registerEvent(new SignBreak());
  registerEvent(new SignCreate());
  registerEvent(new ChestBreak());
  registerEvent(new BlockPlace());
  registerEvent(new PlayerConnect());
  registerEvent(new PlayerInteract());
  registerEvent(new PlayerInventory());
  registerEvent(new ItemInfoListener());
  registerEvent(new RestrictedSign());
  registerEvent(new ShopRefundListener());
  registerEvent(new ShortNameSaver());
}",0.9204785362420832
178112,"@EventHandler(priority=EventPriority.LOWEST) public static void onPreShopCreation(PreShopCreationEvent event){
  String line=event.getSignLine(PRICE_LINE).toUpperCase();
  String[] part=line.split(""String_Node_Str"");
  if (isPrice(part[0])) {
    line=""String_Node_Str"" + line;
  }
  if (part.length > 1 && isPrice(part[1])) {
    line+=""String_Node_Str"";
  }
  line=line.replace('b','B').replace('s','S');
  if (line.length() > 15) {
    line=line.replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (line.length() > 15) {
    event.setOutcome(INVALID_PRICE);
    return;
  }
  event.setSignLine(PRICE_LINE,line);
  double buyPrice=PriceUtil.getBuyPrice(line);
  double sellPrice=PriceUtil.getSellPrice(line);
  if (buyPrice == 0 && sellPrice == 0) {
    event.setOutcome(INVALID_PRICE);
  }
}","@EventHandler(priority=EventPriority.LOWEST) public static void onPreShopCreation(PreShopCreationEvent event){
  String line=event.getSignLine(PRICE_LINE).toUpperCase();
  String[] part=line.split(""String_Node_Str"");
  if (isPrice(part[0])) {
    line=""String_Node_Str"" + line;
  }
  if (part.length > 1 && isPrice(part[1])) {
    line+=""String_Node_Str"";
  }
  line=line.replace('b','B').replace('s','S');
  if (line.length() > 15) {
    line=line.replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (line.length() > 15) {
    event.setOutcome(INVALID_PRICE);
    return;
  }
  event.setSignLine(PRICE_LINE,line);
  if (!PriceUtil.hasBuyPrice(line) && !PriceUtil.hasSellPrice(line)) {
    event.setOutcome(INVALID_PRICE);
  }
}",0.9083769633507852
178113,"@EventHandler(priority=EventPriority.LOWEST) public static void onPreShopCreation(PreShopCreationEvent event){
  String itemCode=event.getSignLine(ITEM_LINE);
  ItemStack item=MaterialUtil.getItem(itemCode);
  if (item == null) {
    event.setOutcome(INVALID_ITEM);
    return;
  }
  if (Odd.getFromString(itemCode) != null) {
    return;
  }
  String metadata=getMetadata(itemCode);
  String longName=MaterialUtil.getName(item,LONG_NAME);
  if (longName.length() <= (MAXIMUM_SIGN_LETTERS - metadata.length())) {
    if (isStillValidItem(longName + metadata,item)) {
      String itemName=StringUtil.capitalizeFirstLetter(longName + metadata);
      event.setSignLine(ITEM_LINE,itemName);
      return;
    }
  }
  String code=MaterialUtil.getName(item,SHORT_NAME);
  String[] parts=itemCode.split(""String_Node_Str"",2);
  String data=(parts.length > 1 ? parts[1] : ""String_Node_Str"");
  if (!data.isEmpty() && code.length() >= (MAXIMUM_SIGN_LETTERS - 1 - data.length())) {
    code=code.substring(0,MAXIMUM_SIGN_LETTERS - 1 - data.length()) + data;
  }
  if (!isStillValidItem(code,item)) {
    code=String.valueOf(item.getTypeId()) + data;
  }
  code=StringUtil.capitalizeFirstLetter(code);
  event.setSignLine(ITEM_LINE,code);
}","@EventHandler(priority=EventPriority.LOWEST) public static void onPreShopCreation(PreShopCreationEvent event){
  String itemCode=event.getSignLine(ITEM_LINE);
  ItemStack item=MaterialUtil.getItem(itemCode);
  if (item == null) {
    event.setOutcome(INVALID_ITEM);
    return;
  }
  if (Odd.getFromString(itemCode) != null) {
    return;
  }
  String metadata=getMetadata(itemCode);
  String longName=MaterialUtil.getName(item);
  if (longName.length() <= (MAXIMUM_SIGN_LETTERS - metadata.length())) {
    if (isSameItem(longName + metadata,item)) {
      String itemName=StringUtil.capitalizeFirstLetter(longName + metadata);
      event.setSignLine(ITEM_LINE,itemName);
      return;
    }
  }
  String code=MaterialUtil.getName(item,SHORT_NAME);
  String[] parts=itemCode.split(""String_Node_Str"",2);
  String data=(parts.length > 1 ? parts[1] : ""String_Node_Str"");
  if (!data.isEmpty() && code.length() > (MAXIMUM_SIGN_LETTERS - data.length())) {
    code=code.substring(0,MAXIMUM_SIGN_LETTERS - data.length());
  }
  code+=data;
  if (!isSameItem(code,item)) {
    code=String.valueOf(item.getTypeId()) + data;
  }
  code=StringUtil.capitalizeFirstLetter(code);
  event.setSignLine(ITEM_LINE,code);
}",0.9704433497536946
178114,"/** 
 * Adds an item to the inventory (it currently uses a custom method of adding items, because Bukkit hasn't fixed it for 6 months now)
 * @param item      Item to add
 * @param inventory Inventory
 * @return Number of leftover items
 */
public static int add(ItemStack item,Inventory inventory){
  if (item.getAmount() < 1) {
    return 0;
  }
  int amountLeft=item.getAmount();
  int maxStackSize=item.getMaxStackSize();
  for (int currentSlot=0; currentSlot < inventory.getSize() && amountLeft > 0; currentSlot++) {
    ItemStack currentItem=inventory.getItem(currentSlot);
    ItemStack duplicate=item.clone();
    if (MaterialUtil.isEmpty(currentItem)) {
      duplicate.setAmount(Math.min(amountLeft,maxStackSize));
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
 else     if (currentItem.getAmount() < maxStackSize && MaterialUtil.equals(currentItem,item)) {
      int currentAmount=currentItem.getAmount();
      int neededToAdd=Math.min(maxStackSize - currentAmount,amountLeft);
      duplicate.setAmount(currentAmount + neededToAdd);
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
  }
  return amountLeft;
}","/** 
 * Adds an item to the inventory (it currently uses a custom method of adding items, because Bukkit hasn't fixed it for 6 months now)
 * @param item      Item to add
 * @param inventory Inventory
 * @return Number of leftover items
 */
public static int add(ItemStack item,Inventory inventory){
  if (item.getAmount() < 1) {
    return 0;
  }
  int amountLeft=item.getAmount();
  int maxStackSize=item.getMaxStackSize();
  for (int currentSlot=0; currentSlot < inventory.getSize() && amountLeft > 0; currentSlot++) {
    ItemStack currentItem=inventory.getItem(currentSlot);
    ItemStack duplicate=item.clone();
    if (MaterialUtil.isEmpty(currentItem)) {
      duplicate.setAmount(Math.min(amountLeft,maxStackSize));
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
 else     if (currentItem.getAmount() < maxStackSize && MaterialUtil.equals(currentItem,item)) {
      int currentAmount=currentItem.getAmount();
      int neededToAdd=Math.min(maxStackSize - currentAmount,amountLeft);
      duplicate.setAmount(currentAmount + neededToAdd);
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=neededToAdd;
      inventory.setItem(currentSlot,duplicate);
    }
  }
  return amountLeft;
}",0.959245283018868
178115,"private static boolean canDestroyShop(Player player,String name){
  return player == null || hasShopBreakingPermission(player) || canUseName(player,name);
}","private static boolean canDestroyShop(Player player,String name){
  return player != null && (hasShopBreakingPermission(player) || canUseName(player,name));
}",0.9745222929936306
178116,"/** 
 * Adds an item to the inventory (it currently uses a custom method of adding items, because Bukkit hasn't fixed it for 6 months now)
 * @param item      Item to add
 * @param inventory Inventory
 * @return Number of leftover items
 */
public static int add(ItemStack item,Inventory inventory){
  if (item.getAmount() < 1) {
    return 0;
  }
  int amountLeft=item.getAmount();
  int maxStackSize=item.getMaxStackSize();
  for (int currentSlot=0; currentSlot < inventory.getSize() && amountLeft > 0; currentSlot++) {
    ItemStack currentItem=inventory.getItem(currentSlot);
    ItemStack duplicate=item.clone();
    if (MaterialUtil.isEmpty(currentItem)) {
      duplicate.setAmount(Math.min(duplicate.getAmount(),maxStackSize));
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
 else     if (currentItem.getAmount() < maxStackSize && MaterialUtil.equals(currentItem,item)) {
      int currentAmount=currentItem.getAmount();
      int neededToAdd=Math.min(maxStackSize - currentAmount,amountLeft);
      duplicate.setAmount(currentAmount + neededToAdd);
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
  }
  return amountLeft;
}","/** 
 * Adds an item to the inventory (it currently uses a custom method of adding items, because Bukkit hasn't fixed it for 6 months now)
 * @param item      Item to add
 * @param inventory Inventory
 * @return Number of leftover items
 */
public static int add(ItemStack item,Inventory inventory){
  if (item.getAmount() < 1) {
    return 0;
  }
  int amountLeft=item.getAmount();
  int maxStackSize=item.getMaxStackSize();
  for (int currentSlot=0; currentSlot < inventory.getSize() && amountLeft > 0; currentSlot++) {
    ItemStack currentItem=inventory.getItem(currentSlot);
    ItemStack duplicate=item.clone();
    if (MaterialUtil.isEmpty(currentItem)) {
      duplicate.setAmount(Math.min(amountLeft,maxStackSize));
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
 else     if (currentItem.getAmount() < maxStackSize && MaterialUtil.equals(currentItem,item)) {
      int currentAmount=currentItem.getAmount();
      int neededToAdd=Math.min(maxStackSize - currentAmount,amountLeft);
      duplicate.setAmount(currentAmount + neededToAdd);
      duplicate.addEnchantments(item.getEnchantments());
      amountLeft-=duplicate.getAmount();
      inventory.setItem(currentSlot,duplicate);
    }
  }
  return amountLeft;
}",0.9883938599775364
178117,"@EventHandler public static void onInventoryOpen(InventoryOpenEvent event){
  if (event.getInventory().getType() != InventoryType.CHEST) {
    return;
  }
  if (!Config.getBoolean(TURN_OFF_DEFAULT_PROTECTION_WHEN_PROTECTED_EXTERNALLY)) {
    return;
  }
  HumanEntity entity=event.getPlayer();
  if (!(entity instanceof Player) || (!(event.getInventory().getHolder() instanceof Chest) && !(event.getInventory().getHolder() instanceof DoubleChest))) {
    return;
  }
  Player player=(Player)entity;
  Block chest=((BlockState)event.getInventory().getHolder()).getBlock();
  if (!PlayerInteract.canOpenOtherShops(player) && !ChestShop.canAccess(player,chest)) {
    player.sendMessage(Config.getLocal(ACCESS_DENIED));
    event.setCancelled(true);
  }
}","@EventHandler public static void onInventoryOpen(InventoryOpenEvent event){
  if (event.getInventory().getType() != InventoryType.CHEST) {
    return;
  }
  if (!Properties.TURN_OFF_DEFAULT_PROTECTION_WHEN_PROTECTED_EXTERNALLY) {
    return;
  }
  HumanEntity entity=event.getPlayer();
  if (!(entity instanceof Player) || (!(event.getInventory().getHolder() instanceof Chest) && !(event.getInventory().getHolder() instanceof DoubleChest))) {
    return;
  }
  Player player=(Player)entity;
  Block chest;
  if (event.getInventory().getHolder() instanceof Chest) {
    chest=((BlockState)event.getInventory().getHolder()).getBlock();
  }
 else {
    chest=((DoubleChest)event.getInventory().getHolder()).getLocation().getBlock();
  }
  if (!PlayerInteract.canOpenOtherShops(player) && !ChestShop.canAccess(player,chest)) {
    player.sendMessage(Messages.prefix(Messages.ACCESS_DENIED));
    event.setCancelled(true);
  }
}",0.8585074626865672
178118,"/** 
 * Returns enchantments this itemName contains
 * @param base32 The encoded enchantment
 * @return Enchantments found
 */
public static Map<org.bukkit.enchantments.Enchantment,Integer> getEnchantments(String base32){
  if (base32 == null || base32.isEmpty()) {
    return new HashMap<org.bukkit.enchantments.Enchantment,Integer>();
  }
  Map<org.bukkit.enchantments.Enchantment,Integer> map=new HashMap<org.bukkit.enchantments.Enchantment,Integer>();
  StringBuilder number=new StringBuilder(Long.toString(Long.parseLong(base32,32)));
  while (number.length() % 3 != 0) {
    number.insert(0,'0');
  }
  for (int i=0; i < number.length() / 3; i++) {
    String item=number.substring(i * 3,i * 3 + 3);
    org.bukkit.enchantments.Enchantment enchantment=org.bukkit.enchantments.Enchantment.getById(Integer.parseInt(item.substring(0,2)));
    if (enchantment == null) {
      continue;
    }
    int level=Integer.parseInt(item.substring(2));
    if (level > enchantment.getMaxLevel() || level < enchantment.getStartLevel()) {
      continue;
    }
    map.put(enchantment,level);
  }
  return map;
}","/** 
 * Returns enchantments this itemName contains
 * @param base32 The encoded enchantment
 * @return Enchantments found
 */
public static Map<org.bukkit.enchantments.Enchantment,Integer> getEnchantments(String base32){
  if (base32 == null || base32.isEmpty() || !NumberUtil.isLong(base32)) {
    return new HashMap<org.bukkit.enchantments.Enchantment,Integer>();
  }
  Map<org.bukkit.enchantments.Enchantment,Integer> map=new HashMap<org.bukkit.enchantments.Enchantment,Integer>();
  StringBuilder number=new StringBuilder(Long.toString(Long.parseLong(base32,32)));
  while (number.length() % 3 != 0) {
    number.insert(0,'0');
  }
  for (int i=0; i < number.length() / 3; i++) {
    String item=number.substring(i * 3,i * 3 + 3);
    org.bukkit.enchantments.Enchantment enchantment=org.bukkit.enchantments.Enchantment.getById(Integer.parseInt(item.substring(0,2)));
    if (enchantment == null) {
      continue;
    }
    int level=Integer.parseInt(item.substring(2));
    if (level > enchantment.getMaxLevel() || level < enchantment.getStartLevel()) {
      continue;
    }
    map.put(enchantment,level);
  }
  return map;
}",0.9865831842576028
178119,"@EventHandler public static void onSellItemCheck(PreTransactionEvent event){
  if (event.isCancelled() || event.getTransactionType() != SELL) {
    return;
  }
  ItemStack[] stock=event.getStock();
  Inventory clientInventory=event.getClientInventory();
  if (!Economy.hasEnough(event.getOwner().getName(),event.getPrice())) {
    event.setCancelled(SHOP_DOES_NOT_HAVE_ENOUGH_MONEY);
    return;
  }
  if (!hasItems(clientInventory,stock)) {
    event.setCancelled(NOT_ENOUGH_STOCK_IN_INVENTORY);
  }
}","@EventHandler public static void onSellItemCheck(PreTransactionEvent event){
  if (event.isCancelled() || event.getTransactionType() != SELL) {
    return;
  }
  ItemStack[] stock=event.getStock();
  Inventory clientInventory=event.getClientInventory();
  if (isOwnerEconomicalyActive(event) && !Economy.hasEnough(event.getOwner().getName(),event.getPrice())) {
    event.setCancelled(SHOP_DOES_NOT_HAVE_ENOUGH_MONEY);
    return;
  }
  if (!hasItems(clientInventory,stock)) {
    event.setCancelled(NOT_ENOUGH_STOCK_IN_INVENTORY);
  }
}",0.9663137632338789
178120,"private Language buy(Player player){
  double price=getBuyPrice(sign.getLine(PRICE_LINE));
  if (price == NO_PRICE) {
    return NO_BUYING_HERE;
  }
  if (container == null) {
    return NO_CHEST_DETECTED;
  }
  if (!hasPermission(player,stock.getType(),true)) {
    return NO_PERMISSION;
  }
  String playerName=player.getName();
  String itemName=StringUtil.capitalizeFirstLetter(stock.getType().name());
  double balance=Economy.balance(playerName);
  if (!Economy.hasEnough(playerName,price)) {
    int possiblePartialItemCount=calculateItemAmount(balance,price);
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      return NOT_ENOUGH_MONEY;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  if (!stockFitsPlayer(player)) {
    return NOT_ENOUGH_SPACE_IN_INVENTORY;
  }
  if (!shopHasEnoughItems()) {
    int possiblePartialItemCount=getStockAmount(stock);
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      if (Config.getBoolean(SHOW_MESSAGE_OUT_OF_STOCK)) {
        sendMessageToOwner(Config.getLocal(NOT_ENOUGH_STOCK_IN_YOUR_SHOP).replace(""String_Node_Str"",itemName));
      }
      return NOT_ENOUGH_STOCK;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  Economy.add(getOwnerAccount(),price);
  Economy.subtract(playerName,price);
  container.removeItem(stock);
  InventoryUtil.add(stock,player.getInventory());
  player.updateInventory();
  TransactionEvent event=new TransactionEvent(BUY,container,sign,player,this.owner,stock,price);
  ChestShop.callEvent(event);
  return null;
}","private Language buy(Player player){
  double price=getBuyPrice(sign.getLine(PRICE_LINE));
  if (price == NO_PRICE) {
    return NO_BUYING_HERE;
  }
  if (container == null) {
    return NO_CHEST_DETECTED;
  }
  if (!hasPermission(player,stock.getType(),true)) {
    return NO_PERMISSION;
  }
  String playerName=player.getName();
  String itemName=StringUtil.capitalizeFirstLetter(stock.getType().name());
  double balance=Economy.balance(playerName);
  if (!Economy.hasEnough(playerName,price)) {
    int possiblePartialItemCount=calculateItemAmount(balance,price);
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      return NOT_ENOUGH_MONEY;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  if (!stockFitsPlayer(player)) {
    return NOT_ENOUGH_SPACE_IN_INVENTORY;
  }
  if (!shopHasEnoughItems()) {
    int possiblePartialItemCount=getStockAmount(stock);
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      if (Config.getBoolean(SHOW_MESSAGE_OUT_OF_STOCK)) {
        sendMessageToOwner(Config.getLocal(NOT_ENOUGH_STOCK_IN_YOUR_SHOP).replace(""String_Node_Str"",itemName));
      }
      return NOT_ENOUGH_STOCK;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  Economy.add(getOwnerAccount(),price);
  Economy.subtract(playerName,price);
  container.removeItem(stock.clone());
  InventoryUtil.add(stock.clone(),player.getInventory());
  player.updateInventory();
  TransactionEvent event=new TransactionEvent(BUY,container,sign,player,this.owner,stock,price);
  ChestShop.callEvent(event);
  return null;
}",0.9953569355774812
178121,"private Language sell(Player player){
  double price=getSellPrice(sign.getLine(PRICE_LINE));
  if (container == null) {
    return NO_CHEST_DETECTED;
  }
  if (price == PriceUtil.NO_PRICE) {
    return NO_SELLING_HERE;
  }
  if (!hasPermission(player,stock.getType(),false)) {
    return NO_PERMISSION;
  }
  String ownerAccount=getOwnerAccount();
  if (!Economy.hasEnough(ownerAccount,price)) {
    int possiblePartialItemCount=calculateItemAmount(Economy.balance(ownerAccount),price);
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      return NOT_ENOUGH_MONEY_SHOP;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  if (!playerHasEnoughItems(player)) {
    int possiblePartialItemCount=InventoryUtil.getAmount(stock,player.getInventory());
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      return NOT_ENOUGH_ITEMS_TO_SELL;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  if (!stockFitsChest()) {
    return NOT_ENOUGH_SPACE_IN_CHEST;
  }
  Economy.subtract(ownerAccount,price);
  Economy.add(player.getName(),price);
  container.addItem(stock);
  InventoryUtil.remove(stock,player.getInventory());
  player.updateInventory();
  TransactionEvent event=new TransactionEvent(SELL,container,sign,player,this.owner,stock,price);
  ChestShop.callEvent(event);
  return null;
}","private Language sell(Player player){
  double price=getSellPrice(sign.getLine(PRICE_LINE));
  if (container == null) {
    return NO_CHEST_DETECTED;
  }
  if (price == PriceUtil.NO_PRICE) {
    return NO_SELLING_HERE;
  }
  if (!hasPermission(player,stock.getType(),false)) {
    return NO_PERMISSION;
  }
  String ownerAccount=getOwnerAccount();
  if (!Economy.hasEnough(ownerAccount,price)) {
    int possiblePartialItemCount=calculateItemAmount(Economy.balance(ownerAccount),price);
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      return NOT_ENOUGH_MONEY_SHOP;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  if (!playerHasEnoughItems(player)) {
    int possiblePartialItemCount=InventoryUtil.getAmount(stock,player.getInventory());
    if (!partialTransactionAllowed(possiblePartialItemCount)) {
      return NOT_ENOUGH_ITEMS_TO_SELL;
    }
 else {
      price=(price / stock.getAmount()) * possiblePartialItemCount;
      stock.setAmount(possiblePartialItemCount);
    }
  }
  if (!stockFitsChest()) {
    return NOT_ENOUGH_SPACE_IN_CHEST;
  }
  Economy.subtract(ownerAccount,price);
  Economy.add(player.getName(),price);
  container.addItem(stock.clone());
  InventoryUtil.remove(stock.clone(),player.getInventory());
  player.updateInventory();
  TransactionEvent event=new TransactionEvent(SELL,container,sign,player,this.owner,stock,price);
  ChestShop.callEvent(event);
  return null;
}",0.9946914399469144
178122,"public Shop(Container container,ItemStack stock,Sign sign){
  this.container=container;
  this.owner=sign.getLine(NAME_LINE);
  this.stock=stock;
  this.sign=sign;
}","public Shop(Container container,ItemStack stock,Sign sign){
  this.container=container;
  this.sign=sign;
  this.owner=sign.getLine(NAME_LINE);
  this.stock=stock;
}",0.8909090909090909
178123,"public static void add(String name,double amount){
  if (!hasAccount(name)) {
    return;
  }
  String serverAccount=Config.getString(Property.SERVER_ECONOMY_ACCOUNT);
  Property taxAmount=name.equals(serverAccount) ? Property.SERVER_TAX_AMOUNT : Property.TAX_AMOUNT;
  if (Config.getFloat(taxAmount) != 0) {
    double tax=getTax(taxAmount,amount);
    if (!serverAccount.isEmpty()) {
      economy.add(serverAccount,tax);
    }
    amount-=tax;
  }
  economy.add(uName.getName(name),roundUp(amount));
}","public static void add(String name,double amount){
  Property taxAmount=isServerAccount(name) ? Property.SERVER_TAX_AMOUNT : Property.TAX_AMOUNT;
  double tax=getTax(taxAmount,amount);
  if (tax != 0) {
    if (!serverAccount().isEmpty()) {
      economy.add(serverAccount(),tax);
    }
    amount-=tax;
  }
  if (name.isEmpty())   return;
  economy.add(uName.getName(name),amount);
}",0.6081081081081081
178124,"public static boolean hasEnough(String name,double amount){
  if (!hasAccount(name)) {
    return true;
  }
  return economy.hasEnough(uName.getName(name),roundUp(amount));
}","public static boolean hasEnough(String name,double amount){
  if (isServerAccount(name)) {
    return true;
  }
  return economy.hasEnough(uName.getName(name),roundUp(amount));
}",0.9715909090909092
178125,"public static void subtract(String name,double amount){
  if (!hasAccount(name)) {
    return;
  }
  economy.subtract(uName.getName(name),roundUp(amount));
}","public static void subtract(String name,double amount){
  if (name.isEmpty())   return;
  economy.subtract(uName.getName(name),roundUp(amount));
}",0.9042904290429042
178126,"public static double getTax(Property tax,double price){
  return (Config.getFloat(tax) / 100F) * price;
}","public static double getTax(Property tax,double price){
  return roundDown((Config.getFloat(tax) / 100F) * price);
}",0.9502262443438914
178127,"/** 
 * Has the server owner denied plugin metrics?
 * @return
 */
public boolean isOptOut(){
synchronized (optOutLock) {
    try {
      configuration.load(CONFIG_FILE);
    }
 catch (    IOException ex) {
      Bukkit.getLogger().log(Level.INFO,""String_Node_Str"",ex.getMessage());
      return true;
    }
catch (    InvalidConfigurationException ex) {
      Bukkit.getLogger().log(Level.INFO,""String_Node_Str"",ex.getMessage());
      return true;
    }
    return configuration.getBoolean(""String_Node_Str"",false);
  }
}","/** 
 * Has the server owner denied plugin metrics?
 * @return
 */
public boolean isOptOut(){
synchronized (optOutLock) {
    try {
      configuration.load(CONFIG_FILE);
    }
 catch (    IOException ex) {
      Bukkit.getLogger().log(Level.INFO,""String_Node_Str"" + ex.getMessage());
      return true;
    }
catch (    InvalidConfigurationException ex) {
      Bukkit.getLogger().log(Level.INFO,""String_Node_Str"" + ex.getMessage());
      return true;
    }
    return configuration.getBoolean(""String_Node_Str"",false);
  }
}",0.9923809523809524
178128,"public static boolean cancellingBlockBreak(Block block,Player player){
  if (block == null)   return false;
  if (player != null && (Permission.has(player,Permission.ADMIN) || Permission.has(player,Permission.MOD)))   return false;
  if (uSign.isSign(block))   block.getState().update();
  if (restrictedSign(block))   return !restrictedSign.canDestroy(player,uBlock.findRestrictedSign(block));
  Sign sign=uBlock.findSign(block,(player != null ? uLongName.stripName(player.getName()) : null));
  if (!isCorrectSign(sign,block))   return false;
  if (playerIsNotOwner(player,sign))   return true;
  if (weShouldReturnMoney() && !Permission.has(player,Permission.NOFEE)) {
    float refundPrice=Config.getFloat(Property.SHOP_REFUND_PRICE);
    Economy.add(uLongName.getName(sign.getLine(0)),refundPrice);
    player.sendMessage(Config.getLocal(Language.SHOP_REFUNDED).replace(""String_Node_Str"",Economy.formatBalance(refundPrice)));
  }
  return false;
}","public static boolean cancellingBlockBreak(Block block,Player player){
  if (block == null)   return false;
  if (uSign.isSign(block))   block.getState().update();
  if (restrictedSign(block))   return !restrictedSign.canDestroy(player,uBlock.findRestrictedSign(block));
  Sign sign=uBlock.findSign(block,(player != null ? uLongName.stripName(player.getName()) : null));
  if (!isCorrectSign(sign,block))   return false;
  if (playerIsNotOwner(player,sign))   return !isAdmin(player);
  if (weShouldReturnMoney() && !Permission.has(player,Permission.NOFEE)) {
    float refundPrice=Config.getFloat(Property.SHOP_REFUND_PRICE);
    Economy.add(uLongName.getName(sign.getLine(0)),refundPrice);
    player.sendMessage(Config.getLocal(Language.SHOP_REFUNDED).replace(""String_Node_Str"",Economy.formatBalance(refundPrice)));
  }
  return false;
}",0.7053571428571429
178129,"public boolean protect(String name,Block block){
  if (lwc.findProtection(block) != null)   return false;
  Player player=ChestShop.getBukkitServer().getPlayer(name);
  if (player != null && limitsModule.hasReachedLimit(player,block))   return false;
  lwc.getPhysicalDatabase().registerProtection(block.getTypeId(),com.griefcraft.model.Protection.Type.PUBLIC,block.getWorld().getName(),name,""String_Node_Str"",block.getX(),block.getY(),block.getZ());
  return true;
}","public boolean protect(String name,Block block){
  if (lwc.findProtection(block) != null)   return false;
  Player player=ChestShop.getBukkitServer().getPlayer(name);
  if (player != null && limitsModule.hasReachedLimit(player,block))   return false;
  lwc.getPhysicalDatabase().registerProtection(block.getTypeId(),com.griefcraft.model.Protection.Type.PRIVATE,block.getWorld().getName(),name,""String_Node_Str"",block.getX(),block.getY(),block.getZ());
  return true;
}",0.990374331550802
178130,"public void onPluginEnable(PluginEnableEvent event){
  if (!this.Methods.hasMethod()) {
    if (this.Methods.setMethod(event.getPlugin())) {
      Economy.economy=this.Methods.getMethod();
      System.out.println(""String_Node_Str"" + Economy.economy.getName() + ""String_Node_Str""+ Economy.economy.getVersion()+ ""String_Node_Str"");
    }
  }
  if (Permission.permissions == null) {
    Plugin permissions=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (permissions != null) {
      Permission.permissions=((Permissions)permissions).getHandler();
      PluginDescriptionFile pDesc=permissions.getDescription();
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
  if (LWCplugin.lwc == null) {
    Plugin lwcPlugin=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (lwcPlugin != null) {
      PluginDescriptionFile pDesc=lwcPlugin.getDescription();
      LWCplugin.lwc=((LWCPlugin)lwcPlugin).getLWC();
      Security.protection=new LWCplugin();
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
  if (Odd.oddItem == null) {
    Plugin oddItem=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (oddItem != null) {
      PluginDescriptionFile pDesc=oddItem.getDescription();
      Odd.oddItem=(OddItem)ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
  if (LockettePlugin.lockette == null) {
    Plugin lockette=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (lockette != null) {
      PluginDescriptionFile pDesc=lockette.getDescription();
      LockettePlugin.lockette=((Lockette)lockette);
      Security.protection=new LockettePlugin();
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
}","public void onPluginEnable(PluginEnableEvent event){
  if (!this.methods.hasMethod()) {
    if (methods.setMethod(event.getPlugin())) {
      Economy.economy=methods.getMethod();
      System.out.println(""String_Node_Str"" + Economy.economy.getName() + ""String_Node_Str""+ Economy.economy.getVersion()+ ""String_Node_Str"");
    }
  }
  if (Permission.permissions == null) {
    Plugin permissions=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (permissions != null) {
      Permission.permissions=((Permissions)permissions).getHandler();
      PluginDescriptionFile pDesc=permissions.getDescription();
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
  if (LWCplugin.lwc == null) {
    Plugin lwcPlugin=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (lwcPlugin != null) {
      PluginDescriptionFile pDesc=lwcPlugin.getDescription();
      LWCplugin.lwc=((LWCPlugin)lwcPlugin).getLWC();
      Security.protection=new LWCplugin();
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
  if (Odd.oddItem == null) {
    Plugin oddItem=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (oddItem != null) {
      PluginDescriptionFile pDesc=oddItem.getDescription();
      Odd.oddItem=(OddItem)ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
  if (LockettePlugin.lockette == null) {
    Plugin lockette=ChestShop.getBukkitServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (lockette != null) {
      PluginDescriptionFile pDesc=lockette.getDescription();
      LockettePlugin.lockette=((Lockette)lockette);
      Security.protection=new LockettePlugin();
      System.out.println(""String_Node_Str"" + pDesc.getName() + ""String_Node_Str""+ pDesc.getVersion()+ ""String_Node_Str"");
    }
  }
}",0.9924847346171912
178131,"public boolean setMethod(Plugin method){
  PluginManager manager=method.getServer().getPluginManager();
  if (method != null && method.isEnabled()) {
    Method plugin=MethodFactory.createMethod(method);
    if (plugin != null)     Method=plugin;
  }
 else {
    for (    String name : MethodFactory.getDependencies()) {
      if (hasMethod())       break;
      method=manager.getPlugin(name);
      if (method == null)       continue;
      if (!method.isEnabled())       manager.enablePlugin(method);
      if (!method.isEnabled())       continue;
      Method plugin=MethodFactory.createMethod(method);
      if (plugin != null)       Method=plugin;
    }
  }
  return hasMethod();
}","public boolean setMethod(Plugin method){
  if (hasMethod())   return true;
  PluginManager manager=method.getServer().getPluginManager();
  Plugin plugin=null;
  for (  String name : this.getDependencies()) {
    if (hasMethod())     break;
    if (method.getDescription().getName().equals(name))     plugin=method;
 else     plugin=manager.getPlugin(name);
    if (plugin == null)     continue;
    if (!plugin.isEnabled())     continue;
    Method current=this.createMethod(plugin);
    if (current != null)     this.Method=current;
  }
  return hasMethod();
}",0.2289831865492393
178132,"public boolean hasMethod(){
  return (Method != null);
}","public boolean hasMethod(){
  return (this.Method != null);
}",0.9572649572649572
178133,"public double balance(){
  return (double)this.BOSEconomy.getBankMoney(name);
}","public double balance(){
  return Double.valueOf(this.BOSEconomy.getBankMoney(name));
}",0.9156626506024096
178134,"public boolean isCompatible(Plugin plugin){
  return plugin.getDescription().getName().equalsIgnoreCase(""String_Node_Str"") && plugin instanceof Essentials;
}","public boolean isCompatible(Plugin plugin){
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    return false;
  }
  return plugin.getDescription().getName().equalsIgnoreCase(""String_Node_Str"") && plugin instanceof Essentials;
}",0.7639902676399026
178135,"public boolean isCompatible(Plugin plugin){
  return plugin.getDescription().getName().equalsIgnoreCase(""String_Node_Str"") && plugin instanceof iConomy;
}","public boolean isCompatible(Plugin plugin){
  return plugin.getDescription().getName().equalsIgnoreCase(""String_Node_Str"") && !plugin.getClass().getName().equals(""String_Node_Str"") && plugin instanceof iConomy;
}",0.8415300546448088
178136,"public boolean isCompatible(Plugin plugin){
  return plugin.getDescription().getName().equalsIgnoreCase(""String_Node_Str"") && plugin instanceof iConomy;
}","public boolean isCompatible(Plugin plugin){
  return plugin.getDescription().getName().equalsIgnoreCase(""String_Node_Str"") && plugin.getClass().getName().equals(""String_Node_Str"") && plugin instanceof iConomy;
}",0.8438356164383561
178137,"public boolean hasBank(String bank){
  return (hasBanks()) && this.iConomy.Banks.exists(bank);
}","public boolean hasBank(String bank){
  return (!hasBanks()) ? false : this.iConomy.Banks.exists(bank);
}",0.94
178138,"public boolean hasBankAccount(String bank,String name){
  return (!hasBank(bank)) && this.iConomy.getBank(name).hasAccount(name);
}","public boolean hasBankAccount(String bank,String name){
  return (hasBank(bank)) ? false : this.iConomy.getBank(name).hasAccount(name);
}",0.9552238805970148
178139,"private static boolean isCorrectSign(Sign sign,Block block){
  return sign != null && sign.getBlock() == block || getAttachedFace(sign) == block;
}","private static boolean isCorrectSign(Sign sign,Block block){
  return sign != null && (sign.getBlock() == block || getAttachedFace(sign) == block);
}",0.9932432432432432
178140,"public void onBlockPistonRetract(BlockPistonRetractEvent event){
  if (!uSign.isSign(event.getRetractLocation().getBlock()) && cancellingBlockBreak(event.getRetractLocation().getBlock(),null))   event.setCancelled(true);
}","public void onBlockPistonRetract(BlockPistonRetractEvent event){
  try {
    if (!uSign.isSign(event.getRetractLocation().getBlock()) && cancellingBlockBreak(event.getRetractLocation().getBlock(),null))     event.setCancelled(true);
  }
 catch (  Exception ignored) {
  }
}",0.896969696969697
178141,"private static boolean isCorrectSign(Sign sign,Block block){
  return sign.getBlock() == block || getAttachedFace(sign) == block;
}","private static boolean isCorrectSign(Sign sign,Block block){
  return sign != null && sign.getBlock() == block || getAttachedFace(sign) == block;
}",0.9424460431654677
178142,"public static boolean cancellingBlockBreak(Block block,Player player){
  if (player != null && (Permission.has(player,Permission.ADMIN) || Permission.has(player,Permission.MOD)))   return false;
  if (uSign.isSign(block))   block.getState().update();
  Sign sign=uBlock.findRestrictedSign(block);
  if (sign != null && isCorrectSign(sign,block))   return true;
  sign=uBlock.findSign(block);
  return sign != null && (isCorrectSign(sign,block) && playerIsNotOwner(player,sign));
}","public static boolean cancellingBlockBreak(Block block,Player player){
  if (player != null && (Permission.has(player,Permission.ADMIN) || Permission.has(player,Permission.MOD)))   return false;
  if (uSign.isSign(block))   block.getState().update();
  Sign sign=uBlock.findRestrictedSign(block);
  if (isCorrectSign(sign,block))   return true;
  sign=uBlock.findSign(block);
  return isCorrectSign(sign,block) && playerIsNotOwner(player,sign);
}",0.734341252699784
178143,"public void onPluginEnable(PluginEnableEvent event){
  LinkedList<String> toRemove=new LinkedList();
  if (!methods.hasMethod()) {
    if (methods.setMethod(event.getPlugin())) {
      Economy.economy=methods.getMethod();
      System.out.println(""String_Node_Str"" + Economy.economy.getName() + ' '+ Economy.economy.getVersion()+ ""String_Node_Str"");
    }
  }
  for (  String pluginName : pluginsToLoad) {
    Plugin plugin=ChestShop.getBukkitServer().getPluginManager().getPlugin(pluginName);
    if (plugin == null)     continue;
    initializePlugin(pluginName,plugin);
    toRemove.add(pluginName);
  }
  for (  String pluginName : toRemove)   pluginsToLoad.remove(pluginName);
}","public void onPluginEnable(PluginEnableEvent event){
  LinkedList<String> toRemove=new LinkedList();
  if (!methods.hasMethod()) {
    if (methods.setMethod(event.getPlugin())) {
      Economy.economy=methods.getMethod();
      System.out.println(lineStart + Economy.economy.getName() + ' '+ Economy.economy.getVersion()+ ""String_Node_Str"");
    }
  }
  for (  String pluginName : pluginsToLoad) {
    Plugin plugin=ChestShop.getBukkitServer().getPluginManager().getPlugin(pluginName);
    if (plugin == null)     continue;
    initializePlugin(pluginName,plugin);
    toRemove.add(pluginName);
  }
  for (  String pluginName : toRemove)   pluginsToLoad.remove(pluginName);
}",0.9808541973490428
178144,"public void onSignChange(SignChangeEvent event){
  Block signBlock=event.getBlock();
  String[] line=event.getLines();
  boolean isAlmostReady=uSign.isValidPreparedSign(line);
  Player player=event.getPlayer();
  ItemStack stock=Items.getItemStack(line[3]);
  Material mat=stock == null ? null : stock.getType();
  boolean playerIsAdmin=Permission.has(player,Permission.ADMIN);
  if (isAlmostReady) {
    if (mat == null) {
      player.sendMessage(Config.getLocal(Language.INCORRECT_ITEM_ID));
      dropSign(event);
      return;
    }
    if (!canCreateShop(player,mat.getId())) {
      player.sendMessage(Config.getLocal(Language.YOU_CANNOT_CREATE_SHOP));
      dropSign(event);
      return;
    }
  }
 else {
    if (restrictedSign.isRestricted(event.getLines())) {
      if (!playerIsAdmin) {
        player.sendMessage(Config.getLocal(Language.ACCESS_DENIED));
        dropSign(event);
        return;
      }
      Block secondSign=signBlock.getRelative(BlockFace.DOWN);
      if (!uSign.isSign(secondSign) || !uSign.isValid((Sign)secondSign.getState()))       dropSign(event);
    }
    return;
  }
  if (formatFirstLine(line[0],player))   event.setLine(0,uLongName.stripName(player.getName()));
  String thirdLine=formatThirdLine(line[2]);
  if (thirdLine == null) {
    dropSign(event);
    player.sendMessage(Config.getLocal(Language.YOU_CANNOT_CREATE_SHOP));
    return;
  }
  event.setLine(2,thirdLine);
  String[] split=line[3].split(""String_Node_Str"");
  if (uNumber.isInteger(split[0])) {
    String materialLine=mat.name();
    if (split.length == 2) {
      int maxLength=(15 - split[1].length() - 1);
      if (materialLine.length() > maxLength)       materialLine=materialLine.substring(0,maxLength);
      materialLine=materialLine + ':' + split[1];
    }
    event.setLine(3,materialLine);
  }
  Chest chest=uBlock.findChest(signBlock);
  line=event.getLines();
  boolean isAdminShop=uSign.isAdminShop(line[0]);
  if (!isAdminShop) {
    if (chest == null) {
      player.sendMessage(Config.getLocal(Language.NO_CHEST_DETECTED));
      dropSign(event);
      return;
    }
 else     if (!playerIsAdmin) {
      if (!Security.canPlaceSign(player,signBlock)) {
        player.sendMessage(Config.getLocal(Language.ANOTHER_SHOP_DETECTED));
        dropSign(event);
        return;
      }
      Block chestBlock=chest.getBlock();
      boolean canAccess=!Security.isProtected(chestBlock) || !Security.canAccess(player,chestBlock);
      if (!(Security.protection instanceof Default) && canAccess) {
        Default protection=new Default();
        if (protection.isProtected(chestBlock) && !protection.canAccess(player,chestBlock))         canAccess=false;
      }
      if (!canAccess) {
        player.sendMessage(Config.getLocal(Language.CANNOT_ACCESS_THE_CHEST));
        dropSign(event);
        return;
      }
    }
  }
  float shopCreationPrice=Config.getFloat(Property.SHOP_CREATION_PRICE);
  if (shopCreationPrice != 0 && !isAdminShop) {
    if (!Economy.hasEnough(player.getName(),shopCreationPrice)) {
      player.sendMessage(Config.getLocal(Language.NOT_ENOUGH_MONEY));
      dropSign(event);
      return;
    }
    Economy.substract(player.getName(),shopCreationPrice);
  }
  if (Config.getBoolean(Property.PROTECT_SIGN_WITH_LWC)) {
    Security.protect(player.getName(),signBlock);
  }
  if (Config.getBoolean(Property.PROTECT_CHEST_WITH_LWC) && chest != null && Security.protect(player.getName(),chest.getBlock())) {
    player.sendMessage(Config.getLocal(Language.PROTECTED_SHOP));
  }
  uLongName.saveName(player.getName());
  player.sendMessage(Config.getLocal(Language.SHOP_CREATED));
}","public void onSignChange(SignChangeEvent event){
  Block signBlock=event.getBlock();
  String[] line=event.getLines();
  boolean isAlmostReady=uSign.isValidPreparedSign(line);
  Player player=event.getPlayer();
  ItemStack stock=Items.getItemStack(line[3]);
  Material mat=stock == null ? null : stock.getType();
  boolean playerIsAdmin=Permission.has(player,Permission.ADMIN);
  if (isAlmostReady) {
    if (mat == null) {
      player.sendMessage(Config.getLocal(Language.INCORRECT_ITEM_ID));
      dropSign(event);
      return;
    }
    if (!canCreateShop(player,mat.getId())) {
      player.sendMessage(Config.getLocal(Language.YOU_CANNOT_CREATE_SHOP));
      dropSign(event);
      return;
    }
  }
 else {
    if (restrictedSign.isRestricted(event.getLines())) {
      if (!playerIsAdmin) {
        player.sendMessage(Config.getLocal(Language.ACCESS_DENIED));
        dropSign(event);
        return;
      }
      Block secondSign=signBlock.getRelative(BlockFace.DOWN);
      if (!uSign.isSign(secondSign) || !uSign.isValid((Sign)secondSign.getState()))       dropSign(event);
    }
    return;
  }
  if (formatFirstLine(line[0],player))   event.setLine(0,uLongName.stripName(player.getName()));
  String thirdLine=formatThirdLine(line[2]);
  if (thirdLine == null) {
    dropSign(event);
    player.sendMessage(Config.getLocal(Language.YOU_CANNOT_CREATE_SHOP));
    return;
  }
  event.setLine(2,thirdLine);
  String[] split=line[3].split(""String_Node_Str"");
  if (uNumber.isInteger(split[0])) {
    String materialLine=mat.name();
    if (split.length == 2) {
      int maxLength=(15 - split[1].length() - 1);
      if (materialLine.length() > maxLength)       materialLine=materialLine.substring(0,maxLength);
      materialLine=materialLine + ':' + split[1];
    }
    event.setLine(3,materialLine);
  }
  Chest chest=uBlock.findChest(signBlock);
  line=event.getLines();
  boolean isAdminShop=uSign.isAdminShop(line[0]);
  if (!isAdminShop) {
    if (chest == null) {
      player.sendMessage(Config.getLocal(Language.NO_CHEST_DETECTED));
      dropSign(event);
      return;
    }
 else     if (!playerIsAdmin) {
      if (!Security.canPlaceSign(player,signBlock)) {
        player.sendMessage(Config.getLocal(Language.ANOTHER_SHOP_DETECTED));
        dropSign(event);
        return;
      }
      Block chestBlock=chest.getBlock();
      boolean canAccess=!Security.isProtected(chestBlock) || Security.canAccess(player,chestBlock);
      if (!(Security.protection instanceof Default) && canAccess) {
        Default protection=new Default();
        if (protection.isProtected(chestBlock) && !protection.canAccess(player,chestBlock))         canAccess=false;
      }
      if (!canAccess) {
        player.sendMessage(Config.getLocal(Language.CANNOT_ACCESS_THE_CHEST));
        dropSign(event);
        return;
      }
    }
  }
  float shopCreationPrice=Config.getFloat(Property.SHOP_CREATION_PRICE);
  if (shopCreationPrice != 0 && !isAdminShop) {
    if (!Economy.hasEnough(player.getName(),shopCreationPrice)) {
      player.sendMessage(Config.getLocal(Language.NOT_ENOUGH_MONEY));
      dropSign(event);
      return;
    }
    Economy.substract(player.getName(),shopCreationPrice);
  }
  if (Config.getBoolean(Property.PROTECT_SIGN_WITH_LWC)) {
    Security.protect(player.getName(),signBlock);
  }
  if (Config.getBoolean(Property.PROTECT_CHEST_WITH_LWC) && chest != null && Security.protect(player.getName(),chest.getBlock())) {
    player.sendMessage(Config.getLocal(Language.PROTECTED_SHOP));
  }
  uLongName.saveName(player.getName());
  player.sendMessage(Config.getLocal(Language.SHOP_CREATED));
}",0.9998622020118506
178145,"/** 
 * Constructs a Huffman encoder based on the specified bit output stream.
 * @param in the bit output stream to write to
 * @throws NullPointerException if the output stream is {@code null}
 */
public HuffmanEncoder(BitOutputStream out){
  if (out == null)   throw new NullPointerException();
  output=out;
}","/** 
 * Constructs a Huffman encoder based on the specified bit output stream.
 * @param out the bit output stream to write to
 * @throws NullPointerException if the output stream is {@code null}
 */
public HuffmanEncoder(BitOutputStream out){
  if (out == null)   throw new NullPointerException();
  output=out;
}",0.9920255183413078
178146,"public InvTweaksHandlerSorting(Minecraft mc,InvTweaksConfig config,InvTweaksContainerSection section,int algorithm,int rowSize) throws Exception {
  super(mc);
  if (DEFAULT_LOCK_PRIORITIES == null) {
    DEFAULT_LOCK_PRIORITIES=new int[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_LOCK_PRIORITIES[i]=0;
    }
  }
  if (DEFAULT_FROZEN_SLOTS == null) {
    DEFAULT_FROZEN_SLOTS=new boolean[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_FROZEN_SLOTS[i]=false;
    }
  }
  this.containerMgr=new InvTweaksContainerSectionManager(mc,section);
  this.size=containerMgr.getSize();
  this.sortArmorParts=config.getProperty(InvTweaksConfig.PROP_ENABLE_AUTO_EQUIP_ARMOR).equals(InvTweaksConfig.VALUE_TRUE);
  this.rules=config.getRules();
  this.tree=config.getTree();
  if (section == InvTweaksContainerSection.INVENTORY) {
    this.lockPriorities=config.getLockPriorities();
    this.frozenSlots=config.getFrozenSlots();
    this.algorithm=ALGORITHM_INVENTORY;
  }
 else {
    this.lockPriorities=DEFAULT_LOCK_PRIORITIES;
    this.frozenSlots=DEFAULT_FROZEN_SLOTS;
    this.algorithm=algorithm;
    if (algorithm != ALGORITHM_DEFAULT) {
      computeLineSortingRules(rowSize,algorithm == ALGORITHM_HORIZONTAL);
    }
  }
  this.rulePriority=new int[size];
  this.keywordOrder=new int[size];
  for (int i=0; i < size; i++) {
    this.rulePriority[i]=-1;
    rj stack=containerMgr.getItemStack(i);
    if (stack != null) {
      this.keywordOrder[i]=getItemOrder(stack);
    }
 else {
      this.keywordOrder[i]=-1;
    }
  }
}","public InvTweaksHandlerSorting(Minecraft mc,InvTweaksConfig config,InvTweaksContainerSection section,int algorithm,int rowSize) throws Exception {
  super(mc);
  if (DEFAULT_LOCK_PRIORITIES == null) {
    DEFAULT_LOCK_PRIORITIES=new int[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_LOCK_PRIORITIES[i]=0;
    }
  }
  if (DEFAULT_FROZEN_SLOTS == null) {
    DEFAULT_FROZEN_SLOTS=new boolean[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_FROZEN_SLOTS[i]=false;
    }
  }
  this.containerMgr=new InvTweaksContainerSectionManager(mc,section);
  this.size=containerMgr.getSize();
  this.sortArmorParts=config.getProperty(InvTweaksConfig.PROP_ENABLE_AUTO_EQUIP_ARMOR).equals(InvTweaksConfig.VALUE_TRUE) && !isGuiInventoryCreative(getCurrentScreen());
  this.rules=config.getRules();
  this.tree=config.getTree();
  if (section == InvTweaksContainerSection.INVENTORY) {
    this.lockPriorities=config.getLockPriorities();
    this.frozenSlots=config.getFrozenSlots();
    this.algorithm=ALGORITHM_INVENTORY;
  }
 else {
    this.lockPriorities=DEFAULT_LOCK_PRIORITIES;
    this.frozenSlots=DEFAULT_FROZEN_SLOTS;
    this.algorithm=algorithm;
    if (algorithm != ALGORITHM_DEFAULT) {
      computeLineSortingRules(rowSize,algorithm == ALGORITHM_HORIZONTAL);
    }
  }
  this.rulePriority=new int[size];
  this.keywordOrder=new int[size];
  for (int i=0; i < size; i++) {
    this.rulePriority[i]=-1;
    rj stack=containerMgr.getItemStack(i);
    if (stack != null) {
      this.keywordOrder[i]=getItemOrder(stack);
    }
 else {
      this.keywordOrder[i]=-1;
    }
  }
}",0.9854714064914992
178147,"protected boolean hasTexture(String texture){
  return mc.o.k.e().a(texture) != null;
}","protected boolean hasTexture(String texture){
  ayj texturePacksManager=(ayj)getThroughReflection(avf.class,""String_Node_Str"",mc.o);
  return texturePacksManager != null && texturePacksManager.e().a(texture) != null;
}",0.5180327868852459
178148,"/** 
 * Tries to load mod configuration from file, with error handling. If it fails, the config attribute will remain null.
 * @param config
 */
private boolean loadConfig(){
  try {
    if (!(InvTweaksItemTreeLoader.isValidVersion(InvTweaksConst.CONFIG_TREE_FILE))) {
      backupFile(new File(InvTweaksConst.CONFIG_TREE_FILE),InvTweaksConst.CONFIG_TREE_FILE);
    }
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e.getMessage());
  }
  if (new File(InvTweaksConst.OLDER_CONFIG_RULES_FILE).exists()) {
    if (new File(InvTweaksConst.CONFIG_RULES_FILE).exists()) {
      backupFile(new File(InvTweaksConst.CONFIG_RULES_FILE),InvTweaksConst.CONFIG_RULES_FILE);
    }
    new File(InvTweaksConst.OLDER_CONFIG_RULES_FILE).renameTo(new File(InvTweaksConst.CONFIG_RULES_FILE));
  }
  if (new File(InvTweaksConst.OLDER_CONFIG_TREE_FILE).exists()) {
    backupFile(new File(InvTweaksConst.OLDER_CONFIG_TREE_FILE),InvTweaksConst.CONFIG_TREE_FILE);
  }
  if (new File(InvTweaksConst.OLD_CONFIG_TREE_FILE).exists()) {
    new File(InvTweaksConst.OLD_CONFIG_TREE_FILE).renameTo(new File(InvTweaksConst.CONFIG_TREE_FILE));
  }
  if (!new File(InvTweaksConst.CONFIG_RULES_FILE).exists() && extractFile(InvTweaksConst.DEFAULT_CONFIG_FILE,InvTweaksConst.CONFIG_RULES_FILE)) {
    InvTweaks.logInGameStatic(InvTweaksConst.CONFIG_RULES_FILE + ""String_Node_Str"" + InvTweaksLocalization.get(""String_Node_Str""));
  }
  if (!new File(InvTweaksConst.CONFIG_TREE_FILE).exists() && extractFile(InvTweaksConst.DEFAULT_CONFIG_TREE_FILE,InvTweaksConst.CONFIG_TREE_FILE)) {
    InvTweaks.logInGameStatic(InvTweaksConst.CONFIG_TREE_FILE + ""String_Node_Str"" + InvTweaksLocalization.get(""String_Node_Str""));
  }
  storedConfigLastModified=computeConfigLastModified();
  String error=null;
  try {
    if (config == null) {
      config=new InvTweaksConfig(InvTweaksConst.CONFIG_RULES_FILE,InvTweaksConst.CONFIG_TREE_FILE);
      autoRefillHandler=new InvTweaksHandlerAutoRefill(mc,config);
      shortcutsHandler=new InvTweaksHandlerShortcuts(mc,config);
    }
    config.load();
    shortcutsHandler.loadShortcuts();
    log.setLevel(config.getLogLevel());
    InvTweaks.logInGameStatic(""String_Node_Str"");
    showConfigErrors(config);
  }
 catch (  FileNotFoundException e) {
    error=""String_Node_Str"";
  }
catch (  Exception e) {
    error=""String_Node_Str"" + e.getMessage();
  }
  if (error != null) {
    InvTweaks.logInGameStatic(error);
    log.severe(error);
    config=null;
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Tries to load mod configuration from file, with error handling. If it fails, the config attribute will remain null.
 * @param config
 */
private boolean loadConfig(){
  try {
    if (!(InvTweaksItemTreeLoader.isValidVersion(InvTweaksConst.CONFIG_TREE_FILE))) {
      backupFile(new File(InvTweaksConst.CONFIG_TREE_FILE),InvTweaksConst.CONFIG_TREE_FILE);
    }
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e.getMessage());
  }
  if (new File(InvTweaksConst.OLDER_CONFIG_RULES_FILE).exists()) {
    if (new File(InvTweaksConst.CONFIG_RULES_FILE).exists()) {
      backupFile(new File(InvTweaksConst.CONFIG_RULES_FILE),InvTweaksConst.CONFIG_RULES_FILE);
    }
    new File(InvTweaksConst.OLDER_CONFIG_RULES_FILE).renameTo(new File(InvTweaksConst.CONFIG_RULES_FILE));
  }
  if (new File(InvTweaksConst.OLDER_CONFIG_TREE_FILE).exists()) {
    backupFile(new File(InvTweaksConst.OLDER_CONFIG_TREE_FILE),InvTweaksConst.CONFIG_TREE_FILE);
  }
  if (new File(InvTweaksConst.OLD_CONFIG_TREE_FILE).exists()) {
    new File(InvTweaksConst.OLD_CONFIG_TREE_FILE).renameTo(new File(InvTweaksConst.CONFIG_TREE_FILE));
  }
  if (!new File(InvTweaksConst.CONFIG_RULES_FILE).exists() && extractFile(InvTweaksConst.DEFAULT_CONFIG_FILE,InvTweaksConst.CONFIG_RULES_FILE)) {
    InvTweaks.logInGameStatic(InvTweaksConst.CONFIG_RULES_FILE + ""String_Node_Str"" + InvTweaksLocalization.get(""String_Node_Str""));
  }
  if (!new File(InvTweaksConst.CONFIG_TREE_FILE).exists() && extractFile(InvTweaksConst.DEFAULT_CONFIG_TREE_FILE,InvTweaksConst.CONFIG_TREE_FILE)) {
    InvTweaks.logInGameStatic(InvTweaksConst.CONFIG_TREE_FILE + ""String_Node_Str"" + InvTweaksLocalization.get(""String_Node_Str""));
  }
  storedConfigLastModified=computeConfigLastModified();
  String error=null;
  Exception errorException=null;
  try {
    if (config == null) {
      config=new InvTweaksConfig(InvTweaksConst.CONFIG_RULES_FILE,InvTweaksConst.CONFIG_TREE_FILE);
      autoRefillHandler=new InvTweaksHandlerAutoRefill(mc,config);
      shortcutsHandler=new InvTweaksHandlerShortcuts(mc,config);
    }
    config.load();
    shortcutsHandler.loadShortcuts();
    log.setLevel(config.getLogLevel());
    InvTweaks.logInGameStatic(""String_Node_Str"");
    showConfigErrors(config);
  }
 catch (  FileNotFoundException e) {
    error=""String_Node_Str"";
  }
catch (  Exception e) {
    error=""String_Node_Str"";
    errorException=e;
  }
  if (error != null) {
    InvTweaks.logInGameErrorStatic(error,errorException);
    log.severe(error);
    config=null;
    return false;
  }
 else {
    return true;
  }
}",0.9773082942097028
178149,"public static void init() throws Exception {
  if (instance == null) {
    instance=getMinecraftInstance();
    obf=new InvTweaksObfuscation(instance);
    instance.t=new EntityRendererProxy_InvTweaks(instance);
    mod=new mod_InvTweaks();
    mod.load();
  }
}","public static void init() throws Exception {
  if (instance == null) {
    instance=getMinecraftInstance();
    obf=new InvTweaksObfuscation(instance);
    instance.t=new EntityRendererProxy_InvTweaks(instance);
    mod=new NoModLoader_InvTweaks();
    mod.load();
  }
}",0.9060150375939848
178150,"private void handleGUILayout(apm guiScreen){
  InvTweaksConfig config=cfgManager.getConfig();
  boolean isValidChest=isValidChest(guiScreen);
  if (isValidChest || (isStandardInventory(guiScreen) && !isGuiEnchantmentTable(guiScreen))) {
    aqg guiContainer=asGuiContainer(guiScreen);
    int w=10, h=10;
    boolean customButtonsAdded=false;
    List<Object> controlList=getControlList(guiScreen);
    for (    Object o : controlList) {
      if (isGuiButton(o)) {
        aog button=asGuiButton(o);
        if (getId(button) == InvTweaksConst.JIMEOWAN_ID) {
          customButtonsAdded=true;
          break;
        }
      }
    }
    if (!customButtonsAdded) {
      if (!isValidChest) {
        int offsetX=isGuiContainerCreative(guiContainer) ? 19 : 14, offsetY=isGuiContainerCreative(guiContainer) ? 5 : 4;
        controlList.add(new InvTweaksGuiSettingsButton(cfgManager,InvTweaksConst.JIMEOWAN_ID,getGuiX(guiContainer) + getGuiWidth(guiContainer) - offsetX,getGuiY(guiContainer) + offsetY,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str"")));
      }
 else {
        chestAlgorithmClickTimestamp=0;
        int id=InvTweaksConst.JIMEOWAN_ID, x=getGuiX(guiContainer) + getGuiWidth(guiContainer) - 16, y=getGuiY(guiContainer) + 5;
        boolean isChestWayTooBig=mods.isChestWayTooBig(guiScreen);
        if (isChestWayTooBig && classExists(""String_Node_Str"")) {
          if (isNotEnoughItemsEnabled()) {
            x=getGuiX(guiContainer) + getGuiWidth(guiContainer) - 35;
            y+=50;
          }
        }
        controlList.add(new InvTweaksGuiSettingsButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 1,(isChestWayTooBig) ? y - 3 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str"")));
        if (!config.getProperty(InvTweaksConfig.PROP_SHOW_CHEST_BUTTONS).equals(""String_Node_Str"")) {
          int rowSize=getContainerRowSize(guiContainer);
          InvTweaksObfuscationGuiButton button=new InvTweaksGuiSortingButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 13,(isChestWayTooBig) ? y + 12 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str""),InvTweaksHandlerSorting.ALGORITHM_HORIZONTAL,rowSize);
          controlList.add(button);
          button=new InvTweaksGuiSortingButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 25,(isChestWayTooBig) ? y + 25 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str""),InvTweaksHandlerSorting.ALGORITHM_VERTICAL,rowSize);
          controlList.add(button);
          button=new InvTweaksGuiSortingButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 37,(isChestWayTooBig) ? y + 38 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str""),InvTweaksHandlerSorting.ALGORITHM_DEFAULT,rowSize);
          controlList.add(button);
        }
      }
    }
  }
}","private void handleGUILayout(apm guiScreen){
  InvTweaksConfig config=cfgManager.getConfig();
  boolean isValidChest=isValidChest(guiScreen);
  if (isValidChest || (isStandardInventory(guiScreen) && !isGuiEnchantmentTable(guiScreen))) {
    aqg guiContainer=asGuiContainer(guiScreen);
    int w=10, h=10;
    boolean customButtonsAdded=false;
    List<Object> controlList=getControlList(guiScreen);
    for (    Object o : controlList) {
      if (isGuiButton(o)) {
        aog button=asGuiButton(o);
        if (getId(button) == InvTweaksConst.JIMEOWAN_ID) {
          customButtonsAdded=true;
          break;
        }
      }
    }
    if (!customButtonsAdded) {
      if (!isValidChest) {
        controlList.add(new InvTweaksGuiSettingsButton(cfgManager,InvTweaksConst.JIMEOWAN_ID,getGuiX(guiContainer) + getGuiWidth(guiContainer) - 15,getGuiY(guiContainer) + 5,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str"")));
      }
 else {
        chestAlgorithmClickTimestamp=0;
        int id=InvTweaksConst.JIMEOWAN_ID, x=getGuiX(guiContainer) + getGuiWidth(guiContainer) - 16, y=getGuiY(guiContainer) + 5;
        boolean isChestWayTooBig=mods.isChestWayTooBig(guiScreen);
        if (isChestWayTooBig && classExists(""String_Node_Str"")) {
          if (isNotEnoughItemsEnabled()) {
            x=getGuiX(guiContainer) + getGuiWidth(guiContainer) - 35;
            y+=50;
          }
        }
        controlList.add(new InvTweaksGuiSettingsButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 1,(isChestWayTooBig) ? y - 3 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str"")));
        if (!config.getProperty(InvTweaksConfig.PROP_SHOW_CHEST_BUTTONS).equals(""String_Node_Str"")) {
          int rowSize=getContainerRowSize(guiContainer);
          InvTweaksObfuscationGuiButton button=new InvTweaksGuiSortingButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 13,(isChestWayTooBig) ? y + 12 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str""),InvTweaksHandlerSorting.ALGORITHM_HORIZONTAL,rowSize);
          controlList.add(button);
          button=new InvTweaksGuiSortingButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 25,(isChestWayTooBig) ? y + 25 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str""),InvTweaksHandlerSorting.ALGORITHM_VERTICAL,rowSize);
          controlList.add(button);
          button=new InvTweaksGuiSortingButton(cfgManager,id++,(isChestWayTooBig) ? x + 22 : x - 37,(isChestWayTooBig) ? y + 38 : y,w,h,""String_Node_Str"",InvTweaksLocalization.get(""String_Node_Str""),InvTweaksHandlerSorting.ALGORITHM_DEFAULT,rowSize);
          controlList.add(button);
        }
      }
    }
  }
 else {
    if (isGuiContainerCreative(guiScreen)) {
      List<Object> controlList=getControlList(guiScreen);
      aog buttonToRemove=null;
      for (      Object o : controlList) {
        if (isGuiButton(o)) {
          if (getId(asGuiButton(o)) == InvTweaksConst.JIMEOWAN_ID) {
            buttonToRemove=asGuiButton(o);
            break;
          }
        }
      }
      if (buttonToRemove != null) {
        controlList.remove(buttonToRemove);
      }
    }
  }
}",0.8979184013322231
178151,"public void a(Minecraft minecraft,int i,int j){
  super.a(minecraft,i,j);
  if (!isEnabled2()) {
    return;
  }
  GL11.glBindTexture(3553,getTexture(minecraft,""String_Node_Str""));
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  int k=getHoverState(isMouseOverButton(i,j));
  drawTexturedModalRect(getXPosition(),getYPosition(),1,46 + k * 20 + 1,getWidth() / 2,getHeight() / 2);
  drawTexturedModalRect(getXPosition(),getYPosition() + getHeight() / 2,1,46 + k * 20 + 20 - getHeight() / 2 - 1,getWidth() / 2,getHeight() / 2);
  drawTexturedModalRect(getXPosition() + getWidth() / 2,getYPosition(),200 - getWidth() / 2 - 1,46 + k * 20 + 1,getWidth() / 2,getHeight() / 2);
  drawTexturedModalRect(getXPosition() + getWidth() / 2,getYPosition() + getHeight() / 2,200 - getWidth() / 2 - 1,46 + k * 20 + 19 - getHeight() / 2,getWidth() / 2,getHeight() / 2);
}","public void a(Minecraft minecraft,int i,int j){
  super.a(minecraft,i,j);
  if (!isEnabled2()) {
    return;
  }
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glBindTexture(3553,getTexture(minecraft,""String_Node_Str""));
  int k=getHoverState(isMouseOverButton(i,j));
  drawTexturedModalRect(getXPosition(),getYPosition(),1,46 + k * 20 + 1,getWidth() / 2,getHeight() / 2);
  drawTexturedModalRect(getXPosition(),getYPosition() + getHeight() / 2,1,46 + k * 20 + 20 - getHeight() / 2 - 1,getWidth() / 2,getHeight() / 2);
  drawTexturedModalRect(getXPosition() + getWidth() / 2,getYPosition(),200 - getWidth() / 2 - 1,46 + k * 20 + 1,getWidth() / 2,getHeight() / 2);
  drawTexturedModalRect(getXPosition() + getWidth() / 2,getYPosition() + getHeight() / 2,200 - getWidth() / 2 - 1,46 + k * 20 + 19 - getHeight() / 2,getWidth() / 2,getHeight() / 2);
}",0.953900709219858
178152,"public void sort() throws TimeoutException {
  long timer=System.nanoTime();
  InvTweaksContainerManager globalContainer=new InvTweaksContainerManager(mc);
  if (algorithm != ALGORITHM_DEFAULT) {
    if (algorithm == ALGORITHM_INVENTORY) {
      log.info(""String_Node_Str"");
      if (globalContainer.hasSection(InvTweaksContainerSection.CRAFTING_IN)) {
        List<yu> craftingSlots=globalContainer.getSlots(InvTweaksContainerSection.CRAFTING_IN);
        int emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
        if (emptyIndex != -1) {
          for (          yu craftingSlot : craftingSlots) {
            if (hasStack(craftingSlot)) {
              globalContainer.move(InvTweaksContainerSection.CRAFTING_IN,globalContainer.getSlotIndex(getSlotNumber(craftingSlot)),InvTweaksContainerSection.INVENTORY,emptyIndex);
              emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
              if (emptyIndex == -1) {
                break;
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"");
      for (int i=size - 1; i >= 0; i--) {
        aan from=containerMgr.getItemStack(i);
        if (from != null) {
          yr fromItem=getItem(from);
          if (isDamageable(fromItem)) {
            if (sortArmorParts) {
              if (isItemArmor(fromItem)) {
                ql fromItemArmor=(ql)fromItem;
                if (globalContainer.hasSection(InvTweaksContainerSection.ARMOR)) {
                  List<yu> armorSlots=globalContainer.getSlots(InvTweaksContainerSection.ARMOR);
                  for (                  yu slot : armorSlots) {
                    boolean move=false;
                    if (!hasStack(slot)) {
                      move=true;
                    }
 else {
                      int armorLevel=getArmorLevel((ql)getItem(getStack(slot)));
                      if (armorLevel < getArmorLevel(fromItemArmor) || (armorLevel == getArmorLevel(fromItemArmor) && getItemDamage(getStack(slot)) < getItemDamage(from))) {
                        move=true;
                      }
                    }
                    if (isItemValid(slot,from) && move) {
                      globalContainer.move(InvTweaksContainerSection.INVENTORY,i,InvTweaksContainerSection.ARMOR,globalContainer.getSlotIndex(getSlotNumber(slot)));
                    }
                  }
                }
              }
            }
          }
 else {
            int j=0;
            for (            Integer lockPriority : lockPriorities) {
              if (lockPriority > 0) {
                aan to=containerMgr.getItemStack(j);
                if (to != null && areItemsEqual(from,to)) {
                  move(i,j,Integer.MAX_VALUE);
                  markAsNotMoved(j);
                  if (containerMgr.getItemStack(i) == null) {
                    break;
                  }
                }
              }
              j++;
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    Iterator<InvTweaksConfigSortingRule> rulesIt=rules.iterator();
    while (rulesIt.hasNext()) {
      InvTweaksConfigSortingRule rule=rulesIt.next();
      int rulePriority=rule.getPriority();
      if (log.getLevel() == InvTweaksConst.DEBUG)       log.info(""String_Node_Str"" + rule.getKeyword() + ""String_Node_Str""+ rulePriority+ ""String_Node_Str"");
      for (int i=0; i < size; i++) {
        aan from=containerMgr.getItemStack(i);
        if (hasToBeMoved(i) && lockPriorities[i] < rulePriority) {
          List<InvTweaksItemTreeItem> fromItems=tree.getItems(getItemID(from),getItemDamage(from));
          if (tree.matches(fromItems,rule.getKeyword())) {
            int[] preferredSlots=rule.getPreferredSlots();
            int stackToMove=i;
            for (int j=0; j < preferredSlots.length; j++) {
              int k=preferredSlots[j];
              int moveResult=move(stackToMove,k,rulePriority);
              if (moveResult != -1) {
                if (moveResult == k) {
                  break;
                }
 else {
                  from=containerMgr.getItemStack(moveResult);
                  fromItems=tree.getItems(getItemID(from),getItemDamage(from));
                  if (!tree.matches(fromItems,rule.getKeyword())) {
                    break;
                  }
 else {
                    stackToMove=moveResult;
                    j=-1;
                  }
                }
              }
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    for (int i=0; i < size; i++) {
      if (hasToBeMoved(i) && lockPriorities[i] > 0) {
        markAsMoved(i,1);
      }
    }
  }
  defaultSorting();
  if (log.getLevel() == InvTweaksConst.DEBUG) {
    timer=System.nanoTime() - timer;
    log.info(""String_Node_Str"" + timer + ""String_Node_Str"");
  }
}","public void sort() throws TimeoutException {
  long timer=System.nanoTime();
  InvTweaksContainerManager globalContainer=new InvTweaksContainerManager(mc);
  if (getHoldStack() != null) {
    int emptySlot=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
    if (emptySlot != -1) {
      globalContainer.putHoldItemDown(InvTweaksContainerSection.INVENTORY,emptySlot);
    }
 else {
      return;
    }
  }
  if (algorithm != ALGORITHM_DEFAULT) {
    if (algorithm == ALGORITHM_INVENTORY) {
      log.info(""String_Node_Str"");
      if (globalContainer.hasSection(InvTweaksContainerSection.CRAFTING_IN)) {
        List<yu> craftingSlots=globalContainer.getSlots(InvTweaksContainerSection.CRAFTING_IN);
        int emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
        if (emptyIndex != -1) {
          for (          yu craftingSlot : craftingSlots) {
            if (hasStack(craftingSlot)) {
              globalContainer.move(InvTweaksContainerSection.CRAFTING_IN,globalContainer.getSlotIndex(getSlotNumber(craftingSlot)),InvTweaksContainerSection.INVENTORY,emptyIndex);
              emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
              if (emptyIndex == -1) {
                break;
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"");
      for (int i=size - 1; i >= 0; i--) {
        aan from=containerMgr.getItemStack(i);
        if (from != null) {
          yr fromItem=getItem(from);
          if (isDamageable(fromItem)) {
            if (sortArmorParts) {
              if (isItemArmor(fromItem)) {
                ql fromItemArmor=(ql)fromItem;
                if (globalContainer.hasSection(InvTweaksContainerSection.ARMOR)) {
                  List<yu> armorSlots=globalContainer.getSlots(InvTweaksContainerSection.ARMOR);
                  for (                  yu slot : armorSlots) {
                    boolean move=false;
                    if (!hasStack(slot)) {
                      move=true;
                    }
 else {
                      int armorLevel=getArmorLevel((ql)getItem(getStack(slot)));
                      if (armorLevel < getArmorLevel(fromItemArmor) || (armorLevel == getArmorLevel(fromItemArmor) && getItemDamage(getStack(slot)) < getItemDamage(from))) {
                        move=true;
                      }
                    }
                    if (isItemValid(slot,from) && move) {
                      globalContainer.move(InvTweaksContainerSection.INVENTORY,i,InvTweaksContainerSection.ARMOR,globalContainer.getSlotIndex(getSlotNumber(slot)));
                    }
                  }
                }
              }
            }
          }
 else {
            int j=0;
            for (            Integer lockPriority : lockPriorities) {
              if (lockPriority > 0) {
                aan to=containerMgr.getItemStack(j);
                if (to != null && areItemsEqual(from,to)) {
                  move(i,j,Integer.MAX_VALUE);
                  markAsNotMoved(j);
                  if (containerMgr.getItemStack(i) == null) {
                    break;
                  }
                }
              }
              j++;
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    Iterator<InvTweaksConfigSortingRule> rulesIt=rules.iterator();
    while (rulesIt.hasNext()) {
      InvTweaksConfigSortingRule rule=rulesIt.next();
      int rulePriority=rule.getPriority();
      if (log.getLevel() == InvTweaksConst.DEBUG)       log.info(""String_Node_Str"" + rule.getKeyword() + ""String_Node_Str""+ rulePriority+ ""String_Node_Str"");
      for (int i=0; i < size; i++) {
        aan from=containerMgr.getItemStack(i);
        if (hasToBeMoved(i) && lockPriorities[i] < rulePriority) {
          List<InvTweaksItemTreeItem> fromItems=tree.getItems(getItemID(from),getItemDamage(from));
          if (tree.matches(fromItems,rule.getKeyword())) {
            int[] preferredSlots=rule.getPreferredSlots();
            int stackToMove=i;
            for (int j=0; j < preferredSlots.length; j++) {
              int k=preferredSlots[j];
              int moveResult=move(stackToMove,k,rulePriority);
              if (moveResult != -1) {
                if (moveResult == k) {
                  break;
                }
 else {
                  from=containerMgr.getItemStack(moveResult);
                  fromItems=tree.getItems(getItemID(from),getItemDamage(from));
                  if (!tree.matches(fromItems,rule.getKeyword())) {
                    break;
                  }
 else {
                    stackToMove=moveResult;
                    j=-1;
                  }
                }
              }
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    for (int i=0; i < size; i++) {
      if (hasToBeMoved(i) && lockPriorities[i] > 0) {
        markAsMoved(i,1);
      }
    }
  }
  defaultSorting();
  if (log.getLevel() == InvTweaksConst.DEBUG) {
    timer=System.nanoTime() - timer;
    log.info(""String_Node_Str"" + timer + ""String_Node_Str"");
  }
}",0.9727091633466136
178153,"private void move(boolean separateStacks,boolean drop) throws Exception {
  int toIndex=-1, newIndex;
synchronized (this) {
    if (shortcutType == ShortcutType.MOVE_TO_SPECIFIC_HOTBAR_SLOT) {
      InvTweaksShortcutMapping hotbarShortcut=isActive(ShortcutType.MOVE_TO_SPECIFIC_HOTBAR_SLOT);
      if (hotbarShortcut != null && !hotbarShortcut.getKeyCodes().isEmpty()) {
        String keyName=Keyboard.getKeyName(hotbarShortcut.getKeyCodes().get(0));
        int destIndex=-1 + Integer.parseInt(keyName.replace(""String_Node_Str"",""String_Node_Str""));
        container.move(fromSection,fromIndex,InvTweaksContainerSection.INVENTORY_HOTBAR,destIndex);
      }
    }
 else {
      toIndex=getNextIndex(separateStacks,drop);
      if (toIndex != -1) {
switch (shortcutType) {
case MOVE_ONE_STACK:
{
            yu slot=container.getSlot(fromSection,fromIndex);
            if (fromSection != InvTweaksContainerSection.CRAFTING_OUT && toSection != InvTweaksContainerSection.ENCHANTMENT) {
              while (hasStack(slot) && toIndex != -1) {
                container.move(fromSection,fromIndex,toSection,toIndex);
                newIndex=getNextIndex(separateStacks,drop);
                toIndex=(newIndex != toIndex) ? newIndex : -1;
              }
            }
 else {
              container.move(fromSection,fromIndex,toSection,toIndex);
            }
            break;
          }
case MOVE_ONE_ITEM:
{
          container.moveSome(fromSection,fromIndex,toSection,toIndex,1);
          break;
        }
case MOVE_ALL_ITEMS:
{
        aan stackToMatch=copy(fromStack);
        moveAll(fromSection,toSection,separateStacks,drop,stackToMatch);
        if (fromSection == InvTweaksContainerSection.INVENTORY_NOT_HOTBAR && toSection == InvTweaksContainerSection.CHEST) {
          moveAll(InvTweaksContainerSection.INVENTORY_HOTBAR,toSection,separateStacks,drop,stackToMatch);
        }
        break;
      }
case MOVE_EVERYTHING:
{
      moveAll(fromSection,toSection,separateStacks,drop,null);
      if (fromSection == InvTweaksContainerSection.INVENTORY_HOTBAR && toSection == InvTweaksContainerSection.CHEST) {
        moveAll(InvTweaksContainerSection.INVENTORY_NOT_HOTBAR,toSection,separateStacks,drop,null);
      }
      break;
    }
}
}
}
}
}","private void move(boolean separateStacks,boolean drop) throws Exception {
  int toIndex=-1, newIndex;
  boolean success;
synchronized (this) {
    if (shortcutType == ShortcutType.MOVE_TO_SPECIFIC_HOTBAR_SLOT) {
      InvTweaksShortcutMapping hotbarShortcut=isActive(ShortcutType.MOVE_TO_SPECIFIC_HOTBAR_SLOT);
      if (hotbarShortcut != null && !hotbarShortcut.getKeyCodes().isEmpty()) {
        String keyName=Keyboard.getKeyName(hotbarShortcut.getKeyCodes().get(0));
        int destIndex=-1 + Integer.parseInt(keyName.replace(""String_Node_Str"",""String_Node_Str""));
        container.move(fromSection,fromIndex,InvTweaksContainerSection.INVENTORY_HOTBAR,destIndex);
      }
    }
 else {
      toIndex=getNextIndex(separateStacks,drop);
      if (toIndex != -1) {
switch (shortcutType) {
case MOVE_ONE_STACK:
{
            yu slot=container.getSlot(fromSection,fromIndex);
            if (fromSection != InvTweaksContainerSection.CRAFTING_OUT && toSection != InvTweaksContainerSection.ENCHANTMENT) {
              while (hasStack(slot) && toIndex != -1) {
                success=container.move(fromSection,fromIndex,toSection,toIndex);
                newIndex=getNextIndex(separateStacks,drop);
                toIndex=(success || newIndex != toIndex) ? newIndex : -1;
              }
            }
 else {
              container.move(fromSection,fromIndex,toSection,toIndex);
            }
            break;
          }
case MOVE_ONE_ITEM:
{
          container.moveSome(fromSection,fromIndex,toSection,toIndex,1);
          break;
        }
case MOVE_ALL_ITEMS:
{
        aan stackToMatch=copy(fromStack);
        moveAll(fromSection,toSection,separateStacks,drop,stackToMatch);
        if (fromSection == InvTweaksContainerSection.INVENTORY_NOT_HOTBAR && toSection == InvTweaksContainerSection.CHEST) {
          moveAll(InvTweaksContainerSection.INVENTORY_HOTBAR,toSection,separateStacks,drop,stackToMatch);
        }
        break;
      }
case MOVE_EVERYTHING:
{
      moveAll(fromSection,toSection,separateStacks,drop,null);
      if (fromSection == InvTweaksContainerSection.INVENTORY_HOTBAR && toSection == InvTweaksContainerSection.CHEST) {
        moveAll(InvTweaksContainerSection.INVENTORY_NOT_HOTBAR,toSection,separateStacks,drop,null);
      }
      break;
    }
}
}
}
}
}",0.9916520210896308
178154,"private void moveAll(InvTweaksContainerSection fromSection,InvTweaksContainerSection toSection,boolean separateStacks,boolean drop,aan stackToMatch) throws TimeoutException {
  int toIndex=getNextIndex(separateStacks,drop), newIndex;
  for (  yu slot : container.getSlots(fromSection)) {
    if (hasStack(slot) && (stackToMatch == null || areSameItemType(stackToMatch,getStack(slot)))) {
      int fromIndex=container.getSlotIndex(getSlotNumber(slot));
      while (hasStack(slot) && toIndex != -1 && !(fromSection == toSection && fromIndex == toIndex)) {
        container.move(fromSection,fromIndex,toSection,toIndex);
        newIndex=getNextIndex(separateStacks,drop);
        toIndex=(newIndex != toIndex) ? newIndex : -1;
      }
    }
    if (toIndex == -1) {
      break;
    }
  }
}","private void moveAll(InvTweaksContainerSection fromSection,InvTweaksContainerSection toSection,boolean separateStacks,boolean drop,aan stackToMatch) throws TimeoutException {
  int toIndex=getNextIndex(separateStacks,drop), newIndex;
  boolean success;
  for (  yu slot : container.getSlots(fromSection)) {
    if (hasStack(slot) && (stackToMatch == null || areSameItemType(stackToMatch,getStack(slot)))) {
      int fromIndex=container.getSlotIndex(getSlotNumber(slot));
      while (hasStack(slot) && toIndex != -1 && !(fromSection == toSection && fromIndex == toIndex)) {
        success=container.move(fromSection,fromIndex,toSection,toIndex);
        newIndex=getNextIndex(separateStacks,drop);
        toIndex=(success || newIndex != toIndex) ? newIndex : -1;
      }
    }
    if (toIndex == -1) {
      break;
    }
  }
}",0.9765432098765432
178155,"private int getFirstEmptyUsableSlotNumber(){
  for (  InvTweaksContainerSection section : slotRefs.keySet()) {
    for (    yp slot : slotRefs.get(section)) {
      if (isSlot(slot) && !hasStack(slot)) {
        return getSlotNumber(slot);
      }
    }
  }
  return -1;
}","private int getFirstEmptyUsableSlotNumber(){
  for (  InvTweaksContainerSection section : slotRefs.keySet()) {
    for (    yp slot : slotRefs.get(section)) {
      if (isBasicSlot(slot) && !hasStack(slot)) {
        return getSlotNumber(slot);
      }
    }
  }
  return -1;
}",0.9908925318761383
178156,"public void sort() throws TimeoutException {
  long timer=System.nanoTime();
  InvTweaksContainerManager globalContainer=new InvTweaksContainerManager(mc);
  if (isMultiplayerWorld()) {
    putHoldItemDown();
  }
  if (algorithm != ALGORITHM_DEFAULT) {
    if (algorithm == ALGORITHM_INVENTORY) {
      log.info(""String_Node_Str"");
      if (globalContainer.hasSection(InvTweaksContainerSection.CRAFTING_IN)) {
        List<yp> craftingSlots=globalContainer.getSlots(InvTweaksContainerSection.CRAFTING_IN);
        int emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
        if (emptyIndex != -1) {
          for (          yp craftingSlot : craftingSlots) {
            if (hasStack(craftingSlot)) {
              globalContainer.move(InvTweaksContainerSection.CRAFTING_IN,globalContainer.getSlotIndex(getSlotNumber(craftingSlot)),InvTweaksContainerSection.INVENTORY,emptyIndex);
              emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
              if (emptyIndex == -1) {
                break;
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"");
      for (int i=size - 1; i >= 0; i--) {
        aai from=containerMgr.getItemStack(i);
        if (from != null) {
          ym fromItem=getItem(from);
          if (isDamageable(fromItem)) {
            if (sortArmorParts) {
              if (isItemArmor(fromItem)) {
                qh fromItemArmor=(qh)fromItem;
                if (globalContainer.hasSection(InvTweaksContainerSection.ARMOR)) {
                  List<yp> armorSlots=globalContainer.getSlots(InvTweaksContainerSection.ARMOR);
                  for (                  yp slot : armorSlots) {
                    if (isItemValid(slot,from) && (!hasStack(slot) || getArmorLevel(fromItemArmor) > getArmorLevel(((qh)getItem(getStack(slot)))))) {
                      globalContainer.move(InvTweaksContainerSection.INVENTORY,i,InvTweaksContainerSection.ARMOR,globalContainer.getSlotIndex(getSlotNumber(slot)));
                    }
                  }
                }
              }
            }
          }
 else {
            int j=0;
            for (            Integer lockPriority : lockPriorities) {
              if (lockPriority > 0) {
                aai to=containerMgr.getItemStack(j);
                if (to != null && areItemsEqual(from,to)) {
                  move(i,j,Integer.MAX_VALUE);
                  markAsNotMoved(j);
                  if (containerMgr.getItemStack(i) == null) {
                    break;
                  }
                }
              }
              j++;
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    Iterator<InvTweaksConfigSortingRule> rulesIt=rules.iterator();
    while (rulesIt.hasNext()) {
      InvTweaksConfigSortingRule rule=rulesIt.next();
      int rulePriority=rule.getPriority();
      if (log.getLevel() == InvTweaksConst.DEBUG)       log.info(""String_Node_Str"" + rule.getKeyword() + ""String_Node_Str""+ rulePriority+ ""String_Node_Str"");
      for (int i=0; i < size; i++) {
        aai from=containerMgr.getItemStack(i);
        if (hasToBeMoved(i) && lockPriorities[i] < rulePriority) {
          List<InvTweaksItemTreeItem> fromItems=tree.getItems(getItemID(from),getItemDamage(from));
          if (tree.matches(fromItems,rule.getKeyword())) {
            int[] preferredSlots=rule.getPreferredSlots();
            int stackToMove=i;
            for (int j=0; j < preferredSlots.length; j++) {
              int k=preferredSlots[j];
              int moveResult=move(stackToMove,k,rulePriority);
              if (moveResult != -1) {
                if (moveResult == k) {
                  break;
                }
 else {
                  from=containerMgr.getItemStack(moveResult);
                  fromItems=tree.getItems(getItemID(from),getItemDamage(from));
                  if (!tree.matches(fromItems,rule.getKeyword())) {
                    break;
                  }
 else {
                    stackToMove=moveResult;
                    j=-1;
                  }
                }
              }
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    for (int i=0; i < size; i++) {
      if (hasToBeMoved(i) && lockPriorities[i] > 0) {
        markAsMoved(i,1);
      }
    }
  }
  defaultSorting();
  if (log.getLevel() == InvTweaksConst.DEBUG) {
    timer=System.nanoTime() - timer;
    log.info(""String_Node_Str"" + timer + ""String_Node_Str"");
  }
}","public void sort() throws TimeoutException {
  long timer=System.nanoTime();
  InvTweaksContainerManager globalContainer=new InvTweaksContainerManager(mc);
  if (algorithm != ALGORITHM_DEFAULT) {
    if (algorithm == ALGORITHM_INVENTORY) {
      log.info(""String_Node_Str"");
      if (globalContainer.hasSection(InvTweaksContainerSection.CRAFTING_IN)) {
        List<yp> craftingSlots=globalContainer.getSlots(InvTweaksContainerSection.CRAFTING_IN);
        int emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
        if (emptyIndex != -1) {
          for (          yp craftingSlot : craftingSlots) {
            if (hasStack(craftingSlot)) {
              globalContainer.move(InvTweaksContainerSection.CRAFTING_IN,globalContainer.getSlotIndex(getSlotNumber(craftingSlot)),InvTweaksContainerSection.INVENTORY,emptyIndex);
              emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
              if (emptyIndex == -1) {
                break;
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"");
      for (int i=size - 1; i >= 0; i--) {
        aai from=containerMgr.getItemStack(i);
        if (from != null) {
          ym fromItem=getItem(from);
          if (isDamageable(fromItem)) {
            if (sortArmorParts) {
              if (isItemArmor(fromItem)) {
                qh fromItemArmor=(qh)fromItem;
                if (globalContainer.hasSection(InvTweaksContainerSection.ARMOR)) {
                  List<yp> armorSlots=globalContainer.getSlots(InvTweaksContainerSection.ARMOR);
                  for (                  yp slot : armorSlots) {
                    if (isItemValid(slot,from) && (!hasStack(slot) || getArmorLevel(fromItemArmor) > getArmorLevel(((qh)getItem(getStack(slot)))))) {
                      globalContainer.move(InvTweaksContainerSection.INVENTORY,i,InvTweaksContainerSection.ARMOR,globalContainer.getSlotIndex(getSlotNumber(slot)));
                    }
                  }
                }
              }
            }
          }
 else {
            int j=0;
            for (            Integer lockPriority : lockPriorities) {
              if (lockPriority > 0) {
                aai to=containerMgr.getItemStack(j);
                if (to != null && areItemsEqual(from,to)) {
                  move(i,j,Integer.MAX_VALUE);
                  markAsNotMoved(j);
                  if (containerMgr.getItemStack(i) == null) {
                    break;
                  }
                }
              }
              j++;
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    Iterator<InvTweaksConfigSortingRule> rulesIt=rules.iterator();
    while (rulesIt.hasNext()) {
      InvTweaksConfigSortingRule rule=rulesIt.next();
      int rulePriority=rule.getPriority();
      if (log.getLevel() == InvTweaksConst.DEBUG)       log.info(""String_Node_Str"" + rule.getKeyword() + ""String_Node_Str""+ rulePriority+ ""String_Node_Str"");
      for (int i=0; i < size; i++) {
        aai from=containerMgr.getItemStack(i);
        if (hasToBeMoved(i) && lockPriorities[i] < rulePriority) {
          List<InvTweaksItemTreeItem> fromItems=tree.getItems(getItemID(from),getItemDamage(from));
          if (tree.matches(fromItems,rule.getKeyword())) {
            int[] preferredSlots=rule.getPreferredSlots();
            int stackToMove=i;
            for (int j=0; j < preferredSlots.length; j++) {
              int k=preferredSlots[j];
              int moveResult=move(stackToMove,k,rulePriority);
              if (moveResult != -1) {
                if (moveResult == k) {
                  break;
                }
 else {
                  from=containerMgr.getItemStack(moveResult);
                  fromItems=tree.getItems(getItemID(from),getItemDamage(from));
                  if (!tree.matches(fromItems,rule.getKeyword())) {
                    break;
                  }
 else {
                    stackToMove=moveResult;
                    j=-1;
                  }
                }
              }
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    for (int i=0; i < size; i++) {
      if (hasToBeMoved(i) && lockPriorities[i] > 0) {
        markAsMoved(i,1);
      }
    }
  }
  defaultSorting();
  if (log.getLevel() == InvTweaksConst.DEBUG) {
    timer=System.nanoTime() - timer;
    log.info(""String_Node_Str"" + timer + ""String_Node_Str"");
  }
}",0.993696782041358
178157,"private void handleSorting(ug guiScreen){
  yq selectedItem=getMainInventory()[getFocusedSlot()];
  try {
    new InvTweaksHandlerSorting(mc,cfgManager.getConfig(),InvTweaksContainerSection.INVENTORY,InvTweaksHandlerSorting.ALGORITHM_INVENTORY,InvTweaksConst.INVENTORY_ROW_SIZE).sort();
  }
 catch (  Exception e) {
    logInGameError(""String_Node_Str"",e);
    e.printStackTrace();
  }
  playClick();
  if (selectedItem != null && getMainInventory()[getFocusedSlot()] == null) {
    storedStackId=0;
  }
}","private void handleSorting(ug guiScreen){
  yq selectedItem=null;
  int focusedSlot=getFocusedSlot();
  yq[] mainInventory=getMainInventory();
  if (focusedSlot < mainInventory.length && focusedSlot >= 0) {
    selectedItem=mainInventory[focusedSlot];
  }
  try {
    new InvTweaksHandlerSorting(mc,cfgManager.getConfig(),InvTweaksContainerSection.INVENTORY,InvTweaksHandlerSorting.ALGORITHM_INVENTORY,InvTweaksConst.INVENTORY_ROW_SIZE).sort();
  }
 catch (  Exception e) {
    logInGameError(""String_Node_Str"",e);
    e.printStackTrace();
  }
  playClick();
  if (selectedItem != null && mainInventory[focusedSlot] == null) {
    storedStackId=0;
  }
}",0.7858376511226253
178158,"public boolean isChestWayTooBig(ug guiScreen){
  return is(guiScreen,""String_Node_Str"") || is(guiScreen,""String_Node_Str"");
}","public boolean isChestWayTooBig(ug guiScreen){
  return is(guiScreen,""String_Node_Str"") || is(guiScreen,""String_Node_Str"") || is(guiScreen,""String_Node_Str"");
}",0.8771929824561403
178159,"/** 
 * On Item Pickup handler
 */
@Override public void run(){
  InvTweaksConfig config=cfgManager.getConfig();
  try {
    InvTweaksContainerSectionManager containerMgr=new InvTweaksContainerSectionManager(mc,InvTweaksContainerSection.INVENTORY);
    int pickupSlot=-1;
    long tStart=System.currentTimeMillis();
    while (pickupSlot == -1 && System.currentTimeMillis() - tStart < InvTweaksConst.SORTING_TIMEOUT) {
      for (int i=0; i < 9; i++) {
        yq stackToCompare=containerMgr.getItemStack(27 + i);
        if (stackToCompare != null) {
          if (hotbarClone[i] == null) {
            pickupSlot=27 + i;
            break;
          }
 else           if (!areItemStacksEqual(stackToCompare,hotbarClone[i])) {
            return;
          }
        }
      }
      Thread.yield();
    }
    List<Integer> prefferedPositions=new LinkedList<Integer>();
    InvTweaksItemTree tree=config.getTree();
    yq stack=containerMgr.getItemStack(pickupSlot);
    List<InvTweaksItemTreeItem> items=tree.getItems(getItemID(stack),getItemDamage(stack));
    for (    InvTweaksConfigSortingRule rule : config.getRules()) {
      if (tree.matches(items,rule.getKeyword())) {
        for (        int slot : rule.getPreferredSlots()) {
          prefferedPositions.add(slot);
        }
      }
    }
    boolean hasToBeMoved=true;
    if (prefferedPositions != null) {
      for (      int newSlot : prefferedPositions) {
        try {
          if (newSlot == pickupSlot) {
            hasToBeMoved=false;
            break;
          }
 else           if (containerMgr.getItemStack(newSlot) == null) {
            if (containerMgr.move(pickupSlot,newSlot)) {
              break;
            }
          }
        }
 catch (        TimeoutException e) {
          logInGameError(""String_Node_Str"",e);
        }
      }
    }
    if (hasToBeMoved) {
      for (int i=0; i < containerMgr.getSize(); i++) {
        if (containerMgr.getItemStack(i) == null) {
          if (containerMgr.move(pickupSlot,i)) {
            break;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logInGameError(""String_Node_Str"",e);
  }
}","/** 
 * On Item Pickup handler
 */
@Override public void run(){
  InvTweaksConfig config=cfgManager.getConfig();
  try {
    InvTweaksContainerSectionManager containerMgr=new InvTweaksContainerSectionManager(mc,InvTweaksContainerSection.INVENTORY);
    int pickupSlot=-1;
    long tStart=System.currentTimeMillis();
    while (pickupSlot == -1 && System.currentTimeMillis() - tStart < InvTweaksConst.SORTING_TIMEOUT) {
      for (int i=0; i < 9; i++) {
        yq stackToCompare=containerMgr.getItemStack(27 + i);
        if (stackToCompare != null) {
          if (hotbarClone[i] == null) {
            pickupSlot=27 + i;
            break;
          }
 else           if (!areItemStacksEqual(stackToCompare,hotbarClone[i])) {
            return;
          }
        }
      }
      Thread.yield();
    }
    if (pickupSlot != -1) {
      List<Integer> prefferedPositions=new LinkedList<Integer>();
      InvTweaksItemTree tree=config.getTree();
      yq stack=containerMgr.getItemStack(pickupSlot);
      List<InvTweaksItemTreeItem> items=tree.getItems(getItemID(stack),getItemDamage(stack));
      for (      InvTweaksConfigSortingRule rule : config.getRules()) {
        if (tree.matches(items,rule.getKeyword())) {
          for (          int slot : rule.getPreferredSlots()) {
            prefferedPositions.add(slot);
          }
        }
      }
      boolean hasToBeMoved=true;
      if (prefferedPositions != null) {
        for (        int newSlot : prefferedPositions) {
          try {
            if (newSlot == pickupSlot) {
              hasToBeMoved=false;
              break;
            }
 else             if (containerMgr.getItemStack(newSlot) == null) {
              if (containerMgr.move(pickupSlot,newSlot)) {
                break;
              }
            }
          }
 catch (          TimeoutException e) {
            logInGameError(""String_Node_Str"",e);
          }
        }
      }
      if (hasToBeMoved) {
        for (int i=0; i < containerMgr.getSize(); i++) {
          if (containerMgr.getItemStack(i) == null) {
            if (containerMgr.move(pickupSlot,i)) {
              break;
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logInGameError(""String_Node_Str"",e);
  }
}",0.9663330300272976
178160,"public void sort() throws TimeoutException {
  long timer=System.nanoTime();
  InvTweaksContainerManager globalContainer=new InvTweaksContainerManager(mc);
  if (isMultiplayerWorld()) {
    putHoldItemDown();
  }
  if (algorithm != ALGORITHM_DEFAULT) {
    if (algorithm == ALGORITHM_INVENTORY) {
      log.info(""String_Node_Str"");
      if (globalContainer.hasSection(InvTweaksContainerSection.CRAFTING_IN)) {
        List<wz> craftingSlots=globalContainer.getSlots(InvTweaksContainerSection.CRAFTING_IN);
        int emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
        if (emptyIndex != -1) {
          for (          wz craftingSlot : craftingSlots) {
            if (hasStack(craftingSlot)) {
              globalContainer.move(InvTweaksContainerSection.CRAFTING_IN,globalContainer.getSlotIndex(getSlotNumber(craftingSlot)),InvTweaksContainerSection.INVENTORY,emptyIndex);
              emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
              if (emptyIndex == -1) {
                break;
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"");
      for (int i=size - 1; i >= 0; i--) {
        yq from=containerMgr.getItemStack(i);
        if (from != null) {
          if (sortArmorParts) {
            ww fromItem=getItem(from);
            if (isDamageable(fromItem)) {
              if (isItemArmor(fromItem)) {
                po fromItemArmor=(po)fromItem;
                if (globalContainer.hasSection(InvTweaksContainerSection.ARMOR)) {
                  List<wz> armorSlots=globalContainer.getSlots(InvTweaksContainerSection.ARMOR);
                  for (                  wz slot : armorSlots) {
                    if (isItemValid(slot,from) && (!hasStack(slot) || getArmorLevel(fromItemArmor) > getArmorLevel(((po)getItem(getStack(slot)))))) {
                      globalContainer.move(InvTweaksContainerSection.INVENTORY,i,InvTweaksContainerSection.ARMOR,globalContainer.getSlotIndex(getSlotNumber(slot)));
                    }
                  }
                }
              }
            }
          }
 else {
            int j=0;
            for (            Integer lockPriority : lockPriorities) {
              if (lockPriority > 0) {
                yq to=containerMgr.getItemStack(j);
                if (to != null && areItemsEqual(from,to)) {
                  move(i,j,Integer.MAX_VALUE);
                  markAsNotMoved(j);
                  if (containerMgr.getItemStack(i) == null) {
                    break;
                  }
                }
              }
              j++;
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    Iterator<InvTweaksConfigSortingRule> rulesIt=rules.iterator();
    while (rulesIt.hasNext()) {
      InvTweaksConfigSortingRule rule=rulesIt.next();
      int rulePriority=rule.getPriority();
      if (log.getLevel() == InvTweaksConst.DEBUG)       log.info(""String_Node_Str"" + rule.getKeyword() + ""String_Node_Str""+ rulePriority+ ""String_Node_Str"");
      for (int i=0; i < size; i++) {
        yq from=containerMgr.getItemStack(i);
        if (hasToBeMoved(i) && lockPriorities[i] < rulePriority) {
          List<InvTweaksItemTreeItem> fromItems=tree.getItems(getItemID(from),getItemDamage(from));
          if (tree.matches(fromItems,rule.getKeyword())) {
            int[] preferredSlots=rule.getPreferredSlots();
            int stackToMove=i;
            for (int j=0; j < preferredSlots.length; j++) {
              int k=preferredSlots[j];
              int moveResult=move(stackToMove,k,rulePriority);
              if (moveResult != -1) {
                if (moveResult == k) {
                  break;
                }
 else {
                  from=containerMgr.getItemStack(moveResult);
                  fromItems=tree.getItems(getItemID(from),getItemDamage(from));
                  if (!tree.matches(fromItems,rule.getKeyword())) {
                    break;
                  }
 else {
                    stackToMove=moveResult;
                    j=-1;
                  }
                }
              }
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    for (int i=0; i < size; i++) {
      if (hasToBeMoved(i) && lockPriorities[i] > 0) {
        markAsMoved(i,1);
      }
    }
  }
  defaultSorting();
  if (log.getLevel() == InvTweaksConst.DEBUG) {
    timer=System.nanoTime() - timer;
    log.info(""String_Node_Str"" + timer + ""String_Node_Str"");
  }
}","public void sort() throws TimeoutException {
  long timer=System.nanoTime();
  InvTweaksContainerManager globalContainer=new InvTweaksContainerManager(mc);
  if (isMultiplayerWorld()) {
    putHoldItemDown();
  }
  if (algorithm != ALGORITHM_DEFAULT) {
    if (algorithm == ALGORITHM_INVENTORY) {
      log.info(""String_Node_Str"");
      if (globalContainer.hasSection(InvTweaksContainerSection.CRAFTING_IN)) {
        List<wz> craftingSlots=globalContainer.getSlots(InvTweaksContainerSection.CRAFTING_IN);
        int emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
        if (emptyIndex != -1) {
          for (          wz craftingSlot : craftingSlots) {
            if (hasStack(craftingSlot)) {
              globalContainer.move(InvTweaksContainerSection.CRAFTING_IN,globalContainer.getSlotIndex(getSlotNumber(craftingSlot)),InvTweaksContainerSection.INVENTORY,emptyIndex);
              emptyIndex=globalContainer.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
              if (emptyIndex == -1) {
                break;
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"");
      for (int i=size - 1; i >= 0; i--) {
        yq from=containerMgr.getItemStack(i);
        if (from != null) {
          ww fromItem=getItem(from);
          if (isDamageable(fromItem)) {
            if (sortArmorParts) {
              if (isItemArmor(fromItem)) {
                po fromItemArmor=(po)fromItem;
                if (globalContainer.hasSection(InvTweaksContainerSection.ARMOR)) {
                  List<wz> armorSlots=globalContainer.getSlots(InvTweaksContainerSection.ARMOR);
                  for (                  wz slot : armorSlots) {
                    if (isItemValid(slot,from) && (!hasStack(slot) || getArmorLevel(fromItemArmor) > getArmorLevel(((po)getItem(getStack(slot)))))) {
                      globalContainer.move(InvTweaksContainerSection.INVENTORY,i,InvTweaksContainerSection.ARMOR,globalContainer.getSlotIndex(getSlotNumber(slot)));
                    }
                  }
                }
              }
            }
          }
 else {
            int j=0;
            for (            Integer lockPriority : lockPriorities) {
              if (lockPriority > 0) {
                yq to=containerMgr.getItemStack(j);
                if (to != null && areItemsEqual(from,to)) {
                  move(i,j,Integer.MAX_VALUE);
                  markAsNotMoved(j);
                  if (containerMgr.getItemStack(i) == null) {
                    break;
                  }
                }
              }
              j++;
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    Iterator<InvTweaksConfigSortingRule> rulesIt=rules.iterator();
    while (rulesIt.hasNext()) {
      InvTweaksConfigSortingRule rule=rulesIt.next();
      int rulePriority=rule.getPriority();
      if (log.getLevel() == InvTweaksConst.DEBUG)       log.info(""String_Node_Str"" + rule.getKeyword() + ""String_Node_Str""+ rulePriority+ ""String_Node_Str"");
      for (int i=0; i < size; i++) {
        yq from=containerMgr.getItemStack(i);
        if (hasToBeMoved(i) && lockPriorities[i] < rulePriority) {
          List<InvTweaksItemTreeItem> fromItems=tree.getItems(getItemID(from),getItemDamage(from));
          if (tree.matches(fromItems,rule.getKeyword())) {
            int[] preferredSlots=rule.getPreferredSlots();
            int stackToMove=i;
            for (int j=0; j < preferredSlots.length; j++) {
              int k=preferredSlots[j];
              int moveResult=move(stackToMove,k,rulePriority);
              if (moveResult != -1) {
                if (moveResult == k) {
                  break;
                }
 else {
                  from=containerMgr.getItemStack(moveResult);
                  fromItems=tree.getItems(getItemID(from),getItemDamage(from));
                  if (!tree.matches(fromItems,rule.getKeyword())) {
                    break;
                  }
 else {
                    stackToMove=moveResult;
                    j=-1;
                  }
                }
              }
            }
          }
        }
      }
    }
    log.info(""String_Node_Str"");
    for (int i=0; i < size; i++) {
      if (hasToBeMoved(i) && lockPriorities[i] > 0) {
        markAsMoved(i,1);
      }
    }
  }
  defaultSorting();
  if (log.getLevel() == InvTweaksConst.DEBUG) {
    timer=System.nanoTime() - timer;
    log.info(""String_Node_Str"" + timer + ""String_Node_Str"");
  }
}",0.9923043095866316
178161,"/** 
 * Tries to move a stack from i to j, and swaps them if j is already occupied but i is of greater priority (even if they are of same ID).
 * @param i from slot
 * @param j to slot
 * @param priority  The rule priority. Use 1 if the stack was not moved using a rule.
 * @return -1 if it failed,j if the stacks were merged into one, n if the j stack has been moved to the n slot.
 * @throws TimeoutException
 */
private int move(int i,int j,int priority) throws TimeoutException {
  yq from=containerMgr.getItemStack(i);
  yq to=containerMgr.getItemStack(j);
  if (from == null || frozenSlots[j] || frozenSlots[i]) {
    return -1;
  }
  if (lockPriorities[i] <= priority) {
    if (i == j) {
      markAsMoved(i,priority);
      return j;
    }
    if (to == null && lockPriorities[j] <= priority && !frozenSlots[j]) {
      rulePriority[i]=-1;
      keywordOrder[i]=-1;
      rulePriority[j]=priority;
      keywordOrder[j]=getItemOrder(from);
      containerMgr.move(i,j);
      return j;
    }
 else     if (to != null) {
      boolean canBeSwappedOrMerged=false;
      if (getStackSize(from) <= getMaxStackSize(from) && getStackSize(to) <= getMaxStackSize(to)) {
        if (lockPriorities[j] <= priority) {
          if (rulePriority[j] < priority) {
            canBeSwappedOrMerged=true;
          }
 else           if (rulePriority[j] == priority) {
            if (isOrderedBefore(i,j)) {
              canBeSwappedOrMerged=true;
            }
          }
        }
        if (!canBeSwappedOrMerged && areItemsEqual(from,to) && getStackSize(to) < getMaxStackSize(to)) {
          canBeSwappedOrMerged=true;
        }
      }
      if (canBeSwappedOrMerged) {
        keywordOrder[j]=keywordOrder[i];
        rulePriority[j]=priority;
        rulePriority[i]=-1;
        rulePriority[i]=-1;
        containerMgr.move(i,j);
        yq remains=containerMgr.getItemStack(i);
        if (remains != null) {
          int dropSlot=i;
          if (lockPriorities[j] > lockPriorities[i]) {
            for (int k=0; k < size; k++) {
              if (containerMgr.getItemStack(k) == null && lockPriorities[k] == 0) {
                dropSlot=k;
                break;
              }
            }
          }
          if (dropSlot != i) {
            containerMgr.move(i,dropSlot);
          }
          rulePriority[dropSlot]=-1;
          keywordOrder[dropSlot]=getItemOrder(remains);
          return dropSlot;
        }
 else {
          return j;
        }
      }
    }
  }
  return -1;
}","/** 
 * Tries to move a stack from i to j, and swaps them if j is already occupied but i is of greater priority (even if they are of same ID).
 * @param i from slot
 * @param j to slot
 * @param priority  The rule priority. Use 1 if the stack was not moved using a rule.
 * @return -1 if it failed,j if the stacks were merged into one, n if the j stack has been moved to the n slot.
 * @throws TimeoutException
 */
private int move(int i,int j,int priority) throws TimeoutException {
  yq from=containerMgr.getItemStack(i);
  yq to=containerMgr.getItemStack(j);
  if (from == null || frozenSlots[j] || frozenSlots[i]) {
    return -1;
  }
  if (lockPriorities[i] <= priority) {
    if (i == j) {
      markAsMoved(i,priority);
      return j;
    }
    if (to == null && lockPriorities[j] <= priority && !frozenSlots[j]) {
      rulePriority[i]=-1;
      keywordOrder[i]=-1;
      rulePriority[j]=priority;
      keywordOrder[j]=getItemOrder(from);
      containerMgr.move(i,j);
      return j;
    }
 else     if (to != null) {
      boolean canBeSwappedOrMerged=false;
      if (lockPriorities[j] <= priority) {
        if (rulePriority[j] < priority) {
          canBeSwappedOrMerged=true;
        }
 else         if (rulePriority[j] == priority) {
          if (isOrderedBefore(i,j)) {
            canBeSwappedOrMerged=true;
          }
        }
      }
      if (areItemsEqual(from,to)) {
        if (getStackSize(to) < getMaxStackSize(to)) {
          canBeSwappedOrMerged=true;
        }
 else         if (getStackSize(from) > getMaxStackSize(from)) {
          canBeSwappedOrMerged=false;
        }
      }
      if (canBeSwappedOrMerged) {
        keywordOrder[j]=keywordOrder[i];
        rulePriority[j]=priority;
        rulePriority[i]=-1;
        rulePriority[i]=-1;
        containerMgr.move(i,j);
        yq remains=containerMgr.getItemStack(i);
        if (remains != null) {
          int dropSlot=i;
          if (lockPriorities[j] > lockPriorities[i]) {
            for (int k=0; k < size; k++) {
              if (containerMgr.getItemStack(k) == null && lockPriorities[k] == 0) {
                dropSlot=k;
                break;
              }
            }
          }
          if (dropSlot != i) {
            containerMgr.move(i,dropSlot);
          }
          rulePriority[dropSlot]=-1;
          keywordOrder[dropSlot]=getItemOrder(remains);
          return dropSlot;
        }
 else {
          return j;
        }
      }
    }
  }
  return -1;
}",0.9424041741922536
178162,"/** 
 * Moves a stack from source to destination, adapting the behavior  according to the context: - If destination is empty, the source stack is moved. - If the items can be merged, as much items are possible are put in the destination, and the eventual remains go back to the source. - If the items cannot be merged, they are swapped.
 * @param srcSection The source section
 * @param srcIndex The destination slot
 * @param destSection The destination section
 * @param destIndex The destination slot
 * @return false if the source slot is empty or the player isholding an item that couln't be put down.
 * @throws TimeoutException 
 */
public boolean move(InvTweaksContainerSection srcSection,int srcIndex,InvTweaksContainerSection destSection,int destIndex) throws TimeoutException {
  dk srcStack=getItemStack(srcSection,srcIndex);
  dk destStack=getItemStack(destSection,destIndex);
  if (srcStack == null) {
    return false;
  }
 else   if (srcSection == destSection && srcIndex == destIndex) {
    return true;
  }
  if (getHoldStack() != null) {
    int firstEmptyIndex=getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
    if (firstEmptyIndex != -1) {
      leftClick(InvTweaksContainerSection.INVENTORY,firstEmptyIndex);
    }
 else {
      return false;
    }
  }
  boolean destinationEmpty=getItemStack(destSection,destIndex) == null;
  if (destStack != null && getItemID(srcStack) == getItemID(destStack) && getMaxStackSize(srcStack) == 1) {
    int intermediateSlot=getFirstEmptyUsableSlotNumber();
    InvTweaksContainerSection intermediateSection=getSlotSection(intermediateSlot);
    int intermediateIndex=getSlotIndex(intermediateSlot);
    if (intermediateIndex != -1) {
      leftClick(destSection,destIndex);
      leftClick(intermediateSection,intermediateIndex);
      leftClick(srcSection,srcIndex);
      leftClick(destSection,destIndex);
      leftClick(intermediateSection,intermediateIndex);
      leftClick(srcSection,srcIndex);
    }
 else {
      return false;
    }
  }
 else {
    leftClick(srcSection,srcIndex);
    leftClick(destSection,destIndex);
    if (!destinationEmpty) {
      leftClick(srcSection,srcIndex);
    }
  }
  return true;
}","/** 
 * Moves a stack from source to destination, adapting the behavior  according to the context: - If destination is empty, the source stack is moved. - If the items can be merged, as much items are possible are put in the destination, and the eventual remains go back to the source. - If the items cannot be merged, they are swapped.
 * @param srcSection The source section
 * @param srcIndex The destination slot
 * @param destSection The destination section
 * @param destIndex The destination slot
 * @return false if the source slot is empty or the player isholding an item that couln't be put down.
 * @throws TimeoutException 
 */
public boolean move(InvTweaksContainerSection srcSection,int srcIndex,InvTweaksContainerSection destSection,int destIndex) throws TimeoutException {
  dk srcStack=getItemStack(srcSection,srcIndex);
  dk destStack=getItemStack(destSection,destIndex);
  if (srcStack == null) {
    return false;
  }
 else   if (srcSection == destSection && srcIndex == destIndex) {
    return true;
  }
  if (getHoldStack() != null) {
    int firstEmptyIndex=getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
    if (firstEmptyIndex != -1) {
      leftClick(InvTweaksContainerSection.INVENTORY,firstEmptyIndex);
    }
 else {
      return false;
    }
  }
  if (destStack != null && getItemID(srcStack) == getItemID(destStack) && getMaxStackSize(srcStack) == 1) {
    int intermediateSlot=getFirstEmptyUsableSlotNumber();
    InvTweaksContainerSection intermediateSection=getSlotSection(intermediateSlot);
    int intermediateIndex=getSlotIndex(intermediateSlot);
    if (intermediateIndex != -1) {
      leftClick(destSection,destIndex);
      leftClick(intermediateSection,intermediateIndex);
      leftClick(srcSection,srcIndex);
      leftClick(destSection,destIndex);
      leftClick(intermediateSection,intermediateIndex);
      leftClick(srcSection,srcIndex);
    }
 else {
      return false;
    }
  }
 else {
    leftClick(srcSection,srcIndex);
    leftClick(destSection,destIndex);
    if (getHoldStack() != null) {
      leftClick(srcSection,srcIndex);
    }
  }
  return true;
}",0.9746923612723474
178163,"private void move(boolean separateStacks,boolean drop) throws Exception {
  int toIndex=-1;
synchronized (this) {
    toIndex=getNextIndex(separateStacks,drop);
    if (toIndex != -1) {
switch (shortcutType) {
case MOVE_ONE_STACK:
{
          vv slot=container.getSlot(fromSection,fromIndex);
          while (hasStack(slot) && toIndex != -1) {
            container.move(fromSection,fromIndex,toSection,toIndex);
            toIndex=getNextIndex(separateStacks,drop);
          }
          break;
        }
case MOVE_ONE_ITEM:
{
        container.moveSome(fromSection,fromIndex,toSection,toIndex,1);
        break;
      }
case MOVE_ALL_ITEMS:
{
      dk stackToMatch=copy(fromStack);
      moveAll(fromSection,toSection,separateStacks,drop,stackToMatch);
      if (fromSection == InvTweaksContainerSection.INVENTORY_NOT_HOTBAR && toSection == InvTweaksContainerSection.CHEST) {
        moveAll(InvTweaksContainerSection.INVENTORY_HOTBAR,toSection,separateStacks,drop,stackToMatch);
      }
    }
}
}
}
}","private void move(boolean separateStacks,boolean drop) throws Exception {
  int toIndex=-1;
synchronized (this) {
    toIndex=getNextIndex(separateStacks,drop);
    if (toIndex != -1) {
switch (shortcutType) {
case MOVE_ONE_STACK:
{
          vv slot=container.getSlot(fromSection,fromIndex);
          if (fromSection != InvTweaksContainerSection.CRAFTING_OUT) {
            boolean canStillMove=true;
            while (hasStack(slot) && toIndex != -1 && canStillMove) {
              canStillMove=container.move(fromSection,fromIndex,toSection,toIndex);
              toIndex=getNextIndex(separateStacks,drop);
            }
          }
 else {
            container.move(fromSection,fromIndex,toSection,toIndex);
          }
          break;
        }
case MOVE_ONE_ITEM:
{
        container.moveSome(fromSection,fromIndex,toSection,toIndex,1);
        break;
      }
case MOVE_ALL_ITEMS:
{
      dk stackToMatch=copy(fromStack);
      moveAll(fromSection,toSection,separateStacks,drop,stackToMatch);
      if (fromSection == InvTweaksContainerSection.INVENTORY_NOT_HOTBAR && toSection == InvTweaksContainerSection.CHEST) {
        moveAll(InvTweaksContainerSection.INVENTORY_HOTBAR,toSection,separateStacks,drop,stackToMatch);
      }
    }
}
}
}
}",0.8901682905225864
178164,"private void moveAll(InvTweaksContainerSection fromSection,InvTweaksContainerSection toSection,boolean separateStacks,boolean drop,dk stackToMatch) throws TimeoutException {
  int toIndex=getNextIndex(separateStacks,drop);
  for (  vv slot : container.getSlots(fromSection)) {
    if (hasStack(slot) && areSameItemType(stackToMatch,getStack(slot))) {
      int fromIndex=container.getSlotIndex(getSlotNumber(slot));
      while (hasStack(slot) && toIndex != -1 && !(fromSection == toSection && fromIndex == toIndex)) {
        container.move(fromSection,fromIndex,toSection,toIndex);
        toIndex=getNextIndex(separateStacks,drop);
      }
    }
    if (toIndex == -1) {
      break;
    }
  }
}","private void moveAll(InvTweaksContainerSection fromSection,InvTweaksContainerSection toSection,boolean separateStacks,boolean drop,dk stackToMatch) throws TimeoutException {
  int toIndex=getNextIndex(separateStacks,drop);
  for (  vv slot : container.getSlots(fromSection)) {
    if (hasStack(slot) && areSameItemType(stackToMatch,getStack(slot))) {
      int fromIndex=container.getSlotIndex(getSlotNumber(slot));
      boolean canStillMove=true;
      while (hasStack(slot) && toIndex != -1 && !(fromSection == toSection && fromIndex == toIndex) && canStillMove) {
        canStillMove=container.move(fromSection,fromIndex,toSection,toIndex);
        toIndex=getNextIndex(separateStacks,drop);
      }
    }
    if (toIndex == -1) {
      break;
    }
  }
}",0.9574759945130316
178165,"private void initAction(int fromSlot,ShortcutType shortcutType,InvTweaksContainerSection destSection) throws Exception {
  this.container=new InvTweaksContainerManager(mc);
  this.fromSection=container.getSlotSection(fromSlot);
  this.fromIndex=container.getSlotIndex(fromSlot);
  this.fromStack=container.getItemStack(fromSection,fromIndex);
  this.shortcutType=shortcutType;
  this.toSection=destSection;
  if (getHoldStack() != null) {
    container.leftClick(fromSection,fromIndex);
    if (getHoldStack() != null) {
      int firstEmptyIndex=container.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
      if (firstEmptyIndex != -1) {
        fromSection=InvTweaksContainerSection.INVENTORY;
        fromSlot=firstEmptyIndex;
        container.leftClick(fromSection,fromSlot);
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
  }
}","private void initAction(int fromSlot,ShortcutType shortcutType,InvTweaksContainerSection destSection) throws Exception {
  this.container=new InvTweaksContainerManager(mc);
  this.fromSection=container.getSlotSection(fromSlot);
  this.fromIndex=container.getSlotIndex(fromSlot);
  this.fromStack=container.getItemStack(fromSection,fromIndex);
  this.shortcutType=shortcutType;
  this.toSection=destSection;
  if (getHoldStack() != null) {
    if (fromSection != InvTweaksContainerSection.CRAFTING_OUT) {
      container.leftClick(fromSection,fromIndex);
    }
    if (getHoldStack() != null) {
      int firstEmptyIndex=container.getFirstEmptyIndex(InvTweaksContainerSection.INVENTORY);
      if (firstEmptyIndex != -1) {
        fromSlot=firstEmptyIndex;
        container.leftClick(InvTweaksContainerSection.INVENTORY,fromSlot);
      }
 else {
        throw new Exception(""String_Node_Str"");
      }
    }
  }
}",0.8702460850111857
178166,"protected int getYDisplayPosition(vv slot){
  return slot.d;
}","protected int getYDisplayPosition(vv slot){
  return slot.f;
}",0.9838709677419356
178167,"private boolean isActive(ShortcutType shortcutType){
  for (  Integer keyCode : shortcuts.get(shortcutType)) {
    if (shortcutKeysStatus.get(keyCode)) {
      return true;
    }
  }
  return false;
}","private boolean isActive(ShortcutType shortcutType){
  for (  Integer keyCode : shortcuts.get(shortcutType)) {
    if (shortcutKeysStatus.get(keyCode) && (keyCode != 29 || !Keyboard.isKeyDown(184))) {
      return true;
    }
  }
  return false;
}",0.8948545861297539
178168,"/** 
 * Tries to move a stack from i to j, and swaps them if j is already occupied but i is of greater priority (even if they are of same ID).
 * @param i from slot
 * @param j to slot
 * @param priority  The rule priority. Use 1 if the stack was not moved using a rule.
 * @return -1 if it failed,j if the stacks were merged into one, n if the j stack has been moved to the n slot.
 * @throws TimeoutException
 */
private int move(int i,int j,int priority) throws TimeoutException {
  ItemStack from=containerMgr.getItemStack(i);
  ItemStack to=containerMgr.getItemStack(j);
  if (from == null || frozenSlots[j] || frozenSlots[i]) {
    return -1;
  }
  if (lockPriorities[i] <= priority) {
    if (i == j) {
      markAsMoved(i,priority);
      return i;
    }
    if (to == null && lockPriorities[j] <= priority && !frozenSlots[j]) {
      rulePriority[i]=-1;
      keywordOrder[i]=-1;
      rulePriority[j]=priority;
      keywordOrder[j]=getItemOrder(getItemID(from),getItemDamage(from));
      containerMgr.move(i,j);
      return j;
    }
 else     if (to != null) {
      boolean canBeSwapped=false;
      if (lockPriorities[j] <= priority) {
        if (rulePriority[j] < priority) {
          canBeSwapped=true;
        }
 else         if (rulePriority[j] == priority) {
          if (isOrderedBefore(i,j)) {
            canBeSwapped=true;
          }
        }
      }
      if (canBeSwapped || from.isItemEqual(to)) {
        rulePriority[i]=-1;
        keywordOrder[i]=-1;
        rulePriority[j]=priority;
        keywordOrder[j]=getItemOrder(getItemID(from),getItemDamage(from));
        containerMgr.move(i,j);
        int dropSlot=i;
        if (lockPriorities[j] > lockPriorities[i]) {
          for (int k=0; k < size; k++) {
            if (containerMgr.getItemStack(k) == null && lockPriorities[k] == 0) {
              dropSlot=k;
              break;
            }
          }
        }
        if (i != dropSlot) {
          containerMgr.move(i,dropSlot);
          ItemStack remains=containerMgr.getItemStack(dropSlot);
          if (remains != null) {
            rulePriority[dropSlot]=-1;
            keywordOrder[dropSlot]=getItemOrder(getItemID(remains),getItemDamage(remains));
          }
        }
        return dropSlot;
      }
    }
  }
  return -1;
}","/** 
 * Tries to move a stack from i to j, and swaps them if j is already occupied but i is of greater priority (even if they are of same ID).
 * @param i from slot
 * @param j to slot
 * @param priority  The rule priority. Use 1 if the stack was not moved using a rule.
 * @return -1 if it failed,j if the stacks were merged into one, n if the j stack has been moved to the n slot.
 * @throws TimeoutException
 */
private int move(int i,int j,int priority) throws TimeoutException {
  ItemStack from=containerMgr.getItemStack(i);
  ItemStack to=containerMgr.getItemStack(j);
  if (from == null || frozenSlots[j] || frozenSlots[i]) {
    return -1;
  }
  if (lockPriorities[i] <= priority) {
    if (i == j) {
      markAsMoved(i,priority);
      return j;
    }
    if (to == null && lockPriorities[j] <= priority && !frozenSlots[j]) {
      rulePriority[i]=-1;
      keywordOrder[i]=-1;
      rulePriority[j]=priority;
      keywordOrder[j]=getItemOrder(from);
      containerMgr.move(i,j);
      return j;
    }
 else     if (to != null) {
      boolean canBeSwapped=false;
      if (lockPriorities[j] <= priority) {
        if (rulePriority[j] < priority) {
          canBeSwapped=true;
        }
 else         if (rulePriority[j] == priority) {
          if (isOrderedBefore(i,j)) {
            canBeSwapped=true;
          }
        }
      }
      if (canBeSwapped || from.isItemEqual(to)) {
        keywordOrder[j]=keywordOrder[i];
        rulePriority[j]=priority;
        rulePriority[i]=-1;
        rulePriority[i]=-1;
        containerMgr.move(i,j);
        ItemStack remains=containerMgr.getItemStack(i);
        if (remains != null) {
          int dropSlot=i;
          if (lockPriorities[j] > lockPriorities[i]) {
            for (int k=0; k < size; k++) {
              if (containerMgr.getItemStack(k) == null && lockPriorities[k] == 0) {
                dropSlot=k;
                break;
              }
            }
          }
          if (dropSlot != i) {
            containerMgr.move(i,dropSlot);
          }
          rulePriority[dropSlot]=-1;
          keywordOrder[dropSlot]=getItemOrder(remains);
          return dropSlot;
        }
 else {
          return j;
        }
      }
    }
  }
  return -1;
}",0.8576480990274093
178169,"private int getItemOrder(int itemID,int itemDamage){
  List<ItemTreeItem> items=tree.getItems(itemID,itemDamage);
  return (items != null && items.size() > 0) ? items.get(0).getOrder() : Integer.MAX_VALUE;
}","private int getItemOrder(ItemStack item){
  List<ItemTreeItem> items=tree.getItems(getItemID(item),getItemDamage(item));
  return (items != null && items.size() > 0) ? items.get(0).getOrder() : Integer.MAX_VALUE;
}",0.8551068883610451
178170,"public SortingHandler(Minecraft mc,InvTweaksConfig config,ContainerSection section,int algorithm) throws Exception {
  super(mc);
  if (DEFAULT_LOCK_PRIORITIES == null) {
    DEFAULT_LOCK_PRIORITIES=new int[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_LOCK_PRIORITIES[i]=0;
    }
  }
  if (DEFAULT_FROZEN_SLOTS == null) {
    DEFAULT_FROZEN_SLOTS=new boolean[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_FROZEN_SLOTS[i]=false;
    }
  }
  this.containerMgr=new ContainerSectionManager(mc,section);
  this.size=containerMgr.getSectionSize();
  this.rules=config.getRules();
  this.tree=config.getTree();
  if (section == ContainerSection.INVENTORY) {
    this.lockPriorities=config.getLockPriorities();
    this.frozenSlots=config.getFrozenSlots();
    this.algorithm=ALGORITHM_INVENTORY;
  }
 else {
    this.lockPriorities=DEFAULT_LOCK_PRIORITIES;
    this.frozenSlots=DEFAULT_FROZEN_SLOTS;
    this.algorithm=algorithm;
    if (algorithm != ALGORITHM_DEFAULT) {
      computeLineSortingRules(Const.INVENTORY_ROW_SIZE,algorithm == ALGORITHM_HORIZONTAL);
    }
  }
  this.rulePriority=new int[size];
  this.keywordOrder=new int[size];
  for (int i=0; i < size; i++) {
    this.rulePriority[i]=-1;
    ItemStack stack=containerMgr.getItemStack(i);
    if (stack != null) {
      this.keywordOrder[i]=getItemOrder(getItemID(stack),getItemDamage(stack));
    }
 else {
      this.keywordOrder[i]=-1;
    }
  }
  this.isMultiplayer=isMultiplayerWorld();
}","public SortingHandler(Minecraft mc,InvTweaksConfig config,ContainerSection section,int algorithm) throws Exception {
  super(mc);
  if (DEFAULT_LOCK_PRIORITIES == null) {
    DEFAULT_LOCK_PRIORITIES=new int[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_LOCK_PRIORITIES[i]=0;
    }
  }
  if (DEFAULT_FROZEN_SLOTS == null) {
    DEFAULT_FROZEN_SLOTS=new boolean[MAX_CONTAINER_SIZE];
    for (int i=0; i < MAX_CONTAINER_SIZE; i++) {
      DEFAULT_FROZEN_SLOTS[i]=false;
    }
  }
  this.containerMgr=new ContainerSectionManager(mc,section);
  this.size=containerMgr.getSectionSize();
  this.rules=config.getRules();
  this.tree=config.getTree();
  if (section == ContainerSection.INVENTORY) {
    this.lockPriorities=config.getLockPriorities();
    this.frozenSlots=config.getFrozenSlots();
    this.algorithm=ALGORITHM_INVENTORY;
  }
 else {
    this.lockPriorities=DEFAULT_LOCK_PRIORITIES;
    this.frozenSlots=DEFAULT_FROZEN_SLOTS;
    this.algorithm=algorithm;
    if (algorithm != ALGORITHM_DEFAULT) {
      computeLineSortingRules(Const.INVENTORY_ROW_SIZE,algorithm == ALGORITHM_HORIZONTAL);
    }
  }
  this.rulePriority=new int[size];
  this.keywordOrder=new int[size];
  for (int i=0; i < size; i++) {
    this.rulePriority[i]=-1;
    ItemStack stack=containerMgr.getItemStack(i);
    if (stack != null) {
      this.keywordOrder[i]=getItemOrder(stack);
    }
 else {
      this.keywordOrder[i]=-1;
    }
  }
  this.isMultiplayer=isMultiplayerWorld();
}",0.9894249834765368
178171,"public void initGui(){
  List<GuiButton> controlList=new LinkedList<GuiButton>();
  Point p=new Point();
  int i=0;
  moveToButtonCoords(1,p);
  controlList.add(new GuiButton(ID_EDITRULES,p.getX() + 55,height / 6 + 96,""String_Node_Str""));
  controlList.add(new GuiButton(ID_EDITTREE,p.getX() + 55,height / 6 + 120,""String_Node_Str""));
  controlList.add(new GuiButton(ID_HELP,p.getX() + 55,height / 6 + 144,""String_Node_Str""));
  controlList.add(new GuiButton(ID_DONE,p.getX() + 55,height / 6 + 168,""String_Node_Str""));
  String middleClick=config.getProperty(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK);
  moveToButtonCoords(i++,p);
  GuiTooltipButton middleClickBtn=new GuiTooltipButton(ID_MIDDLE_CLICK,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK,MIDDLE_CLICK),""String_Node_Str"");
  controlList.add(middleClickBtn);
  if (middleClick.equals(InvTweaksConfig.VALUE_CI_COMPATIBILITY)) {
    middleClickBtn.enabled=false;
    middleClickBtn.setTooltip(middleClickBtn.getTooltip() + ""String_Node_Str"");
  }
  moveToButtonCoords(i++,p);
  controlList.add(new GuiTooltipButton(ID_SHORTCUTS_HELP,p.getX() + 130,p.getY(),20,20,""String_Node_Str"",""String_Node_Str""));
  controlList.add(new GuiTooltipButton(ID_SHORTCUTS,p.getX(),p.getY(),130,20,computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_SHORTCUTS,SHORTCUTS),""String_Node_Str""));
  moveToButtonCoords(i++,p);
  GuiTooltipButton sortOnPickupBtn=new GuiTooltipButton(ID_SORT_ON_PICKUP,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_SORTING_ON_PICKUP,SORT_ON_PICKUP),""String_Node_Str"");
  controlList.add(sortOnPickupBtn);
  if (mc.isMultiplayerWorld()) {
    sortOnPickupBtn.enabled=false;
    sortOnPickupBtn.displayString=SORT_ON_PICKUP + SP_ONLY;
    sortOnPickupBtn.setTooltip(sortOnPickupBtn.getTooltip() + ""String_Node_Str"");
  }
  moveToButtonCoords(i++,p);
  controlList.add(new GuiTooltipButton(ID_CHESTS_BUTTONS,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_SHOW_CHEST_BUTTONS,CHEST_BUTTONS),""String_Node_Str""));
  if (!Desktop.isDesktopSupported()) {
    for (    Object o : controlList) {
      GuiButton button=(GuiButton)o;
      if (button.id == ID_EDITRULES || button.id < ID_EDITTREE) {
        button.enabled=false;
      }
    }
  }
  this.controlList=controlList;
}","public void initGui(){
  List<GuiButton> controlList=new LinkedList<GuiButton>();
  Point p=new Point();
  int i=0;
  moveToButtonCoords(1,p);
  controlList.add(new GuiButton(ID_EDITRULES,p.getX() + 55,height / 6 + 96,""String_Node_Str""));
  controlList.add(new GuiButton(ID_EDITTREE,p.getX() + 55,height / 6 + 120,""String_Node_Str""));
  controlList.add(new GuiButton(ID_HELP,p.getX() + 55,height / 6 + 144,""String_Node_Str""));
  controlList.add(new GuiButton(ID_DONE,p.getX() + 55,height / 6 + 168,""String_Node_Str""));
  String middleClick=config.getProperty(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK);
  moveToButtonCoords(i++,p);
  GuiTooltipButton middleClickBtn=new GuiTooltipButton(ID_MIDDLE_CLICK,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK,MIDDLE_CLICK),""String_Node_Str"");
  controlList.add(middleClickBtn);
  if (middleClick.equals(InvTweaksConfig.VALUE_CI_COMPATIBILITY)) {
    middleClickBtn.enabled=false;
    middleClickBtn.setTooltip(middleClickBtn.getTooltip() + ""String_Node_Str"");
  }
  moveToButtonCoords(i++,p);
  controlList.add(new GuiTooltipButton(ID_SHORTCUTS_HELP,p.getX() + 130,p.getY(),20,20,""String_Node_Str"",""String_Node_Str""));
  String shortcuts=config.getProperty(InvTweaksConfig.PROP_ENABLE_SHORTCUTS);
  GuiTooltipButton shortcutsBtn=new GuiTooltipButton(ID_SHORTCUTS,p.getX(),p.getY(),130,20,computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_SHORTCUTS,SHORTCUTS),""String_Node_Str"");
  controlList.add(shortcutsBtn);
  if (shortcuts.equals(InvTweaksConfig.VALUE_CI_COMPATIBILITY)) {
    shortcutsBtn.enabled=false;
    shortcutsBtn.setTooltip(shortcutsBtn.getTooltip() + ""String_Node_Str"");
  }
  moveToButtonCoords(i++,p);
  GuiTooltipButton sortOnPickupBtn=new GuiTooltipButton(ID_SORT_ON_PICKUP,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_SORTING_ON_PICKUP,SORT_ON_PICKUP),""String_Node_Str"");
  controlList.add(sortOnPickupBtn);
  if (mc.isMultiplayerWorld()) {
    sortOnPickupBtn.enabled=false;
    sortOnPickupBtn.displayString=SORT_ON_PICKUP + SP_ONLY;
    sortOnPickupBtn.setTooltip(sortOnPickupBtn.getTooltip() + ""String_Node_Str"");
  }
  moveToButtonCoords(i++,p);
  controlList.add(new GuiTooltipButton(ID_CHESTS_BUTTONS,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_SHOW_CHEST_BUTTONS,CHEST_BUTTONS),""String_Node_Str""));
  if (!Desktop.isDesktopSupported()) {
    for (    Object o : controlList) {
      GuiButton button=(GuiButton)o;
      if (button.id == ID_EDITRULES || button.id < ID_EDITTREE) {
        button.enabled=false;
      }
    }
  }
  this.controlList=controlList;
}",0.9315235008103728
178172,"private void handleShortcuts(GuiScreen guiScreen){
  if (!(guiScreen instanceof GuiContainer)) {
    return;
  }
  if (Mouse.isButtonDown(0) || Mouse.isButtonDown(1)) {
    if (!mouseWasDown) {
      mouseWasDown=true;
      if (!cfgManager.getConfig().getProperty(InvTweaksConfig.PROP_ENABLE_SHORTCUTS).equals(""String_Node_Str"")) {
        cfgManager.getShortcutsHandler().handleShortcut((GuiContainer)guiScreen);
      }
    }
  }
 else {
    mouseWasDown=false;
  }
}","private void handleShortcuts(GuiScreen guiScreen){
  if (!(guiScreen instanceof GuiContainer)) {
    return;
  }
  if (Mouse.isButtonDown(0) || Mouse.isButtonDown(1)) {
    if (!mouseWasDown) {
      mouseWasDown=true;
      if (cfgManager.getConfig().getProperty(InvTweaksConfig.PROP_ENABLE_SHORTCUTS).equals(""String_Node_Str"")) {
        cfgManager.getShortcutsHandler().handleShortcut((GuiContainer)guiScreen);
      }
    }
  }
 else {
    mouseWasDown=false;
  }
}",0.9989350372736954
178173,"private void init(){
  rulesets=new Vector<InventoryConfigRuleset>();
  currentRuleset=-1;
  properties=new Properties();
  properties.setProperty(PROP_ENABLE_MIDDLE_CLICK,""String_Node_Str"");
  properties.setProperty(PROP_SHOW_CHEST_BUTTONS,""String_Node_Str"");
  properties.setProperty(PROP_ENABLE_SORTING_ON_PICKUP,""String_Node_Str"");
  properties.setProperty(PROP_ENABLE_AUTOREPLACE_SOUND,""String_Node_Str"");
  properties.setProperty(PROP_ENABLE_SORTING_SOUND,""String_Node_Str"");
  invalidKeywords=new Vector<String>();
}","private void init(){
  rulesets=new Vector<InventoryConfigRuleset>();
  currentRuleset=-1;
  properties=new Properties();
  properties.setProperty(PROP_ENABLE_MIDDLE_CLICK,VALUE_TRUE);
  properties.setProperty(PROP_SHOW_CHEST_BUTTONS,VALUE_TRUE);
  properties.setProperty(PROP_ENABLE_SORTING_ON_PICKUP,VALUE_TRUE);
  properties.setProperty(PROP_ENABLE_AUTOREPLACE_SOUND,VALUE_TRUE);
  properties.setProperty(PROP_ENABLE_SORTING_SOUND,VALUE_TRUE);
  invalidKeywords=new Vector<String>();
}",0.8664688427299704
178174,"/** 
 * @param rawLine
 * @return If not null, returns the invalid keyword found
 * @throws InvalidParameterException
 */
public String registerLine(String rawLine) throws InvalidParameterException {
  String[] words=rawLine.split(""String_Node_Str"");
  String lineText=rawLine.toLowerCase();
  InventoryConfigRule newRule=null;
  if (words.length == 2) {
    if (lineText.matches(""String_Node_Str"") || lineText.matches(""String_Node_Str"")) {
      words[0]=words[0].toLowerCase();
      if (words[1].equals(InvTweaksConfig.LOCKED)) {
        int[] newLockedSlots=InventoryConfigRule.getRulePreferredPositions(words[0],Const.INVENTORY_SIZE,Const.INVENTORY_ROW_SIZE);
        int lockPriority=InventoryConfigRule.getRuleType(words[0]).getHighestPriority();
        for (        int i : newLockedSlots) {
          lockPriorities[i]=lockPriority;
        }
        return null;
      }
 else       if (words[1].equals(InvTweaksConfig.FROZEN)) {
        int[] newLockedSlots=InventoryConfigRule.getRulePreferredPositions(words[0],Const.INVENTORY_SIZE,Const.INVENTORY_ROW_SIZE);
        for (        int i : newLockedSlots) {
          frozenSlots[i]=true;
        }
        return null;
      }
 else {
        String keyword=words[1];
        boolean isValidKeyword=tree.isKeywordValid(keyword.toLowerCase());
        if (!isValidKeyword) {
          Vector<String> wordVariants=getKeywordVariants(keyword);
          for (          String wordVariant : wordVariants) {
            if (tree.isKeywordValid(wordVariant.toLowerCase())) {
              isValidKeyword=true;
              keyword=wordVariant;
              break;
            }
          }
        }
        if (isValidKeyword) {
          newRule=new InventoryConfigRule(tree,words[0],keyword.toLowerCase(),Const.INVENTORY_SIZE,Const.INVENTORY_ROW_SIZE);
          rules.add(newRule);
          return null;
        }
 else {
          return keyword.toLowerCase();
        }
      }
    }
 else     if (words[0].equals(InvTweaksConfig.AUTOREPLACE)) {
      words[1]=words[1].toLowerCase();
      if (tree.isKeywordValid(words[1]) || words[1].equals(InvTweaksConfig.AUTOREPLACE_NOTHING)) {
        autoReplaceRules.add(words[1]);
      }
      return null;
    }
  }
 else   if (words.length == 1) {
    if (words[0].equals(InvTweaksConfig.DEBUG)) {
      debugEnabled=true;
      return null;
    }
  }
  throw new InvalidParameterException();
}","/** 
 * @param rawLine
 * @return If not null, returns the invalid keyword found
 * @throws InvalidParameterException
 */
public String registerLine(String rawLine) throws InvalidParameterException {
  String[] words=rawLine.split(""String_Node_Str"");
  String lineText=rawLine.toLowerCase();
  InventoryConfigRule newRule=null;
  if (words.length == 2) {
    if (lineText.matches(""String_Node_Str"") || lineText.matches(""String_Node_Str"")) {
      words[0]=words[0].toLowerCase();
      if (words[1].equals(InvTweaksConfig.LOCKED)) {
        int[] newLockedSlots=InventoryConfigRule.getRulePreferredPositions(words[0],Const.INVENTORY_SIZE,Const.INVENTORY_ROW_SIZE);
        int lockPriority=InventoryConfigRule.getRuleType(words[0]).getHighestPriority();
        for (        int i : newLockedSlots) {
          lockPriorities[i]=lockPriority;
        }
        return null;
      }
 else       if (words[1].equals(InvTweaksConfig.FROZEN)) {
        int[] newLockedSlots=InventoryConfigRule.getRulePreferredPositions(words[0],Const.INVENTORY_SIZE,Const.INVENTORY_ROW_SIZE);
        for (        int i : newLockedSlots) {
          frozenSlots[i]=true;
        }
        return null;
      }
 else {
        String keyword=words[1].toLowerCase();
        boolean isValidKeyword=tree.isKeywordValid(keyword);
        if (!isValidKeyword) {
          Vector<String> wordVariants=getKeywordVariants(keyword);
          for (          String wordVariant : wordVariants) {
            if (tree.isKeywordValid(wordVariant.toLowerCase())) {
              isValidKeyword=true;
              keyword=wordVariant;
              break;
            }
          }
        }
        if (isValidKeyword) {
          newRule=new InventoryConfigRule(tree,words[0],keyword.toLowerCase(),Const.INVENTORY_SIZE,Const.INVENTORY_ROW_SIZE);
          rules.add(newRule);
          return null;
        }
 else {
          return keyword.toLowerCase();
        }
      }
    }
 else     if (words[0].equals(InvTweaksConfig.AUTOREPLACE)) {
      words[1]=words[1].toLowerCase();
      if (tree.isKeywordValid(words[1]) || words[1].equals(InvTweaksConfig.AUTOREPLACE_NOTHING)) {
        autoReplaceRules.add(words[1]);
      }
      return null;
    }
  }
 else   if (words.length == 1) {
    if (words[0].equals(InvTweaksConfig.DEBUG)) {
      debugEnabled=true;
      return null;
    }
  }
  throw new InvalidParameterException();
}",0.9941812136325852
178175,"private String computeBooleanButtonLabel(String property,String label){
  Boolean enabled=new Boolean(config.getProperty(property));
  return label + ((enabled) ? ON : OFF);
}","private String computeBooleanButtonLabel(String property,String label){
  String propertyValue=config.getProperty(property);
  if (propertyValue.equals(InvTweaksConfig.VALUE_CI_COMPATIBILITY)) {
    return label + DISABLE_CI;
  }
 else {
    Boolean enabled=new Boolean(propertyValue);
    return label + ((enabled) ? ON : OFF);
  }
}",0.5776031434184676
178176,"@SuppressWarnings(""String_Node_Str"") public void initGui(){
  Point p=new Point();
  int i=0;
  moveToButtonCoords(0,p);
  controlList.add(new GuiButton(ID_EDITRULES,p.getX() + 55,height / 6 + 96,""String_Node_Str""));
  controlList.add(new GuiButton(ID_EDITTREE,p.getX() + 55,height / 6 + 120,""String_Node_Str""));
  controlList.add(new GuiButton(ID_HELP,p.getX() + 55,height / 6 + 144,""String_Node_Str""));
  controlList.add(new GuiButton(ID_DONE,p.getX() + 55,height / 6 + 168,""String_Node_Str""));
  String ciCompatibility=config.getProperty(InvTweaksConfig.PROP_CONVENIENT_INVENTORY_COMPATIBILITY);
  if (ciCompatibility == null || !ciCompatibility.equals(""String_Node_Str"")) {
    moveToButtonCoords(i++,p);
    controlList.add(new GuiSmallButton(ID_MIDDLE_CLICK,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK,MIDDLE_CLICK)));
  }
  moveToButtonCoords(i++,p);
  controlList.add(new GuiSmallButton(ID_CHESTS_BUTTONS,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_SHOW_CHEST_BUTTONS,CHEST_BUTTONS)));
  moveToButtonCoords(i++,p);
  controlList.add(new GuiSmallButton(ID_SORT_ON_PICKUP,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_SORTING_ON_PICKUP,SORT_ON_PICKUP)));
  if (!Desktop.isDesktopSupported()) {
    for (    Object o : controlList) {
      GuiButton button=(GuiButton)o;
      if (button.id == ID_EDITRULES || button.id < ID_EDITTREE) {
        button.enabled=false;
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void initGui(){
  Point p=new Point();
  int i=0;
  moveToButtonCoords(0,p);
  controlList.add(new GuiButton(ID_EDITRULES,p.getX() + 55,height / 6 + 96,""String_Node_Str""));
  controlList.add(new GuiButton(ID_EDITTREE,p.getX() + 55,height / 6 + 120,""String_Node_Str""));
  controlList.add(new GuiButton(ID_HELP,p.getX() + 55,height / 6 + 144,""String_Node_Str""));
  controlList.add(new GuiButton(ID_DONE,p.getX() + 55,height / 6 + 168,""String_Node_Str""));
  String middleClick=config.getProperty(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK);
  moveToButtonCoords(i++,p);
  GuiButton middleClickBtn=new GuiSmallButton(ID_MIDDLE_CLICK,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK,MIDDLE_CLICK));
  controlList.add(middleClickBtn);
  if (middleClick == InvTweaksConfig.VALUE_CI_COMPATIBILITY) {
    middleClickBtn.enabled=false;
  }
  moveToButtonCoords(i++,p);
  controlList.add(new GuiSmallButton(ID_CHESTS_BUTTONS,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_SHOW_CHEST_BUTTONS,CHEST_BUTTONS)));
  moveToButtonCoords(i++,p);
  controlList.add(new GuiSmallButton(ID_SORT_ON_PICKUP,p.getX(),p.getY(),computeBooleanButtonLabel(InvTweaksConfig.PROP_ENABLE_SORTING_ON_PICKUP,SORT_ON_PICKUP)));
  if (!Desktop.isDesktopSupported()) {
    for (    Object o : controlList) {
      GuiButton button=(GuiButton)o;
      if (button.id == ID_EDITRULES || button.id < ID_EDITTREE) {
        button.enabled=false;
      }
    }
  }
}",0.4012016021361815
178177,"private void toggleBooleanButton(GuiButton guibutton,String property,String label){
  Boolean enabled=!new Boolean(config.getProperty(property));
  config.setProperty(property,enabled.toString());
  guibutton.displayString=label + ((enabled) ? ON : OFF);
}","private void toggleBooleanButton(GuiButton guibutton,String property,String label){
  Boolean enabled=!new Boolean(config.getProperty(property));
  config.setProperty(property,enabled.toString());
  guibutton.displayString=computeBooleanButtonLabel(property,label);
}",0.8680688336520076
178178,"protected void addCategory(String parentCategory,ItemTreeCategory newCategory) throws NullPointerException {
  categories.get(parentCategory).addCategory(newCategory);
  categories.put(newCategory.getName(),newCategory);
}","protected void addCategory(String parentCategory,ItemTreeCategory newCategory) throws NullPointerException {
  categories.get(parentCategory.toLowerCase()).addCategory(newCategory);
  categories.put(newCategory.getName(),newCategory);
}",0.9694323144104804
178179,"protected void addItem(String parentCategory,ItemTreeItem newItem) throws NullPointerException {
  categories.get(parentCategory).addItem(newItem);
  if (itemsByName.containsKey(newItem.getName())) {
    itemsByName.get(newItem.getName()).add(newItem);
  }
 else {
    Vector<ItemTreeItem> list=new Vector<ItemTreeItem>();
    list.add(newItem);
    itemsByName.put(newItem.getName(),list);
  }
  if (itemsById.containsKey(newItem.getId())) {
    itemsById.get(newItem.getId()).add(newItem);
  }
 else {
    Vector<ItemTreeItem> list=new Vector<ItemTreeItem>();
    list.add(newItem);
    itemsById.put(newItem.getId(),list);
  }
}","protected void addItem(String parentCategory,ItemTreeItem newItem) throws NullPointerException {
  categories.get(parentCategory.toLowerCase()).addItem(newItem);
  if (itemsByName.containsKey(newItem.getName())) {
    itemsByName.get(newItem.getName()).add(newItem);
  }
 else {
    Vector<ItemTreeItem> list=new Vector<ItemTreeItem>();
    list.add(newItem);
    itemsByName.put(newItem.getName(),list);
  }
  if (itemsById.containsKey(newItem.getId())) {
    itemsById.get(newItem.getId()).add(newItem);
  }
 else {
    Vector<ItemTreeItem> list=new Vector<ItemTreeItem>();
    list.add(newItem);
    itemsById.put(newItem.getId(),list);
  }
}",0.9890282131661442
178180,"public ItemTreeCategory(String name){
  this.name=name;
}","public ItemTreeCategory(String name){
  this.name=(name != null) ? name.toLowerCase() : null;
}",0.75
178181,"private boolean onTick(){
  if (!cfgManager.makeSureConfigurationIsLoaded()) {
    return false;
  }
  InvTweaksConfig config=cfgManager.getConfig();
  GuiScreen currentScreen=getCurrentScreen();
  if (currentScreen == null || currentScreen instanceof GuiInventory) {
    cloneHotbar();
  }
  if (Keyboard.isKeyDown(getKeycode(sortKeyBinding))) {
    long currentTime=System.currentTimeMillis();
    if (sortingKeyPressedDate == 0) {
      sortingKeyPressedDate=currentTime;
    }
 else     if (currentTime - sortingKeyPressedDate > Const.RULESET_SWAP_DELAY) {
      String previousRuleset=config.getCurrentRulesetName();
      String newRuleset=config.switchConfig();
      if (newRuleset == null) {
        logInGameError(""String_Node_Str"",null);
      }
 else       if (!previousRuleset.equals(newRuleset)) {
        logInGame(""String_Node_Str"" + newRuleset + ""String_Node_Str"");
        handleSorting(currentScreen);
      }
      sortingKeyPressedDate=currentTime;
    }
  }
 else {
    sortingKeyPressedDate=0;
  }
  return true;
}","private boolean onTick(){
  InvTweaksConfig config=cfgManager.getConfig();
  if (config == null) {
    return false;
  }
  GuiScreen currentScreen=getCurrentScreen();
  if (currentScreen == null || currentScreen instanceof GuiInventory) {
    cloneHotbar();
  }
  if (Keyboard.isKeyDown(getKeycode(sortKeyBinding))) {
    long currentTime=System.currentTimeMillis();
    if (sortingKeyPressedDate == 0) {
      sortingKeyPressedDate=currentTime;
    }
 else     if (currentTime - sortingKeyPressedDate > Const.RULESET_SWAP_DELAY) {
      String previousRuleset=config.getCurrentRulesetName();
      String newRuleset=config.switchConfig();
      if (newRuleset == null) {
        logInGameError(""String_Node_Str"",null);
      }
 else       if (!previousRuleset.equals(newRuleset)) {
        logInGame(""String_Node_Str"" + newRuleset + ""String_Node_Str"");
        handleSorting(currentScreen);
      }
      sortingKeyPressedDate=currentTime;
    }
  }
 else {
    sortingKeyPressedDate=0;
  }
  return true;
}",0.9408312958435208
178182,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void handleMiddleClick(GuiScreen guiScreen){
  if (Mouse.isButtonDown(2)) {
    if (!cfgManager.makeSureConfigurationIsLoaded()) {
      return;
    }
    InvTweaksConfig config=cfgManager.getConfig();
    String ciCompatibility=config.getProperty(InvTweaksConfig.PROP_CONVENIENT_INVENTORY_COMPATIBILITY);
    if (ciCompatibility == null) {
      try {
        Class convenientInventory=Class.forName(""String_Node_Str"");
        boolean defaultCISortingShortcutEnabled=false;
        Field actionMapField=convenientInventory.getDeclaredField(""String_Node_Str"");
        actionMapField.setAccessible(true);
        List<Integer> actionMap[][]=(List[][])actionMapField.get(null);
        if (actionMap[7] != null) {
          for (          List<Integer> combo : actionMap[7]) {
            if (combo != null && combo.size() == 1 && combo.get(0) == 2) {
              defaultCISortingShortcutEnabled=true;
              break;
            }
          }
        }
        if (defaultCISortingShortcutEnabled) {
          config.setProperty(InvTweaksConfig.PROP_CONVENIENT_INVENTORY_COMPATIBILITY,""String_Node_Str"");
        }
      }
 catch (      ClassNotFoundException e) {
        logInGameError(""String_Node_Str"",null);
      }
catch (      Exception e) {
        logInGameError(""String_Node_Str"",e);
      }
    }
    if (!config.getProperty(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK).equals(""String_Node_Str"") && (ciCompatibility == null || !ciCompatibility.equals(""String_Node_Str""))) {
      if (!chestAlgorithmButtonDown) {
        chestAlgorithmButtonDown=true;
        if (isChestOrDispenser(guiScreen)) {
          GuiContainer guiContainer=(GuiContainer)guiScreen;
          Container container=getContainer((GuiContainer)guiScreen);
          int slotCount=getSlots(container).size();
          int mouseX=(Mouse.getEventX() * guiContainer.width) / mc.displayWidth;
          int mouseY=guiContainer.height - (Mouse.getEventY() * guiContainer.height) / mc.displayHeight - 1;
          int target=0;
          for (int i=0; i < slotCount; i++) {
            Slot slot=getSlot(container,i);
            int k=(guiContainer.width - guiContainer.xSize) / 2;
            int l=(guiContainer.height - guiContainer.ySize) / 2;
            if (mouseX - k >= slot.xDisplayPosition - 1 && mouseX - k < slot.xDisplayPosition + 16 + 1 && mouseY - l >= slot.yDisplayPosition - 1 && mouseY - l < slot.yDisplayPosition + 16 + 1) {
              target=(i < slotCount - Const.INVENTORY_SIZE) ? 1 : 2;
              break;
            }
          }
          if (target == 1) {
            mc.theWorld.playSoundAtEntity(getThePlayer(),""String_Node_Str"",0.2F,1.8F);
            long timestamp=System.currentTimeMillis();
            if (timestamp - chestAlgorithmClickTimestamp > Const.CHEST_ALGORITHM_SWAP_MAX_INTERVAL) {
              chestAlgorithm=InventoryAlgorithms.DEFAULT;
            }
            try {
              cfgManager.getInventoryAlgorithms().sortContainer(container,false,chestAlgorithm);
            }
 catch (            TimeoutException e) {
              logInGameError(""String_Node_Str"",e);
            }
            chestAlgorithm=(chestAlgorithm + 1) % 3;
            chestAlgorithmClickTimestamp=timestamp;
          }
 else           if (target == 2) {
            handleSorting(guiScreen);
          }
        }
 else {
          handleSorting(guiScreen);
        }
      }
    }
  }
 else {
    chestAlgorithmButtonDown=false;
  }
}","private void handleMiddleClick(GuiScreen guiScreen){
  if (Mouse.isButtonDown(2)) {
    if (!cfgManager.makeSureConfigurationIsLoaded()) {
      return;
    }
    InvTweaksConfig config=cfgManager.getConfig();
    if (!config.getProperty(InvTweaksConfig.PROP_ENABLE_MIDDLE_CLICK).equals(InvTweaksConfig.VALUE_TRUE)) {
      if (!chestAlgorithmButtonDown) {
        chestAlgorithmButtonDown=true;
        if (isChestOrDispenser(guiScreen)) {
          GuiContainer guiContainer=(GuiContainer)guiScreen;
          Container container=getContainer((GuiContainer)guiScreen);
          int slotCount=getSlots(container).size();
          int mouseX=(Mouse.getEventX() * guiContainer.width) / mc.displayWidth;
          int mouseY=guiContainer.height - (Mouse.getEventY() * guiContainer.height) / mc.displayHeight - 1;
          int target=0;
          for (int i=0; i < slotCount; i++) {
            Slot slot=getSlot(container,i);
            int k=(guiContainer.width - guiContainer.xSize) / 2;
            int l=(guiContainer.height - guiContainer.ySize) / 2;
            if (mouseX - k >= slot.xDisplayPosition - 1 && mouseX - k < slot.xDisplayPosition + 16 + 1 && mouseY - l >= slot.yDisplayPosition - 1 && mouseY - l < slot.yDisplayPosition + 16 + 1) {
              target=(i < slotCount - Const.INVENTORY_SIZE) ? 1 : 2;
              break;
            }
          }
          if (target == 1) {
            mc.theWorld.playSoundAtEntity(getThePlayer(),""String_Node_Str"",0.2F,1.8F);
            long timestamp=System.currentTimeMillis();
            if (timestamp - chestAlgorithmClickTimestamp > Const.CHEST_ALGORITHM_SWAP_MAX_INTERVAL) {
              chestAlgorithm=InventoryAlgorithms.DEFAULT;
            }
            try {
              cfgManager.getInventoryAlgorithms().sortContainer(container,false,chestAlgorithm);
            }
 catch (            TimeoutException e) {
              logInGameError(""String_Node_Str"",e);
            }
            chestAlgorithm=(chestAlgorithm + 1) % 3;
            chestAlgorithmClickTimestamp=timestamp;
          }
 else           if (target == 2) {
            handleSorting(guiScreen);
          }
        }
 else {
          handleSorting(guiScreen);
        }
      }
    }
  }
 else {
    chestAlgorithmButtonDown=false;
  }
}",0.7782945736434108
178183,"/** 
 * Creates an instance of the mod, and loads the configuration from the files, creating them if necessary.
 * @param mc
 */
public InvTweaks(Minecraft mc){
  super(mc);
  log.setLevel(Const.DEFAULT_LOG_LEVEL);
  instance=this;
  cfgManager=new InvTweaksConfigManager(mc);
  if (cfgManager.makeSureConfigurationIsLoaded()) {
    log.info(""String_Node_Str"");
  }
 else {
    log.severe(""String_Node_Str"");
  }
}","/** 
 * Creates an instance of the mod, and loads the configuration from the files, creating them if necessary.
 * @param mc
 */
public InvTweaks(Minecraft mc){
  super(mc);
  log.setLevel(Const.DEFAULT_LOG_LEVEL);
  instance=this;
  cfgManager=new InvTweaksConfigManager(mc);
  if (cfgManager.makeSureConfigurationIsLoaded()) {
    log.info(""String_Node_Str"");
    resolveConvenientInventoryConflicts();
  }
 else {
    log.severe(""String_Node_Str"");
  }
}",0.9506314580941446
178184,"/** 
 * Autoreplace + middle click sorting
 */
public void onTick(){
  if (config == null || onTickBusy == true)   return;
  if (Mouse.isButtonDown(2) && config.isMiddleClickEnabled())   onSortingKeyPressed();
synchronized (this) {
    onTickBusy=true;
    ItemStack currentStack=getFocusedStack();
    int currentStackId=(currentStack == null) ? 0 : getItemID(currentStack);
    int currentStackDamage=(currentStack == null) ? 0 : getItemDamage(currentStack);
    int focusedSlot=getFocusedSlot();
    if (currentStackId != storedStackId || currentStackDamage != storedStackDamage) {
      if (storedFocusedSlot != focusedSlot) {
        storedFocusedSlot=focusedSlot;
      }
 else       if ((currentStack == null || getItemID(currentStack) == 281 && storedStackId == 282) && (getCurrentScreen() == null || getCurrentScreen() instanceof GuiEditSign)) {
        sortingAlgorithm.autoReplaceSlot(focusedSlot,storedStackId,storedStackDamage);
      }
    }
    storedStackId=currentStackId;
    storedStackDamage=currentStackDamage;
  }
}","/** 
 * Autoreplace + middle click sorting
 */
public void onTick(){
  if (config == null)   return;
  if (Mouse.isButtonDown(2) && config.isMiddleClickEnabled())   onSortingKeyPressed();
synchronized (this) {
    ItemStack currentStack=getFocusedStack();
    int currentStackId=(currentStack == null) ? 0 : getItemID(currentStack);
    int currentStackDamage=(currentStack == null) ? 0 : getItemDamage(currentStack);
    int focusedSlot=getFocusedSlot();
    if (currentStackId != storedStackId || currentStackDamage != storedStackDamage) {
      if (storedFocusedSlot != focusedSlot) {
        storedFocusedSlot=focusedSlot;
      }
 else       if ((currentStack == null || getItemID(currentStack) == 281 && storedStackId == 282) && (getCurrentScreen() == null || getCurrentScreen() instanceof GuiEditSign)) {
        sortingAlgorithm.autoReplaceSlot(focusedSlot,storedStackId,storedStackDamage);
      }
    }
    storedStackId=currentStackId;
    storedStackDamage=currentStackDamage;
  }
}",0.9788281634662728
178185,"/** 
 * Autoreplace + middle click sorting
 */
public void autoReplaceSlot(int slot,int wantedId,int wantedDamage){
  InvTweaksInventory inventory=new InvTweaksInventory(mc,config.getLockPriorities());
  ItemStack candidateStack, replacementStack=null;
  ItemStack storedStack=createItemStack(wantedId,1,wantedDamage);
  int selectedStackId=-1;
  for (int i=0; i < InvTweaks.INVENTORY_SIZE; i++) {
    candidateStack=inventory.getItemStack(i);
    if (candidateStack != null && inventory.areSameItem(storedStack,candidateStack) && config.canBeAutoReplaced(getItemID(candidateStack),getItemDamage(candidateStack))) {
      if (replacementStack == null || getStackSize(replacementStack) > getStackSize(candidateStack) || (getStackSize(replacementStack) == getStackSize(candidateStack) && getMaxStackSize(replacementStack) == 1 && getItemDamage(replacementStack) < getItemDamage(candidateStack))) {
        replacementStack=candidateStack;
        selectedStackId=i;
      }
    }
  }
  if (replacementStack != null) {
    log.info(""String_Node_Str"");
    new Thread(new Runnable(){
      private InvTweaksInventory inventory;
      private int currentItem;
      private int i, expectedItemId;
      public Runnable init(      InvTweaksInventory inventory,      int i,      int currentItem){
        this.inventory=inventory;
        this.currentItem=currentItem;
        this.expectedItemId=getItemID(inventory.getItemStack(i));
        this.i=i;
        return this;
      }
      public void run(){
        if (isMultiplayerWorld()) {
          int pollingTime=0;
          setHasInventoryChanged(false);
          while (!hasInventoryChanged() && pollingTime < POLLING_TIMEOUT) {
            trySleep(POLLING_DELAY);
          }
          if (pollingTime < AUTOREPLACE_DELAY)           trySleep(AUTOREPLACE_DELAY - pollingTime);
          if (pollingTime >= POLLING_TIMEOUT)           log.warning(""String_Node_Str"");
        }
 else {
          trySleep(AUTOREPLACE_DELAY);
        }
        try {
          ItemStack stack=inventory.getItemStack(i);
          if (stack != null && getItemID(stack) == expectedItemId) {
            inventory.moveStack(i,currentItem,Integer.MAX_VALUE);
          }
        }
 catch (        NullPointerException e) {
        }
      }
    }
.init(inventory,selectedStackId,wantedId)).start();
  }
}","/** 
 * Autoreplace + middle click sorting
 */
public void autoReplaceSlot(int slot,int wantedId,int wantedDamage){
  InvTweaksInventory inventory=new InvTweaksInventory(mc,config.getLockPriorities());
  ItemStack candidateStack, replacementStack=null;
  ItemStack storedStack=createItemStack(wantedId,1,wantedDamage);
  int replacementStackSlot=-1;
  for (int i=0; i < InvTweaks.INVENTORY_SIZE; i++) {
    candidateStack=inventory.getItemStack(i);
    if (candidateStack != null && inventory.areSameItem(storedStack,candidateStack) && config.canBeAutoReplaced(getItemID(candidateStack),getItemDamage(candidateStack))) {
      if (replacementStack == null || getStackSize(replacementStack) > getStackSize(candidateStack) || (getStackSize(replacementStack) == getStackSize(candidateStack) && getMaxStackSize(replacementStack) == 1 && getItemDamage(replacementStack) < getItemDamage(candidateStack))) {
        replacementStack=candidateStack;
        replacementStackSlot=i;
      }
    }
  }
  if (replacementStack != null) {
    log.info(""String_Node_Str"");
    new Thread(new Runnable(){
      private InvTweaksInventory inventory;
      private int targetedSlot;
      private int i, expectedItemId;
      public Runnable init(      InvTweaksInventory inventory,      int i,      int currentItem){
        this.inventory=inventory;
        this.targetedSlot=currentItem;
        this.expectedItemId=getItemID(inventory.getItemStack(i));
        this.i=i;
        return this;
      }
      public void run(){
        if (isMultiplayerWorld()) {
          int pollingTime=0;
          setHasInventoryChanged(false);
          while (!hasInventoryChanged() && pollingTime < POLLING_TIMEOUT) {
            trySleep(POLLING_DELAY);
          }
          if (pollingTime < AUTOREPLACE_DELAY)           trySleep(AUTOREPLACE_DELAY - pollingTime);
          if (pollingTime >= POLLING_TIMEOUT)           log.warning(""String_Node_Str"");
        }
 else {
          trySleep(AUTOREPLACE_DELAY);
        }
        try {
          ItemStack stack=inventory.getItemStack(i);
          if (stack != null && getItemID(stack) == expectedItemId) {
            inventory.moveStack(i,targetedSlot,Integer.MAX_VALUE);
          }
        }
 catch (        NullPointerException e) {
        }
      }
    }
.init(inventory,replacementStackSlot,slot)).start();
  }
}",0.9602564102564104
178186,"public Runnable init(InvTweaksInventory inventory,int i,int currentItem){
  this.inventory=inventory;
  this.currentItem=currentItem;
  this.expectedItemId=getItemID(inventory.getItemStack(i));
  this.i=i;
  return this;
}","public Runnable init(InvTweaksInventory inventory,int i,int currentItem){
  this.inventory=inventory;
  this.targetedSlot=currentItem;
  this.expectedItemId=getItemID(inventory.getItemStack(i));
  this.i=i;
  return this;
}",0.9483146067415732
178187,"public void run(){
  if (isMultiplayerWorld()) {
    int pollingTime=0;
    setHasInventoryChanged(false);
    while (!hasInventoryChanged() && pollingTime < POLLING_TIMEOUT) {
      trySleep(POLLING_DELAY);
    }
    if (pollingTime < AUTOREPLACE_DELAY)     trySleep(AUTOREPLACE_DELAY - pollingTime);
    if (pollingTime >= POLLING_TIMEOUT)     log.warning(""String_Node_Str"");
  }
 else {
    trySleep(AUTOREPLACE_DELAY);
  }
  try {
    ItemStack stack=inventory.getItemStack(i);
    if (stack != null && getItemID(stack) == expectedItemId) {
      inventory.moveStack(i,currentItem,Integer.MAX_VALUE);
    }
  }
 catch (  NullPointerException e) {
  }
}","public void run(){
  if (isMultiplayerWorld()) {
    int pollingTime=0;
    setHasInventoryChanged(false);
    while (!hasInventoryChanged() && pollingTime < POLLING_TIMEOUT) {
      trySleep(POLLING_DELAY);
    }
    if (pollingTime < AUTOREPLACE_DELAY)     trySleep(AUTOREPLACE_DELAY - pollingTime);
    if (pollingTime >= POLLING_TIMEOUT)     log.warning(""String_Node_Str"");
  }
 else {
    trySleep(AUTOREPLACE_DELAY);
  }
  try {
    ItemStack stack=inventory.getItemStack(i);
    if (stack != null && getItemID(stack) == expectedItemId) {
      inventory.moveStack(i,targetedSlot,Integer.MAX_VALUE);
    }
  }
 catch (  NullPointerException e) {
  }
}",0.9824828636709824
178188,"public boolean contains(String item){
  if (items.contains(item)) {
    return true;
  }
  for (  SortButtonCategory category : categories) {
    if (category.contains(item)) {
      return true;
    }
  }
  return false;
}","public boolean contains(String item){
  if (items.contains(item)) {
    return true;
  }
  for (  SortButtonCategory category : subCategories) {
    if (category.contains(item)) {
      return true;
    }
  }
  return false;
}",0.9888641425389756
178189,"public int getKeywordPriority(String keyword){
  if (items.contains(keyword)) {
    return items.indexOf(keyword);
  }
 else   if (categories.contains(keyword)) {
    return 100;
  }
 else {
    int result;
    for (    SortButtonCategory category : categories) {
      result=category.getKeywordPriority(keyword);
      if (result != -1)       return result + 100;
    }
    return -1;
  }
}","public int getKeywordPriority(String keyword){
  if (keyword.equals(name)) {
    return 0;
  }
 else   if (items.contains(keyword)) {
    return items.size() - items.indexOf(keyword);
  }
 else {
    int result;
    for (    SortButtonCategory category : subCategories) {
      result=category.getKeywordPriority(keyword);
      if (result != -1)       return result + 100;
    }
    return -1;
  }
}",0.4090909090909091
178190,"/** 
 * Returns a references to all categories contained in this one.
 * @return
 */
public Collection<SortButtonCategory> getSubCategories(){
  return categories;
}","/** 
 * Returns a references to all categories contained in this one.
 * @return
 */
public Collection<SortButtonCategory> getSubCategories(){
  return subCategories;
}",0.984984984984985
178191,"public SortButtonCategory addCategory(SortButtonCategory category){
  categories.add(category);
  return this;
}","public void addCategory(SortButtonCategory category){
  subCategories.add(category);
}",0.797979797979798
178192,"/** 
 * WARNING: Currently not thread-safe
 */
public void load() throws FileNotFoundException, IOException {
  File f=new File(file);
  char[] bytes=new char[(int)f.length()];
  FileReader reader=new FileReader(f);
  reader.read(bytes);
  String[] config=String.valueOf(bytes).replace(""String_Node_Str"",""String_Node_Str"").replace('\r','\n').split(""String_Node_Str"");
  rules.clear();
  String lineText;
  SortButtonRule newRule;
  int currentLine=0;
  while (currentLine < config.length) {
    lineText=config[currentLine++];
    if (lineText.matches(""String_Node_Str"")) {
      String[] words=lineText.split(""String_Node_Str"");
      if (words.length == 2) {
        if (SortButtonKeywords.isValid(words[1])) {
          newRule=new SortButtonRule(words[0],words[1]);
          rules.add(newRule);
        }
 else {
          invalidKeywords.add(words[1]);
        }
      }
    }
  }
  Collections.sort(rules);
  Collections.reverse(rules);
}","/** 
 * WARNING: Currently not thread-safe
 */
public void load() throws FileNotFoundException, IOException {
  File f=new File(file);
  char[] bytes=new char[(int)f.length()];
  FileReader reader=new FileReader(f);
  reader.read(bytes);
  String[] config=String.valueOf(bytes).replace(""String_Node_Str"",""String_Node_Str"").replace('\r','\n').split(""String_Node_Str"");
  rules.clear();
  String lineText;
  SortButtonRule newRule;
  int currentLine=0;
  while (currentLine < config.length) {
    lineText=config[currentLine++];
    if (lineText.matches(""String_Node_Str"")) {
      String[] words=lineText.split(""String_Node_Str"");
      if (words.length == 2) {
        if (SortButtonTree.isKeywordValid(words[1])) {
          newRule=new SortButtonRule(words[0],words[1]);
          rules.add(newRule);
        }
 else {
          invalidKeywords.add(words[1]);
        }
      }
    }
  }
  Collections.sort(rules,Collections.reverseOrder());
}",0.984126984126984
178193,"public SortButtonRule(String constraint,String keyword){
  this.keyword=keyword;
  this.constraint=constraint;
  int column=-1, row=-1;
  boolean reverse=false;
  for (int i=0; i < constraint.length(); i++) {
    char c=constraint.charAt(i);
    if (c <= '9')     column=c - '1';
 else     if (c == 'r') {
      reverse=true;
    }
 else {
switch (c) {
case 'A':
        row=1;
      break;
case 'B':
    row=2;
  break;
case 'C':
row=3;
break;
case 'D':
row=0;
}
}
}
if (column != -1 && row != -1) {
type=RuleType.TILE;
preferredPositions=new int[]{index(row,column)};
}
 else if (row != -1) {
type=RuleType.ROW;
preferredPositions=new int[9];
for (int i=0; i < 9; i++) {
preferredPositions[i]=index(row,reverse ? 8 - i : i);
}
}
 else {
type=RuleType.COLUMN;
preferredPositions=new int[]{index(0,column),index(3,column),index(2,column),index(1,column)};
}
priority=type.priority * 10000 + SortButtonKeywords.getKeywordPriority(keyword);
}","public SortButtonRule(String constraint,String keyword){
  this.keyword=keyword;
  this.constraint=constraint;
  int column=-1, row=-1;
  boolean reverse=false;
  for (int i=0; i < constraint.length(); i++) {
    char c=constraint.charAt(i);
    if (c <= '9')     column=c - '1';
 else     if (c == 'r') {
      reverse=true;
    }
 else {
switch (c) {
case 'A':
        row=1;
      break;
case 'B':
    row=2;
  break;
case 'C':
row=3;
break;
case 'D':
row=0;
}
}
}
if (column != -1 && row != -1) {
type=RuleType.TILE;
preferredPositions=new int[]{index(row,column)};
}
 else if (row != -1) {
type=RuleType.ROW;
preferredPositions=new int[9];
for (int i=0; i < 9; i++) {
preferredPositions[i]=index(row,reverse ? 8 - i : i);
}
}
 else {
type=RuleType.COLUMN;
preferredPositions=new int[]{index(0,column),index(3,column),index(2,column),index(1,column)};
}
priority=type.priority * 10000 + SortButtonTree.getKeywordPriority(keyword);
}",0.9936034115138592
178194,"/** 
 * Compares rules priority : positive value means 'this' is of greater priority than o
 */
@Override public int compareTo(SortButtonRule o){
  return this.getPriority() - o.getPriority();
}","/** 
 * Compares rules priority : positive value means 'this' is of greater priority than o
 */
@Override public int compareTo(SortButtonRule o){
  return getPriority() - o.getPriority();
}",0.9869451697127938
178195,"/** 
 * Add object from new ghost data, no corresponding change version so this came from an index request
 */
protected void addObjectWithGhost(final Ghost ghost){
  executor.execute(new Runnable(){
    @Override public void run(){
      ghostStore.saveGhost(Bucket.this,ghost);
      T object=buildObject(ghost);
      addObject(object);
    }
  }
);
}","/** 
 */
protected void addObjectWithGhost(final Ghost ghost,final Runnable runnable){
  executor.execute(new Runnable(){
    @Override public void run(){
      ghostStore.saveGhost(Bucket.this,ghost);
      T object=buildObject(ghost);
      addObject(object);
      if (runnable != null) {
        runnable.run();
      }
    }
  }
);
}",0.5924855491329479
178196,"private void notifyProgress(){
  bucket.notifyOnNetworkChangeListeners(Bucket.ChangeType.INDEX);
}","private void notifyProgress(){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + Channel.this);
  }
  mBucket.notifyOnNetworkChangeListeners(Bucket.ChangeType.INDEX);
}",0.7003610108303249
178197,"public void next(){
  if (!queue.isEmpty()) {
    String versionString=queue.get(0);
    ObjectVersion version;
    try {
      version=ObjectVersion.parseString(versionString);
    }
 catch (    ObjectVersionParseException e) {
      Logger.log(TAG,""String_Node_Str"",e);
      queue.remove(versionString);
      next();
      return;
    }
    if (!bucket.hasKeyVersion(version.getKey(),version.getVersion())) {
      sendMessage(String.format(""String_Node_Str"",COMMAND_ENTITY,version.toString()));
    }
 else {
      Logger.log(TAG,String.format(""String_Node_Str"",version));
      queue.remove(versionString);
      next();
      return;
    }
    return;
  }
  if (nextQuery != null) {
    sendMessage(nextQuery.toString());
    return;
  }
  complete=true;
  notifyDone();
}","public void next(){
  if (!mQueue.isEmpty()) {
    String versionString=mQueue.get(0);
    ObjectVersion version;
    try {
      version=ObjectVersion.parseString(versionString);
    }
 catch (    ObjectVersionParseException e) {
      Logger.log(TAG,""String_Node_Str"",e);
      mQueue.remove(versionString);
      next();
      return;
    }
    if (!mBucket.hasKeyVersion(version.getKey(),version.getVersion())) {
      sendMessage(String.format(""String_Node_Str"",COMMAND_ENTITY,version.toString()));
    }
 else {
      Logger.log(TAG,String.format(""String_Node_Str"",version));
      mQueue.remove(versionString);
      next();
      return;
    }
    return;
  }
  if (mNextQuery != null) {
    sendMessage(mNextQuery.toString());
    return;
  }
  mComplete=true;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + Channel.this);
  }
  if (mReceivedCount == mIndexedCount) {
    notifyDone();
  }
}",0.910809214412286
178198,"/** 
 * Add the page of data, but only if indexPage cv matches. Detects when it's the last page due to absence of cursor mark
 */
public Boolean addIndexPage(JSONObject indexPage){
  String currentIndex;
  try {
    currentIndex=indexPage.getString(INDEX_CURRENT_VERSION_KEY);
  }
 catch (  JSONException e) {
    Logger.log(TAG,String.format(""String_Node_Str"",cv));
    currentIndex=""String_Node_Str"";
  }
  if (!currentIndex.equals(cv)) {
    return false;
  }
  JSONArray indexVersions;
  try {
    indexVersions=indexPage.getJSONArray(INDEX_VERSIONS_KEY);
  }
 catch (  JSONException e) {
    Logger.log(TAG,String.format(""String_Node_Str"",indexPage));
    return true;
  }
  if (indexVersions.length() > 0) {
    for (int i=0; i < indexVersions.length(); i++) {
      try {
        JSONObject version=indexVersions.getJSONObject(i);
        String key=version.getString(INDEX_OBJECT_ID_KEY);
        Integer versionNumber=version.getInt(INDEX_OBJECT_VERSION_KEY);
        ObjectVersion objectVersion=new ObjectVersion(key,versionNumber);
        queue.add(objectVersion.toString());
      }
 catch (      JSONException e) {
        Logger.log(TAG,String.format(""String_Node_Str"",i),e);
      }
    }
  }
  String nextMark=null;
  if (indexPage.has(INDEX_MARK_KEY)) {
    try {
      nextMark=indexPage.getString(INDEX_MARK_KEY);
    }
 catch (    JSONException e) {
      nextMark=null;
    }
  }
  if (nextMark != null && nextMark.length() > 0) {
    nextQuery=new IndexQuery(nextMark);
  }
 else {
    nextQuery=null;
  }
  next();
  return true;
}","/** 
 * Add the page of data, but only if indexPage cv matches. Detects when it's the last page due to absence of cursor mark
 */
public Boolean addIndexPage(JSONObject indexPage){
  String currentIndex;
  try {
    currentIndex=indexPage.getString(INDEX_CURRENT_VERSION_KEY);
  }
 catch (  JSONException e) {
    Logger.log(TAG,String.format(""String_Node_Str"",mCv));
    currentIndex=""String_Node_Str"";
  }
  if (!currentIndex.equals(mCv)) {
    return false;
  }
  JSONArray indexVersions;
  try {
    indexVersions=indexPage.getJSONArray(INDEX_VERSIONS_KEY);
  }
 catch (  JSONException e) {
    Logger.log(TAG,String.format(""String_Node_Str"",indexPage));
    return true;
  }
  if (indexVersions.length() > 0) {
    for (int i=0; i < indexVersions.length(); i++) {
      try {
        JSONObject version=indexVersions.getJSONObject(i);
        String key=version.getString(INDEX_OBJECT_ID_KEY);
        Integer versionNumber=version.getInt(INDEX_OBJECT_VERSION_KEY);
        ObjectVersion objectVersion=new ObjectVersion(key,versionNumber);
        mQueue.add(objectVersion.toString());
synchronized (mCountLock) {
          mReceivedCount++;
        }
      }
 catch (      JSONException e) {
        Logger.log(TAG,String.format(""String_Node_Str"",i),e);
      }
    }
  }
  String nextMark=null;
  if (indexPage.has(INDEX_MARK_KEY)) {
    try {
      nextMark=indexPage.getString(INDEX_MARK_KEY);
    }
 catch (    JSONException e) {
      nextMark=null;
    }
  }
  if (nextMark != null && nextMark.length() > 0) {
    mNextQuery=new IndexQuery(nextMark);
  }
 else {
    mNextQuery=null;
  }
  next();
  return true;
}",0.9745363093366866
178199,"public IndexProcessor(Bucket bucket,String cv,IndexProcessorListener listener){
  this.bucket=bucket;
  this.cv=cv;
  this.listener=listener;
}","public IndexProcessor(Bucket bucket,String cv,IndexProcessorListener listener){
  mBucket=bucket;
  mCv=cv;
  mListener=listener;
}",0.9124087591240876
178200,"/** 
 * Receive an object's version data and store it. Send the request for the next object.
 */
public void addObjectData(ObjectVersionData objectVersion) throws ObjectVersionUnexpectedException {
  if (!queue.remove(objectVersion.toString()))   throw new ObjectVersionUnexpectedException(objectVersion);
  Ghost ghost=new Ghost(objectVersion.getKey(),objectVersion.getVersion(),objectVersion.getData());
  bucket.addObjectWithGhost(ghost);
  indexedCount++;
  if (indexedCount % 10 == 0) {
    notifyProgress();
  }
  next();
}","/** 
 * Receive an object's version data and store it. Send the request for the next object.
 */
public void addObjectData(ObjectVersionData objectVersion) throws ObjectVersionUnexpectedException {
  if (!mQueue.remove(objectVersion.toString()))   throw new ObjectVersionUnexpectedException(objectVersion);
  Ghost ghost=new Ghost(objectVersion.getKey(),objectVersion.getVersion(),objectVersion.getData());
  mBucket.addObjectWithGhost(ghost,new Runnable(){
    @Override public void run(){
synchronized (mCountLock) {
        mIndexedCount++;
        if (mIndexedCount % 10 == 0) {
          notifyProgress();
        }
      }
      if (mComplete && mReceivedCount == mIndexedCount) {
        notifyDone();
      }
    }
  }
);
  next();
}",0.8125984251968504
178201,"private void notifyDone(){
  bucket.indexComplete(cv);
  listener.onComplete(cv);
}","synchronized private void notifyDone(){
  if (mNotified) {
    return;
  }
  mNotified=true;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + Channel.this);
  }
  mBucket.indexComplete(mCv);
  mListener.onComplete(mCv);
}",0.4620253164556962
178202,"/** 
 * If the index is done processing
 */
public boolean isComplete(){
  return complete;
}","/** 
 * If the index is done processing
 */
public boolean isComplete(){
  return mComplete;
}",0.983957219251337
178203,"public void testApplyRemoteChange() throws Exception {
  Note note=mBucket.newObject();
  note.setContent(""String_Node_Str"");
  note.save();
  JSONObject external=new JSONObject(note.getDiffableValue().toString());
  external.put(""String_Node_Str"",""String_Node_Str"");
  RemoteChange change=RemoteChangesUtil.buildRemoteChange(note,external);
  mBucket.applyRemoteChange(change);
  assertEquals(""String_Node_Str"",note.getContent());
}","public void testApplyRemoteChange() throws Exception {
  Note note=mBucket.newObject();
  note.setContent(""String_Node_Str"");
  note.save();
  JSONObject external=new JSONObject(note.getDiffableValue().toString());
  external.put(""String_Node_Str"",""String_Node_Str"");
  note.setTitle(""String_Node_Str"");
  RemoteChange change=RemoteChangesUtil.buildRemoteChange(note,external);
  mBucket.applyRemoteChange(change);
  assertEquals(""String_Node_Str"",note.getContent());
}",0.9600886917960088
178204,"public void testTransformStringDiff() throws Exception {
  String origin=""String_Node_Str"";
  String target=""String_Node_Str"";
  JSONObject diff_1=JSONDiff.diff(origin,""String_Node_Str"");
  JSONObject diff_2=JSONDiff.diff(origin,""String_Node_Str"");
  JSONObject transformed=JSONDiff.transform(diff_2.getString(""String_Node_Str""),diff_1.getString(""String_Node_Str""),origin);
  assertEquals(target,JSONDiff.apply(origin,transformed));
}","public void testTransformStringDiff() throws Exception {
  String origin=""String_Node_Str"";
  String target=""String_Node_Str"";
  JSONObject diff_1=JSONDiff.diff(origin,""String_Node_Str"");
  JSONObject diff_2=JSONDiff.diff(origin,""String_Node_Str"");
  JSONObject transformed=JSONDiff.transform(diff_2.getString(""String_Node_Str""),diff_1.getString(""String_Node_Str""),origin);
  assertEquals(target,JSONDiff.apply(JSONDiff.apply(origin,diff_1),transformed));
}",0.9607182940516272
178205,"public Ghost applyRemoteChange(RemoteChange change) throws RemoteChangeInvalidException {
  Ghost updatedGhost=null;
  if (change.isRemoveOperation()) {
    try {
      removeObjectWithKey(change.getKey());
      ghostStore.deleteGhost(this,change.getKey());
    }
 catch (    BucketObjectMissingException e) {
      throw (new RemoteChangeInvalidException(change,e));
    }
  }
 else {
    try {
      T object=null;
      Boolean isNew=false;
      if (change.isAddOperation()) {
        object=newObject(change.getKey());
        isNew=true;
      }
 else {
        object=getObject(change.getKey());
        isNew=false;
        notifyOnBeforeUpdateObjectListeners(object);
      }
      Ghost ghost=object.getGhost();
      JSONObject localModifications=null;
      JSONObject currentProperties=ghost.getDiffableValue();
      try {
        localModifications=JSONDiff.diff(currentProperties,object.getDiffableValue());
      }
 catch (      JSONException e) {
        localModifications=new JSONObject();
      }
      updatedGhost=change.apply(ghost);
      JSONObject updatedProperties=JSONDiff.deepCopy(updatedGhost.getDiffableValue());
      ghostStore.saveGhost(this,updatedGhost);
      object.setGhost(updatedGhost);
      if (isNew) {
        schema.updateWithDefaults(object,updatedProperties);
        addObject(object);
      }
 else {
        if (localModifications != null && localModifications.length() > 0) {
          try {
            JSONObject incomingDiff=change.getPatch();
            JSONObject localDiff=localModifications.getJSONObject(JSONDiff.DIFF_VALUE_KEY);
            JSONObject transformedDiff=JSONDiff.transform(localDiff,incomingDiff,currentProperties);
            updatedProperties=JSONDiff.apply(currentProperties,transformedDiff);
          }
 catch (          JSONException e) {
          }
        }
        schema.update(object,updatedProperties);
        updateObject(object);
      }
    }
 catch (    SimperiumException e) {
      Logger.log(TAG,String.format(""String_Node_Str"",change),e);
      throw (new RemoteChangeInvalidException(change,e));
    }
  }
  setChangeVersion(change.getChangeVersion());
  change.setApplied();
  ChangeType type=change.isRemoveOperation() ? ChangeType.REMOVE : ChangeType.MODIFY;
  notifyOnNetworkChangeListeners(type,change.getKey());
  return updatedGhost;
}","public Ghost applyRemoteChange(RemoteChange change) throws RemoteChangeInvalidException {
  Ghost updatedGhost=null;
  if (change.isRemoveOperation()) {
    try {
      removeObjectWithKey(change.getKey());
      ghostStore.deleteGhost(this,change.getKey());
    }
 catch (    BucketObjectMissingException e) {
      throw (new RemoteChangeInvalidException(change,e));
    }
  }
 else {
    try {
      T object=null;
      Boolean isNew=false;
      if (change.isAddOperation()) {
        object=newObject(change.getKey());
        isNew=true;
      }
 else {
        object=getObject(change.getKey());
        isNew=false;
        notifyOnBeforeUpdateObjectListeners(object);
      }
      Ghost ghost=object.getGhost();
      JSONObject localModifications=null;
      JSONObject currentProperties=ghost.getDiffableValue();
      try {
        localModifications=JSONDiff.diff(currentProperties,object.getDiffableValue());
      }
 catch (      JSONException e) {
        localModifications=new JSONObject();
      }
      updatedGhost=change.apply(ghost);
      JSONObject updatedProperties=JSONDiff.deepCopy(updatedGhost.getDiffableValue());
      ghostStore.saveGhost(this,updatedGhost);
      object.setGhost(updatedGhost);
      if (isNew) {
        schema.updateWithDefaults(object,updatedProperties);
        addObject(object);
      }
 else {
        if (localModifications != null && localModifications.length() > 0) {
          try {
            JSONObject incomingDiff=change.getPatch();
            JSONObject localDiff=localModifications.getJSONObject(JSONDiff.DIFF_VALUE_KEY);
            JSONObject transformedDiff=JSONDiff.transform(localDiff,incomingDiff,currentProperties);
            updatedProperties=JSONDiff.apply(updatedProperties,transformedDiff);
          }
 catch (          JSONException e) {
          }
        }
        schema.update(object,updatedProperties);
        updateObject(object);
      }
    }
 catch (    SimperiumException e) {
      Logger.log(TAG,String.format(""String_Node_Str"",change),e);
      throw (new RemoteChangeInvalidException(change,e));
    }
  }
  setChangeVersion(change.getChangeVersion());
  change.setApplied();
  ChangeType type=change.isRemoveOperation() ? ChangeType.REMOVE : ChangeType.MODIFY;
  notifyOnNetworkChangeListeners(type,change.getKey());
  return updatedGhost;
}",0.9970136518771332
178206,"/** 
 * Change queue processes one change per run. If it has more work to do it schedules itself on the executor.
 */
public void run(){
  if (!haveCompleteIndex())   return;
  try {
    if (!started || Thread.interrupted())     throw new InterruptedException();
    idle=false;
    Logger.log(TAG,String.format(""String_Node_Str"",Thread.currentThread().getName()));
    if (!remoteQueue.isEmpty()) {
      processRemoteChange();
      executor.execute(this);
      return;
    }
    if (!localQueue.isEmpty()) {
      Logger.log(TAG,""String_Node_Str"");
      if (processLocalChange()) {
        executor.execute(this);
      }
      ;
      return;
    }
  }
 catch (  InterruptedException e) {
    Logger.log(TAG,String.format(""String_Node_Str"",getBucketName(),Thread.currentThread().getName()));
  }
  Logger.log(TAG,""String_Node_Str"");
  idle=true;
}","/** 
 * Change queue processes one change per run. If it has more work to do it schedules itself on the executor.
 */
public void run(){
  if (!haveCompleteIndex())   return;
  try {
    if (!started || Thread.interrupted())     throw new InterruptedException();
    idle=false;
    Logger.log(TAG,String.format(""String_Node_Str"",Thread.currentThread().getName()));
    if (!remoteQueue.isEmpty()) {
      processRemoteChange();
      executor.execute(this);
      return;
    }
    if (!localQueue.isEmpty()) {
      Logger.log(TAG,""String_Node_Str"");
      if (processLocalChange()) {
        executor.execute(this);
      }
      return;
    }
  }
 catch (  InterruptedException e) {
    Logger.log(TAG,String.format(""String_Node_Str"",getBucketName(),Thread.currentThread().getName()));
  }
  Logger.log(TAG,""String_Node_Str"");
  idle=true;
}",0.9952885747938752
178207,"/** 
 * Take the first remote change from the remoteQueue and process it
 */
private void processRemoteChange(){
  if (remoteQueue.isEmpty()) {
    return;
  }
  JSONObject remoteJSON=remoteQueue.remove(0);
  try {
    RemoteChange remoteChange=RemoteChange.buildFromMap(remoteJSON);
    log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion()));
    boolean acknowledged=false;
    Change change=pendingChanges.get(remoteChange.getKey());
    if (remoteChange.isAcknowledgedBy(change)) {
      log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion(),change.getChangeId()));
      serializer.onAcknowledgeChange(change);
      pendingChanges.remove(change.getKey());
      if (remoteChange.isError()) {
        Logger.log(TAG,String.format(""String_Node_Str"",remoteChange.getErrorCode(),remoteChange.getKey()));
        onError(remoteChange,change);
      }
 else {
        try {
          Ghost ghost=onAcknowledged(remoteChange,change);
          Change compressed=null;
          Iterator<Change> queuedChanges=localQueue.iterator();
          while (queuedChanges.hasNext()) {
            Change queuedChange=queuedChanges.next();
            if (queuedChange.getKey().equals(change.getKey())) {
              queuedChanges.remove();
              if (!remoteChange.isRemoveOperation()) {
                compressed=queuedChange.reapplyOrigin(ghost.getVersion(),ghost.getDiffableValue());
              }
            }
          }
          if (compressed != null) {
            localQueue.add(compressed);
          }
        }
 catch (        RemoteChangeInvalidException e) {
          Logger.log(TAG,""String_Node_Str"",e);
          log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion(),e.getMessage()));
        }
      }
    }
 else {
      if (remoteChange.isError()) {
        Logger.log(TAG,String.format(""String_Node_Str"",remoteChange));
        log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion()));
      }
 else {
        try {
          onRemote(remoteChange);
          Logger.log(TAG,String.format(""String_Node_Str"",remoteChange.getChangeVersion()));
        }
 catch (        RemoteChangeInvalidException e) {
          Logger.log(TAG,""String_Node_Str"",e);
          log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion(),e.getMessage()));
        }
      }
    }
    if (!remoteChange.isError() && remoteChange.isRemoveOperation()) {
      Iterator<Change> iterator=localQueue.iterator();
      while (iterator.hasNext()) {
        Change queuedChange=iterator.next();
        if (queuedChange.getKey().equals(remoteChange.getKey())) {
          iterator.remove();
        }
      }
    }
  }
 catch (  JSONException e) {
    Logger.log(TAG,""String_Node_Str"",e);
    return;
  }
}","/** 
 * Take the first remote change from the remoteQueue and process it
 */
private void processRemoteChange(){
  if (remoteQueue.isEmpty()) {
    return;
  }
  JSONObject remoteJSON=remoteQueue.remove(0);
  try {
    RemoteChange remoteChange=RemoteChange.buildFromMap(remoteJSON);
    log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion()));
    Change change=pendingChanges.get(remoteChange.getKey());
    if (remoteChange.isAcknowledgedBy(change)) {
      log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion(),change.getChangeId()));
      serializer.onAcknowledgeChange(change);
      pendingChanges.remove(change.getKey());
      if (remoteChange.isError()) {
        Logger.log(TAG,String.format(""String_Node_Str"",remoteChange.getErrorCode(),remoteChange.getKey()));
        onError(remoteChange,change);
      }
 else {
        try {
          Ghost ghost=onAcknowledged(remoteChange,change);
          Change compressed=null;
          Iterator<Change> queuedChanges=localQueue.iterator();
          while (queuedChanges.hasNext()) {
            Change queuedChange=queuedChanges.next();
            if (queuedChange.getKey().equals(change.getKey())) {
              queuedChanges.remove();
              if (!remoteChange.isRemoveOperation()) {
                compressed=queuedChange.reapplyOrigin(ghost.getVersion(),ghost.getDiffableValue());
              }
            }
          }
          if (compressed != null) {
            localQueue.add(compressed);
          }
        }
 catch (        RemoteChangeInvalidException e) {
          Logger.log(TAG,""String_Node_Str"",e);
          log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion(),e.getMessage()));
        }
      }
    }
 else {
      if (remoteChange.isError()) {
        Logger.log(TAG,String.format(""String_Node_Str"",remoteChange));
        log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion()));
      }
 else {
        try {
          onRemote(remoteChange);
          Logger.log(TAG,String.format(""String_Node_Str"",remoteChange.getChangeVersion()));
        }
 catch (        RemoteChangeInvalidException e) {
          Logger.log(TAG,""String_Node_Str"",e);
          log(LOG_DEBUG,String.format(""String_Node_Str"",remoteChange.getChangeVersion(),e.getMessage()));
        }
      }
    }
    if (!remoteChange.isError() && remoteChange.isRemoveOperation()) {
      Iterator<Change> iterator=localQueue.iterator();
      while (iterator.hasNext()) {
        Change queuedChange=iterator.next();
        if (queuedChange.getKey().equals(remoteChange.getKey())) {
          iterator.remove();
        }
      }
    }
  }
 catch (  JSONException e) {
    Logger.log(TAG,""String_Node_Str"",e);
  }
}",0.992128801431127
178208,"public Schema(String name){
  this.remoteName=remoteName;
}","public Schema(String name){
  this.remoteName=name;
}",0.9285714285714286
178209,"private String processOutput(String s,Boolean rational){
  String lines[]=s.split(""String_Node_Str"");
  String ts=""String_Node_Str"";
  Boolean start=false;
  int eq=0;
  String ret=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    if ((lines[i] != null) && (lines[i].length() >= 5) && (lines[i].substring(0,4).equals(""String_Node_Str""))) {
      start=false;
    }
    if (start) {
      if ((lines[i] != null) && (lines[i].length() >= 1)) {
        eq++;
        LinkedList<String> lp1=new LinkedList<String>();
        LinkedList<String> lp2=new LinkedList<String>();
        while ((lines[i] != null) && (lines[i].length() >= 1)) {
          String d1[]=lines[i].split(""String_Node_Str"");
          if (d1[0].trim().equals(""String_Node_Str"")) {
            lp1.add(lines[i]);
          }
          if (d1[0].trim().equals(""String_Node_Str"")) {
            lp2.add(lines[i]);
          }
          i++;
        }
        if (lp1.size() > lp2.size()) {
          while (lp2.size() < lp1.size()) {
            if (lp2.size() > 0) {
              String d1=lp2.get(lp2.size() - 1);
              lp2.add(new String(d1));
            }
 else {
              lp2.add(new String(""String_Node_Str""));
            }
          }
        }
        if (lp1.size() < lp2.size()) {
          while (lp1.size() < lp2.size()) {
            if (lp1.size() > 0) {
              String d1=lp1.get(lp1.size() - 1);
              lp1.add(new String(d1));
            }
 else {
              lp1.add(new String(""String_Node_Str""));
            }
          }
        }
        for (int k1=0; k1 < lp1.size(); k1++) {
          String p2[]=lp1.get(k1).split(""String_Node_Str"");
          String p1[]=lp2.get(k1).split(""String_Node_Str"");
          ret+=""String_Node_Str"" + eq + ""String_Node_Str""+ eq+ ""String_Node_Str"";
          for (int j=1; j < p2.length - 1; j++) {
            if (rational) {
              ret+=p2[j] + ""String_Node_Str"";
            }
 else {
              ts=Double.toString((Math.round(Rational.valueOf(p2[j]).doubleValue() * 100000.) / 100000.));
              if (ts.equals(""String_Node_Str"")) {
                ts=""String_Node_Str"";
              }
              ret+=ts + ""String_Node_Str"";
            }
          }
          if (rational) {
            ret+=""String_Node_Str"" + p1[p1.length - 1] + ""String_Node_Str"";
          }
 else {
            ts=Double.toString((Math.round(Rational.valueOf(p1[p1.length - 1]).doubleValue() * 100000.) / 100000.));
            if (ts.equals(""String_Node_Str"")) {
              ts=""String_Node_Str"";
            }
            ret+=""String_Node_Str"" + ts + ""String_Node_Str"";
          }
          ret+=""String_Node_Str"" + eq + ""String_Node_Str"";
          for (int j=1; j < p1.length - 1; j++) {
            if (rational) {
              ret+=p1[j] + ""String_Node_Str"";
            }
 else {
              ts=Double.toString((Math.round(Rational.valueOf(p1[j]).doubleValue() * 100000.) / 100000.));
              if (ts.equals(""String_Node_Str"")) {
                ts=""String_Node_Str"";
              }
              ret+=ts + ""String_Node_Str"";
            }
          }
          if (rational) {
            ret+=""String_Node_Str"" + p2[p2.length - 1] + System.getProperty(""String_Node_Str"");
          }
 else {
            ts=Double.toString((Math.round(Rational.valueOf(p2[p2.length - 1]).doubleValue() * 100000.) / 100000.));
            if (ts.equals(""String_Node_Str"")) {
              ts=""String_Node_Str"";
            }
            ret+=""String_Node_Str"" + ts + System.getProperty(""String_Node_Str"");
          }
          if (k1 > 0) {
            eq++;
          }
        }
      }
    }
    if ((lines[i] != null) && (lines[i].length() >= 5) && (lines[i].substring(0,4).equals(""String_Node_Str""))) {
      start=true;
    }
  }
  return ret;
}","private String processOutput(String s,Boolean rational){
  String lines[]=s.split(""String_Node_Str"");
  String ts=""String_Node_Str"";
  Boolean start=false;
  int eq=0;
  String ret=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    if ((lines[i] != null) && (lines[i].length() >= 5) && (lines[i].substring(0,4).equals(""String_Node_Str""))) {
      start=false;
    }
    if (start) {
      if ((lines[i] != null) && (lines[i].length() >= 1)) {
        eq++;
        LinkedList<String> lp1=new LinkedList<String>();
        LinkedList<String> lp2=new LinkedList<String>();
        while ((lines[i] != null) && (lines[i].length() >= 1)) {
          String d1[]=lines[i].split(""String_Node_Str"");
          if (d1[0].trim().equals(""String_Node_Str"")) {
            lp1.add(lines[i]);
          }
          if (d1[0].trim().equals(""String_Node_Str"")) {
            lp2.add(lines[i]);
          }
          i++;
        }
        if (lp1.size() > lp2.size()) {
          while (lp2.size() < lp1.size()) {
            if (lp2.size() > 0) {
              String d1=lp2.get(lp2.size() - 1);
              lp2.add(new String(d1));
            }
 else {
              lp2.add(new String(""String_Node_Str""));
            }
          }
        }
        if (lp1.size() < lp2.size()) {
          while (lp1.size() < lp2.size()) {
            if (lp1.size() > 0) {
              String d1=lp1.get(lp1.size() - 1);
              lp1.add(new String(d1));
            }
 else {
              lp1.add(new String(""String_Node_Str""));
            }
          }
        }
        for (int k1=0; k1 < lp1.size(); k1++) {
          String p2[]=lp1.get(k1).split(""String_Node_Str"");
          String p1[]=lp2.get(k1).split(""String_Node_Str"");
          if (k1 > 0) {
            eq++;
          }
          ret+=""String_Node_Str"" + eq + ""String_Node_Str""+ eq+ ""String_Node_Str"";
          for (int j=1; j < p2.length - 1; j++) {
            if (rational) {
              ret+=p2[j] + ""String_Node_Str"";
            }
 else {
              ts=Double.toString((Math.round(Rational.valueOf(p2[j]).doubleValue() * 100000.) / 100000.));
              if (ts.equals(""String_Node_Str"")) {
                ts=""String_Node_Str"";
              }
              ret+=ts + ""String_Node_Str"";
            }
          }
          if (rational) {
            ret+=""String_Node_Str"" + p1[p1.length - 1] + ""String_Node_Str"";
          }
 else {
            ts=Double.toString((Math.round(Rational.valueOf(p1[p1.length - 1]).doubleValue() * 100000.) / 100000.));
            if (ts.equals(""String_Node_Str"")) {
              ts=""String_Node_Str"";
            }
            ret+=""String_Node_Str"" + ts + ""String_Node_Str"";
          }
          ret+=""String_Node_Str"" + eq + ""String_Node_Str"";
          for (int j=1; j < p1.length - 1; j++) {
            if (rational) {
              ret+=p1[j] + ""String_Node_Str"";
            }
 else {
              ts=Double.toString((Math.round(Rational.valueOf(p1[j]).doubleValue() * 100000.) / 100000.));
              if (ts.equals(""String_Node_Str"")) {
                ts=""String_Node_Str"";
              }
              ret+=ts + ""String_Node_Str"";
            }
          }
          if (rational) {
            ret+=""String_Node_Str"" + p2[p2.length - 1] + System.getProperty(""String_Node_Str"");
          }
 else {
            ts=Double.toString((Math.round(Rational.valueOf(p2[p2.length - 1]).doubleValue() * 100000.) / 100000.));
            if (ts.equals(""String_Node_Str"")) {
              ts=""String_Node_Str"";
            }
            ret+=""String_Node_Str"" + ts + System.getProperty(""String_Node_Str"");
          }
        }
      }
    }
    if ((lines[i] != null) && (lines[i].length() >= 5) && (lines[i].substring(0,4).equals(""String_Node_Str""))) {
      start=true;
    }
  }
  return ret;
}",0.9858564693556836
178210,"public DocumentFragment generate(NodeList nl,NodeList tedxml) throws SAXException {
  HashMap<String,String> namespaces=new HashMap<String,String>();
  namespaces.put(""String_Node_Str"",""String_Node_Str"");
  XmlOptions opts=new XmlOptions();
  opts.setLoadSubstituteNamespaces(namespaces);
  TEDType ted;
  try {
    ted=TEDType.Factory.parse(tedxml.item(0),opts);
    String msg=new String(XMLUtil.getCleaned(ted));
    return generate(nl,msg);
  }
 catch (  XmlException e) {
    e.printStackTrace();
    throw new SAXException(e);
  }
}","public DocumentFragment generate(NodeList nl,NodeList tedxml) throws SAXException {
  HashMap<String,String> namespaces=new HashMap<String,String>();
  namespaces.put(""String_Node_Str"",""String_Node_Str"");
  XmlOptions opts=new XmlOptions();
  opts.setLoadSubstituteNamespaces(namespaces);
  TEDType ted;
  try {
    ted=TEDType.Factory.parse(tedxml.item(0),opts);
    String msg=null;
    try {
      msg=new String(XMLUtil.getCleaned(ted),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    System.out.println(msg);
    return generate(nl,msg);
  }
 catch (  XmlException e) {
    e.printStackTrace();
    throw new SAXException(e);
  }
}",0.8719611021069692
178211,"/** 
 * Obtiene una representaci&oacute;n ""limpia"" de un elemento XML, esto quiere decir, sin espacios ni nuevas l&iacute;neas entre tags. Este m&eacute;todo se utiliza en la generaci&oacute;n PDF del &lt;TED&gt;.
 * @param xml El nodo XML
 * @return El arreglo de bytes codificado con ISO-8859-1 (norma exigida porSII) del contenido del nodo (incluyendo los tags y caracteres especiales de XML como &amp;).
 */
public static byte[] getCleaned(XmlObject xml){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    XmlOptions opts=new XmlOptions();
    HashMap<String,String> namespaces=new HashMap<String,String>();
    namespaces.put(""String_Node_Str"",""String_Node_Str"");
    opts.setCharacterEncoding(""String_Node_Str"");
    opts.setSaveImplicitNamespaces(namespaces);
    opts.setSaveOuter();
    opts.setSavePrettyPrint();
    opts.setSavePrettyPrintIndent(0);
    opts.setSaveNoXmlDecl();
    xml.save(out,opts);
    return out.toString(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Obtiene una representaci&oacute;n ""limpia"" de un elemento XML, esto quiere decir, sin espacios ni nuevas l&iacute;neas entre tags. Este m&eacute;todo se utiliza en la generaci&oacute;n PDF del &lt;TED&gt;.
 * @param xml El nodo XML
 * @return El arreglo de bytes codificado con ISO-8859-1 (norma exigida porSII) del contenido del nodo (incluyendo los tags y caracteres especiales de XML como &amp;).
 */
public static byte[] getCleaned(XmlObject xml){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    XmlOptions opts=new XmlOptions();
    HashMap<String,String> namespaces=new HashMap<String,String>();
    namespaces.put(""String_Node_Str"",""String_Node_Str"");
    opts.setCharacterEncoding(""String_Node_Str"");
    opts.setSaveImplicitNamespaces(namespaces);
    opts.setSaveOuter();
    opts.setSavePrettyPrintIndent(0);
    opts.setSaveNoXmlDecl();
    xml.save(out,opts);
    return out.toString(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}",0.9871529216742644
178212,"private void getEvents(final Channel ch,final long eventId,int cnt){
  if (ch == null) {
    return;
  }
  HTSMessage request=new HTSMessage();
  request.setMethod(""String_Node_Str"");
  request.putField(""String_Node_Str"",eventId);
  request.putField(""String_Node_Str"",cnt);
  connection.sendMessage(request,new HTSResponseHandler(){
    public void handleResponse(    HTSMessage response){
      if (!response.containsKey(""String_Node_Str"")) {
        return;
      }
      TVHGuideApplication app=(TVHGuideApplication)getApplication();
      for (      Object obj : response.getList(""String_Node_Str"")) {
        Programme p=new Programme();
        HTSMessage sub=(HTSMessage)obj;
        p.id=sub.getLong(""String_Node_Str"");
        p.nextId=sub.getLong(""String_Node_Str"",0);
        p.description=sub.getString(""String_Node_Str"",null);
        p.ext_desc=sub.getString(""String_Node_Str"",p.description);
        p.recording=app.getRecording(response.getLong(""String_Node_Str"",0));
        p.type=sub.getInt(""String_Node_Str"",0);
        p.title=sub.getString(""String_Node_Str"");
        p.start=sub.getDate(""String_Node_Str"");
        p.stop=sub.getDate(""String_Node_Str"");
        p.channel=ch;
        if (ch.epg.add(p)) {
          app.addProgramme(p);
        }
      }
      app.updateChannel(ch);
    }
  }
);
}","private void getEvents(final Channel ch,final long eventId,int cnt){
  if (ch == null) {
    return;
  }
  HTSMessage request=new HTSMessage();
  request.setMethod(""String_Node_Str"");
  request.putField(""String_Node_Str"",eventId);
  request.putField(""String_Node_Str"",cnt);
  connection.sendMessage(request,new HTSResponseHandler(){
    public void handleResponse(    HTSMessage response){
      if (!response.containsKey(""String_Node_Str"")) {
        return;
      }
      TVHGuideApplication app=(TVHGuideApplication)getApplication();
      for (      Object obj : response.getList(""String_Node_Str"")) {
        Programme p=new Programme();
        HTSMessage sub=(HTSMessage)obj;
        p.id=sub.getLong(""String_Node_Str"");
        p.nextId=sub.getLong(""String_Node_Str"",0);
        p.description=sub.getString(""String_Node_Str"",null);
        p.ext_desc=sub.getString(""String_Node_Str"",p.description);
        p.recording=app.getRecording(sub.getLong(""String_Node_Str"",0));
        p.type=sub.getInt(""String_Node_Str"",0);
        p.title=sub.getString(""String_Node_Str"");
        p.start=sub.getDate(""String_Node_Str"");
        p.stop=sub.getDate(""String_Node_Str"");
        p.channel=ch;
        if (ch.epg.add(p)) {
          app.addProgramme(p);
        }
      }
      app.updateChannel(ch);
    }
  }
);
}",0.9958254269449716
178213,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  List<Programme> prList=new ArrayList<Programme>();
  Intent intent=getIntent();
  if (""String_Node_Str"".equals(intent.getAction())) {
    pattern=Pattern.compile(intent.getStringExtra(""String_Node_Str""),Pattern.CASE_INSENSITIVE);
  }
 else {
    TVHGuideApplication app=(TVHGuideApplication)getApplication();
    channel=app.getChannel(getIntent().getLongExtra(""String_Node_Str"",0));
  }
  if (pattern == null && channel == null) {
    finish();
    return;
  }
  if (channel != null && !channel.epg.isEmpty()) {
    setTitle(channel.name);
    prList.addAll(channel.epg);
    Button btn=new Button(this);
    btn.setText(R.string.pr_get_more);
    btn.setOnClickListener(new OnClickListener(){
      public void onClick(      View view){
        Programme p=null;
        Iterator<Programme> it=channel.epg.iterator();
        long nextId=0;
        while (it.hasNext()) {
          p=it.next();
          if (p.id != nextId && nextId != 0) {
            break;
          }
          nextId=p.nextId;
        }
        if (nextId == 0) {
          nextId=p.nextId;
        }
        if (nextId == 0) {
          nextId=p.id;
          return;
        }
        Intent intent=new Intent(ProgrammeListActivity.this,HTSService.class);
        intent.setAction(HTSService.ACTION_GET_EVENTS);
        intent.putExtra(""String_Node_Str"",nextId);
        intent.putExtra(""String_Node_Str"",channel.id);
        intent.putExtra(""String_Node_Str"",10);
        startService(intent);
      }
    }
);
    getListView().addFooterView(btn);
  }
 else   if (pattern != null) {
    TVHGuideApplication app=(TVHGuideApplication)getApplication();
    for (    Channel ch : app.getChannels()) {
      for (      Programme p : ch.epg) {
        if (pattern.matcher(p.title).find()) {
          prList.add(p);
        }
      }
    }
  }
 else {
    finish();
    return;
  }
  contentTypes=getResources().getStringArray(R.array.pr_type);
  prAdapter=new ProgrammeListAdapter(this,prList);
  prAdapter.sort();
  setListAdapter(prAdapter);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  List<Programme> prList=new ArrayList<Programme>();
  Intent intent=getIntent();
  if (""String_Node_Str"".equals(intent.getAction())) {
    pattern=Pattern.compile(intent.getStringExtra(""String_Node_Str""),Pattern.CASE_INSENSITIVE);
  }
 else {
    TVHGuideApplication app=(TVHGuideApplication)getApplication();
    channel=app.getChannel(getIntent().getLongExtra(""String_Node_Str"",0));
  }
  if (pattern == null && channel == null) {
    finish();
    return;
  }
  if (channel != null && !channel.epg.isEmpty()) {
    setTitle(channel.name);
    prList.addAll(channel.epg);
    Button btn=new Button(this);
    btn.setText(R.string.pr_get_more);
    btn.setOnClickListener(new OnClickListener(){
      public void onClick(      View view){
        Programme p=null;
        Iterator<Programme> it=channel.epg.iterator();
        long nextId=0;
        while (it.hasNext()) {
          p=it.next();
          if (p.id != nextId && nextId != 0) {
            break;
          }
          nextId=p.nextId;
        }
        if (nextId == 0) {
          nextId=p.nextId;
        }
        if (nextId == 0) {
          nextId=p.id;
        }
        Intent intent=new Intent(ProgrammeListActivity.this,HTSService.class);
        intent.setAction(HTSService.ACTION_GET_EVENTS);
        intent.putExtra(""String_Node_Str"",nextId);
        intent.putExtra(""String_Node_Str"",channel.id);
        intent.putExtra(""String_Node_Str"",10);
        startService(intent);
      }
    }
);
    getListView().addFooterView(btn);
  }
 else   if (pattern != null) {
    TVHGuideApplication app=(TVHGuideApplication)getApplication();
    for (    Channel ch : app.getChannels()) {
      for (      Programme p : ch.epg) {
        if (pattern.matcher(p.title).find()) {
          prList.add(p);
        }
      }
    }
  }
 else {
    finish();
    return;
  }
  contentTypes=getResources().getStringArray(R.array.pr_type);
  prAdapter=new ProgrammeListAdapter(this,prList);
  prAdapter.sort();
  setListAdapter(prAdapter);
}",0.99568345323741
178214,"public void onClick(View view){
  Programme p=null;
  Iterator<Programme> it=channel.epg.iterator();
  long nextId=0;
  while (it.hasNext()) {
    p=it.next();
    if (p.id != nextId && nextId != 0) {
      break;
    }
    nextId=p.nextId;
  }
  if (nextId == 0) {
    nextId=p.nextId;
  }
  if (nextId == 0) {
    nextId=p.id;
    return;
  }
  Intent intent=new Intent(ProgrammeListActivity.this,HTSService.class);
  intent.setAction(HTSService.ACTION_GET_EVENTS);
  intent.putExtra(""String_Node_Str"",nextId);
  intent.putExtra(""String_Node_Str"",channel.id);
  intent.putExtra(""String_Node_Str"",10);
  startService(intent);
}","public void onClick(View view){
  Programme p=null;
  Iterator<Programme> it=channel.epg.iterator();
  long nextId=0;
  while (it.hasNext()) {
    p=it.next();
    if (p.id != nextId && nextId != 0) {
      break;
    }
    nextId=p.nextId;
  }
  if (nextId == 0) {
    nextId=p.nextId;
  }
  if (nextId == 0) {
    nextId=p.id;
  }
  Intent intent=new Intent(ProgrammeListActivity.this,HTSService.class);
  intent.setAction(HTSService.ACTION_GET_EVENTS);
  intent.putExtra(""String_Node_Str"",nextId);
  intent.putExtra(""String_Node_Str"",channel.id);
  intent.putExtra(""String_Node_Str"",10);
  startService(intent);
}",0.990353697749196
178215,"private List<Map<String,String>> fetchEvents(){
  GreenhouseOperations greenhouse=Prefs.getGreenhouseTemplate(getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE));
  List<Event> upcomingEvents=greenhouse.getUpcomingEvents();
  List<Map<String,String>> eventList=new ArrayList<Map<String,String>>();
  for (  Event event : upcomingEvents) {
    Map<String,String> map=new HashMap<String,String>();
    map.put(""String_Node_Str"",event.getTitle());
    map.put(""String_Node_Str"",event.getGroupName());
    eventList.add(map);
  }
  return eventList;
}","private List<Map<String,String>> fetchEvents(){
  GreenhouseOperations greenhouse=Prefs.getGreenhouseOperations(getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE));
  List<Event> upcomingEvents=greenhouse.getUpcomingEvents();
  List<Map<String,String>> eventList=new ArrayList<Map<String,String>>();
  for (  Event event : upcomingEvents) {
    Map<String,String> map=new HashMap<String,String>();
    map.put(""String_Node_Str"",event.getTitle());
    map.put(""String_Node_Str"",event.getGroupName());
    eventList.add(map);
  }
  return eventList;
}",0.9836956521739132
178216,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().getData() == null) {
    try {
      _settings=getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE);
      ServiceBuilder serviceBuilder=new ServiceBuilder();
      OAuthService oAuthService=serviceBuilder.apiKey(Prefs.getConsumerKey()).apiSecret(Prefs.getConsumerSecret()).provider(GreenhouseApi.class).callback(Prefs.CALLBACK_URI_STRING).build();
      Token requestToken=oAuthService.getRequestToken();
      Prefs.saveRequestInformation(_settings,requestToken.getToken(),requestToken.getSecret());
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + requestToken.getToken())));
      finish();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",e.getMessage(),e);
      Writer result=new StringWriter();
      e.printStackTrace(new PrintWriter(result));
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().getData() == null) {
    try {
      _settings=getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE);
      ServiceBuilder serviceBuilder=new ServiceBuilder();
      OAuthService oAuthService=serviceBuilder.apiKey(Prefs.getConsumerKey()).apiSecret(Prefs.getConsumerSecret()).provider(GreenhouseApi.class).callback(Prefs.CALLBACK_URI_STRING).build();
      Token requestToken=oAuthService.getRequestToken();
      Prefs.saveRequestInformation(_settings,requestToken.getToken(),requestToken.getSecret());
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(Prefs.getUrlBase() + ""String_Node_Str"" + requestToken.getToken())));
      finish();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",e.getMessage(),e);
      Writer result=new StringWriter();
      e.printStackTrace(new PrintWriter(result));
    }
  }
}",0.9888238424693986
178217,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.profile);
  final TextView textViewMemberName=(TextView)findViewById(R.id.profile_textview_member_name);
  final ImageView imageViewPicture=(ImageView)findViewById(R.id.profile_imageview_picture);
  final Button buttonSignOut=(Button)findViewById(R.id.profile_button_signout);
  GreenhouseOperations greenhouse=Prefs.getGreenhouseTemplate(getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE));
  GreenhouseProfile profile=greenhouse.getUserProfile();
  textViewMemberName.setText(profile.getDisplayName());
  imageViewPicture.setImageURI(Uri.parse(profile.getPictureUrl()));
  buttonSignOut.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Prefs.disconnect(getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE));
      Intent intent=new Intent(ProfileActivity.this,FrontDoorActivity.class);
      startActivity(intent);
      finish();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.profile);
  final TextView textViewMemberName=(TextView)findViewById(R.id.profile_textview_member_name);
  final ImageView imageViewPicture=(ImageView)findViewById(R.id.profile_imageview_picture);
  final Button buttonSignOut=(Button)findViewById(R.id.profile_button_signout);
  GreenhouseOperations greenhouse=Prefs.getGreenhouseOperations(getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE));
  GreenhouseProfile profile=greenhouse.getUserProfile();
  textViewMemberName.setText(profile.getDisplayName());
  imageViewPicture.setImageBitmap(getImageBitmap(profile.getPictureUrl()));
  buttonSignOut.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Prefs.disconnect(getSharedPreferences(Prefs.PREFS,Context.MODE_PRIVATE));
      Intent intent=new Intent(ProfileActivity.this,FrontDoorActivity.class);
      startActivity(intent);
      finish();
    }
  }
);
}",0.9744346116027532
178218,"@Override public String getAccessTokenEndpoint(){
  return ""String_Node_Str"";
}","@Override public String getAccessTokenEndpoint(){
  return Prefs.getUrlBase() + ""String_Node_Str"";
}",0.88268156424581
178219,"@Override public String getRequestTokenEndpoint(){
  return ""String_Node_Str"";
}","@Override public String getRequestTokenEndpoint(){
  return Prefs.getUrlBase() + ""String_Node_Str"";
}",0.8839779005524862
178220,"public static void disconnect(final SharedPreferences settings){
  SharedPreferences.Editor editor=settings.edit();
  editor.remove(ACCESS_TOKEN);
  editor.remove(ACCESS_TOKEN_SECRET);
  editor.commit();
}","public static void disconnect(final SharedPreferences settings){
  SharedPreferences.Editor editor=settings.edit();
  editor.remove(ACCESS_TOKEN);
  editor.remove(ACCESS_TOKEN_SECRET);
  editor.commit();
  greenhouseOperations=null;
}",0.9339407744874716
178221,"private static String getUrlBase(){
  return GREENHOUSE_SERVER_BASE_URL;
}","public static String getUrlBase(){
  return GREENHOUSE_SERVER_BASE_URL;
}",0.9387755102040816
178222,"/** 
 * Hatch all the polygons parallel to line hp with increment gap
 * @param hp
 * @param gap
 * @param a
 * @return a polygon list of hatch lines as the result with attributes a
 */
public RrPolygonList hatch(RrHalfPlane hp,double gap,Attributes a){
  push(""String_Node_Str"");
  RrRectangle big=box().scale(1.1);
  double d=Math.sqrt(big.dSquared());
  Rr2Point orth=hp.normal();
  int quadPointing=(int)(2 + 2 * Math.atan2(orth.y(),orth.x()) / Math.PI);
  Rr2Point org=big.ne();
switch (quadPointing) {
case 1:
    org=big.nw();
  break;
case 2:
org=big.sw();
break;
case 3:
org=big.se();
break;
case 0:
default :
break;
}
RrHalfPlane hatcher=new RrHalfPlane(org,Rr2Point.add(org,hp.pLine().direction()));
List<RrHalfPlane> hatches=new ArrayList<RrHalfPlane>();
iPolygonList iHatches=new iPolygonList();
double g=0;
while (g < d) {
iPolygon ip=hatch(hatcher);
if (ip.size() > 0) {
hatches.add(hatcher);
iHatches.add(ip);
}
hatcher=hatcher.offset(gap);
g+=gap;
}
iPolygonList snakes=new iPolygonList();
int segment;
do {
segment=-1;
for (int i=0; i < iHatches.size(); i++) {
if ((iHatches.polygon(i)).size() > 0) {
segment=i;
break;
}
}
if (segment >= 0) {
snakes.add(snakeGrow(iHatches,hatches,segment,0));
}
}
 while (segment >= 0);
try {
if (Preferences.loadGlobalBool(""String_Node_Str"")) joinUpSnakes(snakes,hatches,gap);
}
 catch (Exception e) {
}
resetVisited();
RrPolygonList result=snakes.realPolygons(a).simplify(realResolution);
pop();
return result;
}","/** 
 * Hatch all the polygons parallel to line hp with increment gap
 * @param hp
 * @param gap
 * @param a
 * @return a polygon list of hatch lines as the result with attributes a
 */
public RrPolygonList hatch(RrHalfPlane hp,double gap,Attributes a){
  if (gap <= 0)   return new RrPolygonList();
  RrRectangle big=box().scale(1.1);
  double d=Math.sqrt(big.dSquared());
  Rr2Point orth=hp.normal();
  int quadPointing=(int)(2 + 2 * Math.atan2(orth.y(),orth.x()) / Math.PI);
  Rr2Point org=big.ne();
switch (quadPointing) {
case 1:
    org=big.nw();
  break;
case 2:
org=big.sw();
break;
case 3:
org=big.se();
break;
case 0:
default :
break;
}
RrHalfPlane hatcher=new RrHalfPlane(org,Rr2Point.add(org,hp.pLine().direction()));
List<RrHalfPlane> hatches=new ArrayList<RrHalfPlane>();
iPolygonList iHatches=new iPolygonList();
double g=0;
while (g < d) {
iPolygon ip=hatch(hatcher);
if (ip.size() > 0) {
hatches.add(hatcher);
iHatches.add(ip);
}
hatcher=hatcher.offset(gap);
g+=gap;
}
iPolygonList snakes=new iPolygonList();
int segment;
do {
segment=-1;
for (int i=0; i < iHatches.size(); i++) {
if ((iHatches.polygon(i)).size() > 0) {
segment=i;
break;
}
}
if (segment >= 0) {
snakes.add(snakeGrow(iHatches,hatches,segment,0));
}
}
 while (segment >= 0);
try {
if (Preferences.loadGlobalBool(""String_Node_Str"")) joinUpSnakes(snakes,hatches,gap);
}
 catch (Exception e) {
}
resetVisited();
RrPolygonList result=snakes.realPolygons(a).simplify(realResolution);
return result;
}",0.2989130434782608
178223,"public int refreshPreferences(){
  prefName=""String_Node_Str"" + myExtruderID + ""String_Node_Str"";
  int result=-1;
  try {
    result=Preferences.loadGlobalInt(prefName + ""String_Node_Str"");
    maxExtruderSpeed=255;
    purgeTime=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionPWM=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionTemp=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionSize=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionHeight=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    if (Preferences.loadGlobalDouble(prefName + ""String_Node_Str"") == -1)     extrusionInfillWidth=extrusionSize / Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
 else     extrusionInfillWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    lowerFineLayers=2;
    upperFineLayers=2;
    extrusionBroadWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    coolingPeriod=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    fastXYFeedrate=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    fastEFeedrate=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    slowXYFeedrate=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    maxAcceleration=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    middleStart=Preferences.loadGlobalBool(prefName + ""String_Node_Str"");
    t0=0;
    iSpeed=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    oSpeed=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    asLength=-1;
    asFactor=0.5;
    material=Preferences.loadGlobalString(prefName + ""String_Node_Str"");
    supportMaterial=Preferences.loadGlobalString(prefName + ""String_Node_Str"");
    inFillMaterial=Preferences.loadGlobalString(prefName + ""String_Node_Str"");
    offsetX=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    offsetY=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    offsetZ=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    nozzleWipeEnabled=false;
    nozzleWipeDatumX=22.4;
    nozzleWipeDatumY=4;
    nozzleWipeStrokeX=0;
    nozzleWipeStrokeY=10;
    nozzleWipeFreq=1;
    nozzleClearTime=10;
    nozzleWaitTime=0;
    randSt=false;
    incrementedSt=false;
    shortLength=-1;
    shortSpeed=1;
    infillOverlap=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionDelayForLayer=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionDelayForPolygon=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionOverRun=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    valveDelayForLayer=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    valveDelayForPolygon=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionReverseDelay=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    valveOverRun=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    minLiftedZ=-1;
    valvePulseTime=0.5 * Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    shells=Preferences.loadGlobalInt(prefName + ""String_Node_Str"");
    pauseBetweenSegments=false;
    extrusionFoundationWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionLastFoundationWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    separationFraction=0.8;
    arcCompensationFactor=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    arcShortSides=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrudeRatio=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    lift=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    evenHatchDirection=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    oddHatchDirection=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    Color3f col=new Color3f((float)Preferences.loadGlobalDouble(prefName + ""String_Node_Str""),(float)Preferences.loadGlobalDouble(prefName + ""String_Node_Str""),(float)Preferences.loadGlobalDouble(prefName + ""String_Node_Str""));
    materialColour=new Appearance();
    materialColour.setMaterial(new Material(col,black,col,black,101f));
  }
 catch (  Exception ex) {
    Debug.e(""String_Node_Str"" + ex.toString());
  }
  if (printer == null) {
    Debug.e(""String_Node_Str"");
  }
 else {
    fastXYFeedrate=Math.min(printer.getFastXYFeedrate(),fastXYFeedrate);
    slowXYFeedrate=Math.min(printer.getSlowXYFeedrate(),slowXYFeedrate);
    maxAcceleration=Math.min(printer.getMaxXYAcceleration(),maxAcceleration);
  }
  return result;
}","public int refreshPreferences(){
  prefName=""String_Node_Str"" + myExtruderID + ""String_Node_Str"";
  int result=-1;
  try {
    result=Preferences.loadGlobalInt(prefName + ""String_Node_Str"");
    maxExtruderSpeed=255;
    purgeTime=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionPWM=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionTemp=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionSize=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionHeight=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionInfillWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    lowerFineLayers=2;
    upperFineLayers=2;
    extrusionBroadWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    coolingPeriod=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    fastXYFeedrate=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    fastEFeedrate=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    slowXYFeedrate=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    maxAcceleration=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    middleStart=Preferences.loadGlobalBool(prefName + ""String_Node_Str"");
    t0=0;
    iSpeed=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    oSpeed=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    asLength=-1;
    asFactor=0.5;
    material=Preferences.loadGlobalString(prefName + ""String_Node_Str"");
    supportMaterial=Preferences.loadGlobalString(prefName + ""String_Node_Str"");
    inFillMaterial=Preferences.loadGlobalString(prefName + ""String_Node_Str"");
    offsetX=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    offsetY=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    offsetZ=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    nozzleWipeEnabled=false;
    nozzleWipeDatumX=22.4;
    nozzleWipeDatumY=4;
    nozzleWipeStrokeX=0;
    nozzleWipeStrokeY=10;
    nozzleWipeFreq=1;
    nozzleClearTime=10;
    nozzleWaitTime=0;
    randSt=false;
    incrementedSt=false;
    shortLength=-1;
    shortSpeed=1;
    infillOverlap=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionDelayForLayer=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionDelayForPolygon=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionOverRun=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    valveDelayForLayer=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    valveDelayForPolygon=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionReverseDelay=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    valveOverRun=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    minLiftedZ=-1;
    valvePulseTime=0.5 * Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    shells=Preferences.loadGlobalInt(prefName + ""String_Node_Str"");
    pauseBetweenSegments=false;
    extrusionFoundationWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrusionLastFoundationWidth=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    separationFraction=0.8;
    arcCompensationFactor=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    arcShortSides=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    extrudeRatio=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    lift=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    evenHatchDirection=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    oddHatchDirection=Preferences.loadGlobalDouble(prefName + ""String_Node_Str"");
    Color3f col=new Color3f((float)Preferences.loadGlobalDouble(prefName + ""String_Node_Str""),(float)Preferences.loadGlobalDouble(prefName + ""String_Node_Str""),(float)Preferences.loadGlobalDouble(prefName + ""String_Node_Str""));
    materialColour=new Appearance();
    materialColour.setMaterial(new Material(col,black,col,black,101f));
  }
 catch (  Exception ex) {
    Debug.e(""String_Node_Str"" + ex.toString());
  }
  if (printer == null) {
    Debug.e(""String_Node_Str"");
  }
 else {
    fastXYFeedrate=Math.min(printer.getFastXYFeedrate(),fastXYFeedrate);
    slowXYFeedrate=Math.min(printer.getSlowXYFeedrate(),slowXYFeedrate);
    maxAcceleration=Math.min(printer.getMaxXYAcceleration(),maxAcceleration);
  }
  return result;
}",0.9802466441121904
178224,"/** 
 * Turn the cooler (fan?) on or off
 * @param f true if the cooler is to be turned on, false to turn off
 * @throws IOException
 * @throws Exception 
 */
public void setCooler(boolean f) throws IOException, Exception ;","/** 
 * Turn the cooler (fan?) on or off
 * @param f true if the cooler is to be turned on, false to turn off
 * @throws IOException
 * @throws Exception 
 */
public void setCooler(boolean f,boolean really) throws IOException, Exception ;",0.9674620390455532
178225,"/** 
 * Zero the extruded length
 * @throws Exception 
 */
public void zeroExtrudedLength() throws Exception ;","/** 
 * Zero the extruded length
 * @throws Exception 
 */
public void zeroExtrudedLength(boolean really) throws Exception ;",0.9401709401709402
178226,"/** 
 * Indicates end of job, homes extruder, powers down etc
 * @throws Exception
 */
public void terminate() throws Exception ;","/** 
 * Indicates end of job, homes extruder, powers down etc
 * @throws Exception
 */
public void terminate(LayerRules layerRules) throws Exception ;",0.9247311827956988
178227,"/** 
 * Single move for when we're moving about giong places rather than making
 * @param x
 * @param y
 * @param z
 * @param feedrate
 */
public void singleMove(double x,double y,double z,double feedrate);","/** 
 * Single move for when we're moving about giong places rather than making
 * @param x
 * @param y
 * @param z
 * @param feedrate
 */
public void singleMove(double x,double y,double z,double feedrate,boolean really);",0.9648711943793912
178228,"/** 
 * Home XY and zero all extruders
 * @throws ReprapException
 * @throws IOException
 * @throws Exception 
 */
public void homeToZeroXYE() throws ReprapException, IOException, Exception ;","/** 
 * Home XY and zero all extruders
 * @throws ReprapException
 * @throws IOException
 * @throws Exception 
 */
public void homeToZeroXYE(boolean really) throws ReprapException, IOException, Exception ;",0.9646464646464646
178229,"/** 
 * All machine dwells and delays are routed via this function, rather than  calling Thread.sleep - this allows them to generate the right G codes (G4) etc. The RS232/USB etc comms system doesn't use this - it sets its own delays.
 * @param milliseconds
 * @throws Exception 
 */
public void machineWait(double milliseconds,boolean fastExtrude) throws Exception ;","/** 
 * All machine dwells and delays are routed via this function, rather than  calling Thread.sleep - this allows them to generate the right G codes (G4) etc. The RS232/USB etc comms system doesn't use this - it sets its own delays.
 * @param milliseconds
 * @throws Exception 
 */
public void machineWait(double milliseconds,boolean fastExtrude,boolean really) throws Exception ;",0.9799732977303072
178230,"/** 
 * Select a specific material to print with
 * @param extr identifier of the material
 * @throws Exception 
 */
public void selectExtruder(int extr) throws Exception ;","/** 
 * Select a specific material to print with
 * @param extr identifier of the material
 * @throws Exception 
 */
public void selectExtruder(int extr,boolean really) throws Exception ;",0.958217270194986
178231,"/** 
 * Take all the polygons in a list, both open and closed, and reorder them such that  accessible points on any that have a squared distance less than linkUp to accessible points on any others are joined to form single polygons.   For an open polygon the accessible points are just its ends.  For a closed polygon  all its points are accessible. This is a fairly radical remove in-air movement strategy. All the polygons in the list must be plotted with the same physical extruder (otherwise  it would be nonsense to join them).  It is the calling function's responsibility to  make sure this is the case.
 * @param linkUp
 */
public void radicalReOrder(double linkUp){
  if (size() < 2)   return;
  int physicalExtruder=polygon(0).getAttributes().getExtruder().getPhysicalExtruderNumber();
  for (int i=1; i < size(); i++)   if (polygon(i).getAttributes().getExtruder().getPhysicalExtruderNumber() != physicalExtruder) {
    Debug.e(""String_Node_Str"");
    return;
  }
  for (int i=0; i < size() - 1; i++) {
    RrPolygon myPolygon=polygon(i);
    for (int j=i + 1; j < size(); j++) {
      double d=Double.POSITIVE_INFINITY;
      double d2;
      int myPoint=-1;
      int itsPoint=-1;
      int myTempPoint, itsTempPoint;
      boolean reverseMe, reverseIt;
      RrPolygon itsPolygon=polygon(j);
      if (!myPolygon.isClosed() && itsPolygon.isClosed()) {
        polygons.set(i,itsPolygon);
        polygons.set(j,myPolygon);
        myPolygon=polygon(i);
        itsPolygon=polygon(j);
      }
      if (!myPolygon.isClosed() && !itsPolygon.isClosed()) {
        reverseMe=true;
        reverseIt=false;
        d=Rr2Point.dSquared(myPolygon.point(0),itsPolygon.point(0));
        d2=Rr2Point.dSquared(myPolygon.point(myPolygon.size() - 1),itsPolygon.point(0));
        if (d2 < d) {
          reverseMe=false;
          reverseIt=false;
          d=d2;
        }
        d2=Rr2Point.dSquared(myPolygon.point(0),itsPolygon.point(itsPolygon.size() - 1));
        if (d2 < d) {
          reverseMe=true;
          reverseIt=true;
          d=d2;
        }
        d2=Rr2Point.dSquared(myPolygon.point(myPolygon.size() - 1),itsPolygon.point(itsPolygon.size() - 1));
        if (d2 < d) {
          reverseMe=false;
          reverseIt=true;
          d=d2;
        }
        if (d < linkUp) {
          if (reverseMe)           myPolygon=myPolygon.negate();
          if (reverseIt)           itsPolygon=itsPolygon.negate();
          myPolygon.add(itsPolygon);
          polygons.set(i,myPolygon);
          polygons.remove(j);
        }
      }
 else       if (myPolygon.isClosed() && !itsPolygon.isClosed()) {
        reverseIt=false;
        myPoint=myPolygon.nearestVertex(itsPolygon.point(0));
        d=Rr2Point.dSquared(myPolygon.point(myPoint),itsPolygon.point(0));
        myTempPoint=myPolygon.nearestVertex(itsPolygon.point(itsPolygon.size() - 1));
        d2=Rr2Point.dSquared(myPolygon.point(myTempPoint),itsPolygon.point(itsPolygon.size() - 1));
        if (d2 < d) {
          myPoint=myTempPoint;
          reverseIt=true;
          d=d2;
        }
        if (d < linkUp) {
          myPolygon=myPolygon.newStart(myPoint);
          myPolygon.add(myPolygon.point(0));
          if (reverseIt)           itsPolygon=itsPolygon.negate();
          myPolygon.add(itsPolygon);
          myPolygon.setOpen();
          polygons.set(i,myPolygon);
          polygons.remove(j);
        }
      }
 else       if (myPolygon.isClosed() && itsPolygon.isClosed()) {
        for (int k=0; k < itsPolygon.size(); k++) {
          myTempPoint=myPolygon.nearestVertex(itsPolygon.point(k));
          d2=Rr2Point.dSquared(myPolygon.point(myTempPoint),itsPolygon.point(k));
          if (d2 < d) {
            myPoint=myTempPoint;
            itsPoint=k;
            d=d2;
          }
        }
        if (d < linkUp) {
          myPolygon=myPolygon.newStart(myPoint);
          myPolygon.add(myPolygon.point(0));
          itsPolygon=itsPolygon.newStart(itsPoint);
          myPolygon.add(itsPolygon);
          myPolygon.setOpen();
          polygons.set(i,myPolygon);
          polygons.remove(j);
        }
      }
 else {
        Debug.e(""String_Node_Str"");
      }
    }
  }
}","/** 
 * Take all the polygons in a list, both open and closed, and reorder them such that  accessible points on any that have a squared distance less than linkUp to accessible points on any others are joined to form single polygons.   For an open polygon the accessible points are just its ends.  For a closed polygon  all its points are accessible. This is a fairly radical remove in-air movement strategy. All the polygons in the list must be plotted with the same physical extruder (otherwise  it would be nonsense to join them).  It is the calling function's responsibility to  make sure this is the case.
 * @param linkUp
 */
public void radicalReOrder(double linkUp){
  if (size() < 2)   return;
  int physicalExtruder=polygon(0).getAttributes().getExtruder().getPhysicalExtruderNumber();
  for (int i=1; i < size(); i++)   if (polygon(i).getAttributes().getExtruder().getPhysicalExtruderNumber() != physicalExtruder) {
    Debug.e(""String_Node_Str"");
    return;
  }
  for (int i=0; i < size() - 1; i++) {
    RrPolygon myPolygon=polygon(i);
    for (int j=i + 1; j < size(); j++) {
      double d=Double.POSITIVE_INFINITY;
      double d2;
      int myPoint=-1;
      int itsPoint=-1;
      int myTempPoint, itsTempPoint;
      boolean reverseMe, reverseIt;
      RrPolygon itsPolygon=polygon(j);
      if (myPolygon.isClosed() && !itsPolygon.isClosed()) {
        polygons.set(i,itsPolygon);
        polygons.set(j,myPolygon);
        myPolygon=polygon(i);
        itsPolygon=polygon(j);
      }
      if (!myPolygon.isClosed() && !itsPolygon.isClosed()) {
        reverseMe=true;
        reverseIt=false;
        d=Rr2Point.dSquared(myPolygon.point(0),itsPolygon.point(0));
        d2=Rr2Point.dSquared(myPolygon.point(myPolygon.size() - 1),itsPolygon.point(0));
        if (d2 < d) {
          reverseMe=false;
          reverseIt=false;
          d=d2;
        }
        d2=Rr2Point.dSquared(myPolygon.point(0),itsPolygon.point(itsPolygon.size() - 1));
        if (d2 < d) {
          reverseMe=true;
          reverseIt=true;
          d=d2;
        }
        d2=Rr2Point.dSquared(myPolygon.point(myPolygon.size() - 1),itsPolygon.point(itsPolygon.size() - 1));
        if (d2 < d) {
          reverseMe=false;
          reverseIt=true;
          d=d2;
        }
        if (d < linkUp) {
          if (reverseMe)           myPolygon=myPolygon.negate();
          if (reverseIt)           itsPolygon=itsPolygon.negate();
          myPolygon.add(itsPolygon);
          polygons.set(i,myPolygon);
          polygons.remove(j);
        }
      }
 else       if (!myPolygon.isClosed() && itsPolygon.isClosed()) {
        reverseMe=true;
        itsPoint=itsPolygon.nearestVertex(myPolygon.point(0));
        d=Rr2Point.dSquared(itsPolygon.point(itsPoint),myPolygon.point(0));
        itsTempPoint=itsPolygon.nearestVertex(myPolygon.point(myPolygon.size() - 1));
        d2=Rr2Point.dSquared(itsPolygon.point(itsTempPoint),myPolygon.point(myPolygon.size() - 1));
        if (d2 < d) {
          itsPoint=itsTempPoint;
          reverseMe=false;
          d=d2;
        }
        if (d < linkUp) {
          itsPolygon=itsPolygon.newStart(itsPoint);
          itsPolygon.add(itsPolygon.point(0));
          if (reverseMe)           myPolygon=myPolygon.negate();
          myPolygon.add(itsPolygon);
          myPolygon.setOpen();
          polygons.set(i,myPolygon);
          polygons.remove(j);
        }
      }
 else       if (myPolygon.isClosed() && itsPolygon.isClosed()) {
        for (int k=0; k < itsPolygon.size(); k++) {
          myTempPoint=myPolygon.nearestVertex(itsPolygon.point(k));
          d2=Rr2Point.dSquared(myPolygon.point(myTempPoint),itsPolygon.point(k));
          if (d2 < d) {
            myPoint=myTempPoint;
            itsPoint=k;
            d=d2;
          }
        }
        if (d < linkUp) {
          myPolygon=myPolygon.newStart(myPoint);
          myPolygon.add(myPolygon.point(0));
          itsPolygon=itsPolygon.newStart(itsPoint);
          itsPolygon.add(itsPolygon.point(0));
          myPolygon.add(itsPolygon);
          polygons.set(i,myPolygon);
          polygons.remove(j);
        }
      }
 else {
        Debug.e(""String_Node_Str"");
      }
    }
  }
}",0.9346661906461978
178232,"/** 
 * Compute the bridge infill for unsupported polygons for a slice.  This is very heuristic...
 * @param unSupported
 * @param slice
 * @param layerConditions
 * @return
 */
public RrPolygonList bridgeHatch(BooleanGridList unSupported,BooleanGridList lands,LayerRules layerConditions){
  RrPolygonList result=new RrPolygonList();
  for (int i=0; i < lands.size(); i++) {
    BooleanGrid landPattern=lands.get(i);
    BooleanGrid land1;
    while ((land1=findLand(landPattern)) != null) {
      Rr2Point cen1=land1.findCentroid();
      landPattern=BooleanGrid.difference(landPattern,land1);
      if (cen1 == null) {
        Debug.e(""String_Node_Str"");
        continue;
      }
      int bridgesIndex=findBridges(unSupported,cen1);
      if (bridgesIndex < 0) {
        Debug.d(""String_Node_Str"");
        continue;
      }
      BooleanGrid bridges=unSupported.get(bridgesIndex);
      BooleanGrid bridge=bridges.floodCopy(cen1);
      if (bridge == null)       continue;
      BooleanGrid land2=null;
      land2=BooleanGrid.intersection(bridge,landPattern);
      Rr2Point cen2=land2.findCentroid();
      if (cen2 == null) {
        Debug.d(""String_Node_Str"");
        result.add(bridge.hatch(layerConditions.getHatchDirection(bridge.attribute().getExtruder()),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
      }
 else {
        landPattern=BooleanGrid.difference(landPattern,land2);
        Rr2Point centroidDirection=Rr2Point.sub(cen2,cen1).norm();
        Rr2Point bridgeDirection=centroidDirection;
        double spMax=Double.NEGATIVE_INFINITY;
        double sp;
        RrPolygonList bridgeOutline=bridge.allPerimiters(bridge.attribute());
        for (int pol=0; pol < bridgeOutline.size(); pol++) {
          RrPolygon polygon=bridgeOutline.polygon(i);
          for (int vertex1=0; vertex1 < polygon.size(); vertex1++) {
            int vertex2=vertex1 + 1;
            if (vertex2 >= polygon.size())             vertex2=0;
            Rr2Point edge=Rr2Point.sub(polygon.point(vertex2),polygon.point(vertex1));
            if ((sp=Math.abs(Rr2Point.mul(edge,centroidDirection))) > spMax) {
              spMax=sp;
              bridgeDirection=edge;
            }
          }
        }
        result.add(bridge.hatch(new RrHalfPlane(new Rr2Point(0,0),bridgeDirection),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
      }
      BooleanGridList b=new BooleanGridList();
      b.add(bridge);
      unSupported=BooleanGridList.differences(unSupported,b);
    }
  }
  return result;
}","/** 
 * Compute the bridge infill for unsupported polygons for a slice.  This is very heuristic...
 * @param infill
 * @param lands
 * @param layerConditions
 * @return
 */
public InFillPatterns bridgeHatch(InFillPatterns infill,BooleanGridList lands,LayerRules layerConditions){
  InFillPatterns result=new InFillPatterns(infill);
  BooleanGridList b;
  for (int i=0; i < lands.size(); i++) {
    BooleanGrid landPattern=lands.get(i);
    BooleanGrid land1;
    while ((land1=findLand(landPattern)) != null) {
      Rr2Point cen1=land1.findCentroid();
      landPattern=BooleanGrid.difference(landPattern,land1);
      if (cen1 == null) {
        Debug.e(""String_Node_Str"");
        continue;
      }
      int bridgesIndex=findBridges(result.bridges,cen1);
      if (bridgesIndex < 0) {
        Debug.d(""String_Node_Str"");
        continue;
      }
      BooleanGrid bridges=result.bridges.get(bridgesIndex);
      BooleanGrid bridge=bridges.floodCopy(cen1);
      if (bridge == null)       continue;
      BooleanGrid land2=null;
      land2=BooleanGrid.intersection(bridge,landPattern);
      Rr2Point cen2=land2.findCentroid();
      if (cen2 == null) {
        Debug.d(""String_Node_Str"");
        result.hatchedPolygons.add(bridge.hatch(layerConditions.getHatchDirection(bridge.attribute().getExtruder()),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
        b=new BooleanGridList();
        b.add(bridge);
        result.insides=BooleanGridList.differences(result.insides,b);
        result.surfaces=BooleanGridList.differences(result.surfaces,b);
      }
 else {
        landPattern=BooleanGrid.difference(landPattern,land2);
        Rr2Point centroidDirection=Rr2Point.sub(cen2,cen1).norm();
        Rr2Point bridgeDirection=centroidDirection;
        double spMax=Double.NEGATIVE_INFINITY;
        double sp;
        RrPolygonList bridgeOutline=bridge.allPerimiters(bridge.attribute());
        for (int pol=0; pol < bridgeOutline.size(); pol++) {
          RrPolygon polygon=bridgeOutline.polygon(i);
          for (int vertex1=0; vertex1 < polygon.size(); vertex1++) {
            int vertex2=vertex1 + 1;
            if (vertex2 >= polygon.size())             vertex2=0;
            Rr2Point edge=Rr2Point.sub(polygon.point(vertex2),polygon.point(vertex1));
            if ((sp=Math.abs(Rr2Point.mul(edge,centroidDirection))) > spMax) {
              spMax=sp;
              bridgeDirection=edge;
            }
          }
        }
        result.hatchedPolygons.add(bridge.hatch(new RrHalfPlane(new Rr2Point(0,0),bridgeDirection),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
        b=new BooleanGridList();
        b.add(bridge);
        result.insides=BooleanGridList.differences(result.insides,b);
        result.surfaces=BooleanGridList.differences(result.surfaces,b);
      }
      b=new BooleanGridList();
      b.add(bridge);
      result.bridges=BooleanGridList.differences(result.bridges,b);
    }
  }
  return result;
}",0.8491140146769286
178233,"/** 
 * Compute the infill hatching polygons for this set of patterns
 * @param stl
 * @param layerConditions
 * @param startNearHere
 * @return
 */
public RrPolygonList computeInfill(int stl,LayerRules layerConditions){
  RrPolygonList hatchedPolygons;
  freeze();
  int layer=layerConditions.getMachineLayer();
  BooleanGridList slice=slice(stl,layerConditions.getModelLayer(),layerConditions);
  if (layerConditions.getModelLayer() < 2 || layerConditions.getModelLayer() > layerConditions.getModelLayerMax() - 3) {
    slice=slice.offset(layerConditions,false,-1);
    hatchedPolygons=slice.hatch(layerConditions,true,null);
    return hatchedPolygons;
  }
  BooleanGridList above=slice(stl,layer + 2,layerConditions);
  above=BooleanGridList.intersections(slice(stl,layer + 1,layerConditions),above);
  BooleanGridList below=slice(stl,layer - 2,layerConditions);
  below=BooleanGridList.intersections(slice(stl,layer - 1,layerConditions),below);
  BooleanGridList nothingabove=BooleanGridList.differences(slice,above);
  BooleanGridList nothingbelow=BooleanGridList.differences(slice,below);
  BooleanGridList insides=BooleanGridList.differences(slice,nothingbelow);
  insides=BooleanGridList.differences(insides,nothingabove);
  BooleanGridList bridges=nothingbelow.cullNonNull();
  nothingbelow=nothingbelow.cullNull();
  BooleanGridList surfaces=BooleanGridList.unions(nothingbelow,nothingabove);
  bridges=bridges.offset(layerConditions,false,2);
  bridges=BooleanGridList.intersections(bridges,slice);
  BooleanGridList lands=BooleanGridList.intersections(bridges,BooleanGridList.unions(insides,surfaces));
  insides=BooleanGridList.differences(insides,lands);
  surfaces=BooleanGridList.differences(surfaces,lands);
  bridges=bridges.offset(layerConditions,false,0.75);
  insides=insides.offset(layerConditions,false,0.75);
  surfaces=surfaces.offset(layerConditions,false,0.75);
  bridges=BooleanGridList.intersections(bridges,slice);
  insides=BooleanGridList.intersections(insides,slice);
  surfaces=BooleanGridList.intersections(surfaces,slice);
  bridges=bridges.offset(layerConditions,false,-1);
  insides=insides.offset(layerConditions,false,-1);
  surfaces=surfaces.offset(layerConditions,false,-1);
  hatchedPolygons=insides.hatch(layerConditions,false,null);
  hatchedPolygons.add(surfaces.hatch(layerConditions,true,null));
  hatchedPolygons.add(bridgeHatch(bridges,lands,layerConditions));
  return hatchedPolygons;
}","/** 
 * Compute the infill hatching polygons for this set of patterns
 * @param stl
 * @param layerConditions
 * @param startNearHere
 * @return
 */
public RrPolygonList computeInfill(int stl,LayerRules layerConditions){
  InFillPatterns infill=new InFillPatterns();
  freeze();
  int layer=layerConditions.getMachineLayer();
  BooleanGridList slice=slice(stl,layerConditions.getModelLayer(),layerConditions);
  if (layerConditions.getModelLayer() < 2 || layerConditions.getModelLayer() > layerConditions.getModelLayerMax() - 3) {
    slice=slice.offset(layerConditions,false,-1);
    infill.hatchedPolygons=slice.hatch(layerConditions,true,null);
    return infill.hatchedPolygons;
  }
  BooleanGridList above=slice(stl,layer + 2,layerConditions);
  above=BooleanGridList.intersections(slice(stl,layer + 1,layerConditions),above);
  BooleanGridList below=slice(stl,layer - 2,layerConditions);
  below=BooleanGridList.intersections(slice(stl,layer - 1,layerConditions),below);
  BooleanGridList nothingabove=BooleanGridList.differences(slice,above);
  BooleanGridList nothingbelow=BooleanGridList.differences(slice,below);
  infill.insides=BooleanGridList.differences(slice,nothingbelow);
  infill.insides=BooleanGridList.differences(infill.insides,nothingabove);
  infill.bridges=nothingbelow.cullNonNull();
  nothingbelow=nothingbelow.cullNull();
  infill.surfaces=BooleanGridList.unions(nothingbelow,nothingabove);
  infill.bridges=infill.bridges.offset(layerConditions,false,2);
  infill.bridges=BooleanGridList.intersections(infill.bridges,slice);
  BooleanGridList lands=BooleanGridList.intersections(infill.bridges,BooleanGridList.unions(infill.insides,infill.surfaces));
  infill.bridges=infill.bridges.offset(layerConditions,false,0.75);
  infill.insides=infill.insides.offset(layerConditions,false,0.75);
  infill.surfaces=infill.surfaces.offset(layerConditions,false,0.75);
  infill.bridges=BooleanGridList.intersections(infill.bridges,slice);
  infill.insides=BooleanGridList.intersections(infill.insides,slice);
  infill.surfaces=BooleanGridList.intersections(infill.surfaces,slice);
  infill.bridges=infill.bridges.offset(layerConditions,false,-1);
  infill.insides=infill.insides.offset(layerConditions,false,-1);
  infill.surfaces=infill.surfaces.offset(layerConditions,false,-1);
  infill=bridgeHatch(infill,lands,layerConditions);
  infill.hatchedPolygons.add(infill.insides.hatch(layerConditions,false,null));
  infill.hatchedPolygons.add(infill.surfaces.hatch(layerConditions,true,null));
  return infill.hatchedPolygons;
}",0.7121637896427138
178234,"private void openSerialConnection(String portName){
  int baudRate=19200;
  serialInStream=null;
  serialOutStream=null;
  Debug.d(""String_Node_Str"" + portName);
  Main.setRepRapPresent(false);
  try {
    CommPortIdentifier commId=CommPortIdentifier.getPortIdentifier(portName);
    port=(SerialPort)commId.open(portName,30000);
  }
 catch (  NoSuchPortException e) {
    Debug.d(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
catch (  PortInUseException e) {
    Debug.e(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
  Main.setRepRapPresent(true);
  try {
    baudRate=Preferences.loadGlobalInt(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
  try {
    port.setSerialPortParams(baudRate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"" + e.toString());
    return;
  }
  try {
    port.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);
  }
 catch (  Exception e) {
  }
  try {
    port.enableReceiveTimeout(1);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"");
  }
  try {
    OutputStream writeStream=port.getOutputStream();
    serialInStream=port.getInputStream();
    serialOutStream=new PrintStream(writeStream);
  }
 catch (  IOException e) {
    Debug.e(""String_Node_Str"");
    serialInStream=null;
    serialOutStream=null;
    return;
  }
  Debug.d(""String_Node_Str"");
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  for (int i=0; i < 10; i++)   serialOutStream.write('0');
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  return;
}","private void openSerialConnection(String portName){
  int baudRate=19200;
  serialInStream=null;
  serialOutStream=null;
  Debug.d(""String_Node_Str"" + portName);
  Main.setRepRapPresent(false);
  try {
    CommPortIdentifier commId=CommPortIdentifier.getPortIdentifier(portName);
    port=(SerialPort)commId.open(portName,30000);
  }
 catch (  NoSuchPortException e) {
    Debug.d(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
catch (  PortInUseException e) {
    Debug.e(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
  Main.setRepRapPresent(true);
  try {
    baudRate=Preferences.loadGlobalInt(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
  try {
    port.setSerialPortParams(baudRate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"" + e.toString());
    return;
  }
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  try {
    port.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);
  }
 catch (  Exception e) {
  }
  try {
    port.enableReceiveTimeout(1);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"");
  }
  try {
    OutputStream writeStream=port.getOutputStream();
    serialInStream=port.getInputStream();
    serialOutStream=new PrintStream(writeStream);
  }
 catch (  IOException e) {
    Debug.e(""String_Node_Str"");
    serialInStream=null;
    serialOutStream=null;
    return;
  }
  Debug.d(""String_Node_Str"");
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  for (int i=0; i < 10; i++)   serialOutStream.write('0');
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  return;
}",0.980876728449544
178235,"/** 
 * @param prefs
 * @throws Exception
 */
public GCodeRepRap() throws Exception {
  super();
  gcode=new GCodeReaderAndWriter();
  gcode.queue(""String_Node_Str"");
  gcode.queue(""String_Node_Str"");
  String FirmwareConfig=gcode.lastResponse();
  FirmwareConfig=FirmwareConfig.replace('\\','\n');
  Debug.d(""String_Node_Str"" + FirmwareConfig);
  loadExtruders();
  forceSelection=true;
}","/** 
 * @param prefs
 * @throws Exception
 */
public GCodeRepRap() throws Exception {
  super();
  gcode=new GCodeReaderAndWriter();
  gcode.queue(""String_Node_Str"");
  loadExtruders();
  forceSelection=true;
}",0.7011686143572621
178236,"/** 
 * Parse the string sent back from the RepRap machine.
 */
private long waitForResponse(){
  int i;
  String resp=""String_Node_Str"";
  long result=allSentOK;
  String lns;
  resetReceived();
  boolean goAgain;
  for (; ; ) {
    try {
      i=serialInStream.read();
    }
 catch (    Exception e) {
      i=-1;
    }
    if (i >= 0) {
      char c=(char)i;
      if (c == '\n' || c == '\r') {
        goAgain=false;
        if (resp.startsWith(""String_Node_Str"") || resp.contentEquals(""String_Node_Str"")) {
          resp=""String_Node_Str"";
          goAgain=true;
        }
 else         if (resp.startsWith(""String_Node_Str"")) {
          result=shutDown;
          Debug.e(""String_Node_Str"" + resp);
        }
 else         if (resp.startsWith(""String_Node_Str"")) {
          Debug.d(""String_Node_Str"" + resp);
          resp=""String_Node_Str"";
          goAgain=true;
        }
 else         if (resp.endsWith(""String_Node_Str"")) {
          goAgain=true;
        }
 else         if (resp.startsWith(""String_Node_Str"")) {
          lns=resp.substring(3);
          int sp=lns.indexOf(""String_Node_Str"");
          if (sp > 0)           lns=lns.substring(0,sp);
          result=Long.parseLong(lns);
          Debug.e(""String_Node_Str"" + result + ""String_Node_Str""+ resp);
        }
 else         if (!resp.startsWith(""String_Node_Str"")) {
          Debug.e(""String_Node_Str"" + resp);
          result=lineNumber;
        }
        eTemp=parseReturnedValue(resp,""String_Node_Str"");
        bTemp=parseReturnedValue(resp,""String_Node_Str"");
        if (resp.indexOf(""String_Node_Str"") >= 0) {
          x=parseReturnedValue(resp,""String_Node_Str"");
          y=parseReturnedValue(resp,""String_Node_Str"");
          z=parseReturnedValue(resp,""String_Node_Str"");
          e=parseReturnedValue(resp,""String_Node_Str"");
        }
        if (!goAgain) {
          Debug.c(""String_Node_Str"" + resp);
          lastResp=resp.substring(2);
          return result;
        }
      }
 else       resp+=c;
    }
  }
}","/** 
 * Parse the string sent back from the RepRap machine.
 */
private long waitForResponse(){
  int i;
  String resp=""String_Node_Str"";
  long result=allSentOK;
  String lns;
  resetReceived();
  boolean goAgain;
  Date timer=new Date();
  long startWait=timer.getTime();
  long timeNow;
  long increment=2000;
  long longWait=10 * 60 * 1000;
  for (; ; ) {
    timeNow=timer.getTime() - startWait;
    if (timeNow > increment) {
      Debug.d(""String_Node_Str"" + timeNow / 1000 + ""String_Node_Str"");
      increment=2 * increment;
    }
    if (timeNow > longWait) {
      Debug.e(""String_Node_Str"" + timeNow / 1000 + ""String_Node_Str"");
      try {
        queue(""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    try {
      i=serialInStream.read();
    }
 catch (    Exception e) {
      i=-1;
    }
    if (i >= 0) {
      char c=(char)i;
      if (c == '\n' || c == '\r') {
        goAgain=false;
        if (resp.startsWith(""String_Node_Str"") || resp.contentEquals(""String_Node_Str"")) {
          resp=""String_Node_Str"";
          goAgain=true;
        }
 else         if (resp.startsWith(""String_Node_Str"")) {
          result=shutDown;
          Debug.e(""String_Node_Str"" + resp);
        }
 else         if (resp.startsWith(""String_Node_Str"")) {
          Debug.d(""String_Node_Str"" + resp);
          resp=""String_Node_Str"";
          goAgain=true;
        }
 else         if (resp.endsWith(""String_Node_Str"")) {
          goAgain=true;
        }
 else         if (resp.startsWith(""String_Node_Str"")) {
          lns=resp.substring(3);
          int sp=lns.indexOf(""String_Node_Str"");
          if (sp > 0)           lns=lns.substring(0,sp);
          result=Long.parseLong(lns);
          Debug.e(""String_Node_Str"" + result + ""String_Node_Str""+ resp);
        }
 else         if (!resp.startsWith(""String_Node_Str"")) {
          Debug.e(""String_Node_Str"" + resp);
          result=lineNumber;
        }
        eTemp=parseReturnedValue(resp,""String_Node_Str"");
        bTemp=parseReturnedValue(resp,""String_Node_Str"");
        if (resp.indexOf(""String_Node_Str"") >= 0) {
          x=parseReturnedValue(resp,""String_Node_Str"");
          y=parseReturnedValue(resp,""String_Node_Str"");
          z=parseReturnedValue(resp,""String_Node_Str"");
          e=parseReturnedValue(resp,""String_Node_Str"");
        }
        if (!goAgain) {
          Debug.c(""String_Node_Str"" + resp);
          lastResp=resp.substring(2);
          return result;
        }
      }
 else       resp+=c;
    }
  }
}",0.8715254979207704
178237,"/** 
 * Gets the number of milliseconds to wait before opening the valve for the first track of a layer
 * @return
 */
public double getValveDelayForLayer(){
  return valveDelayForLayer;
}","/** 
 * Gets the number of milliseconds to wait before opening the valve for the first track of a layer
 * @return
 */
public double getValveDelayForLayer(){
  if (valvePulseTime < 0)   return 0;
  return valveDelayForLayer;
}",0.9082125603864736
178238,"/** 
 * Gets the number of milliseconds to wait before opening the valve for any other track
 * @return
 */
public double getValveDelayForPolygon(){
  return valveDelayForPolygon;
}","/** 
 * Gets the number of milliseconds to wait before opening the valve for any other track
 * @return
 */
public double getValveDelayForPolygon(){
  if (valvePulseTime < 0)   return 0;
  return valveDelayForPolygon;
}",0.905
178239,"/** 
 * @return the valve overrun in millimeters (i.e. how many mmbefore the end of a track to turn off the extrude motor)
 */
public double getValveOverRun(){
  return valveOverRun;
}","/** 
 * @return the valve overrun in millimeters (i.e. how many mmbefore the end of a track to turn off the extrude motor)
 */
public double getValveOverRun(){
  if (valvePulseTime < 0)   return 0;
  return valveOverRun;
}",0.9064039408866996
178240,"/** 
 * Compute the infill hatching polygons for this set of patterns
 * @param stl
 * @param layerConditions
 * @param startNearHere
 * @return
 */
public RrPolygonList computeInfill(int stl,LayerRules layerConditions){
  freeze();
  int layer=layerConditions.getMachineLayer();
  BooleanGridList slice=slice(stl,layerConditions.getModelLayer(),layerConditions);
  BooleanGridList adjacentSlices=slice(stl,layer + 1,layerConditions);
  adjacentSlices=BooleanGridList.intersections(slice(stl,layer + 2,layerConditions),adjacentSlices);
  BooleanGridList supportBeneath=slice(stl,layer - 1,layerConditions);
  adjacentSlices=BooleanGridList.intersections(supportBeneath,adjacentSlices);
  adjacentSlices=BooleanGridList.intersections(slice(stl,layer - 2,layerConditions),adjacentSlices);
  BooleanGridList insides=null;
  BooleanGridList nothingAbove=slice;
  BooleanGridList unSupported=null;
  BooleanGridList lands=null;
  if (adjacentSlices != null && layerConditions.getModelLayer() > 1) {
    insides=BooleanGridList.intersections(slice,adjacentSlices);
    nothingAbove=BooleanGridList.differences(slice,adjacentSlices,false);
    unSupported=BooleanGridList.differences(nothingAbove,supportBeneath,true);
    nothingAbove=BooleanGridList.differences(nothingAbove,unSupported,false);
    nothingAbove=nothingAbove.offset(layerConditions,false,-2);
    nothingAbove=BooleanGridList.intersections(nothingAbove,slice);
    unSupported=unSupported.offset(layerConditions,false,-2);
    unSupported=BooleanGridList.intersections(unSupported,slice);
  }
  nothingAbove=nothingAbove.offset(layerConditions,false,1);
  if (unSupported != null)   unSupported=unSupported.offset(layerConditions,false,1);
  if (insides != null) {
    insides=insides.offset(layerConditions,false,1);
    lands=BooleanGridList.intersections(unSupported,insides);
    insides=BooleanGridList.differences(insides,nothingAbove,false);
    insides=BooleanGridList.differences(insides,unSupported,false);
  }
  RrPolygonList hatchedPolygons=nothingAbove.hatch(layerConditions,true,null);
  if (unSupported != null && lands != null)   hatchedPolygons.add(bridges(unSupported,lands,layerConditions));
  if (insides != null)   hatchedPolygons.add(insides.hatch(layerConditions,false,null));
  return hatchedPolygons;
}","/** 
 * Compute the infill hatching polygons for this set of patterns
 * @param stl
 * @param layerConditions
 * @param startNearHere
 * @return
 */
public RrPolygonList computeInfill(int stl,LayerRules layerConditions){
  freeze();
  int layer=layerConditions.getMachineLayer();
  BooleanGridList slice=slice(stl,layerConditions.getModelLayer(),layerConditions);
  BooleanGridList adjacentSlices=slice(stl,layer + 1,layerConditions);
  BooleanGridList supportBeneath=null;
  adjacentSlices=BooleanGridList.intersections(slice(stl,layer + 2,layerConditions),adjacentSlices);
  supportBeneath=slice(stl,layer - 1,layerConditions);
  adjacentSlices=BooleanGridList.intersections(supportBeneath,adjacentSlices);
  adjacentSlices=BooleanGridList.intersections(slice(stl,layer - 2,layerConditions),adjacentSlices);
  BooleanGridList insides=null;
  BooleanGridList nothingAbove=slice;
  BooleanGridList unSupported=null;
  BooleanGridList lands=null;
  if (adjacentSlices != null && layerConditions.getModelLayer() > 1) {
    insides=BooleanGridList.intersections(slice,adjacentSlices);
    nothingAbove=BooleanGridList.differences(slice,adjacentSlices,false);
    unSupported=BooleanGridList.differences(nothingAbove,supportBeneath,true);
    nothingAbove=BooleanGridList.differences(nothingAbove,unSupported,false);
    nothingAbove=nothingAbove.offset(layerConditions,false,-2);
    nothingAbove=BooleanGridList.intersections(nothingAbove,slice);
    unSupported=unSupported.offset(layerConditions,false,-2);
    unSupported=BooleanGridList.intersections(unSupported,slice);
  }
  nothingAbove=nothingAbove.offset(layerConditions,false,1);
  if (unSupported != null)   unSupported=unSupported.offset(layerConditions,false,1);
  if (insides != null) {
    insides=insides.offset(layerConditions,false,1);
    lands=BooleanGridList.intersections(unSupported,insides);
    insides=BooleanGridList.differences(insides,nothingAbove,false);
    insides=BooleanGridList.differences(insides,unSupported,false);
  }
  RrPolygonList hatchedPolygons=nothingAbove.hatch(layerConditions,true,null);
  if (unSupported != null && lands != null)   hatchedPolygons.add(bridges(unSupported,lands,layerConditions));
  if (insides != null)   hatchedPolygons.add(insides.hatch(layerConditions,false,null));
  return hatchedPolygons;
}",0.9880408784518372
178241,"/** 
 * Compute the bridge infill for unsupported polygons for a slice.  This is very heuristic...
 * @param unSupported
 * @param slice
 * @param layerConditions
 * @return
 */
public RrPolygonList bridges(BooleanGridList unSupported,BooleanGridList lands,LayerRules layerConditions){
  RrPolygonList result=new RrPolygonList();
  for (int i=0; i < lands.size(); i++) {
    BooleanGrid landPattern=lands.get(i);
    BooleanGrid land1;
    while ((land1=findLand(landPattern)) != null) {
      Rr2Point cen1=land1.findCentroid();
      if (cen1 == null) {
        Debug.e(""String_Node_Str"");
        return result;
      }
      land1.offset(0.5);
      try {
        landPattern=BooleanGrid.difference(landPattern,land1);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      int bridgesIndex=findBridges(unSupported,cen1);
      if (bridgesIndex < 0) {
        Debug.e(""String_Node_Str"");
        return result;
      }
      BooleanGrid bridges=unSupported.get(bridgesIndex);
      BooleanGrid bridge=bridges.floodCopy(cen1);
      if (bridge == null)       continue;
      BooleanGrid land2=null;
      try {
        land2=BooleanGrid.intersection(bridge,landPattern);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      Rr2Point cen2=land2.findCentroid();
      if (cen2 == null) {
        Debug.d(""String_Node_Str"");
        result.add(bridge.hatch(layerConditions.getHatchDirection(bridge.attribute().getExtruder()),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
      }
 else {
        land2.offset(0.5);
        try {
          landPattern=BooleanGrid.difference(landPattern,land2);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Rr2Point centroidDirection=Rr2Point.sub(cen2,cen1).norm();
        Rr2Point bridgeDirection=centroidDirection;
        double spMax=Double.NEGATIVE_INFINITY;
        double sp;
        RrPolygonList bridgeOutline=bridge.allPerimiters(bridge.attribute());
        for (int pol=0; pol < bridgeOutline.size(); pol++) {
          RrPolygon polygon=bridgeOutline.polygon(i);
          double tooSmall=polygon.meanEdge();
          for (int vertex1=0; vertex1 < polygon.size(); vertex1++) {
            int vertex2=vertex1 + 1;
            if (vertex2 >= polygon.size())             vertex2=0;
            Rr2Point edge=Rr2Point.sub(polygon.point(vertex2),polygon.point(vertex1));
            if (edge.mod() > tooSmall) {
              if ((sp=Math.abs(Rr2Point.mul(edge,centroidDirection))) > spMax) {
                spMax=sp;
                bridgeDirection=edge;
              }
            }
          }
        }
        result.add(bridge.hatch(new RrHalfPlane(new Rr2Point(0,0),bridgeDirection),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
      }
    }
  }
  return result;
}","/** 
 * Compute the bridge infill for unsupported polygons for a slice.  This is very heuristic...
 * @param unSupported
 * @param slice
 * @param layerConditions
 * @return
 */
public RrPolygonList bridges(BooleanGridList unSupported,BooleanGridList lands,LayerRules layerConditions){
  RrPolygonList result=new RrPolygonList();
  for (int i=0; i < lands.size(); i++) {
    BooleanGrid landPattern=lands.get(i);
    BooleanGrid land1;
    while ((land1=findLand(landPattern)) != null) {
      Rr2Point cen1=land1.findCentroid();
      if (cen1 == null) {
        Debug.e(""String_Node_Str"");
        return result;
      }
      land1.offset(0.5);
      landPattern=BooleanGrid.difference(landPattern,land1);
      int bridgesIndex=findBridges(unSupported,cen1);
      if (bridgesIndex < 0) {
        Debug.e(""String_Node_Str"");
        return result;
      }
      BooleanGrid bridges=unSupported.get(bridgesIndex);
      BooleanGrid bridge=bridges.floodCopy(cen1);
      if (bridge == null)       continue;
      BooleanGrid land2=null;
      land2=BooleanGrid.intersection(bridge,landPattern);
      Rr2Point cen2=land2.findCentroid();
      if (cen2 == null) {
        Debug.d(""String_Node_Str"");
        result.add(bridge.hatch(layerConditions.getHatchDirection(bridge.attribute().getExtruder()),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
      }
 else {
        land2.offset(0.5);
        landPattern=BooleanGrid.difference(landPattern,land2);
        Rr2Point centroidDirection=Rr2Point.sub(cen2,cen1).norm();
        Rr2Point bridgeDirection=centroidDirection;
        double spMax=Double.NEGATIVE_INFINITY;
        double sp;
        RrPolygonList bridgeOutline=bridge.allPerimiters(bridge.attribute());
        for (int pol=0; pol < bridgeOutline.size(); pol++) {
          RrPolygon polygon=bridgeOutline.polygon(i);
          double tooSmall=polygon.meanEdge();
          for (int vertex1=0; vertex1 < polygon.size(); vertex1++) {
            int vertex2=vertex1 + 1;
            if (vertex2 >= polygon.size())             vertex2=0;
            Rr2Point edge=Rr2Point.sub(polygon.point(vertex2),polygon.point(vertex1));
            if (edge.mod() > tooSmall) {
              if ((sp=Math.abs(Rr2Point.mul(edge,centroidDirection))) > spMax) {
                spMax=sp;
                bridgeDirection=edge;
              }
            }
          }
        }
        result.add(bridge.hatch(new RrHalfPlane(new Rr2Point(0,0),bridgeDirection),bridge.attribute().getExtruder().getExtrusionInfillWidth(),bridge.attribute()));
      }
    }
  }
  return result;
}",0.6665453221696396
178242,"/** 
 * Compute the intersection of two  bit patterns
 * @param d
 * @param e
 * @return
 */
public static BooleanGrid intersection(BooleanGrid d,BooleanGrid e){
  if (d.att != e.att)   Debug.e(""String_Node_Str"" + d.attribute().getMaterial() + ""String_Node_Str""+ e.attribute().getMaterial());
  return intersection(d,e,d.att);
}","/** 
 * Compute the intersection of two  bit patterns
 * @param d
 * @param e
 * @return
 */
public static BooleanGrid intersection(BooleanGrid d,BooleanGrid e){
  BooleanGrid result=intersection(d,e,d.att);
  if (result != nothingThere && d.att != e.att)   Debug.e(""String_Node_Str"" + d.attribute().getMaterial() + ""String_Node_Str""+ e.attribute().getMaterial());
  return result;
}",0.8466947960618847
178243,"/** 
 * Grid d - grid e d's rectangle is presumed to contain the result. TODO: write a function to compute the rectangle from the bitmap
 * @param d
 * @param e
 * @return
 */
public static BooleanGrid difference(BooleanGrid d,BooleanGrid e){
  if (d.att != e.att)   Debug.e(""String_Node_Str"" + d.attribute().getMaterial() + ""String_Node_Str""+ e.attribute().getMaterial());
  return difference(d,e,d.att);
}","/** 
 * Grid d - grid e d's rectangle is presumed to contain the result. TODO: write a function to compute the rectangle from the bitmap
 * @param d
 * @param e
 * @return
 */
public static BooleanGrid difference(BooleanGrid d,BooleanGrid e){
  BooleanGrid result=difference(d,e,d.att);
  if (result != nothingThere && d.att != e.att)   Debug.e(""String_Node_Str"" + d.attribute().getMaterial() + ""String_Node_Str""+ e.attribute().getMaterial());
  return result;
}",0.8699654775604143
178244,"/** 
 * Compute the union of two bit patterns
 * @param d
 * @param e
 * @return
 */
public static BooleanGrid union(BooleanGrid d,BooleanGrid e){
  if (d.att != e.att)   Debug.e(""String_Node_Str"" + d.attribute().getMaterial() + ""String_Node_Str""+ e.attribute().getMaterial());
  return union(d,e,d.att);
}","/** 
 * Compute the union of two bit patterns
 * @param d
 * @param e
 * @return
 */
public static BooleanGrid union(BooleanGrid d,BooleanGrid e){
  BooleanGrid result=union(d,e,d.att);
  if (result != nothingThere && d.att != e.att)   Debug.e(""String_Node_Str"" + d.attribute().getMaterial() + ""String_Node_Str""+ e.attribute().getMaterial());
  return result;
}",0.8575712143928036
178245,"/** 
 * Work out all the open polygons forming a set of infill hatches.  If surface is true, these polygons are on the outside (top or bottom).  If it's false they are in the interior.  If overrideDirection is not null, that is used as the hatch direction.  Otherwise the hatch is provided by layerConditions.
 * @param layerConditions
 * @param surface
 * @param overrideDirection
 * @return
 */
public RrPolygonList hatch(LayerRules layerConditions,boolean surface,RrHalfPlane overrideDirection){
  RrPolygonList result=new RrPolygonList();
  boolean foundation=layerConditions.getLayingSupport();
  Extruder[] es=layerConditions.getPrinter().getExtruders();
  for (int i=0; i < size(); i++) {
    Extruder e;
    Attributes att=attribute(i);
    if (foundation)     e=es[0];
 else     e=att.getExtruder();
    Extruder ei;
    if (!surface) {
      ei=e.getInfillExtruder();
      if (ei != null)       att=new Attributes(ei.getMaterial(),null,null,ei.getAppearance());
    }
 else     ei=e;
    if (ei != null) {
      RrHalfPlane hatchLine=layerConditions.getHatchDirection(ei);
      if (overrideDirection != null)       hatchLine=overrideDirection;
      result.add(get(i).hatch(hatchLine,layerConditions.getHatchWidth(ei),att));
    }
  }
  return result;
}","/** 
 * Work out all the open polygons forming a set of infill hatches.  If surface is true, these polygons are on the outside (top or bottom).  If it's false they are in the interior.  If overrideDirection is not null, that is used as the hatch direction.  Otherwise the hatch is provided by layerConditions.
 * @param layerConditions
 * @param surface
 * @param overrideDirection
 * @return
 */
public RrPolygonList hatch(LayerRules layerConditions,boolean surface,RrHalfPlane overrideDirection){
  RrPolygonList result=new RrPolygonList();
  boolean foundation=layerConditions.getLayingSupport();
  Extruder[] es=layerConditions.getPrinter().getExtruders();
  for (int i=0; i < size(); i++) {
    Extruder e;
    Attributes att=attribute(i);
    if (foundation)     e=es[0];
 else     e=att.getExtruder();
    Extruder ei;
    if (!surface) {
      ei=e.getInfillExtruder();
      if (ei != null)       att=new Attributes(ei.getMaterial(),null,null,ei.getAppearance());
    }
 else     ei=e;
    if (ei != null) {
      RrHalfPlane hatchLine;
      if (overrideDirection != null)       hatchLine=overrideDirection;
 else       hatchLine=layerConditions.getHatchDirection(ei);
      result.add(get(i).hatch(hatchLine,layerConditions.getHatchWidth(ei),att));
    }
  }
  return result;
}",0.9157853505679592
178246,"/** 
 * @param startX
 * @param startY
 * @param startZ
 * @param endX
 * @param endY
 * @param endZ
 * @throws ReprapException
 * @throws IOException
 * @throws Exception 
 */
public void moveTo(double x,double y,double z,double feedRate,boolean startUp,boolean endUp) throws ReprapException, IOException, Exception {
  if (isCancelled())   return;
  totalDistanceMoved+=segmentLength(x - currentX,y - currentY);
  if (z != currentZ)   totalDistanceMoved+=Math.abs(currentZ - z);
  currentX=x;
  currentY=y;
  currentZ=z;
  XYEAtZero=false;
}","public void moveTo(double x,double y,double z,double feedRate,boolean startUp,boolean endUp) throws ReprapException, IOException, Exception {
  if (isCancelled())   return;
  checkCoordinates(x,y,z);
  totalDistanceMoved+=segmentLength(x - currentX,y - currentY);
  if (z != currentZ)   totalDistanceMoved+=Math.abs(currentZ - z);
  currentX=x;
  currentY=y;
  currentZ=z;
  XYEAtZero=false;
}",0.4978632478632478
178247,"public void homeToZeroXYE() throws Exception {
  if (XYEAtZero)   return;
  homeToZeroX();
  homeToZeroY();
  int extruderNow=extruder;
  for (int i=0; i < extruders.length; i++) {
    if (extruders[i].getExtruderState().length() > 0) {
      selectExtruder(i);
      extruders[i].zeroExtrudedLength();
    }
  }
  selectExtruder(extruderNow);
  XYEAtZero=true;
  super.homeToZeroXYE();
}","public void homeToZeroXYE() throws Exception {
  if (XYEAtZero)   return;
  homeToZeroX();
  homeToZeroY();
  int extruderNow=extruder;
  for (int i=0; i < extruders.length; i++) {
    selectExtruder(i);
    extruders[i].zeroExtrudedLength();
  }
  selectExtruder(extruderNow);
  XYEAtZero=true;
  super.homeToZeroXYE();
}",0.6985915492957746
178248,"/** 
 * Just about to start the next layer
 * @param lc
 */
public void startingLayer(LayerRules lc) throws Exception {
  lc.setFractionDone();
  if (lc.getMachineLayer() > 0 && Preferences.loadGlobalBool(""String_Node_Str""))   homeToZeroXYE();
 else {
    int extruderNow=extruder;
    for (int i=0; i < extruders.length; i++) {
      if (extruders[i].getExtruderState().length() > 0) {
        selectExtruder(i);
        extruders[i].zeroExtrudedLength();
      }
    }
    selectExtruder(extruderNow);
  }
  double datumX=getExtruder().getNozzleWipeDatumX();
  double datumY=getExtruder().getNozzleWipeDatumY();
  double strokeY=getExtruder().getNozzleWipeStrokeY();
  double clearTime=getExtruder().getNozzleClearTime();
  double waitTime=getExtruder().getNozzleWaitTime();
  double coolTime=getExtruder().getCoolingPeriod();
  if (layerPauseCheckbox != null && layerPauseCheckbox.isSelected())   layerPause();
  if (isCancelled()) {
    getExtruder().setCooler(false);
    getExtruder().stopExtruding();
    return;
  }
  double cool=Timer.elapsed();
  if (startCooling >= 0)   cool=cool - startCooling;
 else   cool=0;
  if (startCooling >= 0) {
    cool=coolTime - cool;
    machineWait(1000 * cool,false);
  }
  if (coolTime > 0)   getExtruder().setCooler(false);
  if (getExtruder().getNozzleWipeEnabled()) {
    singleMove(datumX,datumY,currentZ,getExtruder().getOutlineFeedrate());
    if (clearTime > 0) {
      getExtruder().setValve(true);
      getExtruder().setMotor(true);
      machineWait(1000 * clearTime,false);
      getExtruder().setMotor(false);
      getExtruder().setValve(false);
      machineWait(1000 * waitTime,false);
    }
    singleMove(datumX,datumY + strokeY,currentZ,currentFeedrate);
  }
  lc.moveZAtStartOfLayer();
}","/** 
 * Just about to start the next layer
 * @param lc
 */
public void startingLayer(LayerRules lc) throws Exception {
  lc.setFractionDone();
  if (lc.getMachineLayer() > 0 && Preferences.loadGlobalBool(""String_Node_Str""))   homeToZeroXYE();
 else {
    int extruderNow=extruder;
    for (int i=0; i < extruders.length; i++) {
      selectExtruder(i);
      extruders[i].zeroExtrudedLength();
    }
    selectExtruder(extruderNow);
  }
  double datumX=getExtruder().getNozzleWipeDatumX();
  double datumY=getExtruder().getNozzleWipeDatumY();
  double strokeY=getExtruder().getNozzleWipeStrokeY();
  double clearTime=getExtruder().getNozzleClearTime();
  double waitTime=getExtruder().getNozzleWaitTime();
  double coolTime=getExtruder().getCoolingPeriod();
  if (layerPauseCheckbox != null && layerPauseCheckbox.isSelected())   layerPause();
  if (isCancelled()) {
    getExtruder().setCooler(false);
    getExtruder().stopExtruding();
    return;
  }
  double cool=Timer.elapsed();
  if (startCooling >= 0)   cool=cool - startCooling;
 else   cool=0;
  if (startCooling >= 0) {
    cool=coolTime - cool;
    machineWait(1000 * cool,false);
  }
  if (coolTime > 0)   getExtruder().setCooler(false);
  if (getExtruder().getNozzleWipeEnabled()) {
    singleMove(datumX,datumY,currentZ,getExtruder().getOutlineFeedrate());
    if (clearTime > 0) {
      getExtruder().setValve(true);
      getExtruder().setMotor(true);
      machineWait(1000 * clearTime,false);
      getExtruder().setMotor(false);
      getExtruder().setValve(false);
      machineWait(1000 * waitTime,false);
    }
    singleMove(datumX,datumY + strokeY,currentZ,currentFeedrate);
  }
  lc.moveZAtStartOfLayer();
}",0.9569266589057044
178249,"/** 
 * Just about to start the next layer
 * @param lc
 */
public void startingLayer(LayerRules lc) throws Exception {
  lc.setFractionDone();
  if (lc.getMachineLayer() > 0)   homeToZeroXYE();
  double datumX=getExtruder().getNozzleWipeDatumX();
  double datumY=getExtruder().getNozzleWipeDatumY();
  double strokeY=getExtruder().getNozzleWipeStrokeY();
  double clearTime=getExtruder().getNozzleClearTime();
  double waitTime=getExtruder().getNozzleWaitTime();
  double coolTime=getExtruder().getCoolingPeriod();
  if (layerPauseCheckbox != null && layerPauseCheckbox.isSelected())   layerPause();
  if (isCancelled()) {
    getExtruder().setCooler(false);
    getExtruder().stopExtruding();
    return;
  }
  double cool=Timer.elapsed();
  if (startCooling >= 0)   cool=cool - startCooling;
 else   cool=0;
  if (startCooling >= 0) {
    cool=coolTime - cool;
    machineWait(1000 * cool,false);
  }
  getExtruder().setCooler(false);
  if (startCooling >= 0) {
    machineWait(200 * coolTime,false);
    Debug.d(""String_Node_Str"");
  }
  if (getExtruder().getNozzleWipeEnabled()) {
    singleMove(datumX,datumY,currentZ,getExtruder().getOutlineFeedrate());
    if (clearTime > 0) {
      getExtruder().setValve(true);
      getExtruder().setMotor(true);
      machineWait(1000 * clearTime,false);
      getExtruder().setMotor(false);
      getExtruder().setValve(false);
      machineWait(1000 * waitTime,false);
    }
    singleMove(datumX,datumY + strokeY,currentZ,currentFeedrate);
  }
  lc.moveZAtStartOfLayer();
}","/** 
 * Just about to start the next layer
 * @param lc
 */
public void startingLayer(LayerRules lc) throws Exception {
  lc.setFractionDone();
  if (lc.getMachineLayer() > 0 && Preferences.loadGlobalBool(""String_Node_Str""))   homeToZeroXYE();
  double datumX=getExtruder().getNozzleWipeDatumX();
  double datumY=getExtruder().getNozzleWipeDatumY();
  double strokeY=getExtruder().getNozzleWipeStrokeY();
  double clearTime=getExtruder().getNozzleClearTime();
  double waitTime=getExtruder().getNozzleWaitTime();
  double coolTime=getExtruder().getCoolingPeriod();
  if (layerPauseCheckbox != null && layerPauseCheckbox.isSelected())   layerPause();
  if (isCancelled()) {
    getExtruder().setCooler(false);
    getExtruder().stopExtruding();
    return;
  }
  double cool=Timer.elapsed();
  if (startCooling >= 0)   cool=cool - startCooling;
 else   cool=0;
  if (startCooling >= 0) {
    cool=coolTime - cool;
    machineWait(1000 * cool,false);
  }
  if (coolTime > 0)   getExtruder().setCooler(false);
  if (getExtruder().getNozzleWipeEnabled()) {
    singleMove(datumX,datumY,currentZ,getExtruder().getOutlineFeedrate());
    if (clearTime > 0) {
      getExtruder().setValve(true);
      getExtruder().setMotor(true);
      machineWait(1000 * clearTime,false);
      getExtruder().setMotor(false);
      getExtruder().setValve(false);
      machineWait(1000 * waitTime,false);
    }
    singleMove(datumX,datumY + strokeY,currentZ,currentFeedrate);
  }
  lc.moveZAtStartOfLayer();
}",0.9432082364662904
178250,"private void createBitmap(){
  gerberGcode=new GerberGCode(pcbPen,null,true);
  bigBox=new RrRectangle();
  try {
    in=new BufferedReader(new FileReader(inputTracksAndPads));
    while ((line=in.readLine()) != null) {
      RrRectangle r=processLine(line,false);
      if (r != null)       bigBox=RrRectangle.union(bigBox,r);
    }
    in.close();
    PCBOffsets.pcbo(bigBox);
    offsetX=PCBOffsets.getXoff() - bigBox.sw().x();
    offsetY=PCBOffsets.getYoff() - bigBox.sw().y();
    bigBox=bigBox.translate(new Rr2Point(PCBOffsets.getXoff(),PCBOffsets.getYoff()));
    in=new BufferedReader(new FileReader(inputTracksAndPads));
    BooleanGrid pattern=new BooleanGrid(RrCSG.nothing(),bigBox,new Attributes(null,null,null,pcbPen.getAppearance()));
    gerberGcode=new GerberGCode(pcbPen,pattern,true);
    while ((line=in.readLine()) != null) {
      processLine(line,false);
    }
    if (inputDrill != null) {
      in=new BufferedReader(new FileReader(inputDrill));
      gerberGcode=new GerberGCode(pcbPen,pattern,false);
      gerberGcode.addCircleAperture(-1,centreWidth);
      while ((line=in.readLine()) != null) {
        processLine(line,true);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void createBitmap(){
  gerberGcode=new GerberGCode(pcbPen,null,true);
  bigBox=new RrRectangle();
  RrRectangle r;
  try {
    in=new BufferedReader(new FileReader(inputTracksAndPads));
    while ((line=in.readLine()) != null) {
      r=processLine(line,false);
      if (r != null)       bigBox=RrRectangle.union(bigBox,r);
    }
    in.close();
    PCBOffsets.pcbo(bigBox);
    offsetX=PCBOffsets.getXoff() - bigBox.sw().x();
    offsetY=PCBOffsets.getYoff() - bigBox.sw().y();
    bigBox=bigBox.translate(new Rr2Point(offsetX,offsetY));
    in=new BufferedReader(new FileReader(inputTracksAndPads));
    BooleanGrid pattern=new BooleanGrid(RrCSG.nothing(),bigBox,new Attributes(null,null,null,pcbPen.getAppearance()));
    gerberGcode=new GerberGCode(pcbPen,pattern,true);
    while ((line=in.readLine()) != null) {
      processLine(line,false);
    }
    if (inputDrill != null) {
      in=new BufferedReader(new FileReader(inputDrill));
      gerberGcode=new GerberGCode(pcbPen,pattern,false);
      gerberGcode.addCircleAperture(-1,centreWidth);
      while ((line=in.readLine()) != null) {
        processLine(line,true);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9701187065083912
178251,"/** 
 * Deep copy - NB: attributes _not_ deep copied
 * @param p
 */
public RrPolygon(RrPolygon p){
  this(p.att,p.closed);
  for (int i=0; i < p.size(); i++)   add(new Rr2Point(p.point(i)));
  if (p.speeds != null) {
    speeds=new ArrayList<Double>();
    for (int i=0; i < p.size(); i++)     speeds.add(new Double(p.speed(i)));
  }
  closed=p.closed;
}","/** 
 * Deep copy - NB: attributes _not_ deep copied
 * @param p
 */
public RrPolygon(RrPolygon p){
  this(p.att,p.closed);
  for (int i=0; i < p.size(); i++)   add(new Rr2Point(p.point(i)));
  if (p.speeds != null) {
    speeds=new ArrayList<Double>();
    for (int i=0; i < p.size(); i++)     speeds.add(new Double(p.speed(i)));
  }
  closed=p.closed;
  drawEnd=p.drawEnd;
}",0.9712722298221614
178252,"/** 
 * Find the nearest vertex on this polygon to any on polygon p, reorder p so that its nearest is its first one, then merge that polygon into this one.  The reordering is only done if the distance^2 is less  than linkUp.  If no reordering and merging are done false is returned,  otherwise true is returned.
 * @param p
 * @param linkUp
 * @return
 */
public boolean nearestVertexReorderMerge(RrPolygon p,double linkUp){
  if (!p.isClosed())   Debug.e(""String_Node_Str"");
  double d=Double.POSITIVE_INFINITY;
  int myPoint=-1;
  int itsPoint=-1;
  for (int i=0; i < size(); i++) {
    int j=p.nearestVertex(point(i));
    double d2=Rr2Point.dSquared(point(i),p.point(j));
    if (d2 < d) {
      d=d2;
      myPoint=i;
      itsPoint=j;
    }
  }
  if (itsPoint >= 0 && d < linkUp * linkUp) {
    RrPolygon ro=p.newStart(itsPoint);
    ro.add(0,point(myPoint));
    add(myPoint,ro);
    return true;
  }
 else   return false;
}","/** 
 * Find the nearest vertex on this polygon to any on polygon p, reorder p so that its nearest is its first one, then merge that polygon into this one.  The reordering is only done if the distance^2 is less  than linkUp.  If no reordering and merging are done false is returned,  otherwise true is returned.
 * @param p
 * @param linkUp
 * @return
 */
public boolean nearestVertexReorderMerge(RrPolygon p,double linkUp){
  if (!p.isClosed())   Debug.e(""String_Node_Str"");
  if (drawEnd >= 0 || p.drawEnd >= 0)   Debug.e(""String_Node_Str"");
  if (drawEnd >= 0)   Debug.e(""String_Node_Str"");
  double d=Double.POSITIVE_INFINITY;
  int myPoint=-1;
  int itsPoint=-1;
  for (int i=0; i < size(); i++) {
    int j=p.nearestVertex(point(i));
    double d2=Rr2Point.dSquared(point(i),p.point(j));
    if (d2 < d) {
      d=d2;
      myPoint=i;
      itsPoint=j;
    }
  }
  if (itsPoint >= 0 && d < linkUp * linkUp) {
    RrPolygon ro=p.newStart(itsPoint);
    ro.add(0,point(myPoint));
    add(myPoint,ro);
    return true;
  }
 else   return false;
}",0.9404040404040404
178253,"/** 
 * @return same polygon, but starting at vertex i
 */
public RrPolygon newStart(int i){
  if (!isClosed())   Debug.e(""String_Node_Str"");
  if (i < 0 || i >= size()) {
    Debug.e(""String_Node_Str"" + i);
    return this;
  }
  RrPolygon result=new RrPolygon(att,closed);
  for (int j=0; j < size(); j++) {
    result.add(point(i));
    if (speeds != null)     result.setSpeed(j,speed(i));
    i++;
    if (i >= size())     i=0;
  }
  return result;
}","/** 
 * @return same polygon, but starting at vertex i
 */
public RrPolygon newStart(int i){
  if (!isClosed())   Debug.e(""String_Node_Str"");
  if (drawEnd >= 0)   Debug.e(""String_Node_Str"");
  if (i < 0 || i >= size()) {
    Debug.e(""String_Node_Str"" + i);
    return this;
  }
  RrPolygon result=new RrPolygon(att,closed);
  for (int j=0; j < size(); j++) {
    result.add(point(i));
    if (speeds != null)     result.setSpeed(j,speed(i));
    i++;
    if (i >= size())     i=0;
  }
  return result;
}",0.9478079331941544
178254,"/** 
 * Put a new polygon in the middle (at vertex k, which will be at the end of the inserted polygon afterwards). (N.B. Attributes of the new polygon are ignored)
 * @param k
 * @param p
 */
public void add(int k,RrPolygon p){
  if (p.size() == 0)   return;
  if (speeds != p.speeds) {
    Debug.e(""String_Node_Str"");
    return;
  }
  for (int i=0; i < p.size(); i++) {
    if (speeds != null)     add(k,new Rr2Point(p.point(i)),p.speed(i));
 else     points.add(k,new Rr2Point(p.point(i)));
    k++;
  }
  box.expand(p.box);
}","/** 
 * Put a new polygon in the middle (at vertex k, which will be at the end of the inserted polygon afterwards). (N.B. Attributes of the new polygon are ignored)
 * @param k
 * @param p
 */
public void add(int k,RrPolygon p){
  if (p.size() == 0)   return;
  if (speeds != p.speeds) {
    Debug.e(""String_Node_Str"");
    return;
  }
  if (k <= drawEnd)   Debug.e(""String_Node_Str"");
  int de=-1;
  if (drawEnd >= 0)   de=drawEnd + p.size();
  for (int i=0; i < p.size(); i++) {
    if (i == p.drawEnd)     drawEnd=size();
    if (speeds != null)     add(k,new Rr2Point(p.point(i)),p.speed(i));
 else     points.add(k,new Rr2Point(p.point(i)));
    k++;
  }
  drawEnd=Math.max(drawEnd,de);
  box.expand(p.box);
}",0.8520900321543409
178255,"/** 
 * @return same polygon starting at point incremented from last polygon
 */
public RrPolygon incrementedStart(LayerRules lc){
  if (size() == 0 || lc.getModelLayer() < 0)   return this;
  int i=lc.getModelLayer() % size();
  return newStart(i);
}","/** 
 * @return same polygon starting at point incremented from last polygon
 */
public RrPolygon incrementedStart(LayerRules lc){
  if (size() == 0 || lc.getModelLayer() < 0)   return this;
  if (drawEnd >= 0)   Debug.e(""String_Node_Str"");
  int i=lc.getModelLayer() % size();
  return newStart(i);
}",0.9094202898550724
178256,"/** 
 * Negate (i.e. reverse cyclic order)
 * @return reversed polygon object
 */
public RrPolygon negate(){
  RrPolygon result=new RrPolygon(att,closed);
  for (int i=size() - 1; i >= 0; i--) {
    result.add(point(i));
  }
  if (speeds == null)   return result;
  for (int i=size() - 1; i >= 0; i--) {
    result.setSpeed(i,speed(i));
  }
  return result;
}","/** 
 * Negate (i.e. reverse cyclic order)
 * @return reversed polygon object
 */
public RrPolygon negate(){
  if (drawEnd >= 0)   Debug.e(""String_Node_Str"");
  RrPolygon result=new RrPolygon(att,closed);
  for (int i=size() - 1; i >= 0; i--) {
    result.add(point(i));
  }
  if (speeds == null)   return result;
  for (int i=size() - 1; i >= 0; i--) {
    result.setSpeed(i,speed(i));
  }
  return result;
}",0.9348958333333334
178257,"/** 
 * Backtrack a given distance, inserting a new point there and returning its index
 * @param distance to backtrack
 * @return index of the inserted point
 */
public int backStep(double d){
  Rr2Point last, p;
  int start=size() - 1;
  if (isClosed())   last=point(0);
 else {
    last=point(start);
    start--;
  }
  double sum=0;
  for (int i=start; i >= 0; i--) {
    p=point(i);
    sum+=Rr2Point.d(p,last);
    if (sum > d) {
      sum=sum - d;
      p=Rr2Point.sub(last,p);
      sum=sum / p.mod();
      p=Rr2Point.add(point(i),Rr2Point.mul(sum,p));
      int j=i + 1;
      if (j < size()) {
        points.add(j,p);
        if (speeds != null)         speeds.add(j,new Double(0));
      }
 else {
        points.add(p);
        if (speeds != null)         speeds.add(new Double(0));
      }
      return (j);
    }
    last=p;
  }
  return 0;
}","/** 
 * Backtrack a given distance, inserting a new point there and set drawEnd to it. If drawEnd is already set, backtrack from that.
 * @param distance to backtrack
 * @return index of the inserted point
 */
public void backStep(double d){
  if (d <= 0)   return;
  Rr2Point p, q;
  int start, last;
  if (drawEnd >= 0)   start=drawEnd;
 else   start=size() - 1;
  if (!isClosed() && drawEnd < 0)   start--;
  if (start >= size() - 1)   last=0;
 else   last=start + 1;
  double sum=0;
  for (int i=start; i >= 0; i--) {
    sum+=Rr2Point.d(point(i),point(last));
    if (sum > d) {
      sum=sum - d;
      q=Rr2Point.sub(point(last),point(i));
      p=Rr2Point.add(point(i),Rr2Point.mul(sum / q.mod(),q));
      double s=0;
      if (speeds != null) {
        s=speeds.get(last) - speeds.get(i);
        s=speeds.get(i) + s * sum / q.mod();
      }
      int j=i + 1;
      if (j < size()) {
        points.add(j,p);
        if (speeds != null)         speeds.add(j,new Double(s));
      }
 else {
        points.add(p);
        if (speeds != null)         speeds.add(new Double(s));
      }
      drawEnd=j;
      return;
    }
    last=i;
  }
  drawEnd=0;
}",0.5267326732673268
178258,"/** 
 * @return same polygon starting at a random vertex
 */
public RrPolygon randomStart(){
  return newStart(rangen.nextInt(size()));
}","/** 
 * @return same polygon starting at a random vertex
 */
public RrPolygon randomStart(){
  if (drawEnd >= 0)   Debug.e(""String_Node_Str"");
  return newStart(rangen.nextInt(size()));
}",0.845679012345679
178259,"public void actionPerformed(ActionEvent arg0){
  if (producer != null)   producer.setCancelled(true);
}","public void actionPerformed(ActionEvent arg0){
  onDelete();
}",0.7272727272727273
178260,"private void createAndShowGUI() throws Exception {
  JFrame.setDefaultLookAndFeelDecorated(false);
  mainFrame=new JFrame(""String_Node_Str"");
  mainFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  JMenuBar menubar=new JMenuBar();
  JMenu viewMenu=new JMenu(""String_Node_Str"");
  viewMenu.setMnemonic(KeyEvent.VK_V);
  menubar.add(viewMenu);
  JMenu manipMenu=new JMenu(""String_Node_Str"");
  manipMenu.setMnemonic(KeyEvent.VK_M);
  menubar.add(manipMenu);
  JMenuItem manipX=new JMenuItem(""String_Node_Str"",KeyEvent.VK_X);
  manipX.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK));
  manipX.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onRotateX();
    }
  }
);
  manipMenu.add(manipX);
  JMenuItem manipY=new JMenuItem(""String_Node_Str"",KeyEvent.VK_Y);
  manipY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y,ActionEvent.CTRL_MASK));
  manipY.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onRotateY();
    }
  }
);
  manipMenu.add(manipY);
  JMenuItem manipZ=new JMenuItem(""String_Node_Str"",KeyEvent.VK_Z);
  manipZ.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,ActionEvent.CTRL_MASK));
  manipZ.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onRotateZ();
    }
  }
);
  manipMenu.add(manipZ);
  JMenuItem inToMM=new JMenuItem(""String_Node_Str"",KeyEvent.VK_I);
  inToMM.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I,ActionEvent.CTRL_MASK));
  inToMM.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      oninToMM();
    }
  }
);
  manipMenu.add(inToMM);
  JMenuItem nextP=new JMenuItem(""String_Node_Str"",KeyEvent.VK_N);
  nextP.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK));
  nextP.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onNextPicked();
    }
  }
);
  manipMenu.add(nextP);
  JMenuItem reorder=new JMenuItem(""String_Node_Str"",KeyEvent.VK_R);
  reorder.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,ActionEvent.CTRL_MASK));
  reorder.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onReorder();
    }
  }
);
  manipMenu.add(reorder);
  JMenuItem deleteSTLW=new JMenuItem(""String_Node_Str"",KeyEvent.VK_W);
  deleteSTLW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,ActionEvent.CTRL_MASK));
  deleteSTLW.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onDelete();
    }
  }
);
  manipMenu.add(deleteSTLW);
  JMenuItem deleteSTL=new JMenuItem(""String_Node_Str"",KeyEvent.VK_DELETE);
  deleteSTL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0));
  deleteSTL.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onDelete();
    }
  }
);
  manipMenu.add(deleteSTL);
  produceProduceB=new JMenuItem(""String_Node_Str"",KeyEvent.VK_B);
  produceProduceB.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B,ActionEvent.CTRL_MASK));
  produceProduceB.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onProduceB();
    }
  }
);
  cancelMenuItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_P);
  cancelMenuItem.setEnabled(false);
  cancelMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (producer != null)       producer.setCancelled(true);
    }
  }
);
  segmentPause=new JCheckBoxMenuItem(""String_Node_Str"");
  layerPause=new JCheckBoxMenuItem(""String_Node_Str"");
  Box builderFrame=new Box(BoxLayout.Y_AXIS);
  builderFrame.add(new JLabel(""String_Node_Str""));
  builder=new RepRapBuild();
  builderFrame.setMinimumSize(new Dimension(0,0));
  builderFrame.add(builder);
  panel=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  panel.setPreferredSize(Utility.getDefaultAppSize());
  panel.setMinimumSize(new Dimension(0,0));
  panel.setResizeWeight(0.5);
  panel.setOneTouchExpandable(true);
  panel.setContinuousLayout(true);
  panel.setLeftComponent(builderFrame);
  panel.setDividerLocation(panel.getPreferredSize().width);
  mainFrame.getContentPane().add(panel);
  mainFrame.setJMenuBar(menubar);
  mainFrame.pack();
  Utility.positionWindowOnScreen(mainFrame);
  mainFrame.setVisible(true);
}","private void createAndShowGUI() throws Exception {
  JFrame.setDefaultLookAndFeelDecorated(false);
  mainFrame=new JFrame(""String_Node_Str"");
  mainFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  JMenuBar menubar=new JMenuBar();
  JMenu manipMenu=new JMenu(""String_Node_Str"");
  manipMenu.setMnemonic(KeyEvent.VK_M);
  menubar.add(manipMenu);
  JMenuItem manipX=new JMenuItem(""String_Node_Str"",KeyEvent.VK_X);
  manipX.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK));
  manipX.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onRotateX();
    }
  }
);
  manipMenu.add(manipX);
  JMenuItem manipY=new JMenuItem(""String_Node_Str"",KeyEvent.VK_Y);
  manipY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y,ActionEvent.CTRL_MASK));
  manipY.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onRotateY();
    }
  }
);
  manipMenu.add(manipY);
  JMenuItem manipZ=new JMenuItem(""String_Node_Str"",KeyEvent.VK_Z);
  manipZ.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,ActionEvent.CTRL_MASK));
  manipZ.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onRotateZ();
    }
  }
);
  manipMenu.add(manipZ);
  JMenuItem inToMM=new JMenuItem(""String_Node_Str"",KeyEvent.VK_I);
  inToMM.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I,ActionEvent.CTRL_MASK));
  inToMM.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      oninToMM();
    }
  }
);
  manipMenu.add(inToMM);
  JMenuItem nextP=new JMenuItem(""String_Node_Str"",KeyEvent.VK_N);
  nextP.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK));
  nextP.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onNextPicked();
    }
  }
);
  manipMenu.add(nextP);
  JMenuItem reorder=new JMenuItem(""String_Node_Str"",KeyEvent.VK_R);
  reorder.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,ActionEvent.CTRL_MASK));
  reorder.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onReorder();
    }
  }
);
  manipMenu.add(reorder);
  JMenuItem deleteSTL=new JMenuItem(""String_Node_Str"",KeyEvent.VK_DELETE);
  deleteSTL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0));
  deleteSTL.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      onDelete();
    }
  }
);
  manipMenu.add(deleteSTL);
  produceProduceB=new JMenuItem(""String_Node_Str"",KeyEvent.VK_B);
  cancelMenuItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_P);
  cancelMenuItem.setEnabled(false);
  segmentPause=new JCheckBoxMenuItem(""String_Node_Str"");
  layerPause=new JCheckBoxMenuItem(""String_Node_Str"");
  Box builderFrame=new Box(BoxLayout.Y_AXIS);
  builderFrame.add(new JLabel(""String_Node_Str""));
  builder=new RepRapBuild();
  builderFrame.setMinimumSize(new Dimension(0,0));
  builderFrame.add(builder);
  panel=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  panel.setPreferredSize(Utility.getDefaultAppSize());
  panel.setMinimumSize(new Dimension(0,0));
  panel.setResizeWeight(0.5);
  panel.setOneTouchExpandable(true);
  panel.setContinuousLayout(true);
  panel.setLeftComponent(builderFrame);
  panel.setDividerLocation(panel.getPreferredSize().width);
  mainFrame.getContentPane().add(panel);
  mainFrame.setJMenuBar(menubar);
  mainFrame.pack();
  Utility.positionWindowOnScreen(mainFrame);
  mainFrame.setVisible(true);
}",0.8720600911217831
178261,"/** 
 * Queue a command.  
 */
private void bufferQueue(String cmd,int retries) throws Exception {
  if (simulationPlot != null)   simulationPlot.add(cmd);
  if (serialOutStream == null) {
    Debug.d(""String_Node_Str"" + cmd + ""String_Node_Str"");
    return;
  }
  if (retries > 3) {
    Debug.e(""String_Node_Str"" + retries + ""String_Node_Str""+ cmd);
    return;
  }
  if (sendLine(cmd)) {
    long resp=waitForResponse();
    if (resp == shutDown) {
      throw new Exception(""String_Node_Str"");
    }
 else     if (resp == allSentOK) {
      lineNumber++;
    }
 else {
      long gotTo=lineNumber;
      lineNumber=resp;
      String rCmd=""String_Node_Str"";
      while (lineNumber <= gotTo && !rCmd.contentEquals(""String_Node_Str"")) {
        rCmd=ringGet(lineNumber);
        bufferQueue(rCmd,retries + 1);
      }
    }
  }
}","/** 
 * Queue a command.  
 */
private void bufferQueue(String cmd,int retries) throws Exception {
  if (simulationPlot != null)   simulationPlot.add(cmd);
  if (serialOutStream == null) {
    if (nonRunningWarn)     Debug.d(""String_Node_Str"" + cmd + ""String_Node_Str"");
    nonRunningWarn=false;
    return;
  }
  if (retries > 3) {
    Debug.e(""String_Node_Str"" + retries + ""String_Node_Str""+ cmd);
    return;
  }
  if (sendLine(cmd)) {
    long resp=waitForResponse();
    if (resp == shutDown) {
      throw new Exception(""String_Node_Str"");
    }
 else     if (resp == allSentOK) {
      lineNumber++;
    }
 else {
      long gotTo=lineNumber;
      lineNumber=resp;
      String rCmd=""String_Node_Str"";
      while (lineNumber <= gotTo && !rCmd.contentEquals(""String_Node_Str"")) {
        rCmd=ringGet(lineNumber);
        bufferQueue(rCmd,retries + 1);
      }
    }
  }
}",0.9707943925233644
178262,"private void openSerialConnection(String portName){
  int baudRate=19200;
  serialInStream=null;
  serialOutStream=null;
  Debug.d(""String_Node_Str"" + portName);
  Main.setRepRapPresent(false);
  try {
    CommPortIdentifier commId=CommPortIdentifier.getPortIdentifier(portName);
    port=(SerialPort)commId.open(portName,30000);
  }
 catch (  NoSuchPortException e) {
    Debug.e(""String_Node_Str"" + portName);
    return;
  }
catch (  PortInUseException e) {
    Debug.e(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
  Main.setRepRapPresent(true);
  try {
    baudRate=Preferences.loadGlobalInt(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
  try {
    port.setSerialPortParams(baudRate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"" + e.toString());
    return;
  }
  try {
    port.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);
  }
 catch (  Exception e) {
  }
  try {
    port.enableReceiveTimeout(1);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"");
  }
  try {
    OutputStream writeStream=port.getOutputStream();
    serialInStream=port.getInputStream();
    serialOutStream=new PrintStream(writeStream);
  }
 catch (  IOException e) {
    Debug.e(""String_Node_Str"");
    serialInStream=null;
    serialOutStream=null;
    return;
  }
  Debug.d(""String_Node_Str"");
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  for (int i=0; i < 10; i++)   serialOutStream.write('0');
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  return;
}","private void openSerialConnection(String portName){
  int baudRate=19200;
  serialInStream=null;
  serialOutStream=null;
  Debug.d(""String_Node_Str"" + portName);
  Main.setRepRapPresent(false);
  try {
    CommPortIdentifier commId=CommPortIdentifier.getPortIdentifier(portName);
    port=(SerialPort)commId.open(portName,30000);
  }
 catch (  NoSuchPortException e) {
    Debug.d(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
catch (  PortInUseException e) {
    Debug.e(""String_Node_Str"" + portName + ""String_Node_Str"");
    return;
  }
  Main.setRepRapPresent(true);
  try {
    baudRate=Preferences.loadGlobalInt(""String_Node_Str"");
  }
 catch (  IOException e) {
  }
  try {
    port.setSerialPortParams(baudRate,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"" + e.toString());
    return;
  }
  try {
    port.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);
  }
 catch (  Exception e) {
  }
  try {
    port.enableReceiveTimeout(1);
  }
 catch (  UnsupportedCommOperationException e) {
    Debug.d(""String_Node_Str"");
  }
  try {
    OutputStream writeStream=port.getOutputStream();
    serialInStream=port.getInputStream();
    serialOutStream=new PrintStream(writeStream);
  }
 catch (  IOException e) {
    Debug.e(""String_Node_Str"");
    serialInStream=null;
    serialOutStream=null;
    return;
  }
  Debug.d(""String_Node_Str"");
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  for (int i=0; i < 10; i++)   serialOutStream.write('0');
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
  }
  return;
}",0.9933614966807484
178263,"private void init(){
  resetReceived();
  paused=false;
  iAmPaused=false;
  alreadyReversed=false;
  ringBuffer=new String[buflen];
  ringLines=new long[buflen];
  head=0;
  tail=0;
  lineNumber=0;
  exhaustBuffer=false;
  responsesExpected=0;
  opFileIndex=-1;
  lastResp=""String_Node_Str"";
  try {
    portName=Preferences.loadGlobalString(""String_Node_Str"");
  }
 catch (  Exception ex) {
    Debug.e(""String_Node_Str"");
    portName=""String_Node_Str"";
  }
  openSerialConnection(portName);
  myPriority=Thread.currentThread().getPriority();
  bufferThread=null;
}","private void init(){
  resetReceived();
  paused=false;
  iAmPaused=false;
  alreadyReversed=false;
  ringBuffer=new String[buflen];
  ringLines=new long[buflen];
  head=0;
  tail=0;
  nonRunningWarn=true;
  lineNumber=0;
  exhaustBuffer=false;
  responsesExpected=0;
  opFileIndex=-1;
  lastResp=""String_Node_Str"";
  try {
    portName=Preferences.loadGlobalString(""String_Node_Str"");
  }
 catch (  Exception ex) {
    Debug.e(""String_Node_Str"");
    portName=""String_Node_Str"";
  }
  openSerialConnection(portName);
  myPriority=Thread.currentThread().getPriority();
  bufferThread=null;
}",0.9801553062985332
178264,"/** 
 * @param p
 * @param modZMax
 * @param macZMax
 * @param modLMax
 * @param macLMax
 * @param found
 */
public LayerRules(Printer p,double modZMax,double macZMax,int modLMax,int macLMax,boolean found,RrRectangle bb){
  printer=p;
  bBox=bb;
  notStartedYet=true;
  topDown=printer.getTopDown();
  modelZMax=modZMax;
  machineZMax=macZMax;
  modelLayerMax=modLMax;
  machineLayerMax=macLMax;
  if (topDown) {
    modelZ=modelZMax;
    machineZ=machineZMax;
    modelLayer=modelLayerMax;
    machineLayer=machineLayerMax;
  }
 else {
    modelZ=0;
    machineZ=0;
    modelLayer=-1;
    machineLayer=0;
  }
  addToStep=0;
  layingSupport=found;
  Extruder[] es=printer.getExtruders();
  zStep=es[0].getExtrusionHeight();
  int fineLayers=es[0].getLowerFineLayers();
  if (es.length > 1) {
    for (int i=1; i < es.length; i++) {
      if (es[i].getLowerFineLayers() > fineLayers)       fineLayers=es[i].getLowerFineLayers();
      if (Math.abs(es[i].getExtrusionHeight() - zStep) > Preferences.tiny())       Debug.e(""String_Node_Str"" + zStep + ""String_Node_Str""+ es[i].getExtrusionHeight());
    }
  }
  recordNumber=new int[fineLayers + 1];
  layerPointer=0;
}","/** 
 * @param p
 * @param modZMax
 * @param macZMax
 * @param modLMax
 * @param macLMax
 * @param found
 */
public LayerRules(Printer p,double modZMax,double macZMax,int modLMax,int macLMax,boolean found,RrRectangle bb){
  printer=p;
  bBox=new RrRectangle(bb);
  notStartedYet=true;
  topDown=printer.getTopDown();
  modelZMax=modZMax;
  machineZMax=macZMax;
  modelLayerMax=modLMax;
  machineLayerMax=macLMax;
  if (topDown) {
    modelZ=modelZMax;
    machineZ=machineZMax;
    modelLayer=modelLayerMax;
    machineLayer=machineLayerMax;
  }
 else {
    modelZ=0;
    machineZ=0;
    modelLayer=-1;
    machineLayer=0;
  }
  addToStep=0;
  layingSupport=found;
  Extruder[] es=printer.getExtruders();
  zStep=es[0].getExtrusionHeight();
  int fineLayers=es[0].getLowerFineLayers();
  if (es.length > 1) {
    for (int i=1; i < es.length; i++) {
      if (es[i].getLowerFineLayers() > fineLayers)       fineLayers=es[i].getLowerFineLayers();
      if (Math.abs(es[i].getExtrusionHeight() - zStep) > Preferences.tiny())       Debug.e(""String_Node_Str"" + zStep + ""String_Node_Str""+ es[i].getExtrusionHeight());
    }
  }
  recordNumber=new int[fineLayers + 1];
  layerPointer=0;
}",0.9927505330490404
178265,"public RrRectangle getBox(){
  return bBox;
}","public RrRectangle getBox(){
  return new RrRectangle(bBox);
}",0.8411214953271028
178266,"/** 
 * The hatch pattern is: Foundation: X and Y rectangle Model: Alternate even then odd (which can be set to the same angle if wanted).
 * @return
 */
public RrHalfPlane getHatchDirection(Extruder e){
  double angle;
  if (getMachineLayer() < getFoundationLayers()) {
    if (getMachineLayer() == getFoundationLayers() - 2)     angle=e.getEvenHatchDirection();
 else     angle=e.getOddHatchDirection();
  }
 else {
    if (getModelLayer() % 2 == 0)     angle=e.getEvenHatchDirection();
 else     angle=e.getOddHatchDirection();
  }
  angle=angle * Math.PI / 180;
  return new RrHalfPlane(new Rr2Point(0.0,0.0),new Rr2Point(Math.sin(angle),Math.cos(angle)));
}","/** 
 * The hatch pattern is: Foundation: X and Y rectangle Model: Alternate even then odd (which can be set to the same angle if wanted).
 * @return
 */
public RrHalfPlane getHatchDirection(Extruder e){
  double angle;
  if (getMachineLayer() < getFoundationLayers()) {
    angle=e.getOddHatchDirection();
  }
 else {
    if (getModelLayer() % 2 == 0)     angle=e.getEvenHatchDirection();
 else     angle=e.getOddHatchDirection();
  }
  angle=angle * Math.PI / 180;
  return new RrHalfPlane(new Rr2Point(0.0,0.0),new Rr2Point(Math.sin(angle),Math.cos(angle)));
}",0.9191836734693878
178267,"public AssignableNode(SourcePosition position,Node valueNode){
}","public AssignableNode(SourcePosition position,Node valueNode){
  super(position);
  this.valueNode=adopt(valueNode);
}",0.7032967032967034
178268,"public Node(SourcePosition position){
}","public Node(SourcePosition position){
  this.position=position;
}",0.75
178269,"private int identifier(int c,boolean commandState) throws IOException {
  if (!isIdentifierChar(c)) {
    String badChar=""String_Node_Str"" + Integer.toOctalString(c & 0xff);
    throw new SyntaxException(PID.CHARACTER_BAD,getPosition(),getCurrentLine(),""String_Node_Str"" + badChar + ""String_Node_Str""+ (char)c+ ""String_Node_Str"",badChar);
  }
  tokenBuffer.setLength(0);
  int first=c;
  boolean wasNewline=src.wasBeginOfLine();
  c=getIdentifier(c);
  boolean lastBangOrPredicate=false;
  if (c == '!' || c == '?') {
    if (!src.peek('=')) {
      lastBangOrPredicate=true;
      tokenBuffer.append(c);
    }
 else {
      src.unread(c);
    }
  }
 else {
    src.unread(c);
  }
  src.setIsANewLine(wasNewline);
  int result=0;
  LexState last_state=lex_state;
  if (lastBangOrPredicate) {
    result=Tokens.tFID;
  }
 else {
    if (lex_state == LexState.EXPR_FNAME) {
      if ((c=src.read()) == '=') {
        int c2=src.read();
        if (c2 != '~' && c2 != '>' && (c2 != '=' || (c2 == '\n' && src.peek('>')))) {
          result=Tokens.tIDENTIFIER;
          tokenBuffer.append(c);
          src.unread(c2);
        }
 else {
          src.unread(c2);
          src.unread(c);
        }
      }
 else {
        src.unread(c);
      }
    }
    if (result == 0 && Character.isUpperCase(first)) {
      result=Tokens.tCONSTANT;
    }
 else {
      result=Tokens.tIDENTIFIER;
    }
  }
  String tempVal=tokenBuffer.toString().intern();
  if (!isOneEight && ((lex_state == LexState.EXPR_BEG && !commandState) || lex_state == LexState.EXPR_ARG || lex_state == LexState.EXPR_CMDARG)) {
    int c2=src.read();
    if (c2 == ':' && !src.peek(':')) {
      src.unread(c2);
      setState(LexState.EXPR_BEG);
      src.read();
      yaccValue=new Token(tempVal,getPosition());
      return Tokens.tLABEL;
    }
    src.unread(c2);
  }
  if (lex_state != LexState.EXPR_DOT) {
    Keyword keyword=getKeyword(tempVal);
    if (keyword != null && (keyword != Keyword.__ENCODING__ || !isOneEight)) {
      LexState state=lex_state;
      if (!isOneEight && keyword == Keyword.NOT) {
        setState(LexState.EXPR_ARG);
      }
 else {
        setState(keyword.state);
      }
      if (state == LexState.EXPR_FNAME) {
        yaccValue=new Token(keyword.name,getPosition());
      }
 else {
        yaccValue=new Token(tempVal,getPosition());
        if (keyword.id0 == Tokens.kDO)         return doKeyword(state);
      }
      if (state == LexState.EXPR_BEG || (!isOneEight && state == LexState.EXPR_VALUE))       return keyword.id0;
      if (keyword.id0 != keyword.id1)       setState(LexState.EXPR_BEG);
      return keyword.id1;
    }
  }
  if (isBEG() || lex_state == LexState.EXPR_DOT || isARG()) {
    setState(commandState ? LexState.EXPR_CMDARG : LexState.EXPR_ARG);
  }
 else   if (!isOneEight && lex_state == LexState.EXPR_ENDFN) {
    setState(LexState.EXPR_ENDFN);
  }
 else {
    setState(LexState.EXPR_END);
  }
  return identifierToken(last_state,result,tempVal);
}","private int identifier(int c,boolean commandState) throws IOException {
  if (!isIdentifierChar(c)) {
    String badChar=""String_Node_Str"" + Integer.toOctalString(c & 0xff);
    throw new SyntaxException(PID.CHARACTER_BAD,getPosition(),getCurrentLine(),""String_Node_Str"" + badChar + ""String_Node_Str""+ (char)c+ ""String_Node_Str"",badChar);
  }
  tokenBuffer.setLength(0);
  int first=c;
  boolean wasNewline=src.wasBeginOfLine();
  c=getIdentifier(c);
  boolean lastBangOrPredicate=false;
  if (c == '!' || c == '?') {
    if (!src.peek('=')) {
      lastBangOrPredicate=true;
      tokenBuffer.append(c);
    }
 else {
      src.unread(c);
    }
  }
 else {
    src.unread(c);
  }
  src.setIsANewLine(wasNewline);
  int result=0;
  LexState last_state=lex_state;
  if (lastBangOrPredicate) {
    result=Tokens.tFID;
  }
 else {
    if (lex_state == LexState.EXPR_FNAME) {
      if ((c=src.read()) == '=') {
        int c2=src.read();
        if (c2 != '~' && c2 != '>' && (c2 != '=' || (c2 == '\n' && src.peek('>')))) {
          result=Tokens.tIDENTIFIER;
          tokenBuffer.append(c);
          src.unread(c2);
        }
 else {
          src.unread(c2);
          src.unread(c);
        }
      }
 else {
        src.unread(c);
      }
    }
    if (result == 0 && Character.isUpperCase(first)) {
      result=Tokens.tCONSTANT;
    }
 else {
      result=Tokens.tIDENTIFIER;
    }
  }
  String tempVal=tokenBuffer.toString().intern();
  if (!isOneEight && ((lex_state == LexState.EXPR_BEG && !commandState) || lex_state == LexState.EXPR_ARG || lex_state == LexState.EXPR_CMDARG)) {
    int c2=src.read();
    if (c2 == ':' && !src.peek(':')) {
      src.unread(c2);
      setState(LexState.EXPR_BEG);
      src.read();
      yaccValue=new Token(tempVal,Tokens.tLABEL,getPosition());
      return Tokens.tLABEL;
    }
    src.unread(c2);
  }
  if (lex_state != LexState.EXPR_DOT) {
    Keyword keyword=getKeyword(tempVal);
    if (keyword != null && (keyword != Keyword.__ENCODING__ || !isOneEight)) {
      LexState state=lex_state;
      if (!isOneEight && keyword == Keyword.NOT) {
        setState(LexState.EXPR_ARG);
      }
 else {
        setState(keyword.state);
      }
      if (state == LexState.EXPR_FNAME) {
        yaccValue=new Token(keyword.name,getPosition());
      }
 else {
        yaccValue=new Token(tempVal,getPosition());
        if (keyword.id0 == Tokens.kDO)         return doKeyword(state);
      }
      if (state == LexState.EXPR_BEG || (!isOneEight && state == LexState.EXPR_VALUE))       return keyword.id0;
      if (keyword.id0 != keyword.id1)       setState(LexState.EXPR_BEG);
      return keyword.id1;
    }
  }
  if (isBEG() || lex_state == LexState.EXPR_DOT || isARG()) {
    setState(commandState ? LexState.EXPR_CMDARG : LexState.EXPR_ARG);
  }
 else   if (!isOneEight && lex_state == LexState.EXPR_ENDFN) {
    setState(LexState.EXPR_ENDFN);
  }
 else {
    setState(LexState.EXPR_END);
  }
  return identifierToken(last_state,result,tempVal);
}",0.9976541554959786
178270,"public DecodedFieldOp(FieldOpcode fo,Context context,int index){
  super(fo,context,index);
  String descriptor=context.behavior.getMethodInfo().getConstPool().getFieldrefType(getMethodRefIndex());
  StackElementLength sel=ONE;
  if (Descriptor.dataSize(descriptor) == 2)   sel=DOUBLE;
  this.stackElementLength=sel;
  this.descriptor=descriptor;
  this.load=fo.getCode() == Opcode.GETFIELD || fo.getCode() == Opcode.GETSTATIC;
}","public DecodedFieldOp(FieldOpcode fo,Context context,int index){
  super(fo,context,index);
  String descriptor=context.behavior.getMethodInfo().getConstPool().getFieldrefType(getMethodRefIndex());
  StackElementLength sel=ONE;
  if (Descriptor.dataSize(descriptor) == 2)   sel=DOUBLE;
  this.stackElementLength=sel;
  this.descriptor=descriptor;
  this.load=fo.getCode() == Opcode.GETFIELD || fo.getCode() == Opcode.GETSTATIC;
  this.isStatic=fo.getCode() == Opcode.GETSTATIC || fo.getCode() == Opcode.PUTSTATIC;
}",0.9088983050847458
178271,"public StackElementLength[] getPops(){
  if (!load)   return new StackElementLength[]{stackElementLength};
  return new StackElementLength[0];
}","public StackElementLength[] getPops(){
  if (isStatic && !load)   return new StackElementLength[]{stackElementLength};
 else   if (isStatic && load)   return new StackElementLength[0];
 else   if (!isStatic && !load)   return new StackElementLength[]{stackElementLength,ONE};
 else   return new StackElementLength[]{ONE};
}",0.6167023554603854
178272,"public StackElementLength[] getPushes(){
  return pushes;
}","public StackElementLength[] getPushes(){
  return new StackElementLength[]{this.returnType};
}",0.7189542483660131
178273,"public DecodedMethodInvocationOp(MethodInvocationOpcode mop,Context context,int index) throws NotFoundException {
  super(mop,context,index);
  ConstPool constPool=Utils.getConstPool(context.behavior);
  boolean interfaceMethod=constPool.getTag(getMethodRefIndex()) == ConstPool.CONST_InterfaceMethodref;
  descriptor=interfaceMethod ? constPool.getInterfaceMethodrefType(getMethodRefIndex()) : constPool.getMethodrefType(getMethodRefIndex());
  name=interfaceMethod ? constPool.getInterfaceMethodrefName(getMethodRefIndex()) : constPool.getMethodrefName(getMethodRefIndex());
  declaringClassName=context.behavior.getDeclaringClass().getName();
  ClassPool cp=context.behavior.getDeclaringClass().getClassPool();
  parameterTypes=Descriptor.getParameterTypes(descriptor,cp);
  nbParameters=parameterTypes.length;
  StackElementLength[] pops=new StackElementLength[parameterTypes.length + (mop.isInstanceMethod() ? 1 : 0)];
  for (int i=parameterTypes.length - 1, j=0; i >= 0; i--, j++) {
    CtClass ctClass=parameterTypes[i];
    if (ctClass.isPrimitive()) {
      char d=((CtPrimitiveType)ctClass).getDescriptor();
      if (d == 'J' || d == 'D') {
        pops[j]=DOUBLE;
      }
 else {
        pops[j]=ONE;
      }
    }
  }
  if (mop.isInstanceMethod())   pops[pops.length - 1]=ONE;
  this.pops=pops;
  CtClass returnType=Descriptor.getReturnType(descriptor,cp);
  StackElementLength returnTypeLength=ONE;
  if (returnType.isPrimitive()) {
    char d=((CtPrimitiveType)returnType).getDescriptor();
    if (d == 'V') {
      returnTypeLength=null;
    }
    if (d == 'J' || d == 'D') {
      returnTypeLength=DOUBLE;
    }
  }
  pushes=returnTypeLength != null ? new StackElementLength[]{returnTypeLength} : new StackElementLength[0];
}","public DecodedMethodInvocationOp(MethodInvocationOpcode mop,Context context,int index) throws NotFoundException {
  super(mop,context,index);
  ConstPool constPool=Utils.getConstPool(context.behavior);
  boolean interfaceMethod=constPool.getTag(getMethodRefIndex()) == ConstPool.CONST_InterfaceMethodref;
  descriptor=interfaceMethod ? constPool.getInterfaceMethodrefType(getMethodRefIndex()) : constPool.getMethodrefType(getMethodRefIndex());
  name=interfaceMethod ? constPool.getInterfaceMethodrefName(getMethodRefIndex()) : constPool.getMethodrefName(getMethodRefIndex());
  declaringClassName=context.behavior.getDeclaringClass().getName();
  ClassPool cp=context.behavior.getDeclaringClass().getClassPool();
  parameterTypes=Descriptor.getParameterTypes(descriptor,cp);
  nbParameters=parameterTypes.length;
  StackElementLength[] pops=new StackElementLength[parameterTypes.length];
  for (int i=parameterTypes.length - 1, j=0; i >= 0; i--, j++) {
    CtClass ctClass=parameterTypes[i];
    if (ctClass.isPrimitive()) {
      char d=((CtPrimitiveType)ctClass).getDescriptor();
      if (d == 'J' || d == 'D') {
        pops[j]=DOUBLE;
      }
 else {
        pops[j]=ONE;
      }
    }
  }
  this.pops=pops;
  CtClass returnType=Descriptor.getReturnType(descriptor,cp);
  StackElementLength returnTypeLength=ONE;
  if (returnType.isPrimitive()) {
    char d=((CtPrimitiveType)returnType).getDescriptor();
    if (d == 'V') {
      returnTypeLength=null;
    }
    if (d == 'J' || d == 'D') {
      returnTypeLength=DOUBLE;
    }
  }
  this.returnType=returnTypeLength != null ? returnTypeLength : null;
}",0.941527446300716
178274,"private static MethodParam[] resolveParameters(final Iterable<StackElement> stack,final int elements){
  MethodParam[] result=new MethodParam[elements];
  Iterator<StackElement> it=stack.iterator();
  int i=0;
  while (it.hasNext() && i < elements) {
    StackElement se=it.next();
    if (se instanceof TOP)     se=it.next();
    LocalVariable lv=getLocalVariableIfAvailable(se);
    if (lv != null) {
      result[elements - i - 1]=new MethodParam(lv.name,lv.type);
    }
 else {
      result[elements - i - 1]=new MethodParam(null,null);
    }
    i++;
  }
  return result;
}","private static MethodParam[] resolveParameters(final Iterable<StackElement> stack,final int elements,boolean reverse){
  MethodParam[] result=new MethodParam[elements];
  Iterator<StackElement> it=stack.iterator();
  int i=0;
  while (it.hasNext() && i < elements) {
    StackElement se=it.next();
    if (se instanceof TOP)     se=it.next();
    LocalVariable lv=getLocalVariableIfAvailable(se);
    if (lv != null) {
      result[reverse ? i : elements - i - 1]=new MethodParam(lv.name,lv.type);
    }
 else {
      result[reverse ? i : elements - i - 1]=new MethodParam(null,null);
    }
    i++;
  }
  return result;
}",0.9633333333333334
178275,"@Override public void simulate(Stack stack){
  for (int i=0; i < getPops().length; i++) {
    if (getPops()[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  for (int i=0; i < getPushes().length; i++) {
    if (getPushes()[i] == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}","@Override public void simulate(Stack stack){
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  if (op.as(MethodInvocationOpcode.class).isInstanceMethod())   stack.pop();
  if (returnType != null) {
    if (returnType == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}",0.7254335260115607
178276,"public static void processBasicAlteration(Stack stack,StackElementLength[] pops,StackElementLength[] pushes){
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  for (int i=0; i < pushes.length; i++) {
    if (pushes[i] == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}","public static void processBasicAlteration(Stack stack,StackElementLength[] pops,StackElementLength[] pushes){
  System.out.println(""String_Node_Str"" + Arrays.toString(pops) + ""String_Node_Str""+ Arrays.toString(pushes)+ ""String_Node_Str""+ stack);
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  for (int i=0; i < pushes.length; i++) {
    if (pushes[i] == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}",0.8443935926773455
178277,"public StackElement pop2(){
  StackElement se=stack.pop();
  if (!(se instanceof TOP))   System.out.println(""String_Node_Str"");
  se=stack.pop();
  if (se instanceof TOP)   System.out.println(""String_Node_Str"");
  return se;
}","public StackElement pop2(){
  StackElement se=stack.pop();
  if (!(se instanceof TOP))   throw new RuntimeException(""String_Node_Str"" + se.getClass() + ""String_Node_Str"");
  se=stack.pop();
  if (se instanceof TOP)   throw new RuntimeException(""String_Node_Str"");
  return se;
}",0.7579365079365079
178278,"@Override public void simulate(Stack stack){
  ConstantPushOpcode cpop=this.op.as(ConstantPushOpcode.class);
  if (cpop.getParameterTypes().length == 0) {
switch (cpop.baseCode) {
case Opcode.ICONST_0:
      stack.push(new IntegerConstant(cpop.getCode() - cpop.baseCode));
    break;
case Opcode.LCONST_0:
  stack.push2(new LongConstant(new Long(new Integer(cpop.getCode() - cpop.baseCode))));
break;
case Opcode.FCONST_0:
stack.push(new FloatConstant(new Float(cpop.getCode() - cpop.baseCode)));
break;
case Opcode.DCONST_0:
stack.push2(new DoubleConstant(new Double(cpop.getCode() - cpop.baseCode)));
break;
default :
throw new RuntimeException(""String_Node_Str"" + cpop.baseCode + ""String_Node_Str""+ cpop.getName()+ ""String_Node_Str"");
}
}
 else {
OpParameterType type=cpop.getParameterTypes()[0];
int value=cpop.decode(context,index).parameterValues[0];
if (type == OpParameterType.S1 || type == OpParameterType.S2) {
for (int i=0; i < getPops().length; i++) {
stack.pop(getPops()[i]);
}
stack.push(new IntegerConstant(cpop.decode(context,index).parameterValues[0]));
}
 else if (type == OpParameterType.U1 || type == OpParameterType.U2) {
Object o=context.behavior.getMethodInfo().getConstPool().getLdcValue(value);
if (o == null) {
ConstPool cp=context.behavior.getMethodInfo().getConstPool();
for (Method m : ConstPool.class.getDeclaredMethods()) {
if (m.getName().equals(""String_Node_Str"")) {
m.setAccessible(true);
try {
Object _o=m.invoke(cp,new Integer(value));
stack.push(new WhateverConstant(_o));
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
return;
}
if (o instanceof Integer) stack.push(new IntegerConstant((Integer)o));
 else if (o instanceof Long) stack.push2(new LongConstant((Long)o));
 else if (o instanceof Float) stack.push(new FloatConstant((Float)o));
 else if (o instanceof Double) stack.push2(new DoubleConstant((Double)o));
 else if (o instanceof String) stack.push(new StringConstant((String)o));
 else throw new RuntimeException(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ cpop.code+ ""String_Node_Str""+ cpop.getName()+ ""String_Node_Str"");
}
 else {
throw new RuntimeException(""String_Node_Str"" + cpop.code + ""String_Node_Str""+ cpop.getName()+ ""String_Node_Str"");
}
}
}","@Override public void simulate(Stack stack){
  ConstantPushOpcode cpop=this.op.as(ConstantPushOpcode.class);
  if (cpop.getParameterTypes().length == 0) {
switch (cpop.baseCode) {
case Opcode.ICONST_0:
      stack.push(new IntegerConstant(cpop.getCode() - cpop.baseCode));
    break;
case Opcode.LCONST_0:
  stack.push2(new LongConstant(new Long(new Integer(cpop.getCode() - cpop.baseCode))));
break;
case Opcode.FCONST_0:
stack.push(new FloatConstant(new Float(cpop.getCode() - cpop.baseCode)));
break;
case Opcode.DCONST_0:
stack.push2(new DoubleConstant(new Double(cpop.getCode() - cpop.baseCode)));
break;
default :
throw new RuntimeException(""String_Node_Str"" + cpop.baseCode + ""String_Node_Str""+ cpop.getName()+ ""String_Node_Str"");
}
}
 else {
OpParameterType type=cpop.getParameterTypes()[0];
int value=cpop.decode(context,index).parameterValues[0];
if (type == OpParameterType.S1 || type == OpParameterType.S2) {
for (int i=0; i < getPops().length; i++) {
stack.pop(getPops()[i]);
}
stack.push(new IntegerConstant(cpop.decode(context,index).parameterValues[0]));
}
 else if (type == OpParameterType.U1 || type == OpParameterType.U2) {
Object o=context.behavior.getMethodInfo().getConstPool().getLdcValue(value);
if (o == null) {
ConstPool cp=context.behavior.getMethodInfo().getConstPool();
for (Method m : ConstPool.class.getDeclaredMethods()) {
if (m.getName().equals(""String_Node_Str"")) {
m.setAccessible(true);
try {
Object _o=m.invoke(cp,new Integer(value));
stack.push(new WhateverConstant(_o));
}
 catch (Exception e) {
throw new RuntimeException(e);
}
}
}
return;
}
if (pushes[0].equals(StackElementLength.DOUBLE) && !(o instanceof Long) && !(o instanceof Double)) throw new RuntimeException(""String_Node_Str"" + op.getName() + ""String_Node_Str""+ o+ ""String_Node_Str"");
if (o instanceof Integer) stack.push(new IntegerConstant((Integer)o));
 else if (o instanceof Long) stack.push2(new LongConstant((Long)o));
 else if (o instanceof Float) stack.push(new FloatConstant((Float)o));
 else if (o instanceof Double) stack.push2(new DoubleConstant((Double)o));
 else if (o instanceof String) stack.push(new StringConstant((String)o));
 else throw new RuntimeException(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ cpop.code+ ""String_Node_Str""+ cpop.getName()+ ""String_Node_Str"");
}
 else {
throw new RuntimeException(""String_Node_Str"" + cpop.code + ""String_Node_Str""+ cpop.getName()+ ""String_Node_Str"");
}
}
}",0.7166558931264814
178279,"@Override public void simulate(Stack stack){
  ValueFromLocalVariable toPush=new ValueFromLocalVariable(localVariable);
  for (int i=0; i < getPops().length; i++) {
    if (getPops()[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  for (int i=0; i < getPushes().length; i++) {
    if (getPushes()[i] == DOUBLE)     stack.push2(toPush);
 else     stack.push(toPush);
  }
}","@Override public void simulate(Stack stack){
  ValueFromLocalVariable toPush=new ValueFromLocalVariable(localVariable);
  for (int i=0; i < getPops().length; i++) {
    StackElement poppedSe;
    if (getPops()[i] == DOUBLE)     poppedSe=stack.pop2();
 else     poppedSe=stack.pop();
    if (poppedSe instanceof ValueFromLocalVariable && (localVariable == null || localVariable.name == null)) {
      System.out.println(""String_Node_Str"" + ((ValueFromLocalVariable)poppedSe).localVariable + ""String_Node_Str"");
      toPush=new ValueFromLocalVariable(((ValueFromLocalVariable)poppedSe).localVariable);
    }
  }
  for (int i=0; i < getPushes().length; i++) {
    if (getPushes()[i] == DOUBLE)     stack.push2(toPush);
 else     stack.push(toPush);
  }
  System.out.println(""String_Node_Str"" + stack);
}",0.6469594594594594
178280,"public StackElementLength[] getPushes(){
  return new StackElementLength[]{this.returnType};
}","public StackElementLength[] getPushes(){
  return new StackElementLength[]{this.returnTypeLength};
}",0.9690721649484536
178281,"public DecodedMethodInvocationOp(MethodInvocationOpcode mop,Context context,int index) throws NotFoundException {
  super(mop,context,index);
  ConstPool constPool=Utils.getConstPool(context.behavior);
  boolean interfaceMethod=constPool.getTag(getMethodRefIndex()) == ConstPool.CONST_InterfaceMethodref;
  descriptor=interfaceMethod ? constPool.getInterfaceMethodrefType(getMethodRefIndex()) : constPool.getMethodrefType(getMethodRefIndex());
  name=interfaceMethod ? constPool.getInterfaceMethodrefName(getMethodRefIndex()) : constPool.getMethodrefName(getMethodRefIndex());
  declaringClassName=context.behavior.getDeclaringClass().getName();
  ClassPool cp=context.behavior.getDeclaringClass().getClassPool();
  parameterTypes=Descriptor.getParameterTypes(descriptor,cp);
  nbParameters=parameterTypes.length;
  StackElementLength[] pops=new StackElementLength[parameterTypes.length];
  for (int i=parameterTypes.length - 1, j=0; i >= 0; i--, j++) {
    CtClass ctClass=parameterTypes[i];
    if (ctClass.isPrimitive()) {
      char d=((CtPrimitiveType)ctClass).getDescriptor();
      if (d == 'J' || d == 'D') {
        pops[j]=DOUBLE;
      }
 else {
        pops[j]=ONE;
      }
    }
  }
  this.pops=pops;
  CtClass returnType=Descriptor.getReturnType(descriptor,cp);
  StackElementLength returnTypeLength=ONE;
  if (returnType.isPrimitive()) {
    char d=((CtPrimitiveType)returnType).getDescriptor();
    if (d == 'V') {
      returnTypeLength=null;
    }
    if (d == 'J' || d == 'D') {
      returnTypeLength=DOUBLE;
    }
  }
  this.returnType=returnTypeLength != null ? returnTypeLength : null;
}","public DecodedMethodInvocationOp(MethodInvocationOpcode mop,Context context,int index) throws NotFoundException {
  super(mop,context,index);
  ConstPool constPool=Utils.getConstPool(context.behavior);
  boolean interfaceMethod=constPool.getTag(getMethodRefIndex()) == ConstPool.CONST_InterfaceMethodref;
  descriptor=interfaceMethod ? constPool.getInterfaceMethodrefType(getMethodRefIndex()) : constPool.getMethodrefType(getMethodRefIndex());
  name=interfaceMethod ? constPool.getInterfaceMethodrefName(getMethodRefIndex()) : constPool.getMethodrefName(getMethodRefIndex());
  declaringClassName=interfaceMethod ? constPool.getInterfaceMethodrefClassName(getMethodRefIndex()) : constPool.getMethodrefClassName(getMethodRefIndex());
  ClassPool cp=context.behavior.getDeclaringClass().getClassPool();
  parameterTypes=Descriptor.getParameterTypes(descriptor,cp);
  nbParameters=parameterTypes.length;
  StackElementLength[] pops=new StackElementLength[parameterTypes.length];
  for (int i=parameterTypes.length - 1, j=0; i >= 0; i--, j++) {
    pops[j]=ONE;
    CtClass ctClass=parameterTypes[i];
    if (ctClass.isPrimitive()) {
      char d=((CtPrimitiveType)ctClass).getDescriptor();
      if (d == 'J' || d == 'D') {
        pops[j]=DOUBLE;
      }
    }
  }
  this.pops=pops;
  returnType=Descriptor.getReturnType(descriptor,cp);
  StackElementLength returnTypeLength=ONE;
  if (returnType.isPrimitive()) {
    char d=((CtPrimitiveType)returnType).getDescriptor();
    if (d == 'V') {
      returnTypeLength=null;
    }
    if (d == 'J' || d == 'D') {
      returnTypeLength=DOUBLE;
    }
  }
  this.returnTypeLength=returnTypeLength != null ? returnTypeLength : null;
}",0.9190505173463176
178282,"public MethodParams(MethodParam[] params,MethodParam[] varargs){
  this.params=params;
  this.varargs=varargs;
}","public MethodParams(MethodParam subject,MethodParam[] params,MethodParam[] varargs){
  this.subject=subject;
  this.params=params;
  this.varargs=varargs;
}",0.835820895522388
178283,"@Override public void simulate(Stack stack){
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  if (op.as(MethodInvocationOpcode.class).isInstanceMethod())   stack.pop();
  if (returnType != null) {
    if (returnType == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}","@Override public void simulate(Stack stack){
  boolean isAutoboxing=isAutoboxing();
  StackElement se=null;
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     se=stack.pop2();
 else     se=stack.pop();
  }
  if (op.as(MethodInvocationOpcode.class).isInstanceMethod())   stack.pop();
  if (returnTypeLength != null) {
    if (returnTypeLength == DOUBLE)     stack.push2(isAutoboxing ? se.copy() : new Whatever());
 else     stack.push(isAutoboxing ? se.copy() : new Whatever());
  }
}",0.8450057405281286
178284,"public static void processBasicAlteration(Stack stack,StackElementLength[] pops,StackElementLength[] pushes){
  System.out.println(""String_Node_Str"" + Arrays.toString(pops) + ""String_Node_Str""+ Arrays.toString(pushes)+ ""String_Node_Str""+ stack);
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  for (int i=0; i < pushes.length; i++) {
    if (pushes[i] == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}","public static void processBasicAlteration(Stack stack,StackElementLength[] pops,StackElementLength[] pushes){
  for (int i=0; i < pops.length; i++) {
    if (pops[i] == DOUBLE)     stack.pop2();
 else     stack.pop();
  }
  for (int i=0; i < pushes.length; i++) {
    if (pushes[i] == DOUBLE)     stack.push2(new Whatever());
 else     stack.push(new Whatever());
  }
}",0.8443935926773455
178285,"private boolean ableToCreatePlayers(){
  StartDialog dialog=new StartDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  dialog.open();
  if (dialog.getReturnCode() == Dialog.OK) {
    leftProgrammer.resetStats();
    rightProgrammer.resetStats();
    leftProgrammer.setName(dialog.getPlayerOneName());
    rightProgrammer.setName(dialog.getPlayerTwoName());
    leftProgrammer.setAvatar(dialog.getPlayerOneAvatar());
    rightProgrammer.setAvatar(dialog.getPlayerTwoAvatar());
    return true;
  }
  return false;
}","private boolean ableToCreatePlayers(){
  StartDialog dialog=new StartDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  dialog.open();
  if (dialog.getReturnCode() == Dialog.OK) {
    leftProgrammer.resetStats();
    rightProgrammer.resetStats();
    leftProgrammer.setName(dialog.getPlayerOneName());
    rightProgrammer.setName(dialog.getPlayerTwoName());
    leftProgrammer.setAvatar(dialog.getPlayerOneAvatar());
    rightProgrammer.setAvatar(dialog.getPlayerTwoAvatar());
    scoreboard.resetStats();
    updateScore(scoreboard.getScore());
    return true;
  }
  return false;
}",0.925893635571055
178286,"public FractalModel compress(BufferedImage image){
  Compressor compressor=new Compressor(configuration.domainScale(),configuration.tiler(),new ImageComparator(configuration.metric(),configuration.fuzz()),new HashSet<ImageTransform>(5){
{
      add(new FlipTransform());
      add(new FlopTransform());
      add(new AffineRotateQuadrantsTransform(1));
      add(new AffineRotateQuadrantsTransform(2));
      add(new AffineRotateQuadrantsTransform(3));
    }
  }
,new HashSet<BufferedImageOp>(1){
{
      add(new GrayscaleFilter());
    }
  }
,this);
  return compressor.compress(image);
}","public FractalModel compress(BufferedImage image){
  Compressor compressor=new Compressor(configuration.domainScale(),configuration.tiler(),new ImageComparator(configuration.metric(),configuration.fuzz()),new HashSet<ImageTransform>(5){
{
      add(new NoneTransform());
      add(new FlipTransform());
      add(new FlopTransform());
      add(new AffineRotateQuadrantsTransform(1));
      add(new AffineRotateQuadrantsTransform(2));
      add(new AffineRotateQuadrantsTransform(3));
    }
  }
,new HashSet<BufferedImageOp>(1){
{
      add(new GrayscaleFilter());
    }
  }
,this);
  return compressor.compress(image);
}",0.9735537190082644
178287,"/** 
 * NOTE: the current compressor cannot handle scale transforms
 * @param scaleTransform the scale difference between the ranges and the domains
 * @param tiler the tiler used to tile the image
 * @param comparator the comparator used to compare the tiles of the image
 * @param transforms a set of transform to apply to the tiles of the image
 * @param filters a set of filters to apply to the image for normalization
 * @throws NullPointerException if any field is null
 */
public Compressor(final ScaleTransform scaleTransform,final Tiler<BufferedImage> tiler,final Distanceator<BufferedImage> comparator,final Set<ImageTransform> transforms,final Set<BufferedImageOp> filters) throws NullPointerException {
}","/** 
 * NOTE: the current compressor cannot handle scale transforms
 * @param scaleTransform the scale difference between the ranges and the domains
 * @param tiler the tiler used to tile the image
 * @param comparator the comparator used to compare the tiles of the image
 * @param transforms a set of transform to apply to the tiles of the image
 * @param filters a set of filters to apply to the image for normalization
 * @param observer an observer receiving progress results from {@code compress} - allowed to be null
 * @throws NullPointerException if any field is null
 * @see #compress(java.awt.image.BufferedImage)
 * @see Observable
 * @see Observer#update(java.util.Observable,java.lang.Object)
 */
public Compressor(final ScaleTransform scaleTransform,final Tiler<BufferedImage> tiler,final Distanceator<BufferedImage> comparator,final Set<ImageTransform> transforms,final Set<BufferedImageOp> filters,Observer observer) throws NullPointerException {
}",0.8518738845925045
178288,"/** 
 * Get an open socket. This method could potentially block for a long time (for example if DNS sucks).
 * @return - returns true if the socket ends up open and useable.
 */
private boolean getOpenSocket(){
  if (socket == null) {
    if (DEBUG)     msg(""String_Node_Str"");
    openSocket();
    if (DEBUG)     msg(""String_Node_Str"");
  }
  if (socket.isConnected() != true) {
    openSocket();
  }
  if (socket.isConnected() != true) {
    if (DEBUG)     msg(""String_Node_Str"");
    return false;
  }
  if (DEBUG)   msg(""String_Node_Str"");
  return true;
}","/** 
 * Get an open socket. This method could potentially block for a long time (for example if DNS sucks).
 * @return - returns true if the socket ends up open and useable.
 */
private boolean getOpenSocket(){
  if (socket == null) {
    if (DEBUG)     msg(""String_Node_Str"");
    openSocket();
    if (DEBUG)     msg(""String_Node_Str"");
  }
  if (socket == null) {
    msg(""String_Node_Str"");
    return false;
  }
  if (socket.isConnected() != true) {
    openSocket();
  }
  if (socket.isConnected() != true) {
    if (DEBUG)     msg(""String_Node_Str"");
    return false;
  }
  if (DEBUG)   msg(""String_Node_Str"");
  return true;
}",0.9381270903010034
178289,"public void run(){
  switchTo11BitTransmitMode();
  sendWakeupAllNodes();
  switchTo29BitTransmitMode();
  send29BitWakeup();
}","public void run(){
  sendCommand_SYNC(_cmdname);
}",0.3954802259887006
178290,"/** 
 * Starts the worked thread.  The worker thread is here for us to send work to which we don't want to block the UI thread.  Stuff sent to the worker thrad is all performed one after another, sequentially, in the background.  
 * @return - returns true if the thread was created and started, false if it was alrady started previously or something else happened. 
 */
private boolean startWorkerThread(){
  if (mtWorkerThread != null) {
    if (DEBUG == true)     msg(""String_Node_Str"");
    return false;
  }
  mtWorkerThread=new Thread(){
    public void run(){
      Looper.prepare();
      mhWorkerHandler=new Handler();
      while (mThreadsOn == true) {
        Looper.loop();
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      if (DEBUG == true)       msg(""String_Node_Str"");
      mtWorkerThread=null;
    }
  }
;
  mtWorkerThread.start();
  return true;
}","/** 
 * Starts the worked thread.  The worker thread is here for us to send work to which we don't want to block the UI thread.  Stuff sent to the worker thrad is all performed one after another, sequentially, in the background.  
 * @return - returns true if the thread was created and started, false if it was alrady started previously or something else happened. 
 */
private boolean startWorkerThread(){
  if (mtWorkerThread != null) {
    if (DEBUG == true)     msg(""String_Node_Str"");
    return false;
  }
  mtWorkerThread=new Thread(){
    public void run(){
      Looper.prepare();
      mhWorkerHandler=new Handler();
      while (mThreadsOn == true) {
        Looper.loop();
        try {
          Thread.sleep(300);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
      if (DEBUG == true)       msg(""String_Node_Str"");
      mtWorkerThread=null;
      mhWorkerHandler=null;
    }
  }
;
  mtWorkerThread.start();
  return true;
}",0.9855072463768116
178291,"/** 
 * 1. Switch to 11-bit transmit mode 2. send ""100 00"" (header=100, data=00) 3. Switch back to 29-bit transmit mode. 
 */
public void wakeUpAllNetworks(){
  if (mhWorkerHandler != null) {
    mhWorkerHandler.post(new Runnable(){
      public void run(){
        switchTo11BitTransmitMode();
        sendWakeupAllNodes();
        switchTo29BitTransmitMode();
        send29BitWakeup();
      }
    }
);
  }
}","/** 
 * 1. Switch to 11-bit transmit mode 2. send ""100 00"" (header=100, data=00) 3. Switch back to 29-bit transmit mode. 
 */
public void wakeUpAllNetworks(){
  if (mhWorkerHandler == null) {
    msg(""String_Node_Str"");
    return;
  }
  if (DEBUG)   msg(""String_Node_Str"");
  switchTo11BitTransmitMode();
  sendWakeupAllNodes();
  switchTo29BitTransmitMode();
  send29BitWakeup();
  if (DEBUG)   msg(""String_Node_Str"");
}",0.737094837935174
178292,"/** 
 * synchronously (not in a separate thread thread) send the specified command.  - Added synchronized keyword because the new I/O logic is extremely fast and causing us to send new commands before the prior has been seen. 
 * @param commandName
 * @return
 */
public synchronized boolean sendCommand_SYNC(String commandName){
  String response=""String_Node_Str"";
  if (ebt.isConnected() != true) {
    msg(""String_Node_Str"");
  }
  String command=dashdb.getCommandByName(commandName);
  if (command == null || command.length() < 1) {
    msg(""String_Node_Str"" + commandName);
    return false;
  }
  String cmdParts[]=command.split(""String_Node_Str"");
  String thisCommand=""String_Node_Str"";
  for (int i=0; i < cmdParts.length; i++) {
    thisCommand=cmdParts[i].trim();
    final String _thisCommand=thisCommand;
    if (DEBUG)     msg(""String_Node_Str"" + thisCommand);
    if (thisCommand.startsWith(""String_Node_Str"")) {
      try {
        if (DEBUG)         msg(""String_Node_Str"");
        String sleepduration=thisCommand.substring(1);
        int isleepduration=Integer.valueOf(sleepduration);
        if (DEBUG)         msg(""String_Node_Str"" + isleepduration);
        Thread.sleep(isleepduration * 100);
      }
 catch (      Exception e) {
        msg(""String_Node_Str"" + thisCommand + ""String_Node_Str""+ e.getMessage());
      }
      continue;
    }
    if (thisCommand.contains(""String_Node_Str"")) {
      if (DEBUG)       msg(""String_Node_Str"");
      wakeUpAllNetworks();
      continue;
    }
    if (cmdParts[i].length() > 11) {
      setHeaders(cmdParts[i].substring(0,12));
      thisCommand=cmdParts[i].substring(12);
    }
    mhWorkerHandler.post(new Runnable(){
      public void run(){
        ebt.sendOBDCommand(_thisCommand);
      }
    }
);
  }
  return true;
}","/** 
 * synchronously (not in a separate thread thread) send the specified command.  - Added synchronized keyword because the new I/O logic is extremely fast and causing us to send new commands before the prior has been seen. 
 * @param commandName
 * @return
 */
public synchronized boolean sendCommand_SYNC(String commandName){
  String response=""String_Node_Str"";
  if (ebt.isConnected() != true) {
    msg(""String_Node_Str"");
  }
  String command=dashdb.getCommandByName(commandName);
  if (command == null || command.length() < 1) {
    msg(""String_Node_Str"" + commandName);
    return false;
  }
  String cmdParts[]=command.split(""String_Node_Str"");
  String thisCommand=""String_Node_Str"";
  for (int i=0; i < cmdParts.length; i++) {
    thisCommand=cmdParts[i].trim();
    if (DEBUG)     msg(""String_Node_Str"" + thisCommand);
    if (thisCommand.startsWith(""String_Node_Str"")) {
      try {
        if (DEBUG)         msg(""String_Node_Str"");
        String sleepduration=thisCommand.substring(1);
        int isleepduration=Integer.valueOf(sleepduration);
        if (DEBUG)         msg(""String_Node_Str"" + isleepduration);
        Thread.sleep(isleepduration * 100);
      }
 catch (      Exception e) {
        msg(""String_Node_Str"" + thisCommand + ""String_Node_Str""+ e.getMessage());
      }
      continue;
    }
    if (thisCommand.contains(""String_Node_Str"")) {
      if (DEBUG)       msg(""String_Node_Str"");
      wakeUpAllNetworks();
      continue;
    }
    if (cmdParts[i].length() > 11) {
      String headers=cmdParts[i].substring(0,12);
      thisCommand=cmdParts[i].substring(12);
      setHeaders(headers);
    }
    ebt.sendOBDCommand(thisCommand);
  }
  return true;
}",0.9394895325494694
178293,"private void threadsOff(){
  mThreadsOn=false;
  if (mtWorkerThread != null)   mtWorkerThread.interrupt();
  if (mStateManagementThread != null)   mStateManagementThread.interrupt();
}","private void threadsOff(){
  mThreadsOn=false;
  if (mtWorkerThread != null) {
    mtWorkerThread.interrupt();
  }
  if (mStateManagementThread != null)   mStateManagementThread.interrupt();
}",0.9787234042553192
178294,"private void msg(String m){
  if (mecbMsg != null)   mecbMsg.onNewMessageArrived(m);
 else   Log.d(""String_Node_Str"",m);
}","private void msg(String m){
  m=""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ m;
  if (mecbMsg != null) {
    mecbMsg.onNewMessageArrived(m);
  }
 else {
    Log.d(""String_Node_Str"",m);
  }
}",0.7197640117994101
178295,"public boolean appendLog(String dataLine){
  if (mLogFile == null) {
    msg(""String_Node_Str"");
    return false;
  }
  try {
    mLogFile.append(dataLine);
  }
 catch (  Exception e) {
    msg(""String_Node_Str"" + e.getMessage());
    setLogging(false);
    return false;
  }
  return true;
}","public boolean appendLog(String dataLine){
  if (mLogFile == null) {
    if (DEBUG)     msg(""String_Node_Str"");
    return false;
  }
  try {
    mLogFile.append(dataLine);
  }
 catch (  Exception e) {
    msg(""String_Node_Str"" + e.getMessage());
    setLogging(false);
    return false;
  }
  return true;
}",0.9750415973377704
178296,"/** 
 * controls whether we'll be logging packets to file or not. 
 * @param trueOrFalse - set to true if you want to log packets to the sdcard. 
 * @return
 */
public boolean setLogging(boolean trueOrFalse){
  if (trueOrFalse == true) {
    try {
      setLogging(false);
      String backupDirectory=Environment.getExternalStorageDirectory() + ""String_Node_Str"";
      mkdir(backupDirectory);
      String fullPath=backupDirectory + ""String_Node_Str"" + mLogFileName;
      mLogFile=new FileWriter(fullPath,true);
      mgStats.setStat(""String_Node_Str"",fullPath);
    }
 catch (    Exception e1) {
      msg(""String_Node_Str"" + e1.getMessage());
      return false;
    }
    appendLog(""String_Node_Str"" + EasyTime.currentDateAndTimeStamp() + ""String_Node_Str"");
    msg(""String_Node_Str"");
  }
 else {
    try {
      mLogFile.flush();
      mLogFile.close();
      mLogFile=null;
    }
 catch (    Exception e) {
      msg(""String_Node_Str"" + e.getMessage());
    }
  }
  return true;
}","/** 
 * controls whether we'll be logging packets to file or not. 
 * @param trueOrFalse - set to true if you want to log packets to the sdcard. 
 * @return
 */
public boolean setLogging(boolean trueOrFalse){
  if (trueOrFalse == true) {
    try {
      setLogging(false);
      String backupDirectory=Environment.getExternalStorageDirectory() + ""String_Node_Str"";
      mkdir(backupDirectory);
      String fullPath=backupDirectory + ""String_Node_Str"" + mLogFileName;
      msg(""String_Node_Str"" + fullPath);
      mLogFile=new FileWriter(fullPath,true);
      mgStats.setStat(""String_Node_Str"",fullPath);
    }
 catch (    Exception e1) {
      msg(""String_Node_Str"" + e1.getMessage());
      return false;
    }
    appendLog(""String_Node_Str"" + EasyTime.currentDateAndTimeStamp() + ""String_Node_Str"");
    msg(""String_Node_Str"");
  }
 else {
    try {
      mLogFile.flush();
      mLogFile.close();
      mLogFile=null;
    }
 catch (    Exception e) {
      msg(""String_Node_Str"" + e.getMessage());
    }
  }
  return true;
}",0.9797130133597228
178297,"@Override public void onDPArrived(String DPN,String sDecodedData,int iDecodedData){
  if (mSVIPServer != null)   mSVIPServer.sendDPArrived(DPN,sDecodedData);
  sendDPArrivedMessage(DPN,sDecodedData);
}","@Override public void onDPArrived(String DPN,String sDecodedData,int iDecodedData){
  sendDPArrivedMessage(DPN,sDecodedData);
}",0.774390243902439
178298,"/** 
 * Pings the server and returns the latency, in ms, accurate to about 200ms. 
 * @return - returns number of milliseconds between request and response. TODO: use queryserver() to do the ping.
 */
public int pingServer(){
  final int sleepSliceTime=200;
  int loopCount=0;
  final int maxLoopCount=25;
  int latency=0;
  sendMessage(""String_Node_Str"");
  while (mResponseMessageQueue.isEmpty() && loopCount <= maxLoopCount) {
    loopCount++;
    if (!EasyTime.safeSleep(200))     break;
  }
  latency=loopCount * sleepSliceTime;
  String response=mResponseMessageQueue.peek().toUpperCase();
  if (response.contains(""String_Node_Str"") && response.contains(""String_Node_Str"")) {
    response=mResponseMessageQueue.remove();
    if (DEBUG)     msg(""String_Node_Str"" + response + ""String_Node_Str""+ latency+ ""String_Node_Str"");
  }
  return (latency);
}","/** 
 * Pings the server and returns the latency, in ms, accurate to about 200ms. 
 * @return - returns number of milliseconds between request and response. TODO: use queryserver() to do the ping.
 */
public int pingServer(){
  final int sleepSliceTime=200;
  int loopCount=0;
  final int maxLoopCount=25;
  int latency=0;
  sendMessage(""String_Node_Str"");
  while (mResponseMessageQueue.isEmpty() && loopCount <= maxLoopCount) {
    loopCount++;
    if (!EasyTime.safeSleep(200))     break;
  }
  if (loopCount > maxLoopCount) {
    if (DEBUG)     msg(""String_Node_Str"");
    return 9999;
  }
  latency=loopCount * sleepSliceTime;
  String response=mResponseMessageQueue.peek().toUpperCase();
  if (response.contains(""String_Node_Str"") && response.contains(""String_Node_Str"")) {
    response=mResponseMessageQueue.remove();
    if (DEBUG)     msg(""String_Node_Str"" + response + ""String_Node_Str""+ latency+ ""String_Node_Str"");
  }
  return (latency);
}",0.70874861572536
178299,"public GeneralStats getStats(){
  return mGenStats;
}","public GeneralStats getStats(){
  updateAllStats();
  return mGenStats;
}",0.8412698412698413
178300,"/** 
 * for each session type, if support is ""true"" (not unknown or no), then make sure the session is  instantiated. When we look up hardware support from the DB it allows us to skip the instantiation  during detection phase, so this method will let us instantiate those sessions for the parent class. 
 */
private void instantiateAllAvailableSessions(){
  if (sess_obd2 == null && isOBD2Supported().equals(""String_Node_Str"")) {
    sess_obd2=new OBD2Session(ebt,pd,""String_Node_Str"",ddb);
  }
  if (sess_cmd == null && isMoniSupported().equals(""String_Node_Str"") && isHardwareSWCAN().equals(""String_Node_Str"")) {
    sess_cmd=new CommandSession(ebt,ddb);
    sess_cmd.suspend();
  }
  if (sess_monitor == null && isMoniSupported().equals(""String_Node_Str"")) {
    if (isHardwareSWCAN().equals(""String_Node_Str""))     sess_monitor=new MonitorSession(ebt,MonitorSession.INTERFACE_SWCAN,pd);
 else     sess_monitor=new MonitorSession(ebt,MonitorSession.INTERFACE_STANDARD,pd);
  }
  if (sess_obd2 != null)   sess_obd2._suspend();
  if (sess_monitor != null)   sess_monitor._suspend();
  if (sess_cmd != null)   sess_cmd.suspend();
}","/** 
 * for each session type, if support is ""true"" (not unknown or no), then make sure the session is  instantiated. When we look up hardware support from the DB it allows us to skip the instantiation  during detection phase, so this method will let us instantiate those sessions for the parent class. 
 */
private void instantiateAllAvailableSessions(){
  if (sess_obd2 == null && isOBD2Supported().equals(""String_Node_Str"")) {
    sess_obd2=new OBD2Session(ebt,pd,""String_Node_Str"",ddb);
  }
  if (sess_cmd == null && isMoniSupported().equals(""String_Node_Str"") && isHardwareSWCAN().equals(""String_Node_Str"")) {
    sess_cmd=new CommandSession(ebt,ddb);
    sess_cmd.suspend();
  }
  if (sess_monitor == null && isMoniSupported().equals(""String_Node_Str"")) {
    if (isHardwareSWCAN().equals(""String_Node_Str""))     sess_monitor=new MonitorSession(ebt,MonitorSession.INTERFACE_SWCAN,pd);
 else     sess_monitor=new MonitorSession(ebt,MonitorSession.INTERFACE_STANDARD,pd);
  }
  if (sess_cmd != null)   sess_cmd.suspend();
  if (sess_obd2 != null)   sess_obd2._suspend();
  if (sess_monitor != null)   sess_monitor._suspend();
}",0.9593280282935456
178301,"public void shutdown(){
  if (DEBUG)   msg(""String_Node_Str"");
  mThreadsOn=false;
  mgStats=null;
  ebt=null;
  ddb=null;
  pd=null;
  sess_cmd=null;
  sess_obd2=null;
  sess_monitor=null;
  mhmCapabilities=null;
}","public void shutdown(){
  if (DEBUG)   msg(""String_Node_Str"");
  mThreadsOn=false;
}",0.5618729096989966
178302,"private void startThreads(){
  if (mScanThread != null)   return;
  mScanThread=new Thread(){
    public void run(){
      int loops=0;
      while (mThreadsOn == true) {
        loops++;
        mgStats.setStat(""String_Node_Str"",""String_Node_Str"" + loops);
        if (mOBD.getCurrentState() < 40) {
          EasyTime.safeSleep(500);
          continue;
        }
 else {
          requestAllDPNs();
        }
        EasyTime.safeSleep(500);
      }
    }
  }
;
  mScanThread.start();
}","private void startThreads(){
  if (mScanThread != null)   return;
  mScanThread=new Thread(){
    public void run(){
      int loops=0;
      while (mThreadsOn == true) {
        loops++;
        mgStats.setStat(""String_Node_Str"",""String_Node_Str"" + loops);
        if (mOBD.getCurrentState() < 40) {
          EasyTime.safeSleep(500);
          continue;
        }
 else {
          requestAllDPNs();
        }
      }
    }
  }
;
  mScanThread.start();
}",0.8888888888888888
178303,"public void run(){
  int loops=0;
  while (mThreadsOn == true) {
    loops++;
    mgStats.setStat(""String_Node_Str"",""String_Node_Str"" + loops);
    if (mOBD.getCurrentState() < 40) {
      EasyTime.safeSleep(500);
      continue;
    }
 else {
      requestAllDPNs();
    }
    EasyTime.safeSleep(500);
  }
}","public void run(){
  int loops=0;
  while (mThreadsOn == true) {
    loops++;
    mgStats.setStat(""String_Node_Str"",""String_Node_Str"" + loops);
    if (mOBD.getCurrentState() < 40) {
      EasyTime.safeSleep(500);
      continue;
    }
 else {
      requestAllDPNs();
    }
  }
}",0.9403747870528107
178304,"@Override public void onELMDeviceChosen(final String MAC){
  new Thread(){
    public void run(){
      mgStats.incrementStat(""String_Node_Str"");
      long startTime=EasyTime.getUnixTime();
      setupHSession(MAC);
      long stopTime=EasyTime.getUnixTime();
      mgStats.setStat(""String_Node_Str"",stopTime - startTime);
    }
  }
.start();
}","@Override public void onELMDeviceChosen(final String MAC){
  mgStats.incrementStat(""String_Node_Str"");
  long startTime=EasyTime.getUnixTime();
  setupHSession(MAC);
  long stopTime=EasyTime.getUnixTime();
  mgStats.setStat(""String_Node_Str"",stopTime - startTime);
}",0.8379705400981997
178305,"public synchronized static HazelcastCacheImpl getInstance(){
  return instance;
}","public synchronized static HazelcastCacheImpl getInstance(){
  if (instance == null) {
    instance=new HazelcastCacheImpl();
  }
  return instance;
}",0.7012987012987013
178306,"/** 
 * Average time.
 * @param key the key
 * @return the long
 */
public long averageTime(KEY key){
  long executions=this.executions(key);
  long times=this.executionTimes(key);
  return times / executions;
}","/** 
 * Average time.
 * @param key the key
 * @return the long
 */
public long averageTime(KEY key){
  long executions=this.executions(key);
  long times=this.executionTimes(key);
  if (executions <= 0) {
    return 0;
  }
  return times / executions;
}",0.90752688172043
178307,"/** 
 * Instantiates a new log4 play event.
 * @param event the event
 */
public Log4PlayEvent(LoggingEvent event){
  DateFormat dateFormat=SimpleDateFormat.getDateTimeInstance();
  this.category=event.categoryName;
  this.thread=event.getThreadName();
  this.date=dateFormat.format(new Date(event.getTimeStamp()));
  this.message=event.getRenderedMessage();
  if (event.getLevel().toInt() == Level.TRACE_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.DEBUG_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.INFO_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.WARN_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.ERROR_INT) {
    this.level=""String_Node_Str"";
  }
}","/** 
 * Instantiates a new log4 play event.
 * @param event the event
 */
public Log4PlayEvent(LoggingEvent event){
  DateFormat dateFormat=SimpleDateFormat.getDateTimeInstance();
  this.category=event.categoryName;
  this.thread=event.getThreadName();
  this.date=dateFormat.format(new Date(event.getTimeStamp()));
  this.message=event.getRenderedMessage();
  this.message=this.message.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (event.getLevel().toInt() == Level.TRACE_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.DEBUG_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.INFO_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.WARN_INT) {
    this.level=""String_Node_Str"";
  }
  if (event.getLevel().toInt() == Level.ERROR_INT) {
    this.level=""String_Node_Str"";
  }
}",0.9286122215876642
178308,"private void notifyUser(Context context,NotificationManager notificationManager){
  ArrayList<Chargeable> data=LogStoreService.getInstance().get(context,Settings.getBillingStartDate(context),Settings.getBillingEndDate(context));
  String operator=Settings.getOperator(context);
  String planName=Settings.getMyPlan(context);
  PlanService planService=PlanService.getInstance();
  PlanSummary summary=planService.process(data,operator,planName);
  PlanChargeable last=null;
  for (  PlanChargeable planChargeable : summary.getPlanCalls()) {
    if (planChargeable.getChargeable() != null && planChargeable.getChargeable().getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      last=planChargeable;
    }
  }
  String lastCallPrice=Formatter.formatDecimal(last.getPrice()) + ""String_Node_Str"" + last.getCurrency();
  String totalPrice=Formatter.formatDecimal(summary.getTotalPrice()) + ""String_Node_Str"" + last.getCurrency();
  String text=lastCallPrice + ""String_Node_Str"" + totalPrice;
  Notification notification=new Notification(R.drawable.app_icon,text,System.currentTimeMillis());
  notification.flags=Notification.FLAG_AUTO_CANCEL;
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,new Intent(),0);
  notification.setLatestEventInfo(context,context.getString(R.string.app_name),text,pendingIntent);
  notificationManager.notify(NOTIFICATION_ID,notification);
}","private void notifyUser(Context context,NotificationManager notificationManager){
  ArrayList<Chargeable> data=LogStoreService.getInstance().get(context,Settings.getBillingStartDate(context),Settings.getBillingEndDate(context));
  String operator=Settings.getOperator(context);
  String planName=Settings.getMyPlan(context);
  PlanService planService=PlanService.getInstance();
  PlanSummary summary=planService.process(data,operator,planName);
  PlanChargeable last=null;
  if (summary != null) {
    for (    PlanChargeable planChargeable : summary.getPlanCalls()) {
      if (planChargeable.getChargeable() != null && planChargeable.getChargeable().getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
        last=planChargeable;
      }
    }
    String lastCallPrice=Formatter.formatDecimal(last.getPrice()) + ""String_Node_Str"" + last.getCurrency();
    String totalPrice=Formatter.formatDecimal(summary.getTotalPrice()) + ""String_Node_Str"" + last.getCurrency();
    String text=lastCallPrice + ""String_Node_Str"" + totalPrice;
    Notification notification=new Notification(R.drawable.app_icon,text,System.currentTimeMillis());
    notification.flags=Notification.FLAG_AUTO_CANCEL;
    PendingIntent pendingIntent=PendingIntent.getActivity(context,0,new Intent(),0);
    notification.setLatestEventInfo(context,context.getString(R.string.app_name),text,pendingIntent);
    notificationManager.notify(NOTIFICATION_ID,notification);
  }
}",0.9763835037010928
178309,"public boolean equals(Object another){
  Contact anotherContact=null;
  if (another instanceof ContactValue) {
    anotherContact=((ContactValue)another).getContact();
  }
  return this.getMsisdn().equals(anotherContact.getMsisdn());
}","public boolean equals(Object another){
  Contact anotherContact=null;
  if (another instanceof ContactValue) {
    anotherContact=((ContactValue)another).getContact();
  }
  if (this.getMsisdn() == null || anotherContact == null || anotherContact.getMsisdn() == null) {
    return false;
  }
  return this.getMsisdn().equals(anotherContact.getMsisdn());
}",0.7728813559322034
178310,"public static int getMsisdnTypeResourceImage(MsisdnType msisdnType){
switch (msisdnType) {
case ES_JAZZTEL:
    return R.drawable.logo_jazztel;
case ES_MOVISTAR:
  return R.drawable.logo_movistar;
case ES_ORANGE:
return R.drawable.logo_orange;
case ES_PEPEPHONE:
return R.drawable.logo_pepephone;
case ES_SIMYO:
return R.drawable.logo_simyo;
case ES_VODAFONE:
return R.drawable.logo_vodafone;
case ES_YOIGO:
return R.drawable.logo_yoigo;
case ES_LAND_LINE:
return R.drawable.logo_landline;
case ES_LAND_LINE_SPECIAL:
return R.drawable.logo_landlinespecial;
}
return R.drawable.logo_unknown;
}","public static int getMsisdnTypeResourceImage(MsisdnType msisdnType){
switch (msisdnType) {
case ES_JAZZTEL:
    return R.drawable.logo_jazztel;
case ES_MASMOVIL:
  return R.drawable.logo_masmovil;
case ES_MOVISTAR:
return R.drawable.logo_movistar;
case ES_ORANGE:
return R.drawable.logo_orange;
case ES_PEPEPHONE:
return R.drawable.logo_pepephone;
case ES_SIMYO:
return R.drawable.logo_simyo;
case ES_VODAFONE:
return R.drawable.logo_vodafone;
case ES_YOIGO:
return R.drawable.logo_yoigo;
case ES_LAND_LINE:
return R.drawable.logo_landline;
case ES_LAND_LINE_SPECIAL:
return R.drawable.logo_landlinespecial;
}
return R.drawable.logo_unknown;
}",0.9554655870445344
178311,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),monthFee,this.getCurrency()));
  long secondsTotal=0;
  int smsSent=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        int dayOfWeek=call.getDate().get(Calendar.DAY_OF_WEEK);
        int hourOfDay=call.getDate().get(Calendar.HOUR_OF_DAY);
        boolean discount=(dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY || hourOfDay < 8 || hourOfDay >= 18);
        if (discount) {
          secondsTotal+=call.getDuration();
          discount=secondsTotal <= maxSecondsMonth;
        }
        if (!discount) {
          long duration=(secondsTotal > maxSecondsMonth) && (secondsTotal - call.getDuration() <= maxSecondsMonth) ? secondsTotal - maxSecondsMonth : call.getDuration();
          callPrice+=initialPrice + (duration * pricePerSecond);
        }
      }
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      smsSent++;
      ret.addPlanCall(new PlanChargeable(chargeable,(smsSent > maxFreeSMS) ? smsPrice : 0,this.getCurrency()));
    }
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),monthFee,this.getCurrency()));
  long secondsTotal=0;
  int smsSent=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        secondsTotal+=call.getDuration();
        if (secondsTotal > maxSecondsMonth) {
          long duration=(secondsTotal > maxSecondsMonth) && (secondsTotal - call.getDuration() <= maxSecondsMonth) ? secondsTotal - maxSecondsMonth : call.getDuration();
          callPrice+=initialPrice + (duration * pricePerSecond);
        }
      }
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      smsSent++;
      ret.addPlanCall(new PlanChargeable(chargeable,(smsSent > maxFreeSMS) ? smsPrice : 0,this.getCurrency()));
    }
  }
  return ret;
}",0.860613810741688
178312,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178313,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178314,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178315,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178316,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  long yoigoSeconds=0;
  String dateCallYoigo=""String_Node_Str"";
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else       if (call.getContact().getMsisdnType() == MsisdnType.ES_YOIGO) {
        String formattedDate=Formatter.formatDate(call.getDate());
        if (dateCallYoigo.equals(formattedDate)) {
          yoigoSeconds=yoigoSeconds + call.getDuration();
        }
 else {
          dateCallYoigo=formattedDate;
          yoigoSeconds=call.getDuration();
        }
        if (yoigoSeconds <= maxYoigoSeconds) {
          callPrice=initialPrice;
        }
 else {
          long duration=call.getDuration();
          if (yoigoSeconds - call.getDuration() < maxYoigoSeconds) {
            duration=yoigoSeconds - call.getDuration();
          }
          callPrice=initialPrice + (duration * pricePerSecond);
        }
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  long yoigoSeconds=0;
  String dateCallYoigo=""String_Node_Str"";
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else       if (call.getContact().getMsisdnType() == MsisdnType.ES_YOIGO) {
        String formattedDate=Formatter.formatDate(call.getDate());
        if (dateCallYoigo.equals(formattedDate)) {
          yoigoSeconds=yoigoSeconds + call.getDuration();
        }
 else {
          dateCallYoigo=formattedDate;
          yoigoSeconds=call.getDuration();
        }
        if (yoigoSeconds <= maxYoigoSeconds) {
          callPrice=initialPrice;
        }
 else {
          long duration=call.getDuration();
          if (yoigoSeconds - call.getDuration() < maxYoigoSeconds) {
            duration=yoigoSeconds - call.getDuration();
          }
          callPrice=initialPrice + (duration * pricePerSecond);
        }
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.997997997997998
178317,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178318,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178319,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.9966914805624484
178320,"public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),monthFee,this.getCurrency()));
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  return ret;
}","public PlanSummary process(ArrayList<Chargeable> data){
  PlanSummary ret=new PlanSummary(this);
  ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MONTH_FEE),monthFee,this.getCurrency()));
  double globalPrice=0;
  for (  Chargeable chargeable : data) {
    if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_CALL) {
      Call call=(Call)chargeable;
      if (call.getType() != Call.CALL_TYPE_SENT) {
        continue;
      }
      double callPrice=0;
      if (call.getContact().getMsisdnType() == MsisdnType.ES_SPECIAL_ZER0) {
        callPrice=0;
      }
 else {
        callPrice=initialPrice + (call.getDuration() * pricePerSecond);
      }
      globalPrice+=callPrice;
      ret.addPlanCall(new PlanChargeable(call,callPrice,this.getCurrency()));
    }
 else     if (chargeable.getChargeableType() == Chargeable.CHARGEABLE_TYPE_SMS) {
      Sms sms=(Sms)chargeable;
      if (sms.getType() == Sms.SMS_TYPE_RECEIVED) {
        continue;
      }
      globalPrice+=smsPrice;
      ret.addPlanCall(new PlanChargeable(chargeable,smsPrice,this.getCurrency()));
    }
  }
  if (globalPrice < minimumMonthFee) {
    ret.addPlanCall(new PlanChargeable(new ChargeableMessage(ChargeableMessage.MESSAGE_MINIMUM_MONTH_FEE),minimumMonthFee - globalPrice,this.getCurrency()));
  }
  return ret;
}",0.8714524207011686
178321,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  coreServiceIntent=new Intent(this,org.servalproject.maps.services.CoreService.class);
  startService(coreServiceIntent);
  Bundle mBundle=this.getIntent().getExtras();
  String mMapFileName=mBundle.getString(""String_Node_Str"");
  mapView=new MapView(this);
  mapView.setClickable(true);
  mapView.setBuiltInZoomControls(true);
  if (mMapFileName != null) {
    if (FileUtils.isFileReadable(mMapFileName) == false) {
      String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
      mMapDataPath+=getString(R.string.system_path_map_data);
      mMapFileName=mMapDataPath + mMapFileName;
      if (FileUtils.isFileReadable(mMapFileName))       mapView.setMapFile(new File(mMapFileName));
    }
 else {
      mapView.setMapFile(new File(mMapFileName));
    }
  }
  setContentView(mapView);
  peerLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location));
  selfLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location_self));
  poiLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.incident_marker));
  overlayList=new OverlayList(poiLocationMarker,this);
  mapView.getOverlays().add(overlayList);
  mapView.getOverlays().add(new NewPoiOverlay(this));
  preferences=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  String mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference == null) {
    updateDelay=defaultUpdateDelay;
  }
 else {
    updateDelay=Integer.parseInt(mPreference);
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    poiMaxAge=Long.parseLong(mPreference) * 1000;
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    locationMaxAge=Long.parseLong(mPreference) * 1000;
  }
  keepCentered=preferences.getBoolean(""String_Node_Str"",false);
  if (preferences.getBoolean(""String_Node_Str"",false)) {
    Paint mDefaultFill=null;
    Paint mDefaultLine=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDefaultLine.setARGB(255,85,140,248);
    mDefaultLine.setStyle(Paint.Style.STROKE);
    mDefaultLine.setStrokeWidth(2);
    arrayWayOverlay=new ArrayWayOverlay(mDefaultFill,mDefaultLine);
    mapView.getOverlays().add(arrayWayOverlay);
  }
  preferences.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);
  ServalMaps mApplication=(ServalMaps)getApplication();
  meshPhoneNumber=mApplication.getPhoneNumber();
  mApplication=null;
  updateHandler.post(updateMapTask);
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  coreServiceIntent=new Intent(this,org.servalproject.maps.services.CoreService.class);
  startService(coreServiceIntent);
  Bundle mBundle=this.getIntent().getExtras();
  String mMapFileName=null;
  if (mBundle != null) {
    mMapFileName=mBundle.getString(""String_Node_Str"");
  }
 else {
    finish();
  }
  mapView=new MapView(this);
  mapView.setClickable(true);
  mapView.setBuiltInZoomControls(true);
  if (mMapFileName != null) {
    if (FileUtils.isFileReadable(mMapFileName) == false) {
      String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
      mMapDataPath+=getString(R.string.system_path_map_data);
      mMapFileName=mMapDataPath + mMapFileName;
      if (FileUtils.isFileReadable(mMapFileName))       mapView.setMapFile(new File(mMapFileName));
    }
 else {
      mapView.setMapFile(new File(mMapFileName));
    }
  }
  setContentView(mapView);
  peerLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location));
  selfLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location_self));
  poiLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.incident_marker));
  overlayList=new OverlayList(poiLocationMarker,this);
  mapView.getOverlays().add(overlayList);
  mapView.getOverlays().add(new NewPoiOverlay(this));
  preferences=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  String mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference == null) {
    updateDelay=defaultUpdateDelay;
  }
 else {
    updateDelay=Integer.parseInt(mPreference);
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    poiMaxAge=Long.parseLong(mPreference) * 1000;
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    locationMaxAge=Long.parseLong(mPreference) * 1000;
  }
  keepCentered=preferences.getBoolean(""String_Node_Str"",false);
  if (preferences.getBoolean(""String_Node_Str"",false)) {
    Paint mDefaultFill=null;
    Paint mDefaultLine=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDefaultLine.setARGB(255,85,140,248);
    mDefaultLine.setStyle(Paint.Style.STROKE);
    mDefaultLine.setStrokeWidth(2);
    arrayWayOverlay=new ArrayWayOverlay(mDefaultFill,mDefaultLine);
    mapView.getOverlays().add(arrayWayOverlay);
  }
  preferences.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);
  ServalMaps mApplication=(ServalMaps)getApplication();
  meshPhoneNumber=mApplication.getPhoneNumber();
  mApplication=null;
  updateHandler.post(updateMapTask);
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.9858490566037736
178322,"private boolean deletePoiRecords(){
  publishProgress(3);
  ContentResolver mContentResolver=context.getContentResolver();
  try {
    mContentResolver.delete(LocationsContract.CONTENT_URI,null,null);
  }
 catch (  SQLException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
  publishProgress(4);
  return true;
}","private boolean deletePoiRecords(){
  publishProgress(3);
  ContentResolver mContentResolver=context.getContentResolver();
  try {
    mContentResolver.delete(PointsOfInterestContract.CONTENT_URI,null,null);
  }
 catch (  SQLException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
  publishProgress(4);
  return true;
}",0.962406015037594
178323,"private boolean deletePhotoFiles(){
  publishProgress(7);
  try {
    FileUtils.deleteFilesInDir(MediaUtils.getMediaStore(),null);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
  publishProgress(8);
  return true;
}","private boolean deletePhotoFiles(){
  publishProgress(7);
  try {
    FileUtils.deleteFilesInDir(MediaUtils.getMediaStore(),null);
    FileUtils.deleteDirectory(MediaUtils.getMediaStore());
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
  publishProgress(8);
  return true;
}",0.8973913043478261
178324,"/** 
 * get a list of files in a directory
 * @param dirPath the directory to search for files
 * @param extensions a list of extensions to filter the list of files, if null all files are returns
 * @return an array of file names or null if no files match
 * @throws IOException
 */
public static String[] listFilesInDir(String dirPath,String[] extensions) throws IOException {
  String[] mFileList=null;
  if (TextUtils.isEmpty(dirPath) == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isDirectoryWritable(dirPath) == false) {
    throw new IOException(""String_Node_Str"" + dirPath);
  }
  File mDir=new File(dirPath);
  File[] mFiles=mDir.listFiles(new ExtensionFileFilter(extensions));
  if (mFiles != null) {
    mFileList=new String[mFiles.length];
    for (int i=0; i < mFiles.length; i++) {
      mFileList[i]=mFiles[i].getName();
    }
  }
  return mFileList;
}","/** 
 * get a list of files in a directory
 * @param dirPath the directory to search for files
 * @param extensions a list of extensions to filter the list of files, if null all files are returns
 * @return an array of file names or null if no files match
 * @throws IOException
 */
public static String[] listFilesInDir(String dirPath,String[] extensions) throws IOException {
  String[] mFileList=null;
  if (TextUtils.isEmpty(dirPath) == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isDirectoryWritable(dirPath) == false) {
    throw new IOException(""String_Node_Str"" + dirPath);
  }
  File mDir=new File(dirPath);
  File[] mFiles=mDir.listFiles(new ExtensionFileFilter(extensions));
  if (mFiles != null && mFiles.length > 0) {
    mFileList=new String[mFiles.length];
    for (int i=0; i < mFiles.length; i++) {
      mFileList[i]=mFiles[i].getName();
    }
  }
  return mFileList;
}",0.9884551951621772
178325,"public boolean accept(File pathname){
  if (pathname.isDirectory()) {
    return false;
  }
  if (pathname.canRead() == false) {
    return false;
  }
  String name=pathname.getName().toLowerCase();
  if (extensions == null) {
    if (!name.startsWith(""String_Node_Str"")) {
      return true;
    }
  }
 else {
    for (    String mExtension : extensions) {
      if (name.endsWith(mExtension)) {
        return true;
      }
    }
    return false;
  }
  return false;
}","public boolean accept(File pathname){
  if (pathname.isDirectory()) {
    return false;
  }
  if (pathname.canRead() == false) {
    return false;
  }
  String name=pathname.getName().toLowerCase();
  if (extensions == null) {
    if (!name.equals(""String_Node_Str"") || !name.equals(""String_Node_Str"")) {
      return true;
    }
  }
 else {
    for (    String mExtension : extensions) {
      if (name.endsWith(mExtension)) {
        return true;
      }
    }
    return false;
  }
  return false;
}",0.947584789311408
178326,"@Override protected void onHandleIntent(Intent arg0){
  String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
  mMapDataPath+=getString(R.string.system_path_map_data);
  String[] mMapDataFiles=new String[0];
  Intent mBroadcastIntent=new Intent(""String_Node_Str"");
  if (FileUtils.isDirectoryReadable(mMapDataPath) == false) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    try {
      mMapDataFiles=FileUtils.listFilesInDir(mMapDataPath,EXTENSIONS);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      mMapDataFiles=new String[0];
    }
  }
  if (mMapDataFiles.length > 0) {
    ArrayList<MapDataInfo> mMapDataInfoList=new ArrayList<MapDataInfo>();
    for (    String mMapDataFile : mMapDataFiles) {
      MapDataInfo mMapDataInfo=new MapDataInfo(mMapDataFile);
      try {
        mMapDataInfo.setMetadata(MapUtils.getMetadata(mMapDataPath + mMapDataFile));
        mMapDataInfoList.add(mMapDataInfo);
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + mMapDataPath + mMapDataFile+ ""String_Node_Str"",e);
      }
      if (V_LOG) {
        Log.v(TAG,mMapDataInfo.toString());
      }
    }
    mBroadcastIntent.putParcelableArrayListExtra(""String_Node_Str"",mMapDataInfoList);
    mBroadcastIntent.putExtra(""String_Node_Str"",mMapDataInfoList.size());
  }
 else   mBroadcastIntent.putExtra(""String_Node_Str"",0);
  this.sendBroadcast(mBroadcastIntent,""String_Node_Str"");
}","@Override protected void onHandleIntent(Intent arg0){
  String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
  mMapDataPath+=getString(R.string.system_path_map_data);
  String[] mMapDataFiles=new String[0];
  Intent mBroadcastIntent=new Intent(""String_Node_Str"");
  if (FileUtils.isDirectoryReadable(mMapDataPath) == false) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    try {
      mMapDataFiles=FileUtils.listFilesInDir(mMapDataPath,EXTENSIONS);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      mMapDataFiles=new String[0];
    }
  }
  if (mMapDataFiles.length > 0) {
    ArrayList<MapDataInfo> mMapDataInfoList=new ArrayList<MapDataInfo>();
    for (    String mMapDataFile : mMapDataFiles) {
      MapDataInfo mMapDataInfo=new MapDataInfo(mMapDataFile);
      try {
        mMapDataInfo.setMetadata(MapUtils.getMetadata(mMapDataPath + mMapDataFile));
        mMapDataInfoList.add(mMapDataInfo);
      }
 catch (      Exception e) {
        Log.e(TAG,""String_Node_Str"" + mMapDataPath + mMapDataFile+ ""String_Node_Str"",e);
      }
      if (V_LOG) {
        Log.v(TAG,mMapDataInfo.toString());
      }
    }
    mBroadcastIntent.putParcelableArrayListExtra(""String_Node_Str"",mMapDataInfoList);
    mBroadcastIntent.putExtra(""String_Node_Str"",mMapDataInfoList.size());
  }
 else {
    mBroadcastIntent.putExtra(""String_Node_Str"",0);
  }
  this.sendBroadcast(mBroadcastIntent,""String_Node_Str"");
}",0.9972375690607734
178327,"/** 
 * write a POI message to the file
 * @param context a context object used to get a content resolver object
 * @param recordId the unique record identifier for the location record
 * @throws IllegalArgumentException if the context parameter is null
 * @throws IllegalArgumentException if a record cannot be found
 */
public static void writePointOfInterest(Context context,String recordId){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String mOutputPath=Environment.getExternalStorageDirectory().getPath();
  mOutputPath+=context.getString(R.string.system_path_binary_data);
  if (FileUtils.isDirectoryWritable(mOutputPath) == false) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  ContentResolver mContentResolver=context.getContentResolver();
  Uri mContentUri=Uri.parse(PointsOfInterestContract.CONTENT_URI.toString() + ""String_Node_Str"" + recordId);
  Cursor mCursor=mContentResolver.query(mContentUri,null,null,null,null);
  if (mCursor.getCount() == 0) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  mCursor.moveToFirst();
  String mPhotoName=mCursor.getString(mCursor.getColumnIndex(PointsOfInterestContract.Table.PHOTO));
  if (mPhotoName != null) {
    Rhizome.addFile(context,MediaUtils.getMediaStore() + mPhotoName);
  }
  String mFileName=mCursor.getString(mCursor.getColumnIndex(LocationsContract.Table.PHONE_NUMBER));
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName + ""String_Node_Str"" + TimeUtils.getTodayWithHour()+ BinaryFileContract.POI_EXT;
  FileOutputStream mOutput=null;
  try {
    try {
      mOutput=new FileOutputStream(mOutputPath + mFileName,true);
      BinaryFileContract.writeLocationRecord(mCursor,mOutput);
    }
  finally {
      mOutput.close();
    }
    Rhizome.addFile(context,mOutputPath + mFileName);
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    try {
      if (mOutput != null) {
        mOutput.close();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
    mCursor.close();
  }
}","/** 
 * write a POI message to the file
 * @param context a context object used to get a content resolver object
 * @param recordId the unique record identifier for the location record
 * @throws IllegalArgumentException if the context parameter is null
 * @throws IllegalArgumentException if a record cannot be found
 */
public static void writePointOfInterest(Context context,String recordId){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String mOutputPath=Environment.getExternalStorageDirectory().getPath();
  mOutputPath+=context.getString(R.string.system_path_binary_data);
  if (FileUtils.isDirectoryWritable(mOutputPath) == false) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  ContentResolver mContentResolver=context.getContentResolver();
  Uri mContentUri=Uri.parse(PointsOfInterestContract.CONTENT_URI.toString() + ""String_Node_Str"" + recordId);
  Cursor mCursor=mContentResolver.query(mContentUri,null,null,null,null);
  if (mCursor.getCount() == 0) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  mCursor.moveToFirst();
  String mPhotoName=mCursor.getString(mCursor.getColumnIndex(PointsOfInterestContract.Table.PHOTO));
  if (mPhotoName != null) {
    Rhizome.addFile(context,MediaUtils.getMediaStore() + mPhotoName);
  }
  String mFileName=mCursor.getString(mCursor.getColumnIndex(LocationsContract.Table.PHONE_NUMBER));
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName + ""String_Node_Str"" + TimeUtils.getTodayWithHour()+ BinaryFileContract.POI_EXT;
  FileOutputStream mOutput=null;
  try {
    try {
      mOutput=new FileOutputStream(mOutputPath + mFileName,true);
      BinaryFileContract.writePointOfInterestRecord(mCursor,mOutput);
    }
  finally {
      mOutput.close();
    }
    Rhizome.addFile(context,mOutputPath + mFileName);
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    try {
      if (mOutput != null) {
        mOutput.close();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
    mCursor.close();
  }
}",0.9948968271577546
178328,"@Override public void run(){
  try {
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"" + dataFile);
    }
    ContentResolver mContentResolver=context.getContentResolver();
    InputStream mInputStream=mContentResolver.openInputStream(dataFile);
    try {
      ContentValues mNewValues=null;
      Cursor mCursor=null;
      LocationMessage.Message mMessage;
      long mLatestTimeStamp=-1;
      while ((mMessage=LocationMessage.Message.parseDelimitedFrom(mInputStream)) != null) {
        if (mLatestTimeStamp == -1) {
          String[] mProjection={LocationsContract.Table.TIMESTAMP};
          String mSelection=LocationsContract.Table.PHONE_NUMBER + ""String_Node_Str"";
          String[] mSelectionArgs=new String[1];
          mSelectionArgs[0]=mMessage.getPhoneNumber();
          String mOrderBy=LocationsContract.Table.TIMESTAMP + ""String_Node_Str"";
          mCursor=mContentResolver.query(LocationsContract.CONTENT_URI,mProjection,mSelection,mSelectionArgs,mOrderBy);
          if (mCursor.getCount() != 0) {
            mCursor.moveToFirst();
            mLatestTimeStamp=mCursor.getLong(mCursor.getColumnIndex(LocationsContract.Table.TIMESTAMP));
          }
 else {
            mLatestTimeStamp=0;
          }
          mCursor.close();
          mCursor=null;
        }
        if (mMessage.getTimestamp() > mLatestTimeStamp) {
          mNewValues=new ContentValues();
          mNewValues.put(LocationsContract.Table.PHONE_NUMBER,mMessage.getPhoneNumber());
          mNewValues.put(LocationsContract.Table.SUBSCRIBER_ID,mMessage.getSubsciberId());
          mNewValues.put(LocationsContract.Table.LATITUDE,mMessage.getLatitude());
          mNewValues.put(LocationsContract.Table.LONGITUDE,mMessage.getLongitude());
          mNewValues.put(LocationsContract.Table.TIMESTAMP,mMessage.getTimestamp());
          mNewValues.put(LocationsContract.Table.TIMEZONE,mMessage.getTimeZone());
          try {
            mContentResolver.insert(LocationsContract.CONTENT_URI,mNewValues);
          }
 catch (          SQLiteException e) {
            Log.e(TAG,""String_Node_Str"",e);
            break;
          }
          if (V_LOG) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
 else {
          if (V_LOG) {
            Log.v(TAG,""String_Node_Str"");
          }
          try {
            Thread.sleep(sleepTime);
          }
 catch (          InterruptedException e) {
            Log.w(TAG,""String_Node_Str"");
          }
        }
        mNewValues=null;
        try {
          Thread.sleep(sleepTime);
        }
 catch (        InterruptedException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
    }
  finally {
      mInputStream.close();
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void run(){
  try {
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"" + dataFile);
    }
    ContentResolver mContentResolver=context.getContentResolver();
    InputStream mInputStream=null;
    try {
      mInputStream=mContentResolver.openInputStream(dataFile);
    }
 catch (    java.io.FileNotFoundException e) {
      Log.e(TAG,""String_Node_Str"" + dataFile);
      return;
    }
    try {
      ContentValues mNewValues=null;
      Cursor mCursor=null;
      LocationMessage.Message mMessage;
      long mLatestTimeStamp=-1;
      while ((mMessage=LocationMessage.Message.parseDelimitedFrom(mInputStream)) != null) {
        if (mLatestTimeStamp == -1) {
          String[] mProjection={LocationsContract.Table.TIMESTAMP};
          String mSelection=LocationsContract.Table.PHONE_NUMBER + ""String_Node_Str"";
          String[] mSelectionArgs=new String[1];
          mSelectionArgs[0]=mMessage.getPhoneNumber();
          String mOrderBy=LocationsContract.Table.TIMESTAMP + ""String_Node_Str"";
          mCursor=mContentResolver.query(LocationsContract.CONTENT_URI,mProjection,mSelection,mSelectionArgs,mOrderBy);
          if (mCursor.getCount() != 0) {
            mCursor.moveToFirst();
            mLatestTimeStamp=mCursor.getLong(mCursor.getColumnIndex(LocationsContract.Table.TIMESTAMP));
          }
 else {
            mLatestTimeStamp=0;
          }
          mCursor.close();
          mCursor=null;
        }
        if (mMessage.getTimestamp() > mLatestTimeStamp) {
          mNewValues=new ContentValues();
          mNewValues.put(LocationsContract.Table.PHONE_NUMBER,mMessage.getPhoneNumber());
          mNewValues.put(LocationsContract.Table.SUBSCRIBER_ID,mMessage.getSubsciberId());
          mNewValues.put(LocationsContract.Table.LATITUDE,mMessage.getLatitude());
          mNewValues.put(LocationsContract.Table.LONGITUDE,mMessage.getLongitude());
          mNewValues.put(LocationsContract.Table.TIMESTAMP,mMessage.getTimestamp());
          mNewValues.put(LocationsContract.Table.TIMEZONE,mMessage.getTimeZone());
          try {
            mContentResolver.insert(LocationsContract.CONTENT_URI,mNewValues);
          }
 catch (          SQLiteException e) {
            Log.e(TAG,""String_Node_Str"",e);
            break;
          }
          if (V_LOG) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
 else {
          try {
            Thread.sleep(sleepTime);
          }
 catch (          InterruptedException e) {
            Log.w(TAG,""String_Node_Str"");
          }
        }
        mNewValues=null;
        try {
          Thread.sleep(sleepTime);
        }
 catch (        InterruptedException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
    }
  finally {
      mInputStream.close();
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
}",0.8844649840028439
178329,"/** 
 * construct a new location read worker
 * @param context the context object used to access a content resolver
 * @param uri the path to the binary file
 */
public PointsOfInterestWorker(Context context,Uri uri){
  this.context=context;
  this.uri=uri;
}","/** 
 * construct a new location read worker
 * @param context the context object used to access a content resolver
 * @param uri the path to the binary file
 */
public PointsOfInterestWorker(Context context,Uri dataFile){
  this.context=context;
  this.dataFile=dataFile;
}",0.9380863039399624
178330,"@Override public void run(){
  try {
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"" + uri);
    }
    ContentResolver mContentResolver=context.getContentResolver();
    InputStream mInputStream=mContentResolver.openInputStream(uri);
    try {
      ContentValues mNewValues=null;
      Cursor mCursor=null;
      PointOfInterestMessage.Message mMessage;
      long mLatestTimeStamp=-1;
      while ((mMessage=PointOfInterestMessage.Message.parseDelimitedFrom(mInputStream)) != null) {
        if (mLatestTimeStamp == -1) {
          String[] mProjection={PointsOfInterestContract.Table.TIMESTAMP};
          String mSelection=PointsOfInterestContract.Table.PHONE_NUMBER + ""String_Node_Str"";
          String[] mSelectionArgs=new String[1];
          mSelectionArgs[0]=mMessage.getPhoneNumber();
          String mOrderBy=PointsOfInterestContract.Table.TIMESTAMP + ""String_Node_Str"";
          mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,mSelection,mSelectionArgs,mOrderBy);
          if (mCursor.getCount() != 0) {
            mCursor.moveToFirst();
            mLatestTimeStamp=mCursor.getLong(mCursor.getColumnIndex(PointsOfInterestContract.Table.TIMESTAMP));
          }
 else {
            mLatestTimeStamp=0;
          }
          mCursor.close();
          mCursor=null;
        }
        if (mMessage.getTimestamp() > mLatestTimeStamp) {
          mNewValues=new ContentValues();
          mNewValues.put(PointsOfInterestContract.Table.PHONE_NUMBER,mMessage.getPhoneNumber());
          mNewValues.put(PointsOfInterestContract.Table.SUBSCRIBER_ID,mMessage.getSubsciberId());
          mNewValues.put(PointsOfInterestContract.Table.LATITUDE,mMessage.getLatitude());
          mNewValues.put(PointsOfInterestContract.Table.LONGITUDE,mMessage.getLongitude());
          mNewValues.put(PointsOfInterestContract.Table.TIMESTAMP,mMessage.getTimestamp());
          mNewValues.put(PointsOfInterestContract.Table.TIMEZONE,mMessage.getTimeZone());
          mNewValues.put(PointsOfInterestContract.Table.TITLE,mMessage.getTitle());
          mNewValues.put(PointsOfInterestContract.Table.DESCRIPTION,mMessage.getDescription());
          mNewValues.put(PointsOfInterestContract.Table.CATEGORY,mMessage.getCategory());
          mNewValues.put(PointsOfInterestContract.Table.PHOTO,mMessage.getPhoto());
          try {
            mContentResolver.insert(PointsOfInterestContract.CONTENT_URI,mNewValues);
          }
 catch (          SQLiteException e) {
            Log.e(TAG,""String_Node_Str"",e);
            break;
          }
          if (V_LOG) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
 else {
          if (V_LOG) {
            Log.v(TAG,""String_Node_Str"");
          }
          try {
            Thread.sleep(sleepTime);
          }
 catch (          InterruptedException e) {
            Log.w(TAG,""String_Node_Str"");
          }
        }
        mNewValues=null;
        try {
          Thread.sleep(sleepTime);
        }
 catch (        InterruptedException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
    }
  finally {
      mInputStream.close();
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void run(){
  try {
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"" + dataFile);
    }
    ContentResolver mContentResolver=context.getContentResolver();
    InputStream mInputStream=null;
    try {
      mInputStream=mContentResolver.openInputStream(dataFile);
    }
 catch (    java.io.FileNotFoundException e) {
      Log.e(TAG,""String_Node_Str"" + dataFile);
      return;
    }
    try {
      ContentValues mNewValues=null;
      Cursor mCursor=null;
      PointOfInterestMessage.Message mMessage;
      long mLatestTimeStamp=-1;
      while ((mMessage=PointOfInterestMessage.Message.parseDelimitedFrom(mInputStream)) != null) {
        if (mLatestTimeStamp == -1) {
          String[] mProjection={PointsOfInterestContract.Table.TIMESTAMP};
          String mSelection=PointsOfInterestContract.Table.PHONE_NUMBER + ""String_Node_Str"";
          String[] mSelectionArgs=new String[1];
          mSelectionArgs[0]=mMessage.getPhoneNumber();
          String mOrderBy=PointsOfInterestContract.Table.TIMESTAMP + ""String_Node_Str"";
          mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,mSelection,mSelectionArgs,mOrderBy);
          if (mCursor.getCount() != 0) {
            mCursor.moveToFirst();
            mLatestTimeStamp=mCursor.getLong(mCursor.getColumnIndex(PointsOfInterestContract.Table.TIMESTAMP));
          }
 else {
            mLatestTimeStamp=0;
          }
          mCursor.close();
          mCursor=null;
        }
        if (mMessage.getTimestamp() > mLatestTimeStamp) {
          mNewValues=new ContentValues();
          mNewValues.put(PointsOfInterestContract.Table.PHONE_NUMBER,mMessage.getPhoneNumber());
          mNewValues.put(PointsOfInterestContract.Table.SUBSCRIBER_ID,mMessage.getSubsciberId());
          mNewValues.put(PointsOfInterestContract.Table.LATITUDE,mMessage.getLatitude());
          mNewValues.put(PointsOfInterestContract.Table.LONGITUDE,mMessage.getLongitude());
          mNewValues.put(PointsOfInterestContract.Table.TIMESTAMP,mMessage.getTimestamp());
          mNewValues.put(PointsOfInterestContract.Table.TIMEZONE,mMessage.getTimeZone());
          mNewValues.put(PointsOfInterestContract.Table.TITLE,mMessage.getTitle());
          mNewValues.put(PointsOfInterestContract.Table.DESCRIPTION,mMessage.getDescription());
          mNewValues.put(PointsOfInterestContract.Table.CATEGORY,mMessage.getCategory());
          mNewValues.put(PointsOfInterestContract.Table.PHOTO,mMessage.getPhoto());
          Log.d(TAG,""String_Node_Str"" + mMessage.getDescription() + ""String_Node_Str"");
          Log.d(TAG,""String_Node_Str"" + mMessage.getTitle() + ""String_Node_Str"");
          try {
            mContentResolver.insert(PointsOfInterestContract.CONTENT_URI,mNewValues);
          }
 catch (          SQLiteException e) {
            Log.e(TAG,""String_Node_Str"",e);
            break;
          }
          if (V_LOG) {
            Log.v(TAG,""String_Node_Str"");
          }
        }
 else {
          try {
            Thread.sleep(sleepTime);
          }
 catch (          InterruptedException e) {
            Log.w(TAG,""String_Node_Str"");
          }
        }
        mNewValues=null;
        try {
          Thread.sleep(sleepTime);
        }
 catch (        InterruptedException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
    }
  finally {
      mInputStream.close();
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
}",0.8705530642750373
178331,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.stats);
  ContentResolver mContentResolver=getApplicationContext().getContentResolver();
  String[] mProjection=new String[1];
  mProjection[0]=LocationsContract.Table._ID;
  Cursor mCursor=mContentResolver.query(LocationsContract.CONTENT_URI,mProjection,null,null,null);
  TextView mTextView=(TextView)findViewById(R.id.stats_ui_txt_version);
  try {
    PackageInfo mPackageInfo=getPackageManager().getPackageInfo(getPackageName(),PackageManager.GET_META_DATA);
    mTextView.setText(mPackageInfo.versionName);
    dataElems[0]=mPackageInfo.versionName;
  }
 catch (  NameNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mTextView.setText(String.format(getString(R.string.about_ui_lbl_version),getString(R.string.misc_not_available)));
  }
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_locations);
  mTextView.setText(Integer.toString(mCursor.getCount()));
  dataElems[1]=Integer.toString(mCursor.getCount());
  mCursor.close();
  mProjection[0]=PointsOfInterestContract.Table._ID;
  mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,null,null,null);
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_pois);
  mTextView.setText(Integer.toString(mCursor.getCount()));
  dataElems[2]=Integer.toString(mCursor.getCount());
  mCursor.close();
  String mSelection=PointsOfInterestContract.Table.PHOTO + ""String_Node_Str"";
  mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,mSelection,null,null);
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_photos);
  mTextView.setText(Integer.toString(mCursor.getCount()));
  dataElems[3]=Integer.toString(mCursor.getCount());
  mCursor.close();
  String[] mSelectionArgs=new String[1];
  ServalMaps mApplication=(ServalMaps)getApplication();
  mSelectionArgs[0]=mApplication.getPhoneNumber();
  mApplication=null;
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_photos_by_you);
  if (mSelectionArgs[0] != null) {
    mSelection=PointsOfInterestContract.Table.PHOTO + ""String_Node_Str"";
    mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,mSelection,mSelectionArgs,null);
    mTextView.setText(Integer.toString(mCursor.getCount()));
    dataElems[4]=Integer.toString(mCursor.getCount());
    mCursor.close();
  }
 else {
    mTextView.setText(R.string.misc_not_available);
    dataElems[4]=getString(R.string.misc_not_available);
  }
  SharedPreferences mPreferences=getSharedPreferences(CoreService.PREFERENCES_NAME,Context.MODE_PRIVATE);
  long mUptime=mPreferences.getLong(CoreService.PREFERENCES_VALUE,0);
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_uptime);
  if (mUptime > 0) {
    mTextView.setText(TimeUtils.getMillisHumanReadable(mUptime,this));
    dataElems[5]=TimeUtils.getMillisHumanReadable(mUptime,this);
  }
 else {
    mTextView.setText(String.format(getString(R.string.misc_age_calculation_seconds),0));
    dataElems[5]=""String_Node_Str"";
  }
  Button mButton=(Button)findViewById(R.id.stats_ui_btn_send);
  mButton.setOnClickListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.stats);
  ContentResolver mContentResolver=getApplicationContext().getContentResolver();
  String[] mProjection=new String[1];
  mProjection[0]=LocationsContract.Table._ID;
  Cursor mCursor=mContentResolver.query(LocationsContract.CONTENT_URI,mProjection,null,null,null);
  TextView mTextView=(TextView)findViewById(R.id.stats_ui_txt_version);
  try {
    PackageInfo mPackageInfo=getPackageManager().getPackageInfo(getPackageName(),PackageManager.GET_META_DATA);
    mTextView.setText(mPackageInfo.versionName);
    dataElems[0]=mPackageInfo.versionName;
  }
 catch (  NameNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mTextView.setText(String.format(getString(R.string.about_ui_lbl_version),getString(R.string.misc_not_available)));
  }
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_locations);
  mTextView.setText(Integer.toString(mCursor.getCount()));
  dataElems[1]=Integer.toString(mCursor.getCount());
  mCursor.close();
  mProjection[0]=PointsOfInterestContract.Table._ID;
  mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,null,null,null);
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_pois);
  mTextView.setText(Integer.toString(mCursor.getCount()));
  dataElems[2]=Integer.toString(mCursor.getCount());
  mCursor.close();
  String mSelection=PointsOfInterestContract.Table.PHOTO + ""String_Node_Str"";
  mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,mSelection,null,null);
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_photos);
  mTextView.setText(Integer.toString(mCursor.getCount()));
  dataElems[3]=Integer.toString(mCursor.getCount());
  mCursor.close();
  String[] mSelectionArgs=new String[1];
  ServalMaps mApplication=(ServalMaps)getApplication();
  mSelectionArgs[0]=mApplication.getPhoneNumber();
  mApplication=null;
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_photos_by_you);
  if (mSelectionArgs[0] != null) {
    mSelection=PointsOfInterestContract.Table.PHONE_NUMBER + ""String_Node_Str"" + PointsOfInterestContract.Table.PHOTO+ ""String_Node_Str"";
    mCursor=mContentResolver.query(PointsOfInterestContract.CONTENT_URI,mProjection,mSelection,mSelectionArgs,null);
    mTextView.setText(Integer.toString(mCursor.getCount()));
    dataElems[4]=Integer.toString(mCursor.getCount());
    mCursor.close();
  }
 else {
    mTextView.setText(R.string.misc_not_available);
    dataElems[4]=getString(R.string.misc_not_available);
  }
  SharedPreferences mPreferences=getSharedPreferences(CoreService.PREFERENCES_NAME,Context.MODE_PRIVATE);
  long mUptime=mPreferences.getLong(CoreService.PREFERENCES_VALUE,0);
  mTextView=(TextView)findViewById(R.id.stats_ui_txt_uptime);
  if (mUptime > 0) {
    mTextView.setText(TimeUtils.getMillisHumanReadable(mUptime,this));
    dataElems[5]=Long.toString(mUptime);
  }
 else {
    mTextView.setText(String.format(getString(R.string.misc_age_calculation_seconds),0));
    dataElems[5]=""String_Node_Str"";
  }
  Button mButton=(Button)findViewById(R.id.stats_ui_btn_send);
  mButton.setOnClickListener(this);
}",0.981268691956556
178332,"@Override protected Integer doInBackground(String... taskType){
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"" + taskType[0]);
  }
  Integer recordCount=-1;
  if (taskType[0].equals(""String_Node_Str"") == true) {
    recordCount=doAllExport();
  }
 else   if (taskType[0].equals(""String_Node_Str"") == true) {
    recordCount=doLocationExport();
  }
 else {
    recordCount=doPoiExport();
  }
  return recordCount;
}","@Override protected Integer doInBackground(String... taskType){
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"" + taskType[0]);
  }
  if (taskType[0].equals(""String_Node_Str"") == true) {
    recordCount=doAllExport();
  }
 else   if (taskType[0].equals(""String_Node_Str"") == true) {
    recordCount=doLocationExport();
  }
 else {
    recordCount=doPoiExport();
  }
  return recordCount;
}",0.9675810473815462
178333,"@Override protected void onPostExecute(Integer result){
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
  progressBar.setVisibility(View.INVISIBLE);
  progressBar.setProgress(0);
  progressLabel.setVisibility(View.INVISIBLE);
  Button mButton=(Button)context.findViewById(R.id.export_ui_btn_export);
  mButton.setEnabled(true);
}","@Override protected void onPostExecute(Integer result){
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
  progressBar.setVisibility(View.INVISIBLE);
  progressBar.setProgress(0);
  progressLabel.setVisibility(View.INVISIBLE);
  Button mButton=(Button)context.findViewById(R.id.export_ui_btn_export);
  mButton.setEnabled(true);
  String mMessage=String.format(context.getString(R.string.export_ui_finished_msg),recordCount,context.getString(R.string.system_path_export_data));
  AlertDialog.Builder mBuilder=new AlertDialog.Builder(context);
  mBuilder.setMessage(mMessage).setCancelable(false).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  AlertDialog mAlert=mBuilder.create();
  mAlert.show();
}",0.5714285714285714
178334,"@Override public void onReceive(Context context,Intent intent){
  Log.d(TAG,""String_Node_Str"");
  if (intent.getStringExtra(""String_Node_Str"") != null) {
    application.setPhoneNumber(intent.getStringExtra(""String_Node_Str""));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (intent.getStringExtra(""String_Node_Str"") != null) {
    application.setSid(intent.getStringExtra(""String_Node_Str""));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getStringExtra(""String_Node_Str"") != null) {
    application.setPhoneNumber(intent.getStringExtra(""String_Node_Str""));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (intent.getStringExtra(""String_Node_Str"") != null) {
    application.setSid(intent.getStringExtra(""String_Node_Str""));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}",0.6109839816933639
178335,"/** 
 * add a file to the Rhizome repository
 * @param context a context object used to get access to system resources
 * @param filePath the full path to the file
 */
public static void addFile(Context context,String filePath){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (FileUtils.isFileReadable(filePath) == false) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SharedPreferences mPreferences=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  String mVersionName=new File(filePath).getName() + ""String_Node_Str"";
  Long mVersion=mPreferences.getLong(mVersionName,0);
  mVersion++;
  String mName=context.getString(R.string.app_name);
  Intent mIntent=new Intent(""String_Node_Str"");
  mIntent.putExtra(""String_Node_Str"",filePath);
  mIntent.putExtra(""String_Node_Str"",mVersion);
  mIntent.putExtra(""String_Node_Str"",mName);
  context.getApplicationContext().startService(mIntent);
  Editor mEditor=mPreferences.edit();
  mEditor.putLong(mVersionName,mVersion);
  mEditor.commit();
}","/** 
 * add a file to the Rhizome repository
 * @param context a context object used to get access to system resources
 * @param filePath the full path to the file
 */
public static void addFile(Context context,String filePath){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (FileUtils.isFileReadable(filePath) == false) {
    throw new IllegalArgumentException(""String_Node_Str"" + filePath + ""String_Node_Str"");
  }
  SharedPreferences mPreferences=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  String mVersionName=new File(filePath).getName() + ""String_Node_Str"";
  Long mVersion=mPreferences.getLong(mVersionName,0);
  mVersion++;
  String mName=context.getString(R.string.app_name);
  Intent mIntent=new Intent(""String_Node_Str"");
  mIntent.putExtra(""String_Node_Str"",filePath);
  mIntent.putExtra(""String_Node_Str"",mVersion);
  mIntent.putExtra(""String_Node_Str"",mName);
  context.getApplicationContext().startService(mIntent);
  Editor mEditor=mPreferences.edit();
  mEditor.putLong(mVersionName,mVersion);
  mEditor.commit();
}",0.9857993586807148
178336,"/** 
 * Create a File for saving an image or video 
 */
private static File getOutputMediaFile(int type){
  File mediaStorageDir=new File(getMediaStore());
  String timeStamp=new SimpleDateFormat(""String_Node_Str"").format(new Date());
  File mediaFile;
  if (type == MEDIA_TYPE_IMAGE) {
    mediaFile=new File(mediaStorageDir.getPath() + ""String_Node_Str"" + timeStamp+ ""String_Node_Str"");
  }
 else   if (type == MEDIA_TYPE_VIDEO) {
    mediaFile=new File(mediaStorageDir.getPath() + ""String_Node_Str"" + timeStamp+ ""String_Node_Str"");
  }
 else {
    return null;
  }
  return mediaFile;
}","/** 
 * Create a File for saving an image or video 
 */
private static File getOutputMediaFile(int type){
  File mediaStorageDir=new File(getMediaStore());
  String timeStamp=new SimpleDateFormat(""String_Node_Str"").format(new Date());
  File mediaFile;
  if (type == MEDIA_TYPE_IMAGE) {
    mediaFile=new File(mediaStorageDir.getPath() + File.separatorChar + ""String_Node_Str""+ timeStamp+ ""String_Node_Str"");
  }
 else   if (type == MEDIA_TYPE_VIDEO) {
    mediaFile=new File(mediaStorageDir.getPath() + File.separatorChar + ""String_Node_Str""+ timeStamp+ ""String_Node_Str"");
  }
 else {
    return null;
  }
  return mediaFile;
}",0.9638752052545156
178337,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  coreServiceIntent=new Intent(this,org.servalproject.maps.services.CoreService.class);
  startService(coreServiceIntent);
  Bundle mBundle=this.getIntent().getExtras();
  String mMapFileName=mBundle.getString(""String_Node_Str"");
  mapView=new MapView(this);
  mapView.setClickable(true);
  mapView.setBuiltInZoomControls(true);
  if (mMapFileName != null) {
    String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
    mMapDataPath+=getString(R.string.system_path_map_data);
    mapView.setMapFile(mMapDataPath + mMapFileName);
  }
  setContentView(mapView);
  peerLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location));
  selfLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location_self));
  poiLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.incident_marker));
  overlayList=new OverlayList(poiLocationMarker,this);
  mapView.getOverlays().add(overlayList);
  mapView.getOverlays().add(new NewPoiOverlay(this));
  preferences=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  String mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference == null) {
    updateDelay=defaultUpdateDelay;
  }
 else {
    updateDelay=Integer.parseInt(mPreference);
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    poiMaxAge=Long.parseLong(mPreference) * 1000;
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    locationMaxAge=Long.parseLong(mPreference) * 1000;
  }
  keepCentered=preferences.getBoolean(""String_Node_Str"",false);
  if (preferences.getBoolean(""String_Node_Str"",false)) {
    Paint mDefaultFill=null;
    Paint mDefaultLine=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDefaultLine.setARGB(255,85,140,248);
    mDefaultLine.setStyle(Paint.Style.STROKE);
    mDefaultLine.setStrokeWidth(2);
    arrayWayOverlay=new ArrayWayOverlay(mDefaultFill,mDefaultLine);
    mapView.getOverlays().add(arrayWayOverlay);
  }
  preferences.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);
  ServalMaps mApplication=(ServalMaps)getApplication();
  meshPhoneNumber=mApplication.getPhoneNumber();
  mApplication=null;
  updateHandler.post(updateMapTask);
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  coreServiceIntent=new Intent(this,org.servalproject.maps.services.CoreService.class);
  startService(coreServiceIntent);
  Bundle mBundle=this.getIntent().getExtras();
  String mMapFileName=mBundle.getString(""String_Node_Str"");
  mapView=new MapView(this);
  mapView.setClickable(true);
  mapView.setBuiltInZoomControls(true);
  if (mMapFileName != null) {
    if (FileUtils.isFileReadable(mMapFileName) == false) {
      String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
      mMapDataPath+=getString(R.string.system_path_map_data);
      mapView.setMapFile(mMapDataPath + mMapFileName);
    }
 else {
      mapView.setMapFile(mMapFileName);
    }
  }
  setContentView(mapView);
  peerLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location));
  selfLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location_self));
  poiLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.incident_marker));
  overlayList=new OverlayList(poiLocationMarker,this);
  mapView.getOverlays().add(overlayList);
  mapView.getOverlays().add(new NewPoiOverlay(this));
  preferences=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  String mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference == null) {
    updateDelay=defaultUpdateDelay;
  }
 else {
    updateDelay=Integer.parseInt(mPreference);
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    poiMaxAge=Long.parseLong(mPreference) * 1000;
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    locationMaxAge=Long.parseLong(mPreference) * 1000;
  }
  keepCentered=preferences.getBoolean(""String_Node_Str"",false);
  if (preferences.getBoolean(""String_Node_Str"",false)) {
    Paint mDefaultFill=null;
    Paint mDefaultLine=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDefaultLine.setARGB(255,85,140,248);
    mDefaultLine.setStyle(Paint.Style.STROKE);
    mDefaultLine.setStrokeWidth(2);
    arrayWayOverlay=new ArrayWayOverlay(mDefaultFill,mDefaultLine);
    mapView.getOverlays().add(arrayWayOverlay);
  }
  preferences.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);
  ServalMaps mApplication=(ServalMaps)getApplication();
  meshPhoneNumber=mApplication.getPhoneNumber();
  mApplication=null;
  updateHandler.post(updateMapTask);
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.9755046051342348
178338,"/** 
 * copies a file into a directory
 * @param filePath path to the source file
 * @param dirPath path to the destination directory
 * @return the full path of the destination file
 * @throws IOException 
 */
public static String copyFileToDir(String filePath,String dirPath) throws IOException {
  if (TextUtils.isEmpty(filePath) == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(dirPath) == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isFileReadable(filePath) == false) {
    throw new IOException(""String_Node_Str"");
  }
  if (isDirectoryWritable(dirPath) == false) {
    throw new IOException(""String_Node_Str"");
  }
  String mFileName=new File(filePath).getName();
  FileChannel mInputChannel=new FileInputStream(filePath).getChannel();
  FileChannel mOutputChannel=new FileOutputStream(dirPath + mFileName).getChannel();
  mOutputChannel.transferFrom(mInputChannel,0,mInputChannel.size());
  mInputChannel.close();
  mOutputChannel.close();
  return dirPath + mFileName;
}","/** 
 * copies a file into a directory
 * @param filePath path to the source file
 * @param dirPath path to the destination directory
 * @return the full path of the destination file
 * @throws IOException 
 */
public static String copyFileToDir(String filePath,String dirPath) throws IOException {
  if (TextUtils.isEmpty(filePath) == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(dirPath) == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isFileReadable(filePath) == false) {
    throw new IOException(""String_Node_Str"");
  }
  if (isDirectoryWritable(dirPath) == false) {
    throw new IOException(""String_Node_Str"");
  }
  String mFileName=new File(filePath).getName();
  if (dirPath.endsWith(File.separator) == false) {
    dirPath=dirPath + File.separator;
  }
  FileChannel mInputChannel=new FileInputStream(filePath).getChannel();
  FileChannel mOutputChannel=new FileOutputStream(dirPath + mFileName).getChannel();
  mOutputChannel.transferFrom(mInputChannel,0,mInputChannel.size());
  mInputChannel.close();
  mOutputChannel.close();
  return dirPath + mFileName;
}",0.9580135440180588
178339,"@Override public void onClick(View v){
  String mMessage;
switch (v.getId()) {
case R.id.new_poi_ui_btn_save:
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"");
    }
  TextView mView=(TextView)findViewById(R.id.new_poi_ui_txt_title);
if (TextUtils.isEmpty(mView.getText()) == true) {
  Toast.makeText(this,R.string.new_poi_toast_title_missing,Toast.LENGTH_SHORT).show();
  mView.requestFocus();
  return;
}
if (mView.getText().length() > MAX_TITLE_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_title_too_long);
Toast.makeText(this,String.format(mMessage,MAX_TITLE_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mTitle=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_description);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_description_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
if (mView.getText().length() > MAX_DESCRIPTION_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_description_too_long);
Toast.makeText(this,String.format(mMessage,MAX_DESCRIPTION_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mDescription=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_latitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
latitude=Double.parseDouble(mView.toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
mView=(TextView)findViewById(R.id.new_poi_ui_txt_longitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
longitude=Double.parseDouble(mView.toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
addNewPoi(mTitle,mDescription);
finish();
}
}","@Override public void onClick(View v){
  String mMessage;
switch (v.getId()) {
case R.id.new_poi_ui_btn_save:
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"");
    }
  TextView mView=(TextView)findViewById(R.id.new_poi_ui_txt_title);
if (TextUtils.isEmpty(mView.getText()) == true) {
  Toast.makeText(this,R.string.new_poi_toast_title_missing,Toast.LENGTH_SHORT).show();
  mView.requestFocus();
  return;
}
if (mView.getText().length() > MAX_TITLE_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_title_too_long);
Toast.makeText(this,String.format(mMessage,MAX_TITLE_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mTitle=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_description);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_description_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
if (mView.getText().length() > MAX_DESCRIPTION_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_description_too_long);
Toast.makeText(this,String.format(mMessage,MAX_DESCRIPTION_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mDescription=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_latitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
latitude=Double.parseDouble(mView.getText().toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
mView=(TextView)findViewById(R.id.new_poi_ui_txt_longitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
longitude=Double.parseDouble(mView.getText().toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
addNewPoi(mTitle,mDescription);
finish();
}
}",0.9953938277291572
178340,"@Override public void onClick(View v){
  String mMessage;
switch (v.getId()) {
case R.id.new_poi_ui_btn_save:
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"");
    }
  TextView mView=(TextView)findViewById(R.id.new_poi_ui_txt_title);
if (TextUtils.isEmpty(mView.getText()) == true) {
  Toast.makeText(this,R.string.new_poi_toast_title_missing,Toast.LENGTH_SHORT).show();
  mView.requestFocus();
  return;
}
if (mView.getText().length() > MAX_TITLE_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_title_too_long);
Toast.makeText(this,String.format(mMessage,MAX_TITLE_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mTitle=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_description);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_description_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
if (mView.getText().length() > MAX_DESCRIPTION_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_description_too_long);
Toast.makeText(this,String.format(mMessage,MAX_DESCRIPTION_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mDescription=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_latitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
latitude=Double.parseDouble(mView.getText().toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
mView=(TextView)findViewById(R.id.new_poi_ui_txt_longitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
longitude=Double.parseDouble(mView.getText().toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
addNewPoi(mTitle,mDescription);
finish();
}
}","@Override public void onClick(View v){
  String mMessage;
switch (v.getId()) {
case R.id.new_poi_ui_btn_save:
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"");
    }
  TextView mView=(TextView)findViewById(R.id.new_poi_ui_txt_title);
if (TextUtils.isEmpty(mView.getText()) == true) {
  Toast.makeText(this,R.string.new_poi_toast_title_missing,Toast.LENGTH_SHORT).show();
  mView.requestFocus();
  return;
}
if (mView.getText().length() > MAX_TITLE_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_title_too_long);
Toast.makeText(this,String.format(mMessage,MAX_TITLE_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mTitle=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_description);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_description_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
if (mView.getText().length() > MAX_DESCRIPTION_CHARACTERS) {
mMessage=getString(R.string.new_poi_toast_description_too_long);
Toast.makeText(this,String.format(mMessage,MAX_DESCRIPTION_CHARACTERS),Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
String mDescription=mView.getText().toString();
mView=(TextView)findViewById(R.id.new_poi_ui_txt_latitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
latitude=Double.parseDouble(mView.getText().toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_latitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
mView=(TextView)findViewById(R.id.new_poi_ui_txt_longitude);
if (TextUtils.isEmpty(mView.getText()) == true) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
try {
longitude=Double.parseDouble(mView.getText().toString());
}
 catch (NumberFormatException e) {
Toast.makeText(this,R.string.new_poi_toast_longitude_missing,Toast.LENGTH_SHORT).show();
mView.requestFocus();
return;
}
if (addNewPoi(mTitle,mDescription) == true) {
finish();
}
}
}",0.9958885335769758
178341,"private void addNewPoi(String title,String description){
  ContentValues mValues=new ContentValues();
  Location mLocation=LocationCollector.getLocation();
  if (mLocation == null) {
    Toast.makeText(this,R.string.new_poi_toast_location_error,Toast.LENGTH_SHORT).show();
  }
  mValues.put(MapItemsContract.PointsOfInterest.Table.PHONE_NUMBER,phoneNumber);
  mValues.put(MapItemsContract.PointsOfInterest.Table.SUBSCRIBER_ID,subscriberId);
  if (latitude == -1) {
    latitude=mLocation.getLatitude();
    longitude=mLocation.getLongitude();
  }
  mValues.put(MapItemsContract.PointsOfInterest.Table.LATITUDE,latitude);
  mValues.put(MapItemsContract.PointsOfInterest.Table.LONGITUDE,longitude);
  mValues.put(MapItemsContract.PointsOfInterest.Table.TIMESTAMP,System.currentTimeMillis());
  mValues.put(MapItemsContract.PointsOfInterest.Table.TIMEZONE,TimeZone.getDefault().getID());
  mValues.put(MapItemsContract.PointsOfInterest.Table.TITLE,title);
  mValues.put(MapItemsContract.PointsOfInterest.Table.DESCRIPTION,description);
  String mHash=HashUtils.hashPointOfInterestMessage(phoneNumber,latitude,longitude,title,description);
  mValues.put(MapItemsContract.PointsOfInterest.Table.HASH,mHash);
  try {
    Uri newRecord=getContentResolver().insert(MapItemsContract.PointsOfInterest.CONTENT_URI,mValues);
    BinaryFileWriter.writePointOfInterest(this,newRecord.getLastPathSegment());
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"" + newRecord.getLastPathSegment());
    }
  }
 catch (  SQLException e) {
    Log.e(TAG,""String_Node_Str"",e);
    Toast.makeText(this,R.string.new_poi_toast_save_error,Toast.LENGTH_SHORT).show();
  }
}","private boolean addNewPoi(String title,String description){
  ContentValues mValues=new ContentValues();
  if (latitude == -1 || longitude == -1) {
    Toast.makeText(this,R.string.new_poi_toast_location_error,Toast.LENGTH_SHORT).show();
    return false;
  }
  mValues.put(MapItemsContract.PointsOfInterest.Table.PHONE_NUMBER,phoneNumber);
  mValues.put(MapItemsContract.PointsOfInterest.Table.SUBSCRIBER_ID,subscriberId);
  mValues.put(MapItemsContract.PointsOfInterest.Table.LATITUDE,latitude);
  mValues.put(MapItemsContract.PointsOfInterest.Table.LONGITUDE,longitude);
  mValues.put(MapItemsContract.PointsOfInterest.Table.TIMESTAMP,System.currentTimeMillis());
  mValues.put(MapItemsContract.PointsOfInterest.Table.TIMEZONE,TimeZone.getDefault().getID());
  mValues.put(MapItemsContract.PointsOfInterest.Table.TITLE,title);
  mValues.put(MapItemsContract.PointsOfInterest.Table.DESCRIPTION,description);
  String mHash=HashUtils.hashPointOfInterestMessage(phoneNumber,latitude,longitude,title,description);
  mValues.put(MapItemsContract.PointsOfInterest.Table.HASH,mHash);
  try {
    Uri newRecord=getContentResolver().insert(MapItemsContract.PointsOfInterest.CONTENT_URI,mValues);
    BinaryFileWriter.writePointOfInterest(this,newRecord.getLastPathSegment());
    if (V_LOG) {
      Log.v(TAG,""String_Node_Str"" + newRecord.getLastPathSegment());
    }
  }
 catch (  SQLException e) {
    Log.e(TAG,""String_Node_Str"",e);
    Toast.makeText(this,R.string.new_poi_toast_save_error,Toast.LENGTH_SHORT).show();
    return false;
  }
  return true;
}",0.91494684177611
178342,"@Override protected Dialog onCreateDialog(int id){
  AlertDialog.Builder mBuilder=new AlertDialog.Builder(this);
  Dialog mDialog=null;
switch (id) {
case NO_FILES_DIALOG:
    mBuilder.setMessage(R.string.disclaimer_ui_dialog_no_files).setCancelable(false).setPositiveButton(R.string.misc_dialog_yes_button,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        showMapActivity(null);
      }
    }
).setNegativeButton(R.string.misc_dialog_no_button,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
);
  mDialog=mBuilder.create();
break;
case MANY_FILES_DIALOG:
mFileNames=new CharSequence[mapDataInfoList.size()];
for (int i=0; i < mapDataInfoList.size(); i++) {
MapDataInfo mInfo=mapDataInfoList.get(i);
mFileNames[i]=mInfo.getFileName();
}
mBuilder.setTitle(R.string.disclaimer_ui_dialog_many_files_title).setCancelable(false).setItems(mFileNames,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int item){
showMapActivity(mFileNames[item].toString());
}
}
);
mDialog=mBuilder.create();
break;
case NO_SERVAL_DIALOG:
mBuilder.setMessage(R.string.disclaimer_ui_dialog_no_serval).setCancelable(false).setPositiveButton(R.string.misc_dialog_ok_button,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
return;
}
}
);
mDialog=mBuilder.create();
break;
default :
mDialog=null;
}
return mDialog;
}","@Override protected Dialog onCreateDialog(int id){
  AlertDialog.Builder mBuilder=new AlertDialog.Builder(this);
  Dialog mDialog=null;
switch (id) {
case NO_FILES_DIALOG:
    mBuilder.setMessage(R.string.disclaimer_ui_dialog_no_files).setCancelable(false).setPositiveButton(R.string.misc_dialog_yes_button,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        showMapActivity(null);
      }
    }
).setNegativeButton(R.string.misc_dialog_no_button,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
);
  mDialog=mBuilder.create();
break;
case MANY_FILES_DIALOG:
mFileNames=new CharSequence[mapDataInfoList.size()];
File mFile=null;
for (int i=0; i < mapDataInfoList.size(); i++) {
MapDataInfo mInfo=mapDataInfoList.get(i);
mFile=new File(mInfo.getFileName());
mFileNames[i]=mFile.getName();
}
mBuilder.setTitle(R.string.disclaimer_ui_dialog_many_files_title).setCancelable(false).setItems(mFileNames,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int item){
showMapActivity(mFileNames[item].toString());
}
}
);
mDialog=mBuilder.create();
break;
case NO_SERVAL_DIALOG:
mBuilder.setMessage(R.string.disclaimer_ui_dialog_no_serval).setCancelable(false).setPositiveButton(R.string.misc_dialog_ok_button,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
return;
}
}
);
mDialog=mBuilder.create();
break;
default :
mDialog=null;
}
return mDialog;
}",0.978750804893754
178343,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  coreServiceIntent=new Intent(this,org.servalproject.maps.services.CoreService.class);
  startService(coreServiceIntent);
  Bundle mBundle=this.getIntent().getExtras();
  String mMapFileName=mBundle.getString(""String_Node_Str"");
  mapView=new MapView(this);
  mapView.setClickable(true);
  mapView.setBuiltInZoomControls(true);
  if (mMapFileName != null) {
    mapView.setMapFile(mMapFileName);
  }
  setContentView(mapView);
  peerLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location));
  selfLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location_self));
  poiLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.incident_marker));
  overlayList=new OverlayList(poiLocationMarker,this);
  mapView.getOverlays().add(overlayList);
  mapView.getOverlays().add(new NewPoiOverlay(this));
  preferences=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  String mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference == null) {
    updateDelay=defaultUpdateDelay;
  }
 else {
    updateDelay=Integer.parseInt(mPreference);
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    poiMaxAge=Long.parseLong(mPreference) * 1000;
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    locationMaxAge=Long.parseLong(mPreference) * 1000;
  }
  keepCentered=preferences.getBoolean(""String_Node_Str"",false);
  if (preferences.getBoolean(""String_Node_Str"",false)) {
    Paint mDefaultFill=null;
    Paint mDefaultLine=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDefaultLine.setARGB(255,85,140,248);
    mDefaultLine.setStyle(Paint.Style.STROKE);
    mDefaultLine.setStrokeWidth(2);
    arrayWayOverlay=new ArrayWayOverlay(mDefaultFill,mDefaultLine);
    mapView.getOverlays().add(arrayWayOverlay);
  }
  preferences.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);
  ServalMaps mApplication=(ServalMaps)getApplication();
  meshPhoneNumber=mApplication.getPhoneNumber();
  mApplication=null;
  updateHandler.post(updateMapTask);
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  coreServiceIntent=new Intent(this,org.servalproject.maps.services.CoreService.class);
  startService(coreServiceIntent);
  Bundle mBundle=this.getIntent().getExtras();
  String mMapFileName=mBundle.getString(""String_Node_Str"");
  mapView=new MapView(this);
  mapView.setClickable(true);
  mapView.setBuiltInZoomControls(true);
  if (mMapFileName != null) {
    String mMapDataPath=Environment.getExternalStorageDirectory().getPath();
    mMapDataPath+=getString(R.string.system_path_map_data);
    mapView.setMapFile(mMapDataPath + mMapFileName);
  }
  setContentView(mapView);
  peerLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location));
  selfLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.peer_location_self));
  poiLocationMarker=ItemizedOverlay.boundCenterBottom(getResources().getDrawable(R.drawable.incident_marker));
  overlayList=new OverlayList(poiLocationMarker,this);
  mapView.getOverlays().add(overlayList);
  mapView.getOverlays().add(new NewPoiOverlay(this));
  preferences=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  String mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference == null) {
    updateDelay=defaultUpdateDelay;
  }
 else {
    updateDelay=Integer.parseInt(mPreference);
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    poiMaxAge=Long.parseLong(mPreference) * 1000;
  }
  mPreference=preferences.getString(""String_Node_Str"",null);
  if (mPreference != null) {
    locationMaxAge=Long.parseLong(mPreference) * 1000;
  }
  keepCentered=preferences.getBoolean(""String_Node_Str"",false);
  if (preferences.getBoolean(""String_Node_Str"",false)) {
    Paint mDefaultFill=null;
    Paint mDefaultLine=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDefaultLine.setARGB(255,85,140,248);
    mDefaultLine.setStyle(Paint.Style.STROKE);
    mDefaultLine.setStrokeWidth(2);
    arrayWayOverlay=new ArrayWayOverlay(mDefaultFill,mDefaultLine);
    mapView.getOverlays().add(arrayWayOverlay);
  }
  preferences.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);
  ServalMaps mApplication=(ServalMaps)getApplication();
  meshPhoneNumber=mApplication.getPhoneNumber();
  mApplication=null;
  updateHandler.post(updateMapTask);
  if (V_LOG) {
    Log.v(TAG,""String_Node_Str"");
  }
}",0.968503937007874
178344,"/** 
 * write a location message to the file
 * @param context a context object used to get a content resolver object
 * @param recordId the unique record identifier for the location record
 * @throws IllegalArgumentException if the context parameter is null
 * @throws IllegalArgumentException if a record cannot be found
 */
public static void writeLocation(Context context,String recordId){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String mOutputPath=Environment.getExternalStorageDirectory().getPath();
  mOutputPath+=context.getString(R.string.system_path_binary_data);
  if (testPath(mOutputPath) == false) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  ContentResolver mContentResolver=context.getContentResolver();
  Uri mContentUri=Uri.parse(MapItemsContract.Locations.CONTENT_URI.toString() + ""String_Node_Str"" + recordId);
  Cursor mCursor=mContentResolver.query(mContentUri,null,null,null,null);
  if (mCursor.getCount() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mCursor.moveToFirst();
  org.servalproject.maps.protobuf.LocationMessage.Message.Builder mMessageBuilder=LocationMessage.Message.newBuilder();
  mMessageBuilder.setPhoneNumber(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.PHONE_NUMBER)));
  mMessageBuilder.setSubsciberId(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.SUBSCRIBER_ID)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.Locations.Table.LATITUDE)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.Locations.Table.LONGITUDE)));
  mMessageBuilder.setTimestamp(mCursor.getLong(mCursor.getColumnIndex(MapItemsContract.Locations.Table.TIMESTAMP)));
  mMessageBuilder.setTimeZone(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.TIMEZONE)));
  String mFileName=mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.PHONE_NUMBER));
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName + TimeUtils.getTodayAsString() + ""String_Node_Str"";
  mCursor.close();
  try {
    FileOutputStream mOutput=new FileOutputStream(mOutputPath + mFileName,true);
    mMessageBuilder.build().writeDelimitedTo(mOutput);
    mOutput.close();
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
}","/** 
 * write a location message to the file
 * @param context a context object used to get a content resolver object
 * @param recordId the unique record identifier for the location record
 * @throws IllegalArgumentException if the context parameter is null
 * @throws IllegalArgumentException if a record cannot be found
 */
public static void writeLocation(Context context,String recordId){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String mOutputPath=Environment.getExternalStorageDirectory().getPath();
  mOutputPath+=context.getString(R.string.system_path_binary_data);
  if (testPath(mOutputPath) == false) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  ContentResolver mContentResolver=context.getContentResolver();
  Uri mContentUri=Uri.parse(MapItemsContract.Locations.CONTENT_URI.toString() + ""String_Node_Str"" + recordId);
  Cursor mCursor=mContentResolver.query(mContentUri,null,null,null,null);
  if (mCursor.getCount() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mCursor.moveToFirst();
  org.servalproject.maps.protobuf.LocationMessage.Message.Builder mMessageBuilder=LocationMessage.Message.newBuilder();
  mMessageBuilder.setPhoneNumber(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.PHONE_NUMBER)));
  mMessageBuilder.setSubsciberId(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.SUBSCRIBER_ID)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.Locations.Table.LATITUDE)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.Locations.Table.LONGITUDE)));
  mMessageBuilder.setTimestamp(mCursor.getLong(mCursor.getColumnIndex(MapItemsContract.Locations.Table.TIMESTAMP)));
  mMessageBuilder.setTimeZone(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.TIMEZONE)));
  String mFileName=mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.PHONE_NUMBER));
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName + ""String_Node_Str"" + TimeUtils.getTodayAsString()+ ""String_Node_Str"";
  mCursor.close();
  try {
    FileOutputStream mOutput=new FileOutputStream(mOutputPath + mFileName,true);
    mMessageBuilder.build().writeDelimitedTo(mOutput);
    mOutput.close();
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
}",0.995973154362416
178345,"/** 
 * write a POI message to the file
 * @param context a context object used to get a content resolver object
 * @param recordId the unique record identifier for the location record
 * @throws IllegalArgumentException if the context parameter is null
 * @throws IllegalArgumentException if a record cannot be found
 */
public static void writePointOfInterest(Context context,String recordId){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String mOutputPath=Environment.getExternalStorageDirectory().getPath();
  mOutputPath+=context.getString(R.string.system_path_binary_data);
  if (testPath(mOutputPath) == false) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  ContentResolver mContentResolver=context.getContentResolver();
  Uri mContentUri=Uri.parse(MapItemsContract.PointsOfInterest.CONTENT_URI.toString() + ""String_Node_Str"" + recordId);
  Cursor mCursor=mContentResolver.query(mContentUri,null,null,null,null);
  if (mCursor.getCount() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mCursor.moveToFirst();
  org.servalproject.maps.protobuf.PointOfInterestMessage.Message.Builder mMessageBuilder=PointOfInterestMessage.Message.newBuilder();
  mMessageBuilder.setPhoneNumber(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.PHONE_NUMBER)));
  mMessageBuilder.setSubsciberId(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.SUBSCRIBER_ID)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.LATITUDE)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.LONGITUDE)));
  mMessageBuilder.setTimestamp(mCursor.getLong(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.TIMESTAMP)));
  mMessageBuilder.setTimeZone(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.TIMEZONE)));
  mMessageBuilder.setTitle(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.TITLE)));
  mMessageBuilder.setDescription(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.DESCRIPTION)));
  mMessageBuilder.setTimestamp(mCursor.getLong(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.CATEGORY)));
  String mFileName=mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.PHONE_NUMBER));
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName + TimeUtils.getTodayAsString() + ""String_Node_Str"";
  mCursor.close();
  try {
    FileOutputStream mOutput=new FileOutputStream(mOutputPath + mFileName,true);
    mMessageBuilder.build().writeDelimitedTo(mOutput);
    mOutput.close();
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
}","/** 
 * write a POI message to the file
 * @param context a context object used to get a content resolver object
 * @param recordId the unique record identifier for the location record
 * @throws IllegalArgumentException if the context parameter is null
 * @throws IllegalArgumentException if a record cannot be found
 */
public static void writePointOfInterest(Context context,String recordId){
  if (context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String mOutputPath=Environment.getExternalStorageDirectory().getPath();
  mOutputPath+=context.getString(R.string.system_path_binary_data);
  if (testPath(mOutputPath) == false) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  ContentResolver mContentResolver=context.getContentResolver();
  Uri mContentUri=Uri.parse(MapItemsContract.PointsOfInterest.CONTENT_URI.toString() + ""String_Node_Str"" + recordId);
  Cursor mCursor=mContentResolver.query(mContentUri,null,null,null,null);
  if (mCursor.getCount() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mCursor.moveToFirst();
  org.servalproject.maps.protobuf.PointOfInterestMessage.Message.Builder mMessageBuilder=PointOfInterestMessage.Message.newBuilder();
  mMessageBuilder.setPhoneNumber(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.PHONE_NUMBER)));
  mMessageBuilder.setSubsciberId(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.SUBSCRIBER_ID)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.LATITUDE)));
  mMessageBuilder.setLatitude(mCursor.getDouble(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.LONGITUDE)));
  mMessageBuilder.setTimestamp(mCursor.getLong(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.TIMESTAMP)));
  mMessageBuilder.setTimeZone(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.TIMEZONE)));
  mMessageBuilder.setTitle(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.TITLE)));
  mMessageBuilder.setDescription(mCursor.getString(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.DESCRIPTION)));
  mMessageBuilder.setTimestamp(mCursor.getLong(mCursor.getColumnIndex(MapItemsContract.PointsOfInterest.Table.CATEGORY)));
  String mFileName=mCursor.getString(mCursor.getColumnIndex(MapItemsContract.Locations.Table.PHONE_NUMBER));
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName.replace(""String_Node_Str"",""String_Node_Str"");
  mFileName=mFileName + ""String_Node_Str"" + TimeUtils.getTodayAsString()+ ""String_Node_Str"";
  mCursor.close();
  try {
    FileOutputStream mOutput=new FileOutputStream(mOutputPath + mFileName,true);
    mMessageBuilder.build().writeDelimitedTo(mOutput);
    mOutput.close();
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
}",0.9965500246426812
178346,"@Override public L2Character create(String name,AccountID accountID,ActorSex sex,CharacterClass characterClass,CharacterHairStyle hairStyle,CharacterHairColor hairColor,CharacterFace face) throws CharacterInvalidNameException, CharacterInvalidAppearanceException, CharacterNameAlreadyExistsException, CharacteCreationNotAllowedException, CharacterInvalidRaceException, CharacterInvalidSexException, TooManyCharactersException {
  if (!config.isCharacterCreationAllowed())   throw new CharacteCreationNotAllowedException();
  if (characterDao.countByAccount(accountID) < config.getMaxCharactersPerAccount())   throw new TooManyCharactersException();
  log.debug(""String_Node_Str"",new Object[]{name,sex,characterClass,hairStyle,hairColor,face});
  if ((name.length() < 1) || (name.length() > 16)) {
    throw new CharacterInvalidNameException();
  }
  if (sex == null || hairStyle == null || hairColor == null || face == null)   throw new CharacterInvalidAppearanceException();
  log.debug(""String_Node_Str"",name);
  final L2Character existenceCheck=characterDao.selectByName(name);
  if (existenceCheck != null)   throw new CharacterNameAlreadyExistsException();
  final CharacterTemplateID templateId=charTemplateIdProvider.resolveID(characterClass.id);
  final CharacterTemplate template=templateId.getTemplate();
  if (!ArrayUtils.contains(config.getAllowedNewCharacterRaces(),template.getRace()))   throw new CharacterInvalidRaceException();
  if (!ArrayUtils.contains(config.getAllowedNewCharacterGenders(),sex))   throw new CharacterInvalidSexException();
  log.debug(""String_Node_Str"",template);
  final CharacterID id=charIdProvider.createID();
  final L2Character character=template.create();
  log.debug(""String_Node_Str"",id,character);
  character.setID(id);
  character.setName(name);
  character.setAccountID(accountID);
  character.setSex(sex);
  character.setPoint(Point3D.fromXYZA(146783,25808,-2008,0));
  character.getAppearance().setHairStyle(hairStyle);
  character.getAppearance().setHairColor(hairColor);
  character.getAppearance().setFace(face);
  if (characterDao.save(character) > 0)   return character;
  return null;
}","@Override public L2Character create(String name,AccountID accountID,ActorSex sex,CharacterClass characterClass,CharacterHairStyle hairStyle,CharacterHairColor hairColor,CharacterFace face) throws CharacterInvalidNameException, CharacterInvalidAppearanceException, CharacterNameAlreadyExistsException, CharacteCreationNotAllowedException, CharacterInvalidRaceException, CharacterInvalidSexException, TooManyCharactersException {
  if (!config.isCharacterCreationAllowed())   throw new CharacteCreationNotAllowedException();
  if (characterDao.countByAccount(accountID) >= config.getMaxCharactersPerAccount())   throw new TooManyCharactersException();
  log.debug(""String_Node_Str"",new Object[]{name,sex,characterClass,hairStyle,hairColor,face});
  if ((name.length() < 1) || (name.length() > 16)) {
    throw new CharacterInvalidNameException();
  }
  if (sex == null || hairStyle == null || hairColor == null || face == null)   throw new CharacterInvalidAppearanceException();
  log.debug(""String_Node_Str"",name);
  final L2Character existenceCheck=characterDao.selectByName(name);
  if (existenceCheck != null)   throw new CharacterNameAlreadyExistsException();
  final CharacterTemplateID templateId=charTemplateIdProvider.resolveID(characterClass.id);
  final CharacterTemplate template=templateId.getTemplate();
  if (!ArrayUtils.contains(config.getAllowedNewCharacterRaces(),template.getRace()))   throw new CharacterInvalidRaceException();
  if (!ArrayUtils.contains(config.getAllowedNewCharacterGenders(),sex))   throw new CharacterInvalidSexException();
  log.debug(""String_Node_Str"",template);
  final CharacterID id=charIdProvider.createID();
  final L2Character character=template.create();
  log.debug(""String_Node_Str"",id,character);
  character.setID(id);
  character.setName(name);
  character.setAccountID(accountID);
  character.setSex(sex);
  character.setPoint(Point3D.fromXYZA(146783,25808,-2008,0));
  character.getAppearance().setHairStyle(hairStyle);
  character.getAppearance().setHairColor(hairColor);
  character.getAppearance().setFace(face);
  if (characterDao.save(character) > 0)   return character;
  return null;
}",0.9993008622698673
178347,"/** 
 * Returns list of suitable Template classes to load/unload
 * @param classes loaded classes
 * @return list of Template classes to load/unload
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Set<Class<? extends Template<?>>> getSuitableClasses(Class<?>[] classes){
  final Set<Class<? extends Template<?>>> suitable=CollectionFactory.newSet();
  for (  Class<?> clazz : classes) {
    if (!ClassUtils.isSubclass(clazz,Template.class))     continue;
    if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers()))     continue;
    if (!Modifier.isPublic(clazz.getModifiers()))     continue;
    if (clazz.isAnnotationPresent(DisabledPlugin.class))     continue;
    suitable.add((Class<? extends Template<?>>)clazz);
  }
  return suitable;
}","/** 
 * Returns list of suitable Template classes to load/unload
 * @param classes loaded classes
 * @return list of Template classes to load/unload
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Set<Class<? extends Template>> getSuitableClasses(Class<?>[] classes){
  final Set<Class<? extends Template>> suitable=CollectionFactory.newSet();
  for (  Class<?> clazz : classes) {
    if (!ClassUtils.isSubclass(clazz,Template.class))     continue;
    if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers()))     continue;
    if (!Modifier.isPublic(clazz.getModifiers()))     continue;
    if (clazz.isAnnotationPresent(DisabledPlugin.class))     continue;
    suitable.add((Class<? extends Template>)clazz);
  }
  return suitable;
}",0.4430616054760423
178348,"@Override public Path resolve(String path){
  log.debug(""String_Node_Str"",path);
  return root.resolve(path);
}","@Override public Path resolve(Path path){
  log.debug(""String_Node_Str"",path);
  return root.resolve(path);
}",0.9636363636363636
178349,"@Override public Path resolveDataFile(String path){
  log.debug(""String_Node_Str"",path);
  return dataRoot.resolve(path);
}","@Override public Path resolveDataFile(Path path){
  log.debug(""String_Node_Str"",path);
  return dataRoot.resolve(path);
}",0.9672131147540984
178350,"@Override public Path resolve(String path){
  log.debug(""String_Node_Str"",path);
  return root.resolve(path);
}","@Override public Path resolve(Path path){
  log.debug(""String_Node_Str"",path);
  return root.resolve(path);
}",0.9636363636363636
178351,"@Override public Path resolveDataFile(String path){
  log.debug(""String_Node_Str"",path);
  return dataRoot.resolve(path);
}","@Override public Path resolveDataFile(Path path){
  log.debug(""String_Node_Str"",path);
  return dataRoot.resolve(path);
}",0.9672131147540984
178352,"@Override protected void doStart() throws ServiceStartException {
  root=new TPath(config.getRoot().toAbsolutePath());
  log.debug(""String_Node_Str"",root);
  dataRoot=root.resolve(config.getDataPath());
  log.debug(""String_Node_Str"",root);
}","@Override protected void doStart() throws ServiceStartException {
  root=new TPath(config.getRoot().normalize());
  log.debug(""String_Node_Str"",root);
  dataRoot=root.resolve(config.getDataPath());
  log.debug(""String_Node_Str"",root);
}",0.9517819706498952
178353,"/** 
 * Resolves an file. If the file cannot be resolved, null will be returned. <p> Please note that even if the file DOES NOT exists a valid object will be returned.
 * @param path the file path as an string
 * @return the resolved file. Will return null if could not resolve.
 */
Path resolve(String path);","/** 
 * Resolves an file. If the file cannot be resolved, null will be returned. <p> Please note that even if the file DOES NOT exists a valid object will be returned.
 * @param path the file path
 * @return the resolved file. Will return null if could not resolve.
 */
Path resolve(Path path);",0.9618573797678276
178354,"/** 
 * Resolves an file inside the data storage file system. If the file cannot be resolved, null will be returned. <p> Please note that, differently from   {@link #resolve(String)}, if the file does not exists, <code>null</code> is returned.
 * @param path the file path as an string
 * @return the resolved file. Will return null if could not resolve.
 */
Path resolveDataFile(String path);","/** 
 * Resolves an file inside the data storage file system. If the file cannot be resolved, null will be returned. <p> Please note that, differently from   {@link #resolve(String)}, if the file does not exists, <code>null</code> is returned.
 * @param path the file path
 * @return the resolved file. Will return null if could not resolve.
 */
Path resolveDataFile(Path path);",0.9701686121919584
178355,"/** 
 * Returns the ServiceDescriptor binded to <code>serviceClass</code>. If no implementation of <code>serviceClass</code>, <code>null</code> is returned.
 * @param serviceClass the service class
 * @return the {@link ServiceDescriptor} for the requested service
 */
@SuppressWarnings(""String_Node_Str"") public <T extends Service>ServiceDescriptor<T> getServiceDescriptor(Class<T> serviceClass){
  return (ServiceDescriptor<T>)descriptors.get(serviceClass);
}","/** 
 * Returns the ServiceDescriptor binded to <code>serviceClass</code>. If no implementation of <code>serviceClass</code>, <code>null</code> is returned.
 * @param < T > the service type
 * @param serviceClass the service class
 * @return the {@link ServiceDescriptor} for the requested service
 */
@SuppressWarnings(""String_Node_Str"") public <T extends Service>ServiceDescriptor<T> getServiceDescriptor(Class<T> serviceClass){
  return (ServiceDescriptor<T>)descriptors.get(serviceClass);
}",0.9654450261780104
178356,"/** 
 * Get the configuration for the given service
 * @param service the service
 * @param serviceInterface the service interface
 * @return the configuration object
 */
<C extends ServiceConfiguration>C getServiceConfiguration(ConfigurableService<?> service,Class<? extends Service> serviceInterface);","/** 
 * Get the configuration for the given service
 * @param < C > the service configuration instance type
 * @param service the service
 * @param serviceInterface the service interface
 * @return the configuration object
 */
<C extends ServiceConfiguration>C getServiceConfiguration(ConfigurableService<?> service,Class<? extends Service> serviceInterface);",0.9154078549848944
178357,"/** 
 * Searches for the <code>expected</code> item to be in the <code>array</code>.
 * @param array the array to search in
 * @param expected the item to be looked in the array
 * @return <code>true</code> if the item exists, <code>false</code>otherwise
 */
public final static <T>boolean contains(T[] array,T expected){
  return Arrays.binarySearch(array,expected) >= 0;
}","/** 
 * Searches for the <code>expected</code> item to be in the <code>array</code>.
 * @param < T > the array component type
 * @param array the array to search in
 * @param expected the item to be looked in the array
 * @return <code>true</code> if the item exists, <code>false</code>otherwise
 */
public final static <T>boolean contains(T[] array,T expected){
  return Arrays.binarySearch(array,expected) >= 0;
}",0.9480354879594424
178358,"/** 
 * Copy an entire array except objects in <code>except</code> array.
 * @param array the source array
 * @param except the objects to not be copied
 * @return the copied array
 */
@SafeVarargs @SuppressWarnings(""String_Node_Str"") public final static <T>T[] copyArrayExcept(T[] array,T... except){
  final List<T> values=CollectionFactory.newList();
  for (  final T item : array) {
    if (Arrays.binarySearch(except,item,new Comparator<T>(){
      @Override public int compare(      Object o1,      Object o2){
        return (o1 == o2 ? 1 : 0);
      }
    }
) >= 0) {
      values.add(item);
    }
  }
  return (T[])Arrays.copyOf(values.toArray(),values.size(),array.getClass());
}","/** 
 * Copy an entire array except objects in <code>except</code> array.
 * @param < T > the array component type
 * @param array the source array
 * @param except the objects to not be copied
 * @return the copied array
 */
@SafeVarargs @SuppressWarnings(""String_Node_Str"") public final static <T>T[] copyArrayExcept(T[] array,T... except){
  final List<T> values=CollectionFactory.newList();
  for (  final T item : array) {
    if (Arrays.binarySearch(except,item,new Comparator<T>(){
      @Override public int compare(      Object o1,      Object o2){
        return (o1 == o2 ? 1 : 0);
      }
    }
) >= 0) {
      values.add(item);
    }
  }
  return (T[])Arrays.copyOf(values.toArray(),values.size(),array.getClass());
}",0.971106412966878
178359,"/** 
 * Recursively searches for an annotation <h1>Search order</h1> <p> <ol> <li><code>cls</code> class</li> <li><code>cls</code> implementing interfaces</code></li> <li><code>cls</code> super class</code></li> </ol> If after all those steps, no annotation is found, <code>null</code> is returned.
 * @param annotationClass the annotation class
 * @param cls the class to start searching
 * @return the annotation, if found.
 */
public static <T extends Annotation>T getAnnotation(Class<T> annotationClass,Class<?> cls){
  T annotation=cls.getAnnotation(annotationClass);
  if (annotation == null) {
    for (    final Class<?> interfaceCls : cls.getInterfaces()) {
      annotation=getAnnotation(annotationClass,interfaceCls);
      if (annotation != null)       break;
    }
  }
  if (annotation == null && cls.getSuperclass() != null && cls.getSuperclass() != Object.class)   annotation=getAnnotation(annotationClass,cls.getSuperclass());
  return annotation;
}","/** 
 * Recursively searches for an annotation <h1>Search order</h1> <p> <ol> <li><code>cls</code> class</li> <li><code>cls</code> implementing interfaces</code></li> <li><code>cls</code> super class</code></li> </ol> If after all those steps, no annotation is found, <code>null</code> is returned.
 * @param < T > the annotation type
 * @param annotationClass the annotation class
 * @param cls the class to start searching
 * @return the annotation, if found.
 */
public static <T extends Annotation>T getAnnotation(Class<T> annotationClass,Class<?> cls){
  T annotation=cls.getAnnotation(annotationClass);
  if (annotation == null) {
    for (    final Class<?> interfaceCls : cls.getInterfaces()) {
      annotation=getAnnotation(annotationClass,interfaceCls);
      if (annotation != null)       break;
    }
  }
  if (annotation == null && cls.getSuperclass() != null && cls.getSuperclass() != Object.class)   annotation=getAnnotation(annotationClass,cls.getSuperclass());
  return annotation;
}",0.9816887080366226
178360,"@Override public int transaction(TransactionExecutor executor){
  final ODatabaseDocumentTx database=ODatabaseDocumentPool.global().acquire(config.getUrl(),config.getUsername(),config.getPassword());
  transaction.set(database);
  try {
    database.begin(OTransaction.TXTYPE.OPTIMISTIC);
    int returnValue=executor.perform();
    database.commit();
    return returnValue;
  }
 catch (  DatabaseException e) {
    database.rollback();
    throw e;
  }
catch (  Exception e) {
    database.rollback();
    throw new DatabaseException(e);
  }
 finally {
    transaction.set(null);
    database.close();
  }
}","@Override public int transaction(TransactionExecutor executor){
  final ODatabaseDocumentTx database=ODatabaseDocumentPool.global().acquire(config.getUrl(),config.getUsername(),config.getPassword());
  database.declareIntent(new OIntentMassiveInsert());
  transaction.set(database);
  try {
    database.begin(OTransaction.TXTYPE.OPTIMISTIC);
    int returnValue=executor.perform();
    database.commit();
    return returnValue;
  }
 catch (  DatabaseException e) {
    database.rollback();
    throw e;
  }
catch (  Exception e) {
    database.rollback();
    throw new DatabaseException(e);
  }
 finally {
    transaction.set(null);
    database.declareIntent(null);
    database.close();
  }
}",0.9326186830015314
178361,"@Override public void process(final Lineage2Client conn){
  try {
    final L2Character character=characterService.create(name,sex,characterClass,hairStyle,hairColor,face);
    if (character != null)     conn.write(SM_CHAR_CREATE_OK.INSTANCE);
 else     conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_CREATION_FAILED));
  }
 catch (  CharacterInvalidNameException e) {
    conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_16_ENG_CHARS));
  }
catch (  CharacterInvalidAppearanceException e) {
    conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_CREATION_FAILED));
  }
catch (  CharacterNameAlreadyExistsException e) {
    conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_NAME_ALREADY_EXISTS));
  }
}","@Override public void process(final Lineage2Client conn){
  try {
    final L2Character character=characterService.create(name,conn.getSession().getAccountID(),sex,characterClass,hairStyle,hairColor,face);
    if (character != null)     conn.write(SM_CHAR_CREATE_OK.INSTANCE);
 else     conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_CREATION_FAILED));
  }
 catch (  CharacterInvalidNameException e) {
    conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_16_ENG_CHARS));
  }
catch (  CharacterInvalidAppearanceException e) {
    conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_CREATION_FAILED));
  }
catch (  CharacterNameAlreadyExistsException e) {
    conn.write(new SM_CHAR_CREATE_FAIL(SM_CHAR_CREATE_FAIL.Reason.REASON_NAME_ALREADY_EXISTS));
  }
}",0.9793103448275862
178362,"@Override public void process(final Lineage2Client conn){
  final List<L2Character> chars=characterDao.selectByAccount(conn.getSession().getAccountID());
  conn.write(SM_CHAR_LIST.fromL2Session(conn.getSession(),chars.toArray(new L2Character[0])));
}","@Override public void process(final Lineage2Client conn){
  final List<L2Character> chars=characterDao.selectByAccount(conn.getSession().getAccountID());
  conn.write(SM_CHAR_LIST.fromL2Session(conn.getSession(),chars.toArray(new L2Character[chars.size()])));
}",0.974559686888454
178363,"@Override protected L2Character createInstance(){
  return new L2Character(id);
}","@Override protected L2Character createInstance(){
  final L2Character character=new L2Character(id);
  character.setCharacterClass(getCharacterClass());
  character.setRace(getRace());
  return character;
}",0.494773519163763
178364,"@Override public List<CharacterID> selectIDs(){
  return database.query(new SelectListQuery<CharacterID,Integer,CharacterID,QCharacter>(QCharacter.character,mapper.getIDMapper(QCharacter.character)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QCharacter e){
      return record;
    }
  }
);
}","@Override public List<CharacterID> selectIDs(){
  return database.query(new SelectListQuery<CharacterID,Integer,CharacterID,QCharacter>(QCharacter.character,mapper.getIDMapper(QCharacter.character)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QCharacter e){
      return null;
    }
  }
);
}",0.9850299401197604
178365,"@Override public List<FriendID> selectIDs(){
  return database.query(new SelectListQuery<FriendID,FriendID,FriendID,QCharacterFriend>(QCharacterFriend.characterFriend,mapper.getIDMapper(QCharacterFriend.characterFriend)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QCharacterFriend e){
      return record;
    }
  }
);
}","@Override public List<FriendID> selectIDs(){
  return database.query(new SelectListQuery<FriendID,FriendID,FriendID,QCharacterFriend>(QCharacterFriend.characterFriend,mapper.getIDMapper(QCharacterFriend.characterFriend)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QCharacterFriend e){
      return null;
    }
  }
);
}",0.9861878453038674
178366,"@Override public List<CharacterShortcutID> selectIDs(){
  return database.query(new SelectListQuery<CharacterShortcutID,Integer,CharacterShortcutID,QCharacterShortcut>(QCharacterShortcut.characterShortcut,mapper.getIDMapper(QCharacterShortcut.characterShortcut)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QCharacterShortcut e){
      return record;
    }
  }
);
}","@Override public List<CharacterShortcutID> selectIDs(){
  return database.query(new SelectListQuery<CharacterShortcutID,Integer,CharacterShortcutID,QCharacterShortcut>(QCharacterShortcut.characterShortcut,mapper.getIDMapper(QCharacterShortcut.characterShortcut)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QCharacterShortcut e){
      return null;
    }
  }
);
}",0.9876847290640394
178367,"@Override public Collection<ChatMessageID> selectIDs(){
  return database.query(new SelectListQuery<ChatMessageID,Integer,ChatMessageID,QLogChat>(QLogChat.logChat,mapper.getIDMapper(QLogChat.logChat)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QLogChat e){
      return record;
    }
  }
);
}","@Override public Collection<ChatMessageID> selectIDs(){
  return database.query(new SelectListQuery<ChatMessageID,Integer,ChatMessageID,QLogChat>(QLogChat.logChat,mapper.getIDMapper(QLogChat.logChat)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QLogChat e){
      return null;
    }
  }
);
}",0.9850299401197604
178368,"@Override public Collection<ClanID> selectIDs(){
  return database.query(new SelectListQuery<ClanID,Integer,ClanID,QClan>(QClan.clan,mapper.getIDMapper(QClan.clan)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QClan e){
      return record;
    }
  }
);
}","@Override public Collection<ClanID> selectIDs(){
  return database.query(new SelectListQuery<ClanID,Integer,ClanID,QClan>(QClan.clan,mapper.getIDMapper(QClan.clan)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QClan e){
      return null;
    }
  }
);
}",0.9830508474576272
178369,"@Override public Collection<ItemID> selectIDs(){
  return database.query(new SelectListQuery<ItemID,Integer,ItemID,QItem>(QItem.item,mapper.getIDMapper(QItem.item)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QItem e){
      return record;
    }
  }
);
}","@Override public Collection<ItemID> selectIDs(){
  return database.query(new SelectListQuery<ItemID,Integer,ItemID,QItem>(QItem.item,mapper.getIDMapper(QItem.item)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QItem e){
      return null;
    }
  }
);
}",0.9830508474576272
178370,"@Override public Collection<NPCID> selectIDs(){
  return database.query(new SelectListQuery<NPCID,Integer,NPCID,QNPC>(QNPC.npc,mapper.getIDMapper(QNPC.npc)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QNPC e){
      return record;
    }
  }
);
}","@Override public Collection<NPCID> selectIDs(){
  return database.query(new SelectListQuery<NPCID,Integer,NPCID,QNPC>(QNPC.npc,mapper.getIDMapper(QNPC.npc)){
    @Override protected OQueryContextNative query(    OQueryContextNative record,    QNPC e){
      return null;
    }
  }
);
}",0.9825174825174824
178371,"/** 
 * @param name The name of the new character
 * @param sex The sex of the new character
 * @param characterClass The class of the new character
 * @param hairStyle The new character hair style
 * @param hairColor The new character hair color
 * @param face The new character face
 * @return the newly created {@link L2Character} object
 * @throws CharacterInvalidNameException if the character name contains invalid characters, too long or not long enough
 * @throws CharacterInvalidAppearanceException if the appearance sent by the client is not valid
 * @throws CharacterNameAlreadyExistsException the character name is already being used
 */
L2Character create(String name,ActorSex sex,CharacterClass characterClass,CharacterHairStyle hairStyle,CharacterHairColor hairColor,CharacterFace face) throws CharacterInvalidNameException, CharacterInvalidAppearanceException, CharacterNameAlreadyExistsException ;","/** 
 * @param name The name of the new character
 * @param accountID the account ID to be used
 * @param sex The sex of the new character
 * @param characterClass The class of the new character
 * @param hairStyle The new character hair style
 * @param hairColor The new character hair color
 * @param face The new character face
 * @return the newly created {@link L2Character} object
 * @throws CharacterInvalidNameException if the character name contains invalid characters, too long or not long enough
 * @throws CharacterInvalidAppearanceException if the appearance sent by the client is not valid
 * @throws CharacterNameAlreadyExistsException the character name is already being used
 */
L2Character create(String name,AccountID accountID,ActorSex sex,CharacterClass characterClass,CharacterHairStyle hairStyle,CharacterHairColor hairColor,CharacterFace face) throws CharacterInvalidNameException, CharacterInvalidAppearanceException, CharacterNameAlreadyExistsException ;",0.9651531151003168
178372,"@Override public L2Character create(String name,ActorSex sex,CharacterClass characterClass,CharacterHairStyle hairStyle,CharacterHairColor hairColor,CharacterFace face) throws CharacterInvalidNameException, CharacterInvalidAppearanceException, CharacterNameAlreadyExistsException {
  log.debug(""String_Node_Str"",new Object[]{name,sex,characterClass,hairStyle,hairColor,face});
  if ((name.length() < 1) || (name.length() > 16)) {
    throw new CharacterInvalidNameException();
  }
  if (sex == null || hairStyle == null || hairColor == null || face == null)   throw new CharacterInvalidAppearanceException();
  log.debug(""String_Node_Str"",name);
  final L2Character existenceCheck=characterDao.selectByName(name);
  if (existenceCheck != null)   throw new CharacterNameAlreadyExistsException();
  final CharacterTemplateID templateId=charTemplateIdProvider.resolveID(characterClass.id);
  final CharacterTemplate template=templateId.getTemplate();
  log.debug(""String_Node_Str"",template);
  final CharacterID id=charIdProvider.createID();
  final L2Character character=template.create();
  log.debug(""String_Node_Str"",id,character);
  character.setID(id);
  character.setName(name);
  character.setSex(sex);
  character.getAppearance().setHairStyle(hairStyle);
  character.getAppearance().setHairColor(hairColor);
  character.getAppearance().setFace(face);
  if (characterDao.save(character) > 0)   return character;
  return null;
}","@Override public L2Character create(String name,AccountID accountID,ActorSex sex,CharacterClass characterClass,CharacterHairStyle hairStyle,CharacterHairColor hairColor,CharacterFace face) throws CharacterInvalidNameException, CharacterInvalidAppearanceException, CharacterNameAlreadyExistsException {
  log.debug(""String_Node_Str"",new Object[]{name,sex,characterClass,hairStyle,hairColor,face});
  if ((name.length() < 1) || (name.length() > 16)) {
    throw new CharacterInvalidNameException();
  }
  if (sex == null || hairStyle == null || hairColor == null || face == null)   throw new CharacterInvalidAppearanceException();
  log.debug(""String_Node_Str"",name);
  final L2Character existenceCheck=characterDao.selectByName(name);
  if (existenceCheck != null)   throw new CharacterNameAlreadyExistsException();
  final CharacterTemplateID templateId=charTemplateIdProvider.resolveID(characterClass.id);
  final CharacterTemplate template=templateId.getTemplate();
  log.debug(""String_Node_Str"",template);
  final CharacterID id=charIdProvider.createID();
  final L2Character character=template.create();
  log.debug(""String_Node_Str"",id,character);
  character.setID(id);
  character.setName(name);
  character.setAccountID(accountID);
  character.setSex(sex);
  character.setPoint(Point3D.fromXYZA(146783,25808,-2008,0));
  character.getAppearance().setHairStyle(hairStyle);
  character.getAppearance().setHairColor(hairColor);
  character.getAppearance().setFace(face);
  if (characterDao.save(character) > 0)   return character;
  return null;
}",0.9581239530988276
178373,"/** 
 * Load the pre-existing ids
 * @param ids an collection of ids
 */
private void load(Collection<? extends ObjectID<?>> ids){
  Preconditions.checkNotNull(ids,""String_Node_Str"");
  log.debug(""String_Node_Str"",ids.size());
  for (  final ObjectID<?> id : ids) {
    log.debug(""String_Node_Str"",id);
    allocator.allocate(id.getID());
    add(id);
  }
}","/** 
 * Load the pre-existing ids
 * @param ids an collection of ids
 */
private void load(Collection<? extends ObjectID<?>> ids){
  Preconditions.checkNotNull(ids,""String_Node_Str"");
  log.info(""String_Node_Str"",ids.size());
  for (  final ObjectID<?> id : ids) {
    log.debug(""String_Node_Str"",id);
    allocator.allocate(id.getID());
    add(id);
  }
}",0.9873772791023844
178374,"@Override protected void doStart() throws ServiceStartException {
  pool=createThreadPool(""String_Node_Str"",20);
  threadPools=CollectionFactory.newMap();
  pool.async(50,TimeUnit.MILLISECONDS,50,new Runnable(){
    @Override public void run(){
      for (      final Entry<String,ThreadPoolImpl> entry : threadPools.entrySet()) {
        entry.getValue().notifyListeners();
      }
    }
  }
);
}","@Override protected void doStart() throws ServiceStartException {
  threadPools=CollectionFactory.newMap();
  pool=createThreadPool(""String_Node_Str"",20);
  pool.async(50,TimeUnit.MILLISECONDS,50,new Runnable(){
    @Override public void run(){
      for (      final Entry<String,ThreadPoolImpl> entry : threadPools.entrySet()) {
        entry.getValue().notifyListeners();
      }
    }
  }
);
}",0.8942065491183879
178375,"/** 
 * Sends a   {@link SystemMessage} to this client
 * @param message the  {@link SystemMessage}
 * @param args the arguments of the message, they will be automatically detected and inserted. See  {@link SM_SYSTEM_MESSAGE} for moreabout supported formats.
 * @return the {@link ChannelFuture} that will be notified once the packethas been written.
 * @see SM_SYSTEM_MESSAGE
 */
public ChannelFuture sendSystemMessage(SystemMessage message,Object... args){
  final SM_SYSTEM_MESSAGE packet=new SM_SYSTEM_MESSAGE(message);
  for (  final Object obj : args) {
    if (obj instanceof String)     packet.addString((String)obj);
 else     if (obj instanceof ItemTemplate)     packet.addItem((ItemTemplate)obj);
 else     if (obj instanceof Item)     packet.addItem((Item)obj);
 else     if (obj instanceof Number)     packet.addNumber((Integer)obj);
  }
  return write(packet);
}","/** 
 * Sends a   {@link SystemMessage} to this client
 * @param message the  {@link SystemMessage}
 * @param args the arguments of the message, they will be automatically detected and inserted. See  {@link SM_SYSTEM_MESSAGE} for moreabout supported formats.
 * @return the {@link ChannelFuture} that will be notified once the packethas been written.
 * @see SM_SYSTEM_MESSAGE
 */
public ChannelFuture sendSystemMessage(SystemMessage message,Object... args){
  final SM_SYSTEM_MESSAGE packet=new SM_SYSTEM_MESSAGE(message);
  for (  final Object obj : args) {
    if (obj instanceof String)     packet.addString((String)obj);
 else     if (obj instanceof ItemTemplate)     packet.addItem((ItemTemplate)obj);
 else     if (obj instanceof Item)     packet.addItem((Item)obj);
 else     if (obj instanceof Number)     packet.addNumber((Integer)obj);
 else     if (obj instanceof Skill)     packet.addSkill((Skill)obj);
 else     if (obj instanceof Fort)     packet.addFort((Fort)obj);
  }
  return write(packet);
}",0.9284578696343402
178376,"/** 
 * Creates a new instance
 * @param worldService the world service
 * @param networkService the network service
 * @param channel the channel
 */
public Lineage2Client(WorldService worldService,NetworkService networkService,Channel channel){
  this.worldService=worldService;
  this.networkService=networkService;
  this.channel=channel;
}","/** 
 * Creates a new instance
 * @param channel the channel
 */
public Lineage2Client(Channel channel){
  this.channel=channel;
}",0.5485232067510548
178377,"@Override public ChannelPipeline getPipeline() throws Exception {
  final ChannelPipeline pipeline=pipeline();
  pipeline.addLast(""String_Node_Str"",new Lineage2FrameEncoder());
  pipeline.addLast(""String_Node_Str"",new Lineage2FrameDecoder());
  pipeline.addLast(Lineage2Encrypter.HANDLER_NAME,new Lineage2Encrypter());
  pipeline.addLast(Lineage2Decrypter.HANDLER_NAME,new Lineage2Decrypter());
  pipeline.addLast(Lineage2PacketWriter.HANDLER_NAME,new Lineage2PacketWriter());
  pipeline.addLast(Lineage2PacketReader.HANDLER_NAME,new Lineage2PacketReader(injector));
  pipeline.addLast(""String_Node_Str"",new LoggingHandler(InternalLogLevel.DEBUG,true));
  final Lineage2TimeoutHandler timeoutHandler=new Lineage2TimeoutHandler();
  pipeline.addLast(""String_Node_Str"",new Lineage2PacketHandler(nettyNetworkService,worldService,timeoutHandler));
  return pipeline;
}","@Override public ChannelPipeline getPipeline() throws Exception {
  final ChannelPipeline pipeline=pipeline();
  pipeline.addLast(""String_Node_Str"",new Lineage2FrameEncoder());
  pipeline.addLast(""String_Node_Str"",new Lineage2FrameDecoder());
  pipeline.addLast(Lineage2Encrypter.HANDLER_NAME,new Lineage2Encrypter());
  pipeline.addLast(Lineage2Decrypter.HANDLER_NAME,new Lineage2Decrypter());
  pipeline.addLast(Lineage2PacketWriter.HANDLER_NAME,new Lineage2PacketWriter());
  pipeline.addLast(Lineage2PacketReader.HANDLER_NAME,new Lineage2PacketReader(injector));
  pipeline.addLast(""String_Node_Str"",new LoggingHandler(InternalLogLevel.DEBUG,true));
  final Lineage2TimeoutHandler timeoutHandler=new Lineage2TimeoutHandler();
  pipeline.addLast(""String_Node_Str"",new Lineage2PacketHandler(nettyNetworkService,timeoutHandler));
  return pipeline;
}",0.9924198250728864
178378,"/** 
 * Creates a new instance of this pipeline
 * @param injector the  {@link Guice} {@link Injector}
 * @param networkService the network service
 * @param worldService the world service
 */
@Inject public Lineage2PipelineFactory(Injector injector,NetworkService networkService,WorldService worldService){
  this.injector=injector;
  this.nettyNetworkService=(NettyNetworkService)networkService;
  this.worldService=worldService;
}","/** 
 * Creates a new instance of this pipeline
 * @param injector the  {@link Guice} {@link Injector}
 * @param networkService the network service
 */
@Inject public Lineage2PipelineFactory(Injector injector,NetworkService networkService){
  this.injector=injector;
  this.nettyNetworkService=(NettyNetworkService)networkService;
}",0.8679738562091504
178379,"/** 
 * Creates a new instance of the packet handler
 * @param nettyNetworkService the netty network service
 * @param worldService the world service
 * @param timeoutHandler the timeout handler
 */
public Lineage2PacketHandler(NettyNetworkService nettyNetworkService,WorldService worldService,Lineage2TimeoutHandler timeoutHandler){
  this.nettyNetworkService=nettyNetworkService;
  this.worldService=worldService;
  this.timeoutHandler=timeoutHandler;
}","/** 
 * Creates a new instance of the packet handler
 * @param nettyNetworkService the netty network service
 * @param timeoutHandler the timeout handler
 */
public Lineage2PacketHandler(NettyNetworkService nettyNetworkService,Lineage2TimeoutHandler timeoutHandler){
  this.nettyNetworkService=nettyNetworkService;
  this.timeoutHandler=timeoutHandler;
}",0.8059332509270705
178380,"@Override public void channelOpen(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  connection=new Lineage2Client(worldService,nettyNetworkService,e.getChannel());
  connection.getPacketWriter().setConnection(connection);
  timeoutHandler.setConnection(connection);
  nettyNetworkService.register(connection);
  super.channelOpen(ctx,e);
}","@Override public void channelOpen(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  connection=new Lineage2Client(e.getChannel());
  connection.getPacketWriter().setConnection(connection);
  timeoutHandler.setConnection(connection);
  nettyNetworkService.register(connection);
  super.channelOpen(ctx,e);
}",0.5991189427312775
178381,"@Override public void write(Lineage2Client conn,ChannelBuffer buffer){
  buffer.writeShort((showWindow ? 0x01 : 0x00));
  buffer.writeShort(inventory.getItemCount());
  int slot=0;
  for (  Item item : inventory) {
    if (item.getLocation() == ItemLocation.WAREHOUSE || item.getLocation() == ItemLocation.GROUND || item.getLocation() == null) {
      continue;
    }
    buffer.writeInt(item.getID().getID());
    buffer.writeInt(item.getTemplateID().getID());
    buffer.writeInt(slot);
    buffer.writeLong(item.getCount());
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    buffer.writeShort((item.getLocation() == ItemLocation.PAPERDOLL ? 0x01 : 0x00));
    buffer.writeInt((item.getPaperdoll() != null ? item.getPaperdoll().id : 0));
    buffer.writeShort(127);
    buffer.writeShort(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(-9999);
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    for (byte i=0; i < 6; i++) {
      buffer.writeShort(0x00);
    }
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    slot++;
  }
  buffer.writeShort(0x00);
}","@Override public void write(Lineage2Client conn,ChannelBuffer buffer){
  buffer.writeShort((showWindow ? 0x01 : 0x00));
  buffer.writeShort(inventory.getItemCount());
  int slot=0;
  for (  Item item : inventory) {
    buffer.writeInt(item.getID().getID());
    buffer.writeInt(item.getTemplateID().getID());
    buffer.writeInt(slot);
    buffer.writeLong(item.getCount());
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    buffer.writeShort((item.getLocation() == ItemLocation.PAPERDOLL ? 0x01 : 0x00));
    buffer.writeInt((item.getPaperdoll() != null ? item.getPaperdoll().id : 0));
    buffer.writeShort(127);
    buffer.writeShort(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(-9999);
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    for (byte i=0; i < 6; i++) {
      buffer.writeShort(0x00);
    }
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    buffer.writeShort(0x00);
    slot++;
  }
  buffer.writeShort(0x00);
}",0.928737773637634
178382,"@Override protected void doStart() throws ServiceStartException {
  items=itemDao.loadDroppedItems();
  try {
    for (    final Item item : items) {
      spawnService.spawn(item,null);
    }
  }
 catch (  SpawnPointNotFoundServiceException e) {
    throw new ServiceStartException(e);
  }
catch (  AlreadySpawnedServiceException e) {
    throw new ServiceStartException(e);
  }
}","@Override protected void doStart() throws ServiceStartException {
  items=itemDao.selectDroppedItems();
  try {
    for (    final Item item : items) {
      spawnService.spawn(item,null);
    }
  }
 catch (  SpawnPointNotFoundServiceException e) {
    throw new ServiceStartException(e);
  }
catch (  AlreadySpawnedServiceException e) {
    throw new ServiceStartException(e);
  }
}",0.986910994764398
178383,"/** 
 * @param configService the configuration service
 * @param injector the  {@link Guice} {@link Injector}
 * @param worldService the world service
 */
@Inject public NettyNetworkService(ConfigurationService configService,Injector injector,WorldService worldService){
  this.config=configService.get(NetworkConfiguration.class);
  this.injector=injector;
  this.worldService=worldService;
  InternalLoggerFactory.setDefaultFactory(new Slf4JLoggerFactory());
}","/** 
 * @param configService the configuration service
 * @param injector the  {@link Guice} {@link Injector}
 */
@Inject public NettyNetworkService(ConfigurationService configService,Injector injector){
  this.config=configService.get(NetworkConfiguration.class);
  this.injector=injector;
  InternalLoggerFactory.setDefaultFactory(new Slf4JLoggerFactory());
}",0.8772782503037667
178384,"@Override protected void doStart(){
  server=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));
  server.setPipelineFactory(new Lineage2PipelineFactory(injector,this,worldService));
  channel=(ServerChannel)server.bind(config.getListenAddress());
}","@Override protected void doStart(){
  server=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));
  server.setPipelineFactory(new Lineage2PipelineFactory(injector,this));
  channel=(ServerChannel)server.bind(config.getListenAddress());
}",0.9791332263242376
178385,"@Override protected void configure(){
  install(new ServiceModule());
  install(new IDFactoryModule());
  install(new DAOModuleMySQL5());
}","@Override protected void configure(){
  install(new ServiceModule());
  install(new IDFactoryModule());
  install(new MySQL5DAOModule());
}",0.9568345323741008
178386,"public Lineage2CryptographyKey copy(){
  return new Lineage2CryptographyKey(key);
}","public Lineage2CryptographyKey copy(){
  return new Lineage2CryptographyKey(Arrays.copyOf(key,key.length));
}",0.8645833333333334
178387,"@Override protected Object encode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (!(msg instanceof ChannelBuffer))   return msg;
  if (!enabled)   return msg;
  final ChannelBuffer buffer=(ChannelBuffer)msg;
  final int offset=buffer.readerIndex() + 2;
  final int size=buffer.readableBytes() - 2;
  int temp=0;
synchronized (key) {
    for (int i=0; i < size; i++) {
      int temp2=buffer.getByte(offset + i) & 0xFF;
      buffer.setByte(offset + i,(byte)(temp2 ^ key.get(i) ^ temp));
      temp=temp2;
    }
    key.update(size);
  }
  return msg;
}","@Override protected Object encode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (!(msg instanceof ChannelBuffer))   return msg;
  if (!enabled)   return msg;
  final ChannelBuffer buffer=(ChannelBuffer)msg;
  final int offset=buffer.readerIndex() + 2;
  final int size=buffer.readableBytes() - 2;
  int temp=0, temp2=0;
synchronized (key) {
    for (int i=0; i < size; i++) {
      temp2=buffer.getByte(offset + i) & 0xFF;
      temp=temp2 ^ key.get(i) ^ temp;
      buffer.setByte(offset + i,(byte)temp);
    }
    key.update(size);
  }
  return msg;
}",0.839041095890411
178388,"@Override protected Object encode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (!(msg instanceof ServerPacket))   return msg;
  final ChannelBuffer buffer=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,10);
  final ServerPacket packet=(ServerPacket)msg;
  buffer.writeShort(0x0000);
  buffer.writeByte(packet.getOpcode());
  packet.write(null,buffer);
  log.debug(""String_Node_Str"",ChannelBuffers.hexDump(buffer));
  return buffer;
}","@Override protected Object encode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (!(msg instanceof ServerPacket))   return msg;
  final ChannelBuffer buffer=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,10);
  final ServerPacket packet=(ServerPacket)msg;
  buffer.writeShort(0);
  buffer.writeByte(packet.getOpcode());
  packet.write(connection,buffer);
  log.debug(""String_Node_Str"",ChannelBuffers.hexDump(buffer));
  return buffer;
}",0.97989417989418
178389,"@Override public void process(final Lineage2Connection conn){
  final AccountID accountId=accountIdFactory.createID(loginName);
  conn.setSession(new Lineage2Session(accountId,playKey1,playKey2,loginKey1,loginKey2));
  final List<L2Character> chars=characterDao.selectByAccount(accountId);
  conn.setCharacterID(chars.get(0).getID());
  conn.write(new CharacterEnterWorldPacket(chars.get(0),playKey1));
}","@Override public void process(final Lineage2Connection conn){
  final AccountID accountId=accountIdFactory.createID(loginName);
  conn.setSession(new Lineage2Session(accountId,playKey1,playKey2,loginKey1,loginKey2));
  final List<L2Character> chars=characterDao.selectByAccount(accountId);
  conn.write(CharacterSelectionListPacket.fromL2Session(conn.getSession(),chars.get(0)));
}",0.8229299363057325
178390,"@Override public void write(Lineage2Connection conn,ChannelBuffer buffer){
  buffer.writeInt(characters.length);
  buffer.writeInt(0x07);
  buffer.writeByte(0x00);
  for (  final L2Character character : characters) {
    BufferUtils.writeString(buffer,character.getName());
    buffer.writeInt(character.getID().getID());
    BufferUtils.writeString(buffer,loginName);
    buffer.writeInt(sessionId);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x01);
    buffer.writeInt(character.getRace().id);
    buffer.writeInt(character.getCharacterClass().id);
    buffer.writeInt(0x01);
    buffer.writeInt(-71338);
    buffer.writeInt(258271);
    buffer.writeInt(-3104);
    buffer.writeDouble(20);
    buffer.writeDouble(20);
    buffer.writeInt(0x00);
    buffer.writeLong(ActorExperience.LEVEL_1.experience);
    buffer.writeInt(ActorExperience.LEVEL_1.level);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    for (int n=0; n < 7; n++) {
      buffer.writeInt(0x00);
    }
    writePaperdollItemID(buffer,character,HAIR1);
    writePaperdollItemID(buffer,character,RIGHT_EAR);
    writePaperdollItemID(buffer,character,LEFT_EAR);
    writePaperdollItemID(buffer,character,NECK);
    writePaperdollItemID(buffer,character,RIGHT_FINGER);
    writePaperdollItemID(buffer,character,LEFT_FINGER);
    writePaperdollItemID(buffer,character,HEAD);
    writePaperdollItemID(buffer,character,RIGHT_HAND);
    writePaperdollItemID(buffer,character,LEFT_HAND);
    writePaperdollItemID(buffer,character,GLOVES);
    writePaperdollItemID(buffer,character,CHEST);
    writePaperdollItemID(buffer,character,LEGS);
    writePaperdollItemID(buffer,character,FEET);
    writePaperdollItemID(buffer,character,CLOAK);
    writePaperdollItemID(buffer,character,RIGHT_HAND);
    writePaperdollItemID(buffer,character,HAIR1);
    writePaperdollItemID(buffer,character,HAIR2);
    writePaperdollItemID(buffer,character,RIGHT_BRACELET);
    writePaperdollItemID(buffer,character,LEFT_BRACELET);
    writePaperdollItemID(buffer,character,DECORATION_1);
    writePaperdollItemID(buffer,character,DECORATION_2);
    writePaperdollItemID(buffer,character,DECORATION_3);
    writePaperdollItemID(buffer,character,DECORATION_4);
    writePaperdollItemID(buffer,character,DECORATION_5);
    writePaperdollItemID(buffer,character,BELT);
    buffer.writeInt(0x02);
    buffer.writeInt(0x03);
    buffer.writeInt(0x00);
    buffer.writeDouble(30);
    buffer.writeDouble(30);
    buffer.writeInt(0x0);
    buffer.writeInt(character.getCharacterClass().id);
    buffer.writeInt(0x01);
    buffer.writeByte(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    if (conn.supports(FREYA)) {
      buffer.writeInt(16024);
      buffer.writeInt(0);
      buffer.writeInt(0);
      buffer.writeInt(0);
      buffer.writeDouble(0);
      buffer.writeDouble(0);
    }
  }
}","@Override public void write(Lineage2Connection conn,ChannelBuffer buffer){
  buffer.writeInt(characters.length);
  buffer.writeInt(7);
  buffer.writeByte(0x00);
  for (  final L2Character character : characters) {
    BufferUtils.writeString(buffer,character.getName());
    buffer.writeInt(character.getID().getID());
    BufferUtils.writeString(buffer,loginName);
    buffer.writeInt(sessionId);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(character.getSex().option);
    buffer.writeInt(character.getRace().id);
    buffer.writeInt(character.getCharacterClass().id);
    buffer.writeInt(1);
    buffer.writeInt(-71338);
    buffer.writeInt(258271);
    buffer.writeInt(-3104);
    buffer.writeDouble(20);
    buffer.writeDouble(20);
    buffer.writeInt(320);
    buffer.writeLong(4640);
    buffer.writeInt(5);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    for (int n=0; n < 7; n++) {
      buffer.writeInt(0x00);
    }
    writePaperdollItemID(buffer,character,HAIR1);
    writePaperdollItemID(buffer,character,RIGHT_EAR);
    writePaperdollItemID(buffer,character,LEFT_EAR);
    writePaperdollItemID(buffer,character,NECK);
    writePaperdollItemID(buffer,character,RIGHT_FINGER);
    writePaperdollItemID(buffer,character,LEFT_FINGER);
    writePaperdollItemID(buffer,character,HEAD);
    writePaperdollItemID(buffer,character,RIGHT_HAND);
    writePaperdollItemID(buffer,character,LEFT_HAND);
    writePaperdollItemID(buffer,character,GLOVES);
    writePaperdollItemID(buffer,character,CHEST);
    writePaperdollItemID(buffer,character,LEGS);
    writePaperdollItemID(buffer,character,FEET);
    writePaperdollItemID(buffer,character,CLOAK);
    writePaperdollItemID(buffer,character,RIGHT_HAND);
    writePaperdollItemID(buffer,character,HAIR1);
    writePaperdollItemID(buffer,character,HAIR2);
    writePaperdollItemID(buffer,character,RIGHT_BRACELET);
    writePaperdollItemID(buffer,character,LEFT_BRACELET);
    writePaperdollItemID(buffer,character,DECORATION_1);
    writePaperdollItemID(buffer,character,DECORATION_2);
    writePaperdollItemID(buffer,character,DECORATION_3);
    writePaperdollItemID(buffer,character,DECORATION_4);
    writePaperdollItemID(buffer,character,DECORATION_5);
    writePaperdollItemID(buffer,character,BELT);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    buffer.writeDouble(30);
    buffer.writeDouble(30);
    buffer.writeInt(0x0);
    buffer.writeInt(character.getCharacterClass().id);
    buffer.writeInt(1);
    buffer.writeByte(0x00);
    buffer.writeInt(0x00);
    buffer.writeInt(0x00);
    if (conn.supports(FREYA)) {
      buffer.writeInt(16024);
      buffer.writeInt(0);
      buffer.writeInt(0);
      buffer.writeInt(0);
      buffer.writeDouble(0);
      buffer.writeDouble(0);
    }
  }
}",0.972400624891512
178391,"/** 
 * Writes an unicode string to the buffer
 * @param buffer the buffer
 * @param str the string
 */
public static final void writeString(ChannelBuffer buffer,String str){
  if (str != null && str.length() > 0) {
    final int len=str.length();
    for (int i=0; i < len; i++) {
      buffer.writeChar(str.charAt(i));
    }
  }
  buffer.writeChar('\000');
}","/** 
 * Writes an unicode string to the buffer
 * @param buffer the buffer
 * @param str the string
 */
public static final void writeString(ChannelBuffer buffer,String str){
  if (str != null && str.length() > 0) {
    final int len=str.length();
    for (int i=0; i < len; i++) {
      buffer.writeChar(str.charAt(i));
    }
  }
  buffer.writeShort(0);
}",0.9776536312849162
178392,"@Before public void tearUp() throws ServiceStartException {
  Injector injector=Guice.createInjector(new ServiceModule(),new DAOModuleMySQL5(),new IDFactoryModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(WorldService.class).to(WorldServiceImpl.class).in(Scopes.SINGLETON);
      bind(WorldEventDispatcher.class).to(WorldEventDispatcherImpl.class).in(Scopes.SINGLETON);
    }
  }
);
  cidFactory=injector.getInstance(CharacterIDFactory.class);
  iidFactory=injector.getInstance(ItemIDFactory.class);
  world=injector.getInstance(WorldService.class);
  dispatcher=injector.getInstance(WorldEventDispatcher.class);
  Assert.assertNotNull(world);
  Assert.assertNotNull(dispatcher);
  world.start();
}","@Before public void tearUp() throws ServiceStartException {
  Injector injector=Guice.createInjector(new ServiceModule(),new MySQL5DAOModule(),new IDFactoryModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(WorldService.class).to(WorldServiceImpl.class).in(Scopes.SINGLETON);
      bind(WorldEventDispatcher.class).to(WorldEventDispatcherImpl.class).in(Scopes.SINGLETON);
    }
  }
);
  cidFactory=injector.getInstance(CharacterIDFactory.class);
  iidFactory=injector.getInstance(ItemIDFactory.class);
  world=injector.getInstance(WorldService.class);
  dispatcher=injector.getInstance(WorldEventDispatcher.class);
  Assert.assertNotNull(world);
  Assert.assertNotNull(dispatcher);
  world.start();
}",0.9918144611186904
178393,"@Override public void run(){
  if (timeout > 0) {
synchronized (timeoutLock) {
      try {
        timeoutLock.wait(timeout);
        exit(""String_Node_Str"",2);
      }
 catch (      InterruptedException e) {
        Thread.interrupted();
      }
    }
  }
 else {
  }
}","@Override public void run(){
  if (timeout > 0) {
synchronized (timeoutLock) {
      if (!closed) {
        try {
          timeoutLock.wait(timeout);
          exit(""String_Node_Str"",2);
        }
 catch (        InterruptedException e) {
          Thread.interrupted();
        }
      }
    }
  }
}",0.8581436077057794
178394,"private String consumeOptions(Scanner scanner){
  String buffer=null;
  do {
    buffer=scanner.next();
    if (buffer.startsWith(""String_Node_Str"")) {
      String timeout=buffer.substring(""String_Node_Str"".length());
      this.timeout=Integer.parseInt(timeout);
      buffer=scanner.next();
    }
 else     if (buffer.startsWith(""String_Node_Str"")) {
      String evtMask=buffer.substring(""String_Node_Str"".length());
      eventMask=EnumSet.noneOf(Event.class);
      for (      char c : evtMask.toCharArray()) {
        Event evt=Event.resolveFromChar(c);
        if (evt != null) {
          eventMask.add(evt);
        }
      }
    }
  }
 while (buffer.startsWith(""String_Node_Str""));
  return buffer;
}","private String consumeOptions(Scanner scanner){
  String buffer=null;
  do {
    buffer=scanner.next();
    if (buffer.startsWith(""String_Node_Str"")) {
      String timeoutValue=buffer.substring(""String_Node_Str"".length());
      this.timeout=Integer.parseInt(timeoutValue);
      buffer=scanner.next();
    }
 else     if (buffer.startsWith(""String_Node_Str"")) {
      String evtMask=buffer.substring(""String_Node_Str"".length());
      eventMask=EnumSet.noneOf(Event.class);
      for (      char c : evtMask.toCharArray()) {
        Event evt=Event.resolveFromChar(c);
        if (evt != null) {
          eventMask.add(evt);
        }
      }
    }
  }
 while (buffer.startsWith(""String_Node_Str""));
  return buffer;
}",0.9930167597765364
178395,"@Override public WaitForCommand command(String command) throws Exception {
  queueService.addCallback(this);
  Scanner scanner=new Scanner(command);
  check(scanner.next(),""String_Node_Str"");
  check(scanner.next(),""String_Node_Str"");
  check(command,scanner.hasNext());
  String buffer=consumeOptions(scanner);
  String repo=buffer;
  check(command,scanner.hasNext());
  String sha1=scanner.next();
  checkSha1(sha1);
  sha1s.add(sha1);
  while (scanner.hasNext()) {
    sha1=scanner.next();
    checkSha1(sha1);
    sha1s.add(sha1);
  }
  this.repo=createRepository(repo);
  return this;
}","@Override public WaitForCommand command(String command) throws Exception {
  queueService.addCallback(this);
  Scanner scanner=new Scanner(command);
  check(scanner.next(),""String_Node_Str"");
  check(scanner.next(),""String_Node_Str"");
  check(command,scanner.hasNext());
  String buffer=consumeOptions(scanner);
  String repoValue=buffer;
  check(command,scanner.hasNext());
  String sha1=scanner.next();
  checkSha1(sha1);
  sha1s.add(sha1);
  while (scanner.hasNext()) {
    sha1=scanner.next();
    checkSha1(sha1);
    sha1s.add(sha1);
  }
  this.repo=createRepository(repoValue);
  return this;
}",0.9916107382550337
178396,"private void exit(String msg,int exitCode){
  if (closed)   return;
  try {
    out.write(msg.getBytes());
    out.write('\n');
    out.flush();
    sha1s.clear();
    callback.onExit(exitCode);
  }
 catch (  IOException e) {
    callback.onExit(1);
  }
}","private void exit(String msg,int exitCode){
  if (closed) {
    return;
  }
  try {
    out.write(msg.getBytes());
    out.write('\n');
    out.flush();
    sha1s.clear();
    callback.onExit(exitCode);
  }
 catch (  IOException e) {
    callback.onExit(1);
  }
}",0.9498069498069498
178397,"public void close(){
synchronized (timeoutLock) {
    closed=true;
    timeoutLock.notify();
  }
}","public void close(){
synchronized (timeoutLock) {
    closed=true;
    timeoutLock.notifyAll();
  }
}",0.984924623115578
178398,"public BuildTask(Context ctx,RepositoryGuard guard,UserIdentity user,TimeService timeService,Repository remote,Pair<Repository,String> target,String command){
  this.gitUtils=ctx.getGitUtils();
  this.guard=guard;
  this.user=user;
  this.timeService=timeService;
  this.remote=remote;
  this.target=target;
  this.repository=target.getT();
  this.command=command;
}","public BuildTask(Context ctx,RepositoryGuard guard,UserIdentity user,TimeService timeService,Repository remote,Pair<Repository,String> target,String commandTreeSha1){
  this.gitUtils=ctx.getGitUtils();
  this.guard=guard;
  this.user=user;
  this.timeService=timeService;
  this.remote=remote;
  this.target=target;
  this.repository=target.getT();
  this.commandTreeSHA1=commandTreeSha1;
}",0.9470899470899472
178399,"String findCommand() throws AmbiguousObjectException, IOException {
  return gitUtils.show(this.repository,this.command + ""String_Node_Str"" + ""String_Node_Str"");
}","String findCommand() throws IOException {
  return gitUtils.show(this.repository,this.commandTreeSHA1 + ""String_Node_Str"" + ""String_Node_Str"");
}",0.8896103896103896
178400,"@Override public Date getSubmitDate(){
  return this.submitDate;
}","@Override public Date getSubmitDate(){
  if (submitDate == null) {
    return null;
  }
  return new Date(this.submitDate.getTime());
}",0.6567164179104478
178401,"private int build(ByteArrayOutputStream stdout,PrintStream printOut) throws AmbiguousObjectException, IOException, ExecuteException {
  String command=findCommand();
  printOut.println(String.format(""String_Node_Str"",command));
  CommandLine cmdLine=CommandLine.parse(command);
  DefaultExecutor executable=new DefaultExecutor();
  executable.setWorkingDirectory(repository.getDirectory().getParentFile());
  executable.setStreamHandler(new PumpStreamHandler(stdout));
  int exitCode=executable.execute(cmdLine);
  return exitCode;
}","private int build(ByteArrayOutputStream stdout,PrintStream printOut) throws IOException {
  String command=findCommand();
  printOut.println(String.format(""String_Node_Str"",command));
  CommandLine cmdLine=CommandLine.parse(command);
  DefaultExecutor executable=new DefaultExecutor();
  executable.setWorkingDirectory(repository.getDirectory().getParentFile());
  executable.setStreamHandler(new PumpStreamHandler(stdout));
  return executable.execute(cmdLine);
}",0.9167502507522568
178402,"void endOfTreatment(BuildResult buildResult,int exitCode,boolean success){
  buildResult.setEndDate(new Date());
  buildResult.setSuccess(success);
  buildResult.setExitCode(exitCode);
  try {
    String message=""String_Node_Str"";
    if (success) {
      message=String.format(""String_Node_Str"",exitCode);
    }
 else {
      message=String.format(""String_Node_Str"",exitCode);
    }
    new DefaultExecutor().execute(CommandLine.parse(message));
  }
 catch (  ExecuteException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","void endOfTreatment(BuildResult buildResult,int exitCode,boolean success){
  buildResult.setEndDate(new Date());
  buildResult.setSuccess(success);
  buildResult.setExitCode(exitCode);
  try {
    String message=""String_Node_Str"";
    if (success) {
      message=String.format(""String_Node_Str"");
    }
 else {
      message=String.format(""String_Node_Str"",exitCode);
    }
    new DefaultExecutor().execute(CommandLine.parse(message));
  }
 catch (  ExecuteException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9920141969831412
178403,"@Override public void setSubmitDate(Date d){
  this.submitDate=d;
}","@Override public void setSubmitDate(Date d){
  if (d == null) {
    this.submitDate=null;
  }
 else {
    this.submitDate=new Date(d.getTime());
  }
}",0.6082949308755761
178404,"public ThxEntity(World world){
  super(world);
  preventEntitySpawning=true;
  prevTime=System.nanoTime();
  minecraft=ModLoader.getMinecraftInstance();
  log(""String_Node_Str"" + world);
  sidedHelper=createEntityHelper();
}","public ThxEntity(World world){
  super(world);
  preventEntitySpawning=true;
  prevTime=System.nanoTime();
  minecraft=ModLoader.getMinecraftInstance();
  log(""String_Node_Str"" + world.isRemote);
  sidedHelper=createEntityHelper();
}",0.9803063457330417
178405,"@Override ThxEntityHelper createEntityHelper(){
  if (worldObj.isRemote) {
    ThxModelHelicopterBase model=ThxConfig.getBoolProperty(""String_Node_Str"") ? new ThxModelHelicopterAlt() : new ThxModelHelicopter();
    return new ThxEntityHelperClientHelicopter(this,model);
  }
  return new ThxEntityHelperServer(this);
}","@Override ThxEntityHelper createEntityHelper(){
  if (worldObj.isRemote) {
    ThxModelHelicopterBase model=ThxConfig.getBoolProperty(""String_Node_Str"") ? new ThxModelHelicopterAlt() : new ThxModelHelicopter();
    return new ThxEntityHelperClientHelicopter(this,model);
  }
  return new ThxEntityHelperServerHelicopter(this);
}",0.9845201238390092
178406,"@Override void pilotExit(){
  log(""String_Node_Str"" + (worldObj.isRemote ? ""String_Node_Str"" : ""String_Node_Str""));
  if (riddenByEntity == null)   return;
  Entity pilot=getPilot();
  riddenByEntity.mountEntity(this);
  riddenByEntity=null;
  if (pilot != null) {
    if (pilot.ridingEntity != null)     pilot.ridingEntity.riddenByEntity=null;
    ;
    pilot.ridingEntity=null;
  }
  sidedHelper.pilotExit(pilot);
  targetEntity=null;
}","@Override void pilotExit(){
  log(""String_Node_Str"" + (worldObj.isRemote ? ""String_Node_Str"" : ""String_Node_Str""));
  if (riddenByEntity == null) {
    log(""String_Node_Str"");
    return;
  }
  Entity pilot=getPilot();
  riddenByEntity.mountEntity(this);
  riddenByEntity=null;
  if (pilot != null) {
    if (pilot.ridingEntity != null)     pilot.ridingEntity.riddenByEntity=null;
    ;
    pilot.ridingEntity=null;
  }
  sidedHelper.pilotExit(pilot);
  targetEntity=null;
}",0.9407894736842104
178407,"@Override void pilotExit(Entity pilot){
  model.visible=true;
  model.rotorSpeed=0f;
  entity.rotationYawSpeed=0f;
  entity.rotationPitchSpeed=0f;
  entity.rotationRollSpeed=0f;
}","@Override void pilotExit(Entity pilot){
  entity.log(""String_Node_Str"");
  model.visible=true;
  model.rotorSpeed=0f;
  entity.rotationYawSpeed=0f;
  entity.rotationPitchSpeed=0f;
  entity.rotationRollSpeed=0f;
}",0.9156010230179028
178408,"void pilotExit(Entity pilot){
  System.out.println(""String_Node_Str"");
  double exitDist=1.9;
  ((EntityPlayerMP)pilot).playerNetServerHandler.setPlayerLocation(entity.posX + entity.fwd.z * exitDist,entity.posY + pilot.yOffset,entity.posZ - entity.fwd.x * exitDist,entity.rotationYaw,entity.rotationPitch);
}","void pilotExit(Entity pilot){
  entity.log(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  double exitDist=1.9;
  ((EntityPlayerMP)pilot).playerNetServerHandler.setPlayerLocation(entity.posX + entity.fwd.z * exitDist,entity.posY + pilot.yOffset,entity.posZ - entity.fwd.x * exitDist,entity.rotationYaw,entity.rotationPitch);
}",0.8936825885978429
178409,"private void applyUpdatePacketFromServer(){
  if (latestUpdatePacket == null)   return;
  Packet230ModLoader packet=latestUpdatePacket;
  latestUpdatePacket=null;
  plog(""String_Node_Str"" + packet);
  int packetPilotId=packet.dataInt[1];
  int playerId=minecraft.thePlayer.entityId;
  if (packetPilotId > 0 && (riddenByEntity == null || riddenByEntity.entityId != packetPilotId)) {
    Entity pilot=((WorldClient)worldObj).getEntityByID(packetPilotId);
    if (pilot != null && !pilot.isDead) {
      log(""String_Node_Str"" + pilot + ""String_Node_Str"");
      pilot.mountEntity(this);
    }
  }
 else   if (packetPilotId == 0 && riddenByEntity != null) {
    log(""String_Node_Str"" + riddenByEntity.entityId + ""String_Node_Str"");
    riddenByEntity.mountEntity(this);
  }
  int ownerId=packet.dataInt[4];
  if (ownerId > 0)   owner=(ThxEntityBase)((WorldClient)worldObj).getEntityByID(ownerId);
  log(""String_Node_Str"" + owner);
  serverPosX=MathHelper.floor_float(packet.dataFloat[0] * 32f);
  serverPosY=MathHelper.floor_float(packet.dataFloat[1] * 32f);
  serverPosZ=MathHelper.floor_float(packet.dataFloat[2] * 32f);
  setPositionAndRotation(packet.dataFloat[0],packet.dataFloat[1],packet.dataFloat[2],packet.dataFloat[3],packet.dataFloat[4]);
  rotationRoll=packet.dataFloat[5] % 360f;
  motionX=packet.dataFloat[6];
  motionY=packet.dataFloat[7];
  motionZ=packet.dataFloat[8];
  damage=packet.dataFloat[9];
  throttle=packet.dataFloat[10];
}","private void applyUpdatePacketFromServer(){
  if (latestUpdatePacket == null)   return;
  Packet230ModLoader packet=latestUpdatePacket;
  latestUpdatePacket=null;
  plog(""String_Node_Str"" + packet);
  int packetPilotId=packet.dataInt[1];
  int playerId=minecraft.thePlayer.entityId;
  if (packetPilotId > 0 && (riddenByEntity == null || riddenByEntity.entityId != packetPilotId)) {
    Entity pilot=((WorldClient)worldObj).getEntityByID(packetPilotId);
    if (pilot != null && !pilot.isDead) {
      log(""String_Node_Str"" + pilot + ""String_Node_Str"");
      pilot.mountEntity(this);
    }
  }
 else   if (packetPilotId == 0 && riddenByEntity != null) {
    log(""String_Node_Str"" + riddenByEntity.entityId + ""String_Node_Str"");
    riddenByEntity.mountEntity(this);
  }
  int ownerId=packet.dataInt[4];
  if (ownerId > 0)   owner=((WorldClient)worldObj).getEntityByID(ownerId);
  log(""String_Node_Str"" + owner);
  serverPosX=MathHelper.floor_float(packet.dataFloat[0] * 32f);
  serverPosY=MathHelper.floor_float(packet.dataFloat[1] * 32f);
  serverPosZ=MathHelper.floor_float(packet.dataFloat[2] * 32f);
  setPositionAndRotation(packet.dataFloat[0],packet.dataFloat[1],packet.dataFloat[2],packet.dataFloat[3],packet.dataFloat[4]);
  rotationRoll=packet.dataFloat[5] % 360f;
  motionX=packet.dataFloat[6];
  motionY=packet.dataFloat[7];
  motionZ=packet.dataFloat[8];
  damage=packet.dataFloat[9];
  throttle=packet.dataFloat[10];
}",0.994786235662148
178410,"@Override public void HandlePacket(Packet230ModLoader packet){
  int entityId=packet.dataInt[0];
  Entity entity=((WorldClient)ModLoader.getMinecraftInstance().theWorld).getEntityByID(entityId);
  ((ThxEntity)entity).handleUpdatePacketFromServer(packet);
}","@Override public void HandlePacket(Packet230ModLoader packet){
  int entityId=packet.dataInt[0];
  if (entityId < 1)   log(""String_Node_Str"" + packet.packetType + ""String_Node_Str""+ packet);
 else {
    Entity entity=((WorldClient)ModLoader.getMinecraftInstance().theWorld).getEntityByID(entityId);
    if (entity != null)     ((ThxEntity)entity).handleUpdatePacketFromServer(packet);
  }
}",0.7925696594427245
178411,"private void pilotExit(){
  Entity pilot=getPilot();
  model.visible=true;
  if (ENABLE_DRONE_MODE) {
    pilot.mountEntity(this);
    ((ThxModelHelicopter)model).rotorSpeed=0;
    pilot.setPosition(dronePilotPosX,dronePilotPosY,dronePilotPosZ);
    return;
  }
  ModLoader.getMinecraftInstance().gameSettings.thirdPersonView=prevThirdPersonView;
  pilot.mountEntity(this);
  ((ThxModelHelicopter)model).rotorSpeed=0;
  double exitDist=1.9;
  pilot.setPosition(posX + fwd.z * exitDist,posY + pilot.yOffset,posZ - fwd.x * exitDist);
}","private void pilotExit(){
  Entity pilot=getPilot();
  model.visible=true;
  if (ENABLE_DRONE_MODE) {
    pilot.mountEntity(this);
    ((ThxModelHelicopter)model).rotorSpeed=0;
    pilot.setPosition(dronePilotPosX,dronePilotPosY,dronePilotPosZ);
    return;
  }
  toggleLookBack=false;
  if (lookBack) {
    lookBack=false;
    pilot.prevRotationYaw=pilot.rotationYaw=pilot.rotationYaw - 180;
  }
  ModLoader.getMinecraftInstance().gameSettings.thirdPersonView=prevThirdPersonView;
  pilot.mountEntity(this);
  ((ThxModelHelicopter)model).rotorSpeed=0;
  double exitDist=1.9;
  pilot.setPosition(posX + fwd.z * exitDist,posY + pilot.yOffset,posZ - fwd.x * exitDist);
}",0.88759367194005
178412,"@Override public void updateRiderPosition(){
  EntityPlayer pilot=getPilot();
  if (pilot == null)   return;
  prevRotationYaw=rotationYaw;
  prevRotationPitch=rotationPitch;
  if (ENABLE_DRONE_MODE) {
    pilot.setPosition(dronePilotPosX,dronePilotPosY,dronePilotPosZ);
    return;
  }
  pilot.setPosition(posX,posY + pilot.getYOffset() + getMountedYOffset(),posZ);
  if (toggleLookBack) {
    toggleLookBack=false;
    pilot.prevRotationYaw=pilot.rotationYaw=pilot.rotationYaw - 180;
    if (ENABLE_LOOK_PITCH)     pilot.prevRotationPitch=pilot.rotationPitch=-pilot.rotationPitch;
  }
}","@Override public void updateRiderPosition(){
  EntityPlayer pilot=getPilot();
  if (pilot == null)   return;
  prevRotationYaw=rotationYaw;
  prevRotationPitch=rotationPitch;
  if (ENABLE_DRONE_MODE) {
    pilot.setPosition(dronePilotPosX,dronePilotPosY,dronePilotPosZ);
    return;
  }
  pilot.setPosition(posX,posY + pilot.getYOffset() + getMountedYOffset(),posZ);
  if (toggleLookBack) {
    toggleLookBack=false;
    pilot.prevRotationYaw=pilot.rotationYaw=pilot.rotationYaw - 180;
  }
}",0.9101019462465244
178413,"@Override public void onUpdate(){
  super.onUpdate();
  if (_damage > 0)   _damage--;
  timeSinceHit-=deltaTime;
  missileDelay-=deltaTime;
  rocketDelay-=deltaTime;
  rocketReload-=deltaTime;
  Minecraft minecraft=ModLoader.getMinecraftInstance();
  EntityPlayer pilot=getPilot();
  if (pilot != null) {
    if (pilot.isDead)     riddenByEntity=null;
    if (onGround) {
      if (Math.abs(rotationPitch) > .1f)       rotationPitch*=.70f;
      if (Math.abs(rotationRoll) > .1f)       rotationRoll*=.70f;
      motionX*=FRICTION;
      motionY=0.0;
      motionZ*=FRICTION;
    }
 else     if (inWater) {
      if (Math.abs(rotationPitch) > .1f)       rotationPitch*=.70f;
      if (Math.abs(rotationRoll) > .1f)       rotationRoll*=.70f;
      motionX*=.7;
      motionY*=.7;
      motionZ*=.7;
      motionY+=0.02;
    }
 else {
      if (ENABLE_LOOK_DOWN_TRANS) {
        if (pilot.rotationPitch > 60f) {
          ((ThxModelHelicopter)model).bottomVisible=false;
        }
 else {
          ((ThxModelHelicopter)model).bottomVisible=true;
        }
      }
    }
    toggleLookBackDelay-=deltaTime;
    if (Keyboard.isKeyDown(KEY_LOOK_BACK) && toggleLookBackDelay < 0f && !ENABLE_DRONE_MODE) {
      lookBack=!lookBack;
      toggleLookBack=true;
      toggleLookBackDelay=.5f;
    }
    hudDelay-=deltaTime;
    if (Keyboard.isKeyDown(KEY_HUD_MODE) && hudDelay < 0f && !ENABLE_DRONE_MODE) {
      hudDelay=.5f;
      if (model.visible) {
        model.visible=false;
        minecraft.ingameGUI.addChatMessage(""String_Node_Str"" + (int)posX + ""String_Node_Str""+ (int)posZ+ ""String_Node_Str""+ (int)posY);
        prevThirdPersonView=minecraft.gameSettings.thirdPersonView;
        minecraft.gameSettings.thirdPersonView=false;
      }
 else {
        model.visible=true;
        minecraft.gameSettings.thirdPersonView=prevThirdPersonView;
      }
    }
    if (minecraft.gameSettings.thirdPersonView)     model.visible=true;
    exitDelay-=deltaTime;
    if (Keyboard.isKeyDown(KEY_EXIT) && exitDelay < 0f) {
      exitDelay=1f;
      pilotExit();
    }
    if (Keyboard.isKeyDown(KEY_FIRE_ROCKET) && rocketDelay < 0f && rocketReload < 0f) {
      rocketCount++;
      rocketDelay=ROCKET_DELAY;
      float leftRight=(rocketCount % 2 == 0) ? 1.0f : -1.0f;
      float offsetX=side.x * leftRight + fwd.x * 2f;
      float offsetY=side.y * leftRight + fwd.y * 2f;
      float offsetZ=side.z * leftRight + fwd.z * 2f;
      float yaw=rotationYaw;
      float pitch=rotationPitch;
      if (ENABLE_PILOT_AIM && !ENABLE_DRONE_MODE) {
        yaw=pilot.rotationYaw;
        pitch=pilot.rotationPitch;
      }
      ThxEntityRocket newRocket=new ThxEntityRocket(this,posX + offsetX,posY + offsetY,posZ + offsetZ,motionX * MOMENTUM,motionY * MOMENTUM,motionZ * MOMENTUM,yaw,pitch);
      if (ENABLE_HEAVY_WEAPONS)       newRocket.enableHeavyWeapons=true;
      worldObj.entityJoinedWorld(newRocket);
      if (rocketCount == FULL_ROCKET_COUNT) {
        rocketReload=ROCKET_RELOAD;
        rocketCount=0;
      }
    }
    if (Keyboard.isKeyDown(KEY_FIRE_MISSILE) && missileDelay < 0f) {
      missileDelay=MISSILE_DELAY;
      float offX=fwd.x * 2f;
      float offY=fwd.y * 2f;
      float offZ=fwd.z * 2f;
      float yaw=rotationYaw;
      float pitch=rotationPitch;
      if (ENABLE_PILOT_AIM && !ENABLE_DRONE_MODE) {
        yaw=pilot.rotationYaw;
        pitch=pilot.rotationPitch;
      }
      ThxEntityMissile newMissile=new ThxEntityMissile(worldObj,posX + offX,posY + offY,posZ + offZ,motionX * MOMENTUM,motionY * MOMENTUM,motionZ * MOMENTUM,yaw,pitch);
      if (ENABLE_HEAVY_WEAPONS)       newMissile.enableHeavyWeapons=true;
      worldObj.entityJoinedWorld(newMissile);
    }
    if (ENABLE_LOOK_YAW && !ENABLE_DRONE_MODE) {
      float deltaYawDeg=rotationYaw - pilot.rotationYaw;
      if (lookBack)       deltaYawDeg+=180f;
      while (deltaYawDeg > 180f)       deltaYawDeg-=360f;
      while (deltaYawDeg < -180f)       deltaYawDeg+=360f;
      rotationYawSpeed=deltaYawDeg * TURN_SPEED_DEG;
      if (rotationYawSpeed > 90)       rotationYawSpeed=90;
      if (rotationYawSpeed < -90)       rotationYawSpeed=-90;
      rotationYaw+=rotationYawSpeed * deltaTime;
    }
 else {
      if (Keyboard.isKeyDown(KEY_ROTATE_LEFT)) {
        rotationYaw-=TURN_SPEED_DEG * deltaTime;
      }
      if (Keyboard.isKeyDown(KEY_ROTATE_RIGHT)) {
        rotationYaw+=TURN_SPEED_DEG * deltaTime;
      }
    }
    rotationYaw%=360f;
    if (ENABLE_LOOK_PITCH && !ENABLE_DRONE_MODE) {
      if (rotationPitch > MAX_PITCH) {
        rotationPitch=MAX_PITCH;
        rotationPitchSpeed=0f;
      }
 else {
        rotationPitchSpeed=pilot.rotationPitch - 20 - rotationPitch;
        rotationPitch+=rotationPitchSpeed * deltaTime;
      }
      if (rotationPitch > MAX_PITCH) {
        rotationPitch=MAX_PITCH;
        rotationPitchSpeed=0f;
      }
    }
 else {
      if (autoLevelDelay > 0) {
        autoLevelDelay-=deltaTime;
        if (Math.abs(rotationPitch) > 1f)         rotationPitch*=.8f;
 else         rotationPitch=0f;
        if (Math.abs(rotationRoll) > 1f)         rotationRoll*=.8f;
 else         rotationRoll=0f;
      }
 else       if (Keyboard.isKeyDown(KEY_AUTO_LEVEL)) {
        autoLevelDelay=1f;
      }
 else       if (Keyboard.isKeyDown(KEY_FORWARD)) {
        if (rotationPitch > MAX_PITCH) {
          rotationPitch=MAX_PITCH;
          rotationPitchSpeed=0f;
        }
 else {
          rotationPitchSpeed=PITCH_SPEED_DEG;
          rotationPitch+=rotationPitchSpeed * deltaTime;
        }
        if (rotationPitch > MAX_PITCH) {
          rotationPitch=MAX_PITCH;
          rotationPitchSpeed=0f;
        }
      }
 else       if (Keyboard.isKeyDown(KEY_BACK)) {
        if (rotationPitch < -MAX_PITCH) {
          rotationPitch=-MAX_PITCH;
          rotationPitchSpeed=0f;
        }
 else {
          rotationPitchSpeed=-PITCH_SPEED_DEG;
          rotationPitch+=rotationPitchSpeed * deltaTime;
        }
        if (rotationPitch < -MAX_PITCH) {
          rotationPitch=-MAX_PITCH;
          rotationPitchSpeed=0f;
        }
      }
 else {
        if (ENABLE_AUTO_LEVEL) {
          rotationPitchSpeed=-rotationPitch * .5f;
          rotationPitch+=rotationPitchSpeed * deltaTime;
        }
      }
    }
    if (Keyboard.isKeyDown(KEY_LEFT)) {
      if (rotationRoll > MAX_ROLL) {
        rotationRoll=MAX_ROLL;
        rotationRollSpeed=0f;
      }
 else {
        rotationRollSpeed=ROLL_SPEED_DEG;
        rotationRoll+=rotationRollSpeed * deltaTime;
      }
      if (rotationRoll > MAX_ROLL) {
        rotationRoll=MAX_ROLL;
        rotationRollSpeed=0f;
      }
    }
 else     if (Keyboard.isKeyDown(KEY_RIGHT)) {
      if (rotationRoll < -MAX_ROLL) {
        rotationRoll=-MAX_ROLL;
        rotationRollSpeed=0f;
      }
 else {
        rotationRollSpeed=-ROLL_SPEED_DEG;
        rotationRoll+=rotationRollSpeed * deltaTime;
      }
      if (rotationRoll < -MAX_ROLL) {
        rotationRoll=-MAX_ROLL;
        rotationRollSpeed=0f;
      }
    }
 else {
      rotationRollSpeed=-rotationRoll * .6f;
      rotationRoll+=rotationRollSpeed * deltaTime;
    }
    if (Keyboard.isKeyDown(KEY_ASCEND) || (Keyboard.isKeyDown(KEY_FORWARD) && ENABLE_LOOK_PITCH && !ENABLE_DRONE_MODE)) {
      if (throttle < THROTTLE_MAX)       throttle+=THROTTLE_INC;
      if (throttle > THROTTLE_MAX)       throttle=THROTTLE_MAX;
    }
 else     if (Keyboard.isKeyDown(KEY_DESCEND) || (Keyboard.isKeyDown(KEY_BACK) && ENABLE_LOOK_PITCH && !ENABLE_DRONE_MODE)) {
      if (throttle > THROTTLE_MIN)       throttle-=THROTTLE_INC;
      if (throttle < THROTTLE_MIN)       throttle=THROTTLE_MIN;
    }
 else {
      if (ENABLE_AUTO_THROTTLE_ZERO)       throttle*=.6;
    }
    ((ThxModelHelicopter)model).rotorSpeed=getThrottlePower() / 2f + .7f;
    ascendDescendLift: {
      thrust.y=MathHelper.cos(pitchRad) * MathHelper.cos(rollRad);
    }
    forwardBack: {
      float accel=1f - MathHelper.cos(pitchRad);
      if (pitchRad > 0f)       accel*=-1f;
      thrust.x=-fwd.x * accel;
      thrust.z=-fwd.z * accel;
    }
    strafeLeftRight: {
      float strafe=1f - MathHelper.cos(rollRad);
      if (rollRad > 0f)       strafe*=-1f;
      thrust.x-=fwd.z * strafe;
      thrust.z+=fwd.x * strafe;
    }
    velocity.set((float)motionX,(float)motionY,(float)motionZ);
    velocity.scale(FRICTION);
    thrust.normalise().scale(MAX_ACCEL * (1f + throttle) * dT);
    Vector3f.add(velocity,thrust,velocity);
    velocity.y-=GRAVITY * dT;
    if (velocity.lengthSquared() > MAX_VELOCITY * MAX_VELOCITY) {
      velocity.scale(MAX_VELOCITY / velocity.length());
    }
    motionX=velocity.x;
    motionY=velocity.y;
    motionZ=velocity.z;
  }
 else {
    model.visible=true;
    ((ThxModelHelicopter)model).rotorSpeed=0;
    ((ThxModelHelicopter)model).bottomVisible=true;
    if (onGround || inWater) {
      if (Math.abs(rotationPitch) > .1f)       rotationPitch*=.70f;
      if (Math.abs(rotationRoll) > .1f)       rotationRoll*=.70f;
      motionY=0.;
      motionX*=.7;
      motionZ*=.7;
      rotationYawSpeed=0f;
    }
 else {
      rotationPitch*=PITCH_RETURN;
      rotationRoll*=ROLL_RETURN;
      motionX*=FRICTION;
      motionY-=GRAVITY * .16f * dT;
      motionZ*=FRICTION;
    }
  }
  moveEntity(motionX,motionY,motionZ);
  if (isCollidedHorizontally || isCollidedVertically) {
    double velSq=motionX * motionX + motionY * motionY + motionZ * motionZ;
    if (velSq > .1) {
      log(""String_Node_Str"" + velSq);
      attackEntityFrom(this,1);
      motionX*=.5;
      motionY*=.5;
      motionZ*=.5;
    }
    isCollidedHorizontally=false;
    isCollidedVertically=false;
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (_damage > 0)   _damage--;
  timeSinceHit-=deltaTime;
  missileDelay-=deltaTime;
  rocketDelay-=deltaTime;
  rocketReload-=deltaTime;
  Minecraft minecraft=ModLoader.getMinecraftInstance();
  EntityPlayer pilot=getPilot();
  if (pilot != null) {
    if (pilot.isDead)     riddenByEntity=null;
    if (onGround) {
      if (Math.abs(rotationPitch) > .1f)       rotationPitch*=.70f;
      if (Math.abs(rotationRoll) > .1f)       rotationRoll*=.70f;
      motionX*=FRICTION;
      motionY=0.0;
      motionZ*=FRICTION;
    }
 else     if (inWater) {
      if (Math.abs(rotationPitch) > .1f)       rotationPitch*=.70f;
      if (Math.abs(rotationRoll) > .1f)       rotationRoll*=.70f;
      motionX*=.7;
      motionY*=.7;
      motionZ*=.7;
      motionY+=0.02;
    }
 else {
      if (ENABLE_LOOK_DOWN_TRANS) {
        if (pilot.rotationPitch > 60f) {
          ((ThxModelHelicopter)model).bottomVisible=false;
        }
 else {
          ((ThxModelHelicopter)model).bottomVisible=true;
        }
      }
    }
    toggleLookBackDelay-=deltaTime;
    if (Keyboard.isKeyDown(KEY_LOOK_BACK) && toggleLookBackDelay < 0f && !ENABLE_DRONE_MODE && !ENABLE_LOOK_PITCH) {
      lookBack=!lookBack;
      toggleLookBack=true;
      toggleLookBackDelay=.5f;
    }
    hudDelay-=deltaTime;
    if (Keyboard.isKeyDown(KEY_HUD_MODE) && hudDelay < 0f && !ENABLE_DRONE_MODE) {
      hudDelay=.5f;
      if (model.visible) {
        model.visible=false;
        minecraft.ingameGUI.addChatMessage(""String_Node_Str"" + (int)posX + ""String_Node_Str""+ (int)posZ+ ""String_Node_Str""+ (int)posY);
        prevThirdPersonView=minecraft.gameSettings.thirdPersonView;
        minecraft.gameSettings.thirdPersonView=false;
      }
 else {
        model.visible=true;
        minecraft.gameSettings.thirdPersonView=prevThirdPersonView;
      }
    }
    if (minecraft.gameSettings.thirdPersonView)     model.visible=true;
    exitDelay-=deltaTime;
    if (Keyboard.isKeyDown(KEY_EXIT) && exitDelay < 0f) {
      exitDelay=1f;
      pilotExit();
    }
    if (Keyboard.isKeyDown(KEY_FIRE_ROCKET) && rocketDelay < 0f && rocketReload < 0f) {
      rocketCount++;
      rocketDelay=ROCKET_DELAY;
      float leftRight=(rocketCount % 2 == 0) ? 1.0f : -1.0f;
      float offsetX=side.x * leftRight + fwd.x * 2f;
      float offsetY=side.y * leftRight + fwd.y * 2f;
      float offsetZ=side.z * leftRight + fwd.z * 2f;
      float yaw=rotationYaw;
      float pitch=rotationPitch;
      if (ENABLE_PILOT_AIM && !ENABLE_DRONE_MODE) {
        yaw=pilot.rotationYaw;
        pitch=pilot.rotationPitch;
      }
      ThxEntityRocket newRocket=new ThxEntityRocket(this,posX + offsetX,posY + offsetY,posZ + offsetZ,motionX * MOMENTUM,motionY * MOMENTUM,motionZ * MOMENTUM,yaw,pitch);
      if (ENABLE_HEAVY_WEAPONS)       newRocket.enableHeavyWeapons=true;
      worldObj.entityJoinedWorld(newRocket);
      if (rocketCount == FULL_ROCKET_COUNT) {
        rocketReload=ROCKET_RELOAD;
        rocketCount=0;
      }
    }
    if (Keyboard.isKeyDown(KEY_FIRE_MISSILE) && missileDelay < 0f) {
      missileDelay=MISSILE_DELAY;
      float offX=fwd.x * 2f;
      float offY=fwd.y * 2f;
      float offZ=fwd.z * 2f;
      float yaw=rotationYaw;
      float pitch=rotationPitch;
      if (ENABLE_PILOT_AIM && !ENABLE_DRONE_MODE) {
        yaw=pilot.rotationYaw;
        pitch=pilot.rotationPitch;
      }
      ThxEntityMissile newMissile=new ThxEntityMissile(worldObj,posX + offX,posY + offY,posZ + offZ,motionX * MOMENTUM,motionY * MOMENTUM,motionZ * MOMENTUM,yaw,pitch);
      if (ENABLE_HEAVY_WEAPONS)       newMissile.enableHeavyWeapons=true;
      worldObj.entityJoinedWorld(newMissile);
    }
    if (ENABLE_LOOK_YAW && !ENABLE_DRONE_MODE) {
      float deltaYawDeg=rotationYaw - pilot.rotationYaw;
      if (lookBack)       deltaYawDeg+=180f;
      while (deltaYawDeg > 180f)       deltaYawDeg-=360f;
      while (deltaYawDeg < -180f)       deltaYawDeg+=360f;
      rotationYawSpeed=deltaYawDeg * TURN_SPEED_DEG;
      if (rotationYawSpeed > 90)       rotationYawSpeed=90;
      if (rotationYawSpeed < -90)       rotationYawSpeed=-90;
      rotationYaw+=rotationYawSpeed * deltaTime;
    }
 else {
      if (Keyboard.isKeyDown(KEY_ROTATE_LEFT)) {
        rotationYaw-=TURN_SPEED_DEG * deltaTime;
      }
      if (Keyboard.isKeyDown(KEY_ROTATE_RIGHT)) {
        rotationYaw+=TURN_SPEED_DEG * deltaTime;
      }
    }
    rotationYaw%=360f;
    if (ENABLE_LOOK_PITCH && !ENABLE_DRONE_MODE) {
      if (rotationPitch > MAX_PITCH) {
        rotationPitch=MAX_PITCH;
        rotationPitchSpeed=0f;
      }
 else       if (rotationPitch < -MAX_PITCH) {
        rotationPitch=-MAX_PITCH;
        rotationPitchSpeed=0f;
      }
 else {
        rotationPitchSpeed=4f * (pilot.rotationPitch - rotationPitch - 20f);
        rotationPitch+=rotationPitchSpeed * deltaTime;
      }
      if (rotationPitch > MAX_PITCH) {
        rotationPitch=MAX_PITCH;
        rotationPitchSpeed=0f;
      }
 else       if (rotationPitch < -MAX_PITCH) {
        rotationPitch=-MAX_PITCH;
        rotationPitchSpeed=0f;
      }
    }
 else {
      if (autoLevelDelay > 0) {
        autoLevelDelay-=deltaTime;
        if (Math.abs(rotationPitch) > 1f)         rotationPitch*=.8f;
 else         rotationPitch=0f;
        if (Math.abs(rotationRoll) > 1f)         rotationRoll*=.8f;
 else         rotationRoll=0f;
      }
 else       if (Keyboard.isKeyDown(KEY_AUTO_LEVEL)) {
        autoLevelDelay=1f;
      }
 else       if (Keyboard.isKeyDown(KEY_FORWARD)) {
        if (rotationPitch > MAX_PITCH) {
          rotationPitch=MAX_PITCH;
          rotationPitchSpeed=0f;
        }
 else {
          rotationPitchSpeed=PITCH_SPEED_DEG;
          rotationPitch+=rotationPitchSpeed * deltaTime;
        }
        if (rotationPitch > MAX_PITCH) {
          rotationPitch=MAX_PITCH;
          rotationPitchSpeed=0f;
        }
      }
 else       if (Keyboard.isKeyDown(KEY_BACK)) {
        if (rotationPitch < -MAX_PITCH) {
          rotationPitch=-MAX_PITCH;
          rotationPitchSpeed=0f;
        }
 else {
          rotationPitchSpeed=-PITCH_SPEED_DEG;
          rotationPitch+=rotationPitchSpeed * deltaTime;
        }
        if (rotationPitch < -MAX_PITCH) {
          rotationPitch=-MAX_PITCH;
          rotationPitchSpeed=0f;
        }
      }
 else {
        if (ENABLE_AUTO_LEVEL) {
          rotationPitchSpeed=-rotationPitch * .5f;
          rotationPitch+=rotationPitchSpeed * deltaTime;
        }
      }
    }
    if (Keyboard.isKeyDown(KEY_LEFT)) {
      if (rotationRoll > MAX_ROLL) {
        rotationRoll=MAX_ROLL;
        rotationRollSpeed=0f;
      }
 else {
        rotationRollSpeed=ROLL_SPEED_DEG;
        rotationRoll+=rotationRollSpeed * deltaTime;
      }
      if (rotationRoll > MAX_ROLL) {
        rotationRoll=MAX_ROLL;
        rotationRollSpeed=0f;
      }
    }
 else     if (Keyboard.isKeyDown(KEY_RIGHT)) {
      if (rotationRoll < -MAX_ROLL) {
        rotationRoll=-MAX_ROLL;
        rotationRollSpeed=0f;
      }
 else {
        rotationRollSpeed=-ROLL_SPEED_DEG;
        rotationRoll+=rotationRollSpeed * deltaTime;
      }
      if (rotationRoll < -MAX_ROLL) {
        rotationRoll=-MAX_ROLL;
        rotationRollSpeed=0f;
      }
    }
 else {
      rotationRollSpeed=-rotationRoll * .6f;
      rotationRoll+=rotationRollSpeed * deltaTime;
    }
    if (Keyboard.isKeyDown(KEY_ASCEND) || (Keyboard.isKeyDown(KEY_FORWARD) && ENABLE_LOOK_PITCH && !ENABLE_DRONE_MODE)) {
      if (throttle < THROTTLE_MAX)       throttle+=THROTTLE_INC;
      if (throttle > THROTTLE_MAX)       throttle=THROTTLE_MAX;
    }
 else     if (Keyboard.isKeyDown(KEY_DESCEND) || (Keyboard.isKeyDown(KEY_BACK) && ENABLE_LOOK_PITCH && !ENABLE_DRONE_MODE)) {
      if (throttle > THROTTLE_MIN)       throttle-=THROTTLE_INC;
      if (throttle < THROTTLE_MIN)       throttle=THROTTLE_MIN;
    }
 else {
      if (ENABLE_AUTO_THROTTLE_ZERO)       throttle*=.6;
    }
    ((ThxModelHelicopter)model).rotorSpeed=getThrottlePower() / 2f + .7f;
    ascendDescendLift: {
      thrust.y=MathHelper.cos(pitchRad) * MathHelper.cos(rollRad);
    }
    forwardBack: {
      float accel=1f - MathHelper.cos(pitchRad);
      if (pitchRad > 0f)       accel*=-1f;
      thrust.x=-fwd.x * accel;
      thrust.z=-fwd.z * accel;
    }
    strafeLeftRight: {
      float strafe=1f - MathHelper.cos(rollRad);
      if (rollRad > 0f)       strafe*=-1f;
      thrust.x-=fwd.z * strafe;
      thrust.z+=fwd.x * strafe;
    }
    velocity.set((float)motionX,(float)motionY,(float)motionZ);
    velocity.scale(FRICTION);
    thrust.normalise().scale(MAX_ACCEL * (1f + throttle) * dT);
    Vector3f.add(velocity,thrust,velocity);
    velocity.y-=GRAVITY * dT;
    if (velocity.lengthSquared() > MAX_VELOCITY * MAX_VELOCITY) {
      velocity.scale(MAX_VELOCITY / velocity.length());
    }
    motionX=velocity.x;
    motionY=velocity.y;
    motionZ=velocity.z;
  }
 else {
    model.visible=true;
    ((ThxModelHelicopter)model).rotorSpeed=0;
    ((ThxModelHelicopter)model).bottomVisible=true;
    if (onGround || inWater) {
      if (Math.abs(rotationPitch) > .1f)       rotationPitch*=.70f;
      if (Math.abs(rotationRoll) > .1f)       rotationRoll*=.70f;
      motionY=0.;
      motionX*=.7;
      motionZ*=.7;
      rotationYawSpeed=0f;
    }
 else {
      rotationPitch*=PITCH_RETURN;
      rotationRoll*=ROLL_RETURN;
      motionX*=FRICTION;
      motionY-=GRAVITY * .16f * dT;
      motionZ*=FRICTION;
    }
  }
  moveEntity(motionX,motionY,motionZ);
  if (isCollidedHorizontally || isCollidedVertically) {
    double velSq=motionX * motionX + motionY * motionY + motionZ * motionZ;
    if (velSq > .1) {
      log(""String_Node_Str"" + velSq);
      attackEntityFrom(this,1);
      motionX*=.5;
      motionY*=.5;
      motionZ*=.5;
    }
    isCollidedHorizontally=false;
    isCollidedVertically=false;
  }
}",0.971375807940905
178414,"@Override public Range execute(Document document){
  Range caret=document.getSelection().getRangeAt(0);
  TreeCaretPosition startSelection=treeOperationFactory.createCaretPosition(getOperation().getSiteId(),caret,caret.getStartOffset());
  TreeCaretPosition endSelection=treeOperationFactory.createCaretPosition(getOperation().getSiteId(),caret,caret.getEndOffset());
  Iterator<TreeOperation> it=((TreeCompositeOperation)getOperation()).operations.iterator();
  while (it.hasNext()) {
    TreeOperation op=it.next();
    startSelection=(TreeCaretPosition)op.transform(startSelection);
    endSelection=(TreeCaretPosition)op.transform(endSelection);
    DomOperation domOperation=domOperationFactory.createDomOperation(op,this.isRemote);
    domOperation.execute(document);
  }
  Node startContainer=EditorUtils.getChildNodeFromLocator(document.getBody(),startSelection.getPath());
  caret.setStart(startContainer,startSelection.getPosition());
  Node endContainer=EditorUtils.getChildNodeFromLocator(document.getBody(),endSelection.getPath());
  caret.setEnd(endContainer,endSelection.getPosition());
  return caret;
}","@Override public Range execute(Document document){
  Range caret=document.getSelection().getRangeAt(0);
  TreeCaretPosition startSelection=treeOperationFactory.createCaretPosition(getOperation().getSiteId(),caret,caret.getStartOffset());
  TreeCaretPosition endSelection=treeOperationFactory.createCaretPosition(getOperation().getSiteId(),caret,caret.getEndOffset());
  Iterator<TreeOperation> it=((TreeCompositeOperation)getOperation()).getOperations().iterator();
  while (it.hasNext()) {
    TreeOperation op=it.next();
    startSelection=(TreeCaretPosition)op.transform(startSelection);
    endSelection=(TreeCaretPosition)op.transform(endSelection);
    DomOperation domOperation=domOperationFactory.createDomOperation(op,this.isRemote);
    domOperation.execute(document);
  }
  Node startContainer=EditorUtils.getChildNodeFromLocator(document.getBody(),startSelection.getPath());
  caret.setStart(startContainer,startSelection.getPosition());
  Node endContainer=EditorUtils.getChildNodeFromLocator(document.getBody(),endSelection.getPath());
  caret.setEnd(endContainer,endSelection.getPosition());
  return caret;
}",0.9888542131074454
178415,"/** 
 * {@inheritDoc}
 * @see ClickHandler#onClick(ClickEvent)
 */
public void onClick(ClickEvent event){
  if (event.getSource() == hr && hr.isEnabled()) {
    getTextArea().setFocus(true);
    Range range=getTextArea().getDocument().getSelection().getRangeAt(0);
    if (range != null) {
      range=EditorUtils.normalizeCaretPosition(range);
      int[] path=EditorUtils.toIntArray(EditorUtils.getLocator(range.getStartContainer()));
      int siteId=clientJupiter.getSiteId();
      TreeCompositeOperation seq=null;
      if (range.getStartOffset() == 0) {
        TreeOperation newP=new TreeNewParagraph(siteId,path[0]);
        TreeOperation updateP=new TreeUpdateElement(siteId,new int[]{path[0]},Tree.NODE_NAME,""String_Node_Str"");
        TreeOperation newP2=new TreeNewParagraph(siteId,path[0]);
        seq=new TreeCompositeOperation(newP,updateP,newP2);
      }
 else {
        TreeOperation splitP=new TreeInsertParagraph(siteId,range.getStartOffset(),path);
        TreeOperation newP=new TreeNewParagraph(siteId,path[0] + 1);
        TreeOperation updateP=new TreeUpdateElement(siteId,new int[]{path[0] + 1},Tree.NODE_NAME,""String_Node_Str"");
        seq=new TreeCompositeOperation(splitP,newP,updateP);
      }
      clientJupiter.generate(seq);
    }
  }
}","/** 
 * {@inheritDoc}
 * @see ClickHandler#onClick(ClickEvent)
 */
public void onClick(ClickEvent event){
  if (event.getSource() == hr && hr.isEnabled()) {
    getTextArea().setFocus(true);
    Range range=getTextArea().getDocument().getSelection().getRangeAt(0);
    if (range != null) {
      range=EditorUtils.normalizeCaretPosition(range);
      int[] path=EditorUtils.toIntArray(EditorUtils.getLocator(range.getStartContainer()));
      int siteId=clientJupiter.getSiteId();
      TreeCompositeOperation seq=null;
      if (range.getStartOffset() == 0) {
        TreeOperation newP=new TreeNewParagraph(siteId,path[0]);
        TreeOperation updateP=new TreeUpdateElement(siteId,new int[]{path[0]},Tree.NODE_NAME,""String_Node_Str"");
        TreeOperation newP2=new TreeNewParagraph(siteId,path[0]);
        seq=new TreeCompositeOperation(newP,updateP,newP2);
      }
 else {
        TreeOperation splitP=new TreeInsertParagraph(siteId,range.getStartOffset(),path);
        TreeOperation newP=new TreeNewParagraph(siteId,path[0] + 1);
        TreeOperation updateP=new TreeUpdateElement(siteId,new int[]{path[0] + 1},Tree.NODE_NAME,""String_Node_Str"");
        seq=new TreeCompositeOperation(splitP,newP,updateP);
      }
      seq.setSiteId(siteId);
      clientJupiter.generate(seq);
    }
  }
}",0.9887291099883404
178416,"protected TreeOperation handleTreeComposite(TreeCompositeOperation op1){
  ArrayList<TreeOperation> l=new ArrayList<TreeOperation>();
  Iterator<TreeOperation> it=op1.operations.iterator();
  TreeOperation to=this;
  TreeOperation n=it.next();
  l.add((TreeOperation)to.transform(n));
  while (it.hasNext()) {
    to=(TreeOperation)n.transform(to);
    n=it.next();
    l.add((TreeOperation)to.transform(n));
  }
  return new TreeCompositeOperation(l);
}","protected TreeOperation handleTreeComposite(TreeCompositeOperation op1){
  ArrayList<TreeOperation> l=new ArrayList<TreeOperation>();
  Iterator<TreeOperation> it=op1.getOperations().iterator();
  TreeOperation to=this;
  TreeOperation n=it.next();
  l.add((TreeOperation)to.transform(n));
  while (it.hasNext()) {
    to=(TreeOperation)n.transform(to);
    n=it.next();
    l.add((TreeOperation)to.transform(n));
  }
  return new TreeCompositeOperation(l);
}",0.9726177437020812
178417,"/** 
 * @param operation a tree operation
 * @param isRemote {@code true} if the {@code TreeOperation} is received from server, and {@code false} if it's generated locally
 * @return the DOM operation equivalent to the given tree operation
 */
public DomOperation createDomOperation(TreeOperation operation,boolean isRemote){
  if (operation instanceof TreeInsertText) {
    return new DomInsertText(operation);
  }
 else   if (operation instanceof TreeDeleteText) {
    return new DomDeleteText(operation);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    return new DomInsertParagraph(operation);
  }
 else   if (operation instanceof TreeNewParagraph) {
    return new DomNewParagraph(operation);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    return new DomMergeParagraph(operation);
  }
 else   if (operation instanceof TreeStyle) {
    return new DomStyle(operation,isRemote);
  }
 else   if (operation instanceof TreeUpdateElement) {
    return new DomUpdateElement(operation);
  }
  return null;
}","/** 
 * @param operation a tree operation
 * @param isRemote {@code true} if the {@code TreeOperation} is received from server, and {@code false} if it's generated locally
 * @return the DOM operation equivalent to the given tree operation
 */
public DomOperation createDomOperation(TreeOperation operation,boolean isRemote){
  if (operation instanceof TreeInsertText) {
    return new DomInsertText(operation);
  }
 else   if (operation instanceof TreeDeleteText) {
    return new DomDeleteText(operation);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    return new DomInsertParagraph(operation);
  }
 else   if (operation instanceof TreeNewParagraph) {
    return new DomNewParagraph(operation);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    return new DomMergeParagraph(operation);
  }
 else   if (operation instanceof TreeStyle) {
    return new DomStyle(operation,isRemote);
  }
 else   if (operation instanceof TreeUpdateElement) {
    return new DomUpdateElement(operation);
  }
 else   if (operation instanceof TreeCompositeOperation) {
    return new DomCompositeOperation(operation,isRemote);
  }
  return null;
}",0.9338201734367868
178418,"@Override public Range execute(Document document){
  TreeUpdateElement op=getOperation();
  String newNodeName=op.getValue();
  Node node=getTargetNode(document);
  Range caret=document.createRange();
  caret.setStart(node,op.getPosition());
  if (shouldUpdate(node.getNodeName(),newNodeName)) {
    Node newNode=document.createElement(newNodeName);
    for (int i=0; i < node.getChildCount(); i++) {
      newNode.appendChild(node.getChild(i));
    }
    if (node.getParentElement() != null) {
      node.getParentElement().replaceChild(newNode,node);
    }
    caret.setStart(newNode,0);
  }
  caret.collapse(true);
  return caret;
}","@Override public Range execute(Document document){
  TreeUpdateElement op=getOperation();
  String newNodeName=op.getValue();
  Node node=getTargetNode(document);
  Range caret=document.createRange();
  caret.setStart(node,op.getPosition());
  if (shouldUpdate(node.getNodeName(),newNodeName)) {
    Node newNode=document.createElement(newNodeName);
    newNode.appendChild(Element.as(node).extractContents());
    if (node.getParentElement() != null) {
      node.getParentElement().replaceChild(newNode,node);
    }
    caret.setStart(newNode,0);
  }
  caret.collapse(true);
  return caret;
}",0.772986167615948
178419,"/** 
 * {@inheritDoc}
 * @see ChangeHandler#onChange(ChangeEvent)
 */
public void onChange(ChangeEvent event){
  if (event.getSource() == levels && levels.isEnabled()) {
    String level=levels.getValue(levels.getSelectedIndex());
    getTextArea().setFocus(true);
    Range range=getTextArea().getDocument().getSelection().getRangeAt(0);
    logRange(null,range);
    if (""String_Node_Str"".equalsIgnoreCase(range.getStartContainer().getNodeName())) {
      range.setStart(range.getStartContainer().getChild(range.getStartOffset()),0);
      range.collapse(true);
      logRange(""String_Node_Str"",range);
    }
    if (range != null) {
      Node node=range.getStartContainer();
      node=DOMUtils.getInstance().getNearestBlockContainer(node);
      log.fine(""String_Node_Str"" + node.getNodeName());
      TreeOperation op=treeOperationFactory.createHeadingOrParagraphOperation(clientJupiter.getSiteId(),range,level);
      if (op != null) {
        clientJupiter.generate(op);
      }
    }
  }
}","/** 
 * {@inheritDoc}
 * @see ChangeHandler#onChange(ChangeEvent)
 */
public void onChange(ChangeEvent event){
  if (event.getSource() == levels && levels.isEnabled()) {
    String level=levels.getValue(levels.getSelectedIndex());
    getTextArea().setFocus(true);
    Range range=getTextArea().getDocument().getSelection().getRangeAt(0);
    logRange(null,range);
    if (""String_Node_Str"".equalsIgnoreCase(range.getStartContainer().getNodeName())) {
      range.setStart(range.getStartContainer().getChild(range.getStartOffset()),0);
      range.collapse(true);
      logRange(""String_Node_Str"",range);
    }
    if (range != null) {
      Node node=range.getStartContainer();
      node=DOMUtils.getInstance().getNearestBlockContainer(node);
      log.fine(""String_Node_Str"" + node.getNodeName());
      range.setStart(node,0);
      range.setEnd(range.getEndContainer(),range.getEndOffset());
      TreeOperation op=treeOperationFactory.createHeadingOrParagraphOperation(clientJupiter.getSiteId(),range,level);
      if (op != null) {
        clientJupiter.generate(op);
      }
    }
  }
}",0.9541108986615678
178420,"@Override public Range execute(Document document){
  TreeUpdateElement op=getOperation();
  String newNodeName=op.getValue();
  Node node=getTargetNode(document);
  Range caret=document.createRange();
  caret.setStart(node,op.getPosition());
  if (shouldUpdate(node.getNodeName(),newNodeName)) {
    Node newNode=document.createElement(newNodeName);
    for (int i=0; i < node.getChildCount(); i++) {
      newNode.appendChild(node.getChild(i));
    }
    if (node.getParentElement() != null) {
      node.getParentElement().replaceChild(newNode,node);
    }
    caret.setStart(newNode,op.getPosition());
  }
  caret.collapse(true);
  return caret;
}","@Override public Range execute(Document document){
  TreeUpdateElement op=getOperation();
  String newNodeName=op.getValue();
  Node node=getTargetNode(document);
  Range caret=document.createRange();
  caret.setStart(node,op.getPosition());
  if (shouldUpdate(node.getNodeName(),newNodeName)) {
    Node newNode=document.createElement(newNodeName);
    for (int i=0; i < node.getChildCount(); i++) {
      newNode.appendChild(node.getChild(i));
    }
    if (node.getParentElement() != null) {
      node.getParentElement().replaceChild(newNode,node);
    }
    caret.setStart(newNode,0);
  }
  caret.collapse(true);
  return caret;
}",0.9151750972762646
178421,"/** 
 * @param range a DOM range
 * @return the list of empty and non empty text nodes that are completely or partially (at least one character) included inthe given range
 */
public static Map<String,List<Text>> getTextNodes(Range range){
  Map<String,List<Text>> textNodesMap=new HashMap<String,List<Text>>();
  Node leaf=DOMUtils.getInstance().getFirstLeaf(range);
  Node lastLeaf=DOMUtils.getInstance().getLastLeaf(range);
  List<Text> nonEmptyTextNodes=new ArrayList<Text>();
  List<Text> emptyTextNodes=new ArrayList<Text>();
  if (isTextNode(leaf) && (leaf != range.getStartContainer() || range.getStartOffset() < leaf.getNodeValue().length())) {
    if (isNonEmptyTextNode(leaf)) {
      nonEmptyTextNodes.add((Text)leaf);
    }
 else     if (isEmptyTextNode(leaf)) {
      emptyTextNodes.add((Text)leaf);
    }
  }
  while (leaf != lastLeaf) {
    leaf=DOMUtils.getInstance().getNextLeaf(leaf);
    if (isNonEmptyTextNode(leaf)) {
      nonEmptyTextNodes.add((Text)leaf);
    }
 else     if (isEmptyTextNode(leaf)) {
      emptyTextNodes.add((Text)leaf);
    }
  }
  int lastIndex=nonEmptyTextNodes.size() - 1;
  if (lastIndex >= 0 && range.getEndOffset() == 0 && nonEmptyTextNodes.get(lastIndex) == range.getEndContainer()) {
    nonEmptyTextNodes.remove(lastIndex);
  }
  textNodesMap.put(NON__EMPTY,nonEmptyTextNodes);
  lastIndex=emptyTextNodes.size() - 1;
  if (lastIndex >= 0 && range.getEndOffset() == 0 && emptyTextNodes.get(lastIndex) == range.getEndContainer()) {
    emptyTextNodes.remove(lastIndex);
  }
  textNodesMap.put(EMPTY,emptyTextNodes);
  return textNodesMap;
}","/** 
 * @param range a DOM range
 * @return the list of empty and non empty text nodes that are completely or partially (at least one character) included inthe given range
 */
public static Map<String,List<Text>> getTextNodes(Range range){
  Map<String,List<Text>> textNodesMap=new HashMap<String,List<Text>>();
  Node leaf=DOMUtils.getInstance().getFirstLeaf(range);
  Node lastLeaf=DOMUtils.getInstance().getLastLeaf(range);
  List<Text> nonEmptyTextNodes=new ArrayList<Text>();
  List<Text> emptyTextNodes=new ArrayList<Text>();
  if (isNonEmptyTextNode(leaf) && (leaf != range.getStartContainer() || range.getStartOffset() < leaf.getNodeValue().length())) {
    nonEmptyTextNodes.add((Text)leaf);
  }
  if (isEmptyTextNode(leaf)) {
    emptyTextNodes.add((Text)leaf);
  }
  while (leaf != lastLeaf) {
    leaf=DOMUtils.getInstance().getNextLeaf(leaf);
    if (isNonEmptyTextNode(leaf)) {
      nonEmptyTextNodes.add((Text)leaf);
    }
 else     if (isEmptyTextNode(leaf)) {
      emptyTextNodes.add((Text)leaf);
    }
  }
  int lastIndex=nonEmptyTextNodes.size() - 1;
  if (lastIndex >= 0 && range.getEndOffset() == 0 && nonEmptyTextNodes.get(lastIndex) == range.getEndContainer()) {
    nonEmptyTextNodes.remove(lastIndex);
  }
  textNodesMap.put(NON__EMPTY,nonEmptyTextNodes);
  textNodesMap.put(EMPTY,emptyTextNodes);
  return textNodesMap;
}",0.8591836734693877
178422,"/** 
 * The caret has to be deterministically positioned (within a paragraph), it is always located as follows: <ul> <li>at the last position of the previous non-empty text-node within the same paragraph if such a previous text-node exists.</li> <li>if not, at the first position of the next non-empty text-node relative to the locator within the same paragraph.</li> <li>if there are no non-empty text nodes (all text nodes are empty) then the caret moves to the first empty text node either at left or at right </ul>
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range computeNewCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      Map<String,List<Text>> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      List<Text> leftNonEmpty=leftTextNodesInSameP.get(NON__EMPTY);
      int leftSize=leftNonEmpty.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftNonEmpty.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        Map<String,List<Text>> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        List<Text> rightNonEmpty=rightTextNodesInSameP.get(NON__EMPTY);
        if (rightNonEmpty.size() > 0) {
          Text firstRightTextNode=rightNonEmpty.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
 else {
          List<Text> emptyTextNodes=leftTextNodesInSameP.get(EMPTY);
          Text emptyText=null;
          if (emptyTextNodes.size() > 0) {
            emptyText=emptyTextNodes.get(0);
          }
 else {
            emptyTextNodes=rightTextNodesInSameP.get(EMPTY);
            if (emptyTextNodes.size() > 0) {
              emptyText=emptyTextNodes.get(emptyTextNodes.size() - 1);
            }
          }
          if (emptyText != null) {
            newCaretPos.setStart(emptyText,0);
          }
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}","/** 
 * The caret has to be deterministically positioned (within a paragraph), it is always located as follows: <ul> <li>at the last position of the previous non-empty text-node within the same paragraph if such a previous text-node exists.</li> <li>if not, at the first position of the next non-empty text-node relative to the locator within the same paragraph.</li> <li>if there are no non-empty text nodes (all text nodes are empty) then the caret moves to the first empty text node either at left or at right </ul>
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range computeNewCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      Map<String,List<Text>> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      List<Text> leftNonEmpty=leftTextNodesInSameP.get(NON__EMPTY);
      int leftSize=leftNonEmpty.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftNonEmpty.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        Map<String,List<Text>> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        List<Text> rightNonEmpty=rightTextNodesInSameP.get(NON__EMPTY);
        if (rightNonEmpty.size() > 0) {
          Text firstRightTextNode=rightNonEmpty.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
 else {
          List<Text> emptyTextNodes=leftTextNodesInSameP.get(EMPTY);
          Text emptyText=null;
          if (emptyTextNodes.size() > 0) {
            emptyText=emptyTextNodes.get(0);
          }
 else {
            emptyTextNodes=rightTextNodesInSameP.get(EMPTY);
            if (emptyTextNodes.size() > 0) {
              emptyText=emptyTextNodes.get(0);
            }
          }
          if (emptyText != null) {
            newCaretPos.setStart(emptyText,0);
          }
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}",0.994250331711632
178423,"/** 
 * @return The suite of all the client tests to be run.
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(RtPluginCaretPositionTest.class);
  return suite;
}","/** 
 * @return The suite of all the client tests to be run.
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(CaretPositionTest.class);
  suite.addTestSuite(CaretPositionInEmptyTextTest.class);
  return suite;
}",0.871900826446281
178424,"/** 
 * @param range the selection range, usually a collapsed range which is the caret position
 * @return all the non-empty text nodes from the right of the caret within the same paragraph
 */
private static List<Text> getRightTextNodesInSameP(Range range){
  Range rightRange=range.cloneRange();
  Node parentPNode=getAncestorParagraph(range.getEndContainer());
  rightRange.setEnd(parentPNode,parentPNode.getChildCount());
  return getNonEmptyTextNodes(rightRange);
}","/** 
 * @param range the selection range, usually a collapsed range which is the caret position, placed inside a paragraph
 * @return all the non-empty text nodes from the right of the caret within the same paragraph
 */
private static Map<String,List<Text>> getRightTextNodesInSameP(Range range){
  Range rightRange=range.cloneRange();
  Node parentPNode=getAncestorParagraph(range.getEndContainer());
  rightRange.setEnd(parentPNode,parentPNode.getChildCount());
  return getTextNodes(rightRange);
}",0.9433573635427396
178425,"/** 
 * @param node a DOM node
 * @return {@code true} if the given node is of type {@link Node#TEXT_NODE} and it's not empty, {@code false}otherwise
 */
public static boolean isNonEmptyTextNode(Node node){
  return node != null && node.getNodeType() == Node.TEXT_NODE && node.getNodeValue().length() > 0;
}","/** 
 * @param node a DOM node
 * @return {@code true} if the given node is of type {@link Node#TEXT_NODE} and it's not empty, {@code false}otherwise
 */
public static boolean isNonEmptyTextNode(Node node){
  return isTextNode(node) && node.getNodeValue().length() > 0;
}",0.8823529411764706
178426,"/** 
 * Converts a DOM range to an list of operation targets.
 * @param range a DOM range
 * @return the corresponding list of operation targets
 */
public static List<OperationTarget> getIntermediaryTargets(Range range){
  List<OperationTarget> operationTargets=new ArrayList<OperationTarget>();
  List<Text> textNodes=getNonEmptyTextNodes(range);
  for (int i=0; i < textNodes.size(); i++) {
    Text text=textNodes.get(i);
    int startIndex=0;
    if (text == range.getStartContainer()) {
      startIndex=range.getStartOffset();
    }
    int endIndex=text.getLength();
    if (text == range.getEndContainer()) {
      endIndex=range.getEndOffset();
    }
    operationTargets.add(0,new OperationTarget(TreeHelper.getLocator(text),startIndex,endIndex,text.getLength()));
  }
  return operationTargets;
}","/** 
 * Converts a DOM range to an list of operation targets.
 * @param range a DOM range
 * @return the corresponding list of operation targets
 */
public static List<OperationTarget> getIntermediaryTargets(Range range){
  List<OperationTarget> operationTargets=new ArrayList<OperationTarget>();
  List<Text> textNodes=getTextNodes(range).get(NON__EMPTY);
  for (int i=0; i < textNodes.size(); i++) {
    Text text=textNodes.get(i);
    int startIndex=0;
    if (text == range.getStartContainer()) {
      startIndex=range.getStartOffset();
    }
    int endIndex=text.getLength();
    if (text == range.getEndContainer()) {
      endIndex=range.getEndOffset();
    }
    operationTargets.add(0,new OperationTarget(TreeHelper.getLocator(text),startIndex,endIndex,text.getLength()));
  }
  return operationTargets;
}",0.9704433497536946
178427,"/** 
 * @param range the selection range, usually a collapsed range which is the caret position
 * @return all the non-empty text nodes from the left of the caret within the same paragraph
 */
private static List<Text> getLeftTextNodesInSameP(Range range){
  Range leftRange=range.cloneRange();
  leftRange.setEnd(range.getStartContainer(),range.getStartOffset());
  Node parentPNode=getAncestorParagraph(range.getStartContainer());
  leftRange.setStart(parentPNode,0);
  return getNonEmptyTextNodes(leftRange);
}","/** 
 * @param range the selection range, usually a collapsed range which is the caret position, placed inside a paragraph
 * @return all the non-empty text nodes from the left of the caret within the same paragraph
 */
private static Map<String,List<Text>> getLeftTextNodesInSameP(Range range){
  Range leftRange=range.cloneRange();
  leftRange.setEnd(range.getStartContainer(),range.getStartOffset());
  Node parentPNode=getAncestorParagraph(range.getStartContainer());
  leftRange.setStart(parentPNode,0);
  return getTextNodes(leftRange);
}",0.9479659413434248
178428,"/** 
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range computeNewCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      List<Text> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      int leftSize=leftTextNodesInSameP.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftTextNodesInSameP.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        List<Text> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        if (rightTextNodesInSameP.size() > 0) {
          Text firstRightTextNode=rightTextNodesInSameP.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}","/** 
 * The caret has to be deterministically positioned (within a paragraph), it is always located as follows: <ul> <li>at the last position of the previous non-empty text-node within the same paragraph if such a previous text-node exists.</li> <li>if not, at the first position of the next non-empty text-node relative to the locator within the same paragraph.</li> <li>if there are no non-empty text nodes (all text nodes are empty) then the caret moves to the first empty text node either at left or at right </ul>
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range computeNewCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      Map<String,List<Text>> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      List<Text> leftNonEmpty=leftTextNodesInSameP.get(NON__EMPTY);
      int leftSize=leftNonEmpty.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftNonEmpty.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        Map<String,List<Text>> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        List<Text> rightNonEmpty=rightTextNodesInSameP.get(NON__EMPTY);
        if (rightNonEmpty.size() > 0) {
          Text firstRightTextNode=rightNonEmpty.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
 else {
          List<Text> emptyTextNodes=leftTextNodesInSameP.get(EMPTY);
          Text emptyText=null;
          if (emptyTextNodes.size() > 0) {
            emptyText=emptyTextNodes.get(0);
          }
 else {
            emptyTextNodes=rightTextNodesInSameP.get(EMPTY);
            if (emptyTextNodes.size() > 0) {
              emptyText=emptyTextNodes.get(emptyTextNodes.size() - 1);
            }
          }
          if (emptyText != null) {
            newCaretPos.setStart(emptyText,0);
          }
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}",0.5934261178560852
178429,"public TreeOperation handleBackspaceOnElement(Range caret){
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element rightParagraph;
  Node leftParagraph;
  Element element=Element.as(startContainer);
  if (P.equalsIgnoreCase(element.getNodeName())) {
    rightParagraph=element;
    leftParagraph=rightParagraph.getPreviousSibling();
    if (leftParagraph != null) {
      int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
      int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      log.fine(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
    }
  }
 else {
    rightParagraph=Element.as(getAncestorParagraph(element));
    op=skipBackspaceOnEmptyTexts(element,path,rightParagraph,rightParagraph.getPreviousSibling());
  }
  return op;
}","public TreeOperation handleBackspaceOnElement(Range caret){
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element rightParagraph;
  Node leftParagraph;
  Element element=Element.as(startContainer);
  if (P.equalsIgnoreCase(element.getNodeName())) {
    rightParagraph=element;
    leftParagraph=rightParagraph.getPreviousSibling();
    if (leftParagraph != null) {
      int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
      int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      log.fine(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
    }
  }
 else {
    log.severe(""String_Node_Str"");
    rightParagraph=Element.as(getAncestorParagraph(element));
    op=skipBackspaceOnEmptyTexts(element,path,rightParagraph,rightParagraph.getPreviousSibling());
  }
  return op;
}",0.9843540455967814
178430,"private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,List<Integer> path,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStart(document.getBody().getFirstChild(),0);
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    Node lastChild=document.getBody().getLastChild();
    range.setEnd(lastChild,lastChild.getChildCount());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node nonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + nonEmptyTextNode.getNodeValue());
    if (node.getParentNode() == nonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? nonEmptyTextNode.getNodeValue().length() - 1 : 0;
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      if ((isBackspace && leftParagraph != null) || (!isBackspace && rightParagraph != null)) {
        int lBbrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBbrCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
        int mergePos=isBackspace ? path.get(0) : path.get(0) + 1;
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),mergePos,leftParagraph.getChildCount() - lBbrCount,rightParagraph.getChildCount() - rBbrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
  return op;
}","private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,List<Integer> path,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStart(document.getBody().getFirstChild(),0);
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    Node lastChild=document.getBody().getLastChild();
    range.setEnd(lastChild,lastChild.getChildCount());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getTextNodes(range).get(NON__EMPTY);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node nonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + nonEmptyTextNode.getNodeValue());
    if (node.getParentNode() == nonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? nonEmptyTextNode.getNodeValue().length() - 1 : 0;
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      if ((isBackspace && leftParagraph != null) || (!isBackspace && rightParagraph != null)) {
        op=treeOperationFactory.createTreeMergeParagraph(isBackspace,clientJupiter.getSiteId(),leftParagraph,rightParagraph,path);
      }
    }
  }
  return op;
}",0.8190539199470724
178431,"public TreeOperation handleBackspaceOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  Element rightParagraph=ancestorBelowParagraph.getParentElement();
  Node leftParagraph=rightParagraph.getPreviousSibling();
  Text textNode=Text.as(startContainer);
  if (pos == 0) {
    if (leftParagraph != null) {
      op=skipBackspaceOnEmptyTexts(textNode,path,rightParagraph,leftParagraph);
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    pos=pos - 1;
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
  return op;
}","public TreeOperation handleBackspaceOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  Element rightParagraph=ancestorBelowParagraph.getParentElement();
  Node leftParagraph=rightParagraph.getPreviousSibling();
  Text textNode=Text.as(startContainer);
  if (pos == 0) {
    if (leftParagraph != null) {
      op=maybeMergeParagraphs(true,textNode,path,rightParagraph,leftParagraph);
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    pos=pos - 1;
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
  return op;
}",0.9695431472081218
178432,"public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  final Node ancestorParagraph=getAncestorParagraph(startContainer);
  Element leftParagraph=Element.as(ancestorParagraph);
  Element rightParagraph=leftParagraph.getNextSiblingElement();
  if (textNode.getLength() > 0) {
    if (textNode.getLength() == pos) {
      op=skipDeleteOnEmptyTexts(textNode,path,leftParagraph,rightParagraph);
    }
 else {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,path,leftParagraph,rightParagraph);
  }
  return op;
}","public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  final Node ancestorParagraph=getAncestorParagraph(startContainer);
  Element leftParagraph=Element.as(ancestorParagraph);
  Element rightParagraph=leftParagraph.getNextSiblingElement();
  if (pos < textNode.getLength()) {
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
 else {
    op=maybeMergeParagraphs(false,textNode,path,rightParagraph,leftParagraph);
  }
  return op;
}",0.7726063829787234
178433,"@Override public void beforeSend(Message message){
  log.fine(""String_Node_Str"");
  TreeOperation operation=(TreeOperation)message.getOperation();
  DomOperation domOperation=domOperationFactory.createDomOperation(operation);
  if (domOperation != null) {
    applySelection(domOperation.execute((Document)nativeNode.getOwnerDocument()));
  }
 else {
    updateDOM();
  }
}","@Override public void beforeSend(Message message){
  log.fine(""String_Node_Str"");
  TreeOperation operation=(TreeOperation)message.getOperation();
  DomOperation domOperation=domOperationFactory.createDomOperation(operation,false);
  if (domOperation != null) {
    applySelection(domOperation.execute((Document)nativeNode.getOwnerDocument()));
  }
 else {
    updateDOM();
  }
}",0.9920212765957448
178434,"@Override public void afterReceive(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  DomOperation domOperation=domOperationFactory.createDomOperation(operation);
  if (domOperation != null) {
    TreeOperation[] selectionEndPoints=saveSelection();
    domOperation.execute((Document)nativeNode.getOwnerDocument());
    restoreSelection(selectionEndPoints,operation);
  }
 else {
    updateDOM();
  }
}","@Override public void afterReceive(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  DomOperation domOperation=domOperationFactory.createDomOperation(operation,true);
  if (domOperation != null) {
    TreeOperation[] selectionEndPoints=saveSelection();
    domOperation.execute((Document)nativeNode.getOwnerDocument());
    restoreSelection(selectionEndPoints,operation);
  }
 else {
    updateDOM();
  }
}",0.9950347567030784
178435,"/** 
 * @param operation a tree operation
 * @return the DOM operation equivalent to the given tree operation
 */
public DomOperation createDomOperation(TreeOperation operation){
  if (operation instanceof TreeInsertText) {
    return new DomInsertText(operation);
  }
 else   if (operation instanceof TreeDeleteText) {
    return new DomDeleteText(operation);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    return new DomInsertParagraph(operation);
  }
 else   if (operation instanceof TreeNewParagraph) {
    return new DomNewParagraph(operation);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    return new DomMergeParagraph(operation);
  }
 else   if (operation instanceof TreeStyle) {
    return new DomStyle(operation);
  }
  return null;
}","/** 
 * @param operation a tree operation
 * @param isRemote {@code true} if the {@code TreeOperation} is received from server, and {@code false} if it's generated locally
 * @return the DOM operation equivalent to the given tree operation
 */
public DomOperation createDomOperation(TreeOperation operation,boolean isRemote){
  if (operation instanceof TreeInsertText) {
    return new DomInsertText(operation);
  }
 else   if (operation instanceof TreeDeleteText) {
    return new DomDeleteText(operation);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    return new DomInsertParagraph(operation);
  }
 else   if (operation instanceof TreeNewParagraph) {
    return new DomNewParagraph(operation);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    return new DomMergeParagraph(operation);
  }
 else   if (operation instanceof TreeStyle) {
    return new DomStyle(operation,isRemote);
  }
  return null;
}",0.9087719298245616
178436,"/** 
 * Creates a new DOM operation equivalent to the given Tree operation.
 * @param operation a Tree operation
 */
public DomStyle(TreeOperation operation){
  super(operation);
}","/** 
 * Creates a new DOM operation equivalent to the given Tree operation.
 * @param operation a Tree operation
 * @param isRemote true if tree operation was remotely generated (received from server)
 */
public DomStyle(TreeOperation operation,boolean isRemote){
  super(operation);
  this.isRemote=isRemote;
}",0.7331975560081466
178437,"@Override protected TextFragment execute(Text text,int startIndex,int endIndex,String parameter){
  boolean addStyle=isExecuted();
  return addStyle ? removeStyle(text,startIndex,endIndex) : addStyle(text,startIndex,endIndex);
}","@Override protected TextFragment execute(Text text,int startIndex,int endIndex,String parameter){
  boolean addStyle=isExecuted();
  if (DomStyle.this.isRemote()) {
    return addStyle ? new TextFragment(text,startIndex,endIndex) : addStyle(text,startIndex,endIndex);
  }
 else {
    return addStyle ? removeStyle(text,startIndex,endIndex) : addStyle(text,startIndex,endIndex);
  }
}",0.7463175122749591
178438,"private TreeOperation skipDeleteOnEmptyTexts(Node node,Node rightParagraph,Node leftParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(false,node,rightParagraph,leftParagraph);
}","/** 
 * Skips empty texts on delete
 * @param emptyText the empty text node
 * @param leftParagraph the left paragraph which is the ancestor of the emptyText node
 * @param rightParagraph the right paragraph
 * @return a {@link TreeOperation} or {@code null}
 */
private TreeOperation skipDeleteOnEmptyTexts(Node emptyText,Node leftParagraph,Node rightParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(false,emptyText,rightParagraph,leftParagraph);
}",0.5316846986089645
178439,"private TreeOperation skipBackspaceOnEmptyTexts(Node node,Node rightParagraph,Node leftParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(true,node,rightParagraph,leftParagraph);
}","/** 
 * Skips empty texts on backspace
 * @param emptyText the empty text node
 * @param rightParagraph the right paragraph which is the ancestor of the emptyText node
 * @param leftParagraph the left paragraph
 * @return a {@link TreeOperation} or {@code null}
 */
private TreeOperation skipBackspaceOnEmptyTexts(Node emptyText,Node rightParagraph,Node leftParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(true,emptyText,rightParagraph,leftParagraph);
}",0.5535168195718655
178440,"public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() == pos) {
    if (isMerge) {
      int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
      int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,leftParagraph,rightParagraph);
  }
  return op;
}","public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() > 0) {
    if (textNode.getLength() == pos) {
      if (isMerge) {
        int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
      }
    }
 else {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,leftParagraph,rightParagraph);
  }
  return op;
}",0.9466831990080596
178441,"private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,List<Integer> path,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStart(document.getBody().getFirstChild(),0);
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    range.setEndBefore(document.getBody().getLastChild());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node prevNonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + prevNonEmptyTextNode.getNodeValue());
    if (node.getParentNode() == prevNonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? prevNonEmptyTextNode.getNodeValue().length() - 1 : 0;
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      if ((isBackspace && leftParagraph != null) || (!isBackspace && rightParagraph != null)) {
        int lBbrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBbrCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBbrCount,rightParagraph.getChildCount() - rBbrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
  return op;
}","private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,List<Integer> path,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStart(document.getBody().getFirstChild(),0);
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    Node lastChild=document.getBody().getLastChild();
    range.setEnd(lastChild,lastChild.getChildCount());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node nonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + nonEmptyTextNode.getNodeValue());
    if (node.getParentNode() == nonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? nonEmptyTextNode.getNodeValue().length() - 1 : 0;
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      if ((isBackspace && leftParagraph != null) || (!isBackspace && rightParagraph != null)) {
        int lBbrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBbrCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
        int mergePos=isBackspace ? path.get(0) : path.get(0) + 1;
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),mergePos,leftParagraph.getChildCount() - lBbrCount,rightParagraph.getChildCount() - rBbrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
  return op;
}",0.9309811203961622
178442,"public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() > 0) {
    if (textNode.getLength() == pos) {
      if (isMerge) {
        int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
      }
    }
 else {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,path,leftParagraph,rightParagraph);
  }
  return op;
}","public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  final Node ancestorParagraph=getAncestorParagraph(startContainer);
  Element leftParagraph=Element.as(ancestorParagraph);
  Element rightParagraph=leftParagraph.getNextSiblingElement();
  if (textNode.getLength() > 0) {
    if (textNode.getLength() == pos) {
      op=skipDeleteOnEmptyTexts(textNode,path,leftParagraph,rightParagraph);
    }
 else {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,path,leftParagraph,rightParagraph);
  }
  return op;
}",0.3751987281399046
178443,"/** 
 * The caret has to be deterministically positioned (within a paragraph), it is always located as follows: <ul> <li>at the last position of the previous non-empty text-node within the same paragraph if such a previous text-node exists.</li> <li>if not, at the first position of the next non-empty text-node relative to the locator within the same paragraph.</li> <li>if there are no non-empty text nodes (all text nodes are empty) then the caret moves to the first empty text node either at left or at right </ul>
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range normalizeCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      Map<String,List<Text>> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      List<Text> leftNonEmpty=leftTextNodesInSameP.get(NON__EMPTY);
      int leftSize=leftNonEmpty.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftNonEmpty.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        Map<String,List<Text>> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        List<Text> rightNonEmpty=rightTextNodesInSameP.get(NON__EMPTY);
        if (rightNonEmpty.size() > 0) {
          Text firstRightTextNode=rightNonEmpty.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
 else {
          List<Text> emptyTextNodes=leftTextNodesInSameP.get(EMPTY);
          Text emptyText=null;
          if (emptyTextNodes.size() > 0) {
            emptyText=emptyTextNodes.get(0);
          }
 else {
            emptyTextNodes=rightTextNodesInSameP.get(EMPTY);
            if (emptyTextNodes.size() > 0) {
              emptyText=emptyTextNodes.get(0);
            }
          }
          if (emptyText != null) {
            newCaretPos.setStart(emptyText,0);
          }
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}","/** 
 * The caret has to be deterministically positioned (within a paragraph), it is always located as follows: <ul> <li>at the last position of the previous non-empty text-node within the same paragraph if such a previous text-node exists.</li> <li>if not, at the first position of the next non-empty text-node relative to the locator within the same paragraph.</li> <li>if there are no non-empty text nodes (all text nodes are empty) then the caret moves to the first empty text node either at left or at right </ul>
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range normalizeCaretPosition(Range oldCaretPosition){
  Range newCaretPos=oldCaretPosition.cloneRange();
  if (oldCaretPosition.isCollapsed()) {
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      Map<String,List<Text>> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      List<Text> leftNonEmpty=leftTextNodesInSameP.get(NON__EMPTY);
      int leftSize=leftNonEmpty.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftNonEmpty.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        Map<String,List<Text>> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        List<Text> rightNonEmpty=rightTextNodesInSameP.get(NON__EMPTY);
        if (rightNonEmpty.size() > 0) {
          Text firstRightTextNode=rightNonEmpty.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
 else {
          List<Text> emptyTextNodes=leftTextNodesInSameP.get(EMPTY);
          Text emptyText=null;
          if (emptyTextNodes.size() > 0) {
            emptyText=emptyTextNodes.get(0);
          }
 else {
            emptyTextNodes=rightTextNodesInSameP.get(EMPTY);
            if (emptyTextNodes.size() > 0) {
              emptyText=emptyTextNodes.get(0);
            }
          }
          if (emptyText != null) {
            newCaretPos.setStart(emptyText,0);
          }
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}",0.9772016092981672
178444,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    if (keyCode == KeyCodes.KEY_BACKSPACE || keyCode == KeyCodes.KEY_DELETE || keyCode == KeyCodes.KEY_ENTER) {
      range=EditorUtils.normalizeCaretPosition(range);
      log.fine(""String_Node_Str"");
      logRange(range);
    }
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          op=handleBackspaceOnTextNode(range);
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          op=handleBackspaceOnElement(range);
        }
        if (op == null) {
          event.preventDefault();
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      op=handleDeleteOnTextNode(range);
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      op=handleDeleteOnElement(range);
    }
    if (op == null) {
      event.preventDefault();
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  op=handleEnterOnTextNode(range);
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  op=handleEnterOnElement(range);
}
if (op == null) {
  event.preventDefault();
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    if (keyCode == KeyCodes.KEY_BACKSPACE || keyCode == KeyCodes.KEY_DELETE || keyCode == KeyCodes.KEY_ENTER) {
      range=EditorUtils.normalizeCaretPosition(range);
      log.fine(""String_Node_Str"");
      logRange(range);
    }
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          op=handleBackspaceOnTextNode(range);
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          op=handleBackspaceOnElement(range);
        }
        if (op == null) {
          event.preventDefault();
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      op=handleDeleteOnTextNode(range);
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      op=handleDeleteOnElement(range);
    }
    if (op == null) {
      event.preventDefault();
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  op=handleEnterOnTextNode(range);
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  op=handleEnterOnElement(range);
}
if (op == null) {
  event.preventDefault();
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.9907993099482462
178445,"@Override public void beforeSend(Message message){
  log.fine(""String_Node_Str"");
  TreeOperation operation=(TreeOperation)message.getOperation();
  if (operation instanceof TreeDeleteText) {
    return;
  }
  DomOperation domOperation=domOperationFactory.createDomOperation(operation);
  if (domOperation != null) {
    applySelection(domOperation.execute((Document)nativeNode.getOwnerDocument()));
  }
 else {
    updateDOM();
  }
}","@Override public void beforeSend(Message message){
  log.fine(""String_Node_Str"");
  TreeOperation operation=(TreeOperation)message.getOperation();
  DomOperation domOperation=domOperationFactory.createDomOperation(operation);
  if (domOperation != null) {
    applySelection(domOperation.execute((Document)nativeNode.getOwnerDocument()));
  }
 else {
    updateDOM();
  }
}",0.9244114002478316
178446,"/** 
 * Saves the current selection using two   {@link TreeInsertText} operations.
 * @return two {@link TreeInsertText} operations that represent the start and end of the selection
 * @see TreeClientCallback#restoreSelection(TreeOperation[])
 */
private TreeOperation[] saveSelection(){
  TreeOperation[] selection=new TreeCaretPosition[2];
  Range start=((Document)nativeNode.getOwnerDocument()).getSelection().getRangeAt(0);
  start=EditorUtils.normalizeCaretPosition(start);
  Range end=start.cloneRange();
  start.collapse(true);
  end.collapse(false);
  selection[0]=treeOperationFactory.createCaretPosition(siteId,start);
  selection[1]=treeOperationFactory.createCaretPosition(siteId,end);
  return selection;
}","/** 
 * Saves the current selection using two   {@link TreeInsertText} operations.
 * @return two {@link TreeInsertText} operations that represent the start and end of the selection
 * @see TreeClientCallback#restoreSelection(TreeOperation[])
 */
private TreeOperation[] saveSelection(){
  TreeOperation[] selection=new TreeCaretPosition[2];
  Range start=((Document)nativeNode.getOwnerDocument()).getSelection().getRangeAt(0);
  start=EditorUtils.normalizeCaretPosition(start);
  Range end=start.cloneRange();
  start.collapse(true);
  end.collapse(false);
  selection[0]=treeOperationFactory.createCaretPosition(siteId,start,start.getStartOffset());
  selection[1]=treeOperationFactory.createCaretPosition(siteId,end,end.getEndOffset());
  return selection;
}",0.9716216216216216
178447,"/** 
 * @param siteId the client id
 * @param location the native DOM caret position
 * @return a new {@link TreeCaretPosition} operation
 */
public TreeCaretPosition createCaretPosition(int siteId,Range location){
  List<Integer> path=TreeHelper.getLocator(location.getStartContainer());
  return new TreeCaretPosition(siteId,location.getStartOffset(),TreeHelper.toIntArray(path));
}","/** 
 * @param siteId the client id
 * @param location the native DOM caret position
 * @param offset
 * @return a new {@link TreeCaretPosition} operation
 */
public TreeCaretPosition createCaretPosition(int siteId,Range location,int offset){
  List<Integer> path=TreeHelper.getLocator(location.getStartContainer());
  return new TreeCaretPosition(siteId,offset,TreeHelper.toIntArray(path));
}",0.8957528957528957
178448,"@Override public Range execute(Document document){
  Node targetNode=getTargetNode(document);
  if (Node.TEXT_NODE == targetNode.getNodeType()) {
    Text.as(targetNode).deleteData(getOperation().getPosition(),1);
  }
 else   if (Node.ELEMENT_NODE == targetNode.getNodeType()) {
  }
  return null;
}","@Override public Range execute(Document document){
  Node targetNode=getTargetNode(document);
  if (Node.TEXT_NODE == targetNode.getNodeType()) {
    Text.as(targetNode).deleteData(getOperation().getPosition(),1);
  }
 else   if (Node.ELEMENT_NODE == targetNode.getNodeType()) {
  }
  Range caret=document.createRange();
  caret.setStart(targetNode,getOperation().getPosition());
  caret.collapse(true);
  return caret;
}",0.8055555555555556
178449,"/** 
 * Skips empty texts on delete
 * @param emptyText the empty text node
 * @param leftParagraph the left paragraph which is the ancestor of the emptyText node
 * @param rightParagraph the right paragraph
 * @return a {@link TreeOperation} or {@code null}
 */
private TreeOperation skipDeleteOnEmptyTexts(Node emptyText,Node leftParagraph,Node rightParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(false,emptyText,rightParagraph,leftParagraph);
}","/** 
 * Skips empty texts on delete
 * @param node the node
 * @param path the node's locator - passed only to avoid computing it again
 * @param leftParagraph the left paragraph which is the ancestor of the emptyText node
 * @param rightParagraph the right paragraph
 * @return a {@link TreeOperation} or {@code null}
 */
private TreeOperation skipDeleteOnEmptyTexts(Node node,List<Integer> path,Node leftParagraph,Node rightParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(false,node,path,rightParagraph,leftParagraph);
}",0.3058350100603622
178450,"public TreeOperation handleBackspaceOnElement(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element rightParagraph;
  Node n;
  Node leftParagraph;
  Element element=Element.as(startContainer);
  boolean merge=false;
  if (P.equalsIgnoreCase(element.getNodeName())) {
    rightParagraph=element;
    merge=true;
  }
 else {
    log.severe(""String_Node_Str"");
    n=getAncestorBelowParagraph(startContainer);
    rightParagraph=n.getParentElement();
    if (pos == 0 && SPAN.equalsIgnoreCase(element.getNodeName())) {
      merge=(element == n && n == rightParagraph.getFirstChild());
    }
  }
  leftParagraph=rightParagraph.getPreviousSibling();
  merge=merge && (leftParagraph != null);
  if (merge) {
    int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
    int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
    op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    log.fine(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
  }
  return op;
}","public TreeOperation handleBackspaceOnElement(Range caret){
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element rightParagraph;
  Node leftParagraph;
  Element element=Element.as(startContainer);
  if (P.equalsIgnoreCase(element.getNodeName())) {
    rightParagraph=element;
    leftParagraph=rightParagraph.getPreviousSibling();
    if (leftParagraph != null) {
      int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
      int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      log.fine(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
    }
  }
 else {
    rightParagraph=Element.as(getAncestorParagraph(element));
    op=skipBackspaceOnEmptyTexts(element,path,rightParagraph,rightParagraph.getPreviousSibling());
  }
  return op;
}",0.6205170975813178
178451,"private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStartAfter(document.getBody().getFirstChild());
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    range.setEndBefore(document.getBody().getLastChild());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node prevNonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + prevNonEmptyTextNode.getNodeValue());
    List<Integer> path;
    if (node.getParentNode() == prevNonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? prevNonEmptyTextNode.getNodeValue().length() - 1 : 0;
      path=TreeHelper.getLocator(prevNonEmptyTextNode);
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      int lBbrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
      int rBbrCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
      path=TreeHelper.getLocator(prevNonEmptyTextNode);
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBbrCount,rightParagraph.getChildCount() - rBbrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
  }
  return op;
}","private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,List<Integer> path,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStart(document.getBody().getFirstChild(),0);
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    range.setEndBefore(document.getBody().getLastChild());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node prevNonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + prevNonEmptyTextNode.getNodeValue());
    if (node.getParentNode() == prevNonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? prevNonEmptyTextNode.getNodeValue().length() - 1 : 0;
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      if ((isBackspace && leftParagraph != null) || (!isBackspace && rightParagraph != null)) {
        int lBbrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBbrCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBbrCount,rightParagraph.getChildCount() - rBbrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
  return op;
}",0.6817313812858052
178452,"public TreeOperation handleBackspaceOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  Element rightParagraph=ancestorBelowParagraph.getParentElement();
  Node leftParagraph=rightParagraph.getPreviousSibling();
  Text textNode=Text.as(startContainer);
  if (pos == 0) {
    if (leftParagraph != null) {
      boolean merge=false;
      if (textNode != ancestorBelowParagraph && textNode == ancestorBelowParagraph.getFirstChild()) {
        merge=true;
      }
      if (textNode == ancestorBelowParagraph && ancestorBelowParagraph == rightParagraph.getFirstChild()) {
        merge=true;
      }
      if (merge) {
        int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        op=skipBackspaceOnEmptyTexts(textNode,rightParagraph,leftParagraph);
      }
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    pos=pos - 1;
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
  return op;
}","public TreeOperation handleBackspaceOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  Element rightParagraph=ancestorBelowParagraph.getParentElement();
  Node leftParagraph=rightParagraph.getPreviousSibling();
  Text textNode=Text.as(startContainer);
  if (pos == 0) {
    if (leftParagraph != null) {
      boolean merge=false;
      if (textNode != ancestorBelowParagraph && textNode == ancestorBelowParagraph.getFirstChild()) {
        merge=true;
      }
      if (textNode == ancestorBelowParagraph && ancestorBelowParagraph == rightParagraph.getFirstChild()) {
        merge=true;
      }
      if (merge) {
        int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        op=skipBackspaceOnEmptyTexts(textNode,path,rightParagraph,leftParagraph);
      }
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    pos=pos - 1;
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
  return op;
}",0.9983204568357408
178453,"/** 
 * Skips empty texts on backspace
 * @param emptyText the empty text node
 * @param rightParagraph the right paragraph which is the ancestor of the emptyText node
 * @param leftParagraph the left paragraph
 * @return a {@link TreeOperation} or {@code null}
 */
private TreeOperation skipBackspaceOnEmptyTexts(Node emptyText,Node rightParagraph,Node leftParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(true,emptyText,rightParagraph,leftParagraph);
}","/** 
 * Skips empty texts on backspace
 * @param node the node
 * @param path the node's locator - passed only to avoid computing it again
 * @param rightParagraph the right paragraph which is the ancestor of the emptyText node
 * @param leftParagraph the left paragraph
 * @return a {@link TreeOperation} or {@code null}
 */
private TreeOperation skipBackspaceOnEmptyTexts(Node node,List<Integer> path,Node rightParagraph,Node leftParagraph){
  return handleBackspaceOrDeleteKeyOnEmptyTexts(true,node,path,rightParagraph,leftParagraph);
}",0.3067729083665338
178454,"public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() > 0) {
    if (textNode.getLength() == pos) {
      if (isMerge) {
        int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
      }
    }
 else {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,leftParagraph,rightParagraph);
  }
  return op;
}","public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() > 0) {
    if (textNode.getLength() == pos) {
      if (isMerge) {
        int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
      }
    }
 else {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,path,leftParagraph,rightParagraph);
  }
  return op;
}",0.9985255086994986
178455,"public TreeOperation handleBackspaceOnElement(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element rightParagraph;
  Node n;
  Node leftParagraph;
  Element element=Element.as(startContainer);
  boolean merge=false;
  if (P.equalsIgnoreCase(element.getNodeName())) {
    rightParagraph=element;
    merge=true;
  }
 else {
    log.severe(""String_Node_Str"");
    n=getAncestorBelowParagraph(startContainer);
    rightParagraph=n.getParentElement();
    if (pos == 0 && SPAN.equalsIgnoreCase(element.getNodeName())) {
      merge=(element == n && n == rightParagraph.getFirstChild());
    }
  }
  leftParagraph=rightParagraph.getPreviousSibling();
  merge=merge && (leftParagraph != null);
  if (merge) {
    int brCount=rightParagraph.getElementsByTagName(BR).getLength();
    op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    log.fine(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
  }
  return op;
}","public TreeOperation handleBackspaceOnElement(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element rightParagraph;
  Node n;
  Node leftParagraph;
  Element element=Element.as(startContainer);
  boolean merge=false;
  if (P.equalsIgnoreCase(element.getNodeName())) {
    rightParagraph=element;
    merge=true;
  }
 else {
    log.severe(""String_Node_Str"");
    n=getAncestorBelowParagraph(startContainer);
    rightParagraph=n.getParentElement();
    if (pos == 0 && SPAN.equalsIgnoreCase(element.getNodeName())) {
      merge=(element == n && n == rightParagraph.getFirstChild());
    }
  }
  leftParagraph=rightParagraph.getPreviousSibling();
  merge=merge && (leftParagraph != null);
  if (merge) {
    int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
    int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
    op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    log.fine(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
  }
  return op;
}",0.944
178456,"private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStartAfter(document.getBody().getFirstChild());
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    range.setEndBefore(document.getBody().getLastChild());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node prevNonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + prevNonEmptyTextNode.getNodeValue());
    List<Integer> path;
    if (node.getParentNode() == prevNonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? prevNonEmptyTextNode.getNodeValue().length() - 1 : 0;
      path=TreeHelper.getLocator(prevNonEmptyTextNode);
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      int brCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
      path=TreeHelper.getLocator(prevNonEmptyTextNode);
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
  }
  return op;
}","private TreeOperation handleBackspaceOrDeleteKeyOnEmptyTexts(boolean isBackspace,Node node,Node rightParagraph,Node leftParagraph){
  org.xwiki.gwt.dom.client.Document document=getTextArea().getDocument();
  Range range=document.createRange();
  if (isBackspace) {
    range.setStartAfter(document.getBody().getFirstChild());
    range.setEndBefore(node);
  }
 else {
    range.setStartAfter(node);
    range.setEndBefore(document.getBody().getLastChild());
  }
  TreeOperation op=null;
  List<Text> nonEmptyTextNodes=getNonEmptyTextNodes(range);
  if (nonEmptyTextNodes.size() > 0) {
    int idx=isBackspace ? nonEmptyTextNodes.size() - 1 : 0;
    Node prevNonEmptyTextNode=nonEmptyTextNodes.get(idx);
    log.fine(""String_Node_Str"" + prevNonEmptyTextNode.getNodeValue());
    List<Integer> path;
    if (node.getParentNode() == prevNonEmptyTextNode.getParentNode()) {
      int deletePos=isBackspace ? prevNonEmptyTextNode.getNodeValue().length() - 1 : 0;
      path=TreeHelper.getLocator(prevNonEmptyTextNode);
      op=new TreeDeleteText(clientJupiter.getSiteId(),deletePos,TreeHelper.toIntArray(path));
    }
 else {
      int lBbrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
      int rBbrCount=Element.as(rightParagraph).getElementsByTagName(BR).getLength();
      path=TreeHelper.getLocator(prevNonEmptyTextNode);
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBbrCount,rightParagraph.getChildCount() - rBbrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
  }
  return op;
}",0.961967213114754
178457,"public TreeOperation handleBackspaceOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  Element rightParagraph=ancestorBelowParagraph.getParentElement();
  Node leftParagraph=rightParagraph.getPreviousSibling();
  Text textNode=Text.as(startContainer);
  if (pos == 0) {
    if (leftParagraph != null) {
      boolean merge=false;
      if (textNode != ancestorBelowParagraph && textNode == ancestorBelowParagraph.getFirstChild()) {
        merge=true;
      }
      if (textNode == ancestorBelowParagraph && ancestorBelowParagraph == rightParagraph.getFirstChild()) {
        merge=true;
      }
      if (merge) {
        int brCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        op=skipBackspaceOnEmptyTexts(textNode,rightParagraph,leftParagraph);
      }
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    pos=pos - 1;
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
  return op;
}","public TreeOperation handleBackspaceOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  Element rightParagraph=ancestorBelowParagraph.getParentElement();
  Node leftParagraph=rightParagraph.getPreviousSibling();
  Text textNode=Text.as(startContainer);
  if (pos == 0) {
    if (leftParagraph != null) {
      boolean merge=false;
      if (textNode != ancestorBelowParagraph && textNode == ancestorBelowParagraph.getFirstChild()) {
        merge=true;
      }
      if (textNode == ancestorBelowParagraph && ancestorBelowParagraph == rightParagraph.getFirstChild()) {
        merge=true;
      }
      if (merge) {
        int lBrCount=Element.as(leftParagraph).getElementsByTagName(BR).getLength();
        int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        op=skipBackspaceOnEmptyTexts(textNode,rightParagraph,leftParagraph);
      }
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    pos=pos - 1;
    op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
  return op;
}",0.954766875434934
178458,"public TreeOperation handleDeleteOnElement(Range caret){
  Element element=Element.as(caret.getStartContainer());
  List<Integer> path=TreeHelper.getLocator(element);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  if (P.equalsIgnoreCase(element.getNodeName())) {
    leftParagraph=element;
  }
 else {
    log.severe(""String_Node_Str"");
    leftParagraph=getAncestorBelowParagraph(element).getParentElement();
  }
  rightParagraph=leftParagraph.getNextSiblingElement();
  if (rightParagraph != null) {
    int brCount=rightParagraph.getElementsByTagName(BR).getLength();
    op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    log.fine(""String_Node_Str"");
  }
  return op;
}","public TreeOperation handleDeleteOnElement(Range caret){
  Element element=Element.as(caret.getStartContainer());
  List<Integer> path=TreeHelper.getLocator(element);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  if (P.equalsIgnoreCase(element.getNodeName())) {
    leftParagraph=element;
  }
 else {
    log.severe(""String_Node_Str"");
    leftParagraph=getAncestorBelowParagraph(element).getParentElement();
  }
  rightParagraph=leftParagraph.getNextSiblingElement();
  if (rightParagraph != null) {
    int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
    int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
    op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    log.fine(""String_Node_Str"");
  }
  return op;
}",0.9475446428571428
178459,"public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() == pos) {
    if (isMerge) {
      int brCount=rightParagraph.getElementsByTagName(BR).getLength();
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,leftParagraph,rightParagraph);
  }
  return op;
}","public TreeOperation handleDeleteOnTextNode(Range caret){
  int pos=caret.getStartOffset();
  Node startContainer=caret.getStartContainer();
  Text textNode=Text.as(startContainer);
  List<Integer> path=TreeHelper.getLocator(startContainer);
  TreeOperation op=null;
  Element leftParagraph;
  Element rightParagraph;
  final Node ancestorBelowParagraph=getAncestorBelowParagraph(startContainer);
  leftParagraph=ancestorBelowParagraph.getParentElement();
  rightParagraph=leftParagraph.getNextSiblingElement();
  boolean isMerge=false;
  if (textNode != ancestorBelowParagraph) {
    isMerge=ancestorBelowParagraph == ancestorBelowParagraph.getParentNode().getLastChild();
    isMerge=isMerge && textNode == ancestorBelowParagraph.getLastChild();
  }
 else {
    isMerge=textNode == ancestorBelowParagraph.getParentElement().getLastChild();
  }
  isMerge=isMerge && ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str"")));
  if (textNode.getLength() == pos) {
    if (isMerge) {
      int lBrCount=leftParagraph.getElementsByTagName(BR).getLength();
      int rBrCount=rightParagraph.getElementsByTagName(BR).getLength();
      op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0) + 1,leftParagraph.getChildCount() - lBrCount,rightParagraph.getChildCount() - rBrCount);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      log.fine(""String_Node_Str"");
    }
  }
 else {
    op=skipDeleteOnEmptyTexts(textNode,leftParagraph,rightParagraph);
  }
  return op;
}",0.9678068410462776
178460,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        Node n;
        Element rightParagraph;
        Node leftParagraph;
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          n=getAncestorBelowParagraph(startContainer);
          rightParagraph=n.getParentElement();
          leftParagraph=rightParagraph.getPreviousSibling();
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                int brCount=rightParagraph.getElementsByTagName(BR).getLength();
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                op=skipBackspaceOnEmptyTexts(textNode,path,rightParagraph,leftParagraph);
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          boolean merge=false;
          if (""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
            rightParagraph=element;
            leftParagraph=rightParagraph.getPreviousSibling();
          }
 else {
            n=getAncestorBelowParagraph(startContainer);
            rightParagraph=n.getParentElement();
            leftParagraph=rightParagraph.getPreviousSibling();
            if (pos == 0 && ""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
              merge=(element == n && n == rightParagraph.getFirstChild());
            }
          }
          merge=merge && (leftParagraph != null);
          if (merge) {
            int brCount=rightParagraph.getElementsByTagName(BR).getLength();
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
            op.setPath(TreeHelper.toIntArray(path));
          }
 else {
            log.severe(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
            event.preventDefault();
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    Element leftParagraph;
    Element rightParagraph;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      leftParagraph=getAncestorBelowParagraph(startContainer).getParentElement();
      rightParagraph=leftParagraph.getNextSiblingElement();
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        if ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          int brCount=rightParagraph.getElementsByTagName(BR).getLength();
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
          op.setPath(TreeHelper.toIntArray(path));
        }
 else {
          log.fine(""String_Node_Str"");
          event.preventDefault();
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      Element element=Element.as(startContainer);
      if (""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
        leftParagraph=element;
      }
 else {
        leftParagraph=getAncestorBelowParagraph(element).getParentElement();
      }
      rightParagraph=leftParagraph.getNextSiblingElement();
      if (rightParagraph != null) {
        int brCount=rightParagraph.getElementsByTagName(BR).getLength();
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
        event.preventDefault();
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        Node n;
        Element rightParagraph;
        Node leftParagraph;
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          n=getAncestorBelowParagraph(startContainer);
          rightParagraph=n.getParentElement();
          leftParagraph=rightParagraph.getPreviousSibling();
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                int brCount=rightParagraph.getElementsByTagName(BR).getLength();
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                op=skipBackspaceOnEmptyTexts(textNode,path,rightParagraph,leftParagraph);
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          boolean merge=false;
          if (""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
            rightParagraph=element;
            merge=true;
          }
 else {
            n=getAncestorBelowParagraph(startContainer);
            rightParagraph=n.getParentElement();
            if (pos == 0 && ""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
              merge=(element == n && n == rightParagraph.getFirstChild());
            }
          }
          leftParagraph=rightParagraph.getPreviousSibling();
          merge=merge && (leftParagraph != null);
          if (merge) {
            int brCount=rightParagraph.getElementsByTagName(BR).getLength();
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
            op.setPath(TreeHelper.toIntArray(path));
          }
 else {
            log.severe(""String_Node_Str"" + element.getTagName() + ""String_Node_Str"");
            event.preventDefault();
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    Element leftParagraph;
    Element rightParagraph;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      leftParagraph=getAncestorBelowParagraph(startContainer).getParentElement();
      rightParagraph=leftParagraph.getNextSiblingElement();
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        if ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          int brCount=rightParagraph.getElementsByTagName(BR).getLength();
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
          op.setPath(TreeHelper.toIntArray(path));
        }
 else {
          log.fine(""String_Node_Str"");
          event.preventDefault();
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      Element element=Element.as(startContainer);
      if (""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
        leftParagraph=element;
      }
 else {
        leftParagraph=getAncestorBelowParagraph(element).getParentElement();
      }
      rightParagraph=leftParagraph.getNextSiblingElement();
      if (rightParagraph != null) {
        int brCount=rightParagraph.getElementsByTagName(BR).getLength();
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount() - brCount);
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
        event.preventDefault();
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.986990584345576
178461,"/** 
 * @param range the selection range, usually a collapsed range which is the caret position
 * @return all the non-empty text nodes from the right of the caret within the same paragraph
 */
private static List<Text> getRightTextNodesInSameP(Range range){
  Range rightRange=range.cloneRange();
  Node parentPNode=getAncestorParagraph(range.getEndContainer());
  rightRange.setEndAfter(parentPNode.getLastChild());
  return getNonEmptyTextNodes(rightRange);
}","/** 
 * @param range the selection range, usually a collapsed range which is the caret position
 * @return all the non-empty text nodes from the right of the caret within the same paragraph
 */
private static List<Text> getRightTextNodesInSameP(Range range){
  Range rightRange=range.cloneRange();
  Node parentPNode=getAncestorParagraph(range.getEndContainer());
  rightRange.setEnd(parentPNode,parentPNode.getChildCount());
  return getNonEmptyTextNodes(rightRange);
}",0.9721030042918456
178462,"/** 
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range computeNewCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer())) {
      return oldCaretPosition;
    }
 else {
      List<Text> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      int leftSize=leftTextNodesInSameP.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftTextNodesInSameP.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        List<Text> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        if (rightTextNodesInSameP.size() > 0) {
          Text firstRightTextNode=rightTextNodesInSameP.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}","/** 
 * @param oldCaretPosition the old caret position
 * @return the new caret position, as described above
 */
public static Range computeNewCaretPosition(Range oldCaretPosition){
  Range newCaretPos=null;
  if (oldCaretPosition.isCollapsed()) {
    newCaretPos=oldCaretPosition.cloneRange();
    if (isNonEmptyTextNode(oldCaretPosition.getStartContainer()) && oldCaretPosition.getStartOffset() > 0) {
      return oldCaretPosition;
    }
 else {
      List<Text> leftTextNodesInSameP=getLeftTextNodesInSameP(oldCaretPosition);
      int leftSize=leftTextNodesInSameP.size();
      if (leftSize > 0) {
        Text firstLeftTextNode=leftTextNodesInSameP.get(leftSize - 1);
        newCaretPos.setStart(firstLeftTextNode,firstLeftTextNode.getLength());
      }
 else {
        List<Text> rightTextNodesInSameP=getRightTextNodesInSameP(oldCaretPosition);
        if (rightTextNodesInSameP.size() > 0) {
          Text firstRightTextNode=rightTextNodesInSameP.get(0);
          newCaretPos.setStart(firstRightTextNode,0);
        }
      }
    }
    newCaretPos.collapse(true);
  }
  return newCaretPos;
}",0.981079833871712
178463,"public void testCaretInChildElementStartOfTextNode(){
  Element element=getContainer().getFirstChildElement();
  assertNotNull(element);
  assertEquals(""String_Node_Str"",""String_Node_Str"",element.getNodeName().toLowerCase());
  assertEquals(Node.TEXT_NODE,element.getFirstChild().getNodeType());
  Text textNode=Text.as(element.getFirstChild());
  oldCaretPos.setStart(textNode,0);
  oldCaretPos.setEnd(textNode,0);
  Range newCaretPos=EditorUtils.computeNewCaretPosition(oldCaretPos);
  assertEquals(Node.TEXT_NODE,newCaretPos.getStartContainer().getNodeType());
  assertEquals(textNode,newCaretPos.getStartContainer());
  assertEquals(0,newCaretPos.getStartOffset());
  assertTrue(newCaretPos.isCollapsed());
}","public void testCaretInChildElementStartOfTextNode(){
  Element element=getContainer().getFirstChildElement();
  assertNotNull(element);
  assertEquals(""String_Node_Str"",""String_Node_Str"",element.getNodeName().toLowerCase());
  assertEquals(Node.TEXT_NODE,element.getFirstChild().getNodeType());
  Text textNode=Text.as(element.getFirstChild());
  oldCaretPos.setStart(textNode,0);
  oldCaretPos.setEnd(textNode,0);
  Range newCaretPos=EditorUtils.computeNewCaretPosition(oldCaretPos);
  Text expectedTextNode=Text.as(getContainer().getFirstChild());
  assertEquals(Node.TEXT_NODE,expectedTextNode.getNodeType());
  assertEquals(Node.TEXT_NODE,newCaretPos.getStartContainer().getNodeType());
  assertEquals(expectedTextNode,newCaretPos.getStartContainer());
  assertEquals(expectedTextNode.getLength(),newCaretPos.getStartOffset());
  assertTrue(newCaretPos.isCollapsed());
}",0.8947700063011972
178464,"public void testCaretAfterSpanStartOfTextNode(){
  Element spanElement=getContainer().getFirstChildElement();
  assertNotNull(spanElement);
  assertEquals(""String_Node_Str"",""String_Node_Str"",spanElement.getNodeName().toLowerCase());
  Text expectedText=Text.as(spanElement.getFirstChild());
  assertEquals(Node.TEXT_NODE,expectedText.getNodeType());
  oldCaretPos.setStart(expectedText,0);
  oldCaretPos.setEnd(expectedText,0);
  Range newCaretPos=EditorUtils.computeNewCaretPosition(oldCaretPos);
  assertEquals(oldCaretPos,newCaretPos);
  assertEquals(Node.TEXT_NODE,newCaretPos.getStartContainer().getNodeType());
  assertEquals(expectedText,newCaretPos.getStartContainer());
  assertEquals(0,newCaretPos.getStartOffset());
  assertTrue(newCaretPos.isCollapsed());
}","public void testCaretAfterSpanStartOfTextNode(){
  Element spanElement=getContainer().getFirstChildElement();
  assertNotNull(spanElement);
  assertEquals(""String_Node_Str"",""String_Node_Str"",spanElement.getNodeName().toLowerCase());
  Text text=Text.as(spanElement.getNextSibling());
  assertEquals(Node.TEXT_NODE,text.getNodeType());
  oldCaretPos.setStart(text,0);
  oldCaretPos.setEnd(text,0);
  Range newCaretPos=EditorUtils.computeNewCaretPosition(oldCaretPos);
  Text expectedText=Text.as(spanElement.getFirstChild());
  assertEquals(Node.TEXT_NODE,expectedText.getNodeType());
  assertEquals(Node.TEXT_NODE,newCaretPos.getStartContainer().getNodeType());
  assertEquals(expectedText,newCaretPos.getStartContainer());
  assertEquals(expectedText.getLength(),newCaretPos.getStartOffset());
  assertTrue(newCaretPos.isCollapsed());
}",0.8542963885429639
178465,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          Node n=getAncestorBelowParagraph(textNode);
          Node rightParagraph=n.getParentElement();
          Node leftParagraph=rightParagraph.getPreviousSibling();
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.fine(""String_Node_Str"");
                op=handleBackspace(textNode,pos);
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          Node n=getAncestorBelowParagraph(element);
          Node rightParagraph=n.getParentNode();
          Node leftParagraph=rightParagraph.getPreviousSibling();
          if (pos == 0 && ""String_Node_Str"".equalsIgnoreCase(n.getNodeName())) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (element == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.severe(""String_Node_Str"");
                event.preventDefault();
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(TreeHelper.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        Node n=getAncestorBelowParagraph(startContainer);
        Element rightParagraph=n.getParentElement();
        Node leftParagraph=rightParagraph.getPreviousSibling();
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.fine(""String_Node_Str"");
                op=handleBackspace(textNode,pos);
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          if (pos == 0 && ""String_Node_Str"".equalsIgnoreCase(n.getNodeName())) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (element == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.severe(""String_Node_Str"");
                event.preventDefault();
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    Node n=getAncestorBelowParagraph(startContainer);
    Element leftParagraph=n.getParentElement();
    Element rightParagraph=leftParagraph.getNextSiblingElement();
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        if ((rightParagraph != null) && (!rightParagraph.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
          op.setPath(TreeHelper.toIntArray(path));
        }
 else {
          log.fine(""String_Node_Str"");
          event.preventDefault();
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (rightParagraph != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
        op.setPath(TreeHelper.toIntArray(path));
      }
 else {
        log.fine(""String_Node_Str"");
        event.preventDefault();
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.8966397277754147
178466,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            if (textNode.getParentElement().getPreviousSibling() != null) {
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(TreeHelper.toIntArray(path));
            }
 else {
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(TreeHelper.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=textNode;
  while (!""String_Node_Str"".equalsIgnoreCase(n.getParentNode().getNodeName())) {
    n=n.getParentNode();
  }
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          Node n=getAncestorBelowParagraph(textNode);
          Node rightParagraph=n.getParentElement();
          Node leftParagraph=rightParagraph.getPreviousSibling();
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.severe(""String_Node_Str"");
              }
            }
 else {
              log.fine(""String_Node_Str"");
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(TreeHelper.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.899135446685879
178467,"public void removeChild(){
  for (int i=0; i < this.wrappedTree.nbChildren(); i++) {
    this.wrappedTree.removeChild(i);
  }
}","public void removeChild(){
  int childCount=this.wrappedTree.nbChildren();
  for (int i=0; i < childCount; i++) {
    this.wrappedTree.removeChild(0);
  }
}",0.8056537102473498
178468,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          Node n=getAncestorBelowParagraph(textNode);
          Node rightParagraph=n.getParentElement();
          Node leftParagraph=rightParagraph.getPreviousSibling();
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.severe(""String_Node_Str"");
              }
            }
 else {
              log.fine(""String_Node_Str"");
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(TreeHelper.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=TreeHelper.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          Node n=getAncestorBelowParagraph(textNode);
          Node rightParagraph=n.getParentElement();
          Node leftParagraph=rightParagraph.getPreviousSibling();
          if (pos == 0) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (textNode != n && textNode == n.getFirstChild()) {
                merge=true;
              }
              if (textNode == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.severe(""String_Node_Str"");
                event.preventDefault();
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
 else {
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          Element element=Element.as(startContainer);
          Node n=getAncestorBelowParagraph(element);
          Node rightParagraph=n.getParentNode();
          Node leftParagraph=rightParagraph.getPreviousSibling();
          if (pos == 0 && ""String_Node_Str"".equalsIgnoreCase(n.getNodeName())) {
            if (leftParagraph != null) {
              boolean merge=false;
              if (element == n && n == rightParagraph.getFirstChild()) {
                merge=true;
              }
              if (merge) {
                op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),leftParagraph.getChildCount(),rightParagraph.getChildCount());
                op.setPath(TreeHelper.toIntArray(path));
              }
 else {
                log.severe(""String_Node_Str"");
                event.preventDefault();
              }
            }
 else {
              log.fine(""String_Node_Str"");
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(TreeHelper.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(TreeHelper.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=TreeHelper.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  Node n=getAncestorBelowParagraph(textNode);
  if (n.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(TreeHelper.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(TreeHelper.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,TreeHelper.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.9084985572000372
178469,"/** 
 * @param text the text node whose ancestor is to be returned
 * @return the ancestor for this text node which is just below the paragraph ancestor
 */
private Node getAncestorBelowParagraph(Text text){
  Node n=text;
  while (!""String_Node_Str"".equalsIgnoreCase(n.getParentNode().getNodeName())) {
    n=n.getParentNode();
  }
  return n;
}","/** 
 * @param node the node whose ancestor is to be returned
 * @return the ancestor for this node which is just below the paragraph ancestor
 */
private Node getAncestorBelowParagraph(Node node){
  Node ancestor=node;
  while (!""String_Node_Str"".equalsIgnoreCase(ancestor.getParentNode().getNodeName())) {
    ancestor=ancestor.getParentNode();
  }
  return ancestor;
}",0.8647140864714087
178470,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=treeOperationFactory.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(treeOperationFactory.toIntArray(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(treeOperationFactory.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(treeOperationFactory.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=treeOperationFactory.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((textNode.getNextSibling() == null || BR.equalsIgnoreCase(textNode.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(treeOperationFactory.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=treeOperationFactory.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(treeOperationFactory.toIntArray(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(treeOperationFactory.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(treeOperationFactory.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=treeOperationFactory.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  Node n=textNode;
  while (!""String_Node_Str"".equalsIgnoreCase(n.getParentNode().getNodeName())) {
    n=n.getParentNode();
  }
  if ((n.getNextSibling() == null || BR.equalsIgnoreCase(n.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (element.getPreviousSibling() == null && 0 == pos) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(treeOperationFactory.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.9842595566977193
178471,"/** 
 * Adds the underlying style to the given text node.
 * @param text           the target text node
 * @param firstCharIndex the first character on which we apply the style
 * @param lastCharIndex  the last character on which we apply the style
 * @return a text fragment indicating what has been formatted
 */
protected TextFragment addStyle(Text text,int firstCharIndex,int lastCharIndex){
  if (matchesStyle(text)) {
    return new TextFragment(text,firstCharIndex,lastCharIndex);
  }
  text.crop(firstCharIndex,lastCharIndex);
  Element element=(Element)text.getParentElement();
  if (SPAN.equalsIgnoreCase(element.getNodeName())) {
    element.getStyle().setProperty(getProperty().getJSName(),propertyValue);
  }
 else {
    SpanElement spanElement=Document.get().createSpanElement();
    spanElement.getStyle().setProperty(getProperty().getJSName(),propertyValue);
    element.replaceChild(spanElement,text);
    spanElement.appendChild(text);
  }
  return new TextFragment(text,0,text.getLength());
}","/** 
 * Adds the underlying style to the given text node.
 * @param text           the target text node
 * @param firstCharIndex the first character on which we apply the style
 * @param lastCharIndex  the last character on which we apply the style
 * @return a text fragment indicating what has been formatted
 */
protected TextFragment addStyle(Text text,int firstCharIndex,int lastCharIndex){
  if (matchesStyle(text)) {
    return new TextFragment(text,firstCharIndex,lastCharIndex);
  }
  text.crop(firstCharIndex,lastCharIndex);
  Element element=(Element)text.getParentElement();
  if (SPAN.equalsIgnoreCase(element.getNodeName())) {
    if (element.getChildCount() != 1) {
      splitParentNode(text,element);
    }
    element.getStyle().setProperty(getProperty().getJSName(),propertyValue);
  }
 else {
    SpanElement spanElement=Document.get().createSpanElement();
    spanElement.getStyle().setProperty(getProperty().getJSName(),propertyValue);
    element.replaceChild(spanElement,text);
    spanElement.appendChild(text);
  }
  return new TextFragment(text,0,text.getLength());
}",0.9605700712589074
178472,"@Override public boolean isExecuted(){
  Selection selection=document.getSelection();
  for (int i=0; i < selection.getRangeCount(); i++) {
    if (!isExecuted(selection.getRangeAt(i))) {
      return false;
    }
  }
  return selection.getRangeCount() > 0;
}","@Override public boolean isExecuted(){
  return isExecuted(styleRange);
}",0.4096385542168674
178473,"/** 
 * Override because of a bug
 */
@Override protected boolean matchesInheritedStyle(Element element){
  final com.google.gwt.dom.client.Style style=element.getStyle();
  String computedValue;
  if (style != null && style.getProperty(getProperty().getJSName()).length() > 0) {
    log.fine(""String_Node_Str"");
    computedValue=style.getProperty(getProperty().getJSName());
  }
 else {
    log.fine(""String_Node_Str"");
    computedValue=element.getComputedStyleProperty(getProperty().getJSName());
  }
  log.fine(""String_Node_Str"" + computedValue);
  if (getProperty().isMultipleValue()) {
    return computedValue != null && computedValue.toLowerCase().contains(propertyValue);
  }
 else {
    return propertyValue.equalsIgnoreCase(computedValue);
  }
}","/** 
 * Override because of a bug
 */
@Override protected boolean matchesInheritedStyle(Element element){
  final com.google.gwt.dom.client.Style style=element.getStyle();
  String computedValue;
  if (style != null && style.getProperty(getProperty().getJSName()).length() > 0) {
    computedValue=style.getProperty(getProperty().getJSName());
  }
 else {
    computedValue=element.getComputedStyleProperty(getProperty().getJSName());
  }
  log.fine(""String_Node_Str"" + computedValue);
  if (getProperty().isMultipleValue()) {
    return computedValue != null && computedValue.toLowerCase().contains(propertyValue);
  }
 else {
    return propertyValue.equalsIgnoreCase(computedValue);
  }
}",0.7375690607734806
178474,"/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  Node bodyNode=textArea.getDocument().getBody();
  final Element p=Document.get().createElement(""String_Node_Str"");
  if (bodyNode.getChildCount() == 0) {
    bodyNode.insertFirst(p);
  }
 else   if (bodyNode.getChildCount() == 1 && bodyNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    bodyNode.insertBefore(p,bodyNode.getFirstChild());
  }
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}","/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  Node bodyNode=textArea.getDocument().getBody();
  final Element p=Document.get().createElement(""String_Node_Str"");
  if (bodyNode.getChildCount() == 0) {
    bodyNode.insertFirst(p);
  }
 else   if (bodyNode.getChildCount() == 1 && bodyNode.getFirstChild().getNodeName().equalsIgnoreCase(BR)) {
    bodyNode.insertBefore(p,bodyNode.getFirstChild());
  }
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}",0.9919932574799832
178475,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(convertPath(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
            }
 else {
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if (textNode.getNextSibling() == null && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(convertPath(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  pos=path.get(0);
  op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
  op.setPath(convertPath(path));
}
}
break;
default :
break;
}
if (op != null) {
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(convertPath(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
            }
 else {
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((textNode.getNextSibling() == null || BR.equalsIgnoreCase(textNode.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(convertPath(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  int brCount=element.getElementsByTagName(BR).getLength();
  int childCount=element.getChildCount();
  boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
  boolean isAfterLastTag=(pos == childCount);
  if (isBeforeLastBrTag || isAfterLastTag) {
    pos=path.get(0) + 1;
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(convertPath(path));
  }
 else {
    pos=range.getEndOffset();
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
  }
}
}
break;
default :
break;
}
if (op != null) {
clientJupiter.generate(op);
}
}
}",0.9103575184016824
178476,"@Override public boolean isExecuted(){
  Selection selection=document.getSelection();
  for (int i=0; i < selection.getRangeCount(); i++) {
    if (!isExecuted(selection.getRangeAt(i))) {
      return false;
    }
  }
  return selection.getRangeCount() > 0;
}","@Override public boolean isExecuted(){
  return ((TreeStyle)DomStyle.this.getOperation()).addStyle;
}",0.3444444444444444
178477,"@Override protected Range execute(Range range,String parameter){
  return super.execute(range,parameter);
}","/** 
 * {@inheritDoc}
 * @see InlineStyleExecutable#execute(Text,int,int,String)
 */
protected TextFragment execute(Text text,int startIndex,int endIndex,String parameter){
  boolean wasExecuted=isExecuted();
  log.info(""String_Node_Str"" + wasExecuted);
  return wasExecuted ? removeStyle(text,startIndex,endIndex) : addStyle(text,startIndex,endIndex);
}",0.0303687635574837
178478,"/** 
 * Adds the underlying style to the given text node.
 * @param text           the target text node
 * @param firstCharIndex the first character on which we apply the style
 * @param lastCharIndex  the last character on which we apply the style
 * @return a text fragment indicating what has been formatted
 */
protected TextFragment addStyle(Text text,int firstCharIndex,int lastCharIndex){
  if (matchesStyle(text)) {
    return new TextFragment(text,firstCharIndex,lastCharIndex);
  }
  text.crop(firstCharIndex,lastCharIndex);
  Element element=(Element)text.getParentElement();
  if (""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
    element.getStyle().setProperty(getProperty().getJSName(),propertyValue);
  }
 else {
    text.removeFromParent();
    SpanElement spanElement=Document.get().createSpanElement();
    spanElement.setAttribute(getProperty().getJSName(),propertyValue);
    spanElement.appendChild(text);
    element.appendChild(spanElement);
  }
  return new TextFragment(text,0,text.getLength());
}","/** 
 * Adds the underlying style to the given text node.
 * @param text           the target text node
 * @param firstCharIndex the first character on which we apply the style
 * @param lastCharIndex  the last character on which we apply the style
 * @return a text fragment indicating what has been formatted
 */
protected TextFragment addStyle(Text text,int firstCharIndex,int lastCharIndex){
  if (matchesStyle(text)) {
    return new TextFragment(text,firstCharIndex,lastCharIndex);
  }
  text.crop(firstCharIndex,lastCharIndex);
  Element element=(Element)text.getParentElement();
  if (SPAN.equalsIgnoreCase(element.getNodeName())) {
    element.getStyle().setProperty(getProperty().getJSName(),propertyValue);
  }
 else {
    SpanElement spanElement=Document.get().createSpanElement();
    spanElement.getStyle().setProperty(getProperty().getJSName(),propertyValue);
    element.replaceChild(spanElement,text);
    spanElement.appendChild(text);
  }
  return new TextFragment(text,0,text.getLength());
}",0.9208984375
178479,"/** 
 * {@inheritDoc}
 * @see InlineStyleExecutable#execute(Text,int,int,String)
 */
protected TextFragment execute(Text text,int startIndex,int endIndex,String parameter){
  boolean wasExecuted=isExecuted();
  log.info(""String_Node_Str"" + wasExecuted);
  return wasExecuted ? removeStyle(text,startIndex,endIndex) : addStyle(text,startIndex,endIndex);
}","@Override protected TextFragment execute(Text text,int startIndex,int endIndex,String parameter){
  boolean addStyle=isExecuted();
  return addStyle ? addStyle(text,startIndex,endIndex) : removeStyle(text,startIndex,endIndex);
}",0.2233676975945017
178480,"public TreeStyle(int siteId,int[] path,int start,int end,String param,String value,boolean addStyle,boolean splitLeft,boolean splitRight){
  this.path=path;
  this.start=start;
  this.end=end;
  this.param=param;
  this.value=value;
  this.siteId=siteId;
  this.addStyle=addStyle;
  this.splitLeft=splitLeft;
  this.splitRight=splitRight;
}","public TreeStyle(int siteId,int[] path,int start,int end,String param,String value,boolean addStyle,boolean splitLeft,boolean splitRight){
  this.path=path;
  this.start=Math.min(start,end);
  this.end=Math.max(start,end);
  this.param=param;
  this.value=value;
  this.siteId=siteId;
  this.addStyle=addStyle;
  this.splitLeft=splitLeft;
  this.splitRight=splitRight;
}",0.8985915492957747
178481,"public void execute(Tree root){
  Tree tree=root;
  for (int i=0; i < path.length - 1; i++) {
    tree=tree.getChild(path[i]);
  }
  if (!splitLeft) {
    if (!splitRight) {
      if (!addStyle) {
        tree.setAttribute(param,value);
      }
 else {
        Tree tc=tree.removeChild(path[path.length - 1]);
        Tree ts=TreeFactory.createElementTree(""String_Node_Str"");
        ts.setAttribute(param,value);
        ts.addChild(tc);
        tree.addChild(ts,path[path.length - 1]);
        if (tc.isInvisible()) {
          ts.hide();
        }
      }
    }
 else {
      if (!addStyle) {
        String text=tree.getChild(path[path.length - 1]).split(end);
        Tree tc=TreeFactory.createTextTree(text);
        Tree ts=tree.cloneNode();
        tree.setAttribute(param,value);
        ts.addChild(tc);
        Tree parent=tree.getParent();
        parent.addChild(ts,path[path.length - 2] + 1);
        if (tree.isInvisible()) {
          ts.hide();
        }
      }
 else {
        Tree t=tree.getChild(path[path.length - 1]);
        Tree tc=TreeFactory.createTextTree(t.split(end));
        Tree ts=TreeFactory.createElementTree(""String_Node_Str"");
        ts.setAttribute(param,value);
        ts.addChild(tree.removeChild(path[path.length - 1]));
        tree.addChild(tc,path[path.length - 1]);
        tree.addChild(ts,path[path.length - 1]);
        if (t.isInvisible()) {
          tc.hide();
          ts.hide();
        }
      }
    }
  }
 else {
    if (!splitRight) {
      if (!addStyle) {
        Tree tc=TreeFactory.createTextTree(tree.getChild(path[path.length - 1]).split(start));
        Tree ts=tree.cloneNode();
        ts.setAttribute(param,value);
        ts.addChild(tc);
        Tree parent=tree.getParent();
        parent.addChild(ts,path[path.length - 2] + 1);
        if (tree.isInvisible()) {
          ts.hide();
        }
      }
 else {
        Tree t=tree.getChild(path[path.length - 1]);
        Tree tc=TreeFactory.createTextTree(t.split(start));
        Tree ts=TreeFactory.createElementTree(""String_Node_Str"");
        ts.setAttribute(param,value);
        ts.addChild(tc);
        tree.addChild(ts,path[path.length - 1] + 1);
        if (t.isInvisible()) {
          tc.hide();
          ts.hide();
        }
      }
    }
 else {
      if (!addStyle) {
        Tree tc=TreeFactory.createTextTree(tree.getChild(path[path.length - 1]).split(start));
        Tree tc2=TreeFactory.createTextTree(tc.split(end - start));
        Tree ts=tree.cloneNode();
        Tree ts2=tree.cloneNode();
        ts.setAttribute(param,value);
        ts.addChild(tc);
        ts2.addChild(tc2);
        Tree parent=tree.getParent();
        parent.addChild(ts,path[path.length - 2] + 1);
        parent.addChild(ts2,path[path.length - 2] + 2);
        if (tree.isInvisible()) {
          ts.hide();
          ts2.hide();
        }
      }
 else {
        Tree t=tree.getChild(path[path.length - 1]);
        Tree tc=TreeFactory.createTextTree(t.split(start));
        Tree tc2=TreeFactory.createTextTree(tc.split(end - start));
        Tree ts=TreeFactory.createElementTree(""String_Node_Str"");
        ts.setAttribute(param,value);
        ts.addChild(tc);
        tree.addChild(ts,path[path.length - 1] + 1);
        tree.addChild(tc2,path[path.length - 1] + 2);
        if (t.isInvisible()) {
          tc.hide();
          ts.hide();
          tc2.hide();
        }
      }
    }
  }
}","public void execute(Tree root){
  Tree tree=root;
  for (int i=0; i < path.length - 1; i++) {
    tree=tree.getChild(path[i]);
  }
  if (!splitLeft) {
    if (!splitRight) {
      if (!addStyle) {
        tree.setAttribute(param,value);
      }
 else {
        Tree tc=tree.removeChild(path[path.length - 1]);
        Tree ts=TreeFactory.createElementTree(SPAN);
        ts.setAttribute(param,value);
        ts.addChild(tc);
        tree.addChild(ts,path[path.length - 1]);
        if (tc.isInvisible()) {
          ts.hide();
        }
      }
    }
 else {
      if (!addStyle) {
        String text=tree.getChild(path[path.length - 1]).split(end);
        Tree tc=TreeFactory.createTextTree(text);
        Tree ts=tree.cloneNode();
        tree.setAttribute(param,value);
        ts.addChild(tc);
        Tree parent=tree.getParent();
        parent.addChild(ts,path[path.length - 2] + 1);
        if (tree.isInvisible()) {
          ts.hide();
        }
      }
 else {
        Tree t=tree.getChild(path[path.length - 1]);
        Tree tc=TreeFactory.createTextTree(t.split(end));
        Tree ts=TreeFactory.createElementTree(SPAN);
        ts.setAttribute(param,value);
        ts.addChild(tree.removeChild(path[path.length - 1]));
        tree.addChild(tc,path[path.length - 1]);
        tree.addChild(ts,path[path.length - 1]);
        if (t.isInvisible()) {
          tc.hide();
          ts.hide();
        }
      }
    }
  }
 else {
    if (!splitRight) {
      if (!addStyle) {
        Tree tc=TreeFactory.createTextTree(tree.getChild(path[path.length - 1]).split(start));
        Tree ts=tree.cloneNode();
        ts.setAttribute(param,value);
        ts.addChild(tc);
        Tree parent=tree.getParent();
        parent.addChild(ts,path[path.length - 2] + 1);
        if (tree.isInvisible()) {
          ts.hide();
        }
      }
 else {
        Tree t=tree.getChild(path[path.length - 1]);
        Tree tc=TreeFactory.createTextTree(t.split(start));
        Tree ts=TreeFactory.createElementTree(SPAN);
        ts.setAttribute(param,value);
        ts.addChild(tc);
        tree.addChild(ts,path[path.length - 1] + 1);
        if (t.isInvisible()) {
          tc.hide();
          ts.hide();
        }
      }
    }
 else {
      if (!addStyle) {
        Tree tc=TreeFactory.createTextTree(tree.getChild(path[path.length - 1]).split(start));
        Tree tc2=TreeFactory.createTextTree(tc.split(end - start));
        Tree ts=tree.cloneNode();
        Tree ts2=tree.cloneNode();
        ts.setAttribute(param,value);
        ts.addChild(tc);
        ts2.addChild(tc2);
        Tree parent=tree.getParent();
        parent.addChild(ts,path[path.length - 2] + 1);
        parent.addChild(ts2,path[path.length - 2] + 2);
        if (tree.isInvisible()) {
          ts.hide();
          ts2.hide();
        }
      }
 else {
        Tree t=tree.getChild(path[path.length - 1]);
        Tree tc=TreeFactory.createTextTree(t.split(start));
        Tree tc2=TreeFactory.createTextTree(tc.split(end - start));
        Tree ts=TreeFactory.createElementTree(SPAN);
        ts.setAttribute(param,value);
        ts.addChild(tc);
        tree.addChild(ts,path[path.length - 1] + 1);
        tree.addChild(tc2,path[path.length - 1] + 2);
        if (t.isInvisible()) {
          tc.hide();
          ts.hide();
          tc2.hide();
        }
      }
    }
  }
}",0.9899882214369848
178482,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=treeOperationFactory.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(treeOperationFactory.toIntArray(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              log.severe(""String_Node_Str"");
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(treeOperationFactory.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(treeOperationFactory.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=treeOperationFactory.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((textNode.getNextSibling() == null || BR.equalsIgnoreCase(textNode.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (pos == 0) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(treeOperationFactory.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=treeOperationFactory.getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(treeOperationFactory.toIntArray(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
              log.severe(""String_Node_Str"");
            }
 else {
              event.preventDefault();
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(treeOperationFactory.toIntArray(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(treeOperationFactory.toIntArray(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=treeOperationFactory.getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((textNode.getNextSibling() == null || BR.equalsIgnoreCase(textNode.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (pos == 0) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(treeOperationFactory.toIntArray(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(treeOperationFactory.toIntArray(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,treeOperationFactory.toIntArray(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
if (!(op instanceof TreeInsertText || op instanceof TreeDeleteText)) {
event.preventDefault();
}
clientJupiter.generate(op);
}
}
}",0.9953010599934432
178483,"/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      String styleAttribute=""String_Node_Str"";
      if (Command.BOLD.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
 else       if (Command.ITALIC.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
 else       if (Command.UNDERLINE.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
 else       if (Command.STRIKE_THROUGH.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
      Range range=selection.getRangeAt(0);
      List<OperationTarget> targets=getIntermediaryTargets(range);
      log.info(targets.toString());
      for (      OperationTarget target : targets) {
        boolean addStyle=getTextArea().getCommandManager().isExecuted(command);
        int[] path=treeOperationFactory.toIntArray(target.getStartContainer());
        if (path.length == 2) {
          addStyle=true;
        }
        boolean splitLeft=true;
        int start=target.getStartOffset();
        if (start == 0) {
          splitLeft=false;
        }
        boolean splitRight=true;
        int end=target.getEndOffset();
        if (end == target.getDataLength()) {
          splitRight=false;
        }
        TreeOperation op=new TreeStyle(clientJupiter.getSiteId(),path,start,end,""String_Node_Str"",styleAttribute,addStyle,splitLeft,splitRight);
        clientJupiter.generate(op);
      }
      return true;
    }
  }
  return false;
}","/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      String styleAttribute=""String_Node_Str"";
      if (Command.BOLD.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
 else       if (Command.ITALIC.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
 else       if (Command.UNDERLINE.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
 else       if (Command.STRIKE_THROUGH.equals(command)) {
        styleAttribute=""String_Node_Str"";
      }
      Range range=selection.getRangeAt(0);
      List<OperationTarget> targets=getIntermediaryTargets(range);
      log.info(targets.toString());
      for (      OperationTarget target : targets) {
        boolean addStyle=!getTextArea().getCommandManager().isExecuted(command);
        log.fine(""String_Node_Str"" + command + ""String_Node_Str""+ addStyle);
        int[] path=treeOperationFactory.toIntArray(target.getStartContainer());
        if (path.length == 2) {
          addStyle=true;
        }
        boolean splitLeft=true;
        int start=target.getStartOffset();
        if (start == 0) {
          splitLeft=false;
        }
        boolean splitRight=true;
        int end=target.getEndOffset();
        if (end == target.getDataLength()) {
          splitRight=false;
        }
        TreeOperation op=new TreeStyle(clientJupiter.getSiteId(),path,start,end,""String_Node_Str"",styleAttribute,addStyle,splitLeft,splitRight);
        clientJupiter.generate(op);
      }
      return true;
    }
  }
  return false;
}",0.9787697332607512
178484,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(convertPath(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
            }
 else {
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((textNode.getNextSibling() == null || BR.equalsIgnoreCase(textNode.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(convertPath(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  int brCount=element.getElementsByTagName(BR).getLength();
  int childCount=element.getChildCount();
  boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
  boolean isAfterLastTag=(pos == childCount);
  if (isBeforeLastBrTag || isAfterLastTag) {
    pos=path.get(0) + 1;
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(convertPath(path));
  }
 else {
    pos=range.getEndOffset();
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
  }
}
}
break;
default :
break;
}
if (op != null) {
clientJupiter.generate(op);
}
}
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    logRange(range);
    int pos=-1;
    Node startContainer=range.getStartContainer();
    Node endContainer=range.getEndContainer();
    List<Integer> path=getLocator(range.getStartContainer());
    TreeOperation op=null;
switch (keyCode) {
case KeyCodes.KEY_BACKSPACE:
{
        pos=range.getStartOffset();
        log.info(""String_Node_Str"" + pos);
        if (Node.TEXT_NODE == startContainer.getNodeType()) {
          Text textNode=Text.as(startContainer);
          if (pos == 0) {
            log.info(""String_Node_Str"");
            if (textNode.getParentElement().getPreviousSibling() != null) {
              log.info(""String_Node_Str"");
              op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
              op.setPath(convertPath(path));
            }
 else {
              log.info(""String_Node_Str"");
            }
          }
 else {
            log.info(""String_Node_Str"");
            pos=pos - 1;
            op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
          }
        }
 else         if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
          if (pos == 0) {
            if (startContainer.getPreviousSibling() != null) {
            }
 else {
            }
          }
        }
      }
    break;
case KeyCodes.KEY_DELETE:
{
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
      if (textNode.getLength() == pos) {
        Element sibling=textNode.getParentElement().getNextSiblingElement();
        if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (Node.ELEMENT_NODE == startContainer.getNodeType()) {
      if (startContainer.getNextSibling() != null) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
    }
  }
break;
case KeyCodes.KEY_ENTER:
{
path=getLocator(range.getEndContainer());
pos=range.getEndOffset();
if (Node.TEXT_NODE == endContainer.getNodeType()) {
  Text textNode=Text.as(endContainer);
  boolean isNewParagraph=false;
  if (textNode.getPreviousSibling() == null && 0 == pos) {
    isNewParagraph=true;
    pos=path.get(0);
  }
  if ((textNode.getNextSibling() == null || BR.equalsIgnoreCase(textNode.getNextSibling().getNodeName())) && textNode.getLength() == pos) {
    isNewParagraph=true;
    pos=path.get(0) + 1;
  }
  if (isNewParagraph) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
    op.setPath(convertPath(path));
  }
 else {
    op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
  }
}
 else if (Node.ELEMENT_NODE == endContainer.getNodeType()) {
  Element element=Element.as(endContainer);
  if (pos == 0) {
    op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
    op.setPath(convertPath(path));
  }
 else {
    int brCount=element.getElementsByTagName(BR).getLength();
    int childCount=element.getChildCount();
    boolean isBeforeLastBrTag=((pos == (childCount - brCount)) && (BR.equalsIgnoreCase(element.getLastChild().getNodeName())));
    boolean isAfterLastTag=(pos == childCount);
    if (isBeforeLastBrTag || isAfterLastTag) {
      pos=path.get(0) + 1;
      op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
      op.setPath(convertPath(path));
    }
 else {
      pos=range.getEndOffset();
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
    }
  }
}
}
break;
default :
break;
}
if (op != null) {
clientJupiter.generate(op);
}
}
}",0.9806838632273546
178485,"/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      logRange(range);
      List<Integer> path=getLocator(range.getStartContainer());
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),range.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}","/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.fine(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode()+ ""String_Node_Str""+ event.getUnicodeCharCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  log.info(""String_Node_Str"" + isNoteworthyKeyPressed);
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      logRange(range);
      List<Integer> path=getLocator(range.getStartContainer());
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),range.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}",0.8942928039702234
178486,"/** 
 * Adds the underlying style to the given text node.
 * @param text           the target text node
 * @param firstCharIndex the first character on which we apply the style
 * @param lastCharIndex  the last character on which we apply the style
 * @return a text fragment indicating what has been formatted
 */
protected TextFragment addStyle(Text text,int firstCharIndex,int lastCharIndex){
  log.info(""String_Node_Str"");
  if (matchesStyle(text)) {
    return new TextFragment(text,firstCharIndex,lastCharIndex);
  }
  text.crop(firstCharIndex,lastCharIndex);
  Element element=(Element)text.getParentElement();
  element.getStyle().setProperty(getProperty().getJSName(),propertyValue);
  return new TextFragment(text,0,text.getLength());
}","/** 
 * Adds the underlying style to the given text node.
 * @param text           the target text node
 * @param firstCharIndex the first character on which we apply the style
 * @param lastCharIndex  the last character on which we apply the style
 * @return a text fragment indicating what has been formatted
 */
protected TextFragment addStyle(Text text,int firstCharIndex,int lastCharIndex){
  if (matchesStyle(text)) {
    return new TextFragment(text,firstCharIndex,lastCharIndex);
  }
  text.crop(firstCharIndex,lastCharIndex);
  Element element=(Element)text.getParentElement();
  if (""String_Node_Str"".equalsIgnoreCase(element.getNodeName())) {
    element.getStyle().setProperty(getProperty().getJSName(),propertyValue);
  }
 else {
    text.removeFromParent();
    SpanElement spanElement=Document.get().createSpanElement();
    spanElement.setAttribute(getProperty().getJSName(),propertyValue);
    spanElement.appendChild(text);
    element.appendChild(spanElement);
  }
  return new TextFragment(text,0,text.getLength());
}",0.6191811553561414
178487,"/** 
 * Creates a new executable of this type.
 * @param document the document target
 * @param propertyName the style property name
 * @param propertyValue the style property value
 */
public DomStyleExecutable(Document document,Property propertyName,String propertyValue){
  super(new RichTextArea(),propertyName,propertyValue,TAG_NAME);
  this.document=document;
  this.propertyValue=propertyValue;
  log.info(""String_Node_Str"");
}","/** 
 * Creates a new executable of this type.
 * @param document the document target
 * @param propertyName the style property name
 * @param propertyValue the style property value
 */
public DomStyleExecutable(Document document,Property propertyName,String propertyValue){
  super(new RichTextArea(),propertyName,propertyValue,TAG_NAME);
  this.document=document;
  this.propertyValue=propertyValue;
}",0.9629629629629628
178488,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    OperationTarget t=getTarget(range);
    log.fine(""String_Node_Str"" + t);
    int pos=t.getStartOffset();
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.8556701030927835
178489,"/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.info(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode()+ ""String_Node_Str""+ event.getUnicodeCharCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      OperationTarget target=getTarget(range);
      log.info(""String_Node_Str"" + target);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}","/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.fine(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode()+ ""String_Node_Str""+ event.getUnicodeCharCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      doStuff(range);
      OperationTarget target=getTarget(range);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}",0.967420814479638
178490,"/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  commandOperationCall=null;
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      commandOperationCall=new OperationCall(command.toString(),param,getTarget(range));
      log.info(commandOperationCall.toString());
    }
  }
  return false;
}","/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  commandOperationCall=null;
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      commandOperationCall=new OperationCall(command.toString(),param,getTarget(range));
      log.info(commandOperationCall.toString());
      String realTag=""String_Node_Str"";
      if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
      final OperationTarget target=getTarget(range);
      int[] path=convertPath(target.getStartContainer());
      boolean addStyle=true;
      if (path.length == 2) {
        addStyle=true;
      }
 else {
        addStyle=false;
      }
      int start=range.getStartOffset();
      boolean splitLeft;
      if (start == 0) {
        splitLeft=false;
      }
 else {
        splitLeft=true;
      }
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(target.getStartContainer())));
      boolean splitRight;
      int end=range.getEndOffset();
      if (end == textNode.getLength()) {
        splitRight=false;
      }
 else {
        splitRight=true;
      }
      TreeOperation op=new TreeStyle(clientJupiter.getSiteId(),path,start,end,realTag,""String_Node_Str"",addStyle,splitLeft,splitRight);
      clientJupiter.generate(op);
    }
  }
  return false;
}",0.4764478764478764
178491,"/** 
 * Inserts BR elements into the empty P elements
 * @param node the root node to start inserting
 */
private void insertBrInEmptyParagraphs(Node node){
  if (node == null || !Element.is(node)) {
    return;
  }
  if (node.getNodeName().equalsIgnoreCase(""String_Node_Str"") && node.getChildCount() == 0) {
    node.appendChild(com.google.gwt.dom.client.Document.get().createBRElement());
  }
  NodeList children=node.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    insertBrInEmptyParagraphs(children.getItem(i));
  }
}","/** 
 * Inserts BR elements into the empty P elements
 * @param node the root node to start inserting
 */
private void insertBrInEmptyParagraphs(Node node){
  if (node == null || !Element.is(node)) {
    return;
  }
  if (node.getNodeName().equalsIgnoreCase(""String_Node_Str"") && node.getChildCount() == 0) {
    node.appendChild(Document.get().createBRElement());
  }
  NodeList children=node.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    insertBrInEmptyParagraphs(children.getItem(i));
  }
}",0.9754716981132076
178492,"@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  final int position=operation.getPosition();
  final int[] path=operation.getPath();
  final Node targetNode=TreeHelper.getChildNodeFromLocator(nativeNode,path);
  if (operation instanceof TreeInsertText) {
    TreeInsertText insertText=(TreeInsertText)operation;
    String txt=String.valueOf(insertText.getText());
    Node newTextNode=com.google.gwt.dom.client.Document.get().createTextNode(txt);
    Node brElement=targetNode.getChild(0);
    if (brElement != null && brElement.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      targetNode.replaceChild(newTextNode,brElement);
    }
 else     if (path.length == 1 && position == 0) {
      targetNode.appendChild(newTextNode);
    }
 else {
      Text.as(targetNode).insertData(position,txt);
    }
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText deleteText=(TreeDeleteText)operation;
    Text textNode=(Text)targetNode;
    textNode.deleteData(position,1);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    final Element p=com.google.gwt.dom.client.Document.get().createElement(""String_Node_Str"");
    if (nativeNode.getChildCount() == 0) {
      targetNode.insertFirst(p);
    }
 else     if (nativeNode.getChildCount() == 1 && nativeNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      nativeNode.replaceChild(nativeNode.getFirstChild(),p);
    }
 else     if (position == 0) {
      p.appendChild(com.google.gwt.dom.client.Document.get().createBRElement());
      Node parentNode=targetNode.getParentElement();
      if (path.length == 1 && path[0] == 0) {
        parentNode.insertBefore(p,targetNode);
      }
 else {
        parentNode.getParentNode().insertBefore(p,parentNode);
      }
    }
 else {
      log.info(""String_Node_Str"");
      String actualText=targetNode.getNodeValue();
      Text textNode=Text.as(targetNode);
      textNode.deleteData(0,position);
      p.setInnerText(actualText.substring(0,position));
      Node parentElement=targetNode.getParentElement();
      parentElement.getParentElement().insertBefore(p,parentElement);
    }
  }
 else   if (operation instanceof TreeNewParagraph) {
    TreeNewParagraph treeNewParagraph=(TreeNewParagraph)operation;
    final Element p=com.google.gwt.dom.client.Document.get().createElement(""String_Node_Str"");
    p.appendChild(com.google.gwt.dom.client.Document.get().createBRElement());
    Node parentNode=targetNode.getParentElement();
    if (path.length == 1 && path[0] == 0) {
      parentNode.insertBefore(p,targetNode);
    }
 else {
      parentNode.getParentNode().insertBefore(p,parentNode);
    }
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node p=targetNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    targetNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getChild(0);
    Text newTextNode=com.google.gwt.dom.client.Document.get().createTextNode(oldTextNode.getNodeValue() + targetNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}","@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  final int position=operation.getPosition();
  final int[] path=operation.getPath();
  final Node targetNode=TreeHelper.getChildNodeFromLocator(nativeNode,path);
  final short targetNodeType=targetNode.getNodeType();
  if (operation instanceof TreeInsertText) {
    TreeInsertText insertText=(TreeInsertText)operation;
    String txt=String.valueOf(insertText.getText());
    if (Node.ELEMENT_NODE == targetNodeType) {
      Node newTextNode=Document.get().createTextNode(txt);
      Node node=targetNode.getChild(position);
      targetNode.insertBefore(newTextNode,node);
    }
 else     if (Node.TEXT_NODE == targetNodeType) {
      Text.as(targetNode).insertData(position,txt);
    }
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText deleteText=(TreeDeleteText)operation;
    if (Node.TEXT_NODE == targetNodeType) {
      Text textNode=Text.as(targetNode);
      textNode.deleteData(position,1);
    }
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    final Element p=Document.get().createElement(""String_Node_Str"");
    if (nativeNode.getChildCount() == 0) {
      targetNode.insertFirst(p);
    }
 else     if (nativeNode.getChildCount() == 1 && nativeNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      nativeNode.replaceChild(nativeNode.getFirstChild(),p);
    }
 else     if (position == 0) {
      p.appendChild(Document.get().createBRElement());
      Node parentNode=targetNode.getParentElement();
      if (path.length == 1 && path[0] == 0) {
        parentNode.insertBefore(p,targetNode);
      }
 else {
        parentNode.getParentNode().insertBefore(p,parentNode);
      }
    }
 else {
      log.info(""String_Node_Str"");
      String actualText=targetNode.getNodeValue();
      Text textNode=Text.as(targetNode);
      textNode.deleteData(0,position);
      p.setInnerText(actualText.substring(0,position));
      Node parentElement=targetNode.getParentElement();
      parentElement.getParentElement().insertBefore(p,parentElement);
    }
  }
 else   if (operation instanceof TreeNewParagraph) {
    TreeNewParagraph treeNewParagraph=(TreeNewParagraph)operation;
    final Element p=Document.get().createElement(""String_Node_Str"");
    p.appendChild(Document.get().createBRElement());
    Node parentNode=targetNode.getParentElement();
    if (path.length == 1 && path[0] == 0) {
      parentNode.insertBefore(p,targetNode);
    }
 else {
      parentNode.getParentNode().insertBefore(p,parentNode);
    }
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node p=targetNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    targetNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getChild(0);
    Text newTextNode=Document.get().createTextNode(oldTextNode.getNodeValue() + targetNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
 else   if (operation instanceof TreeStyle) {
    TreeStyle style=(TreeStyle)operation;
    Node parentElement=targetNode.getParentElement();
    Element styleElement=DOM.createElement(style.param);
    styleElement.appendChild(targetNode);
    parentElement.replaceChild(styleElement,targetNode);
  }
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}",0.8116792400111763
178493,"@Override public void onConnected(ClientDTO dto,Document document,boolean updateUI){
  if (updateUI) {
    log.finest(""String_Node_Str"" + Element.as(nativeNode).getString());
    Node newNode=Converter.fromCustomToNative(((TreeDocument)document).getRoot());
    insertBrInEmptyParagraphs(newNode);
    nativeNode.getParentNode().replaceChild(newNode,nativeNode);
    nativeNode=newNode;
    log.finest(""String_Node_Str"" + Element.as(nativeNode).getString());
  }
}","@Override public void onConnected(ClientDTO dto,fr.loria.score.jupiter.model.Document document,boolean updateUI){
  if (updateUI) {
    log.finest(""String_Node_Str"" + Element.as(nativeNode).getString());
    Node newNode=Converter.fromCustomToNative(((TreeDocument)document).getRoot());
    insertBrInEmptyParagraphs(newNode);
    nativeNode.getParentNode().replaceChild(newNode,nativeNode);
    nativeNode=newNode;
    log.finest(""String_Node_Str"" + Element.as(nativeNode).getString());
  }
}",0.9696969696969696
178494,"public void execute(Tree root){
  Tree tree=root.getChildFromPath(path);
  if ((tree == root) || (path.length == 1 && position == 0)) {
    if (tree.getChild(0) == null) {
      tree.addChild(TreeFactory.createTextTree(String.valueOf(text)));
      return;
    }
 else {
      tree=tree.getChild(0);
    }
  }
  tree.addChar(text,position);
}","public void execute(Tree root){
  Tree tree=root.getChildFromPath(path);
  final Integer treeType=Integer.valueOf(tree.getAttribute(Tree.NODE_TYPE));
  if (Tree.ELEMENT_NODE == treeType) {
    tree.addChild(TreeFactory.createTextTree(String.valueOf(text)),position);
  }
 else   if (Tree.TEXT_NODE == treeType) {
    tree.addChar(text,position);
  }
}",0.3001443001443001
178495,"public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ start+ ""String_Node_Str""+ end+ ""String_Node_Str""+ param+ ""String_Node_Str""+ value+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ start+ ""String_Node_Str""+ end+ ""String_Node_Str""+ param+ ""String_Node_Str""+ value+ ""String_Node_Str""+ addStyle+ ""String_Node_Str""+ splitLeft+ ""String_Node_Str""+ splitRight+ ""String_Node_Str"";
}",0.8132780082987552
178496,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Node.TEXT_NODE == node.getNodeType()) {
        Text textNode=Text.as(node);
        if (textNode.getLength() == t.getStartOffset()) {
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
 else       if (Node.ELEMENT_NODE == node.getNodeType()) {
        if (node.getNextSibling() != null) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Node.TEXT_NODE == node.getNodeType()) {
        Text textNode=Text.as(node);
        if (pos == 0) {
          if (textNode.getParentElement().getPreviousSibling() != null) {
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
 else {
          }
        }
 else {
          pos=pos - 1;
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
 else       if (Node.ELEMENT_NODE == node.getNodeType()) {
        if (pos == 0) {
          if (node.getPreviousSibling() != null) {
          }
 else {
          }
        }
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Node.TEXT_NODE == node.getNodeType()) {
        Text textNode=Text.as(node);
        if (textNode.getLength() == t.getStartOffset()) {
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
 else       if (Node.ELEMENT_NODE == node.getNodeType()) {
        if (node.getNextSibling() != null) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.6469513208174116
178497,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Node.TEXT_NODE == node.getNodeType()) {
        Text textNode=Text.as(node);
        if (textNode.getLength() == t.getStartOffset()) {
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
 else       if (Node.ELEMENT_NODE == node.getNodeType()) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Node.TEXT_NODE == node.getNodeType()) {
        Text textNode=Text.as(node);
        if (textNode.getLength() == t.getStartOffset()) {
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
 else       if (Node.ELEMENT_NODE == node.getNodeType()) {
        if (node.getNextSibling() != null) {
          path.set(0,path.get(0) + 1);
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.9888503015902028
178498,"/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  bodyNode=textArea.getDocument().getBody();
  final Element p=Document.get().createElement(""String_Node_Str"");
  if (bodyNode.getChildCount() == 0) {
    bodyNode.insertFirst(p);
  }
 else   if (bodyNode.getChildCount() == 1 && bodyNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    bodyNode.insertBefore(p,bodyNode.getFirstChild());
  }
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}","/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  Node bodyNode=textArea.getDocument().getBody();
  final Element p=Document.get().createElement(""String_Node_Str"");
  if (bodyNode.getChildCount() == 0) {
    bodyNode.insertFirst(p);
  }
 else   if (bodyNode.getChildCount() == 1 && bodyNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    bodyNode.insertBefore(p,bodyNode.getFirstChild());
  }
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}",0.9979018044481746
178499,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Text.is(node)) {
        Text textNode=Text.as(node);
        if (textNode.getLength() == t.getStartOffset()) {
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.8992048140984311
178500,"/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.fine(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode()+ ""String_Node_Str""+ event.getUnicodeCharCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      doStuff(range);
      OperationTarget target=getTarget(range);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}","/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      doStuff(range);
      OperationTarget target=getTarget(range);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}",0.9226981782373216
178501,"/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  commandOperationCall=null;
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      commandOperationCall=new OperationCall(command.toString(),param,getTarget(range));
      log.info(commandOperationCall.toString());
      String realTag=""String_Node_Str"";
      if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
      final OperationTarget target=getTarget(range);
      int[] path=convertPath(target.getStartContainer());
      boolean addStyle=true;
      if (path.length == 2) {
        addStyle=true;
      }
 else {
        addStyle=false;
      }
      int start=range.getStartOffset();
      boolean splitLeft;
      if (start == 0) {
        splitLeft=false;
      }
 else {
        splitLeft=true;
      }
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(target.getStartContainer())));
      boolean splitRight;
      int end=range.getEndOffset();
      if (end == textNode.getLength()) {
        splitRight=false;
      }
 else {
        splitRight=true;
      }
      TreeOperation op=new TreeStyle(clientJupiter.getSiteId(),path,start,end,realTag,""String_Node_Str"",addStyle,splitLeft,splitRight);
      clientJupiter.generate(op);
    }
  }
  return false;
}","/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  commandOperationCall=null;
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      commandOperationCall=new OperationCall(command.toString(),param,getTarget(range));
      log.info(commandOperationCall.toString());
      String realTag=""String_Node_Str"";
      if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(command.toString())) {
        realTag=""String_Node_Str"";
      }
      final OperationTarget target=getTarget(range);
      int[] path=convertPath(target.getStartContainer());
      boolean addStyle=true;
      if (path.length == 2) {
        addStyle=true;
      }
 else {
        addStyle=false;
      }
      int start=range.getStartOffset();
      boolean splitLeft;
      if (start == 0) {
        splitLeft=false;
      }
 else {
        splitLeft=true;
      }
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(target.getStartContainer())));
      boolean splitRight;
      int end=range.getEndOffset();
      if (end == textNode.getLength()) {
        splitRight=false;
      }
 else {
        splitRight=true;
      }
      TreeOperation op=new TreeStyle(clientJupiter.getSiteId(),path,start,end,realTag,""String_Node_Str"",addStyle,splitLeft,splitRight);
      clientJupiter.generate(op);
    }
  }
  return false;
}",0.9886104783599088
178502,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.99102416570771
178503,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      if (Text.is(node)) {
        Text textNode=Text.as(node);
        if (textNode.getLength() == t.getStartOffset()) {
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    doStuff(range);
    Node startContainer=range.getStartContainer();
    int pos=0;
    if (Node.TEXT_NODE == startContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      Text textNode=Text.as(startContainer);
      pos=range.getStartOffset();
    }
    Node endContainer=range.getEndContainer();
    if (Node.ELEMENT_NODE == endContainer.getNodeType() || Node.DOCUMENT_NODE == endContainer.getNodeType()) {
      log.info(""String_Node_Str"");
      pos=range.getEndOffset();
    }
    OperationTarget t=getTarget(range);
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      final Node node=TreeHelper.getChildNodeFromLocator(TreeClientCallback.getUpdatedNativeNode(),convertPath(t.getStartContainer()));
      log.info(""String_Node_Str"" + node.getNodeName() + ""String_Node_Str""+ node.getNodeValue()+ ""String_Node_Str""+ node.getNodeType());
      if (Node.TEXT_NODE == node.getNodeType()) {
        Text textNode=Text.as(node);
        log.info(""String_Node_Str"" + textNode.getData() + ""String_Node_Str""+ textNode.getNodeType());
        if (textNode.getLength() == t.getStartOffset()) {
          log.info(""String_Node_Str"");
          Element sibling=textNode.getParentElement().getNextSiblingElement();
          if ((sibling != null) && (!sibling.getClassName().toLowerCase().contains(""String_Node_Str""))) {
            log.info(""String_Node_Str"" + sibling.getNodeName() + ""String_Node_Str""+ sibling.getNodeValue()+ ""String_Node_Str""+ sibling.getInnerHTML());
            path.set(0,path.get(0) + 1);
            op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
            op.setPath(convertPath(path));
          }
        }
 else {
          log.info(""String_Node_Str"");
          op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
        }
      }
 else       if (Node.ELEMENT_NODE == node.getNodeType()) {
        log.info(""String_Node_Str"");
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
        op.setPath(convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.8534649973549638
178504,"@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  final int position=operation.getPosition();
  final int[] path=operation.getPath();
  final Node targetNode=TreeHelper.getChildNodeFromLocator(nativeNode,path);
  final short targetNodeType=targetNode.getNodeType();
  if (operation instanceof TreeInsertText) {
    TreeInsertText insertText=(TreeInsertText)operation;
    String txt=String.valueOf(insertText.getText());
    if (Node.ELEMENT_NODE == targetNodeType) {
      Node newTextNode=Document.get().createTextNode(txt);
      Node node=targetNode.getChild(position);
      targetNode.insertBefore(newTextNode,node);
    }
 else     if (Node.TEXT_NODE == targetNodeType) {
      Text.as(targetNode).insertData(position,txt);
    }
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText deleteText=(TreeDeleteText)operation;
    if (Node.TEXT_NODE == targetNodeType) {
      Text textNode=Text.as(targetNode);
      textNode.deleteData(position,1);
    }
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    final Element p=Document.get().createElement(""String_Node_Str"");
    if (nativeNode.getChildCount() == 0) {
      targetNode.insertFirst(p);
    }
 else     if (nativeNode.getChildCount() == 1 && nativeNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      nativeNode.replaceChild(nativeNode.getFirstChild(),p);
    }
 else     if (position == 0) {
      p.appendChild(Document.get().createBRElement());
      Node parentNode=targetNode.getParentElement();
      if (path.length == 1 && path[0] == 0) {
        parentNode.insertBefore(p,targetNode);
      }
 else {
        parentNode.getParentNode().insertBefore(p,parentNode);
      }
    }
 else {
      log.info(""String_Node_Str"");
      String actualText=targetNode.getNodeValue();
      Text textNode=Text.as(targetNode);
      textNode.deleteData(0,position);
      p.setInnerText(actualText.substring(0,position));
      Node parentElement=targetNode.getParentElement();
      parentElement.getParentElement().insertBefore(p,parentElement);
    }
  }
 else   if (operation instanceof TreeNewParagraph) {
    TreeNewParagraph treeNewParagraph=(TreeNewParagraph)operation;
    final Element p=Document.get().createElement(""String_Node_Str"");
    p.appendChild(Document.get().createBRElement());
    Node parentNode=targetNode.getParentElement();
    if (path.length == 1 && path[0] == 0) {
      parentNode.insertBefore(p,targetNode);
    }
 else {
      parentNode.getParentNode().insertBefore(p,parentNode);
    }
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node p=targetNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    targetNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getChild(0);
    Text newTextNode=Document.get().createTextNode(oldTextNode.getNodeValue() + targetNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
 else   if (operation instanceof TreeStyle) {
    TreeStyle style=(TreeStyle)operation;
    Node parentElement=targetNode.getParentElement();
    Element styleElement=DOM.createElement(style.param);
    styleElement.appendChild(targetNode);
    parentElement.replaceChild(styleElement,targetNode);
  }
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}","@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  final int position=operation.getPosition();
  final int[] path=operation.getPath();
  final Node targetNode=TreeHelper.getChildNodeFromLocator(nativeNode,path);
  final short targetNodeType=targetNode.getNodeType();
  if (operation instanceof TreeInsertText) {
    TreeInsertText insertText=(TreeInsertText)operation;
    String txt=String.valueOf(insertText.getText());
    if (Node.ELEMENT_NODE == targetNodeType) {
      Node newTextNode=Document.get().createTextNode(txt);
      Node node=targetNode.getChild(position);
      targetNode.insertBefore(newTextNode,node);
    }
 else     if (Node.TEXT_NODE == targetNodeType) {
      Text.as(targetNode).insertData(position,txt);
    }
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText deleteText=(TreeDeleteText)operation;
    if (Node.TEXT_NODE == targetNodeType) {
      Text textNode=Text.as(targetNode);
      textNode.deleteData(position,1);
    }
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    final Element p=Document.get().createElement(""String_Node_Str"");
    if (nativeNode.getChildCount() == 0) {
      targetNode.insertFirst(p);
    }
 else     if (nativeNode.getChildCount() == 1 && nativeNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      nativeNode.replaceChild(nativeNode.getFirstChild(),p);
    }
 else     if (position == 0) {
      p.appendChild(Document.get().createBRElement());
      Node parentNode=targetNode.getParentElement();
      if (path.length == 1 && path[0] == 0) {
        parentNode.insertBefore(p,targetNode);
      }
 else {
        parentNode.getParentNode().insertBefore(p,parentNode);
      }
    }
 else {
      log.info(""String_Node_Str"");
      String actualText=targetNode.getNodeValue();
      Text textNode=Text.as(targetNode);
      textNode.deleteData(0,position);
      p.setInnerText(actualText.substring(0,position));
      Node parentElement=targetNode.getParentElement();
      parentElement.getParentElement().insertBefore(p,parentElement);
    }
  }
 else   if (operation instanceof TreeNewParagraph) {
    TreeNewParagraph treeNewParagraph=(TreeNewParagraph)operation;
    final Element p=Document.get().createElement(""String_Node_Str"");
    p.appendChild(Document.get().createBRElement());
    Node parentNode=targetNode.getParentElement();
    if (path.length == 1 && path[0] == 0) {
      parentNode.insertBefore(p,targetNode);
    }
 else {
      parentNode.getParentNode().insertBefore(p,parentNode);
    }
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node p=targetNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    targetNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getLastChild();
    Text newTextNode=Document.get().createTextNode(oldTextNode.getNodeValue() + targetNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
 else   if (operation instanceof TreeStyle) {
    TreeStyle style=(TreeStyle)operation;
    Node parentElement=targetNode.getParentElement();
    Element styleElement=DOM.createElement(style.param);
    styleElement.appendChild(targetNode);
    parentElement.replaceChild(styleElement,targetNode);
  }
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}",0.999316659833265
178505,"@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  int position=operation.getPosition();
  final Node targetNode=TreeHelper.getChildNodeFromLocator(nativeNode,operation.getPath());
  if (operation instanceof TreeInsertText) {
    TreeInsertText insertText=(TreeInsertText)operation;
    String txt=String.valueOf(insertText.getText());
    if (targetNode == nativeNode) {
      Node textNode=com.google.gwt.dom.client.Document.get().createTextNode(txt);
      Node brElement=nativeNode.getChild(0);
      if (brElement != null) {
        nativeNode.replaceChild(textNode,brElement);
      }
 else {
        nativeNode.appendChild(textNode);
      }
    }
 else {
      targetNode.setNodeValue(targetNode.getNodeValue() + txt);
    }
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText deleteText=(TreeDeleteText)operation;
    Text textNode=(Text)targetNode;
    textNode.deleteData(position,1);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    String actualText=targetNode.getNodeValue();
    targetNode.setNodeValue(actualText.substring(0,position));
    Node n=targetNode.getParentElement();
    log.fine(""String_Node_Str"" + Element.as(n).getString());
    Element p=DOM.createElement(""String_Node_Str"");
    p.setInnerText(actualText.substring(position));
    n.getParentElement().insertAfter(p,n);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node p=targetNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    targetNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getChild(0);
    Text newTextNode=com.google.gwt.dom.client.Document.get().createTextNode(oldTextNode.getNodeValue() + targetNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}","@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  int position=operation.getPosition();
  final Node targetNode=TreeHelper.getChildNodeFromLocator(nativeNode,operation.getPath());
  if (operation instanceof TreeInsertText) {
    TreeInsertText insertText=(TreeInsertText)operation;
    String txt=String.valueOf(insertText.getText());
    if (targetNode == nativeNode) {
      Node newTextNode=com.google.gwt.dom.client.Document.get().createTextNode(txt);
      Node brElement=nativeNode.getChild(0);
      if (brElement != null) {
        nativeNode.replaceChild(newTextNode,brElement);
      }
 else {
        nativeNode.appendChild(newTextNode);
      }
    }
 else {
      ((Text)targetNode).insertData(position,txt);
    }
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText deleteText=(TreeDeleteText)operation;
    Text textNode=(Text)targetNode;
    textNode.deleteData(position,1);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    String actualText=targetNode.getNodeValue();
    targetNode.setNodeValue(actualText.substring(0,position));
    Node n=targetNode.getParentElement();
    log.fine(""String_Node_Str"" + Element.as(n).getString());
    Element p=DOM.createElement(""String_Node_Str"");
    p.setInnerText(actualText.substring(position));
    n.getParentElement().insertAfter(p,n);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node p=targetNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    targetNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getChild(0);
    Text newTextNode=com.google.gwt.dom.client.Document.get().createTextNode(oldTextNode.getNodeValue() + targetNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}",0.975268315445637
178506,"/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  bodyNode=textArea.getDocument().getBody();
  final Element p=Document.get().createElement(""String_Node_Str"");
  if (bodyNode.getChildCount() == 0) {
    bodyNode.insertFirst(p);
  }
 else   if (bodyNode.getChildCount() == 1 && bodyNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    bodyNode.insertBefore(bodyNode.getFirstChild(),p);
  }
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}","/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  bodyNode=textArea.getDocument().getBody();
  final Element p=Document.get().createElement(""String_Node_Str"");
  if (bodyNode.getChildCount() == 0) {
    bodyNode.insertFirst(p);
  }
 else   if (bodyNode.getChildCount() == 1 && bodyNode.getFirstChild().getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    bodyNode.insertBefore(p,bodyNode.getFirstChild());
  }
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}",0.9983179142136248
178507,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    OperationTarget t=getTarget(range);
    log.fine(""String_Node_Str"" + t);
    int pos=t.getStartOffset();
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),path.get(0));
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    OperationTarget t=getTarget(range);
    log.fine(""String_Node_Str"" + t);
    int pos=t.getStartOffset();
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      if (pos == 0 && !isNoteworthyPath(path.subList(1,path.size()))) {
        op=new TreeNewParagraph(clientJupiter.getSiteId(),pos);
        op.setPath(convertPath(path));
      }
 else {
        op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.9965337954939342
178508,"/** 
 * {@inheritDoc}
 * @see CommandListener#onCommand(CommandManager,Command,String)
 */
public void onCommand(CommandManager sender,final Command command,final String param){
  log.finest(""String_Node_Str"" + command + ""String_Node_Str""+ param);
  if (commandOperationCall != null) {
  }
}","/** 
 * {@inheritDoc}
 * @see CommandListener#onCommand(CommandManager,Command,String)
 */
public void onCommand(CommandManager sender,final Command command,final String param){
  if (commandOperationCall != null) {
  }
}",0.86328125
178509,"/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.info(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      OperationTarget target=getTarget(range);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}","/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.info(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      OperationTarget target=getTarget(range);
      log.info(""String_Node_Str"" + target);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}",0.9789875835721108
178510,"/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  log.finest(""String_Node_Str"" + command + ""String_Node_Str""+ param);
  commandOperationCall=null;
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      commandOperationCall=new OperationCall(command.toString(),param,getTarget(range));
      log.info(commandOperationCall.toString());
    }
  }
  return false;
}","/** 
 * {@inheritDoc}
 * @see CommandListener#onBeforeCommand(CommandManager,Command,String)
 */
public boolean onBeforeCommand(CommandManager sender,Command command,String param){
  commandOperationCall=null;
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !IGNORED_COMMANDS.contains(command)) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      commandOperationCall=new OperationCall(command.toString(),param,getTarget(range));
      log.info(commandOperationCall.toString());
    }
  }
  return false;
}",0.9474474474474476
178511,"/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  Tree t=Converter.fromNativeToCustom(textArea.getDocument().getBody());
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new ClientCallback.TreeClientCallback(textArea.getDocument().getBody()));
  clientJupiter.connect();
  customizeActionListeners();
}","/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  bodyNode=textArea.getDocument().getBody();
  Tree t=Converter.fromNativeToCustom(Element.as(bodyNode));
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t));
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new TreeClientCallback(bodyNode));
  clientJupiter.connect();
  customizeActionListeners();
}",0.9161882893226176
178512,"@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    OperationTarget t=getTarget(range);
    log.fine(""String_Node_Str"" + t);
    int pos=t.getStartOffset();
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
    }
 else     if (keyCode == 13) {
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}","@Override public void onKeyDown(KeyDownEvent event){
  final int keyCode=event.getNativeKeyCode();
  log.fine(""String_Node_Str"" + keyCode + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  Selection selection=getTextArea().getDocument().getSelection();
  if (selection.getRangeCount() > 0) {
    Range range=selection.getRangeAt(0);
    OperationTarget t=getTarget(range);
    log.fine(""String_Node_Str"" + t);
    int pos=t.getStartOffset();
    List<Integer> path=t.getStartContainer();
    TreeOperation op=null;
    if (keyCode == 8) {
      if (pos == 0) {
        if (isNoteworthyPath(path)) {
          op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
          op.setPath(convertPath(path));
        }
      }
 else {
        pos=pos - 1;
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 46) {
      Text textNode=Text.as(TreeHelper.getChildNodeFromLocator(bodyNode,convertPath(t.getStartContainer())));
      if ((t.getStartOffset() == t.getEndOffset()) && (textNode.getLength() == t.getStartOffset())) {
        path.set(0,path.get(0) + 1);
        op=new TreeMergeParagraph(clientJupiter.getSiteId(),path.get(0),1,1);
      }
 else {
        op=new TreeDeleteText(clientJupiter.getSiteId(),pos,convertPath(path));
      }
    }
 else     if (keyCode == 13) {
      op=new TreeInsertParagraph(clientJupiter.getSiteId(),pos,convertPath(path));
    }
    if (op != null) {
      clientJupiter.generate(op);
    }
  }
}",0.8603186365320489
178513,"/** 
 * {@inheritDoc}
 * @see CommandListener#onCommand(CommandManager,Command,String)
 */
public void onCommand(CommandManager sender,final Command command,final String param){
  log.finest(""String_Node_Str"" + command + ""String_Node_Str""+ param);
  if (commandOperationCall != null) {
    broadcast(commandOperationCall);
  }
}","/** 
 * {@inheritDoc}
 * @see CommandListener#onCommand(CommandManager,Command,String)
 */
public void onCommand(CommandManager sender,final Command command,final String param){
  log.finest(""String_Node_Str"" + command + ""String_Node_Str""+ param);
  if (commandOperationCall != null) {
  }
}",0.9402261712439418
178514,"/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.info(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      broadcast(new OperationCall(""String_Node_Str"",new String(new int[]{event.getUnicodeCharCode()},0,1),getTarget(range)));
    }
  }
}","/** 
 * {@inheritDoc}
 * @see KeyPressHandler#onKeyPress(KeyPressEvent)
 */
public void onKeyPress(KeyPressEvent event){
  log.info(""String_Node_Str"" + getTextArea().getHTML());
  log.info(""String_Node_Str"" + event.getCharCode() + ""String_Node_Str""+ event.getNativeEvent().getKeyCode());
  boolean isAltControlOrMetaDown=event.isAltKeyDown() || event.isControlKeyDown() || event.isMetaKeyDown();
  boolean isNoteworthyKeyPressed=event.getCharCode() != '\u0000';
  if (getTextArea().isAttached() && getTextArea().isEnabled() && !isAltControlOrMetaDown&& isNoteworthyKeyPressed) {
    Selection selection=getTextArea().getDocument().getSelection();
    if (selection.getRangeCount() > 0) {
      Range range=selection.getRangeAt(0);
      OperationTarget target=getTarget(range);
      List<Integer> path=target.getStartContainer();
      clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),convertPath(path),new String(new int[]{event.getUnicodeCharCode()},0,1).charAt(0)));
    }
  }
}",0.8621236133122029
178515,"@Override public void onConnected(ClientDTO dto,Document document,boolean updateUI){
  if (updateUI) {
    log.finest(""String_Node_Str"" + nativeNode);
    Node newNode=Converter.fromCustomToNative(((TreeDocument)document).getRoot());
    nativeNode.getParentNode().replaceChild(newNode,nativeNode);
  }
}","@Override public void onConnected(ClientDTO dto,Document document,boolean updateUI){
  if (updateUI) {
    log.finest(""String_Node_Str"" + Element.as(nativeNode).getString());
    Node newNode=Converter.fromCustomToNative(((TreeDocument)document).getRoot());
    nativeNode.getParentNode().replaceChild(newNode,nativeNode);
    nativeNode=newNode;
    log.finest(""String_Node_Str"" + Element.as(nativeNode).getString());
  }
}",0.8076923076923077
178516,"@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  int position=operation.getPosition();
  Mutation mutation=new Mutation();
  final String locator=TreeUtils.getStringLocatorFromPath(operation.getPath());
  mutation.setLocator(locator);
  MutationOperator operator=new DefaultMutationOperator();
  if (operation instanceof TreeInsertText) {
    TreeInsertText tit=(TreeInsertText)operation;
    mutation.setType(Mutation.MutationType.INSERT);
    mutation.setValue(String.valueOf(position) + ""String_Node_Str"" + tit.getText());
    operator.operate(mutation,nativeNode);
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText treeDeleteText=(TreeDeleteText)operation;
    mutation.setType(Mutation.MutationType.REMOVE);
    mutation.setValue(String.valueOf(position) + ""String_Node_Str"" + String.valueOf(position + 1));
    operator.operate(mutation,nativeNode);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    Node textNode=DefaultMutationOperator.getChildNodeFromLocator(nativeNode,locator);
    String actualText=textNode.getNodeValue();
    textNode.setNodeValue(actualText.substring(0,position));
    Node n=textNode.getParentElement();
    log.fine(""String_Node_Str"" + Element.as(n).getString());
    Element p=DOM.createElement(""String_Node_Str"");
    p.setInnerText(actualText.substring(position));
    n.getParentElement().insertAfter(p,n);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node textNode=DefaultMutationOperator.getChildNodeFromLocator(nativeNode,locator);
    Node p=textNode.getParentElement();
    Node n=p.getPreviousSibling();
    textNode.removeFromParent();
    p.removeFromParent();
    n.appendChild(textNode);
  }
  log.fine(""String_Node_Str"" + mutation);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}","@Override public void onExecute(Message receivedMessage){
  log.fine(""String_Node_Str"" + receivedMessage);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
  TreeOperation operation=(TreeOperation)receivedMessage.getOperation();
  int position=operation.getPosition();
  Mutation mutation=new Mutation();
  final String locator=TreeUtils.getStringLocatorFromPath(operation.getPath());
  mutation.setLocator(locator);
  MutationOperator operator=new DefaultMutationOperator();
  if (operation instanceof TreeInsertText) {
    TreeInsertText tit=(TreeInsertText)operation;
    mutation.setType(Mutation.MutationType.INSERT);
    mutation.setValue(String.valueOf(position) + ""String_Node_Str"" + tit.getText());
    operator.operate(mutation,nativeNode);
  }
 else   if (operation instanceof TreeDeleteText) {
    TreeDeleteText treeDeleteText=(TreeDeleteText)operation;
    mutation.setType(Mutation.MutationType.REMOVE);
    mutation.setValue(String.valueOf(position) + ""String_Node_Str"" + String.valueOf(position + 1));
    operator.operate(mutation,nativeNode);
  }
 else   if (operation instanceof TreeInsertParagraph) {
    TreeInsertParagraph treeInsertParagraph=(TreeInsertParagraph)operation;
    Node textNode=DefaultMutationOperator.getChildNodeFromLocator(nativeNode,locator);
    String actualText=textNode.getNodeValue();
    textNode.setNodeValue(actualText.substring(0,position));
    Node n=textNode.getParentElement();
    log.fine(""String_Node_Str"" + Element.as(n).getString());
    Element p=DOM.createElement(""String_Node_Str"");
    p.setInnerText(actualText.substring(position));
    n.getParentElement().insertAfter(p,n);
  }
 else   if (operation instanceof TreeMergeParagraph) {
    Node textNode=DefaultMutationOperator.getChildNodeFromLocator(nativeNode,locator);
    Node p=textNode.getParentElement();
    Node pPreviousSibling=p.getPreviousSibling();
    textNode.removeFromParent();
    p.removeFromParent();
    Node oldTextNode=pPreviousSibling.getChild(0);
    Text newTextNode=com.google.gwt.dom.client.Document.get().createTextNode(oldTextNode.getNodeValue() + textNode.getNodeValue());
    pPreviousSibling.replaceChild(newTextNode,oldTextNode);
  }
  log.fine(""String_Node_Str"" + mutation);
  log.fine(""String_Node_Str"" + Element.as(nativeNode).getString());
}",0.9433704798726404
178517,"/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  clientJupiter=new ClientJupiterAlg();
  Converter converter=new Converter();
  Tree t=converter.fromNativeToCustom(textArea.getDocument().getBody());
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new ClientCallback.TreeClientCallback(textArea.getDocument().getBody()));
  clientJupiter.setDocument(new TreeDocument(t));
  clientJupiter.connect();
}","/** 
 * {@inheritDoc}
 * @see AbstractPlugin#init(RichTextArea,Config)
 */
public void init(RichTextArea textArea,Config config){
  super.init(textArea,config);
  saveRegistration(textArea.addKeyDownHandler(this));
  saveRegistration(textArea.addKeyPressHandler(this));
  saveRegistration(textArea.addKeyUpHandler(this));
  getTextArea().getCommandManager().addCommandListener(this);
  Converter converter=new Converter();
  Tree t=converter.fromNativeToCustom(textArea.getDocument().getBody());
  clientJupiter=new ClientJupiterAlg(new TreeDocument(t),-1);
  clientJupiter.setEditingSessionId(Integer.parseInt(config.getParameter(RtApi.DOCUMENT_ID)));
  clientJupiter.setCommunicationService(CommunicationService.ServiceHelper.getCommunicationService());
  clientJupiter.setCallback(new ClientCallback.TreeClientCallback(textArea.getDocument().getBody()));
  clientJupiter.connect();
}",0.8544444444444445
178518,"/** 
 * Broadcast an operation call.
 * @param operationCall the operation call to broadcast
 */
private void broadcast(OperationCall operationCall){
  JSONObject jsonTarget=new JSONObject();
  jsonTarget.put(""String_Node_Str"",new JSONString(operationCall.getTarget().getStartContainer().toString()));
  jsonTarget.put(""String_Node_Str"",new JSONNumber(operationCall.getTarget().getStartOffset()));
  jsonTarget.put(""String_Node_Str"",new JSONString(operationCall.getTarget().getEndContainer().toString()));
  jsonTarget.put(""String_Node_Str"",new JSONNumber(operationCall.getTarget().getEndOffset()));
  JSONObject jsonOperationCall=new JSONObject();
  jsonOperationCall.put(""String_Node_Str"",new JSONString(operationCall.getOperationId()));
  if (operationCall.getValue() != null) {
    jsonOperationCall.put(""String_Node_Str"",new JSONString(operationCall.getValue()));
  }
  jsonOperationCall.put(""String_Node_Str"",jsonTarget);
  Console.getInstance().log(jsonOperationCall.toString());
  OperationTarget target=operationCall.getTarget();
  List<Integer> path=target.getStartContainer();
  clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),path,operationCall.getValue().charAt(0)));
}","/** 
 * Broadcast an operation call.
 * @param operationCall the operation call to broadcast
 */
private void broadcast(OperationCall operationCall){
  JSONObject jsonTarget=new JSONObject();
  jsonTarget.put(""String_Node_Str"",new JSONString(operationCall.getTarget().getStartContainer().toString()));
  jsonTarget.put(""String_Node_Str"",new JSONNumber(operationCall.getTarget().getStartOffset()));
  jsonTarget.put(""String_Node_Str"",new JSONString(operationCall.getTarget().getEndContainer().toString()));
  jsonTarget.put(""String_Node_Str"",new JSONNumber(operationCall.getTarget().getEndOffset()));
  JSONObject jsonOperationCall=new JSONObject();
  jsonOperationCall.put(""String_Node_Str"",new JSONString(operationCall.getOperationId()));
  if (operationCall.getValue() != null) {
    jsonOperationCall.put(""String_Node_Str"",new JSONString(operationCall.getValue()));
  }
  jsonOperationCall.put(""String_Node_Str"",jsonTarget);
  Console.getInstance().log(jsonOperationCall.toString());
  OperationTarget target=operationCall.getTarget();
  List<Integer> path=target.getStartContainer();
  int[] ppath=new int[path.size()];
  for (int i=0; i < path.size(); i++) {
    ppath[i]=path.get(i);
  }
  clientJupiter.generate(new TreeInsertText(clientJupiter.getSiteId(),target.getStartOffset(),ppath,operationCall.getValue().charAt(0)));
}",0.958186791715514
178519,"private void copyAttributes(Node currentNode,Tree treeNode){
  Map<String,String> attributes=new HashMap<String,String>();
  putIfValueNotNull(attributes,Tree.NODE_VALUE,currentNode.getNodeName());
  putIfValueNotNull(attributes,Tree.NODE_VALUE,currentNode.getNodeValue());
  int type=currentNode.getNodeType();
  putIfValueNotNull(attributes,Tree.NODE_TYPE,String.valueOf(type));
  if (type == Node.ELEMENT_NODE) {
    Element element=(Element)currentNode;
    putIfValueNotNull(attributes,""String_Node_Str"",element.getClassName());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getId());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getStyle().toString());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getTagName());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getTitle());
  }
 else   if (type == Node.TEXT_NODE) {
    Text textElement=(Text)currentNode;
    treeNode.setValue(textElement.getData());
  }
  treeNode.setAttributes(attributes);
}","private void copyAttributes(Node currentNode,Tree treeNode){
  Map<String,String> attributes=new HashMap<String,String>();
  putIfValueNotNull(attributes,Tree.NODE_NAME,currentNode.getNodeName());
  putIfValueNotNull(attributes,Tree.NODE_VALUE,currentNode.getNodeValue());
  int type=currentNode.getNodeType();
  putIfValueNotNull(attributes,Tree.NODE_TYPE,String.valueOf(type));
  if (type == Node.ELEMENT_NODE) {
    Element element=(Element)currentNode;
    putIfValueNotNull(attributes,""String_Node_Str"",element.getClassName());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getId());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getStyle().toString());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getTagName());
    putIfValueNotNull(attributes,""String_Node_Str"",element.getTitle());
  }
 else   if (type == Node.TEXT_NODE) {
    Text textElement=(Text)currentNode;
    treeNode.setValue(textElement.getData());
  }
  treeNode.setAttributes(attributes);
}",0.7201995012468828
178520,"public static boolean inf(List<Integer> t1,List<Integer> t2){
  int i=0;
  while (i < t1.size() && i < t2.size()) {
    if (t1.get(i) < t2.get(i)) {
      return true;
    }
    if (t1.get(i) > t2.get(i)) {
      return false;
    }
    i++;
  }
  return (t1.size() < t2.size());
}","public static boolean inf(int[] t1,int[] t2){
  int i=0;
  while (i < t1.length && i < t2.length) {
    if (t1[i] < t2[i]) {
      return true;
    }
    if (t1[i] > t2[i]) {
      return false;
    }
    i++;
  }
  return (t1.length < t2.length);
}",0.5094339622641509
178521,"public static List<Integer> reference(List<Integer> path,List<Integer> ref){
  List<Integer> tab=addP(path,1);
  int i=1;
  while (ref.get(i).equals(tab.get(i))) {
    tab.set(i,0);
    i++;
  }
  tab.set(i,tab.get(i) - ref.get(i));
  return tab;
}","public static int[] reference(int[] path,int[] ref){
  int[] tab=addP(path,1);
  int i=1;
  while (ref[i] == tab[i]) {
    tab[i]=0;
    i++;
  }
  tab[i]=tab[i] - ref[i];
  return tab;
}",0.7402298850574712
178522,"public static List<Integer> addP(List<Integer> path,int nb){
  List<Integer> copy=new ArrayList<Integer>(path.size());
  copy.add(0,path.get(0) + nb);
  for (int i=1; i < path.size(); i++) {
    copy.add(new Integer(path.get(i).intValue()));
  }
  return copy;
}","public static int[] addP(int[] path,int nb){
  int[] tab=new int[path.length];
  tab[0]=path[0] + nb;
  for (int i=1; i < path.length; i++) {
    tab[i]=path[i];
  }
  return tab;
}",0.6410835214446953
178523,"public static List<Integer> addLevel(List<Integer> path){
  List<Integer> tab=new ArrayList<Integer>(path.size() + 1);
  for (int i=0; i < path.size(); i++) {
    tab.add(new Integer(path.get(i).intValue()));
  }
  tab.add(0);
  return tab;
}","public static int[] addLevel(int[] path){
  int[] tab=new int[path.length + 1];
  for (int i=0; i < path.length; i++) {
    tab[i]=path[i];
  }
  tab[tab.length - 1]=0;
  return tab;
}",0.676056338028169
178524,"public static boolean diff(List<Integer> t1,List<Integer> t2){
  return !Arrays.equals(t1.toArray(),t2.toArray());
}","public static boolean diff(int[] t1,int[] t2){
  return !Arrays.equals(t1,t2);
}",0.7755102040816326
178525,"public static List<Integer> setP(List<Integer> path,int nb){
  List<Integer> tab=new ArrayList<Integer>(path.size());
  tab.add(0,nb);
  for (int i=1; i < path.size(); i++) {
    tab.add(new Integer(path.get(i).intValue()));
  }
  return tab;
}","public static int[] setP(int[] path,int nb){
  int[] tab=new int[path.length];
  tab[0]=nb;
  for (int i=1; i < path.length; i++) {
    tab[i]=path[i];
  }
  return tab;
}",0.6939759036144578
178526,"public static List<Integer> addC(List<Integer> path,int pos,int nb){
  List<Integer> tab=new ArrayList<Integer>(path.size());
  for (int i=0; i < path.size(); i++) {
    tab.add(new Integer(path.get(i).intValue()));
  }
  tab.set(pos,tab.get(pos) + nb);
  return tab;
}","public static int[] addC(int[] path,int pos,int nb){
  int[] tab=new int[path.length];
  for (int i=0; i < path.length; i++) {
    tab[i]=path[i];
  }
  tab[pos]=tab[pos] + nb;
  return tab;
}",0.7071583514099783
178527,"/** 
 * Creates a new server correspondent for the given client
 * @param clientDTO the client for which to create a server correspondent
 * @return the document on some server in same editing session if any, otherwise the document sent by the client
 */
public Document addServerForClient(ClientDTO clientDTO){
  int editingSessionId=clientDTO.getEditingSessionId();
synchronized (editingSessions) {
    if (!editingSessions.containsKey(editingSessionId)) {
      editingSessions.put(editingSessionId,new ArrayList<Integer>());
    }
    editingSessions.get(editingSessionId).add(clientDTO.getSiteId());
  }
  int siteId=clientDTO.getSiteId();
  Document document=clientDTO.getDocument();
  List<Integer> serverIds=editingSessions.get(editingSessionId);
  if (serverIds.size() > 0) {
    ServerJupiterAlg serverPair=correspondents.get(serverIds.get(0));
    if (serverPair != null) {
      document=serverPair.getDocument();
    }
  }
  ServerJupiterAlg serverJupiter=new ServerJupiterAlg(document,siteId);
synchronized (correspondents) {
    correspondents.put(siteId,serverJupiter);
  }
  return document;
}","/** 
 * Creates a new server correspondent for the given client
 * @param clientDTO the client for which to create a server correspondent
 * @return the document on some server in same editing session if any, otherwise the document sent by the client
 */
public Document addServerForClient(ClientDTO clientDTO){
  int editingSessionId=clientDTO.getEditingSessionId();
synchronized (editingSessions) {
    if (!editingSessions.containsKey(editingSessionId)) {
      editingSessions.put(editingSessionId,new ArrayList<Integer>());
    }
    editingSessions.get(editingSessionId).add(clientDTO.getSiteId());
  }
  int siteId=clientDTO.getSiteId();
  Document document=clientDTO.getDocument();
  List<Integer> serverIds=editingSessions.get(editingSessionId);
  if (serverIds.size() > 0) {
    ServerJupiterAlg serverPair=correspondents.get(serverIds.get(0));
    if (serverPair != null) {
      document=serverPair.getDocument().deepCloneDocument();
    }
  }
  ServerJupiterAlg serverJupiter=new ServerJupiterAlg(document,siteId);
synchronized (correspondents) {
    correspondents.put(siteId,serverJupiter);
  }
  return document;
}",0.9910714285714286
178528,"/** 
 * Creates a new server correspondent for the given client
 * @param clientJupiterAlg the client for which to create a server correspondent
 * @return the document on some server in same editing session if any, otherwise the document sent by the client
 */
public Document addServerForClient(ClientDTO clientJupiterAlg){
  int editingSessionId=clientJupiterAlg.getEditingSessionId();
synchronized (editingSessions) {
    if (!editingSessions.containsKey(editingSessionId)) {
      editingSessions.put(editingSessionId,new ArrayList<Integer>());
    }
    editingSessions.get(editingSessionId).add(clientJupiterAlg.getSiteId());
  }
  int siteId=clientJupiterAlg.getSiteId();
  Document document=clientJupiterAlg.getDocument();
  List<Integer> serverIds=editingSessions.get(editingSessionId);
  if (serverIds.size() > 0) {
    ServerJupiterAlg serverPair=correspondents.get(serverIds.get(0));
    if (serverPair != null) {
      document=serverPair.getDocument();
    }
  }
  ServerJupiterAlg serverJupiter=new ServerJupiterAlg(document,siteId);
synchronized (correspondents) {
    correspondents.put(siteId,serverJupiter);
  }
  return document;
}","/** 
 * Creates a new server correspondent for the given client
 * @param clientDTO the client for which to create a server correspondent
 * @return the document on some server in same editing session if any, otherwise the document sent by the client
 */
public Document addServerForClient(ClientDTO clientDTO){
  int editingSessionId=clientDTO.getEditingSessionId();
synchronized (editingSessions) {
    if (!editingSessions.containsKey(editingSessionId)) {
      editingSessions.put(editingSessionId,new ArrayList<Integer>());
    }
    editingSessions.get(editingSessionId).add(clientDTO.getSiteId());
  }
  int siteId=clientDTO.getSiteId();
  Document document=clientDTO.getDocument();
  List<Integer> serverIds=editingSessions.get(editingSessionId);
  if (serverIds.size() > 0) {
    ServerJupiterAlg serverPair=correspondents.get(serverIds.get(0));
    if (serverPair != null) {
      document=serverPair.getDocument();
    }
  }
  ServerJupiterAlg serverJupiter=new ServerJupiterAlg(document,siteId);
synchronized (correspondents) {
    correspondents.put(siteId,serverJupiter);
  }
  return document;
}",0.7718832891246684
178529,"public void removeServerForClient(ClientDTO clientJupiterAlg){
  int editingSessionId=clientJupiterAlg.getEditingSessionId();
  int siteId=clientJupiterAlg.getSiteId();
  if (editingSessions.containsKey(editingSessionId)) {
synchronized (editingSessions) {
      editingSessions.get(editingSessionId).remove(Integer.valueOf(siteId));
    }
  }
  if (correspondents.containsKey(siteId)) {
synchronized (correspondents) {
      correspondents.remove(siteId);
    }
  }
}","public void removeServerForClient(ClientDTO clientDTO){
  int editingSessionId=clientDTO.getEditingSessionId();
  int siteId=clientDTO.getSiteId();
  if (editingSessions.containsKey(editingSessionId)) {
synchronized (editingSessions) {
      List<Integer> serverIds=editingSessions.get(editingSessionId);
      int idx=serverIds.indexOf(siteId);
      if (idx > -1) {
        serverIds.remove(idx);
      }
      if (serverIds.size() == 0) {
        editingSessions.remove(editingSessionId);
      }
    }
  }
  if (correspondents.containsKey(siteId)) {
synchronized (correspondents) {
      correspondents.remove(siteId);
    }
  }
}",0.3738656987295826
178530,"protected TreeOperation handleTreeInsertText(TreeInsertText op1){
  if (!TreeUtils.diff(op1.path,path)) {
    if (op1.getPosition() < position) {
      return op1;
    }
    List<Integer> tab=new ArrayList<Integer>(op1.path.size());
    tab.set(0,op1.path.get(0) + 1);
    return new TreeInsertText(op1.getSiteId(),op1.getPosition() - position,tab,op1.text);
  }
  if (TreeUtils.inf(op1.path,path)) {
    return op1;
  }
  if (op1.path.get(0) > path.get(0)) {
    List<Integer> tab=TreeUtils.addP(op1.path,1);
    return new TreeInsertText(op1.getSiteId(),op1.getPosition(),tab,op1.text);
  }
  List<Integer> tab=TreeUtils.reference(op1.path,path);
  return new TreeInsertText(op1.getSiteId(),op1.getPosition(),tab,op1.text);
}","protected TreeOperation handleTreeInsertText(TreeInsertText op1){
  if (!TreeUtils.diff(op1.path,path)) {
    if (op1.getPosition() < position) {
      return op1;
    }
    List<Integer> tab=new ArrayList<Integer>(op1.path.size());
    tab.set(0,op1.path.get(0) + 1);
    return new TreeInsertText(op1.getSiteId(),op1.getPosition() - position,tab,op1.getText());
  }
  if (TreeUtils.inf(op1.path,path)) {
    return op1;
  }
  if (op1.path.get(0) > path.get(0)) {
    List<Integer> tab=TreeUtils.addP(op1.path,1);
    return new TreeInsertText(op1.getSiteId(),op1.getPosition(),tab,op1.getText());
  }
  List<Integer> tab=TreeUtils.reference(op1.path,path);
  return new TreeInsertText(op1.getSiteId(),op1.getPosition(),tab,op1.getText());
}",0.9857045609257998
178531,"protected TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == path.get(0)) {
    return new TreeMergeParagraph(op1.getPosition(),op1.leftSiblingChildrenNr,path.get(1) + (splitLeft ? 1 : 0));
  }
  if (op1.getPosition() == path.get(0) + 1) {
    return new TreeMergeParagraph(op1.getPosition() + 1,op1.leftSiblingChildrenNr - path.get(1),op1.rightSiblingChildrenNr);
  }
  if (op1.getPosition() < path.get(0)) {
    return op1;
  }
  return new TreeMergeParagraph(op1.getPosition() + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
}","protected TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == path.get(0)) {
    return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition(),op1.leftSiblingChildrenNr,path.get(1) + (splitLeft ? 1 : 0));
  }
  if (op1.getPosition() == path.get(0) + 1) {
    return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition() + 1,op1.leftSiblingChildrenNr - path.get(1),op1.rightSiblingChildrenNr);
  }
  if (op1.getPosition() < path.get(0)) {
    return op1;
  }
  return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition() + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
}",0.9602649006622516
178532,"public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ path+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ path+ ""String_Node_Str""+ splitLeft+ ""String_Node_Str"";
}",0.8880597014925373
178533,"public TreeMergeParagraph(int position,int leftSiblingChildrenNr,int rightSiblingChildrenNr){
  this.position=position;
  this.leftSiblingChildrenNr=leftSiblingChildrenNr;
  this.rightSiblingChildrenNr=rightSiblingChildrenNr;
}","public TreeMergeParagraph(int siteId,int position,int leftSiblingChildrenNr,int rightSiblingChildrenNr){
  super(siteId,position);
  this.leftSiblingChildrenNr=leftSiblingChildrenNr;
  this.rightSiblingChildrenNr=rightSiblingChildrenNr;
}",0.6494623655913978
178534,"public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == position) {
    return new TreeIdOp();
  }
  if (op1.getPosition() == position + 1) {
    return new TreeMergeParagraph(op1.getPosition() - 1,op1.leftSiblingChildrenNr + leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
  }
  if (op1.getPosition() == position - 1) {
    return new TreeMergeParagraph(op1.getPosition(),op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr + rightSiblingChildrenNr);
  }
  if (op1.getPosition() < position) {
    return op1;
  }
  return new TreeMergeParagraph(op1.getPosition() - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
}","public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == position) {
    return new TreeIdOp();
  }
  if (op1.getPosition() == position + 1) {
    return new TreeMergeParagraph(siteId,op1.getPosition() - 1,op1.leftSiblingChildrenNr + leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
  }
  if (op1.getPosition() == position - 1) {
    return new TreeMergeParagraph(siteId,op1.getPosition(),op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr + rightSiblingChildrenNr);
  }
  if (op1.getPosition() < position) {
    return op1;
  }
  return new TreeMergeParagraph(siteId,op1.getPosition() - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
}",0.9845701689933872
178535,"public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (sp == op1.getPosition()) {
    if (ep == sp - 1) {
      return new TreeCompositeOperation(this,op1);
    }
    if (ep > sp) {
      return new TreeCompositeOperation(new TreeMoveParagraph(siteId,sp - 1,ep - 1),new TreeMergeParagraph(ep - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
 else {
      return new TreeCompositeOperation(this,new TreeMergeParagraph(ep + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
  }
  if (sp == op1.getPosition() - 1) {
    if (ep == sp + 2) {
      return new TreeCompositeOperation(this,op1);
    }
    if (ep > sp) {
      return new TreeCompositeOperation(this,new TreeMergeParagraph(ep,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
 else {
      return new TreeCompositeOperation(new TreeMoveParagraph(siteId,sp + 1,ep + 1),new TreeMergeParagraph(ep + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
  }
  if (op1.getPosition() < sp) {
    if (op1.getPosition() == ep) {
      return new TreeCompositeOperation(new TreeMoveParagraph(siteId,ep,ep + 2),op1);
    }
    if (op1.getPosition() < ep) {
      return op1;
    }
    return new TreeMergeParagraph(op1.getPosition() + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
  }
  if (op1.getPosition() == ep) {
    return new TreeCompositeOperation(new TreeMoveParagraph(siteId,ep - 1,ep + 1),new TreeMergeParagraph(op1.getPosition() - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
  }
  if (op1.getPosition() < ep) {
    return new TreeMergeParagraph(op1.getPosition() - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
  }
  return op1;
}","public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (sp == op1.getPosition()) {
    if (ep == sp - 1) {
      return new TreeCompositeOperation(this,op1);
    }
    if (ep > sp) {
      return new TreeCompositeOperation(new TreeMoveParagraph(siteId,sp - 1,ep - 1),new TreeMergeParagraph(op1.getSiteId(),ep - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
 else {
      return new TreeCompositeOperation(this,new TreeMergeParagraph(op1.getSiteId(),ep + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
  }
  if (sp == op1.getPosition() - 1) {
    if (ep == sp + 2) {
      return new TreeCompositeOperation(this,op1);
    }
    if (ep > sp) {
      return new TreeCompositeOperation(this,new TreeMergeParagraph(op1.getSiteId(),ep,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
 else {
      return new TreeCompositeOperation(new TreeMoveParagraph(siteId,sp + 1,ep + 1),new TreeMergeParagraph(op1.getSiteId(),ep + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
    }
  }
  if (op1.getPosition() < sp) {
    if (op1.getPosition() == ep) {
      return new TreeCompositeOperation(new TreeMoveParagraph(siteId,ep,ep + 2),op1);
    }
    if (op1.getPosition() < ep) {
      return op1;
    }
    return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition() + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
  }
  if (op1.getPosition() == ep) {
    return new TreeCompositeOperation(new TreeMoveParagraph(siteId,ep - 1,ep + 1),new TreeMergeParagraph(op1.getSiteId(),op1.getPosition() - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr));
  }
  if (op1.getPosition() < ep) {
    return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition() - 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
  }
  return op1;
}",0.9681274900398408
178536,"public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == position) {
    return new TreeCompositeOperation(new TreeMoveParagraph(op1.getSiteId(),position,position + 2),op1);
  }
  if (op1.getPosition() < position) {
    return op1;
  }
  return new TreeMergeParagraph(op1.getPosition() + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
}","public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == position) {
    return new TreeCompositeOperation(new TreeMoveParagraph(op1.getSiteId(),position,position + 2),op1);
  }
  if (op1.getPosition() < position) {
    return op1;
  }
  return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition() + 1,op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr);
}",0.979746835443038
178537,"public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == path.get(0)) {
    int d=0;
    if (splitLeft) {
      d++;
    }
    if (sr) {
      d++;
    }
    return new TreeMergeParagraph(op1.getPosition(),op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr + d);
  }
  if (op1.getPosition() == path.get(0) + 1) {
    int d=0;
    if (splitLeft) {
      d++;
    }
    if (sr) {
      d++;
    }
    return new TreeMergeParagraph(op1.getPosition(),op1.leftSiblingChildrenNr + d,op1.rightSiblingChildrenNr);
  }
  return op1;
}","public TreeOperation handleTreeMergeParagraph(TreeMergeParagraph op1){
  if (op1.getPosition() == path.get(0)) {
    int d=0;
    if (splitLeft) {
      d++;
    }
    if (sr) {
      d++;
    }
    return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition(),op1.leftSiblingChildrenNr,op1.rightSiblingChildrenNr + d);
  }
  if (op1.getPosition() == path.get(0) + 1) {
    int d=0;
    if (splitLeft) {
      d++;
    }
    if (sr) {
      d++;
    }
    return new TreeMergeParagraph(op1.getSiteId(),op1.getPosition(),op1.leftSiblingChildrenNr + d,op1.rightSiblingChildrenNr);
  }
  return op1;
}",0.958904109589041
178538,"/** 
 * @see org.xwiki.contrib.wiki30.WorkspaceManager#editWorkspace(java.lang.String,com.xpn.xwiki.plugin.wikimanager.doc.XWikiServer)
 */
public void editWorkspace(String workspaceName,XWikiServer modifiedWikiXObjectDocument){
  try {
    String currentUser=getPrefixedUserName(getXWikiContext().getUser());
    if (!canEditWorkspace(currentUser,workspaceName)) {
      error(new WorkspaceManagerException(String.format(""String_Node_Str"",currentUser,workspaceName)));
    }
    if (!getXWikiContext().getWiki().getRightService().hasProgrammingRights(getXWikiContext())) {
      throw new WorkspaceManagerException(String.format(""String_Node_Str"",workspaceName));
    }
    workspaceManager.editWorkspace(workspaceName,modifiedWikiXObjectDocument);
  }
 catch (  Exception e) {
    error(String.format(""String_Node_Str"",workspaceName),e);
  }
}","/** 
 * @see org.xwiki.contrib.wiki30.WorkspaceManager#editWorkspace(java.lang.String,com.xpn.xwiki.plugin.wikimanager.doc.XWikiServer)
 */
public void editWorkspace(String workspaceName,XWikiServer modifiedWikiXObjectDocument){
  try {
    String currentUser=getPrefixedUserName(getXWikiContext().getUser());
    if (!canEditWorkspace(currentUser,workspaceName)) {
      throw new WorkspaceManagerException(String.format(""String_Node_Str"",currentUser,workspaceName));
    }
    if (!getXWikiContext().getWiki().getRightService().hasProgrammingRights(getXWikiContext())) {
      throw new WorkspaceManagerException(String.format(""String_Node_Str"",workspaceName));
    }
    workspaceManager.editWorkspace(workspaceName,modifiedWikiXObjectDocument);
  }
 catch (  Exception e) {
    error(String.format(""String_Node_Str"",workspaceName),e);
  }
}",0.9923031379514504
178539,"public void removeServerPairForClient(ClientJupiterAlg clientJupiterAlg){
  logger.debug(""String_Node_Str"" + clientJupiterAlg.getSiteId());
  int esid=clientJupiterAlg.getEditingSessionId();
  if (locks.containsKey(esid)) {
synchronized (locks) {
      locks.get(esid).remove(Integer.valueOf(clientJupiterAlg.getSiteId()));
    }
  }
  ClientServerCorrespondents.getInstance().removeServerForClient(clientJupiterAlg);
}","public void removeServerPairForClient(ClientJupiterAlg clientJupiterAlg){
  logger.debug(""String_Node_Str"" + clientJupiterAlg.getSiteId());
  int esid=clientJupiterAlg.getEditingSessionId();
  if (locks.containsKey(esid)) {
synchronized (locks) {
      locks.get(esid).remove(Integer.valueOf(clientJupiterAlg.getSiteId()));
      ClientServerCorrespondents.getInstance().setEditingSessions(locks);
    }
  }
  ClientServerCorrespondents.getInstance().removeServerForClient(clientJupiterAlg);
}",0.918859649122807
178540,"public RtApi(JavaScriptObject jsConfig){
  initClient();
  editor.addHooksToEventListeners(new EditorApi());
  Config config=new DefaultConfig(jsConfig);
  Element htmlTextAreaElement=DOM.getElementById(""String_Node_Str"");
  if (htmlTextAreaElement == null) {
    return;
  }
  if (htmlTextAreaElement.getTagName().equalsIgnoreCase(""String_Node_Str"")) {
    int width=500;
    int height=210;
    TextArea tArea=TextArea.wrap(htmlTextAreaElement);
    height=tArea.getOffsetHeight();
    width=tArea.getOffsetWidth();
    Element canvasEl=DOM.createElement(""String_Node_Str"");
    canvasEl.setId(""String_Node_Str"");
    canvasEl.setPropertyInt(""String_Node_Str"",width);
    canvasEl.setPropertyInt(""String_Node_Str"",height);
    com.google.gwt.dom.client.Element parentElem=htmlTextAreaElement.getParentElement();
    parentElem.insertFirst(canvasEl);
    parentElem.removeChild(htmlTextAreaElement);
    injectJSFilesForRTEditor(parentElem);
  }
}","public RtApi(JavaScriptObject jsConfig){
  Config config=new DefaultConfig(jsConfig);
  Element htmlTextAreaElement=DOM.getElementById(""String_Node_Str"");
  if (htmlTextAreaElement == null) {
    return;
  }
  if (htmlTextAreaElement.getTagName().equalsIgnoreCase(""String_Node_Str"")) {
    int width=500;
    int height=210;
    TextArea tArea=TextArea.wrap(htmlTextAreaElement);
    height=tArea.getOffsetHeight();
    width=tArea.getOffsetWidth();
    Element canvasEl=DOM.createElement(""String_Node_Str"");
    canvasEl.setId(""String_Node_Str"");
    canvasEl.setPropertyInt(""String_Node_Str"",width);
    canvasEl.setPropertyInt(""String_Node_Str"",height);
    com.google.gwt.dom.client.Element parentElem=htmlTextAreaElement.getParentElement();
    parentElem.insertFirst(canvasEl);
    parentElem.removeChild(htmlTextAreaElement);
    injectJSFilesForRTEditor(parentElem);
    clientJupiter.setData(tArea.getText());
    initClient();
  }
}",0.9312169312169312
178541,"/** 
 * Create the corresponding server component for this client on the server side AND update the text area with the available content
 */
private void createServerPairForClient(){
  comService.createServerPairForClient(clientJupiter,new AsyncCallback<String>(){
    public void onFailure(    Throwable caught){
      GWT.log(""String_Node_Str"" + caught);
    }
    public void onSuccess(    String result){
      GWT.log(""String_Node_Str"");
      if (result != null) {
        clientJupiter.setData(result);
        editor.setContent(result);
      }
    }
  }
);
}","/** 
 * Create the corresponding server component for this client on the server side AND update the text area with the available content
 */
private void createServerPairForClient(){
  comService.createServerPairForClient(clientJupiter,new AsyncCallback<String>(){
    public void onFailure(    Throwable caught){
      GWT.log(""String_Node_Str"" + caught);
    }
    public void onSuccess(    String result){
      GWT.log(""String_Node_Str"");
      if (result != null) {
        clientJupiter.setData(result);
        editor=Editor.getEditor();
        editor.addHooksToEventListeners(new EditorApi());
        clientJupiter.setEditor(editor);
        editor.setContent(result);
        editor.paint();
      }
    }
  }
);
}",0.8777089783281734
178542,"public Operation transform(Operation m1,Operation m2){
  if (m1 instanceof InsertOperation) {
    if (m2 instanceof InsertOperation) {
      return handleInsertInsert(m1,m2);
    }
 else     if (m2 instanceof DeleteOperation) {
      return handleInsertDelete(m1,m2);
    }
 else     return new NoOperation();
  }
 else   if (m1 instanceof DeleteOperation) {
    if (m2 instanceof InsertOperation) {
      return handleDeleteInsert(m1,m2);
    }
 else     if (m2 instanceof DeleteOperation) {
      return handleDeleteDelete(m1,m2);
    }
 else     return new NoOperation();
  }
  return new NoOperation(0);
}","public Operation transform(Operation m1,Operation m2){
  if (m1 instanceof InsertOperation) {
    if (m2 instanceof InsertOperation) {
      return handleInsertInsert(m1,m2);
    }
 else     if (m2 instanceof DeleteOperation) {
      return handleInsertDelete(m1,m2);
    }
 else {
      return m1;
    }
  }
 else   if (m1 instanceof DeleteOperation) {
    if (m2 instanceof InsertOperation) {
      return handleDeleteInsert(m1,m2);
    }
 else     if (m2 instanceof DeleteOperation) {
      return handleDeleteDelete(m1,m2);
    }
 else {
      return m1;
    }
  }
  return new NoOperation(0);
}",0.5132450331125827
178543,"/** 
 * Set test info
 * @param description
 */
protected void setTestInfo(Description description){
  JUnitTestData testMethod=new JUnitTestData(false,false);
  testMethod.setDescription(description);
  if (!testMethodsList.contains(description))   testMethodsList.add(testMethod);
}","/** 
 * Set test info
 * @param description
 */
protected void setTestInfo(Description description){
  JUnitTestData testMethod=new JUnitTestData(false,false);
  testMethod.setDescription(description);
  if (!testMethodsList.contains(testMethod))   testMethodsList.add(testMethod);
}",0.9629629629629628
178544,"/** 
 * @param file
 * @return
 * @throws FileNotFoundException
 * @throws JAXBException
 * @throws IOException
 */
private List<AbstractSample> getResultList(File file){
  TestResults results=new TestResults();
  InputStream inputStream=null;
  Reader reader=null;
  try {
    inputStream=new FileInputStream(file);
    reader=new InputStreamReader(inputStream,charset);
    JAXBContext jc=JAXBContext.newInstance(ObjectFactory.class);
    Unmarshaller unmarshaller=jc.createUnmarshaller();
    results=(TestResults)unmarshaller.unmarshal(reader);
  }
 catch (  JAXBException jAXBException) {
    throw new ParserException(""String_Node_Str"",jAXBException);
  }
catch (  FileNotFoundException fileNotFoundException) {
    throw new ParserException(""String_Node_Str"" + file,fileNotFoundException);
  }
  try {
    if (reader != null) {
      reader.close();
    }
    if (inputStream != null) {
      inputStream.close();
    }
  }
 catch (  IOException e) {
    throw new ParserException(""String_Node_Str"" + e.getMessage(),e);
  }
  List<AbstractSample> sampleResultList=null;
  if (results == null) {
    sampleResultList=new ArrayList<AbstractSample>();
  }
 else {
    sampleResultList=results.getHttpSampleOrSample();
  }
  return sampleResultList;
}","/** 
 * @param file xml file
 * @return the list of results
 * @throws FileNotFoundException
 * @throws JAXBException
 * @throws IOException
 */
private List<AbstractSample> getResultList(File file){
  try (InputStream inputStream=new FileInputStream(file);Reader reader=new InputStreamReader(inputStream,charset)){
    final JAXBContext jc=JAXBContext.newInstance(ObjectFactory.class);
    final Unmarshaller unmarshaller=jc.createUnmarshaller();
    final TestResults results=(TestResults)unmarshaller.unmarshal(reader);
    if (results == null) {
      return Collections.emptyList();
    }
    return results.getHttpSampleOrSample();
  }
 catch (  JAXBException jAXBException) {
    throw new ParserException(""String_Node_Str"",jAXBException);
  }
catch (  FileNotFoundException fileNotFoundException) {
    throw new ParserException(String.format(""String_Node_Str"",file.getAbsolutePath()),fileNotFoundException);
  }
catch (  IOException e) {
    throw new ParserException(String.format(""String_Node_Str"",e.getMessage()),e);
  }
}",0.6188811188811189
178545,"/** 
 * @param file
 * @param testSet
 * @throws UnsupportedEncodingException
 * @throws FileNotFoundException
 * @throws IOException
 */
private void generateTapFile(File file,TestSet testSet){
  String fileName=file.getAbsolutePath();
  String tapFileName=fileName.replace(XML_EXT,TAP_EXT);
  DumperOptions options=new DumperOptions();
  options.setPrintDiagnostics(true);
  options.setCharset(charset.name());
  Producer tapProducer=TapProducerFactory.makeTap13YamlProducer();
  Writer out;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tapFileName),charset));
    tapProducer.dump(testSet,out);
    out.close();
  }
 catch (  FileNotFoundException fileNotFoundException) {
    throw new ParserException(""String_Node_Str"" + tapFileName,fileNotFoundException);
  }
catch (  IOException e) {
    throw new ParserException(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * @param file xml file
 * @param testSet TAP Test Set
 * @throws UnsupportedEncodingException
 * @throws FileNotFoundException
 * @throws IOException
 */
private void generateTapFile(File file,TestSet testSet){
  String fileName=file.getAbsolutePath();
  String tapFileName=fileName.replace(XML_EXT,TAP_EXT);
  DumperOptions options=new DumperOptions();
  options.setPrintDiagnostics(true);
  options.setCharset(charset.name());
  Producer tapProducer=TapProducerFactory.makeTap13YamlProducer();
  Writer out;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tapFileName),charset));
    tapProducer.dump(testSet,out);
    out.close();
  }
 catch (  FileNotFoundException fileNotFoundException) {
    throw new ParserException(String.format(""String_Node_Str"",tapFileName),fileNotFoundException);
  }
catch (  IOException e) {
    throw new ParserException(String.format(""String_Node_Str"",e.getMessage()),e);
  }
}",0.9556277056277056
178546,"/** 
 * Set test info
 * @param description
 */
protected void setTestInfo(Description description){
  JUnitTestData testMethod=new JUnitTestData(false,false);
  testMethod.setDescription(description);
  if (!testMethodsList.contains(description))   testMethodsList.add(testMethod);
}","/** 
 * Set test info
 * @param description
 */
protected void setTestInfo(Description description){
  JUnitTestData testMethod=new JUnitTestData(false,false);
  testMethod.setDescription(description);
  if (!testMethodsList.contains(testMethod))   testMethodsList.add(testMethod);
}",0.9629629629629628
178547,"/** 
 * @param yamlish
 * @param testNgTestResult
 */
public static void createYAMLishActualAndExpected(Map<String,Object> yamlish,ITestResult testNgTestResult){
  String expected=TapTestNGYamlUtil.getExpected(testNgTestResult);
  String actual=TapTestNGYamlUtil.getActual(testNgTestResult);
  if (expected == null) {
    expected=""String_Node_Str"";
  }
  if (actual == null) {
    actual=""String_Node_Str"";
  }
  yamlish.put(""String_Node_Str"",actual);
  yamlish.put(""String_Node_Str"",expected);
}","/** 
 * @param yamlish
 * @param testNgTestResult
 */
public static void createYAMLishActualAndExpected(Map<String,Object> yamlish,ITestResult testNgTestResult){
  String expected=TapTestNGYamlUtil.getExpected(testNgTestResult);
  String actual=TapTestNGYamlUtil.getActual(testNgTestResult);
  if (expected == null) {
    expected=""String_Node_Str"";
  }
  yamlish.put(""String_Node_Str"",actual);
  yamlish.put(""String_Node_Str"",expected);
}",0.938034188034188
178548,"/** 
 * @param testNgTestResult
 * @return Expected value
 */
public static String getExpected(ITestResult testNgTestResult){
  Throwable throwable=testNgTestResult.getThrowable();
  String expected=null;
  if (throwable != null) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    throwable.printStackTrace(pw);
    String stringException=sw.toString();
    String expectedToken=""String_Node_Str"";
    String butWasToken=""String_Node_Str"";
    int index=stringException.indexOf(expectedToken);
    if (index > 0) {
      expected=stringException.substring(index + expectedToken.length(),stringException.lastIndexOf(butWasToken));
      index=stringException.indexOf(butWasToken);
    }
  }
  return expected;
}","/** 
 * @param testNgTestResult
 * @return Expected value
 */
public static String getExpected(ITestResult testNgTestResult){
  Throwable throwable=testNgTestResult.getThrowable();
  String expected=null;
  if (throwable != null) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    throwable.printStackTrace(pw);
    String stringException=sw.toString();
    String expectedToken=""String_Node_Str"";
    String butWasToken=""String_Node_Str"";
    int index=stringException.indexOf(expectedToken);
    if (index > 0) {
      expected=stringException.substring(index + expectedToken.length(),stringException.lastIndexOf(butWasToken));
    }
  }
  return expected;
}",0.9652777777777778
178549,"/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  TapElement tapElement=TapElementFactory.createTapElement(tapLine);
  if (tapElement == null || state.isInYaml()) {
    String trimmedLine=tapLine.trim();
    Text text=TapElementFactory.createTextElement(tapLine);
    if (state.isInYaml()) {
      boolean yamlEndMarkReached=trimmedLine.equals(""String_Node_Str"") && (tapLine.equals(state.getYamlIndentation() + ""String_Node_Str"") || text.getIndentation() < state.getYamlIndentation().length());
      if (yamlEndMarkReached) {
        state.setInYaml(false);
        parseDiagnostics();
      }
 else {
        state.getDiagnosticBuffer().append(tapLine);
        state.getDiagnosticBuffer().append('\n');
      }
    }
 else {
      if (trimmedLine.equals(""String_Node_Str"")) {
        if (text.getIndentation() < baseIndentation) {
          throw new ParserException(""String_Node_Str"" + ""String_Node_Str"" + tapLine);
        }
        state.setInYaml(true);
        state.setYamlIndentation(text.getIndentationString());
      }
 else {
        state.getTestSet().getTapLines().add(text);
        state.setLastParsedElement(text);
      }
    }
    return;
  }
  int indentation=tapElement.getIndentation();
  if (indentation < baseIndentation) {
    baseIndentation=indentation;
  }
  if (indentation != state.getIndentationLevel()) {
    if (indentation > state.getIndentationLevel()) {
      StreamStatus parentState=state;
      pushState(indentation);
      TapElement lastParentElement=parentState.getLastParsedElement();
      if (lastParentElement instanceof TestResult) {
        final TestResult lastTestResult=(TestResult)lastParentElement;
        if (lastTestResult.getSubtest() == null) {
          lastTestResult.setSubtest(state.getTestSet());
          state.attachedToParent=true;
        }
      }
    }
 else {
      do {
        StreamStatus prevState=state;
        state=states.pop();
        if (!prevState.attachedToParent) {
          state.looseSubtests=prevState.getTestSet();
        }
      }
 while (indentation < state.getIndentationLevel());
    }
  }
  if (tapElement instanceof Header) {
    if (state.getTestSet().getHeader() != null) {
      throw new ParserException(""String_Node_Str"");
    }
    if (!state.isFirstLine()) {
      throw new ParserException(""String_Node_Str"" + ""String_Node_Str"");
    }
    state.getTestSet().setHeader((Header)tapElement);
  }
 else   if (tapElement instanceof Plan) {
    if (state.getTestSet().getPlan() != null) {
      throw new ParserException(""String_Node_Str"");
    }
    if (state.getTestSet().getTestResults().size() <= 0 && state.getTestSet().getBailOuts().size() <= 0) {
      state.setPlanBeforeTestResult(true);
    }
    state.getTestSet().setPlan((Plan)tapElement);
  }
 else   if (tapElement instanceof TestResult) {
    parseDiagnostics();
    final TestResult testResult=(TestResult)tapElement;
    if (testResult.getTestNumber() == 0) {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false) {
        return;
      }
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size()) {
        return;
      }
      testResult.setTestNumber(state.getTestSet().getNextTestNumber());
    }
    state.getTestSet().addTestResult(testResult);
    if (state.looseSubtests != null) {
      testResult.setSubtest(state.looseSubtests);
      state.looseSubtests=null;
    }
  }
 else   if (tapElement instanceof Footer) {
    state.getTestSet().setFooter((Footer)tapElement);
  }
 else   if (tapElement instanceof BailOut) {
    state.getTestSet().addBailOut((BailOut)tapElement);
  }
 else   if (tapElement instanceof Comment) {
    final Comment comment=(Comment)tapElement;
    state.getTestSet().addComment(comment);
    if (state.getLastParsedElement() instanceof TestResult) {
      ((TestResult)state.getLastParsedElement()).addComment(comment);
    }
  }
  state.setFirstLine(false);
  if (!(tapElement instanceof Comment)) {
    state.setLastParsedElement(tapElement);
  }
}","/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  TapElement tapElement=TapElementFactory.createTapElement(tapLine);
  if (tapElement == null || state.isInYaml()) {
    String trimmedLine=tapLine.trim();
    Text text=TapElementFactory.createTextElement(tapLine);
    if (state.isInYaml()) {
      boolean yamlEndMarkReached=trimmedLine.equals(""String_Node_Str"") && (tapLine.equals(state.getYamlIndentation() + ""String_Node_Str"") || text.getIndentation() < state.getYamlIndentation().length());
      if (yamlEndMarkReached) {
        state.setInYaml(false);
        parseDiagnostics();
      }
 else {
        state.getDiagnosticBuffer().append(tapLine);
        state.getDiagnosticBuffer().append('\n');
      }
    }
 else {
      if (trimmedLine.equals(""String_Node_Str"")) {
        if (text.getIndentation() < baseIndentation) {
          throw new ParserException(""String_Node_Str"" + ""String_Node_Str"" + tapLine);
        }
        state.setInYaml(true);
        state.setYamlIndentation(text.getIndentationString());
      }
 else {
        state.getTestSet().getTapLines().add(text);
        state.setLastParsedElement(text);
      }
    }
    return;
  }
  int indentation=tapElement.getIndentation();
  if (indentation < baseIndentation) {
    baseIndentation=indentation;
  }
  if (indentation != state.getIndentationLevel()) {
    if (indentation > state.getIndentationLevel()) {
      StreamStatus parentState=state;
      pushState(indentation);
      TapElement lastParentElement=parentState.getLastParsedElement();
      if (lastParentElement instanceof TestResult) {
        final TestResult lastTestResult=(TestResult)lastParentElement;
        if (lastTestResult.getSubtest() == null) {
          lastTestResult.setSubtest(state.getTestSet());
          state.attachedToParent=true;
        }
      }
    }
 else {
      do {
        StreamStatus prevState=state;
        state=states.pop();
        if (!prevState.attachedToParent) {
          state.looseSubtests=prevState.getTestSet();
        }
      }
 while (indentation < state.getIndentationLevel());
    }
  }
  if (tapElement instanceof Header) {
    if (state.getTestSet().getHeader() != null) {
      throw new ParserException(""String_Node_Str"");
    }
    if (!state.isFirstLine()) {
      throw new ParserException(""String_Node_Str"" + ""String_Node_Str"");
    }
    state.getTestSet().setHeader((Header)tapElement);
  }
 else   if (tapElement instanceof Plan) {
    Plan currentPlan=(Plan)tapElement;
    if (state.getTestSet().getPlan() != null) {
      if (currentPlan.getInitialTestNumber() != 1 || currentPlan.getLastTestNumber() != 0) {
        throw new ParserException(""String_Node_Str"");
      }
    }
 else {
      state.getTestSet().setPlan(currentPlan);
    }
    if (state.getTestSet().getTestResults().size() <= 0 && state.getTestSet().getBailOuts().size() <= 0) {
      state.setPlanBeforeTestResult(true);
    }
  }
 else   if (tapElement instanceof TestResult) {
    parseDiagnostics();
    final TestResult testResult=(TestResult)tapElement;
    if (testResult.getTestNumber() == 0) {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false) {
        return;
      }
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size()) {
        return;
      }
      testResult.setTestNumber(state.getTestSet().getNextTestNumber());
    }
    state.getTestSet().addTestResult(testResult);
    if (state.looseSubtests != null) {
      testResult.setSubtest(state.looseSubtests);
      state.looseSubtests=null;
    }
  }
 else   if (tapElement instanceof Footer) {
    state.getTestSet().setFooter((Footer)tapElement);
  }
 else   if (tapElement instanceof BailOut) {
    state.getTestSet().addBailOut((BailOut)tapElement);
  }
 else   if (tapElement instanceof Comment) {
    final Comment comment=(Comment)tapElement;
    state.getTestSet().addComment(comment);
    if (state.getLastParsedElement() instanceof TestResult) {
      ((TestResult)state.getLastParsedElement()).addComment(comment);
    }
  }
  state.setFirstLine(false);
  if (!(tapElement instanceof Comment)) {
    state.setLastParsedElement(tapElement);
  }
}",0.9699417844837828
178550,"/** 
 * Get the tap test description
 * @param testMethod
 * @return the tap test description
 */
public static String generateTAPTestResultDescription(JUnitTestData testMethod){
  final StringBuilder description=new StringBuilder();
  description.append(""String_Node_Str"");
  description.append(extractClassName(testMethod.getDescription()));
  description.append('#');
  description.append(extractMethodName(testMethod.getDescription()));
  return description.toString();
}","/** 
 * Get the tap test description
 * @param testMethod
 * @return the tap test description
 */
public static String generateTAPTestResultDescription(JUnitTestData testMethod){
  final StringBuilder description=new StringBuilder();
  description.append(""String_Node_Str"");
  description.append(extractClassName(testMethod.getDescription()));
  description.append(':');
  description.append(extractMethodName(testMethod.getDescription()));
  return description.toString();
}",0.9978947368421052
178551,"/** 
 * Generates a TAP TestResult description with full qualified class name concatenated with the character '#' and the test method.
 * @param testResult TestNG TestResult
 * @return Name of TAP Test Result
 */
public static String generateTAPTestResultDescription(ITestResult testResult){
  StringBuilder description=new StringBuilder();
  description.append(""String_Node_Str"");
  description.append(testResult.getTestClass().getName());
  description.append('#');
  description.append(testResult.getMethod().getMethodName());
  return description.toString();
}","/** 
 * Generates a TAP TestResult description with full qualified class name concatenated with the character ':' and the test method.
 * @param testResult TestNG TestResult
 * @return Name of TAP Test Result
 */
public static String generateTAPTestResultDescription(ITestResult testResult){
  StringBuilder description=new StringBuilder();
  description.append(""String_Node_Str"");
  description.append(testResult.getTestClass().getName());
  description.append(':');
  description.append(testResult.getMethod().getMethodName());
  return description.toString();
}",0.99645390070922
178552,"/** 
 * <p> Checks if there is any diagnostic information on the diagnostic buffer. </p> <p> If so, tries to parse it using snakeyaml. </p>
 */
private void parseDiagnostics(){
  if (state.getDiagnosticBuffer().length() > 0) {
    if (state.getLastParsedElement() == null) {
      throw new ParserException(""String_Node_Str"");
    }
    try {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> metaIterable=(Map<String,Object>)new Yaml().load(state.getDiagnosticBuffer().toString());
      state.getLastParsedElement().setDiagnostic(metaIterable);
    }
 catch (    Exception ex) {
      throw new ParserException(""String_Node_Str"" + state.getDiagnosticBuffer().toString() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","/** 
 * <p> Checks if there is any diagnostic information on the diagnostic buffer. </p> <p> If so, tries to parse it using snakeyaml. </p>
 */
private void parseDiagnostics(){
  if (state.getDiagnosticBuffer().length() > 0) {
    if (state.getLastParsedElement() == null) {
      throw new ParserException(""String_Node_Str"");
    }
    try {
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> metaIterable=(Map<String,Object>)new Yaml().load(state.getDiagnosticBuffer().toString());
      state.getLastParsedElement().setDiagnostic(metaIterable);
    }
 catch (    Exception ex) {
      throw new ParserException(""String_Node_Str"" + state.getDiagnosticBuffer().toString() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
    this.state.getDiagnosticBuffer().setLength(0);
  }
}",0.9665573770491804
178553,"/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled) {
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    String testNumberText=matcher.group(2);
    int testNumber=0;
    if (testNumberText != null && testNumberText.trim().equals(""String_Node_Str"") == false) {
      testNumber=Integer.parseInt(testNumberText);
    }
 else {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false)       return;
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size())       return;
      testNumber=getTestSet().getNextTestNumber();
    }
    onTestResult(StatusValues.get(matcher.group(1)),testNumber,matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}","/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled) {
            this.parseDiagnostics();
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    String testNumberText=matcher.group(2);
    int testNumber=0;
    if (testNumberText != null && testNumberText.trim().equals(""String_Node_Str"") == false) {
      testNumber=Integer.parseInt(testNumberText);
    }
 else {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false)       return;
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size())       return;
      testNumber=getTestSet().getNextTestNumber();
    }
    onTestResult(StatusValues.get(matcher.group(1)),testNumber,matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}",0.9945030456098648
178554,"/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled) {
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onTestResult(StatusValues.get(matcher.group(1)),Integer.parseInt(matcher.group(2)),matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}","/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled) {
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    String testNumberText=matcher.group(2);
    int testNumber=0;
    if (testNumberText != null && testNumberText.trim().equals(""String_Node_Str"") == false) {
      testNumber=Integer.parseInt(testNumberText);
    }
 else {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false)       return;
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size())       return;
      testNumber=getTestSet().getNextTestNumber();
    }
    onTestResult(StatusValues.get(matcher.group(1)),testNumber,matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}",0.9035812672176308
178555,"@Test public void testDoneTesting(){
  String tapStream=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  TestSet testSet=consumer.load(tapStream);
  assertEquals(testSet.getTestResults().size(),3);
}","@Test public void testDoneTesting(){
  String tapStream=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  TestSet testSet=consumer.load(tapStream);
  assertEquals(3,testSet.getTestResults().size());
}",0.9919678714859438
178556,"/** 
 * Appends a diagnostic line to diagnostic buffer. If the diagnostic line contains --- or ... then it ignores this line. In the end of each line it appends a break line.
 * @param diagnosticLine diagnostic line
 */
private void appendTapLineToDiagnosticBuffer(String diagnosticLine){
  if (diagnosticLine.trim().equals(""String_Node_Str"") || diagnosticLine.trim().equals(""String_Node_Str"")) {
    return;
  }
  if (state.isCurrentlyInYaml()) {
    state.getDiagnosticBuffer().append(diagnosticLine);
    state.getDiagnosticBuffer().append('\n');
  }
}","/** 
 * Appends a diagnostic line to diagnostic buffer. If the diagnostic line contains --- or ... then it ignores this line. In the end of each line it appends a break line.
 * @param diagnosticLine diagnostic line
 */
private void appendTapLineToDiagnosticBuffer(String diagnosticLine){
  if (state.isCurrentlyInYaml()) {
    state.getDiagnosticBuffer().append(diagnosticLine);
    state.getDiagnosticBuffer().append('\n');
  }
}",0.8742393509127789
178557,"@Test public void testYamlExitWithThreeDotsInYaml(){
  TapConsumer tapConsumer=TapConsumerFactory.makeTap13YamlConsumer();
  TestSet testSet=tapConsumer.load(new File(TestDirectives.class.getResource(""String_Node_Str"").getFile()));
  assertEquals(1,testSet.getTestResults().size());
  TestResult tr1=testSet.getTestResult(1);
  Map<String,Object> yaml=tr1.getDiagnostic();
  assertNotNull(yaml);
  String multiLineYaml=(String)yaml.get(""String_Node_Str"");
  assertThat(multiLineYaml,containsString(""String_Node_Str""));
}","@Test public void testYamlExitWithThreeDotsInYaml(){
  TapConsumer tapConsumer=TapConsumerFactory.makeTap13YamlConsumer();
  TestSet testSet=tapConsumer.load(new File(TestDirectives.class.getResource(""String_Node_Str"").getFile()));
  assertEquals(1,testSet.getTestResults().size());
  TestResult tr1=testSet.getTestResult(1);
  Map<String,Object> yaml=tr1.getDiagnostic();
  assertNotNull(yaml);
  String multiLineYaml=(String)yaml.get(""String_Node_Str"");
  assertThat(multiLineYaml,is(equalTo(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"")));
}",0.8606701940035273
178558,"/** 
 * Internal parse routine.
 * @param stream Input Stream
 * @return Test Set
 */
protected TestSet parse(InputStream stream){
  state=new Memento();
  Scanner scanner=null;
  try {
    scanner=new Scanner(stream,this.encoding);
    String line=null;
    while (scanner.hasNextLine()) {
      line=scanner.nextLine();
      if (line != null && line.trim().length() > 0) {
        this.parseLine(line);
      }
    }
    this.onFinish();
  }
 catch (  Exception e) {
    throw new ParserException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    if (scanner != null) {
      scanner.close();
    }
  }
  return this.getTestSet();
}","/** 
 * Internal parse routine.
 * @param stream Input Stream
 * @return Test Set
 */
protected TestSet parse(InputStream stream){
  state=new Memento();
  Scanner scanner=null;
  try {
    scanner=new Scanner(stream,this.encoding);
    String line=null;
    while (scanner.hasNextLine()) {
      line=scanner.nextLine();
      if (line != null && line.length() > 0) {
        this.parseLine(line);
      }
    }
    this.onFinish();
  }
 catch (  Exception e) {
    throw new ParserException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    if (scanner != null) {
      scanner.close();
    }
  }
  return this.getTestSet();
}",0.9945269741985928
178559,"/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTATION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          state.setCurrentYamlIndentation(matcher.group(1));
          return;
        }
 else         if (tapLine.equals(state.getCurrentYamlIndentation() + ""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          state.getDiagnosticBuffer().append(tapLine);
          state.getDiagnosticBuffer().append('\n');
          return;
        }
 else {
          if (this.subtestsEnabled) {
            this.parseDiagnostics();
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    String testNumberText=matcher.group(2);
    int testNumber=0;
    if (testNumberText != null && testNumberText.trim().equals(""String_Node_Str"") == false) {
      testNumber=Integer.parseInt(testNumberText);
    }
 else {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false)       return;
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size())       return;
      testNumber=getTestSet().getNextTestNumber();
    }
    onTestResult(StatusValues.get(matcher.group(1)),testNumber,matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}","/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTATION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (state.isCurrentlyInYaml()) {
          if (tapLine.equals(state.getCurrentYamlIndentation() + ""String_Node_Str"")) {
            state.setCurrentlyInYaml(false);
            return;
          }
          state.getDiagnosticBuffer().append(tapLine);
          state.getDiagnosticBuffer().append('\n');
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          state.setCurrentYamlIndentation(matcher.group(1));
          return;
        }
 else {
          if (this.subtestsEnabled) {
            this.parseDiagnostics();
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    String testNumberText=matcher.group(2);
    int testNumber=0;
    if (testNumberText != null && testNumberText.trim().equals(""String_Node_Str"") == false) {
      testNumber=Integer.parseInt(testNumberText);
    }
 else {
      if (state.getTestSet().getPlan() != null && state.isPlanBeforeTestResult() == false)       return;
      if (state.getTestSet().getPlan() != null && state.getTestSet().getPlan().getLastTestNumber() == state.getTestSet().getTestResults().size())       return;
      testNumber=getTestSet().getNextTestNumber();
    }
    onTestResult(StatusValues.get(matcher.group(1)),testNumber,matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}",0.9194097616345064
178560,"/** 
 * Called after the rest of the stream has been processed.
 */
private void onFinish(){
  if (getTestSet().getPlan() == null) {
    throw new ParserException(""String_Node_Str"");
  }
  parseDiagnostics();
  while (!this.states.isEmpty()) {
    this.popMemento();
  }
}","/** 
 * Called after the rest of the stream has been processed.
 */
private void onFinish(){
  if (this.planRequired == true) {
    if (getTestSet().getPlan() == null) {
      throw new ParserException(""String_Node_Str"");
    }
  }
  parseDiagnostics();
  while (!this.states.isEmpty()) {
    this.popMemento();
  }
}",0.8387096774193549
178561,"/** 
 * Called after the rest of the stream has been processed.
 */
private void onFinish(){
  if (getTestSet().getPlan() == null) {
    throw new ParserException(""String_Node_Str"");
  }
  parseDiagnostics();
}","/** 
 * Called after the rest of the stream has been processed.
 */
private void onFinish(){
  if (getTestSet().getPlan() == null) {
    throw new ParserException(""String_Node_Str"");
  }
  parseDiagnostics();
  while (!this.states.isEmpty()) {
    this.popMemento();
  }
}",0.8713692946058091
178562,"/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled && state.getLastParsedElement() instanceof TestResult) {
            indentation=state.getBaseIndentationLevel();
            TestResult lastTestResult=(TestResult)state.getLastParsedElement();
            this.pushMemento();
            lastTestResult.setSubtest(state.getTestSet());
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onTestResult(StatusValues.get(matcher.group(1)),Integer.parseInt(matcher.group(2)),matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}","/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled) {
            if (state.getLastParsedElement() instanceof TestResult) {
              indentation=state.getBaseIndentationLevel();
              TestResult lastTestResult=(TestResult)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
 else             if (state.getLastParsedElement() instanceof Plan) {
              indentation=state.getBaseIndentationLevel();
              Plan lastTestResult=(Plan)state.getLastParsedElement();
              this.pushMemento();
              lastTestResult.setSubtest(state.getTestSet());
            }
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onTestResult(StatusValues.get(matcher.group(1)),Integer.parseInt(matcher.group(2)),matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}",0.9332327423613732
178563,"/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled && state.getLastParsedElement() instanceof TestResult) {
            indentation=state.getBaseIndentationLevel();
            TestResult lastTestResult=(TestResult)state.getLastParsedElement();
            this.pushMemento();
            lastTestResult.setSubtest(state.getTestSet());
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(5),matcher.group(7));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onTestResult(StatusValues.get(matcher.group(1)),Integer.parseInt(matcher.group(2)),matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}","/** 
 * Parse a TAP line.
 * @param tapLine TAP line
 */
public void parseLine(String tapLine){
  Matcher matcher=null;
  matcher=Constants.COMMENT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onComment(matcher.group(1));
    return;
  }
  if (state.getBaseIndentationLevel() > -1) {
    matcher=Constants.INDENTANTION_PATTERN.matcher(tapLine);
    if (matcher.matches()) {
      int indentation=matcher.group(1).length();
      state.setCurrentIndentationLevel(indentation);
      if (indentation > state.getBaseIndentationLevel()) {
        if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(true);
          return;
        }
 else         if (tapLine.trim().equals(""String_Node_Str"")) {
          state.setCurrentlyInYaml(false);
          return;
        }
 else         if (state.isCurrentlyInYaml()) {
          this.appendTapLineToDiagnosticBuffer(tapLine);
          return;
        }
 else {
          if (this.subtestsEnabled && state.getLastParsedElement() instanceof TestResult) {
            indentation=state.getBaseIndentationLevel();
            TestResult lastTestResult=(TestResult)state.getLastParsedElement();
            this.pushMemento();
            lastTestResult.setSubtest(state.getTestSet());
          }
        }
      }
      this.checkIndentationLevel(indentation,tapLine);
    }
  }
  this.parseDiagnostics();
  state.setLastLine(tapLine);
  matcher=Constants.BAIL_OUT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onBailOut(matcher.group(1),matcher.group(3));
    return;
  }
  matcher=Constants.HEADER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onHeader(Integer.parseInt(matcher.group(1)),matcher.group(3));
    return;
  }
  matcher=Constants.PLAN_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onPlan(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(3)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.TEST_RESULT_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onTestResult(StatusValues.get(matcher.group(1)),Integer.parseInt(matcher.group(2)),matcher.group(3),DirectiveValues.get(matcher.group(5)),matcher.group(6),matcher.group(8));
    return;
  }
  matcher=Constants.FOOTER_PATTERN.matcher(tapLine);
  if (matcher.matches()) {
    onFooter(matcher.group(1),matcher.group(3));
    return;
  }
  final Text text=new Text(tapLine);
  getTestSet().getTapLines().add(text);
  state.setLastParsedElement(text);
}",0.9991928974979822
178564,"@Override protected PathEntry searchLib(final List<PathEntry> files,final String libId){
  final Pattern pattern=Pattern.compile(""String_Node_Str"" + Pattern.quote(libId) + ""String_Node_Str"");
  for (  final PathEntry entry : files) {
    if (pattern.matcher(entry.getPath()).matches()) {
      return entry;
    }
  }
  return null;
}","@Override protected PathEntry searchLib(final List<PathEntry> files,final String libId){
  final Pattern pattern=Pattern.compile(""String_Node_Str"" + File.separatorChar + Pattern.quote(libId)+ ""String_Node_Str"");
  for (  final PathEntry entry : files) {
    if (pattern.matcher(entry.getPath()).matches()) {
      return entry;
    }
  }
  return null;
}",0.9680232558139537
178565,"@Override public String getServerPolicyFilePath() throws RjInvalidConfigurationException {
  String path=this.servletContext.getRealPath(""String_Node_Str"");
  final int length=path.length();
  if ((length == 0) || ((path.charAt(length - 1) != '/') && (path.charAt(length - 1) != File.separatorChar))) {
    path=path + File.separatorChar;
  }
  return path + ""String_Node_Str"";
}","@Override public String getServerPolicyFilePath() throws RjInvalidConfigurationException {
  String path=servletContext.getRealPath(""String_Node_Str"");
  final int length=path.length();
  if ((length == 0) || ((path.charAt(length - 1) != '/') && (path.charAt(length - 1) != File.separatorChar))) {
    path=path + File.separatorChar;
  }
  return path + ""String_Node_Str"";
}",0.9933598937583
178566,"public void handleJob(final Message<File> message) throws IOException {
  final DepositDirectoryConfiguration depositDirectoryConfiguration=message.getHeaders().get(DIRECTORY_CONFIG_HEADER_NAME,DepositDirectoryConfiguration.class);
  final String applicationName=depositDirectoryConfiguration.getApplicationName();
  final File dataFile=message.getPayload();
  final File depositRootDirectory=dataFile.getParentFile().getParentFile();
  final File acceptedDirectory=new File(depositRootDirectory,Configuration.DEPOSIT_ACCEPTED_SUBDIR);
  final File acceptedFile=new File(acceptedDirectory,dataFile.getName());
  FileUtils.deleteQuietly(acceptedFile);
  FileUtils.moveFile(dataFile,acceptedFile);
  final Map<String,Serializable> meta=new HashMap<String,Serializable>();
  meta.put(DEPOSIT_ROOT_DIRECTORY_META_NAME,depositRootDirectory);
  meta.put(ORIGINAL_FILENAME_META_NAME,dataFile.getName());
  meta.put(INBOX_DIRECTORY_META_NAME,dataFile.getParent());
  final MultiFilesJob job=new MultiFilesJob(Source.DIRECTORY,applicationName,getUserName(),UUID.randomUUID(),(GregorianCalendar)GregorianCalendar.getInstance(),meta);
  try {
    if (FilenameUtils.isExtension(acceptedFile.getName().toLowerCase(),""String_Node_Str"")) {
      MultiFilesJob.addZipFilesToJob(new FileInputStream(acceptedFile),job);
    }
 else {
      MultiFilesJob.addDataToJob(new MimetypesFileTypeMap().getContentType(acceptedFile),acceptedFile.getName(),new FileInputStream(acceptedFile),job);
    }
    final String jobConfigurationFileName=depositDirectoryConfiguration.getJobConfigurationFileName();
    if (StringUtils.isNotBlank(jobConfigurationFileName)) {
      final File jobConfigurationFile=getJobConfigurationFile(applicationName,jobConfigurationFileName);
      job.addFile(Constants.MULTIPLE_FILES_JOB_CONFIGURATION,new FileInputStream(jobConfigurationFile));
    }
    getMessageDispatcher().dispatch(job);
  }
 catch (  final Exception e) {
    final MultiFilesResult errorResult=job.buildErrorResult(e,getMessages());
    handleDirectoryResult(errorResult);
  }
}","public void handleJob(final Message<File> message) throws IOException {
  final DepositDirectoryConfiguration depositDirectoryConfiguration=message.getHeaders().get(DIRECTORY_CONFIG_HEADER_NAME,DepositDirectoryConfiguration.class);
  final String applicationName=depositDirectoryConfiguration.getApplicationName();
  final File dataFile=message.getPayload();
  final File depositRootDirectory=dataFile.getParentFile().getParentFile();
  final File acceptedDirectory=new File(depositRootDirectory,Configuration.DEPOSIT_ACCEPTED_SUBDIR);
  final File acceptedFile=new File(acceptedDirectory,dataFile.getName());
  FileUtils.deleteQuietly(acceptedFile);
  FileUtils.moveFile(dataFile,acceptedFile);
  final Map<String,Serializable> meta=new HashMap<String,Serializable>();
  meta.put(DEPOSIT_ROOT_DIRECTORY_META_NAME,depositRootDirectory);
  meta.put(ORIGINAL_FILENAME_META_NAME,dataFile.getName());
  meta.put(INBOX_DIRECTORY_META_NAME,dataFile.getParent());
  final MultiFilesJob job=new MultiFilesJob(Source.DIRECTORY,applicationName,getUserName(),UUID.randomUUID(),(GregorianCalendar)GregorianCalendar.getInstance(),meta);
  try {
    if (FilenameUtils.isExtension(acceptedFile.getName().toLowerCase(),""String_Node_Str"")) {
      MultiFilesJob.addZipFilesToJob(new FileInputStream(acceptedFile),job);
    }
 else {
      MultiFilesJob.addDataToJob(new MimetypesFileTypeMap().getContentType(acceptedFile),acceptedFile.getName(),new FileInputStream(acceptedFile),job);
    }
    final String jobConfigurationFileName=depositDirectoryConfiguration.getJobConfigurationFileName();
    if (StringUtils.isNotBlank(jobConfigurationFileName)) {
      final File jobConfigurationFile=getJobConfigurationFile(applicationName,jobConfigurationFileName);
      job.addFile(Constants.MULTIPLE_FILES_JOB_CONFIGURATION,new FileInputStream(jobConfigurationFile));
    }
    getMessageDispatcher().dispatch(job);
  }
 catch (  final Exception e) {
    final MultiFilesResult errorResult=job.buildErrorResult(e,getMessages());
    handleResult(errorResult);
  }
}",0.9978032706858676
178567,"@Override protected Object getPreAuthenticatedPrincipal(final HttpServletRequest request){
  final String clientDN=(String)getPreAuthenticatedCredentials(request);
  if (clientDN == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  logger.debug(""String_Node_Str"" + clientDN + ""String_Node_Str"");
  final Matcher matcher=subjectDnPattern.matcher(clientDN);
  if (!matcher.find()) {
    throw new BadCredentialsException(""String_Node_Str"" + clientDN);
  }
  if (matcher.groupCount() != 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String username=matcher.group(1);
  logger.debug(""String_Node_Str"" + username + ""String_Node_Str"");
  return username;
}","@Override protected Object getPreAuthenticatedPrincipal(final HttpServletRequest request){
  final String clientDN=(String)getPreAuthenticatedCredentials(request);
  if (clientDN == null) {
    return null;
  }
  logger.debug(""String_Node_Str"" + clientDN + ""String_Node_Str"");
  final Matcher matcher=subjectDnPattern.matcher(clientDN);
  if (!matcher.find()) {
    throw new BadCredentialsException(""String_Node_Str"" + clientDN);
  }
  if (matcher.groupCount() != 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String username=matcher.group(1);
  logger.debug(""String_Node_Str"" + username + ""String_Node_Str"");
  return username;
}",0.4305657604702425
178568,"@Override protected Object getPreAuthenticatedCredentials(final HttpServletRequest request){
  if (!StringUtils.equals(request.getHeader(SSL_VERIFIED_HEADER),""String_Node_Str"")) {
    throw new PreAuthenticatedCredentialsNotFoundException(""String_Node_Str"");
  }
  final String clientDN=StringUtils.trimToNull(request.getHeader(SSL_CLIENT_DN_HEADER));
  if (clientDN == null) {
    throw new PreAuthenticatedCredentialsNotFoundException(SSL_CLIENT_DN_HEADER + ""String_Node_Str"");
  }
  return clientDN;
}","@Override protected Object getPreAuthenticatedCredentials(final HttpServletRequest request){
  if (!StringUtils.equals(request.getHeader(SSL_VERIFIED_HEADER),""String_Node_Str"")) {
    return null;
  }
  return StringUtils.trimToNull(request.getHeader(SSL_CLIENT_DN_HEADER));
}",0.6615384615384615
178569,"/** 
 * Sets the regular expression which will by used to extract the user name from the certificate's Subject DN. <p> It should contain a single group; for example the default expression ""CN=(.*?)(?:,|$)"" matches the common name field. So ""CN=Jimi Hendrix, OU=..."" will give a user name of ""Jimi Hendrix"". <p> The matches are case insensitive. So ""emailAddress=(.?),"" will match ""EMAILADDRESS=jimi@hendrix.org, CN=..."" giving a user name ""jimi@hendrix.org""
 * @param subjectDnRegex the regular expression to find in the subject
 */
public void setSubjectDnRegex(final String subjectDnRegex){
  Assert.hasText(subjectDnRegex,""String_Node_Str"");
  subjectDnPattern=Pattern.compile(subjectDnRegex,Pattern.CASE_INSENSITIVE);
}","/** 
 * Sets the regular expression which will by used to extract the user name from the certificate's Subject DN. <p> It should contain a single group; for example the default expression ""CN=(.*?)(?:/|$)"" matches the common name field. So ""CN=Jimi Hendrix/OU=..."" will give a user name of ""Jimi Hendrix"". <p> The matches are case insensitive. So ""emailAddress=(.?)/"" will match ""EMAILADDRESS=jimi@hendrix.org/CN=..."" giving a user name ""jimi@hendrix.org""
 * @param subjectDnRegex the regular expression to find in the subject
 */
public void setSubjectDnRegex(final String subjectDnRegex){
  Assert.hasText(subjectDnRegex,""String_Node_Str"");
  subjectDnPattern=Pattern.compile(subjectDnRegex,Pattern.CASE_INSENSITIVE);
}",0.9930747922437672
178570,"/** 
 * <p> </p>
 * @return
 */
private State resolve(){
  FrameworkProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  State state=StateObjectFactory.defaultFactory.createState(true);
  for (  BundleDescription bundleDescription : getAllBundleDescriptions(this._configuration.isPreferProjects())) {
    BundleDescription copy=StateObjectFactory.defaultFactory.createBundleDescription(bundleDescription);
    copy.setUserObject(bundleDescription.getUserObject());
    if (!state.addBundle(copy)) {
      throw new RuntimeException(""String_Node_Str"" + bundleDescription + ""String_Node_Str"");
    }
    if (A4ELogging.isTraceingEnabled()) {
      A4ELogging.trace(""String_Node_Str"",getBundleInfo(bundleDescription));
    }
  }
  Properties platformProperties=this._configuration.getConfigurationProperties();
  if (A4ELogging.isDebuggingEnabled()) {
    A4ELogging.debug(Utilities.toString(""String_Node_Str"",platformProperties));
  }
  state.setPlatformProperties(platformProperties);
  state.resolve();
  BundleDescription[] bundleDescriptions=state.getBundles();
  if (A4ELogging.isDebuggingEnabled()) {
    for (    BundleDescription description : bundleDescriptions) {
      String resolverErrors=dumpResolverErrors(description,true);
      if (resolverErrors != null && !resolverErrors.trim().equals(""String_Node_Str"")) {
        A4ELogging.debug(resolverErrors);
      }
    }
  }
  return state;
}","/** 
 * <p> </p>
 * @return
 */
private State resolve(){
  FrameworkProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  State state=StateObjectFactory.defaultFactory.createState(true);
  for (  BundleDescription bundleDescription : getAllBundleDescriptions(this._configuration.isPreferProjects())) {
    BundleDescription copy=StateObjectFactory.defaultFactory.createBundleDescription(bundleDescription);
    copy.setUserObject(bundleDescription.getUserObject());
    if (!state.addBundle(copy)) {
      throw new RuntimeException(""String_Node_Str"" + bundleDescription + ""String_Node_Str"");
    }
    if (A4ELogging.isTraceingEnabled()) {
      A4ELogging.trace(""String_Node_Str"",getBundleInfo(bundleDescription));
    }
  }
  Properties platformProperties=this._configuration.getConfigurationProperties();
  if (A4ELogging.isDebuggingEnabled()) {
    A4ELogging.debug(Utilities.toString(""String_Node_Str"",platformProperties));
  }
  state.setPlatformProperties(platformProperties);
  state.resolve();
  BundleDescription[] bundleDescriptions=state.getBundles();
  if (A4ELogging.isDebuggingEnabled()) {
    String resolverErrors=dumpResolverErrors(bundleDescriptions,true);
    if (resolverErrors != null && !resolverErrors.trim().equals(""String_Node_Str"")) {
      A4ELogging.debug(resolverErrors);
    }
  }
  return state;
}",0.931686046511628
178571,"/** 
 * <p> Returns the resolver errors as a string. </p>
 * @param description the bundle description
 * @param dumpHeader indicates if the header should be dumped or not
 * @return the resolver errors as a string.
 */
public static String dumpResolverErrors(BundleDescription description,boolean dumpHeader){
  Assure.notNull(""String_Node_Str"",description);
  StringBuffer stringBuffer=new StringBuffer();
  State state=description.getContainingState();
  ResolverError[] errors=state.getResolverErrors(description);
  if (!description.isResolved() || ((errors != null) && (errors.length != 0))) {
    if ((errors != null) && (errors.length == 1) && (errors[0].getType() == ResolverError.SINGLETON_SELECTION)) {
      stringBuffer.append(""String_Node_Str"");
      stringBuffer.append(getBundleInfo(description));
      stringBuffer.append(""String_Node_Str"");
    }
 else {
      if (dumpHeader) {
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getSymbolicName());
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getVersion());
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getLocation());
        stringBuffer.append(""String_Node_Str"");
      }
      if (errors != null) {
        if (errors.length > 0) {
          for (int i=0; i < errors.length; i++) {
            stringBuffer.append(""String_Node_Str"");
            stringBuffer.append(errors[i]);
            if (i + 1 < errors.length) {
              stringBuffer.append(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  return stringBuffer.toString();
}","public static String dumpResolverErrors(BundleDescription[] descriptions,boolean dumpHeader){
  if (descriptions.length < 1) {
    return ""String_Node_Str"";
  }
  final StringBuilder result=new StringBuilder();
  for (  BundleDescription bundleDescription : descriptions) {
    result.append(dumpResolverErrors(bundleDescription,dumpHeader));
  }
  final State state=descriptions[0].getContainingState();
  if (Boolean.getBoolean(""String_Node_Str"")) {
    result.append(getUnresolvedLeaves(state,descriptions));
  }
  return result.toString();
}",0.1097008159564823
178572,"private Ant4EclipseException newBundleNotResolvedException(UnresolvedBundleException e,TargetPlatform targetPlatform){
  BundleDescription description=new UnresolvedBundlesAnalyzer(targetPlatform).getRootCause(e.getBundleDescription());
  return new Ant4EclipseException(PdeExceptionCode.BUNDLE_NOT_RESOLVED_EXCEPTION,TargetPlatformImpl.dumpResolverErrors(description,true));
}","private Ant4EclipseException newBundleNotResolvedException(UnresolvedBundleException e,TargetPlatform targetPlatform){
  return new Ant4EclipseException(PdeExceptionCode.BUNDLE_NOT_RESOLVED_EXCEPTION,TargetPlatformImpl.dumpResolverErrors(new BundleDescription[]{e.getBundleDescription()},true));
}",0.7359050445103857
178573,"private void dumpAll(String key,Comparator<StopWatch> comparator){
  List<StopWatch> stopwatches=new LinkedList<StopWatch>(this._managedStopWatches.values());
  Collections.sort(stopwatches,comparator);
  A4ELogging.info(stopwatches.size() + ""String_Node_Str"" + key);
  for (  StopWatch stopWatch : stopwatches) {
    stopWatch.stop();
    A4ELogging.info(String.format(""String_Node_Str"",stopWatch.getName(),(double)stopWatch.getElapsedTime() / 1000,stopWatch.getInvocations(),stopWatch.getAverageTime() / 1000));
  }
}","private void dumpAll(String key,Comparator<StopWatch> comparator){
  List<StopWatch> stopwatches=new LinkedList<StopWatch>(this._managedStopWatches.values());
  for (  StopWatch stopWatch : stopwatches) {
    stopWatch.stop();
  }
  Collections.sort(stopwatches,comparator);
  A4ELogging.info(stopwatches.size() + ""String_Node_Str"" + key);
  for (  StopWatch stopWatch : stopwatches) {
    A4ELogging.info(String.format(""String_Node_Str"",stopWatch.getName(),(double)stopWatch.getElapsedTime() / 1000,stopWatch.getInvocations(),stopWatch.getAverageTime() / 1000));
  }
}",0.9136029411764706
178574,"/** 
 * <p> Returns the source folder for the given source file. </p>
 * @param sourceFile the source file.
 * @return the source folder
 */
private File getSourceFolder(File sourceFile){
  String absolutePath=sourceFile.getAbsolutePath();
  A4ELogging.info(""String_Node_Str"",absolutePath);
  String[] srcDirs=getJavac().getSrcdir().list();
  for (  String srcDir : srcDirs) {
    A4ELogging.info(""String_Node_Str"",srcDir);
    if (absolutePath.startsWith(srcDir) && absolutePath.charAt(srcDir.length()) == File.separatorChar) {
      return new File(srcDir);
    }
  }
  throw new Ant4EclipseException(EcjExceptionCodes.SOURCE_FOLDER_FOR_SOURCE_FILE_DOES_NOT_EXIST,sourceFile.getAbsolutePath());
}","/** 
 * <p> Returns the source folder for the given source file. </p>
 * @param sourceFile the source file.
 * @return the source folder
 */
private File getSourceFolder(File sourceFile){
  String absolutePath=sourceFile.getAbsolutePath();
  String[] srcDirs=getJavac().getSrcdir().list();
  for (  String srcDir : srcDirs) {
    if (absolutePath.startsWith(srcDir) && absolutePath.charAt(srcDir.length()) == File.separatorChar) {
      return new File(srcDir);
    }
  }
  throw new Ant4EclipseException(EcjExceptionCodes.SOURCE_FOLDER_FOR_SOURCE_FILE_DOES_NOT_EXIST,sourceFile.getAbsolutePath());
}",0.9244992295839752
178575,"/** 
 * <p> Returns an array with all the source files to compile. </p>
 * @param compilerArguments can be null
 * @return the source files to compile
 */
private SourceFile[] getSourceFilesToCompile(EcjAdditionalCompilerArguments compilerArguments){
  File defaultDestinationFolder=getJavac().getDestdir();
  List<SourceFile> sourceFiles=new LinkedList<SourceFile>();
  File[] filelist=getJavac().getFileList();
  for (  File file : filelist) {
    A4ELogging.debug(""String_Node_Str"",file);
  }
  if ((compilerArguments != null) && compilerArguments.hasSourceFilteredFilesetPath()) {
    List<File> files=new LinkedList<File>();
    Path path=compilerArguments.getSourceFilteredFilesetPath();
    Iterator<?> iterator=path.iterator();
    while (iterator.hasNext()) {
      Object object=iterator.next();
      if (object instanceof FileResource) {
        FileResource fileResource=(FileResource)object;
        File sourceFile=fileResource.getFile();
        if (sourceFile.getName().endsWith(""String_Node_Str"")) {
          files.add(fileResource.getFile());
        }
      }
    }
    filelist=files.toArray(new File[files.size()]);
    for (    File file : filelist) {
      A4ELogging.debug(""String_Node_Str"",file);
    }
    A4ELogging.info(""String_Node_Str"",Integer.valueOf(filelist.length),filelist.length > 1 ? ""String_Node_Str"" : ""String_Node_Str"",Integer.valueOf(this.compileList.length - filelist.length),this.compileList.length - filelist.length > 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  for (  File file : filelist) {
    File sourceFolder=getSourceFolder(file);
    String sourceFileName=file.getAbsolutePath().substring(sourceFolder.getAbsolutePath().length() + File.separator.length());
    File destinationFolder=compilerArguments != null ? compilerArguments.getOutputFolder(sourceFolder) : defaultDestinationFolder;
    if (destinationFolder == null) {
      throw new Ant4EclipseException(EcjExceptionCodes.NO_DEST_PATH_SET);
    }
    if (sourceFileName.endsWith(""String_Node_Str"")) {
      sourceFiles.add(0,SourceFileFactory.createSourceFile(sourceFolder,sourceFileName,destinationFolder,getDefaultEncoding()));
    }
 else {
      sourceFiles.add(SourceFileFactory.createSourceFile(sourceFolder,sourceFileName,destinationFolder,getDefaultEncoding()));
    }
  }
  return sourceFiles.toArray(new SourceFile[0]);
}","/** 
 * <p> Returns an array with all the source files to compile. </p>
 * @param compilerArguments can be null
 * @return the source files to compile
 */
private SourceFile[] getSourceFilesToCompile(EcjAdditionalCompilerArguments compilerArguments){
  File defaultDestinationFolder=getJavac().getDestdir();
  List<SourceFile> sourceFiles=new LinkedList<SourceFile>();
  File[] filelist=getJavac().getFileList();
  for (  File file : filelist) {
    A4ELogging.debug(""String_Node_Str"",file);
  }
  if ((compilerArguments != null) && compilerArguments.hasSourceFilteredFilesetPath()) {
    List<File> files=new LinkedList<File>();
    Path path=compilerArguments.getSourceFilteredFilesetPath();
    Iterator<?> iterator=path.iterator();
    while (iterator.hasNext()) {
      Object object=iterator.next();
      if (object instanceof FileResource) {
        FileResource fileResource=(FileResource)object;
        File sourceFile=fileResource.getFile();
        if (sourceFile.getName().endsWith(""String_Node_Str"")) {
          files.add(fileResource.getFile());
        }
      }
    }
    filelist=files.toArray(new File[files.size()]);
    for (    File file : filelist) {
      A4ELogging.debug(""String_Node_Str"",file);
    }
    A4ELogging.info(""String_Node_Str"",Integer.valueOf(filelist.length),filelist.length > 1 ? ""String_Node_Str"" : ""String_Node_Str"",Integer.valueOf(this.compileList.length - filelist.length),this.compileList.length - filelist.length > 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  for (  File file : filelist) {
    if (!hasSourceFolder(file)) {
      continue;
    }
    File sourceFolder=getSourceFolder(file);
    String sourceFileName=file.getAbsolutePath().substring(sourceFolder.getAbsolutePath().length() + File.separator.length());
    File destinationFolder=compilerArguments != null ? compilerArguments.getOutputFolder(sourceFolder) : defaultDestinationFolder;
    if (destinationFolder == null) {
      throw new Ant4EclipseException(EcjExceptionCodes.NO_DEST_PATH_SET);
    }
    if (sourceFileName.endsWith(""String_Node_Str"")) {
      sourceFiles.add(0,SourceFileFactory.createSourceFile(sourceFolder,sourceFileName,destinationFolder,getDefaultEncoding()));
    }
 else {
      sourceFiles.add(SourceFileFactory.createSourceFile(sourceFolder,sourceFileName,destinationFolder,getDefaultEncoding()));
    }
  }
  return sourceFiles.toArray(new SourceFile[0]);
}",0.9882204459402608
178576,"/** 
 * Contributes general settings to the macro execution properties.
 * @param properties The properties used to be filled with the settings. Not <code>null</code>.
 * @param productdef The product definition instance providing the necessary information. Not <code>null</code>.
 * @param targetplatform The TargetPlatform used to resolve the bundles against. Not <code>null</code>.
 */
private void contributeForAll(StringMap properties,ProductDefinition productdef,TargetPlatform targetplatform){
  properties.put(PROP_PRODUCTID,productdef.getId());
  properties.put(PROP_PRODUCTNAME,productdef.getName());
  properties.put(PROP_BASEDONFEATURES,String.valueOf(productdef.isBasedOnFeatures()));
  properties.put(PROP_APPLICATIONID,productdef.getApplication());
  properties.put(PROP_LAUNCHERNAME,productdef.getLaunchername());
  properties.put(PROP_VERSION,String.valueOf(productdef.getVersion()));
  properties.put(PROP_VMARGS,productdef.getVmArgs(this._os));
  properties.put(PROP_PROGRAMARGS,productdef.getProgramArgs(this._os));
  properties.put(PROP_OSGIBUNDLES,collectOsgiBundles(targetplatform.getLocations(),productdef.getConfigurationRecords()));
  String configini=productdef.getConfigIni(this._os);
  if (configini == null) {
    properties.put(PROP_CONFIGINI,""String_Node_Str"");
  }
 else {
    int endofprojectname=configini.indexOf('/',1);
    String projectname=configini.substring(1,endofprojectname);
    String childname=configini.substring(endofprojectname + 1);
    EclipseProject project=getWorkspace().getProject(projectname);
    File path=project.getChild(childname);
    properties.put(PROP_CONFIGINI,path.getAbsolutePath());
  }
  String guiexe=""String_Node_Str"";
  String cmdexe=""String_Node_Str"";
switch (this._os) {
case win32:
    guiexe=""String_Node_Str"";
  cmdexe=""String_Node_Str"";
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
File fileguiexe=null;
File filecmdexe=null;
File[] targetlocations=targetplatform.getLocations();
for (File targetlocation : targetlocations) {
if (fileguiexe == null) {
File child=new File(targetlocation,guiexe);
if (child.isFile()) {
fileguiexe=child;
}
}
if (filecmdexe == null) {
File child=new File(targetlocation,cmdexe);
if (child.isFile()) {
filecmdexe=child;
}
}
}
if ((fileguiexe == null) || (filecmdexe == null)) {
throw new RuntimeException(""String_Node_Str"");
}
properties.put(PROP_GUIEXE,fileguiexe.getAbsolutePath());
properties.put(PROP_CMDEXE,filecmdexe.getAbsolutePath());
}","/** 
 * Contributes general settings to the macro execution properties.
 * @param properties The properties used to be filled with the settings. Not <code>null</code>.
 * @param productdef The product definition instance providing the necessary information. Not <code>null</code>.
 * @param targetplatform The TargetPlatform used to resolve the bundles against. Not <code>null</code>.
 */
private void contributeForAll(StringMap properties,ProductDefinition productdef,TargetPlatform targetplatform){
  properties.put(PROP_PRODUCTID,productdef.getId());
  properties.put(PROP_PRODUCTNAME,productdef.getName());
  properties.put(PROP_BASEDONFEATURES,String.valueOf(productdef.isBasedOnFeatures()));
  properties.put(PROP_APPLICATIONID,productdef.getApplication());
  properties.put(PROP_LAUNCHERNAME,productdef.getLaunchername());
  properties.put(PROP_VERSION,String.valueOf(productdef.getVersion()));
  properties.put(PROP_VMARGS,productdef.getVmArgs(this._os));
  properties.put(PROP_PROGRAMARGS,productdef.getProgramArgs(this._os));
  properties.put(PROP_OSGIBUNDLES,collectOsgiBundles(targetplatform.getLocations(),productdef.getConfigurationRecords()));
  String configini=productdef.getConfigIni(this._os);
  if (configini == null) {
    properties.put(PROP_CONFIGINI,""String_Node_Str"");
  }
 else {
    int endofprojectname=configini.indexOf('/',1);
    String projectname=configini.substring(1,endofprojectname);
    String childname=configini.substring(endofprojectname + 1);
    EclipseProject project=getWorkspace().getProject(projectname);
    File path=project.getChild(childname);
    properties.put(PROP_CONFIGINI,path.getAbsolutePath());
  }
  String guiexe=""String_Node_Str"";
  String cmdexe=""String_Node_Str"";
switch (this._os) {
case win32:
    guiexe=""String_Node_Str"";
  cmdexe=""String_Node_Str"";
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
File fileguiexe=null;
File filecmdexe=null;
File[] targetlocations=targetplatform.getLocations();
for (File targetlocation : targetlocations) {
if (fileguiexe == null) {
File child=new File(targetlocation,guiexe);
if (child.isFile()) {
fileguiexe=child;
}
}
if (filecmdexe == null) {
File child=new File(targetlocation,cmdexe);
if (child.isFile()) {
filecmdexe=child;
}
}
}
if ((fileguiexe == null) || (filecmdexe == null)) {
throw new BuildException(MSG_FAILED_TO_LOOKUP_EXECUTABLES);
}
properties.put(PROP_GUIEXE,fileguiexe.getAbsolutePath());
properties.put(PROP_CMDEXE,filecmdexe.getAbsolutePath());
}",0.9877139979859012
178577,"/** 
 * <p> Returns the resolver errors as a string. </p>
 * @param description the bundle description
 * @return the resolver errors as a string.
 */
public static String dumpResolverErrors(BundleDescription description,boolean header){
  Assert.notNull(description);
  StringBuffer stringBuffer=new StringBuffer();
  State state=description.getContainingState();
  ResolverError[] errors=state.getResolverErrors(description);
  if (!description.isResolved() || ((errors != null) && (errors.length != 0))) {
    if ((errors != null) && (errors.length == 1) && (errors[0].getType() == ResolverError.SINGLETON_SELECTION)) {
      stringBuffer.append(""String_Node_Str"");
      stringBuffer.append(getBundleInfo(description));
      stringBuffer.append(""String_Node_Str"");
    }
 else {
      if (header) {
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getSymbolicName());
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getVersion());
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getLocation());
        stringBuffer.append(""String_Node_Str"");
      }
      for (int i=0; i < errors.length; i++) {
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(errors[i]);
        if (i + 1 < errors.length) {
          stringBuffer.append(""String_Node_Str"");
        }
      }
    }
  }
  return stringBuffer.toString();
}","/** 
 * <p> Returns the resolver errors as a string. </p>
 * @param description the bundle description
 * @param dumpHeader indicates if the header should be dumped or not
 * @return the resolver errors as a string.
 */
public static String dumpResolverErrors(BundleDescription description,boolean dumpHeader){
  Assert.notNull(description);
  StringBuffer stringBuffer=new StringBuffer();
  State state=description.getContainingState();
  ResolverError[] errors=state.getResolverErrors(description);
  if (!description.isResolved() || ((errors != null) && (errors.length != 0))) {
    if ((errors != null) && (errors.length == 1) && (errors[0].getType() == ResolverError.SINGLETON_SELECTION)) {
      stringBuffer.append(""String_Node_Str"");
      stringBuffer.append(getBundleInfo(description));
      stringBuffer.append(""String_Node_Str"");
    }
 else {
      if (dumpHeader) {
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getSymbolicName());
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getVersion());
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(description.getLocation());
        stringBuffer.append(""String_Node_Str"");
      }
      for (int i=0; i < errors.length; i++) {
        stringBuffer.append(""String_Node_Str"");
        stringBuffer.append(errors[i]);
        if (i + 1 < errors.length) {
          stringBuffer.append(""String_Node_Str"");
        }
      }
    }
  }
  return stringBuffer.toString();
}",0.9729549248747912
178578,"/** 
 * <p> </p>
 * @param manifest
 * @param resolvedFeature
 * @throws BuildException
 */
private void resolvePlugins(FeatureManifest manifest,ResolvedFeature resolvedFeature) throws BuildException {
  Map<BundleDescription,Plugin> map=new HashMap<BundleDescription,Plugin>();
  List<BundleDescription> bundleDescriptions=new LinkedList<BundleDescription>();
  for (  Plugin plugin : manifest.getPlugins()) {
    BundleDescription bundleDescription=this._state.getBundle(plugin.getId(),plugin.getVersion().equals(Version.emptyVersion) ? null : plugin.getVersion());
    if (bundleDescription == null) {
      throw new BuildException(""String_Node_Str"" + plugin.getId() + ""String_Node_Str""+ plugin.getVersion()+ ""String_Node_Str"");
    }
    if (!bundleDescription.isResolved()) {
      String resolverErrors=TargetPlatformImpl.dumpResolverErrors(bundleDescription,true);
      String bundleInfo=TargetPlatformImpl.getBundleInfo(bundleDescription);
      throw new RuntimeException(String.format(""String_Node_Str"",bundleInfo,resolverErrors));
    }
    bundleDescriptions.add(bundleDescription);
    map.put(bundleDescription,plugin);
  }
  BundleDescription[] sortedbundleDescriptions=bundleDescriptions.toArray(new BundleDescription[0]);
  Object[][] cycles=this._state.getStateHelper().sortBundles(sortedbundleDescriptions);
  if ((cycles != null) && (cycles.length > 0)) {
    A4ELogging.warn(""String_Node_Str"");
    for (    Object[] cycle : cycles) {
      A4ELogging.warn(Arrays.asList(cycle).toString());
    }
  }
  List<Pair<Plugin,BundleDescription>> result=new LinkedList<Pair<Plugin,BundleDescription>>();
  for (  BundleDescription bundleDescription : sortedbundleDescriptions) {
    Pair<Plugin,BundleDescription> pair=new Pair<Plugin,BundleDescription>(map.get(bundleDescription),bundleDescription);
    result.add(pair);
  }
  resolvedFeature.setPluginToBundleDescptionList(result);
}","/** 
 * <p> </p>
 * @param manifest
 * @param resolvedFeature
 * @throws BuildException
 */
private void resolvePlugins(FeatureManifest manifest,ResolvedFeature resolvedFeature) throws BuildException {
  Map<BundleDescription,Plugin> map=new HashMap<BundleDescription,Plugin>();
  List<BundleDescription> bundleDescriptions=new LinkedList<BundleDescription>();
  for (  Plugin plugin : manifest.getPlugins()) {
    if (matches(plugin.getOperatingSystem(),plugin.getMachineArchitecture(),plugin.getWindowingSystem(),plugin.getLocale())) {
      BundleDescription bundleDescription=this._state.getBundle(plugin.getId(),plugin.getVersion().equals(Version.emptyVersion) ? null : plugin.getVersion());
      if (bundleDescription == null) {
        throw new BuildException(""String_Node_Str"" + plugin.getId() + ""String_Node_Str""+ plugin.getVersion()+ ""String_Node_Str"");
      }
      if (!bundleDescription.isResolved()) {
        String resolverErrors=TargetPlatformImpl.dumpResolverErrors(bundleDescription,true);
        String bundleInfo=TargetPlatformImpl.getBundleInfo(bundleDescription);
        throw new RuntimeException(String.format(""String_Node_Str"",bundleInfo,resolverErrors));
      }
      bundleDescriptions.add(bundleDescription);
      map.put(bundleDescription,plugin);
    }
  }
  BundleDescription[] sortedbundleDescriptions=bundleDescriptions.toArray(new BundleDescription[0]);
  Object[][] cycles=this._state.getStateHelper().sortBundles(sortedbundleDescriptions);
  if ((cycles != null) && (cycles.length > 0)) {
    A4ELogging.warn(""String_Node_Str"");
    for (    Object[] cycle : cycles) {
      A4ELogging.warn(Arrays.asList(cycle).toString());
    }
  }
  List<Pair<Plugin,BundleDescription>> result=new LinkedList<Pair<Plugin,BundleDescription>>();
  for (  BundleDescription bundleDescription : sortedbundleDescriptions) {
    Pair<Plugin,BundleDescription> pair=new Pair<Plugin,BundleDescription>(map.get(bundleDescription),bundleDescription);
    result.add(pair);
  }
  resolvedFeature.setPluginToBundleDescptionList(result);
}",0.9608486991664562
178579,"/** 
 * <p> </p>
 * @param manifest
 * @param resolvedFeature
 */
private void resolveIncludes(FeatureManifest manifest,ResolvedFeature resolvedFeature){
  List<Pair<Includes,FeatureDescription>> result=new LinkedList<Pair<Includes,FeatureDescription>>();
  for (  Includes includes : manifest.getIncludes()) {
    FeatureDescription featureDescription=null;
    if (includes.getVersion().equals(Version.emptyVersion)) {
      featureDescription=getFeatureDescription(includes.getId());
    }
 else {
      featureDescription=getFeatureDescription(includes.getId(),includes.getVersion());
    }
    if (featureDescription == null) {
      throw new RuntimeException(""String_Node_Str"" + includes.getId() + ""String_Node_Str""+ includes.getVersion()+ ""String_Node_Str"");
    }
 else {
      result.add(new Pair<Includes,FeatureDescription>(includes,featureDescription));
    }
  }
  resolvedFeature.setIncludesToFeatureDescriptionList(result);
}","/** 
 * <p> </p>
 * @param manifest
 * @param resolvedFeature
 */
private void resolveIncludes(FeatureManifest manifest,ResolvedFeature resolvedFeature){
  List<Pair<Includes,FeatureDescription>> result=new LinkedList<Pair<Includes,FeatureDescription>>();
  for (  Includes includes : manifest.getIncludes()) {
    if (matches(includes.getOperatingSystem(),includes.getMachineArchitecture(),includes.getWindowingSystem(),includes.getLocale())) {
      FeatureDescription featureDescription=null;
      if (includes.getVersion().equals(Version.emptyVersion)) {
        featureDescription=getFeatureDescription(includes.getId());
      }
 else {
        featureDescription=getFeatureDescription(includes.getId(),includes.getVersion());
      }
      if (featureDescription == null) {
        throw new RuntimeException(""String_Node_Str"" + includes.getId() + ""String_Node_Str""+ includes.getVersion()+ ""String_Node_Str"");
      }
 else {
        result.add(new Pair<Includes,FeatureDescription>(includes,featureDescription));
      }
    }
  }
  resolvedFeature.setIncludesToFeatureDescriptionList(result);
}",0.9202933985330072
178580,"/** 
 * <p> Returns the   {@link ResolvedFeature}</p>
 * @param source
 * @param manifest
 * @return
 */
ResolvedFeature resolveFeature(Object source,FeatureManifest manifest);","/** 
 * <p> Returns the   {@link ResolvedFeature}</p>
 * @param source
 * @param manifest
 * @return returns the resolved feature
 */
ResolvedFeature resolveFeature(Object source,FeatureManifest manifest);",0.9238845144356956
178581,"public ClassFile loadClass(ClassName className){
  List<ClassFileLoader> classFileLoaderList=this._allPackages.get(className.getPackageName());
  if (classFileLoaderList == null) {
    return null;
  }
  for (  ClassFileLoader classFileLoader : classFileLoaderList) {
    ClassFile classFile=classFileLoader.loadClass(className);
    if (classFile != null) {
      return classFile;
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public ClassFile loadClass(ClassName className){
  List<ClassFileLoader> classFileLoaderList=this._allPackages.get(className.getPackageName());
  if (classFileLoaderList == null) {
    return null;
  }
  ClassFile result=null;
  for (  ClassFileLoader classFileLoader : classFileLoaderList) {
    ClassFile classFile=classFileLoader.loadClass(className);
    if (classFile != null) {
      if (!classFile.hasAccessRestriction()) {
        return classFile;
      }
 else       if (result == null) {
        result=classFile;
      }
    }
  }
  return result;
}",0.7329317269076305
178582,"/** 
 * <p> </p>
 * @param className
 * @return
 */
public ReferableSourceFile loadSourceFile(ClassName className){
  for (  File classpathEntry : this._sourcepathEntries) {
    if (classpathEntry.isDirectory()) {
      File packageDir=new File(classpathEntry,className.getPackageAsDirectoryName());
      if (packageDir.isDirectory()) {
        for (        String name : packageDir.list()) {
          if (className.asSourceFileName().endsWith(name)) {
            return new ReferableSourceFileImpl(classpathEntry,className.asSourceFileName().replace('/',File.separatorChar).replace('\\',File.separatorChar),classpathEntry.getAbsolutePath(),ClasspathClassFileLoaderImpl.this._type);
          }
        }
      }
    }
  }
  return null;
}","/** 
 * <p> </p>
 * @param className
 * @return
 */
public ReferableSourceFile loadSourceFile(ClassName className){
  String javaFileName=className.getClassName() + ""String_Node_Str"";
  for (  File classpathEntry : this._sourcepathEntries) {
    if (classpathEntry.isDirectory()) {
      File packageDir=new File(classpathEntry,className.getPackageAsDirectoryName());
      if (packageDir.isDirectory()) {
        for (        String name : packageDir.list()) {
          if (javaFileName.equals(name) && new File(classpathEntry,className.asSourceFileName().replace('/',File.separatorChar).replace('\\',File.separatorChar)).exists()) {
            return new ReferableSourceFileImpl(classpathEntry,className.asSourceFileName().replace('/',File.separatorChar).replace('\\',File.separatorChar),classpathEntry.getAbsolutePath(),ClasspathClassFileLoaderImpl.this._type);
          }
        }
      }
    }
  }
  return null;
}",0.7855855855855856
178583,"public NameEnvironmentAnswer findType(char[] typeName,char[][] packageName){
  A4ELogging.trace(""String_Node_Str"",new String(typeName),asString(packageName));
  StringBuffer result=new StringBuffer();
  if (packageName != null) {
    for (    char[] element : packageName) {
      result.append(new String(element)).append(""String_Node_Str"");
    }
  }
  result.append(new String(typeName));
  return findClass(result.toString());
}","public NameEnvironmentAnswer findType(char[] typeName,char[][] packageName){
  StringBuffer result=new StringBuffer();
  if (packageName != null) {
    for (    char[] element : packageName) {
      result.append(new String(element)).append(""String_Node_Str"");
    }
  }
  result.append(new String(typeName));
  return findClass(result.toString());
}",0.8951406649616368
178584,"/** 
 * This method returns true if the given packageName is a valid package. <p> Note that this method returns true regardless of any OSGi visibility constraints. <p> This method also returns true for top level packages
 * @see org.eclipse.jdt.internal.compiler.env.INameEnvironment#isPackage(char[][],char[])
 */
public boolean isPackage(char[][] parentPackageName,char[] packageName){
  A4ELogging.trace(""String_Node_Str"",asString(parentPackageName),new String(packageName));
  String qualifiedPackageName=toJavaName(parentPackageName);
  if (qualifiedPackageName.length() > 0) {
    qualifiedPackageName+=""String_Node_Str"" + new String(packageName);
  }
 else {
    qualifiedPackageName=new String(packageName);
  }
  boolean packageFound=this._classFileLoader.hasPackage(qualifiedPackageName);
  A4ELogging.trace(""String_Node_Str"",new Object[]{qualifiedPackageName,""String_Node_Str"" + packageFound});
  return packageFound;
}","/** 
 * This method returns true if the given packageName is a valid package. <p> Note that this method returns true regardless of any OSGi visibility constraints. <p> This method also returns true for top level packages
 * @see org.eclipse.jdt.internal.compiler.env.INameEnvironment#isPackage(char[][],char[])
 */
public boolean isPackage(char[][] parentPackageName,char[] packageName){
  String qualifiedPackageName=toJavaName(parentPackageName);
  if (qualifiedPackageName.length() > 0) {
    qualifiedPackageName+=""String_Node_Str"" + new String(packageName);
  }
 else {
    qualifiedPackageName=new String(packageName);
  }
  boolean packageFound=this._classFileLoader.hasPackage(qualifiedPackageName);
  return packageFound;
}",0.8712394705174489
178585,"/** 
 * <p> Returns a   {@link NameEnvironmentAnswer} for the class that is represented by the given {@link ClassName} instance.</p>
 * @param className represents the class name
 * @return a {@link NameEnvironmentAnswer}
 */
protected NameEnvironmentAnswer findClass(ClassName className){
  ClassFile classFile=this._classFileLoader.loadClass(className);
  if (classFile != null) {
    return new NameEnvironmentAnswer(classFile.getBinaryType(),(classFile.hasAccessRestriction() ? classFile.getAccessRestriction() : null));
  }
  SourceFile sourceFile=this._classFileLoader.loadSource(className);
  if (sourceFile != null) {
    return new NameEnvironmentAnswer(new CompilationUnitImpl(sourceFile),null);
  }
  return null;
}","/** 
 * <p> Returns a   {@link NameEnvironmentAnswer} for the class that is represented by the given {@link ClassName} instance.</p>
 * @param className represents the class name
 * @return a {@link NameEnvironmentAnswer}
 */
protected NameEnvironmentAnswer findClass(ClassName className){
  ClassFile classFile=this._classFileLoader.loadClass(className);
  if (classFile != null) {
    if (A4ELogging.isTraceingEnabled()) {
      A4ELogging.trace(""String_Node_Str"",className.getQualifiedClassName(),classFile.getLibraryLocation());
    }
    return new NameEnvironmentAnswer(classFile.getBinaryType(),(classFile.hasAccessRestriction() ? classFile.getAccessRestriction() : null));
  }
  SourceFile sourceFile=this._classFileLoader.loadSource(className);
  if (sourceFile != null) {
    if (A4ELogging.isTraceingEnabled()) {
      A4ELogging.trace(""String_Node_Str"",className.getQualifiedClassName(),sourceFile.getSourceFile().getAbsolutePath());
    }
    return new NameEnvironmentAnswer(new CompilationUnitImpl(sourceFile),null);
  }
  return null;
}",0.8166479190101237
178586,"/** 
 * <p> </p>
 * @param className
 * @return
 */
public ReferableSourceFile loadSourceFile(ClassName className){
  for (  File file : this._sourcepathEntries) {
    File classpathEntry=file;
    if (classpathEntry.isDirectory()) {
      File result=new File(classpathEntry,className.asSourceFileName());
      if (result.exists()) {
        return new ReferableSourceFileImpl(classpathEntry,className.asSourceFileName().replace('/',File.separatorChar).replace('\\',File.separatorChar),classpathEntry.getAbsolutePath(),ClasspathClassFileLoaderImpl.this._type);
      }
    }
  }
  return null;
}","/** 
 * <p> </p>
 * @param className
 * @return
 */
public ReferableSourceFile loadSourceFile(ClassName className){
  for (  File classpathEntry : this._sourcepathEntries) {
    if (classpathEntry.isDirectory()) {
      File packageDir=new File(classpathEntry,className.getPackageAsDirectoryName());
      if (packageDir.isDirectory()) {
        for (        String name : packageDir.list()) {
          if (className.asSourceFileName().endsWith(name)) {
            return new ReferableSourceFileImpl(classpathEntry,className.asSourceFileName().replace('/',File.separatorChar).replace('\\',File.separatorChar),classpathEntry.getAbsolutePath(),ClasspathClassFileLoaderImpl.this._type);
          }
        }
      }
    }
  }
  return null;
}",0.6183719193427931
178587,"/** 
 * <p> </p>
 * @param classFileLoader
 * @param filter
 */
public FilteringClassFileLoader(ClassFileLoader classFileLoader,String filter){
  Assert.notNull(this._classFileLoader);
  Assert.nonEmpty(filter);
  this._classFileLoader=classFileLoader;
  this._filter=filter;
  this._includes=new LinkedList<String>();
  this._excludes=new LinkedList<String>();
  init();
}","/** 
 * <p> </p>
 * @param classFileLoader
 * @param filter
 */
public FilteringClassFileLoader(ClassFileLoader classFileLoader,String filter){
  Assert.notNull(classFileLoader);
  Assert.nonEmpty(filter);
  this._classFileLoader=classFileLoader;
  this._filter=filter;
  this._includes=new LinkedList<String>();
  this._excludes=new LinkedList<String>();
  init();
}",0.991891891891892
178588,"/** 
 * <p> </p>
 * @param sourceFile
 * @param lineNumber
 * @param sourceStart
 * @param sourceEnd
 * @return
 */
private String[] readProblematicLine(SourceFile sourceFile,CategorizedProblem categorizedProblem){
  Assert.notNull(sourceFile);
  Assert.notNull(categorizedProblem);
  int lineNumber=categorizedProblem.getSourceLineNumber();
  int sourceStart=categorizedProblem.getSourceStart();
  int sourceEnd=categorizedProblem.getSourceEnd();
  try {
    FileInputStream fstream=new FileInputStream(sourceFile.getSourceFile());
    DataInputStream in=new DataInputStream(fstream);
    BufferedReader br=new BufferedReader(new InputStreamReader(in));
    int lineStart=0;
    String strLine=""String_Node_Str"";
    for (int i=0; i < lineNumber; i++) {
      String newLine=br.readLine();
      lineStart=lineStart + strLine.length();
      if (i + 1 != lineNumber) {
        lineStart=lineStart + 1;
      }
      strLine=newLine;
    }
    in.close();
    StringBuilder underscoreLine=new StringBuilder();
    for (int i=lineStart; i < sourceStart; i++) {
      underscoreLine.append(' ');
    }
    for (int i=sourceStart; i <= sourceEnd; i++) {
      underscoreLine.append('^');
    }
    return new String[]{strLine,underscoreLine.toString()};
  }
 catch (  Exception e) {
    return new String[]{""String_Node_Str"",""String_Node_Str""};
  }
}","/** 
 * <p> </p>
 * @param sourceFile
 * @param lineNumber
 * @param sourceStart
 * @param sourceEnd
 * @return
 */
private String[] readProblematicLine(SourceFile sourceFile,CategorizedProblem categorizedProblem){
  Assert.notNull(sourceFile);
  Assert.notNull(categorizedProblem);
  int lineNumber=categorizedProblem.getSourceLineNumber();
  int sourceStart=categorizedProblem.getSourceStart();
  int sourceEnd=categorizedProblem.getSourceEnd();
  try {
    FileInputStream fstream=new FileInputStream(sourceFile.getSourceFile());
    DataInputStream in=new DataInputStream(fstream);
    BufferedReader br=new BufferedReader(new InputStreamReader(in));
    int lineStart=0;
    String strLine=""String_Node_Str"";
    for (int i=0; i < lineNumber; i++) {
      String newLine=br.readLine();
      lineStart=lineStart + strLine.length();
      if (i + 1 != lineNumber) {
        lineStart=lineStart + 1;
      }
      strLine=newLine;
    }
    in.close();
    StringBuilder underscoreLine=new StringBuilder();
    for (int i=lineStart; i < sourceStart; i++) {
      if (strLine.charAt(i - lineStart) == '\t') {
        underscoreLine.append('\t');
      }
 else {
        underscoreLine.append(' ');
      }
    }
    for (int i=sourceStart; i <= sourceEnd; i++) {
      underscoreLine.append('^');
    }
    return new String[]{strLine,underscoreLine.toString()};
  }
 catch (  Exception e) {
    return new String[]{""String_Node_Str"",""String_Node_Str""};
  }
}",0.945868945868946
178589,"private BundleDescription[] getReexportedBundles(final BundleDescription bundleDescription){
  Assert.notNull(bundleDescription);
  Assert.assertTrue(bundleDescription.isResolved(),""String_Node_Str"");
  final Set<BundleDescription> resultSet=new LinkedHashSet<BundleDescription>();
  for (  BundleSpecification specification : bundleDescription.getRequiredBundles()) {
    if (specification.isExported()) {
      final BundleDescription reexportedBundle=(BundleDescription)specification.getSupplier();
      resultSet.add(reexportedBundle);
      for (      BundleDescription rereexportedBundle : getReexportedBundles(reexportedBundle)) {
        resultSet.add(rereexportedBundle);
      }
    }
  }
  for (  BundleDescription fragment : bundleDescription.getFragments()) {
    resultSet.add(fragment);
    for (    BundleDescription reexportedBundle : getReexportedBundles(fragment)) {
      resultSet.add(reexportedBundle);
    }
  }
  return resultSet.toArray(new BundleDescription[resultSet.size()]);
}","private BundleDescription[] getReexportedBundles(final BundleDescription bundleDescription){
  Assert.notNull(bundleDescription);
  if (!bundleDescription.isResolved()) {
    String resolverErrors=TargetPlatformImpl.dumpResolverErrors(bundleDescription);
    String bundleInfo=TargetPlatformImpl.getBundleInfo(bundleDescription);
    throw new RuntimeException(String.format(""String_Node_Str"",bundleInfo,resolverErrors));
  }
  final Set<BundleDescription> resultSet=new LinkedHashSet<BundleDescription>();
  for (  BundleSpecification specification : bundleDescription.getRequiredBundles()) {
    if (specification.isExported()) {
      final BundleDescription reexportedBundle=(BundleDescription)specification.getSupplier();
      resultSet.add(reexportedBundle);
      for (      BundleDescription rereexportedBundle : getReexportedBundles(reexportedBundle)) {
        resultSet.add(rereexportedBundle);
      }
    }
  }
  for (  BundleDescription fragment : bundleDescription.getFragments()) {
    resultSet.add(fragment);
    for (    BundleDescription reexportedBundle : getReexportedBundles(fragment)) {
      resultSet.add(reexportedBundle);
    }
  }
  return resultSet.toArray(new BundleDescription[resultSet.size()]);
}",0.8734912829682611
178590,"/** 
 * <p> </p>
 * @param bundleDescription
 * @return
 */
public List<BundleDependency> resolveBundleClasspath(final BundleDescription bundleDescription){
  Assert.notNull(bundleDescription);
  if (!bundleDescription.isResolved()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  for (  ExportPackageDescription exportPackageDescription : bundleDescription.getResolvedImports()) {
    addImportedPackage(exportPackageDescription);
  }
  for (  BundleDescription requiredBundle : bundleDescription.getResolvedRequires()) {
    addRequiredBundle(requiredBundle);
    for (    BundleDescription reexportedBundle : getReexportedBundles(requiredBundle)) {
      addRequiredBundle(reexportedBundle);
    }
  }
  return new LinkedList<BundleDependency>(_resolvedBundles.values());
}","/** 
 * <p> </p>
 * @param bundleDescription
 * @return
 */
public List<BundleDependency> resolveBundleClasspath(final BundleDescription bundleDescription){
  Assert.notNull(bundleDescription);
  if (!bundleDescription.isResolved()) {
    String resolverErrors=TargetPlatformImpl.dumpResolverErrors(bundleDescription);
    String bundleInfo=TargetPlatformImpl.getBundleInfo(bundleDescription);
    throw new RuntimeException(String.format(""String_Node_Str"",bundleInfo,resolverErrors));
  }
  for (  ExportPackageDescription exportPackageDescription : bundleDescription.getResolvedImports()) {
    addImportedPackage(exportPackageDescription);
  }
  for (  BundleDescription requiredBundle : bundleDescription.getResolvedRequires()) {
    addRequiredBundle(requiredBundle);
    for (    BundleDescription reexportedBundle : getReexportedBundles(requiredBundle)) {
      addRequiredBundle(reexportedBundle);
    }
  }
  return new LinkedList<BundleDependency>(_resolvedBundles.values());
}",0.887260428410372
178591,"/** 
 * <p> </p>
 * @return
 */
private State resolve(){
  final State state=StateObjectFactory.defaultFactory.createState(true);
  for (  BundleDescription bundleDescription : getAllBundleDescriptions(this._configuration.isPreferProjects())) {
    final BundleDescription copy=StateObjectFactory.defaultFactory.createBundleDescription(bundleDescription);
    copy.setUserObject(bundleDescription.getUserObject());
    if (!state.addBundle(copy)) {
      throw new RuntimeException(""String_Node_Str"" + bundleDescription + ""String_Node_Str"");
    }
    if (A4ELogging.isTraceingEnabled()) {
      A4ELogging.trace(""String_Node_Str"",getBundleInfo(bundleDescription));
    }
  }
  final Properties platformProperties=this._configuration.getConfigurationProperties();
  if (A4ELogging.isDebuggingEnabled()) {
    A4ELogging.debug(Utilities.toString(""String_Node_Str"",platformProperties));
  }
  state.setPlatformProperties(platformProperties);
  state.resolve();
  final BundleDescription[] bundleDescriptions=state.getBundles();
  if (A4ELogging.isDebuggingEnabled()) {
    for (int i=0; i < bundleDescriptions.length; i++) {
      final BundleDescription description=bundleDescriptions[i];
      final ResolverError[] errors=state.getResolverErrors(description);
      if (!description.isResolved() || ((errors != null) && (errors.length != 0))) {
        if ((errors != null) && (errors.length == 1) && (errors[0].getType() == ResolverError.SINGLETON_SELECTION)) {
          A4ELogging.debug(""String_Node_Str"",getBundleInfo(description));
        }
 else {
          A4ELogging.debug(""String_Node_Str"",getBundleInfo(description));
          for (int j=0; j < errors.length; j++) {
            final ResolverError error=errors[j];
            A4ELogging.debug(""String_Node_Str"",error);
          }
        }
      }
    }
  }
  return state;
}","/** 
 * <p> </p>
 * @return
 */
private State resolve(){
  final State state=StateObjectFactory.defaultFactory.createState(true);
  for (  BundleDescription bundleDescription : getAllBundleDescriptions(this._configuration.isPreferProjects())) {
    final BundleDescription copy=StateObjectFactory.defaultFactory.createBundleDescription(bundleDescription);
    copy.setUserObject(bundleDescription.getUserObject());
    if (!state.addBundle(copy)) {
      throw new RuntimeException(""String_Node_Str"" + bundleDescription + ""String_Node_Str"");
    }
    if (A4ELogging.isTraceingEnabled()) {
      A4ELogging.trace(""String_Node_Str"",getBundleInfo(bundleDescription));
    }
  }
  final Properties platformProperties=this._configuration.getConfigurationProperties();
  if (A4ELogging.isDebuggingEnabled()) {
    A4ELogging.debug(Utilities.toString(""String_Node_Str"",platformProperties));
  }
  state.setPlatformProperties(platformProperties);
  state.resolve();
  final BundleDescription[] bundleDescriptions=state.getBundles();
  if (A4ELogging.isDebuggingEnabled()) {
    for (    BundleDescription description : bundleDescriptions) {
      A4ELogging.debug(dumpResolverErrors(description));
    }
  }
  return state;
}",0.7381497221314155
178592,"/** 
 * @param bundleDescription
 * @return
 */
private static String getBundleInfo(final BundleDescription bundleDescription){
  final BundleSource bundleSource=BundleSource.getBundleSource(bundleDescription);
  final StringBuffer buffer=new StringBuffer();
  buffer.append(bundleDescription.getSymbolicName()).append(""String_Node_Str"").append(bundleDescription.getVersion().toString()).append(""String_Node_Str"");
  if (bundleSource.isEclipseProject()) {
    buffer.append(""String_Node_Str"").append(bundleSource.getAsEclipseProject().getFolder());
  }
 else {
    buffer.append(bundleSource.getAsFile().getAbsolutePath());
  }
  return buffer.toString();
}","/** 
 * <p> Returns the bundle info of the given bundle description. </p>
 * @param description the bundle description.
 * @return the bundle info of the given bundle description.
 */
static String getBundleInfo(final BundleDescription description){
  Assert.notNull(description);
  final BundleSource bundleSource=BundleSource.getBundleSource(description);
  final StringBuffer buffer=new StringBuffer();
  buffer.append(description.getSymbolicName()).append(""String_Node_Str"").append(description.getVersion().toString()).append(""String_Node_Str"");
  if (bundleSource.isEclipseProject()) {
    buffer.append(""String_Node_Str"").append(bundleSource.getAsEclipseProject().getFolder());
  }
 else {
    buffer.append(bundleSource.getAsFile().getAbsolutePath());
  }
  return buffer.toString();
}",0.8336783988957902
178593,"/** 
 * <p> </p>
 * @param manifest
 * @param resolvedFeature
 * @throws BuildException
 */
private void resolvePlugins(FeatureManifest manifest,ResolvedFeature resolvedFeature) throws BuildException {
  final Map<BundleDescription,Plugin> map=new HashMap<BundleDescription,Plugin>();
  final List<BundleDescription> bundleDescriptions=new LinkedList<BundleDescription>();
  for (  Plugin plugin : manifest.getPlugins()) {
    BundleDescription bundleDescription=_state.getBundle(plugin.getId(),plugin.getVersion().equals(Version.emptyVersion) ? null : plugin.getVersion());
    if (bundleDescription == null) {
      throw new BuildException(""String_Node_Str"" + plugin.getId() + ""String_Node_Str""+ plugin.getVersion()+ ""String_Node_Str"");
    }
    Assert.assertTrue(bundleDescription.isResolved(),""String_Node_Str"");
    bundleDescriptions.add(bundleDescription);
    map.put(bundleDescription,plugin);
  }
  final BundleDescription[] sortedbundleDescriptions=(BundleDescription[])bundleDescriptions.toArray(new BundleDescription[0]);
  final Object[][] cycles=_state.getStateHelper().sortBundles(sortedbundleDescriptions);
  if ((cycles != null) && (cycles.length > 0)) {
    A4ELogging.warn(""String_Node_Str"");
    for (int i=0; i < cycles.length; i++) {
      A4ELogging.warn(Arrays.asList(cycles[i]).toString());
    }
  }
  final List<Pair<Plugin,BundleDescription>> result=new LinkedList<Pair<Plugin,BundleDescription>>();
  for (  BundleDescription bundleDescription : sortedbundleDescriptions) {
    final Pair<Plugin,BundleDescription> pair=new Pair<Plugin,BundleDescription>(map.get(bundleDescription),bundleDescription);
    result.add(pair);
  }
  resolvedFeature.setPluginToBundleDescptionList(result);
}","/** 
 * <p> </p>
 * @param manifest
 * @param resolvedFeature
 * @throws BuildException
 */
private void resolvePlugins(FeatureManifest manifest,ResolvedFeature resolvedFeature) throws BuildException {
  final Map<BundleDescription,Plugin> map=new HashMap<BundleDescription,Plugin>();
  final List<BundleDescription> bundleDescriptions=new LinkedList<BundleDescription>();
  for (  Plugin plugin : manifest.getPlugins()) {
    BundleDescription bundleDescription=_state.getBundle(plugin.getId(),plugin.getVersion().equals(Version.emptyVersion) ? null : plugin.getVersion());
    if (bundleDescription == null) {
      throw new BuildException(""String_Node_Str"" + plugin.getId() + ""String_Node_Str""+ plugin.getVersion()+ ""String_Node_Str"");
    }
    if (!bundleDescription.isResolved()) {
      String resolverErrors=TargetPlatformImpl.dumpResolverErrors(bundleDescription);
      String bundleInfo=TargetPlatformImpl.getBundleInfo(bundleDescription);
      throw new RuntimeException(String.format(""String_Node_Str"",bundleInfo,resolverErrors));
    }
    bundleDescriptions.add(bundleDescription);
    map.put(bundleDescription,plugin);
  }
  final BundleDescription[] sortedbundleDescriptions=(BundleDescription[])bundleDescriptions.toArray(new BundleDescription[0]);
  final Object[][] cycles=_state.getStateHelper().sortBundles(sortedbundleDescriptions);
  if ((cycles != null) && (cycles.length > 0)) {
    A4ELogging.warn(""String_Node_Str"");
    for (int i=0; i < cycles.length; i++) {
      A4ELogging.warn(Arrays.asList(cycles[i]).toString());
    }
  }
  final List<Pair<Plugin,BundleDescription>> result=new LinkedList<Pair<Plugin,BundleDescription>>();
  for (  BundleDescription bundleDescription : sortedbundleDescriptions) {
    final Pair<Plugin,BundleDescription> pair=new Pair<Plugin,BundleDescription>(map.get(bundleDescription),bundleDescription);
    result.add(pair);
  }
  resolvedFeature.setPluginToBundleDescptionList(result);
}",0.9207300463089076
178594,"/** 
 * <p> </p>
 */
private void initialize(){
  assertTrue(!isInitialized(),""String_Node_Str"");
  final Iterator<Object> iterator=this._serviceOrdering.iterator();
  while (iterator.hasNext()) {
    final Object service=iterator.next();
    if (service instanceof Lifecycle) {
      try {
        ((Lifecycle)service).initialize();
      }
 catch (      final Exception e) {
        throw new Ant4EclipseException(CoreExceptionCode.SERVICE_COULD_NOT_BE_INITIALIZED,e,service.getClass().getName());
      }
    }
  }
  setInitialized(true);
}","/** 
 * <p> </p>
 */
private void initialize(){
  assertTrue(!isInitialized(),""String_Node_Str"");
  final Iterator<Object> iterator=this._serviceOrdering.iterator();
  while (iterator.hasNext()) {
    final Object service=iterator.next();
    if (service instanceof Lifecycle) {
      try {
        ((Lifecycle)service).initialize();
      }
 catch (      final Exception e) {
        throw new Ant4EclipseException(e,CoreExceptionCode.SERVICE_COULD_NOT_BE_INITIALIZED,service.getClass().getName());
      }
    }
  }
  setInitialized(true);
}",0.996316758747698
178595,"@Override protected void doExecute(){
  for (  ScopedMacroDefinition<String> scopedMacroDefinition : this._macroExecutionDelegate.getScopedMacroDefinitions()) {
    MacroExecutionValues values=new MacroExecutionValues();
    values.getProperties().put(""String_Node_Str"",counter + ""String_Node_Str"");
    counter++;
    this._macroExecutionDelegate.executeMacroInstance(scopedMacroDefinition.getMacroDef(),values);
  }
}","@Override protected void doExecute(){
  for (  ScopedMacroDefinition<String> scopedMacroDefinition : this._macroExecutionDelegate.getScopedMacroDefinitions()) {
    this._macroExecutionDelegate.executeMacroInstance(scopedMacroDefinition.getMacroDef(),new MacroExecutionValuesProvider(){
      public MacroExecutionValues provideMacroExecutionValues(      MacroExecutionValues values){
        values.getProperties().put(""String_Node_Str"",counter + ""String_Node_Str"");
        counter++;
        return values;
      }
    }
);
  }
}",0.6540483701366983
178596,"/** 
 * from org.apache.tools.ant.PropertyHelper
 */
private final String resolveProperties(final String value,final Map<String,String> properties){
  final Vector<String> fragments=new Vector<String>();
  final Vector<String> propertyRefs=new Vector<String>();
  final Vector<String> propertyArgs=new Vector<String>();
  parsePropertyString(value,fragments,propertyRefs,propertyArgs);
  final StringBuffer sb=new StringBuffer();
  final Enumeration<String> i=fragments.elements();
  final Enumeration<String> j=propertyRefs.elements();
  final Enumeration<String> k=propertyArgs.elements();
  while (i.hasMoreElements()) {
    String fragment=i.nextElement();
    if (fragment == null) {
      final String propertyName=j.nextElement();
      final String propertyArg=k.nextElement();
      Object replacement=null;
      if (properties != null) {
        if (""String_Node_Str"".equals(propertyName)) {
          replacement=properties.get(propertyName);
          if ((propertyArg != null) && (propertyArg.length() > 0)) {
            replacement=replacement + File.separator + propertyArg;
          }
        }
 else         if (""String_Node_Str"".equals(propertyName)) {
          if ((propertyArg != null) && (propertyArg.length() > 0)) {
            replacement=System.getProperty(propertyArg);
          }
        }
 else {
          replacement=properties.get(propertyName);
        }
      }
      final String arg=propertyArg != null ? ""String_Node_Str"" + propertyArg : ""String_Node_Str"";
      fragment=(replacement != null) ? replacement.toString() : ""String_Node_Str"" + propertyName + arg+ ""String_Node_Str"";
    }
    sb.append(fragment);
  }
  return sb.toString();
}","/** 
 * <p> </p>
 * @param value
 * @param properties
 * @return
 */
private final String resolveProperties(final String value,final Map<String,String> properties){
  final Vector<String> fragments=new Vector<String>();
  final Vector<String> propertyRefs=new Vector<String>();
  final Vector<String> propertyArgs=new Vector<String>();
  parsePropertyString(value,fragments,propertyRefs,propertyArgs);
  final StringBuffer sb=new StringBuffer();
  final Enumeration<String> i=fragments.elements();
  final Enumeration<String> j=propertyRefs.elements();
  final Enumeration<String> k=propertyArgs.elements();
  while (i.hasMoreElements()) {
    String fragment=i.nextElement();
    if (fragment == null) {
      final String propertyName=j.nextElement();
      final String propertyArg=k.nextElement();
      Object replacement=null;
      if (properties != null) {
        if (""String_Node_Str"".equals(propertyName)) {
          replacement=properties.get(propertyName);
          if ((propertyArg != null) && (propertyArg.length() > 0)) {
            replacement=replacement + File.separator + propertyArg;
          }
        }
 else         if (""String_Node_Str"".equals(propertyName)) {
          if ((propertyArg != null) && (propertyArg.length() > 0)) {
            replacement=System.getProperty(propertyArg);
          }
        }
 else {
          replacement=properties.get(propertyName);
        }
      }
      final String arg=propertyArg != null ? ""String_Node_Str"" + propertyArg : ""String_Node_Str"";
      fragment=(replacement != null) ? replacement.toString() : ""String_Node_Str"" + propertyName + arg+ ""String_Node_Str"";
    }
    sb.append(fragment);
  }
  return sb.toString();
}",0.9715808170515098
178597,"/** 
 * Substitutes all occurences of an eclipse <b>variable</b> (aka as <b>property</b> in ant)in the given string. The value for a variable in <code>string</code> is first searched in <code>otherProperties</code>. If the value cannot be found there it will be resolved as eclipse would do it. If a variable contains an <b>argument</b> (<code>${workspace_loc:/path/to/myWorkspace}</code>) the <b>argument</b> is ignored.
 * @param string The string with variables
 * @param project The project that should be used for resolving variables like <code>project_loc</code>
 * @param otherProperties Table with variable names as keys and their values as values. Might be null.
 */
public final String resolveEclipseVariables(final String string,final EclipseProject project,final Map<String,String> otherProperties){
  Assert.notNull(string);
  final Map<String,String> eclipseVariables=getEclipseVariables(project);
  if (otherProperties != null) {
    eclipseVariables.putAll(otherProperties);
  }
  final String resolvedString=resolveProperties(string,eclipseVariables);
  return resolvedString;
}","/** 
 * {@inheritDoc}
 */
public final String resolveEclipseVariables(final String string,final EclipseProject project,final Map<String,String> otherProperties){
  Assert.notNull(string);
  final Map<String,String> eclipseVariables=getEclipseVariables(project);
  if (otherProperties != null) {
    eclipseVariables.putAll(otherProperties);
  }
  final String resolvedString=resolveProperties(string,eclipseVariables);
  return resolvedString;
}",0.564935064935065
178598,"/** 
 * Returns a map with the eclipse variables where each key corresponds to a key allowing to access it's value.
 * @param project The Eclipse project allowing to produce some project specific variables.
 * @return The map providing the necessary (key, value) pairs.
 */
public final Map<String,String> getEclipseVariables(final EclipseProject project){
  final Map<String,String> eclipseVariables=new Hashtable<String,String>();
  eclipseVariables.putAll(this._eclipsevariables);
  if (project != null) {
    eclipseVariables.put(""String_Node_Str"",project.getFolder().getAbsolutePath());
    eclipseVariables.put(""String_Node_Str"",""String_Node_Str"");
    eclipseVariables.put(""String_Node_Str"",project.getFolder().getAbsolutePath());
    eclipseVariables.put(""String_Node_Str"",project.getFolderName());
    eclipseVariables.put(""String_Node_Str"",project.getFolderName());
  }
  return eclipseVariables;
}","/** 
 * {@inheritDoc}
 */
public final Map<String,String> getEclipseVariables(final EclipseProject project){
  final Map<String,String> eclipseVariables=new Hashtable<String,String>();
  eclipseVariables.putAll(this._eclipsevariables);
  if (project != null) {
    eclipseVariables.put(""String_Node_Str"",project.getFolder().getAbsolutePath());
    eclipseVariables.put(""String_Node_Str"",""String_Node_Str"");
    eclipseVariables.put(""String_Node_Str"",project.getFolder().getAbsolutePath());
    eclipseVariables.put(""String_Node_Str"",project.getFolderName());
    eclipseVariables.put(""String_Node_Str"",project.getFolderName());
  }
  return eclipseVariables;
}",0.826530612244898
178599,"public void clear(){
  this._eclipsevariables.clear();
}","/** 
 * {@inheritDoc}
 */
public void clear(){
  this._eclipsevariables.clear();
}",0.8115942028985508
178600,"public boolean isInitialized(){
  return false;
}","/** 
 * {@inheritDoc}
 */
public boolean isInitialized(){
  return false;
}",0.7903225806451613
178601,"public void dispose(){
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
}",0.6486486486486487
178602,"public void initialize(){
}","/** 
 * {@inheritDoc}
 */
public void initialize(){
}",0.675
178603,"/** 
 * Changes a variable for this instance.
 * @param key The name of the variable.
 * @param value The value of the variable. A value of null causes the variable to be removed.
 */
public final void setEclipseVariable(final String key,final String value){
  if (value == null) {
    this._eclipsevariables.remove(key);
  }
 else {
    this._eclipsevariables.put(key,value);
  }
}","/** 
 * {@inheritDoc}
 */
public final void setEclipseVariable(final String key,final String value){
  if (value == null) {
    this._eclipsevariables.remove(key);
  }
 else {
    this._eclipsevariables.put(key,value);
  }
}",0.1089108910891089
178604,"/** 
 * {@inheritDoc}
 */
public RawClasspathEntry[] getRawClasspathEntries(final int entrykind){
  final LinkedList<ClasspathEntry> templist=new LinkedList<ClasspathEntry>();
  for (  final ClasspathEntry entry : templist) {
    if (entry.getEntryKind() == entrykind) {
      templist.add(entry);
    }
  }
  final RawClasspathEntry[] result=new RawClasspathEntry[templist.size()];
  templist.toArray(result);
  return (result);
}","/** 
 * {@inheritDoc}
 */
public RawClasspathEntry[] getRawClasspathEntries(final int entrykind){
  final LinkedList<ClasspathEntry> templist=new LinkedList<ClasspathEntry>();
  for (  final ClasspathEntry entry : this._eclipseClasspathEntries) {
    if (entry.getEntryKind() == entrykind) {
      templist.add(entry);
    }
  }
  final RawClasspathEntry[] result=new RawClasspathEntry[templist.size()];
  templist.toArray(result);
  return (result);
}",0.9603624009060022
178605,"/** 
 * <p> </p>
 * @param eclipseProject
 * @param jdtClasspathContainerArguments
 * @param executionValues
 */
public CompilerArguments provideExecutorValues(final JavaProjectRole javaProjectRole,final List<JdtClasspathContainerArgument> jdtClasspathContainerArguments,final MacroExecutionValues executionValues){
  this._platformExecutorValuesProvider.provideExecutorValues(javaProjectRole.getEclipseProject(),executionValues);
  final CompilerArguments compilerArguments=new CompilerArguments();
  executionValues.getReferences().put(COMPILER_ARGS,compilerArguments);
  final ResolvedClasspath cpAbsoluteCompiletime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),false,false,jdtClasspathContainerArguments);
  final ResolvedClasspath cpRelativeCompiletime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),false,true,jdtClasspathContainerArguments);
  final ResolvedClasspath cpAbsoluteRuntime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),true,false,jdtClasspathContainerArguments);
  final ResolvedClasspath cpRelativeRuntime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),true,true,jdtClasspathContainerArguments);
  if (cpAbsoluteCompiletime.getBootClasspath().hasAccessRestrictions()) {
    compilerArguments.setBootClassPathAccessRestrictions(cpAbsoluteCompiletime.getBootClasspath().getAccessRestrictions().asFormattedString());
  }
  final ResolvedClasspathEntry[] classpathEntries=cpAbsoluteCompiletime.getClasspath();
  for (  final ResolvedClasspathEntry resolvedClasspathEntry : classpathEntries) {
    if (resolvedClasspathEntry.hasAccessRestrictions()) {
      final AccessRestrictions accessRestrictions=resolvedClasspathEntry.getAccessRestrictions();
      for (      final File file : resolvedClasspathEntry.getEntries()) {
        compilerArguments.addAccessRestrictions(file,accessRestrictions.asFormattedString());
      }
    }
  }
  executionValues.getProperties().put(BOOT_CLASSPATH,this._pathComponent.convertToString(cpAbsoluteCompiletime.getBootClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_ABSOLUTE_COMPILETIME,this._pathComponent.convertToString(cpAbsoluteCompiletime.getClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_RELATIVE_COMPILETIME,this._pathComponent.convertToString(cpRelativeCompiletime.getClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_ABSOLUTE_RUNTIME,this._pathComponent.convertToString(cpAbsoluteRuntime.getClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_RELATIVE_RUNTIME,this._pathComponent.convertToString(cpRelativeRuntime.getClasspathFiles()));
  executionValues.getReferences().put(BOOT_CLASSPATH_PATH,this._pathComponent.convertToPath(cpAbsoluteCompiletime.getBootClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_ABSOLUTE_COMPILETIME_PATH,this._pathComponent.convertToPath(cpAbsoluteCompiletime.getClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_RELATIVE_COMPILETIME_PATH,this._pathComponent.convertToPath(cpRelativeCompiletime.getClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_ABSOLUTE_RUNTIME_PATH,this._pathComponent.convertToPath(cpAbsoluteRuntime.getClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_RELATIVE_RUNTIME_PATH,this._pathComponent.convertToPath(cpRelativeRuntime.getClasspathFiles()));
  final String defaultOutputFolderName=javaProjectRole.getDefaultOutputFolder();
  final File defaultOutputFolder=javaProjectRole.getEclipseProject().getChild(defaultOutputFolderName);
  executionValues.getProperties().put(DEFAULT_OUTPUT_DIRECTORY_NAME,defaultOutputFolderName);
  executionValues.getProperties().put(DEFAULT_OUTPUT_DIRECTORY,this._pathComponent.convertToString(defaultOutputFolder));
  executionValues.getReferences().put(DEFAULT_OUTPUT_DIRECTORY_PATH,this._pathComponent.convertToPath(defaultOutputFolder));
  return compilerArguments;
}","/** 
 * <p> </p>
 * @param eclipseProject
 * @param jdtClasspathContainerArguments
 * @param executionValues
 */
public CompilerArguments provideExecutorValues(final JavaProjectRole javaProjectRole,final List<JdtClasspathContainerArgument> jdtClasspathContainerArguments,final MacroExecutionValues executionValues){
  this._platformExecutorValuesProvider.provideExecutorValues(javaProjectRole.getEclipseProject(),executionValues);
  final CompilerArguments compilerArguments=new CompilerArguments();
  executionValues.getReferences().put(COMPILER_ARGS,compilerArguments);
  final ResolvedClasspath cpAbsoluteCompiletime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),false,false,jdtClasspathContainerArguments);
  final ResolvedClasspath cpRelativeCompiletime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),true,false,jdtClasspathContainerArguments);
  final ResolvedClasspath cpAbsoluteRuntime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),false,true,jdtClasspathContainerArguments);
  final ResolvedClasspath cpRelativeRuntime=JdtResolver.resolveProjectClasspath(javaProjectRole.getEclipseProject(),true,true,jdtClasspathContainerArguments);
  if (cpAbsoluteCompiletime.getBootClasspath().hasAccessRestrictions()) {
    compilerArguments.setBootClassPathAccessRestrictions(cpAbsoluteCompiletime.getBootClasspath().getAccessRestrictions().asFormattedString());
  }
  final ResolvedClasspathEntry[] classpathEntries=cpAbsoluteCompiletime.getClasspath();
  for (  final ResolvedClasspathEntry resolvedClasspathEntry : classpathEntries) {
    if (resolvedClasspathEntry.hasAccessRestrictions()) {
      final AccessRestrictions accessRestrictions=resolvedClasspathEntry.getAccessRestrictions();
      for (      final File file : resolvedClasspathEntry.getEntries()) {
        compilerArguments.addAccessRestrictions(file,accessRestrictions.asFormattedString());
      }
    }
  }
  executionValues.getProperties().put(BOOT_CLASSPATH,this._pathComponent.convertToString(cpAbsoluteCompiletime.getBootClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_ABSOLUTE_COMPILETIME,this._pathComponent.convertToString(cpAbsoluteCompiletime.getClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_RELATIVE_COMPILETIME,this._pathComponent.convertToString(cpRelativeCompiletime.getClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_ABSOLUTE_RUNTIME,this._pathComponent.convertToString(cpAbsoluteRuntime.getClasspathFiles()));
  executionValues.getProperties().put(CLASSPATH_RELATIVE_RUNTIME,this._pathComponent.convertToString(cpRelativeRuntime.getClasspathFiles()));
  executionValues.getReferences().put(BOOT_CLASSPATH_PATH,this._pathComponent.convertToPath(cpAbsoluteCompiletime.getBootClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_ABSOLUTE_COMPILETIME_PATH,this._pathComponent.convertToPath(cpAbsoluteCompiletime.getClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_RELATIVE_COMPILETIME_PATH,this._pathComponent.convertToPath(cpRelativeCompiletime.getClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_ABSOLUTE_RUNTIME_PATH,this._pathComponent.convertToPath(cpAbsoluteRuntime.getClasspathFiles()));
  executionValues.getReferences().put(CLASSPATH_RELATIVE_RUNTIME_PATH,this._pathComponent.convertToPath(cpRelativeRuntime.getClasspathFiles()));
  final String defaultOutputFolderName=javaProjectRole.getDefaultOutputFolder();
  final File defaultOutputFolder=javaProjectRole.getEclipseProject().getChild(defaultOutputFolderName);
  executionValues.getProperties().put(DEFAULT_OUTPUT_DIRECTORY_NAME,defaultOutputFolderName);
  executionValues.getProperties().put(DEFAULT_OUTPUT_DIRECTORY,this._pathComponent.convertToString(defaultOutputFolder));
  executionValues.getReferences().put(DEFAULT_OUTPUT_DIRECTORY_PATH,this._pathComponent.convertToPath(defaultOutputFolder));
  return compilerArguments;
}",0.9969765684051398
178606,"@Override public void setUp() throws Exception {
  super.setUp();
  setupBuildFile(""String_Node_Str"");
  new EclipseProjectBuilder(""String_Node_Str"").withNature(""String_Node_Str"").createIn(_workspaceDir);
}","@Override public void setUp() throws Exception {
  super.setUp();
  setupBuildFile(""String_Node_Str"");
  new EclipseProjectBuilder(""String_Node_Str"").withNature(""String_Node_Str"").createIn(getWorkspaceDir());
}",0.9807692307692308
178607,"private static void configureAnt4Eclipse(final Ant4EclipseLogger logger,final Ant4EclipseConfiguration configuration){
  if (!ServiceRegistry.isConfigured()) {
    ServiceRegistry.configure(new ServiceRegistryConfiguration(){
      public void configure(      final ConfigurationContext context){
        context.registerService(logger,Ant4EclipseLogger.class.getName());
        context.registerService(configuration,Ant4EclipseConfiguration.class.getName());
        PropertiesBasedServiceRegistryConfiguration propertiesConfiguration=new PropertiesBasedServiceRegistryConfiguration(configuration);
        propertiesConfiguration.configure(context);
      }
    }
);
  }
}","private static void configureAnt4Eclipse(final Ant4EclipseLogger logger,final Ant4EclipseConfiguration configuration){
  ServiceRegistry.configure(new ServiceRegistryConfiguration(){
    public void configure(    final ConfigurationContext context){
      context.registerService(logger,Ant4EclipseLogger.class.getName());
      context.registerService(configuration,Ant4EclipseConfiguration.class.getName());
      PropertiesBasedServiceRegistryConfiguration propertiesConfiguration=new PropertiesBasedServiceRegistryConfiguration(configuration);
      propertiesConfiguration.configure(context);
    }
  }
);
}",0.7801087801087802
178608,"/** 
 * <p> Configures the   {@link ServiceRegistry}. The registry has to be configured before it can be used. </p>
 * @param configuration the service registry configuration
 */
public static void configure(final ServiceRegistryConfiguration configuration){
  parameterNotNull(""String_Node_Str"",configuration);
  assertTrue(!isConfigured(),""String_Node_Str"");
  _instance=new ServiceRegistry();
  configuration.configure(_instance.new ConfigurationContextImpl());
  _configured=true;
  _instance.initialize();
}","/** 
 * <p> Configures the   {@link ServiceRegistry}. The registry has to be configured before it can be used. </p>
 * @param configuration the service registry configuration
 */
public static void configure(final ServiceRegistryConfiguration configuration){
  parameterNotNull(""String_Node_Str"",configuration);
  assertTrue(!isConfigured(),""String_Node_Str"");
  _instance=new ServiceRegistry();
  configuration.configure(_instance.new ConfigurationContextImpl());
  _instance.initialize();
  _configured=true;
}",0.94921875
178609,"/** 
 * <p> </p>
 */
private void dispose(){
  assertTrue(isInitialized(),""String_Node_Str"");
  final Iterator<Object> iterator=this._serviceOrdering.iterator();
  while (iterator.hasNext()) {
    final Object service=iterator.next();
    if (service instanceof Lifecycle) {
      try {
        ((Lifecycle)service).dispose();
      }
 catch (      final Exception e) {
        throw new Ant4EclipseException(CoreExceptionCode.SERVICE_COULD_NOT_BE_DISPOSED,e,service.getClass().getName(),e.getMessage());
      }
    }
  }
  setInitialized(false);
}","/** 
 * <p> </p>
 */
private void dispose(){
  assertTrue(isInitialized(),""String_Node_Str"");
  final Iterator<Object> iterator=this._serviceOrdering.iterator();
  while (iterator.hasNext()) {
    final Object service=iterator.next();
    if (service instanceof Lifecycle) {
      try {
        ((Lifecycle)service).dispose();
      }
 catch (      final Exception e) {
        System.err.println(String.format(CoreExceptionCode.SERVICE_COULD_NOT_BE_DISPOSED.getMessage(),service));
      }
    }
  }
  setInitialized(false);
}",0.8828996282527881
178610,"/** 
 * <p> Configures the   {@link ServiceRegistry}. The registry has to be configured before it can be used. </p>
 * @param configuration the service registry configuration
 */
public static void configure(final ServiceRegistryConfiguration configuration){
  parameterNotNull(""String_Node_Str"",configuration);
  assertTrue(!isConfigured(),""String_Node_Str"");
  _instance=new ServiceRegistry();
  configuration.configure(_instance.new ConfigurationContextImpl());
  _instance.initialize();
  _configured=true;
}","/** 
 * <p> Configures the   {@link ServiceRegistry}. The registry has to be configured before it can be used. </p>
 * @param configuration the service registry configuration
 */
public static void configure(final ServiceRegistryConfiguration configuration){
  parameterNotNull(""String_Node_Str"",configuration);
  assertTrue(!isConfigured(),""String_Node_Str"");
  _instance=new ServiceRegistry();
  configuration.configure(_instance.new ConfigurationContextImpl());
  _configured=true;
  try {
    _instance.initialize();
  }
 catch (  RuntimeException exception) {
    _configured=false;
    throw exception;
  }
}",0.8987566607460036
178611,"public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsernameRaw());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsernameRaw());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsernameRaw());
      System.out.println(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet,10000);
      if (packet == null) {
        return ""String_Node_Str"";
      }
 else       if (packet.getByte(0) != 1) {
        return ""String_Node_Str"";
      }
      packet=new Packet01Login(packet);
      info.clientVersion=packet.getInt(1);
      info.craftProxyLogin=((Packet01Login)packet).getSeed() == MAGIC_SEED;
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(128,username.length())));
    packet.writeLong(0);
    packet.writeString16(""String_Node_Str"");
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.loginHeight=StCLogin.getHeight();
  info.loginSeed=StCLogin.getSeed();
  info.levelType=StCLogin.getLevelType();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsernameRaw());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsernameRaw());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsernameRaw());
      ptc.printLogMessage(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet,10000);
      if (packet == null) {
        return ""String_Node_Str"";
      }
 else       if (packet.getByte(0) != 1 && packet.getByte(0) != 0x52) {
        return ""String_Node_Str"";
      }
      if (packet.getByte(0) == 1) {
        packet=new Packet01Login(packet);
        info.clientVersion=packet.getInt(1);
        info.craftProxyLogin=((Packet01Login)packet).getSeed() == MAGIC_SEED;
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        ptc.printLogMessage(""String_Node_Str"");
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(128,username.length())));
    packet.writeLong(0);
    packet.writeString16(""String_Node_Str"");
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.loginHeight=StCLogin.getHeight();
  info.loginSeed=StCLogin.getSeed();
  info.levelType=StCLogin.getLevelType();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}",0.9852145690587812
178612,"public Packet getPacket(Packet packet,int timeout) throws IOException {
  if (packet == null) {
    packet=new Packet();
    packet.buffer=buffer;
    packet.mask=bufferMask;
  }
  Packet ret=null;
  long startTime=System.currentTimeMillis();
  boolean interrupted=false;
  int packetId=-1;
  while (ret == null && length < bufferLength && startTime + timeout > System.currentTimeMillis() && !Thread.currentThread().isInterrupted()) {
    try {
      ret=PacketScan.packetScan(buffer,start,length,bufferMask,packet);
    }
 catch (    IllegalStateException ise) {
      throw ise;
    }
    int readSoFar=0;
    if (ret == null) {
      int startMod=start & bufferMask;
      int endMod=(start + length) & bufferMask;
      int available;
      if (endMod >= startMod) {
        available=bufferLength - endMod;
      }
 else {
        available=startMod - endMod;
      }
      available-=SPARE_BYTES;
      int actual=0;
      try {
        actual=in.read(buffer,endMod,available);
        if (actual > 0 && packetId == -1) {
          packetId=0xFF & buffer[startMod];
        }
        readSoFar+=actual;
        if (readSoFar < 100) {
          try {
            Thread.sleep(10);
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
      }
 catch (      SocketTimeoutException ste) {
        continue;
      }
      if (actual == -1) {
        throw new EOFException();
      }
 else {
        length+=actual;
        if (length > buffer.length - 1 - SPARE_BYTES) {
          System.err.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          StringBuilder sb=new StringBuilder();
          boolean first=true;
          for (int i=-32; i < 256; i++) {
            if (!first) {
              sb.append(""String_Node_Str"");
            }
 else {
              first=false;
            }
            int pos=(start + i) & bufferMask;
            if (i == 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(Integer.toHexString(buffer[pos] & 0xFF));
            if (i == 0) {
              sb.append(""String_Node_Str"");
            }
          }
          throw new IOException(""String_Node_Str"");
        }
      }
    }
  }
  if (interrupted) {
    Thread.currentThread().interrupt();
  }
  if (ret == null) {
    return null;
  }
  int size=ret.end - ret.start;
  start+=size;
  length-=size;
  return ret;
}","public Packet getPacket(Packet packet,int timeout) throws IOException {
  if (packet == null) {
    packet=new Packet();
    packet.buffer=buffer;
    packet.mask=bufferMask;
  }
  Packet ret=null;
  long startTime=System.currentTimeMillis();
  boolean interrupted=false;
  int packetId=-1;
  while (ret == null && length < bufferLength && startTime + timeout > System.currentTimeMillis() && !Thread.currentThread().isInterrupted()) {
    try {
      ret=PacketScan.packetScan(buffer,start,length,bufferMask,packet);
    }
 catch (    IllegalStateException ise) {
      throw ise;
    }
    int readSoFar=0;
    if (ret == null) {
      int startMod=start & bufferMask;
      int endMod=(start + length) & bufferMask;
      int available;
      if (endMod >= startMod) {
        available=bufferLength - endMod;
      }
 else {
        available=startMod - endMod;
      }
      available=Math.min(available,buffer.length - SPARE_BYTES - length);
      int actual=0;
      try {
        actual=in.read(buffer,endMod,available);
        if (actual > 0 && packetId == -1) {
          packetId=0xFF & buffer[startMod];
        }
        readSoFar+=actual;
        if (readSoFar < 100) {
          try {
            Thread.sleep(10);
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
      }
 catch (      SocketTimeoutException ste) {
        continue;
      }
      if (actual == -1) {
        throw new EOFException();
      }
 else {
        length+=actual;
        if (length > buffer.length - 1 - SPARE_BYTES) {
          System.err.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          StringBuilder sb=new StringBuilder();
          boolean first=true;
          for (int i=-32; i < 256; i++) {
            if (!first) {
              sb.append(""String_Node_Str"");
            }
 else {
              first=false;
            }
            int pos=(start + i) & bufferMask;
            if (i == 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(Integer.toHexString(buffer[pos] & 0xFF));
            if (i == 0) {
              sb.append(""String_Node_Str"");
            }
          }
          throw new IOException(""String_Node_Str"");
        }
      }
    }
  }
  if (interrupted) {
    Thread.currentThread().interrupt();
  }
  if (ret == null) {
    return null;
  }
  int size=ret.end - ret.start;
  start+=size;
  length-=size;
  return ret;
}",0.9907033144704932
178613,"public int getString16Length(int pos){
  return 2 + getShort(pos);
}","public int getString16Length(int pos){
  return 2 + getShort(pos) * 2;
}",0.9714285714285714
178614,"public byte getHeight(){
  return getByte(17 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public byte getHeight(){
  return getByte(19 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}",0.9915254237288136
178615,"public byte getUnknown(){
  return getByte(16 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public byte getUnknown(){
  return getByte(18 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}",0.9915966386554622
178616,"public byte getDimension(){
  return getByte(15 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public byte getDimension(){
  return getByte(17 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}",0.9917355371900828
178617,"public byte getMaxPlayers(){
  return getByte(18 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public byte getMaxPlayers(){
  return getByte(20 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}",0.9836065573770492
178618,"public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(""String_Node_Str"");
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    while (!ptc.messageQueue.isEmpty()) {
      String message=ptc.messageQueue.poll();
      if (message != null) {
        Packet03Chat chat=new Packet03Chat(message);
        try {
          fm.addPacketToHighQueue(out,chat,this);
        }
 catch (        IOException e) {
          kill();
          continue;
        }
      }
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=(packet.getInt(1) >> 4);
        int z=(packet.getInt(5) >> 4);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          if (Globals.showUnallocatedChunkWarning()) {
            ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId) + ""String_Node_Str""+ x+ ""String_Node_Str""+ z+ ""String_Node_Str"");
          }
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          ptc.connectionInfo.addChunk(x,z);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
            Packet09Respawn normalPacket=new Packet09Respawn((byte)0,(byte)2,(byte)0,(short)128,0L,""String_Node_Str"");
            Packet09Respawn netherPacket=new Packet09Respawn((byte)-1,(byte)2,(byte)0,(short)128,0L,""String_Node_Str"");
            try {
              fm.addPacketToHighQueue(out,normalPacket,this);
              fm.addPacketToHighQueue(out,netherPacket,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            Packet packetBed=new Packet46Bed(2,0);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}","public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(""String_Node_Str"");
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    while (!ptc.messageQueue.isEmpty()) {
      String message=ptc.messageQueue.poll();
      if (message != null) {
        Packet03Chat chat=new Packet03Chat(message);
        try {
          fm.addPacketToHighQueue(out,chat,this);
        }
 catch (        IOException e) {
          kill();
          continue;
        }
      }
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=(packet.getInt(1) >> 4);
        int z=(packet.getInt(5) >> 4);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          if (Globals.showUnallocatedChunkWarning()) {
            ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId) + ""String_Node_Str""+ x+ ""String_Node_Str""+ z+ ""String_Node_Str"");
          }
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          ptc.connectionInfo.addChunk(x,z);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
            Packet09Respawn normalPacket=new Packet09Respawn((int)0,(byte)2,(byte)0,(short)Globals.getMaxWorldHeight(),""String_Node_Str"");
            Packet09Respawn netherPacket=new Packet09Respawn((int)-1,(byte)2,(byte)0,(short)Globals.getMaxWorldHeight(),""String_Node_Str"");
            try {
              fm.addPacketToHighQueue(out,normalPacket,this);
              fm.addPacketToHighQueue(out,netherPacket,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            Packet packetBed=new Packet46Bed(2,0);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}",0.9907590759075908
178619,"public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsernameRaw());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsernameRaw());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsernameRaw());
      ptc.printLogMessage(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet,10000);
      if (packet == null) {
        return ""String_Node_Str"";
      }
 else       if (packet.getByte(0) != 1 && packet.getByte(0) != 0x52) {
        return ""String_Node_Str"";
      }
      if (packet.getByte(0) == 1) {
        packet=new Packet01Login(packet);
        info.clientVersion=packet.getInt(1);
        info.craftProxyLogin=((Packet01Login)packet).getSeed() == MAGIC_SEED;
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        ptc.printLogMessage(""String_Node_Str"");
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(128,username.length())));
    packet.writeLong(0);
    packet.writeString16(""String_Node_Str"");
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.loginHeight=StCLogin.getHeight();
  info.loginSeed=StCLogin.getSeed();
  info.levelType=StCLogin.getLevelType();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsernameRaw());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsernameRaw());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsernameRaw());
      ptc.printLogMessage(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet,10000);
      if (packet == null) {
        return ""String_Node_Str"";
      }
 else       if (packet.getByte(0) != 1 && packet.getByte(0) != 0x52) {
        return ""String_Node_Str"";
      }
      if (packet.getByte(0) == 1) {
        packet=new Packet01Login(packet);
        info.clientVersion=packet.getInt(1);
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        ptc.printLogMessage(""String_Node_Str"");
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(128,username.length())));
    packet.writeLong(0);
    packet.writeString16(""String_Node_Str"");
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.levelType=StCLogin.getLevelType();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}",0.9859002169197396
178620,"public void run(){
  LocalSocket clientLocalSocket=new LocalSocket(clientSocket,this,Globals.getMaxWorldHeight());
  if (!clientLocalSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String reply;
  String hostnameForPing=RedirectManager.getNextHostname(listenHostname,defaultHostname);
  Integer portnumForPing=RedirectManager.getNextPort(listenHostname,defaultHostname);
  reply=LoginManager.getUsername(clientLocalSocket,connectionInfo,this,hostnameForPing,portnumForPing);
  if (reply != null) {
    sendKickMessageAndClose(clientLocalSocket,reply);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (BanList.banned(connectionInfo.getUsername())) {
    String message=BanList.getWhiteList() ? ""String_Node_Str"" : ""String_Node_Str"";
    sendKickMessageAndClose(clientLocalSocket,message);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (!BanList.getWhiteList()) {
    if (BanList.banned(connectionInfo.getIP())) {
      String message=""String_Node_Str"";
      sendKickMessageAndClose(clientLocalSocket,message);
      clientLocalSocket.closeSocket(this);
      return;
    }
  }
  String reconnectUsername=connectionInfo.getUsername();
  String hostname=defaultHostname;
  String[] split=connectionInfo.getUsernameRaw().split(""String_Node_Str"");
  if (split.length >= 2) {
    split=split[1].split(""String_Node_Str"");
    reconnectUsername=connectionInfo.getUsername() + ""String_Node_Str"" + split[0];
    String cached=ReconnectCache.get(reconnectUsername);
    hostname=hostnameMap == null ? null : hostnameMap.getString(split[0],""String_Node_Str"");
    if (cached.length() > 0) {
      hostname=cached;
      this.printLogMessage(""String_Node_Str"" + hostname);
    }
 else     if (hostname == null || hostname.equals(""String_Node_Str"")) {
      hostname=defaultHostname;
    }
 else {
      this.printLogMessage(""String_Node_Str"" + split[0] + ""String_Node_Str""+ hostname);
    }
  }
 else {
    this.printLogMessage(""String_Node_Str"");
    hostname=defaultHostname;
  }
  if (connectionInfo.getHostname() == null) {
    connectionInfo.setHostname(hostname);
  }
  connectionInfo.redirect=true;
  boolean firstConnection=true;
  while (connectionInfo.redirect) {
    String nextHostname=RedirectManager.getNextHostname(listenHostname,connectionInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,connectionInfo.getHostname());
    Boolean isNextProxy=RedirectManager.isNextProxy(listenHostname,connectionInfo.getHostname());
    String fullHostname=(isNextProxy != null && isNextProxy) ? connectionInfo.getHostname() : null;
    printLogMessage(""String_Node_Str"" + nextHostname + ""String_Node_Str""+ nextPortnum);
    Socket serverSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverSocket == null) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(reconnectUsername);
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      return;
    }
    LocalSocket serverLocalSocket=new LocalSocket(serverSocket,this,Globals.getMaxWorldHeight());
    if (!serverLocalSocket.success) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(reconnectUsername);
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    reply=LoginManager.bridgeLogin(clientLocalSocket,serverLocalSocket,connectionInfo,this,!firstConnection,fullHostname);
    if (reply != null) {
      printLogMessage(""String_Node_Str"" + reply);
      ReconnectCache.remove(reconnectUsername);
      sendKickMessageAndClose(clientLocalSocket,reply);
      clientLocalSocket.closeSocket(this);
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    if (connectionInfo.holding != 0) {
      Packet10Holding holdingPacket=new Packet10Holding(connectionInfo.holding);
      try {
        serverLocalSocket.pout.sendPacket(holdingPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    if (!firstConnection) {
      byte otherDimension=(byte)((connectionInfo.loginDimension == 0) ? -1 : 0);
      Packet09Respawn otherDimensionPacket=new Packet09Respawn(otherDimension,(byte)2,(byte)0,(short)128,0L,""String_Node_Str"");
      Packet09Respawn dimensionPacket=new Packet09Respawn(connectionInfo.loginDimension,connectionInfo.loginUnknownRespawn,connectionInfo.loginCreative,connectionInfo.loginHeight,connectionInfo.loginSeed,connectionInfo.levelType);
      try {
        clientLocalSocket.pout.sendPacket(otherDimensionPacket);
        clientLocalSocket.pout.sendPacket(dimensionPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    firstConnection=false;
    connectionInfo.redirect=false;
    ReconnectCache.store(reconnectUsername,connectionInfo.getHostname());
    KillableThread StCBridge=new DownstreamBridge(serverLocalSocket.pin,clientLocalSocket.pout,this,fairnessManager);
    KillableThread CtSBridge=new UpstreamBridge(clientLocalSocket.pin,serverLocalSocket.pout,this,fairnessManager);
    StCBridge.setName(""String_Node_Str"");
    CtSBridge.setName(""String_Node_Str"");
    StCBridge.start();
    CtSBridge.start();
    while (StCBridge.isAlive() || CtSBridge.isAlive()) {
      try {
        StCBridge.join(500);
        CtSBridge.join(500);
      }
 catch (      InterruptedException ie) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException ie2) {
        }
        this.interrupt();
      }
      if (killed() || (!StCBridge.isAlive())) {
        CtSBridge.interrupt();
      }
      if (killed() || (!CtSBridge.isAlive())) {
        StCBridge.interrupt();
      }
    }
    serverLocalSocket.closeSocket(this);
    printLogMessage(""String_Node_Str"");
  }
  clientLocalSocket.closeSocket(this);
  printLogMessage(""String_Node_Str"");
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"");
  }
}","public void run(){
  LocalSocket clientLocalSocket=new LocalSocket(clientSocket,this,Globals.getMaxWorldHeight());
  if (!clientLocalSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String reply;
  String hostnameForPing=RedirectManager.getNextHostname(listenHostname,defaultHostname);
  Integer portnumForPing=RedirectManager.getNextPort(listenHostname,defaultHostname);
  reply=LoginManager.getUsername(clientLocalSocket,connectionInfo,this,hostnameForPing,portnumForPing);
  if (reply != null) {
    sendKickMessageAndClose(clientLocalSocket,reply);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (BanList.banned(connectionInfo.getUsername())) {
    String message=BanList.getWhiteList() ? ""String_Node_Str"" : ""String_Node_Str"";
    sendKickMessageAndClose(clientLocalSocket,message);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (!BanList.getWhiteList()) {
    if (BanList.banned(connectionInfo.getIP())) {
      String message=""String_Node_Str"";
      sendKickMessageAndClose(clientLocalSocket,message);
      clientLocalSocket.closeSocket(this);
      return;
    }
  }
  String reconnectUsername=connectionInfo.getUsername();
  String hostname=defaultHostname;
  String[] split=connectionInfo.getUsernameRaw().split(""String_Node_Str"");
  if (split.length >= 2) {
    split=split[1].split(""String_Node_Str"");
    reconnectUsername=connectionInfo.getUsername() + ""String_Node_Str"" + split[0];
    String cached=ReconnectCache.get(reconnectUsername);
    hostname=hostnameMap == null ? null : hostnameMap.getString(split[0],""String_Node_Str"");
    if (cached.length() > 0) {
      hostname=cached;
      this.printLogMessage(""String_Node_Str"" + hostname);
    }
 else     if (hostname == null || hostname.equals(""String_Node_Str"")) {
      hostname=defaultHostname;
    }
 else {
      this.printLogMessage(""String_Node_Str"" + split[0] + ""String_Node_Str""+ hostname);
    }
  }
 else {
    this.printLogMessage(""String_Node_Str"");
    hostname=defaultHostname;
  }
  if (connectionInfo.getHostname() == null) {
    connectionInfo.setHostname(hostname);
  }
  connectionInfo.redirect=true;
  boolean firstConnection=true;
  while (connectionInfo.redirect) {
    String nextHostname=RedirectManager.getNextHostname(listenHostname,connectionInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,connectionInfo.getHostname());
    Boolean isNextProxy=RedirectManager.isNextProxy(listenHostname,connectionInfo.getHostname());
    String fullHostname=(isNextProxy != null && isNextProxy) ? connectionInfo.getHostname() : null;
    printLogMessage(""String_Node_Str"" + nextHostname + ""String_Node_Str""+ nextPortnum);
    Socket serverSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverSocket == null) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(reconnectUsername);
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      return;
    }
    LocalSocket serverLocalSocket=new LocalSocket(serverSocket,this,Globals.getMaxWorldHeight());
    if (!serverLocalSocket.success) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(reconnectUsername);
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    reply=LoginManager.bridgeLogin(clientLocalSocket,serverLocalSocket,connectionInfo,this,!firstConnection,fullHostname);
    if (reply != null) {
      printLogMessage(""String_Node_Str"" + reply);
      ReconnectCache.remove(reconnectUsername);
      sendKickMessageAndClose(clientLocalSocket,reply);
      clientLocalSocket.closeSocket(this);
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    if (connectionInfo.holding != 0) {
      Packet10Holding holdingPacket=new Packet10Holding(connectionInfo.holding);
      try {
        serverLocalSocket.pout.sendPacket(holdingPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    if (!firstConnection) {
      byte otherDimension=(byte)((connectionInfo.loginDimension == 0) ? -1 : 0);
      Packet09Respawn otherDimensionPacket=new Packet09Respawn(otherDimension,(byte)2,(byte)0,(short)Globals.getMaxWorldHeight(),""String_Node_Str"");
      Packet09Respawn dimensionPacket=new Packet09Respawn(connectionInfo.loginDimension,connectionInfo.loginUnknownRespawn,connectionInfo.loginCreative,connectionInfo.loginHeight,connectionInfo.levelType);
      try {
        clientLocalSocket.pout.sendPacket(otherDimensionPacket);
        clientLocalSocket.pout.sendPacket(dimensionPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    firstConnection=false;
    connectionInfo.redirect=false;
    ReconnectCache.store(reconnectUsername,connectionInfo.getHostname());
    KillableThread StCBridge=new DownstreamBridge(serverLocalSocket.pin,clientLocalSocket.pout,this,fairnessManager);
    KillableThread CtSBridge=new UpstreamBridge(clientLocalSocket.pin,serverLocalSocket.pout,this,fairnessManager);
    StCBridge.setName(""String_Node_Str"");
    CtSBridge.setName(""String_Node_Str"");
    StCBridge.start();
    CtSBridge.start();
    while (StCBridge.isAlive() || CtSBridge.isAlive()) {
      try {
        StCBridge.join(500);
        CtSBridge.join(500);
      }
 catch (      InterruptedException ie) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException ie2) {
        }
        this.interrupt();
      }
      if (killed() || (!StCBridge.isAlive())) {
        CtSBridge.interrupt();
      }
      if (killed() || (!CtSBridge.isAlive())) {
        StCBridge.interrupt();
      }
    }
    serverLocalSocket.closeSocket(this);
    printLogMessage(""String_Node_Str"");
  }
  clientLocalSocket.closeSocket(this);
  printLogMessage(""String_Node_Str"");
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"");
  }
}",0.9952830188679244
178621,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  boolean first=true;
  for (int cnt=0; cnt < end - start; cnt++) {
    if (!first) {
      sb.append(""String_Node_Str"");
    }
 else {
      first=false;
    }
    sb.append(Integer.toHexString(getByte(cnt) & 0xFF));
  }
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean first=true;
  for (int cnt=0; cnt < end - start; cnt++) {
    if (!first) {
      sb.append(""String_Node_Str"");
    }
 else {
      first=false;
    }
    sb.append(Integer.toHexString(getByte(cnt) & 0xFF));
  }
  return sb.append(""String_Node_Str"").toString();
}",0.9375907111756168
178622,"public byte getUnknown(){
  return getByte(18 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public byte getUnknown(){
  return getByte(getModeStart() + 8);
}",0.6413043478260869
178623,"public byte getDimension(){
  return getByte(17 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public int getDimension(){
  return getInt(getModeStart() + 4);
}",0.5913978494623656
178624,"public byte getMaxPlayers(){
  return getByte(20 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public byte getMaxPlayers(){
  return getByte(getModeStart() + 10);
}",0.6596858638743456
178625,"public int getMode(){
  return getInt(13 + getString16Length(5) + getString16Length(13 + getString16Length(5)));
}","public int getMode(){
  return getInt(getModeStart());
}",0.6
178626,"public String getLevelType(){
  return getString16(13 + getString16Length(5));
}","public String getLevelType(){
  return getString16(getLevelStringStart());
}",0.8589743589743589
178627,"public short getHeight(){
  return getShort(4);
}","public short getHeight(){
  return getShort(7);
}",0.979591836734694
178628,"public Packet09Respawn(byte dimension,byte unknown,byte creative,short height,long seed,String levelType){
  super(14 + levelType.length() + 2);
  super.writeByte((byte)0x09);
  super.writeByte(dimension);
  super.writeByte(unknown);
  super.writeByte(creative);
  super.writeShort(height);
  super.writeLong(seed);
  super.writeString16(levelType);
}","public Packet09Respawn(int dimension,byte difficulty,byte creative,short height,String levelType){
  super(14 + levelType.length() + 2);
  super.writeByte((byte)0x09);
  super.writeInt(dimension);
  super.writeByte(difficulty);
  super.writeByte(creative);
  super.writeShort(height);
  super.writeString16(levelType);
}",0.6378539493293591
178629,"public byte getDimension(){
  return getByte(1);
}","public int getDimension(){
  return getInt(1);
}",0.8979591836734694
178630,"public byte getCreative(){
  return getByte(3);
}","public byte getCreative(){
  return getByte(6);
}",0.979591836734694
178631,"public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsername());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsername());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsername());
      System.out.println(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet);
      if (packet == null) {
        return ""String_Node_Str"";
      }
      info.clientVersion=packet.getInt(1);
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(16,username.length())));
    packet.writeLong(0);
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.loginHeight=StCLogin.getHeight();
  info.loginSeed=StCLogin.getSeed();
  info.levelType=StCLogin.getLevelType();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsername());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsername());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsername());
      System.out.println(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet);
      if (packet == null) {
        return ""String_Node_Str"";
      }
      packet=new Packet01Login(packet);
      info.clientVersion=packet.getInt(1);
      info.craftProxyLogin=((Packet01Login)packet).getSeed() == MAGIC_SEED;
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(16,username.length())));
    packet.writeLong(0);
    packet.writeString16(""String_Node_Str"");
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.loginHeight=StCLogin.getHeight();
  info.loginSeed=StCLogin.getSeed();
  info.levelType=StCLogin.getLevelType();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}",0.9848156182212582
178632,"public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      System.out.println(""String_Node_Str"" + Integer.toHexString(packetId));
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=packet.getInt(1) >> 4;
        int z=packet.getInt(7) >> 4;
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
          }
          if (newHostname != null) {
            Packet packetBed=new Packet46Bed(2);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}","public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=packet.getInt(1) >> 4;
        int z=packet.getInt(7) >> 4;
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
          }
          if (newHostname != null) {
            Packet packetBed=new Packet46Bed(2);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}",0.9924205138301014
178633,"static final Packet packetScan(byte[] buffer,int start,int dataLength,int mask,Packet packet){
  if (dataLength == 0) {
    return null;
  }
  if (packet == null) {
    packet=new Packet();
  }
  packet.start=start;
  packet.end=start;
  packet.buffer=buffer;
  packet.mask=mask;
  if (mask == 0) {
    return null;
  }
  if (mask + 1 != buffer.length) {
    System.out.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    return null;
  }
  int position=start;
  int packetId=buffer[position & mask] & 0xff;
  ProtocolUnitArray.Op[] ops=ProtocolUnitArray.ops[packetId];
  int[] params=ProtocolUnitArray.params[packetId];
  if (ops == null) {
    if (dataLength > 0) {
      System.out.println(packet + ""String_Node_Str"" + Integer.toHexString(packetId));
      System.err.println(packet + ""String_Node_Str"" + Integer.toHexString(packetId));
      throw new IllegalStateException(""String_Node_Str"" + Integer.toHexString(packetId));
    }
    return null;
  }
  int opsLength=ops.length;
  for (int cnt=0; cnt < opsLength; cnt++) {
switch (ops[cnt]) {
case JUMP_FIXED:
{
        position=(position + params[cnt]);
        break;
      }
case BYTE_SIZED:
{
      byte size=getByte(buffer,position,mask);
      position=(position + 1);
      if (size > maxPacketSize) {
        if (position - start <= dataLength) {
          System.err.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
        }
        return null;
      }
      position=(position + size);
      if (size < 0) {
        return null;
      }
      break;
    }
case SHORT_SIZED:
{
    short size=getShort(buffer,position,mask);
    position=(position + 2);
    if (size > maxPacketSize) {
      if (position - start <= dataLength) {
        System.err.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
      }
      return null;
    }
    position=(position + size);
    if (size < 0) {
      return null;
    }
    break;
  }
case SHORT_SIZED_DOUBLED:
{
  short size=(short)(getShort(buffer,position,mask) << 1);
  position=(position + 2);
  if (size > maxPacketSize) {
    if (position - start <= dataLength) {
      System.err.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
    return null;
  }
  position=(position + size);
  if (size < 0) {
    return null;
  }
  break;
}
case SHORT_SIZED_QUAD:
{
short size=(short)(getShort(buffer,position,mask) << 2);
position=(position + 2);
if (size > maxPacketSize) {
  if (position - start <= dataLength) {
    System.err.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  return null;
}
position=(position + size);
if (size < 0) {
  return null;
}
break;
}
case INT_SIZED:
{
int size=getInt(buffer,position,mask);
if (packetId == 0x50) {
System.out.println(""String_Node_Str"" + size);
System.err.println(""String_Node_Str"" + size);
}
position=(position + 4);
if (size > maxPacketSize) {
if (position - start <= dataLength) {
  System.err.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}
return null;
}
position=(position + size);
if (size < 0) {
return null;
}
break;
}
case INT_SIZED_TRIPLE:
{
int size=getInt(buffer,position,mask) * 3;
position=(position + 4);
if (size > maxPacketSize) {
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
return null;
}
position=(position + size);
if (size < 0) {
return null;
}
break;
}
case META_DATA:
{
byte b;
do {
int select;
select=(((b=getByte(buffer,position,mask)) & 0xFF) >> 5);
position=(position + 1);
if (b != 127) {
switch (select) {
case 0:
{
  position=(position + 1);
  break;
}
case 1:
{
position=(position + 2);
break;
}
case 2:
case 3:
{
position=(position + 4);
break;
}
case 4:
{
short size=(short)(getShort(buffer,position,mask) << 1);
position=(position + 2);
if (size > maxPacketSize) {
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
return null;
}
position=(position + size);
if (size < 0) {
return null;
}
break;
}
default :
{
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"" + select);
System.out.println(""String_Node_Str"" + select);
}
return null;
}
}
}
}
 while (b != 127 && position - start <= dataLength);
break;
}
case OPTIONAL_MOTION:
{
int optional=getInt(buffer,position,mask);
position=(position + 4);
if (optional > 0) {
position=position + 6;
}
}
case ITEM:
{
short type=getShort(buffer,position,mask);
position=(position + 2);
if (type != -1) {
position=(position + 3);
}
break;
}
case ITEM_ARRAY:
{
short count=getShort(buffer,position,mask);
position=(position + 2);
if (count > (maxPacketSize >> 3)) {
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
return null;
}
for (int c=0; c < count && position - start <= dataLength; c++) {
short type=getShort(buffer,position,mask);
position=(position + 2);
if (type != -1) {
position=(position + 3);
}
}
break;
}
default :
{
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"" + ops[cnt]);
System.out.println(""String_Node_Str"" + ops[cnt]);
}
return null;
}
}
}
if (position - start > maxPacketSize) {
return null;
}
if (position - start > dataLength) {
return null;
}
packet.start=start;
packet.end=position;
packet.buffer=buffer;
packet.mask=mask;
return packet;
}","static final Packet packetScan(byte[] buffer,int start,int dataLength,int mask,Packet packet){
  if (dataLength == 0) {
    return null;
  }
  if (packet == null) {
    packet=new Packet();
  }
  packet.start=start;
  packet.end=start;
  packet.buffer=buffer;
  packet.mask=mask;
  if (mask == 0) {
    return null;
  }
  if (mask + 1 != buffer.length) {
    System.out.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    return null;
  }
  int position=start;
  int packetId=buffer[position & mask] & 0xff;
  ProtocolUnitArray.Op[] ops=ProtocolUnitArray.ops[packetId];
  int[] params=ProtocolUnitArray.params[packetId];
  if (ops == null) {
    if (dataLength > 0) {
      System.out.println(packet + ""String_Node_Str"" + Integer.toHexString(packetId));
      System.err.println(packet + ""String_Node_Str"" + Integer.toHexString(packetId));
      StringBuilder sb=new StringBuilder();
      for (int cnt=-40; cnt < 40 && cnt < dataLength; cnt++) {
        String value=Integer.toHexString(buffer[(start + cnt) & mask] & 0xFF);
        if (cnt != 0) {
          sb.append(value + ""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"" + value + ""String_Node_Str"");
        }
      }
      System.err.println(packet + sb.toString());
      throw new IllegalStateException(""String_Node_Str"" + Integer.toHexString(packetId));
    }
    return null;
  }
  int opsLength=ops.length;
  for (int cnt=0; cnt < opsLength; cnt++) {
switch (ops[cnt]) {
case JUMP_FIXED:
{
        position=(position + params[cnt]);
        break;
      }
case BYTE_SIZED:
{
      byte size=getByte(buffer,position,mask);
      position=(position + 1);
      if (size > maxPacketSize) {
        if (position - start <= dataLength) {
          System.err.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"");
        }
        return null;
      }
      position=(position + size);
      if (size < 0) {
        return null;
      }
      break;
    }
case SHORT_SIZED:
{
    short size=getShort(buffer,position,mask);
    position=(position + 2);
    if (size > maxPacketSize) {
      if (position - start <= dataLength) {
        System.err.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
      }
      return null;
    }
    position=(position + size);
    if (size < 0) {
      return null;
    }
    break;
  }
case SHORT_SIZED_DOUBLED:
{
  short size=(short)(getShort(buffer,position,mask) << 1);
  position=(position + 2);
  if (size > maxPacketSize) {
    if (position - start <= dataLength) {
      System.err.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
    return null;
  }
  position=(position + size);
  if (size < 0) {
    return null;
  }
  break;
}
case SHORT_SIZED_QUAD:
{
short size=(short)(getShort(buffer,position,mask) << 2);
position=(position + 2);
if (size > maxPacketSize) {
  if (position - start <= dataLength) {
    System.err.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  return null;
}
position=(position + size);
if (size < 0) {
  return null;
}
break;
}
case INT_SIZED:
{
int size=getInt(buffer,position,mask);
if (packetId == 0x50) {
System.out.println(""String_Node_Str"" + size);
System.err.println(""String_Node_Str"" + size);
}
position=(position + 4);
if (size > maxPacketSize) {
if (position - start <= dataLength) {
  System.err.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}
return null;
}
position=(position + size);
if (size < 0) {
return null;
}
break;
}
case INT_SIZED_TRIPLE:
{
int size=getInt(buffer,position,mask) * 3;
position=(position + 4);
if (size > maxPacketSize) {
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
return null;
}
position=(position + size);
if (size < 0) {
return null;
}
break;
}
case META_DATA:
{
byte b;
do {
int select;
select=(((b=getByte(buffer,position,mask)) & 0xFF) >> 5);
position=(position + 1);
if (b != 127) {
switch (select) {
case 0:
{
  position=(position + 1);
  break;
}
case 1:
{
position=(position + 2);
break;
}
case 2:
case 3:
{
position=(position + 4);
break;
}
case 4:
{
short size=(short)(getShort(buffer,position,mask) << 1);
position=(position + 2);
if (size > maxPacketSize) {
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
return null;
}
position=(position + size);
if (size < 0) {
return null;
}
break;
}
default :
{
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"" + select);
System.out.println(""String_Node_Str"" + select);
}
return null;
}
}
}
}
 while (b != 127 && position - start <= dataLength);
break;
}
case OPTIONAL_MOTION:
{
int optional=getInt(buffer,position,mask);
position=(position + 4);
if (optional > 0) {
position=position + 6;
}
break;
}
case ITEM:
{
short type=getShort(buffer,position,mask);
position=(position + 2);
if (type != -1) {
position=(position + 3);
}
break;
}
case ITEM_ARRAY:
{
short count=getShort(buffer,position,mask);
position=(position + 2);
if (count > (maxPacketSize >> 3)) {
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"");
System.out.println(""String_Node_Str"");
}
return null;
}
for (int c=0; c < count && position - start <= dataLength; c++) {
short type=getShort(buffer,position,mask);
position=(position + 2);
if (type != -1) {
position=(position + 3);
}
}
break;
}
default :
{
if (position - start <= dataLength) {
System.err.println(""String_Node_Str"" + ops[cnt]);
System.out.println(""String_Node_Str"" + ops[cnt]);
}
return null;
}
}
}
if (position - start > maxPacketSize) {
return null;
}
if (position - start > dataLength) {
return null;
}
packet.start=start;
packet.end=position;
packet.buffer=buffer;
packet.mask=mask;
return packet;
}",0.9627058299955495
178634,"public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(""String_Node_Str"");
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    while (!ptc.messageQueue.isEmpty()) {
      String message=ptc.messageQueue.poll();
      if (message != null) {
        Packet03Chat chat=new Packet03Chat(message);
        try {
          fm.addPacketToHighQueue(out,chat,this);
        }
 catch (        IOException e) {
          kill();
          continue;
        }
      }
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=(packet.getInt(1) >> 4);
        int z=(packet.getInt(7) >> 4);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
            Packet09Respawn normalPacket=new Packet09Respawn((byte)0);
            Packet09Respawn netherPacket=new Packet09Respawn((byte)-1);
            try {
              fm.addPacketToHighQueue(out,normalPacket,this);
              fm.addPacketToHighQueue(out,netherPacket,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            Packet packetBed=new Packet46Bed(2);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}","public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(""String_Node_Str"");
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    while (!ptc.messageQueue.isEmpty()) {
      String message=ptc.messageQueue.poll();
      if (message != null) {
        Packet03Chat chat=new Packet03Chat(message);
        try {
          fm.addPacketToHighQueue(out,chat,this);
        }
 catch (        IOException e) {
          kill();
          continue;
        }
      }
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=(packet.getInt(1) >> 4);
        int z=(packet.getInt(7) >> 4);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
            Packet09Respawn normalPacket=new Packet09Respawn((byte)0,(byte)2,(byte)0,(short)128,0L);
            Packet09Respawn netherPacket=new Packet09Respawn((byte)-1,(byte)2,(byte)0,(short)128,0L);
            try {
              fm.addPacketToHighQueue(out,normalPacket,this);
              fm.addPacketToHighQueue(out,netherPacket,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            Packet packetBed=new Packet46Bed(2,0);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}",0.9946643717728056
178635,"public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsername());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsername());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      System.out.println(""String_Node_Str"" + confirmCode);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsername());
      System.out.println(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet);
      if (packet == null) {
        return ""String_Node_Str"";
      }
      info.clientVersion=packet.getInt(1);
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(100);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(16,username.length())));
    packet.writeLong(0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginSeed=StCLogin.getSeed();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","public static String bridgeLogin(LocalSocket clientSocket,LocalSocket serverSocket,ConnectionInfo info,PassthroughConnection ptc,boolean reconnect,String fullHostname){
  Packet packet=new Packet();
  Packet CtSHandshake;
  String password=Globals.getPassword();
  if (fullHostname == null || password == null) {
    if (fullHostname != null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet02Handshake(info.getUsername());
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
    CtSHandshake=new Packet52ProxyLogin(""String_Node_Str"",fullHostname,info.getUsername());
  }
  try {
    if (serverSocket.pout.sendPacket(CtSHandshake) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(packet);
  String hash=StCHandshake.getUsername();
  if (fullHostname != null) {
    if (password == null) {
      ptc.printLogMessage(""String_Node_Str"");
    }
 else {
      String confirmCode=sha1Hash(password + hash);
      Packet code=new Packet52ProxyLogin(confirmCode,info.getHostname(),info.getUsername());
      System.out.println(""String_Node_Str"");
      try {
        if (serverSocket.pout.sendPacket(code) == null) {
          return ""String_Node_Str"";
        }
      }
 catch (      EOFException eof) {
        return ""String_Node_Str"";
      }
catch (      IOException ioe) {
        return ""String_Node_Str"";
      }
    }
  }
  String expectedCode=null;
  if (Globals.isAuth()) {
    hash=getHashString();
    StCHandshake=new Packet02Handshake(hash);
    expectedCode=sha1Hash(password + hash);
  }
  boolean passwordAccepted=false;
  if (!reconnect) {
    try {
      if (clientSocket.pout.sendPacket(StCHandshake) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    try {
      packet=clientSocket.pin.getPacket(packet);
      if (packet == null) {
        return ""String_Node_Str"";
      }
      info.clientVersion=packet.getInt(1);
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
    if (packet.getByte(0) == 0x52) {
      Packet52ProxyLogin proxyLogin=new Packet52ProxyLogin(packet);
      if (proxyLogin.getCode().equals(expectedCode)) {
        passwordAccepted=true;
        try {
          packet=clientSocket.pin.getPacket(packet);
          if (packet == null) {
            return ""String_Node_Str"";
          }
          info.clientVersion=packet.getInt(1);
        }
 catch (        EOFException eof) {
          return ""String_Node_Str"";
        }
catch (        IOException ioe) {
          return ""String_Node_Str"";
        }
      }
 else {
        ptc.printLogMessage(""String_Node_Str"" + expectedCode);
        ptc.printLogMessage(""String_Node_Str"" + proxyLogin.getCode());
        return ""String_Node_Str"";
      }
    }
  }
 else {
    String username=info.getUsername();
    packet=new Packet(200);
    packet.writeByte((byte)0x01);
    packet.writeInt(info.clientVersion);
    packet.writeString16(username.substring(0,Math.min(16,username.length())));
    packet.writeLong(0);
    packet.writeInt(0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
    packet.writeByte((byte)0);
  }
  Packet01Login CtSLogin=new Packet01Login(packet);
  try {
    if (serverSocket.pout.sendPacket(CtSLogin) == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  try {
    packet=serverSocket.pin.getPacket(packet);
    if (packet == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  EOFException eof) {
    return ""String_Node_Str"";
  }
catch (  IOException ioe) {
    return ""String_Node_Str"";
  }
  if (!passwordAccepted && !reconnect && Globals.isAuth()) {
    if (!authenticate(ptc.connectionInfo.getUsername(),hash,ptc)) {
      return ""String_Node_Str"";
    }
  }
  Packet01Login StCLogin=new Packet01Login(packet);
  info.serverPlayerId=StCLogin.getVersion();
  info.loginDimension=StCLogin.getDimension();
  info.loginUnknownRespawn=StCLogin.getUnknown();
  info.loginCreative=(byte)StCLogin.getMode();
  info.loginHeight=StCLogin.getHeight();
  info.loginSeed=StCLogin.getSeed();
  if (!reconnect) {
    info.clientPlayerId=StCLogin.getVersion();
    try {
      if (clientSocket.pout.sendPacket(StCLogin) == null) {
        return ""String_Node_Str"";
      }
    }
 catch (    EOFException eof) {
      return ""String_Node_Str"";
    }
catch (    IOException ioe) {
      return ""String_Node_Str"";
    }
  }
  return null;
}",0.9689037591025388
178636,"public void run(){
  LocalSocket clientLocalSocket=new LocalSocket(clientSocket,this);
  if (!clientLocalSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String reply;
  String hostnameForPing=RedirectManager.getNextHostname(listenHostname,defaultHostname);
  Integer portnumForPing=RedirectManager.getNextPort(listenHostname,defaultHostname);
  reply=LoginManager.getUsername(clientLocalSocket,connectionInfo,this,hostnameForPing,portnumForPing);
  if (reply != null) {
    sendKickMessageAndClose(clientLocalSocket,reply);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (BanList.banned(connectionInfo.getUsername())) {
    String message=BanList.getWhiteList() ? ""String_Node_Str"" : ""String_Node_Str"";
    sendKickMessageAndClose(clientLocalSocket,message);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (!BanList.getWhiteList()) {
    if (BanList.banned(connectionInfo.getIP())) {
      String message=""String_Node_Str"";
      sendKickMessageAndClose(clientLocalSocket,message);
      clientLocalSocket.closeSocket(this);
      return;
    }
  }
  String cached=ReconnectCache.get(connectionInfo.getUsername());
  String hostname=(cached.length() > 0) ? cached : defaultHostname;
  if (connectionInfo.getHostname() == null) {
    connectionInfo.setHostname(hostname);
  }
  connectionInfo.redirect=true;
  boolean firstConnection=true;
  while (connectionInfo.redirect) {
    String nextHostname=RedirectManager.getNextHostname(listenHostname,connectionInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,connectionInfo.getHostname());
    Boolean isNextProxy=RedirectManager.isNextProxy(listenHostname,connectionInfo.getHostname());
    String fullHostname=(isNextProxy != null && isNextProxy) ? connectionInfo.getHostname() : null;
    printLogMessage(""String_Node_Str"" + nextHostname + ""String_Node_Str""+ nextPortnum);
    Socket serverSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverSocket == null) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(connectionInfo.getUsername());
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      return;
    }
    LocalSocket serverLocalSocket=new LocalSocket(serverSocket,this);
    if (!serverLocalSocket.success) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(connectionInfo.getUsername());
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    reply=LoginManager.bridgeLogin(clientLocalSocket,serverLocalSocket,connectionInfo,this,!firstConnection,fullHostname);
    if (reply != null) {
      printLogMessage(""String_Node_Str"" + reply);
      ReconnectCache.remove(connectionInfo.getUsername());
      sendKickMessageAndClose(clientLocalSocket,reply);
      clientLocalSocket.closeSocket(this);
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    if (connectionInfo.holding != 0) {
      Packet10Holding holdingPacket=new Packet10Holding(connectionInfo.holding);
      try {
        serverLocalSocket.pout.sendPacket(holdingPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    if (!firstConnection) {
      byte otherDimension=(byte)((connectionInfo.loginDimension == 0) ? -1 : 0);
      Packet09Respawn otherDimensionPacket=new Packet09Respawn(otherDimension);
      Packet09Respawn dimensionPacket=new Packet09Respawn(connectionInfo.loginDimension);
      try {
        clientLocalSocket.pout.sendPacket(otherDimensionPacket);
        clientLocalSocket.pout.sendPacket(dimensionPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    firstConnection=false;
    connectionInfo.redirect=false;
    ReconnectCache.store(connectionInfo.getUsername(),connectionInfo.getHostname());
    KillableThread StCBridge=new DownstreamBridge(serverLocalSocket.pin,clientLocalSocket.pout,this,fairnessManager);
    KillableThread CtSBridge=new UpstreamBridge(clientLocalSocket.pin,serverLocalSocket.pout,this,fairnessManager);
    StCBridge.setName(""String_Node_Str"");
    CtSBridge.setName(""String_Node_Str"");
    StCBridge.start();
    CtSBridge.start();
    while (StCBridge.isAlive() || CtSBridge.isAlive()) {
      try {
        StCBridge.join(500);
        CtSBridge.join(500);
      }
 catch (      InterruptedException ie) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException ie2) {
        }
        this.interrupt();
      }
      if (killed() || (!StCBridge.isAlive())) {
        CtSBridge.interrupt();
      }
      if (killed() || (!CtSBridge.isAlive())) {
        StCBridge.interrupt();
      }
    }
    serverLocalSocket.closeSocket(this);
    printLogMessage(""String_Node_Str"");
  }
  clientLocalSocket.closeSocket(this);
  printLogMessage(""String_Node_Str"");
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"");
  }
}","public void run(){
  LocalSocket clientLocalSocket=new LocalSocket(clientSocket,this);
  if (!clientLocalSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String reply;
  String hostnameForPing=RedirectManager.getNextHostname(listenHostname,defaultHostname);
  Integer portnumForPing=RedirectManager.getNextPort(listenHostname,defaultHostname);
  reply=LoginManager.getUsername(clientLocalSocket,connectionInfo,this,hostnameForPing,portnumForPing);
  if (reply != null) {
    sendKickMessageAndClose(clientLocalSocket,reply);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (BanList.banned(connectionInfo.getUsername())) {
    String message=BanList.getWhiteList() ? ""String_Node_Str"" : ""String_Node_Str"";
    sendKickMessageAndClose(clientLocalSocket,message);
    clientLocalSocket.closeSocket(this);
    return;
  }
  if (!BanList.getWhiteList()) {
    if (BanList.banned(connectionInfo.getIP())) {
      String message=""String_Node_Str"";
      sendKickMessageAndClose(clientLocalSocket,message);
      clientLocalSocket.closeSocket(this);
      return;
    }
  }
  String cached=ReconnectCache.get(connectionInfo.getUsername());
  String hostname=(cached.length() > 0) ? cached : defaultHostname;
  if (connectionInfo.getHostname() == null) {
    connectionInfo.setHostname(hostname);
  }
  connectionInfo.redirect=true;
  boolean firstConnection=true;
  while (connectionInfo.redirect) {
    String nextHostname=RedirectManager.getNextHostname(listenHostname,connectionInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,connectionInfo.getHostname());
    Boolean isNextProxy=RedirectManager.isNextProxy(listenHostname,connectionInfo.getHostname());
    String fullHostname=(isNextProxy != null && isNextProxy) ? connectionInfo.getHostname() : null;
    printLogMessage(""String_Node_Str"" + nextHostname + ""String_Node_Str""+ nextPortnum);
    Socket serverSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverSocket == null) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(connectionInfo.getUsername());
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      return;
    }
    LocalSocket serverLocalSocket=new LocalSocket(serverSocket,this);
    if (!serverLocalSocket.success) {
      printLogMessage(""String_Node_Str"");
      ReconnectCache.remove(connectionInfo.getUsername());
      this.sendKickMessageAndClose(clientLocalSocket,""String_Node_Str"");
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    reply=LoginManager.bridgeLogin(clientLocalSocket,serverLocalSocket,connectionInfo,this,!firstConnection,fullHostname);
    if (reply != null) {
      printLogMessage(""String_Node_Str"" + reply);
      ReconnectCache.remove(connectionInfo.getUsername());
      sendKickMessageAndClose(clientLocalSocket,reply);
      clientLocalSocket.closeSocket(this);
      serverLocalSocket.closeSocket(this);
      return;
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    if (connectionInfo.holding != 0) {
      Packet10Holding holdingPacket=new Packet10Holding(connectionInfo.holding);
      try {
        serverLocalSocket.pout.sendPacket(holdingPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    if (!firstConnection) {
      byte otherDimension=(byte)((connectionInfo.loginDimension == 0) ? -1 : 0);
      Packet09Respawn otherDimensionPacket=new Packet09Respawn(otherDimension,(byte)2,(byte)0,(short)128,0L);
      Packet09Respawn dimensionPacket=new Packet09Respawn(connectionInfo.loginDimension,connectionInfo.loginUnknownRespawn,connectionInfo.loginCreative,connectionInfo.loginHeight,connectionInfo.loginSeed);
      try {
        clientLocalSocket.pout.sendPacket(otherDimensionPacket);
        clientLocalSocket.pout.sendPacket(dimensionPacket);
      }
 catch (      IOException e) {
        printLogMessage(""String_Node_Str"");
        kill();
      }
    }
    firstConnection=false;
    connectionInfo.redirect=false;
    ReconnectCache.store(connectionInfo.getUsername(),connectionInfo.getHostname());
    KillableThread StCBridge=new DownstreamBridge(serverLocalSocket.pin,clientLocalSocket.pout,this,fairnessManager);
    KillableThread CtSBridge=new UpstreamBridge(clientLocalSocket.pin,serverLocalSocket.pout,this,fairnessManager);
    StCBridge.setName(""String_Node_Str"");
    CtSBridge.setName(""String_Node_Str"");
    StCBridge.start();
    CtSBridge.start();
    while (StCBridge.isAlive() || CtSBridge.isAlive()) {
      try {
        StCBridge.join(500);
        CtSBridge.join(500);
      }
 catch (      InterruptedException ie) {
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException ie2) {
        }
        this.interrupt();
      }
      if (killed() || (!StCBridge.isAlive())) {
        CtSBridge.interrupt();
      }
      if (killed() || (!CtSBridge.isAlive())) {
        StCBridge.interrupt();
      }
    }
    serverLocalSocket.closeSocket(this);
    printLogMessage(""String_Node_Str"");
  }
  clientLocalSocket.closeSocket(this);
  printLogMessage(""String_Node_Str"");
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"");
  }
}",0.9861295838875166
178637,"public byte getDimension(){
  return getByte(13 + getString16Length(5));
}","public byte getDimension(){
  return getByte(15 + getString16Length(5));
}",0.9864864864864864
178638,"public Packet09Respawn(byte dimension){
  super(2);
  super.writeByte((byte)0x09);
  super.writeByte(dimension);
}","public Packet09Respawn(byte dimension,byte unknown,byte creative,short height,long seed){
  super(14);
  super.writeByte((byte)0x09);
  super.writeByte(dimension);
  super.writeByte(unknown);
  super.writeByte(creative);
  super.writeShort(height);
  super.writeLong(seed);
}",0.5809768637532133
178639,"public Packet46Bed(int state){
  super(2);
  super.writeByte((byte)0x46);
  super.writeByte((byte)state);
}","public Packet46Bed(int state,int aux){
  super(3);
  super.writeByte((byte)0x46);
  super.writeByte((byte)state);
  super.writeByte((byte)aux);
}",0.8412698412698413
178640,"public void run(){
  c=new Compressor(ptc,fm,ptc.proxyListener.hs);
  AtomicBoolean compressing=ptc.connectionInfo.cacheInUse;
  while (!killed()) {
    Packet p=queue.poll();
    if (p != null) {
      int packetId=p.getByte(0) & 0xFF;
      if (packetId == 0x33) {
        if (compressing.get()) {
          Packet compressed=c.compress(p);
          fm.addPacketToLowQueue(out,compressed,t);
          ptc.connectionInfo.uploaded.addAndGet(compressed.end - compressed.start);
        }
 else {
          fm.addPacketToLowQueue(out,p,t);
          ptc.connectionInfo.uploaded.addAndGet(p.end - p.start);
        }
      }
 else       if (packetId == 0x51) {
        Packet decompressed=c.decompress(p,ptc);
        if (decompressed == null) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.interrupt();
        }
 else {
          fm.addPacketToLowQueue(out,decompressed,t);
          ptc.connectionInfo.uploaded.addAndGet(decompressed.end - decompressed.start);
        }
      }
 else {
        fm.addPacketToLowQueue(out,p,t);
        ptc.connectionInfo.uploaded.addAndGet(p.end - p.start);
      }
    }
synchronized (compSync) {
      try {
        if (!queue.isEmpty()) {
          continue;
        }
        compSync.wait(1000);
      }
 catch (      InterruptedException e) {
        kill();
        continue;
      }
    }
  }
}","public void run(){
  c=new Compressor(ptc,fm,ptc.proxyListener.hs);
  AtomicBoolean compressing=ptc.connectionInfo.cacheInUse;
  while ((!queue.isEmpty()) || (!killed())) {
    Packet p=queue.poll();
    if (p != null) {
      int packetId=p.getByte(0) & 0xFF;
      if (packetId == 0x33) {
        if (compressing.get()) {
          Packet compressed=c.compress(p);
          fm.addPacketToLowQueue(out,compressed,t);
          ptc.connectionInfo.uploaded.addAndGet(compressed.end - compressed.start);
        }
 else {
          fm.addPacketToLowQueue(out,p,t);
          ptc.connectionInfo.uploaded.addAndGet(p.end - p.start);
        }
      }
 else       if (packetId == 0x51) {
        Packet decompressed=c.decompress(p,ptc);
        if (decompressed == null) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.interrupt();
        }
 else {
          fm.addPacketToLowQueue(out,decompressed,t);
          ptc.connectionInfo.uploaded.addAndGet(decompressed.end - decompressed.start);
        }
      }
 else {
        fm.addPacketToLowQueue(out,p,t);
        ptc.connectionInfo.uploaded.addAndGet(p.end - p.start);
      }
    }
    if (!killed()) {
synchronized (compSync) {
        try {
          if (!queue.isEmpty()) {
            continue;
          }
          compSync.wait(1000);
        }
 catch (        InterruptedException e) {
          kill();
          continue;
        }
      }
    }
  }
}",0.9594546106925008
178641,"public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x46) {
        System.out.println(""String_Node_Str"" + packet.getByte(1));
      }
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x32 || packetId == 0x51) {
        int x=packet.getInt(1);
        int z=packet.getInt(7);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
        }
        Packet fakeInit=new Packet32PreChunk(x,z,true);
        cm.addToQueue(fakeInit);
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          ptc.connectionInfo.redirect=true;
          if (newHostname != null) {
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                fm.addPacketToHighQueue(out,destroy,this);
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              fm.addPacketToHighQueue(out,unload,this);
            }
            Packet packetBed=new Packet46Bed(2);
            fm.addPacketToHighQueue(out,packetBed,this);
            kill();
            continue;
          }
        }
        fm.addPacketToHighQueue(out,packet,this);
      }
    }
  }
  try {
    out.flush();
  }
 catch (  IOException e) {
    ptc.printLogMessage(""String_Node_Str"");
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException ioe) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}","public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x32 || packetId == 0x51) {
        int x=packet.getInt(1);
        int z=packet.getInt(7);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
        }
        Packet fakeInit=new Packet32PreChunk(x,z,true);
        cm.addToQueue(fakeInit);
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          ptc.connectionInfo.redirect=true;
          if (newHostname != null) {
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                fm.addPacketToHighQueue(out,destroy,this);
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              fm.addPacketToHighQueue(out,unload,this);
            }
            Packet packetBed=new Packet46Bed(2);
            fm.addPacketToHighQueue(out,packetBed,this);
            kill();
            continue;
          }
        }
        fm.addPacketToHighQueue(out,packet,this);
      }
    }
  }
  try {
    out.flush();
  }
 catch (  IOException e) {
    ptc.printLogMessage(""String_Node_Str"");
  }
  cm.killTimerAndJoin();
}",0.3835097493036212
178642,"FairnessManager(){
  outputManager=new OutputManager();
  outputManager.start();
  outputManager.setName(""String_Node_Str"");
}","FairnessManager(){
}",0.273972602739726
178643,"@Override public void run(){
  ProtocolUnitArray.ops[0x50]=new ProtocolUnitArray.Op[]{ProtocolUnitArray.Op.JUMP_FIXED,ProtocolUnitArray.Op.SHORT_SIZED};
  ProtocolUnitArray.params[0x50]=new int[]{1,0};
  ProtocolUnitArray.ops[0x51]=new ProtocolUnitArray.Op[]{ProtocolUnitArray.Op.JUMP_FIXED,ProtocolUnitArray.Op.INT_SIZED};
  ProtocolUnitArray.params[0x51]=new int[]{14,0};
  ServerSocket listener=null;
  try {
    listener=new ServerSocket(port);
    listener.setSoTimeout(200);
  }
 catch (  BindException be) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    kill();
    interruptConnections();
    return;
  }
catch (  IOException ioe) {
    Logging.log(""String_Node_Str"");
    ioe.printStackTrace();
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    return;
  }
  Logging.log(""String_Node_Str"" + port);
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
  }
  while (!killed()) {
    if (this.isInterrupted()) {
      System.out.println(""String_Node_Str"");
      kill();
    }
    Socket socket=null;
    try {
      socket=listener.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (socket != null) {
        Logging.log(""String_Node_Str"");
      }
      continue;
    }
catch (    IOException e) {
      Logging.log(""String_Node_Str"");
      e.printStackTrace();
      continue;
    }
    if (socket == null) {
      continue;
    }
    try {
      socket.setSoTimeout(200);
    }
 catch (    SocketException e) {
      Logging.log(""String_Node_Str"");
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e1) {
          Logging.log(""String_Node_Str"");
        }
        continue;
      }
    }
    String address=socket.getInetAddress().getHostAddress().toString();
    int port=socket.getPort();
    Logging.log(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    long currentTime=System.currentTimeMillis();
    Long lastConnect=lastLogin.get(address);
    boolean floodProtection=!address.equals(""String_Node_Str"") && Globals.isFlood() && lastConnect != null && lastConnect + 5000 > currentTime;
    lastLogin.put(address,currentTime);
    if (floodProtection) {
      Logging.log(""String_Node_Str"");
      try {
        DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
        ProtocolOutputStream packetOutputStream=new ProtocolOutputStream(outputStream);
        packetOutputStream.sendPacket(new PacketFFKick(""String_Node_Str""));
        outputStream.flush();
        socket.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
 else {
      try {
        PassthroughConnection ptc=new PassthroughConnection(socket,defaultHostname,listenHostname,fairnessManager,this);
        ptc.start();
        if (Main.craftGUI != null) {
          Main.craftGUI.safeSetStatus(""String_Node_Str"" + address + ""String_Node_Str""+ port);
        }
        addPassthroughConnection(ptc);
      }
 catch (      Exception e) {
        kill();
        e.printStackTrace();
      }
    }
  }
  if (listener != null) {
    try {
      listener.close();
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (Globals.localCache()) {
    hs.flushPending(true);
    hs.writeFAT();
  }
  if (fairnessManager != null) {
    System.out.println(""String_Node_Str"");
    fairnessManager.killTimerAndJoin();
    System.out.println(""String_Node_Str"");
  }
  interruptConnections();
}","@Override public void run(){
  ProtocolUnitArray.ops[0x50]=new ProtocolUnitArray.Op[]{ProtocolUnitArray.Op.JUMP_FIXED,ProtocolUnitArray.Op.SHORT_SIZED};
  ProtocolUnitArray.params[0x50]=new int[]{1,0};
  ProtocolUnitArray.ops[0x51]=new ProtocolUnitArray.Op[]{ProtocolUnitArray.Op.JUMP_FIXED,ProtocolUnitArray.Op.INT_SIZED};
  ProtocolUnitArray.params[0x51]=new int[]{14,0};
  ServerSocket listener=null;
  try {
    listener=new ServerSocket(port);
    listener.setSoTimeout(200);
  }
 catch (  BindException be) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    kill();
    interruptConnections();
    return;
  }
catch (  IOException ioe) {
    Logging.log(""String_Node_Str"");
    ioe.printStackTrace();
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    return;
  }
  Logging.log(""String_Node_Str"" + port);
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
  }
  while (!killed()) {
    if (this.isInterrupted()) {
      System.out.println(""String_Node_Str"");
      kill();
    }
    Socket socket=null;
    try {
      socket=listener.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (socket != null) {
        Logging.log(""String_Node_Str"");
      }
      continue;
    }
catch (    IOException e) {
      Logging.log(""String_Node_Str"");
      e.printStackTrace();
      continue;
    }
    if (socket == null) {
      continue;
    }
    try {
      socket.setSoTimeout(200);
    }
 catch (    SocketException e) {
      Logging.log(""String_Node_Str"");
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e1) {
          Logging.log(""String_Node_Str"");
        }
        continue;
      }
    }
    String address=socket.getInetAddress().getHostAddress().toString();
    int port=socket.getPort();
    Logging.log(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    long currentTime=System.currentTimeMillis();
    Long lastConnect=lastLogin.get(address);
    boolean floodProtection=!address.equals(""String_Node_Str"") && Globals.isFlood() && lastConnect != null && lastConnect + 5000 > currentTime;
    lastLogin.put(address,currentTime);
    if (floodProtection) {
      Logging.log(""String_Node_Str"");
      try {
        DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
        ProtocolOutputStream packetOutputStream=new ProtocolOutputStream(outputStream);
        packetOutputStream.sendPacket(new PacketFFKick(""String_Node_Str""));
        outputStream.flush();
        socket.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
 else {
      try {
        PassthroughConnection ptc=new PassthroughConnection(socket,defaultHostname,listenHostname,fairnessManager,this);
        ptc.start();
        if (Main.craftGUI != null) {
          Main.craftGUI.safeSetStatus(""String_Node_Str"" + address + ""String_Node_Str""+ port);
        }
        addPassthroughConnection(ptc);
      }
 catch (      Exception e) {
        kill();
        e.printStackTrace();
      }
    }
  }
  if (listener != null) {
    try {
      listener.close();
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
    }
  }
  if (Globals.localCache()) {
    hs.flushPending(true);
    hs.writeFAT();
  }
  interruptConnections();
}",0.9739108725502434
178644,"public void setByte(int pos,byte b){
  buffer[(pos++) & mask]=b;
}","public void setByte(int pos,byte b){
  buffer[(start + pos++) & mask]=b;
}",0.9428571428571428
178645,"public void setShort(int pos,short s){
  buffer[(pos++) & mask]=(byte)(s >> 8);
  buffer[(pos++) & mask]=(byte)(s >> 0);
}","public void setShort(int pos,short s){
  buffer[(start + pos++) & mask]=(byte)(s >> 8);
  buffer[(start + pos++) & mask]=(byte)(s >> 0);
}",0.9384615384615383
178646,"public void setInt(int pos,int i){
  buffer[(pos++) & mask]=(byte)(i >> 24);
  buffer[(pos++) & mask]=(byte)(i >> 16);
  buffer[(pos++) & mask]=(byte)(i >> 8);
  buffer[(pos++) & mask]=(byte)(i >> 0);
}","public void setInt(int pos,int i){
  buffer[(start + pos++) & mask]=(byte)(i >> 24);
  buffer[(start + pos++) & mask]=(byte)(i >> 16);
  buffer[(start + pos++) & mask]=(byte)(i >> 8);
  buffer[(start + pos++) & mask]=(byte)(i >> 0);
}",0.926605504587156
178647,"public void setLong(int pos,long i){
  buffer[(pos++) & mask]=(byte)(i >> 56);
  buffer[(pos++) & mask]=(byte)(i >> 48);
  buffer[(pos++) & mask]=(byte)(i >> 40);
  buffer[(pos++) & mask]=(byte)(i >> 32);
  buffer[(pos++) & mask]=(byte)(i >> 24);
  buffer[(pos++) & mask]=(byte)(i >> 16);
  buffer[(pos++) & mask]=(byte)(i >> 8);
  buffer[(pos++) & mask]=(byte)(i >> 0);
}","public void setLong(int pos,long i){
  buffer[(start + pos++) & mask]=(byte)(i >> 56);
  buffer[(start + pos++) & mask]=(byte)(i >> 48);
  buffer[(start + pos++) & mask]=(byte)(i >> 40);
  buffer[(start + pos++) & mask]=(byte)(i >> 32);
  buffer[(start + pos++) & mask]=(byte)(i >> 24);
  buffer[(start + pos++) & mask]=(byte)(i >> 16);
  buffer[(start + pos++) & mask]=(byte)(i >> 8);
  buffer[(start + pos++) & mask]=(byte)(i >> 0);
}",0.9207920792079208
178648,"public Packet decompress(Packet packet,PassthroughConnection ptc){
  int length=packet.getInt(14);
  Packet newPacket=packet.clone(fm);
  byte[] buffer=newPacket.buffer;
  int start=18;
  if (length > 131072) {
    return null;
  }
  i.reset();
  i.setInput(buffer,start,length);
  i.finished();
  int expandedLength;
  try {
    expandedLength=i.inflate(decompressed,0,decompressed.length);
  }
 catch (  DataFormatException dfe) {
    ptc.printLogMessage(""String_Node_Str"");
    return null;
  }
  if (expandedLength != 81920 + 320) {
    ptc.printLogMessage(""String_Node_Str"");
    return null;
  }
  HashManager.extractHashesList(decompressed,packetHashes);
  for (int cnt=0; cnt < 40; cnt++) {
    byte[] block=hs.getHash(ptc,packetHashes[cnt]);
    if (block != null) {
      HashGenerator.copyToBuffer(decompressed,cnt,block);
    }
 else {
      block=new byte[2048];
      HashGenerator.copyFromBuffer(decompressed,cnt,block);
      hs.addHash(packetHashes[cnt],block);
    }
  }
  d.reset();
  d.setInput(decompressed,0,expandedLength - 320);
  d.finish();
  int newSize=d.deflate(compressed);
  Packet outPacket=new Packet();
  outPacket.buffer=new byte[newSize + 18];
  outPacket.writeByte((byte)0x33);
  outPacket.writeInt(packet.getInt(1));
  outPacket.writeShort(packet.getShort(5));
  outPacket.writeInt(packet.getInt(7));
  outPacket.writeByte(packet.getByte(11));
  outPacket.writeByte(packet.getByte(12));
  outPacket.writeByte(packet.getByte(13));
  outPacket.writeInt(newSize);
  System.arraycopy(compressed,0,outPacket.buffer,18,newSize);
  outPacket.end+=newSize;
  ptc.connectionInfo.saved.addAndGet(newSize - length);
  if (Main.craftGUI != null) {
    int percent=(int)(((100.0) * ptc.connectionInfo.saved.get()) / ptc.connectionInfo.uploaded.get());
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + (ptc.connectionInfo.saved.get() / 1024) + ""String_Node_Str""+ percent+ ""String_Node_Str"");
  }
  return outPacket;
}","public Packet decompress(Packet packet,PassthroughConnection ptc){
  int length=packet.getInt(14);
  Packet newPacket=packet.clone(fm);
  byte[] buffer=newPacket.buffer;
  int start=18;
  if (length > 131072) {
    return null;
  }
  i.reset();
  i.setInput(buffer,start,length);
  i.finished();
  int expandedLength;
  try {
    expandedLength=i.inflate(decompressed,0,decompressed.length);
  }
 catch (  DataFormatException dfe) {
    ptc.printLogMessage(""String_Node_Str"");
    return null;
  }
  if (expandedLength != 81920 + 320) {
    ptc.printLogMessage(""String_Node_Str"");
    return null;
  }
  HashManager.extractHashesList(decompressed,packetHashes);
  for (int cnt=0; cnt < 40; cnt++) {
    byte[] block=hs.getHash(ptc,packetHashes[cnt]);
    if (block != null) {
      HashGenerator.copyToBuffer(decompressed,cnt,block);
    }
 else {
      block=new byte[2048];
      HashGenerator.copyFromBuffer(decompressed,cnt,block);
      hs.addHash(packetHashes[cnt],block);
    }
  }
  d.reset();
  d.setInput(decompressed,0,expandedLength - 320);
  d.finish();
  int newSize=d.deflate(compressed);
  Packet outPacket=new Packet();
  outPacket.buffer=new byte[newSize + 18];
  outPacket.writeByte((byte)0x33);
  outPacket.writeInt(packet.getInt(1));
  outPacket.writeShort(packet.getShort(5));
  outPacket.writeInt(packet.getInt(7));
  outPacket.writeByte(packet.getByte(11));
  outPacket.writeByte(packet.getByte(12));
  outPacket.writeByte(packet.getByte(13));
  outPacket.writeInt(newSize);
  System.arraycopy(compressed,0,outPacket.buffer,18,newSize);
  outPacket.end+=newSize;
  ptc.connectionInfo.saved.addAndGet(newSize - length);
  int percent=(int)(((100.0) * ptc.connectionInfo.saved.get()) / ptc.connectionInfo.uploaded.get());
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + (ptc.connectionInfo.saved.get() / 1024) + ""String_Node_Str""+ percent+ ""String_Node_Str"");
  }
 else {
  }
  return outPacket;
}",0.9348383786557208
178649,"byte[] loadFile(PassthroughConnection ptc,int id,long requestedHash){
  Reference<byte[]> ref=cache.get(requestedHash);
  if (ref != null) {
    byte[] block=ref.get();
    if (block != null) {
      return block;
    }
  }
  if (cache.containsKey(requestedHash)) {
  }
  System.out.println(""String_Node_Str"" + id);
  File f=new File(cacheDir,""String_Node_Str"" + id);
  FileInputStream fileIn;
  GZIPInputStream gzin;
  try {
    fileIn=new FileInputStream(f);
    gzin=new GZIPInputStream(fileIn);
  }
 catch (  IOException e) {
    return null;
  }
  DataInputStream in=new DataInputStream(gzin);
  byte[] requestedBlock=null;
  ConcurrentLinkedQueue<Long> sendQueue=ptc.connectionInfo.hashesToSend;
  ConcurrentHashMap<Long,Boolean> sentAlready=ptc.connectionInfo.hashesSent;
  boolean eof=false;
  while (!eof) {
    try {
      long hash=in.readLong();
      byte[] block=new byte[2048];
      in.readFully(block);
      if (hash == requestedHash) {
        requestedBlock=block;
      }
      cache.put(hash,new SoftReference<byte[]>(block));
      if (!sentAlready.containsKey(hash)) {
        sendQueue.add(hash);
      }
      hardLoop.add(block);
      int loopSize=hardLoopSize.incrementAndGet();
      while (loopSize > 32768) {
        hardLoop.poll();
        loopSize=hardLoopSize.decrementAndGet();
      }
    }
 catch (    EOFException eof1) {
      eof=true;
      continue;
    }
catch (    IOException ioe) {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ioe2) {
          return null;
        }
      }
      return null;
    }
  }
  return requestedBlock;
}","byte[] loadFile(PassthroughConnection ptc,int id,long requestedHash){
  Object fileLock=fileLocks.get(id);
  if (fileLock == null) {
    fileLock=new Object();
    Object oldLock=fileLocks.putIfAbsent(id,fileLock);
    if (oldLock != null) {
      fileLock=oldLock;
    }
  }
synchronized (fileLock) {
    ConcurrentHashMap<Long,Boolean> received=ptc.connectionInfo.hashesReceived;
    Reference<byte[]> ref=cache.get(requestedHash);
    if (ref != null && received.containsKey(requestedHash)) {
      byte[] block=ref.get();
      if (block != null) {
        return block;
      }
    }
    System.out.println(""String_Node_Str"" + id);
    File f=new File(cacheDir,""String_Node_Str"" + id);
    FileInputStream fileIn;
    GZIPInputStream gzin;
    try {
      fileIn=new FileInputStream(f);
      gzin=new GZIPInputStream(fileIn);
    }
 catch (    IOException e) {
      return null;
    }
    DataInputStream in=new DataInputStream(gzin);
    byte[] requestedBlock=null;
    ConcurrentLinkedQueue<Long> sendQueue=ptc.connectionInfo.hashesToSend;
    ConcurrentHashMap<Long,Boolean> sentAlready=ptc.connectionInfo.hashesSent;
    boolean eof=false;
    while (!eof) {
      try {
        long hash=in.readLong();
        byte[] block=null;
        ref=cache.get(hash);
        if (ref != null) {
          block=ref.get();
        }
        if (block == null) {
          block=new byte[2048];
          in.readFully(block);
        }
 else {
          in.skip(2048);
        }
        if (hash == requestedHash) {
          requestedBlock=block;
        }
        cache.put(hash,new SoftReference<byte[]>(block));
        received.put(hash,true);
        if (!sentAlready.containsKey(hash)) {
          sendQueue.add(hash);
        }
        hardLoop.add(block);
        int loopSize=hardLoopSize.incrementAndGet();
        while (loopSize > 32768) {
          hardLoop.poll();
          loopSize=hardLoopSize.decrementAndGet();
        }
      }
 catch (      EOFException eof1) {
        eof=true;
        continue;
      }
catch (      IOException ioe) {
        if (in != null) {
          try {
            in.close();
          }
 catch (          IOException ioe2) {
            return null;
          }
        }
        return null;
      }
    }
    return requestedBlock;
  }
}",0.7703288299770584
178650,"public void run(){
  while (!killed()) {
    long nextFlushLocal=nextFlush.get();
    long currentTime=System.currentTimeMillis();
    if (nextFlushLocal != 0 && nextFlushLocal + maxLatency < currentTime) {
      if (lock.tryLock()) {
        try {
          flush();
        }
 catch (        IOException e) {
        }
 finally {
          lock.unlock();
        }
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
synchronized (syncObj) {
      nextFlushLocal=nextFlush.get();
      currentTime=System.currentTimeMillis();
      long delay=Math.max(10L,Math.min(maxLatency,nextFlushLocal - currentTime));
      try {
        if (nextFlushLocal == 0) {
          syncObj.wait(500);
        }
 else {
          syncObj.wait(delay);
        }
      }
 catch (      InterruptedException ie) {
        kill();
        continue;
      }
    }
  }
}","public void run(){
  while (!killed()) {
    long nextFlushLocal=nextFlush.get();
    long currentTime=System.currentTimeMillis();
    if (nextFlushLocal != 0 && nextFlushLocal + maxLatency < currentTime) {
      if (lock.tryLock()) {
        try {
          flush();
        }
 catch (        IOException e) {
        }
 finally {
          lock.unlock();
        }
      }
 else {
      }
    }
synchronized (syncObj) {
      nextFlushLocal=nextFlush.get();
      currentTime=System.currentTimeMillis();
      long delay=Math.max(10L,Math.min(maxLatency,nextFlushLocal - currentTime));
      try {
        if (nextFlushLocal == 0) {
          syncObj.wait(500);
        }
 else {
          syncObj.wait(delay);
        }
      }
 catch (      InterruptedException ie) {
        kill();
        continue;
      }
    }
  }
}",0.9723040659988216
178651,"public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x32 || packetId == 0x51) {
        int x=packet.getInt(1);
        int z=packet.getInt(7);
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
        }
        Packet fakeInit=new Packet32PreChunk(x,z,true);
        cm.addToQueue(fakeInit);
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
          }
          if (newHostname != null) {
            Packet packetBed=new Packet46Bed(2);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}","public void run(){
  CompressionManager cm=new CompressionManager(this,ptc,fm,out);
  Packet packet=new Packet();
  Packet packetBackup=packet;
  while (!killed()) {
    try {
      packet=in.getPacket(packet);
      if (packet == null) {
        ptc.printLogMessage(""String_Node_Str"");
        kill();
        continue;
      }
    }
 catch (    EOFException e) {
      ptc.printLogMessage(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      kill();
      continue;
    }
catch (    IllegalStateException ise) {
      kill();
      ptc.printLogMessage(packetBackup + ""String_Node_Str"");
      ptc.printLogMessage(""String_Node_Str"" + oldPacketIds);
      continue;
    }
    if (packet.start < packet.end) {
      boolean dontSend=false;
      int packetId=packet.getByte(0) & 0xFF;
      if (packetId == 0x32) {
        int x=packet.getInt(1);
        int z=packet.getInt(5);
        boolean mode=packet.getByte(9) != 0;
        if (mode) {
          if (!ptc.connectionInfo.addChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
 else {
          if (!ptc.connectionInfo.removeChunk(x,z)) {
            ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z);
          }
        }
      }
 else       if (packetId == 0x33 || packetId == 0x51) {
        int x=packet.getInt(1) >> 4;
        int z=packet.getInt(7) >> 4;
        if (!ptc.connectionInfo.containsChunk(x,z)) {
          ptc.printLogMessage(""String_Node_Str"" + x + ""String_Node_Str""+ z+ ""String_Node_Str"");
          Packet fakeInit=new Packet32PreChunk(x,z,true);
          cm.addToQueue(fakeInit);
        }
      }
      int clientPlayerId=ptc.connectionInfo.clientPlayerId;
      int serverPlayerId=ptc.connectionInfo.serverPlayerId;
      Set<Integer> activeEntityIds=ptc.connectionInfo.activeEntities;
      int[] entityIdArray=EntityMap.entityIds[packetId];
      if (entityIdArray != null) {
        for (        int pos : entityIdArray) {
          int id=packet.getInt(pos);
          if (id == clientPlayerId) {
            packet.setInt(pos,serverPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,serverPlayerId);
          }
 else           if (id == serverPlayerId) {
            packet.setInt(pos,clientPlayerId);
            updateEntityId(ptc,activeEntityIds,packetId,clientPlayerId);
          }
 else {
            updateEntityId(ptc,activeEntityIds,packetId,id);
          }
        }
      }
      if (((packetId >= 0x32 && packetId < 0x36) || packetId == 0x82) || (packetId == 0x51)) {
        cm.addToQueue(packet);
        dontSend=true;
      }
      oldPacketIds.add(packet.buffer[packet.start & packet.mask]);
      if (this.oldPacketIds.size() > 20) {
        oldPacketIds.remove();
      }
      if (!dontSend) {
        ptc.connectionInfo.uploaded.addAndGet(packet.end - packet.start);
        if (!ptc.connectionInfo.forwardConnection && packetId == 0xFF) {
          String message=packet.getString16(1);
          String newHostname=redirectDetected(message,ptc);
          ptc.printLogMessage(""String_Node_Str"" + newHostname);
          ptc.connectionInfo.setHostname(newHostname);
          if (newHostname != null) {
            ptc.connectionInfo.redirect=true;
          }
          if (newHostname != null) {
            Packet packetBed=new Packet46Bed(2);
            try {
              fm.addPacketToHighQueue(out,packetBed,this);
            }
 catch (            IOException ioe) {
              kill();
              continue;
            }
            cm.killTimerAndJoin();
            List<Integer> entityIds=ptc.connectionInfo.clearEntities();
            for (            int id : entityIds) {
              if (id != clientPlayerId) {
                Packet destroy=new Packet1DDestroyEntity(id);
                try {
                  fm.addPacketToHighQueue(out,destroy,this);
                }
 catch (                IOException ioe) {
                  kill();
                  continue;
                }
              }
            }
            List<Long> activeChunks=ptc.connectionInfo.clearChunks();
            for (            Long chunk : activeChunks) {
              int x=ConnectionInfo.getX(chunk);
              int z=ConnectionInfo.getZ(chunk);
              Packet unload=new Packet32PreChunk(x,z,false);
              try {
                fm.addPacketToHighQueue(out,unload,this);
              }
 catch (              IOException ioe) {
                kill();
                continue;
              }
            }
            kill();
            continue;
          }
        }
        try {
          fm.addPacketToHighQueue(out,packet,this);
        }
 catch (        IOException ioe) {
          kill();
          continue;
        }
      }
    }
  }
  cm.killTimerAndJoin();
synchronized (out) {
    try {
      out.flush();
    }
 catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
    }
  }
}",0.9968216130313866
178652,"@Override public void addActionListener(ActionListener actionListener){
  this.actionListener=actionListener;
}","@Override public void addActionListener(ActionListener actionListener){
  actionListeners.add(actionListener);
}",0.9417040358744396
178653,"@Override public void fireActionActivated(){
  if (this.actionListener == null)   return;
  ActionEvent e=new ActionEvent(this,0,""String_Node_Str"");
  this.actionListener.actionPerformed(e);
}","@Override public void fireActionActivated(){
  ActionEvent e=new ActionEvent(this,0,""String_Node_Str"");
  for (  ActionListener anActionListener : this.actionListeners) {
    anActionListener.actionPerformed(e);
  }
}",0.7188264058679706
178654,"@Test public void testAdapterNativeListener() throws MalformedURLException {
  NativeTrayMock nativeTrayMock=new NativeTrayMock();
  LinuxTrayIconAdapter linuxTrayIconAdapter=makeSubject(nativeTrayMock);
  ActionListener actionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionsPerformed.append(""String_Node_Str"");
    }
  }
;
  linuxTrayIconAdapter.addActionListener(actionListener);
  linuxTrayIconAdapter.fireActionActivated();
  linuxTrayIconAdapter.fireMenuAction(1);
  String actionList=actionsPerformed.toString().trim();
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"",actionList);
}","@Test public void testAdapterNativeListener() throws MalformedURLException {
  NativeTrayMock nativeTrayMock=new NativeTrayMock();
  LinuxTrayIconAdapter linuxTrayIconAdapter=makeSubject(nativeTrayMock);
  linuxTrayIconAdapter.fireActionActivated();
  ActionListener actionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionsPerformed.append(""String_Node_Str"");
    }
  }
;
  linuxTrayIconAdapter.addActionListener(actionListener);
  ActionListener actionListener2=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      actionsPerformed.append(""String_Node_Str"");
    }
  }
;
  linuxTrayIconAdapter.addActionListener(actionListener2);
  linuxTrayIconAdapter.fireActionActivated();
  linuxTrayIconAdapter.fireMenuAction(1);
  String actionList=actionsPerformed.toString().trim();
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",actionList);
}",0.608641975308642
178655,"public ArgumentListBuilder getToolCmd(EnvVars envVars){
  ArgumentListBuilder toolCmd=new ArgumentListBuilder();
  if (getTool().equals(""String_Node_Str"")) {
    toolCmd.add(""String_Node_Str"",""String_Node_Str"");
    if (!StringUtils.isEmpty(getOutput())) {
      toolCmd.add(""String_Node_Str"",getOutput());
    }
  }
 else {
    toolCmd.add(getTool());
    if (!StringUtils.isEmpty(getOutput())) {
      toolCmd.add(""String_Node_Str"",getOutput());
    }
  }
  if (!StringUtils.isEmpty(getAdditionalOpts())) {
    toolCmd.addTokenized(envVars.expand(getAdditionalOpts()));
  }
  if (!StringUtils.isEmpty(getBuildCommand())) {
    toolCmd.add(getBuildCommand());
  }
  return toolCmd;
}","public ArgumentListBuilder getToolCmd(EnvVars envVars){
  ArgumentListBuilder toolCmd=new ArgumentListBuilder();
  if (getTool().equals(""String_Node_Str"")) {
    toolCmd.add(""String_Node_Str"",""String_Node_Str"");
    if (!StringUtils.isEmpty(getOutput())) {
      toolCmd.add(""String_Node_Str"",getOutput());
    }
  }
 else {
    toolCmd.add(getTool());
    if (!StringUtils.isEmpty(getOutput())) {
      toolCmd.add(""String_Node_Str"",getOutput());
    }
  }
  if (!StringUtils.isEmpty(getAdditionalOpts())) {
    toolCmd.addTokenized(envVars.expand(getAdditionalOpts()));
  }
  if (!StringUtils.isEmpty(getBuildCommand())) {
    toolCmd.addTokenized(envVars.expand(getBuildCommand()));
  }
  return toolCmd;
}",0.9820531227566404
178656,"public List<String> call() throws IOException {
  List<String> validFiles=new ArrayList<String>();
  HashSet<String> buildSpecFiles=new HashSet<String>();
  populateFileList();
  try (Scanner scanner=new Scanner(Paths.get(buildSpec))){
    while (scanner.hasNextLine()) {
      processBuildSpecLine(scanner.nextLine(),buildSpecFiles);
    }
  }
   for (  String file : fileList) {
    if (buildSpecFiles.contains(file)) {
      validFiles.add(file);
    }
  }
  return validFiles;
}","public List<String> call() throws IOException {
  List<String> validFiles=new ArrayList<String>();
  HashSet<String> buildSpecFiles=new HashSet<String>();
  populateFileList();
  try (Scanner scanner=new Scanner(Paths.get(buildSpec))){
    while (scanner.hasNextLine()) {
      processBuildSpecLine(scanner.nextLine(),buildSpecFiles);
    }
  }
   for (  String file : fileList) {
    for (    String bsFile : buildSpecFiles) {
      if ((bsFile.contains(""String_Node_Str"") && bsFile.toLowerCase().equals(file.toLowerCase())) || (!bsFile.contains(""String_Node_Str"") && bsFile.equals(file))) {
        validFiles.add(file);
      }
    }
  }
  return validFiles;
}",0.7842794759825328
178657,"public static ByteArrayOutputStream executeCommandParseOutput(Launcher launcher,FilePath buildDir,EnvVars envVars,ArgumentListBuilder cmds) throws AbortException {
  if (launcher.isUnix()) {
    cmds=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"",cmds.toString());
  }
 else {
    cmds=cmds.toWindowsCommand();
  }
  try {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    launcher.launch().stdout(outputStream).stderr(outputStream).pwd(buildDir).envs(envVars).cmds(cmds).join();
    return outputStream;
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
}","public static ByteArrayOutputStream executeCommandParseOutput(Launcher launcher,FilePath buildDir,EnvVars envVars,ArgumentListBuilder cmds) throws AbortException {
  if (launcher.isUnix()) {
    cmds=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"",cmds.toString());
  }
 else {
    cmds.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    cmds=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"",cmds.toString());
  }
  try {
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    launcher.launch().stdout(outputStream).stderr(outputStream).pwd(buildDir).envs(envVars).cmds(cmds).join();
    return outputStream;
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
}",0.8838526912181303
178658,"public static int executeCommand(Launcher launcher,TaskListener listener,FilePath buildDir,EnvVars envVars,ArgumentListBuilder cmds,boolean ignoreReturnCode) throws AbortException {
  if (launcher.isUnix()) {
    cmds=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"",cmds.toString());
  }
 else {
    cmds=cmds.toWindowsCommand();
  }
  try {
    int returnCode=launcher.launch().stdout(listener).stderr(listener.getLogger()).pwd(buildDir).envs(envVars).cmds(cmds).join();
    listener.getLogger().println(""String_Node_Str"" + Integer.toString(returnCode));
    if (!ignoreReturnCode && returnCode != 0) {
      throw new AbortException(""String_Node_Str"");
    }
 else {
      return returnCode;
    }
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
}","public static int executeCommand(Launcher launcher,TaskListener listener,FilePath buildDir,EnvVars envVars,ArgumentListBuilder cmds,boolean ignoreReturnCode) throws AbortException {
  if (launcher.isUnix()) {
    cmds=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"",cmds.toString());
  }
 else {
    cmds.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    cmds=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"",cmds.toString());
  }
  try {
    int returnCode=launcher.launch().stdout(listener).stderr(listener.getLogger()).pwd(buildDir).envs(envVars).cmds(cmds).join();
    listener.getLogger().println(""String_Node_Str"" + Integer.toString(returnCode));
    if (!ignoreReturnCode && returnCode != 0) {
      throw new AbortException(""String_Node_Str"");
    }
 else {
      return returnCode;
    }
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
}",0.9066059225512528
178659,"public ArgumentListBuilder getKwcheckRunCmd(EnvVars envVars,FilePath workspace,String diffList) throws IOException, InterruptedException {
  ArgumentListBuilder kwcheckRunCmd=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"");
  kwcheckRunCmd.add(""String_Node_Str"",getKwlpDir(workspace,envVars).getRemote());
  String licenseHost=envVars.get(KlocworkConstants.KLOCWORK_LICENSE_HOST);
  if (!StringUtils.isEmpty(licenseHost)) {
    kwcheckRunCmd.add(""String_Node_Str"",licenseHost);
  }
  String licensePort=envVars.get(KlocworkConstants.KLOCWORK_LICENSE_PORT);
  if (!StringUtils.isEmpty(licensePort)) {
    kwcheckRunCmd.add(""String_Node_Str"",licensePort);
  }
  String xmlReport=envVars.expand(KlocworkUtil.getDefaultKwcheckReportFile(reportFile));
  kwcheckRunCmd.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",xmlReport);
  kwcheckRunCmd.add(""String_Node_Str"",envVars.expand(KlocworkUtil.getDefaultBuildSpec(buildSpec)));
  if (!StringUtils.isEmpty(additionalOpts)) {
    kwcheckRunCmd.addTokenized(envVars.expand(additionalOpts));
  }
  kwcheckRunCmd.addTokenized(diffList);
  return kwcheckRunCmd;
}","public ArgumentListBuilder getKwcheckRunCmd(EnvVars envVars,FilePath workspace,String diffList) throws IOException, InterruptedException {
  ArgumentListBuilder kwcheckRunCmd=new ArgumentListBuilder(""String_Node_Str"",""String_Node_Str"");
  kwcheckRunCmd.add(""String_Node_Str"",getKwlpDir(workspace,envVars).getRemote());
  if (!StringUtils.isEmpty(envVars.get(KlocworkConstants.KLOCWORK_LICENSE_HOST))) {
    kwcheckRunCmd.add(""String_Node_Str"",envVars.get(KlocworkConstants.KLOCWORK_LICENSE_HOST));
    if (!StringUtils.isEmpty(envVars.get(KlocworkConstants.KLOCWORK_LICENSE_PORT))) {
      kwcheckRunCmd.add(""String_Node_Str"",envVars.get(KlocworkConstants.KLOCWORK_LICENSE_PORT));
    }
  }
  String xmlReport=envVars.expand(KlocworkUtil.getDefaultKwcheckReportFile(reportFile));
  kwcheckRunCmd.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",xmlReport);
  kwcheckRunCmd.add(""String_Node_Str"",envVars.expand(KlocworkUtil.getDefaultBuildSpec(buildSpec)));
  if (!StringUtils.isEmpty(additionalOpts)) {
    kwcheckRunCmd.addTokenized(envVars.expand(additionalOpts));
  }
  kwcheckRunCmd.addTokenized(diffList);
  return kwcheckRunCmd;
}",0.8202643171806168
178660,"public ArgumentListBuilder getKwbuildprojectCmd(EnvVars envVars) throws AbortException {
  ArgumentListBuilder kwbuildprojectCmd=new ArgumentListBuilder(""String_Node_Str"");
  kwbuildprojectCmd.add(""String_Node_Str"",envVars.expand(KlocworkUtil.getDefaultKwtablesDir(tablesDir)));
  kwbuildprojectCmd.add(""String_Node_Str"");
  kwbuildprojectCmd.add(envVars.get(KlocworkConstants.KLOCWORK_LICENSE_HOST));
  kwbuildprojectCmd.add(""String_Node_Str"");
  kwbuildprojectCmd.add(envVars.get(KlocworkConstants.KLOCWORK_LICENSE_PORT));
  kwbuildprojectCmd.add(""String_Node_Str"");
  kwbuildprojectCmd.add(KlocworkUtil.getKlocworkProjectUrl(envVars));
  if (incrementalAnalysis) {
    kwbuildprojectCmd.add(""String_Node_Str"");
  }
 else {
    kwbuildprojectCmd.add(""String_Node_Str"");
  }
  if (!StringUtils.isEmpty(additionalOpts)) {
    kwbuildprojectCmd.addTokenized(envVars.expand(additionalOpts));
  }
  kwbuildprojectCmd.add(envVars.expand(KlocworkUtil.getDefaultBuildSpec(buildSpec)));
  return kwbuildprojectCmd;
}","public ArgumentListBuilder getKwbuildprojectCmd(EnvVars envVars) throws AbortException {
  ArgumentListBuilder kwbuildprojectCmd=new ArgumentListBuilder(""String_Node_Str"");
  kwbuildprojectCmd.add(""String_Node_Str"",envVars.expand(KlocworkUtil.getDefaultKwtablesDir(tablesDir)));
  kwbuildprojectCmd.add(""String_Node_Str"");
  kwbuildprojectCmd.add(KlocworkUtil.getKlocworkProjectUrl(envVars));
  if (!StringUtils.isEmpty(envVars.get(KlocworkConstants.KLOCWORK_LICENSE_HOST))) {
    kwbuildprojectCmd.add(""String_Node_Str"",envVars.get(KlocworkConstants.KLOCWORK_LICENSE_HOST));
    if (!StringUtils.isEmpty(envVars.get(KlocworkConstants.KLOCWORK_LICENSE_PORT))) {
      kwbuildprojectCmd.add(""String_Node_Str"",envVars.get(KlocworkConstants.KLOCWORK_LICENSE_PORT));
    }
  }
  if (incrementalAnalysis) {
    kwbuildprojectCmd.add(""String_Node_Str"");
  }
 else {
    kwbuildprojectCmd.add(""String_Node_Str"");
  }
  if (!StringUtils.isEmpty(additionalOpts)) {
    kwbuildprojectCmd.addTokenized(envVars.expand(additionalOpts));
  }
  kwbuildprojectCmd.add(envVars.expand(KlocworkUtil.getDefaultBuildSpec(buildSpec)));
  return kwbuildprojectCmd;
}",0.8513011152416357
178661,"private void processBuildSpecLine(String line,HashSet<String> buildSpecFiles) throws IOException {
  Scanner scanner=new Scanner(line);
  scanner.useDelimiter(""String_Node_Str"");
  if (scanner.hasNext()) {
    String tag=scanner.next();
    Path workingDir;
    String sourceFile;
switch (tag) {
case ""String_Node_Str"":
      workingDir=Paths.get(scanner.next());
    scanner.next();
  scanner.next();
sourceFile=scanner.next();
buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
break;
case ""String_Node_Str"":
scanner.next();
workingDir=Paths.get(scanner.next());
sourceFile=scanner.next();
buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
break;
default :
return;
}
}
}","private void processBuildSpecLine(String line,HashSet<String> buildSpecFiles) throws IOException {
  Scanner scanner=new Scanner(line);
  scanner.useDelimiter(""String_Node_Str"");
  if (scanner.hasNext()) {
    String tag=scanner.next();
    Path workingDir;
    String sourceFile;
    try {
switch (tag) {
case ""String_Node_Str"":
        workingDir=Paths.get(scanner.next());
      scanner.next();
    scanner.next();
  sourceFile=scanner.next();
buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
break;
case ""String_Node_Str"":
scanner.next();
workingDir=Paths.get(scanner.next());
sourceFile=scanner.next();
buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
break;
default :
return;
}
}
 catch (NoSuchElementException e) {
return;
}
}
}",0.9111405835543768
178662,"public Result evaluateBuildResult(final BuildListener listener,int errorsCount,int newErrorsCount,KloConfig kloConfig,Map<String,String> matrixBuildVars){
  String failureThreshold=kloConfig.getConfigSeverityEvaluation().getFailureThreshold();
  String newFailureThreshold=kloConfig.getConfigSeverityEvaluation().getNewFailureThreshold();
  String unstableThreshold=kloConfig.getConfigSeverityEvaluation().getThreshold();
  String newUnstableThreshold=kloConfig.getConfigSeverityEvaluation().getNewThreshold();
  if (matrixBuildVars != null) {
    Iterator it=matrixBuildVars.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pairs=(Map.Entry)it.next();
      if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      it.remove();
    }
  }
  if (isErrorCountExceeded(errorsCount,failureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ failureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(newErrorsCount,newFailureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newFailureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(errorsCount,unstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ unstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  if (isErrorCountExceeded(newErrorsCount,newUnstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newUnstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  listener.getLogger().println(""String_Node_Str"");
  return Result.SUCCESS;
}","public Result evaluateBuildResult(final BuildListener listener,int errorsCount,int newErrorsCount,KloConfig kloConfig,Map<String,String> matrixBuildVars){
  String failureThreshold=kloConfig.getConfigSeverityEvaluation().getFailureThreshold();
  String newFailureThreshold=kloConfig.getConfigSeverityEvaluation().getNewFailureThreshold();
  String unstableThreshold=kloConfig.getConfigSeverityEvaluation().getThreshold();
  String newUnstableThreshold=kloConfig.getConfigSeverityEvaluation().getNewThreshold();
  if (matrixBuildVars != null) {
    Iterator it=matrixBuildVars.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pairs=(Map.Entry)it.next();
      if (failureThreshold != null && failureThreshold.length() > 0) {
        if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      if (newFailureThreshold != null && newFailureThreshold.length() > 0) {
        if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      if (unstableThreshold != null && unstableThreshold.length() > 0) {
        if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      if (newUnstableThreshold != null && newUnstableThreshold.length() > 0) {
        if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      it.remove();
    }
  }
  if (isErrorCountExceeded(errorsCount,failureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ failureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(newErrorsCount,newFailureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newFailureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(errorsCount,unstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ unstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  if (isErrorCountExceeded(newErrorsCount,newUnstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newUnstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  listener.getLogger().println(""String_Node_Str"");
  return Result.SUCCESS;
}",0.8169236852510874
178663,"public Result evaluateBuildResult(final BuildListener listener,int errorsCount,int newErrorsCount,KloConfig kloConfig,Map<String,String> matrixBuildVars){
  String failureThreshold=kloConfig.getConfigSeverityEvaluation().getFailureThreshold();
  String newFailureThreshold=kloConfig.getConfigSeverityEvaluation().getNewFailureThreshold();
  String unstableThreshold=kloConfig.getConfigSeverityEvaluation().getThreshold();
  String newUnstableThreshold=kloConfig.getConfigSeverityEvaluation().getNewThreshold();
  if (matrixBuildVars != null) {
    Iterator it=matrixBuildVars.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pairs=(Map.Entry)it.next();
      if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
        newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
      }
      if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
        newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
      }
      it.remove();
    }
  }
  if (isErrorCountExceeded(errorsCount,failureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ failureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(newErrorsCount,newFailureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newFailureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(errorsCount,unstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ unstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  if (isErrorCountExceeded(newErrorsCount,newUnstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newUnstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  listener.getLogger().println(""String_Node_Str"");
  return Result.SUCCESS;
}","public Result evaluateBuildResult(final BuildListener listener,int errorsCount,int newErrorsCount,KloConfig kloConfig,Map<String,String> matrixBuildVars){
  String failureThreshold=kloConfig.getConfigSeverityEvaluation().getFailureThreshold();
  String newFailureThreshold=kloConfig.getConfigSeverityEvaluation().getNewFailureThreshold();
  String unstableThreshold=kloConfig.getConfigSeverityEvaluation().getThreshold();
  String newUnstableThreshold=kloConfig.getConfigSeverityEvaluation().getNewThreshold();
  if (matrixBuildVars != null) {
    Iterator it=matrixBuildVars.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pairs=(Map.Entry)it.next();
      if (failureThreshold != null && failureThreshold.length() > 0) {
        if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (failureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          failureThreshold=failureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      if (newFailureThreshold != null && newFailureThreshold.length() > 0) {
        if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newFailureThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          newFailureThreshold=newFailureThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      if (unstableThreshold != null && unstableThreshold.length() > 0) {
        if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (unstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          unstableThreshold=unstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      if (newUnstableThreshold != null && newUnstableThreshold.length() > 0) {
        if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"")) {
          newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString() + ""String_Node_Str"",pairs.getValue().toString());
        }
        if (newUnstableThreshold.contains(""String_Node_Str"" + pairs.getKey().toString())) {
          newUnstableThreshold=newUnstableThreshold.replace(""String_Node_Str"" + pairs.getKey().toString(),pairs.getValue().toString());
        }
      }
      it.remove();
    }
  }
  if (isErrorCountExceeded(errorsCount,failureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ failureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(newErrorsCount,newFailureThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newFailureThreshold+ ""String_Node_Str"");
    return Result.FAILURE;
  }
  if (isErrorCountExceeded(errorsCount,unstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ unstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  if (isErrorCountExceeded(newErrorsCount,newUnstableThreshold)) {
    listener.getLogger().println(""String_Node_Str"" + KloMetricUtil.getMessageSelectedSeverties(kloConfig) + ""String_Node_Str""+ newUnstableThreshold+ ""String_Node_Str"");
    return Result.UNSTABLE;
  }
  listener.getLogger().println(""String_Node_Str"");
  return Result.SUCCESS;
}",0.8169236852510874
178664,"public void perform(Run<?,?> build,EnvVars envVars,FilePath workspace,Launcher launcher,TaskListener listener) throws AbortException {
  KlocworkLogger logger=new KlocworkLogger(""String_Node_Str"",listener.getLogger());
  if (gatewayConfig.getEnableServerGateway()) {
    logger.logMessage(""String_Node_Str"");
    for (    KlocworkGatewayServerConfig pfConfig : gatewayConfig.getGatewayServerConfigs()) {
      String request=""String_Node_Str"" + envVars.get(KlocworkConstants.KLOCWORK_PROJECT);
      if (!StringUtils.isEmpty(pfConfig.getQuery())) {
        try {
          request+=""String_Node_Str"" + URLEncoder.encode(pfConfig.getQuery(),""String_Node_Str"");
        }
 catch (        UnsupportedEncodingException ex) {
          throw new AbortException(ex.getMessage());
        }
      }
      logger.logMessage(""String_Node_Str"" + pfConfig.getConditionName());
      logger.logMessage(""String_Node_Str"" + request);
      JSONArray response;
      try {
        String[] ltokenLine=KlocworkUtil.getLtokenValues(envVars,launcher);
        KlocworkApiConnection kwService=new KlocworkApiConnection(envVars.get(KlocworkConstants.KLOCWORK_URL),ltokenLine[KlocworkConstants.LTOKEN_USER_INDEX],ltokenLine[KlocworkConstants.LTOKEN_HASH_INDEX]);
        response=kwService.sendRequest(request);
      }
 catch (      IOException ex) {
        throw new AbortException(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      }
      logger.logMessage(""String_Node_Str"" + Integer.toString(response.size()));
      logger.logMessage(""String_Node_Str"" + pfConfig.getThreshold());
      if (response.size() >= Integer.parseInt(pfConfig.getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(pfConfig.getResultValue());
      }
      for (int i=0; i < response.size(); i++) {
        JSONObject jObj=response.getJSONObject(i);
        logger.logMessage(jObj.toString());
      }
    }
  }
  if (gatewayConfig.getEnableDesktopGateway()) {
    logger.logMessage(""String_Node_Str"");
    String xmlReport=envVars.expand(KlocworkUtil.getDefaultKwcheckReportFile(gatewayConfig.getGatewayDesktopConfig().getReportFile()));
    logger.logMessage(""String_Node_Str"" + xmlReport);
    try {
      int totalIssueCount=launcher.getChannel().call(new KlocworkXMLReportParser(workspace.getRemote(),xmlReport));
      logger.logMessage(""String_Node_Str"" + Integer.toString(totalIssueCount));
      logger.logMessage(""String_Node_Str"" + gatewayConfig.getGatewayDesktopConfig().getThreshold());
      if (totalIssueCount >= Integer.parseInt(gatewayConfig.getGatewayDesktopConfig().getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(Result.FAILURE);
      }
    }
 catch (    InterruptedException|IOException ex) {
      throw new AbortException(ex.getMessage());
    }
  }
}","public void perform(Run<?,?> build,EnvVars envVars,FilePath workspace,Launcher launcher,TaskListener listener) throws AbortException {
  KlocworkLogger logger=new KlocworkLogger(""String_Node_Str"",listener.getLogger());
  if (gatewayConfig.getEnableServerGateway()) {
    logger.logMessage(""String_Node_Str"");
    for (    KlocworkGatewayServerConfig pfConfig : gatewayConfig.getGatewayServerConfigs()) {
      String request=""String_Node_Str"" + envVars.get(KlocworkConstants.KLOCWORK_PROJECT);
      if (!StringUtils.isEmpty(pfConfig.getQuery())) {
        try {
          request+=""String_Node_Str"";
          if (!pfConfig.getQuery().toLowerCase().contains(""String_Node_Str"") && !pfConfig.getQuery().toLowerCase().contains(""String_Node_Str"")) {
            request+=""String_Node_Str"";
          }
          request+=URLEncoder.encode(pfConfig.getQuery(),""String_Node_Str"");
        }
 catch (        UnsupportedEncodingException ex) {
          throw new AbortException(ex.getMessage());
        }
      }
      logger.logMessage(""String_Node_Str"" + pfConfig.getConditionName());
      logger.logMessage(""String_Node_Str"" + request);
      JSONArray response;
      try {
        String[] ltokenLine=KlocworkUtil.getLtokenValues(envVars,launcher);
        KlocworkApiConnection kwService=new KlocworkApiConnection(envVars.get(KlocworkConstants.KLOCWORK_URL),ltokenLine[KlocworkConstants.LTOKEN_USER_INDEX],ltokenLine[KlocworkConstants.LTOKEN_HASH_INDEX]);
        response=kwService.sendRequest(request);
      }
 catch (      IOException ex) {
        throw new AbortException(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      }
      logger.logMessage(""String_Node_Str"" + Integer.toString(response.size()));
      logger.logMessage(""String_Node_Str"" + pfConfig.getThreshold());
      if (response.size() >= Integer.parseInt(pfConfig.getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(pfConfig.getResultValue());
      }
      for (int i=0; i < response.size(); i++) {
        JSONObject jObj=response.getJSONObject(i);
        logger.logMessage(jObj.toString());
      }
    }
  }
  if (gatewayConfig.getEnableDesktopGateway()) {
    logger.logMessage(""String_Node_Str"");
    String xmlReport=envVars.expand(KlocworkUtil.getDefaultKwcheckReportFile(gatewayConfig.getGatewayDesktopConfig().getReportFile()));
    logger.logMessage(""String_Node_Str"" + xmlReport);
    try {
      int totalIssueCount=launcher.getChannel().call(new KlocworkXMLReportParser(workspace.getRemote(),xmlReport));
      logger.logMessage(""String_Node_Str"" + Integer.toString(totalIssueCount));
      logger.logMessage(""String_Node_Str"" + gatewayConfig.getGatewayDesktopConfig().getThreshold());
      if (totalIssueCount >= Integer.parseInt(gatewayConfig.getGatewayDesktopConfig().getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(Result.FAILURE);
      }
    }
 catch (    InterruptedException|IOException ex) {
      throw new AbortException(ex.getMessage());
    }
  }
}",0.9625085207907292
178665,"private void processBuildSpecLine(String line,HashSet<String> buildSpecFiles) throws IOException {
  Scanner scanner=new Scanner(line);
  scanner.useDelimiter(""String_Node_Str"");
  if (scanner.hasNext()) {
    String tag=scanner.next();
    if (!tag.equals(""String_Node_Str"")) {
      return;
    }
    Path workingDir=Paths.get(scanner.next());
    scanner.next();
    scanner.next();
    String sourceFile=scanner.next();
    buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
  }
}","private void processBuildSpecLine(String line,HashSet<String> buildSpecFiles) throws IOException {
  Scanner scanner=new Scanner(line);
  scanner.useDelimiter(""String_Node_Str"");
  if (scanner.hasNext()) {
    String tag=scanner.next();
    Path workingDir;
    String sourceFile;
switch (tag) {
case ""String_Node_Str"":
      workingDir=Paths.get(scanner.next());
    scanner.next();
  scanner.next();
sourceFile=scanner.next();
buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
break;
case ""String_Node_Str"":
scanner.next();
workingDir=Paths.get(scanner.next());
sourceFile=scanner.next();
buildSpecFiles.add(workingDir.resolve(sourceFile).normalize().toString());
break;
default :
return;
}
}
}",0.6899918633034988
178666,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws AbortException {
  KlocworkLogger logger=new KlocworkLogger(""String_Node_Str"",listener.getLogger());
  logger.logMessage(""String_Node_Str"");
  EnvVars envVars=new EnvVars();
  try {
    envVars=build.getEnvironment(launcher.getListener());
    KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getVersionCmd());
    if (!desktopConfig.hasExistingProject(build.getWorkspace(),envVars)) {
      KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getKwcheckCreateCmd(envVars,build.getWorkspace()));
    }
 else {
      KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getKwcheckSetCmd(envVars,build.getWorkspace()));
    }
    String diffList=""String_Node_Str"";
    if (desktopConfig.getIncrementalAnalysis()) {
      logger.logMessage(""String_Node_Str"" + ""String_Node_Str"" + desktopConfig.getDiffFileList(envVars));
      if (desktopConfig.isGitDiffType()) {
        logger.logMessage(""String_Node_Str"");
        KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getGitDiffCmd(envVars));
      }
 else {
      }
      diffList=desktopConfig.getKwcheckDiffList(envVars,build.getWorkspace(),launcher);
      if (StringUtils.isEmpty(diffList)) {
        logger.logMessage(""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
    }
    KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getKwcheckRunCmd(envVars,build.getWorkspace(),diffList));
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws AbortException {
  KlocworkLogger logger=new KlocworkLogger(""String_Node_Str"",listener.getLogger());
  logger.logMessage(""String_Node_Str"");
  EnvVars envVars=new EnvVars();
  try {
    envVars=build.getEnvironment(launcher.getListener());
    KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getVersionCmd());
    if (!desktopConfig.hasExistingProject(build.getWorkspace(),envVars)) {
      KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getKwcheckCreateCmd(envVars,build.getWorkspace()));
    }
 else {
      KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getKwcheckSetCmd(envVars,build.getWorkspace()));
    }
    String diffList=""String_Node_Str"";
    if (desktopConfig.getIncrementalAnalysis()) {
      logger.logMessage(""String_Node_Str"" + ""String_Node_Str"" + desktopConfig.getDiffFileList(envVars));
      if (desktopConfig.isGitDiffType()) {
        logger.logMessage(""String_Node_Str"");
        KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getGitDiffCmd(envVars));
      }
 else {
      }
      diffList=desktopConfig.getKwcheckDiffList(envVars,build.getWorkspace(),launcher);
      if (StringUtils.isEmpty(diffList)) {
        logger.logMessage(""String_Node_Str"" + ""String_Node_Str"");
        analysisSkipped=true;
        return true;
      }
    }
    KlocworkUtil.executeCommand(launcher,listener,build.getWorkspace(),envVars,desktopConfig.getKwcheckRunCmd(envVars,build.getWorkspace(),diffList));
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
  return true;
}",0.9916247906197656
178667,"@DataBoundConstructor public KlocworkDesktopBuilder(KlocworkDesktopConfig desktopConfig){
  this.desktopConfig=desktopConfig;
}","@DataBoundConstructor public KlocworkDesktopBuilder(KlocworkDesktopConfig desktopConfig){
  this.desktopConfig=desktopConfig;
  this.analysisSkipped=false;
}",0.8943661971830986
178668,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws AbortException {
  KlocworkLogger logger=new KlocworkLogger(""String_Node_Str"",listener.getLogger());
  EnvVars envVars=null;
  try {
    envVars=build.getEnvironment(listener);
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
  if (enableServerGateway) {
    logger.logMessage(""String_Node_Str"");
    for (    KlocworkPassFailConfig pfConfig : passFailConfigs) {
      String request=""String_Node_Str"" + envVars.get(KlocworkConstants.KLOCWORK_PROJECT);
      if (!StringUtils.isEmpty(pfConfig.getQuery())) {
        try {
          request+=""String_Node_Str"" + URLEncoder.encode(pfConfig.getQuery(),""String_Node_Str"");
        }
 catch (        UnsupportedEncodingException ex) {
          throw new AbortException(ex.getMessage());
        }
      }
      logger.logMessage(""String_Node_Str"" + pfConfig.getConditionName());
      logger.logMessage(""String_Node_Str"" + request);
      JSONArray response;
      try {
        String[] ltokenLine=KlocworkUtil.getLtokenValues(envVars,launcher);
        KlocworkApiConnection kwService=new KlocworkApiConnection(KlocworkUtil.getAndExpandEnvVar(envVars,KlocworkConstants.KLOCWORK_URL),ltokenLine[KlocworkConstants.LTOKEN_USER_INDEX],ltokenLine[KlocworkConstants.LTOKEN_HASH_INDEX]);
        response=kwService.sendRequest(request);
      }
 catch (      IOException ex) {
        throw new AbortException(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      }
      logger.logMessage(""String_Node_Str"" + Integer.toString(response.size()));
      if (response.size() >= Integer.parseInt(pfConfig.getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(pfConfig.getResultValue());
      }
      for (int i=0; i < response.size(); i++) {
        JSONObject jObj=response.getJSONObject(i);
        logger.logMessage(jObj.toString());
      }
    }
  }
  if (enableDesktopGateway) {
    logger.logMessage(""String_Node_Str"");
    KlocworkDesktopBuilder desktopBuilder=(KlocworkDesktopBuilder)KlocworkUtil.getInstanceOfBuilder(KlocworkDesktopBuilder.class,build);
    if (desktopBuilder == null) {
      throw new AbortException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    String xmlReport=desktopBuilder.getDesktopConfig().getKwcheckReportFile(envVars);
    logger.logMessage(""String_Node_Str"" + xmlReport);
    try {
      int totalIssueCount=launcher.getChannel().call(new KlocworkXMLReportParser(build.getWorkspace().getRemote(),xmlReport));
      logger.logMessage(""String_Node_Str"" + Integer.toString(totalIssueCount));
      logger.logMessage(""String_Node_Str"" + desktopGateway.getThreshold());
      if (totalIssueCount >= Integer.parseInt(desktopGateway.getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(Result.FAILURE);
      }
    }
 catch (    InterruptedException|IOException ex) {
      throw new AbortException(ex.getMessage());
    }
  }
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws AbortException {
  KlocworkLogger logger=new KlocworkLogger(""String_Node_Str"",listener.getLogger());
  EnvVars envVars=null;
  try {
    envVars=build.getEnvironment(listener);
  }
 catch (  IOException|InterruptedException ex) {
    throw new AbortException(ex.getMessage());
  }
  if (enableServerGateway) {
    logger.logMessage(""String_Node_Str"");
    for (    KlocworkPassFailConfig pfConfig : passFailConfigs) {
      String request=""String_Node_Str"" + envVars.get(KlocworkConstants.KLOCWORK_PROJECT);
      if (!StringUtils.isEmpty(pfConfig.getQuery())) {
        try {
          request+=""String_Node_Str"" + URLEncoder.encode(pfConfig.getQuery(),""String_Node_Str"");
        }
 catch (        UnsupportedEncodingException ex) {
          throw new AbortException(ex.getMessage());
        }
      }
      logger.logMessage(""String_Node_Str"" + pfConfig.getConditionName());
      logger.logMessage(""String_Node_Str"" + request);
      JSONArray response;
      try {
        String[] ltokenLine=KlocworkUtil.getLtokenValues(envVars,launcher);
        KlocworkApiConnection kwService=new KlocworkApiConnection(KlocworkUtil.getAndExpandEnvVar(envVars,KlocworkConstants.KLOCWORK_URL),ltokenLine[KlocworkConstants.LTOKEN_USER_INDEX],ltokenLine[KlocworkConstants.LTOKEN_HASH_INDEX]);
        response=kwService.sendRequest(request);
      }
 catch (      IOException ex) {
        throw new AbortException(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      }
      logger.logMessage(""String_Node_Str"" + Integer.toString(response.size()));
      if (response.size() >= Integer.parseInt(pfConfig.getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(pfConfig.getResultValue());
      }
      for (int i=0; i < response.size(); i++) {
        JSONObject jObj=response.getJSONObject(i);
        logger.logMessage(jObj.toString());
      }
    }
  }
  if (enableDesktopGateway) {
    logger.logMessage(""String_Node_Str"");
    KlocworkDesktopBuilder desktopBuilder=(KlocworkDesktopBuilder)KlocworkUtil.getInstanceOfBuilder(KlocworkDesktopBuilder.class,build);
    if (desktopBuilder == null) {
      throw new AbortException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    if (desktopBuilder.isAnalysisSkipped()) {
      return true;
    }
    String xmlReport=desktopBuilder.getDesktopConfig().getKwcheckReportFile(envVars);
    logger.logMessage(""String_Node_Str"" + xmlReport);
    try {
      int totalIssueCount=launcher.getChannel().call(new KlocworkXMLReportParser(build.getWorkspace().getRemote(),xmlReport));
      logger.logMessage(""String_Node_Str"" + Integer.toString(totalIssueCount));
      logger.logMessage(""String_Node_Str"" + desktopGateway.getThreshold());
      if (totalIssueCount >= Integer.parseInt(desktopGateway.getThreshold())) {
        logger.logMessage(""String_Node_Str"");
        build.setResult(Result.FAILURE);
      }
    }
 catch (    InterruptedException|IOException ex) {
      throw new AbortException(ex.getMessage());
    }
  }
  return true;
}",0.9886053602952976
178669,"public List<String> call() throws IOException {
  List<String> validFiles=new ArrayList<String>();
  HashSet<String> buildSpecFiles=new HashSet<String>();
  if (diffFileList != null) {
    populateFileList();
  }
  try (Scanner scanner=new Scanner(Paths.get(buildSpec))){
    while (scanner.hasNextLine()) {
      processBuildSpecLine(scanner.nextLine(),buildSpecFiles);
    }
  }
   for (  String file : fileList) {
    if (buildSpecFiles.contains(file)) {
      validFiles.add(file);
    }
  }
  return validFiles;
}","public List<String> call() throws IOException {
  List<String> validFiles=new ArrayList<String>();
  HashSet<String> buildSpecFiles=new HashSet<String>();
  populateFileList();
  try (Scanner scanner=new Scanner(Paths.get(buildSpec))){
    while (scanner.hasNextLine()) {
      processBuildSpecLine(scanner.nextLine(),buildSpecFiles);
    }
  }
   for (  String file : fileList) {
    if (buildSpecFiles.contains(file)) {
      validFiles.add(file);
    }
  }
  return validFiles;
}",0.926
178670,"private void populateFileList() throws IOException {
  Path diffFileListPath=Paths.get(diffFileList);
  if (!diffFileListPath.isAbsolute()) {
    diffFileListPath=Paths.get(workspace,diffFileList);
  }
  try (Scanner scanner=new Scanner(diffFileListPath)){
    while (scanner.hasNextLine()) {
      fileList.add(diffFileListPath.resolveSibling(scanner.nextLine()).normalize().toString());
    }
  }
 }","private void populateFileList() throws IOException {
  Path diffFileListPath=Paths.get(diffFileList);
  if (!diffFileListPath.isAbsolute()) {
    diffFileListPath=Paths.get(workspace,diffFileList);
  }
  if (Files.exists(diffFileListPath)) {
    try (Scanner scanner=new Scanner(diffFileListPath)){
      while (scanner.hasNextLine()) {
        fileList.add(diffFileListPath.resolveSibling(scanner.nextLine()).normalize().toString());
      }
    }
   }
 else {
    throw new IOException(""String_Node_Str"" + diffFileList + ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.8285123966942148
178671,"public KlocworkBuildSpecParser(String workspace,List<String> fileList,String buildSpec){
  this.workspace=workspace;
  this.fileList=fileList;
  this.buildSpec=buildSpec;
  this.diffFileList=null;
}","public KlocworkBuildSpecParser(String workspace,String diffFileList,String buildSpec) throws IOException {
  this.workspace=workspace;
  this.fileList=new ArrayList<String>();
  this.buildSpec=buildSpec;
  this.diffFileList=diffFileList;
}",0.5217391304347826
178672,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  int rKwInspectreport=0;
  String FS;
  if (!launcher.isUnix()) {
    FS=""String_Node_Str"";
  }
 else {
    FS=""String_Node_Str"";
  }
  if (kloConfig.getWebAPI().getUseWebAPI()) {
    String queryEncrypted=kloConfig.getWebAPI().getwebAPIQuery();
    rKwInspectreport=KloXMLGenerator.GenerateXMLFromIssues(kloConfig.getHost(),kloConfig.getPort(),kloConfig.getUseSSL(),kloConfig.getProject(),build.getWorkspace().getRemote() + FS + ""String_Node_Str"",listener,queryEncrypted.replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (this.canContinue(build.getResult())) {
    listener.getLogger().println(""String_Node_Str"");
    KloResult result=null;
    KloReport kloReport=null;
    KloSourceContainer kloSourceContainer=null;
    KloParserResult parser=new KloParserResult(listener,kloConfig.getKlocworkReportPattern());
    try {
      kloReport=build.getWorkspace().act(parser);
    }
 catch (    Exception e) {
      listener.getLogger().println(""String_Node_Str"" + e);
      build.setResult(Result.FAILURE);
      return false;
    }
    if (kloReport == null) {
      build.setResult(Result.FAILURE);
      return false;
    }
    kloSourceContainer=new KloSourceContainer(listener,build.getWorkspace(),kloReport.getAllSeverities());
    result=new KloResult(kloReport,kloSourceContainer,build);
    Result buildResult=new KloBuildResultEvaluator().evaluateBuildResult(listener,result.getNumberErrorsAccordingConfiguration(kloConfig,false),result.getNumberErrorsAccordingConfiguration(kloConfig,true),kloConfig);
    if (buildResult != Result.SUCCESS) {
      build.setResult(buildResult);
    }
    build.addAction(new KloBuildGraph(build,kloConfig,result.getReport()));
    build.addAction(new KloBuildAction(build,result,kloConfig));
    if (kloConfig.getLinkReview()) {
      String host=null, port=null, project=null;
      if (kloReport.getNumberTotal() != 0) {
        if (kloReport.getAllSeverities().get(0) != null) {
          String url=kloReport.getAllSeverities().get(0).get(""String_Node_Str"");
          if (url != null) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(url);
            if (m.matches()) {
              host=m.group(1);
              port=m.group(2);
              project=m.group(3);
            }
          }
        }
      }
      build.addAction(new KloBuildReviewLink(build,host,port,project));
    }
    if (kloConfig.getLinkBuildLog()) {
      build.addAction(new KloBuildLog(build));
    }
    if (kloConfig.getLinkParseLog()) {
      build.addAction(new KloParseErrorsLog(build));
    }
    if (build.getWorkspace().isRemote()) {
      copyFilesFromSlaveToMaster(build.getRootDir(),launcher.getChannel(),kloSourceContainer.getInternalMap().values());
    }
    listener.getLogger().println(""String_Node_Str"");
  }
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  int rKwInspectreport=0;
  String FS;
  if (!launcher.isUnix()) {
    FS=""String_Node_Str"";
  }
 else {
    FS=""String_Node_Str"";
  }
  if (kloConfig.getWebAPI().getUseWebAPI()) {
    String queryEncrypted=kloConfig.getWebAPI().getwebAPIQuery();
    rKwInspectreport=KloXMLGenerator.GenerateXMLFromIssues(kloConfig.getHost(),kloConfig.getPort(),kloConfig.getUseSSL(),UserAxisConverter.AxeConverter(build,kloConfig.getProject()),build.getWorkspace().getRemote() + FS + ""String_Node_Str"",listener,queryEncrypted.replace(""String_Node_Str"",""String_Node_Str""));
  }
  if (this.canContinue(build.getResult())) {
    listener.getLogger().println(""String_Node_Str"");
    KloResult result=null;
    KloReport kloReport=null;
    KloSourceContainer kloSourceContainer=null;
    KloParserResult parser=new KloParserResult(listener,kloConfig.getKlocworkReportPattern());
    try {
      kloReport=build.getWorkspace().act(parser);
    }
 catch (    Exception e) {
      listener.getLogger().println(""String_Node_Str"" + e);
      build.setResult(Result.FAILURE);
      return false;
    }
    if (kloReport == null) {
      build.setResult(Result.FAILURE);
      return false;
    }
    kloSourceContainer=new KloSourceContainer(listener,build.getWorkspace(),kloReport.getAllSeverities());
    result=new KloResult(kloReport,kloSourceContainer,build);
    Result buildResult=new KloBuildResultEvaluator().evaluateBuildResult(listener,result.getNumberErrorsAccordingConfiguration(kloConfig,false),result.getNumberErrorsAccordingConfiguration(kloConfig,true),kloConfig);
    if (buildResult != Result.SUCCESS) {
      build.setResult(buildResult);
    }
    build.addAction(new KloBuildGraph(build,kloConfig,result.getReport()));
    build.addAction(new KloBuildAction(build,result,kloConfig));
    if (kloConfig.getLinkReview()) {
      String host=null, port=null, project=null;
      if (kloReport.getNumberTotal() != 0) {
        if (kloReport.getAllSeverities().get(0) != null) {
          String url=kloReport.getAllSeverities().get(0).get(""String_Node_Str"");
          if (url != null) {
            Pattern p=Pattern.compile(""String_Node_Str"");
            Matcher m=p.matcher(url);
            if (m.matches()) {
              host=m.group(1);
              port=m.group(2);
              project=m.group(3);
            }
          }
        }
      }
      build.addAction(new KloBuildReviewLink(build,host,port,project));
    }
    if (kloConfig.getLinkBuildLog()) {
      build.addAction(new KloBuildLog(build));
    }
    if (kloConfig.getLinkParseLog()) {
      build.addAction(new KloParseErrorsLog(build));
    }
    if (build.getWorkspace().isRemote()) {
      copyFilesFromSlaveToMaster(build.getRootDir(),launcher.getChannel(),kloSourceContainer.getInternalMap().values());
    }
    listener.getLogger().println(""String_Node_Str"");
  }
  return true;
}",0.99262487428763
178673,"public boolean satisfied(Assignment asign){
  HashSet<Integer> values=new HashSet<Integer>(9);
  for (  SudokuTile v : variables) {
    Integer val=(Integer)asign.getValue(v);
    if (val != null && values.contains(val))     return false;
    values.add(val);
  }
  return true;
}","public boolean satisfied(Assignment asign){
  HashSet<Integer> values=new HashSet<Integer>(9);
  for (  SudokuTile v : variables) {
    Integer val=(Integer)asign.getValue(v);
    if (val == null || values.contains(val)) {
      return false;
    }
    values.add(val);
  }
  return true;
}",0.887719298245614
178674,"/** 
 * Returns a list of constraints associated with the problem.
 */
public List<Constraint> constraints(){
  if (constraints.size() == 0) {
    for (int row=0; row < 9; row++) {
      AllDiff constr=new AllDiff();
      for (int col=0; col < 9; col++) {
        constr.variables.add(tiles.get(row * 9 + col));
      }
      constraints.add(constr);
    }
    for (int col=0; col < 9; col++) {
      AllDiff constr=new AllDiff();
      for (int row=0; row < 9; row++) {
        constr.variables.add(tiles.get(row * 9 + col));
      }
      constraints.add(constr);
    }
    for (int gridRow=0; gridRow < 3; gridRow++) {
      for (int gridCol=0; gridCol < 3; gridCol++) {
        AllDiff constr=new AllDiff();
        for (int row=0; row < 3; row++) {
          for (int col=0; col < 3; col++) {
            int piece=(gridRow * 3 + row) * 8 + gridCol + col;
            constr.variables.add(tiles.get(piece));
          }
        }
        constraints.add(constr);
      }
    }
  }
  return new LinkedList<Constraint>(constraints);
}","/** 
 * Returns a list of constraints associated with the problem.
 */
public List<Constraint> constraints(){
  if (constraints.size() == 0) {
    for (int row=0; row < 9; row++) {
      AllDiff constr=new AllDiff();
      for (int col=0; col < 9; col++) {
        constr.variables.add(tiles.get(row * 9 + col));
      }
      constraints.add(constr);
    }
    for (int col=0; col < 9; col++) {
      AllDiff constr=new AllDiff();
      for (int row=0; row < 9; row++) {
        constr.variables.add(tiles.get(row * 9 + col));
      }
      constraints.add(constr);
    }
    for (int gridRow=0; gridRow < 3; gridRow++) {
      for (int gridCol=0; gridCol < 3; gridCol++) {
        AllDiff constr=new AllDiff();
        for (int row=0; row < 3; row++) {
          for (int col=0; col < 3; col++) {
            int piece=(gridRow * 3 + row) * 9 + gridCol * 3 + col;
            constr.variables.add(tiles.get(piece));
          }
        }
        constraints.add(constr);
      }
    }
  }
  return new LinkedList<Constraint>(constraints);
}",0.9971153846153846
178675,"@Override public void onSelectedNavTree(final LHSHighlightEvent event){
  if (category.equals(event.getCategory()) || event.getCategory().equals(""String_Node_Str"")) {
    applyStateChange(new StateChange(){
      @Override public void applyTo(      LHSNavTreeItem treeItem){
        String token=treeItem.getElement().hasAttribute(""String_Node_Str"") ? treeItem.getElement().getAttribute(""String_Node_Str"") : ""String_Node_Str"";
        boolean isSelected=event.getItem().equals(treeItem.getText()) || token.equals(event.getToken());
        if (isSelected) {
          treeItem.setActive(true);
          if (prevNavItem != null)           prevNavItem.setActive(false);
          prevNavItem=treeItem;
          openParents(treeItem);
        }
      }
    }
);
  }
}","@Override public void onSelectedNavTree(final LHSHighlightEvent event){
  if (category.equals(event.getCategory()) || event.getCategory().equals(""String_Node_Str"")) {
    applyStateChange(new StateChange(){
      @Override public void applyTo(      LHSNavTreeItem treeItem){
        String token=treeItem.getElement().hasAttribute(""String_Node_Str"") ? treeItem.getElement().getAttribute(""String_Node_Str"") : ""String_Node_Str"";
        boolean isSelected=event.getItem().equals(treeItem.getText()) || token.equals(event.getToken());
        if (isSelected) {
          if (prevNavItem != null && !prevNavItem.equals(treeItem))           prevNavItem.setActive(false);
          treeItem.setActive(true);
          prevNavItem=treeItem;
          openParents(treeItem);
        }
      }
    }
);
  }
}",0.911182108626198
178676,"public void setValueMap(Collection<String> values){
  comboBox.clear();
  for (  String s : values) {
    comboBox.addItem(s);
  }
  if (defaultToFirst)   selectItem(0);
}","public void setValueMap(Collection<String> values){
  comboBox.clear();
  if (values.isEmpty() || !values.iterator().next().isEmpty())   comboBox.addItem(""String_Node_Str"");
  for (  String s : values) {
    comboBox.addItem(s);
  }
  if (defaultToFirst)   selectItem(0);
}",0.7387387387387387
178677,"@Override public void clearValue(){
  if (defaultToFirst)   selectItem(0);
 else   comboBox.clearSelection();
}","@Override public void clearValue(){
  if (defaultToFirst && comboBox.getItemCount() > 0)   selectItem(0);
 else   comboBox.clearSelection();
}",0.8774703557312253
178678,"public void setItemSelected(int i,boolean isSelected){
  String selectedValue=values.get(i);
  if (isSelected && !values.isEmpty()) {
    currentValue.setText(selectedValue);
    onSelection(selectedValue);
  }
 else   if (!isSelected) {
    currentValue.setText(""String_Node_Str"");
    onSelection(""String_Node_Str"");
  }
  cellList.getSelectionModel().setSelected(selectedValue,isSelected);
}","public void setItemSelected(int i,boolean isSelected){
  String selection=""String_Node_Str"";
  if (isSelected && !values.isEmpty()) {
    selection=values.get(i);
    currentValue.setText(selection);
    onSelection(selection);
  }
 else   if (!isSelected) {
    currentValue.setText(selection);
    onSelection(selection);
  }
  cellList.getSelectionModel().setSelected(selection,isSelected);
}",0.4081115335868187
178679,"@Override public void clearValue(){
  if (defaultToFirst)   selectItem(0);
 else   comboBox.clearSelection();
}","@Override public void clearValue(){
  if (defaultToFirst && comboBox.getItemCount() > 0)   selectItem(0);
 else   comboBox.clearSelection();
}",0.8774703557312253
178680,"public SystemCommand withStderrConsumerUnless(LineConsumer consumer,boolean flag){
  return !flag ? withStderrConsumer(consumer) : setStderrCommandOutputHandler(nullOutputHandler);
}","public SystemCommand withStderrConsumerUnless(LineConsumer consumer,boolean flag){
  return !flag ? withStderrConsumer(consumer) : setStderrCommandOutputHandler(closingOutputHandler);
}",0.9754768392370572
178681,"public SystemCommand withStdoutConsumerUnless(LineConsumer consumer,boolean flag){
  return !flag ? withStdoutConsumer(consumer) : setStdoutCommandOutputHandler(nullOutputHandler);
}","public SystemCommand withStdoutConsumerUnless(LineConsumer consumer,boolean flag){
  return !flag ? withStdoutConsumer(consumer) : setStdoutCommandOutputHandler(closingOutputHandler);
}",0.9754768392370572
178682,"public void execute() throws IOException {
  if (packageRoot == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (debFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  new SystemCommand().setCommand(useFakeroot ? ""String_Node_Str"" : dpkgDebPath).dumpCommandIf(debug).withNoStderrConsumerUnless(debug).withNoStdoutConsumerUnless(debug).addArgumentIf(useFakeroot,dpkgDebPath).addArgument(""String_Node_Str"").addArgument(packageRoot.getAbsolutePath()).addArgument(debFile.getAbsolutePath()).execute().assertSuccess();
}","public void execute() throws IOException {
  if (packageRoot == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (debFile == null) {
    throw new IOException(""String_Node_Str"");
  }
  new SystemCommand().setCommand(useFakeroot ? ""String_Node_Str"" : dpkgDebPath).dumpCommandIf(debug).withIgnoringStderrUnless(debug).withIgnoringStdoutUnless(debug).addArgumentIf(useFakeroot,dpkgDebPath).addArgument(""String_Node_Str"").addArgument(packageRoot.getAbsolutePath()).addArgument(debFile.getAbsolutePath()).execute().assertSuccess();
}",0.6507352941176471
178683,"public void execute() throws IOException {
  SystemCommand command=new SystemCommand().withNoStderrConsumerUnless(generalOptions.debug).withNoStdoutConsumerUnless(generalOptions.debug).setBasedir(generalOptions.basedir).setCommand(""String_Node_Str"").addArgument(""String_Node_Str"" + operation);
  setGeneralOptions(command,generalOptions);
  setSelectOptions(command,selectOptions);
  setQueryOptions(command,queryOptions);
  command.execute().assertSuccess();
}","public void execute() throws IOException {
  SystemCommand command=new SystemCommand().withClosedStderrUnless(generalOptions.debug).withClosedStdoutUnless(generalOptions.debug).setBasedir(generalOptions.basedir).setCommand(""String_Node_Str"").addArgument(""String_Node_Str"" + operation);
  setGeneralOptions(command,generalOptions);
  setSelectOptions(command,selectOptions);
  setQueryOptions(command,queryOptions);
  command.execute().assertSuccess();
}",0.9452954048140044
178684,"private int execute(String mode) throws IOException {
  SystemCommand command=new SystemCommand().setCommand(""String_Node_Str"").setBasedir(basedir).withNoStderrConsumerUnless(debug).withNoStdoutConsumerUnless(debug);
  if (StringUtils.isNotEmpty(arch)) {
    command.addArgument(""String_Node_Str"").addArgument(arch);
  }
  if (StringUtils.isNotEmpty(category)) {
    command.addArgument(""String_Node_Str"").addArgument(category);
  }
  if (device != null) {
    command.addArgument(""String_Node_Str"").addArgument(device.getAbsolutePath());
  }
  if (fullyInstalledOnly) {
    command.addArgument(""String_Node_Str"");
  }
  if (longFormat) {
    command.addArgument(""String_Node_Str"");
  }
  if (partiallyInstalledOnly) {
    command.addArgument(""String_Node_Str"");
  }
  if (listRelocationBaseForRelocatablePackages) {
    command.addArgument(""String_Node_Str"");
  }
  if (rootPath != null) {
    command.addArgument(""String_Node_Str"").addArgument(rootPath.getAbsolutePath());
  }
  if (StringUtils.isNotEmpty(version)) {
    command.addArgument(""String_Node_Str"").addArgument(version);
  }
  command.addArgument(mode);
  return command.execute().exitValue;
}","private int execute(String mode) throws IOException {
  SystemCommand command=new SystemCommand().setCommand(""String_Node_Str"").setBasedir(basedir).withClosedStderrUnless(debug).withClosedStdoutUnless(debug);
  if (StringUtils.isNotEmpty(arch)) {
    command.addArgument(""String_Node_Str"").addArgument(arch);
  }
  if (StringUtils.isNotEmpty(category)) {
    command.addArgument(""String_Node_Str"").addArgument(category);
  }
  if (device != null) {
    command.addArgument(""String_Node_Str"").addArgument(device.getAbsolutePath());
  }
  if (fullyInstalledOnly) {
    command.addArgument(""String_Node_Str"");
  }
  if (longFormat) {
    command.addArgument(""String_Node_Str"");
  }
  if (partiallyInstalledOnly) {
    command.addArgument(""String_Node_Str"");
  }
  if (listRelocationBaseForRelocatablePackages) {
    command.addArgument(""String_Node_Str"");
  }
  if (rootPath != null) {
    command.addArgument(""String_Node_Str"").addArgument(rootPath.getAbsolutePath());
  }
  if (StringUtils.isNotEmpty(version)) {
    command.addArgument(""String_Node_Str"").addArgument(version);
  }
  command.addArgument(mode);
  return command.execute().exitValue;
}",0.9783174327840416
178685,"protected ExportPage(String pageName){
  super(pageName);
  this.setTitle(""String_Node_Str"");
  this.setDescription(""String_Node_Str"");
}","protected ExportPage(String pageName){
  super(pageName);
  this.setTitle(""String_Node_Str"");
  this.setDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}",0.8726114649681529
178686,"private void readCsvFile(String filename){
  if (filename == null) {
    return;
  }
  try {
    FileReader freader=new FileReader(filename);
    CSVReader reader=new CSVReader(freader);
    String[] nextLine;
    nextLine=reader.readNext();
    if (nextLine == null) {
      return;
    }
    String[] names=new String[nextLine.length - 1];
    for (int i=1; i < nextLine.length; i++) {
      names[i - 1]=nextLine[i].trim();
    }
    LinkedList<Number> timesList=new LinkedList<Number>();
    LinkedList<double[]> resultsList=new LinkedList<double[]>();
    while ((nextLine=reader.readNext()) != null) {
      timesList.add(Double.parseDouble(nextLine[0].trim()));
      double[] resultLine=new double[names.length];
      for (int column=1; column < names.length; column++) {
        if (column > nextLine.length) {
          resultLine[column]=0;
        }
 else {
          double value=Double.parseDouble(nextLine[column].trim());
          resultLine[column]=value;
        }
      }
      resultsList.addLast(resultLine);
    }
    double[] times=new double[timesList.size()];
    for (int index=0; index < times.length; index++) {
      times[index]=timesList.get(index).doubleValue();
    }
    double[][] results=new double[names.length][];
    for (int i=0; i < names.length; i++) {
      results[i]=new double[times.length];
    }
    for (int timeIndex=0; timeIndex < times.length; timeIndex++) {
      double[] resultLine=resultsList.get(timeIndex);
      for (int index=0; index < results.length; index++) {
        results[index][timeIndex]=resultLine[index];
      }
    }
    Parameters params=new Parameters();
    HashMap<String,Number> modelParams=new HashMap<String,Number>();
    BasicResult thisResult=new BasicResult(params,modelParams);
    thisResult.setComponentNames(names);
    thisResult.setResults(results);
    thisResult.setTimePoints(times);
    this.setErrorMessage(null);
    plottableResult=thisResult;
  }
 catch (  FileNotFoundException e) {
    this.csvParseError(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    this.csvParseError(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  Exception e) {
    this.csvParseError(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","private void readCsvFile(String filename){
  if (filename == null) {
    return;
  }
  try {
    FileReader freader=new FileReader(filename);
    CSVReader reader=new CSVReader(freader);
    String[] nextLine;
    nextLine=reader.readNext();
    if (nextLine == null) {
      return;
    }
    String[] names=new String[nextLine.length - 1];
    for (int i=1; i < nextLine.length; i++) {
      names[i - 1]=nextLine[i].trim();
    }
    LinkedList<Number> timesList=new LinkedList<Number>();
    LinkedList<double[]> resultsList=new LinkedList<double[]>();
    while ((nextLine=reader.readNext()) != null) {
      timesList.add(Double.parseDouble(nextLine[0].trim()));
      double[] resultLine=new double[names.length];
      for (int column=0; column < names.length; column++) {
        if (column > nextLine.length) {
          resultLine[column]=0;
        }
 else {
          double value=Double.parseDouble(nextLine[column + 1].trim());
          resultLine[column]=value;
        }
      }
      resultsList.addLast(resultLine);
    }
    double[] times=new double[timesList.size()];
    for (int index=0; index < times.length; index++) {
      times[index]=timesList.get(index).doubleValue();
    }
    double[][] results=new double[names.length][];
    for (int i=0; i < names.length; i++) {
      results[i]=new double[times.length];
    }
    for (int timeIndex=0; timeIndex < times.length; timeIndex++) {
      double[] resultLine=resultsList.get(timeIndex);
      for (int index=0; index < results.length; index++) {
        results[index][timeIndex]=resultLine[index];
      }
    }
    Parameters params=new Parameters();
    HashMap<String,Number> modelParams=new HashMap<String,Number>();
    BasicResult thisResult=new BasicResult(params,modelParams);
    thisResult.setComponentNames(names);
    thisResult.setResults(results);
    thisResult.setTimePoints(times);
    this.setErrorMessage(null);
    plottableResult=thisResult;
  }
 catch (  FileNotFoundException e) {
    this.csvParseError(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    this.csvParseError(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  Exception e) {
    this.csvParseError(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}",0.9986888111888113
178687,"private static Parameters createSimulationParameters(Solver solver,String[] args,SBAModel sbaModel) throws WrongArgumentsException {
  Parameters requiredParams=solver.getRequiredParameters();
  Parameters parameters=new Parameters();
  for (  Parameter param : requiredParams.arrayOfKeys()) {
    parameters.setValue(param,param.getDefault());
  }
  String[] componentsToView=sbaModel.getComponentNames();
  parameters.setValue(Parameter.Components,componentsToView);
  int runs=getIndepentRuns(args,1);
  parameters.setValue(Parameter.Independent_Replications,new Integer(runs));
  double startTime=getStartTime(args);
  parameters.setValue(Parameter.Start_Time,new Double(startTime));
  double stopTime=getStopTime(args);
  parameters.setValue(Parameter.Stop_Time,new Double(stopTime));
  double timeStep=getTimeStep(args);
  parameters.setValue(Parameter.Step_Size,new Double(timeStep));
  int dataPoints=getNumberDataPoints(args);
  parameters.setValue(Parameter.Data_Points,dataPoints);
  double relativeError=getRelativeError(args);
  parameters.setValue(Parameter.Relative_Error,relativeError);
  double absoluteError=getAbsoluteError(args);
  parameters.setValue(Parameter.Absolute_Error,absoluteError);
  return parameters;
}","private static Parameters createSimulationParameters(Solver solver,String[] args,SBAModel sbaModel) throws WrongArgumentsException {
  Parameters requiredParams=solver.getRequiredParameters();
  Parameters parameters=new Parameters();
  for (  Parameter param : requiredParams.arrayOfKeys()) {
    parameters.setValue(param,param.getDefault());
  }
  String[] componentsToView=sbaModel.getComponentNames();
  String[] variablesToView=sbaModel.getDynamicVariableNames();
  String[] allToView=new String[componentsToView.length + variablesToView.length];
  for (int i=0; i < componentsToView.length; i++) {
    allToView[i]=componentsToView[i];
  }
  for (int i=0; i < variablesToView.length; i++) {
    allToView[i + componentsToView.length]=variablesToView[i];
  }
  parameters.setValue(Parameter.Components,allToView);
  int runs=getIndepentRuns(args,1);
  parameters.setValue(Parameter.Independent_Replications,new Integer(runs));
  double startTime=getStartTime(args);
  parameters.setValue(Parameter.Start_Time,new Double(startTime));
  double stopTime=getStopTime(args);
  parameters.setValue(Parameter.Stop_Time,new Double(stopTime));
  double timeStep=getTimeStep(args);
  parameters.setValue(Parameter.Step_Size,new Double(timeStep));
  int dataPoints=getNumberDataPoints(args);
  parameters.setValue(Parameter.Data_Points,dataPoints);
  double relativeError=getRelativeError(args);
  parameters.setValue(Parameter.Relative_Error,relativeError);
  double absoluteError=getAbsoluteError(args);
  parameters.setValue(Parameter.Absolute_Error,absoluteError);
  return parameters;
}",0.8684863523573201
178688,"/** 
 * Get the CSV column names of a class.
 * @param clazz the class managed by CsvEngine.
 * @return list of column names of the class ordered if the class use {@link fr.ybonnel.csvengine.annotation.CsvColumn#order()}.
 */
public List<String> getColumnNames(Class clazz){
  final CsvClass csvClass=mapClasses.get(clazz);
  if (csvClass == null) {
    throw new CsvEngineException(""String_Node_Str"" + clazz.getSimpleName() + ""String_Node_Str"");
  }
  List<String> columnsNames=new ArrayList<String>();
  for (  String columnName : csvClass.getColumnNames()) {
    columnsNames.add(columnName);
  }
  Collections.sort(columnsNames,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      int thisVal=csvClass.getOrder(o1);
      int anotherVal=csvClass.getOrder(o2);
      return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));
    }
  }
);
  return columnsNames;
}","/** 
 * Get the CSV column names of a class.
 * @param clazz the class managed by CsvEngine.
 * @return list of column names of the class orderedif the class use  {@link fr.ybonnel.csvengine.annotation.CsvColumn#order()}.
 */
public List<String> getColumnNames(Class clazz){
  final CsvClass csvClass=mapClasses.get(clazz);
  if (csvClass == null) {
    throw new CsvEngineException(""String_Node_Str"" + clazz.getSimpleName() + ""String_Node_Str"");
  }
  List<String> columnsNames=new ArrayList<String>();
  for (  String columnName : csvClass.getColumnNames()) {
    columnsNames.add(columnName);
  }
  Collections.sort(columnsNames,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      int thisVal=csvClass.getOrder(o1);
      int anotherVal=csvClass.getOrder(o2);
      return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));
    }
  }
);
  return columnsNames;
}",0.9988998899889988
178689,"/** 
 * Create the Properties file for Felix to launch.
 * @param defaultDirectory
 * @param logger
 * @param activators
 * @return
 * @throws FileNotFoundException
 * @throws IOException
 */
private static Properties createFelixProperties(File defaultDirectory,KnapsackLogger logger,List<BundleActivator> activators) throws FileNotFoundException, IOException {
  Properties felixConfig=new Properties();
  felixConfig.load(getFelixConfigFileInputStream(defaultDirectory));
  felixConfig.put(FELIX_LOGGER_INSTANCE,logger);
  felixConfig.put(FELIX_BUNDLE_INSTANCES,activators);
  return felixConfig;
}","/** 
 * Create the Properties file for Felix to launch.
 * @param defaultDirectory
 * @param logger
 * @param activators
 * @return
 * @throws FileNotFoundException
 * @throws IOException
 */
private static Properties createFelixProperties(File defaultDirectory,KnapsackLogger logger,List<BundleActivator> activators) throws FileNotFoundException, IOException {
  Properties felixConfig=new Properties();
  felixConfig.load(getFelixConfigFileInputStream(defaultDirectory));
  for (  Entry e : felixConfig.entrySet())   felixConfig.put(e.getKey(),LoadPropertiesFunction.evalSubsitutions(e.getValue().toString()));
  felixConfig.put(FELIX_LOGGER_INSTANCE,logger);
  felixConfig.put(FELIX_BUNDLE_INSTANCES,activators);
  return felixConfig;
}",0.8961911874533234
178690,"/** 
 * A recursive function to replace variables with values from System.properties. Variable is defined in ${var} style with 'var' being a system property.
 * @param ins
 * @return
 * @throws IOException
 */
private String evalSubsitutions(final String ins) throws IOException {
  int si=ins.indexOf(""String_Node_Str"");
  if (si > -1) {
    int ti=ins.indexOf('}',si + 2);
    if (ti == -1)     throw new IOException(""String_Node_Str"" + ins);
    String varName=ins.substring(si + 2,ti);
    String varVal=System.getProperty(varName);
    String varLiteral=""String_Node_Str"" + varName + ""String_Node_Str"";
    String subLine=ins.replaceAll(varLiteral,varVal);
    return evalSubsitutions(subLine);
  }
  return ins;
}","/** 
 * A recursive function to replace variables with values from System.properties. Variable is defined in ${var} style with 'var' being a system property.
 * @param ins
 * @return
 * @throws IOException
 */
public static String evalSubsitutions(final String ins) throws IOException {
  int si=ins.indexOf(""String_Node_Str"");
  if (si > -1) {
    int ti=ins.indexOf('}',si + 2);
    if (ti == -1)     throw new IOException(""String_Node_Str"" + ins);
    String varName=ins.substring(si + 2,ti);
    String varVal=System.getProperty(varName);
    String varLiteral=""String_Node_Str"" + varName + ""String_Node_Str"";
    String subLine=ins.replaceAll(varLiteral,varVal);
    return evalSubsitutions(subLine);
  }
  return ins;
}",0.9875346260387812
178691,"/** 
 * Initialize state
 * @throws IOException
 * @throws InterruptedException 
 */
protected Config(File baseDirectory) throws IOException {
  this.baseDirectory=baseDirectory;
  load(new FileInputStream(getConfigFile()));
  if (!this.containsKey(CONFIG_KEY_ROOT_DIR))   this.put(CONFIG_KEY_ROOT_DIR,baseDirectory);
  if (!this.containsKey(CONFIG_KEY_BUNDLE_DIRS))   this.put(CONFIG_KEY_BUNDLE_DIRS,DEFAULT_BUNDLE_DIRECTORY);
}","/** 
 * Initialize state
 * @throws IOException
 * @throws InterruptedException 
 */
protected Config(File baseDirectory) throws IOException {
  for (  Object key : System.getProperties().keySet())   this.put(key,System.getProperty(key.toString()));
  this.baseDirectory=baseDirectory;
  load(new FileInputStream(getConfigFile()));
  if (!this.containsKey(CONFIG_KEY_ROOT_DIR))   this.put(CONFIG_KEY_ROOT_DIR,baseDirectory);
  if (!this.containsKey(CONFIG_KEY_BUNDLE_DIRS))   this.put(CONFIG_KEY_BUNDLE_DIRS,DEFAULT_BUNDLE_DIRECTORY);
}",0.8891191709844559
178692,"@Override public File apply(String element){
  File f=new File(baseDir,element);
  if (!f.exists() || !f.isDirectory())   return null;
  return f;
}","@Override public File apply(String element){
  return new File(baseDir,element.trim());
}",0.6497890295358649
178693,"@Override public Collection<File> getBundleDirectories(){
  if (bundleDirs == null)   bundleDirs=Fn.map(new Fn.Function<String,File>(){
    @Override public File apply(    String element){
      File f=new File(baseDir,element);
      if (!f.exists() || !f.isDirectory())       return null;
      return f;
    }
  }
,config.getString(Config.CONFIG_KEY_BUNDLE_DIRS).split(""String_Node_Str""));
  return bundleDirs;
}","@Override public Collection<File> getBundleDirectories(){
  if (bundleDirs == null)   bundleDirs=Fn.map(new Fn.Function<String,File>(){
    @Override public File apply(    String element){
      return new File(baseDir,element.trim());
    }
  }
,config.getString(Config.CONFIG_KEY_BUNDLE_DIRS).split(""String_Node_Str""));
  return bundleDirs;
}",0.8669301712779973
178694,"@Override public void frameworkEvent(FrameworkEvent event){
  if (event.getType() == FrameworkEvent.STARTED) {
    if (config.getBoolean(Config.CONFIG_KEY_LOG_STDOUT))     new LogPrinter(context);
    sizeMap=new HashMap<File,Long>();
    File baseDir=new File(config.getString(Config.CONFIG_KEY_ROOT_DIR));
    try {
      FSHelper.validateFile(baseDir,false,true,false,true);
      if (port != Bootstrap.DISABLE_SCRIPTS_PORT) {
        shell=new ConsoleSocketListener(port,context,this,new CommandParser(context,new File(baseDir,Config.SCRIPT_DIRECTORY_NAME)));
        shell.start();
      }
      (new InitThread(baseDir,Arrays.asList(config.getString(Config.CONFIG_KEY_BUNDLE_DIRS).split(""String_Node_Str"")))).start();
      log(LogService.LOG_INFO,""String_Node_Str"" + KNAPSACK_VERSION + ""String_Node_Str""+ config.get(Config.CONFIG_KEY_ROOT_DIR));
    }
 catch (    Exception e) {
      log(LogService.LOG_ERROR,""String_Node_Str"",e);
    }
  }
}","@Override public void frameworkEvent(FrameworkEvent event){
  if (event.getType() == FrameworkEvent.STARTED) {
    if (config.getBoolean(Config.CONFIG_KEY_LOG_STDOUT))     new LogPrinter(context);
    sizeMap=new HashMap<File,Long>();
    File baseDir=new File(config.getString(Config.CONFIG_KEY_ROOT_DIR));
    try {
      FSHelper.validateFile(baseDir,false,true,false,true);
      if (port != Bootstrap.DISABLE_SCRIPTS_PORT) {
        shell=new ConsoleSocketListener(port,context,this,new CommandParser(context,new File(baseDir,Config.SCRIPT_DIRECTORY_NAME)));
        shell.start();
      }
 else {
        log(LogService.LOG_INFO,""String_Node_Str"");
      }
      (new InitThread(baseDir,Arrays.asList(config.getString(Config.CONFIG_KEY_BUNDLE_DIRS).split(""String_Node_Str"")))).start();
      log(LogService.LOG_INFO,""String_Node_Str"" + KNAPSACK_VERSION + ""String_Node_Str""+ config.get(Config.CONFIG_KEY_ROOT_DIR));
    }
 catch (    Exception e) {
      log(LogService.LOG_ERROR,""String_Node_Str"",e);
    }
  }
}",0.9654471544715448
178695,"/** 
 * Entry point for the knapsack.  Creates a felix framework and attaches the Log, ConfigAdmin, and Knapsack bundles.  Registers a shutdown hook to cleanup. Based on the example provided at: http://felix.apache.org/site/apache-felix-framework-launching-and-embedding.html
 * @param args
 * @throws IOException
 * @throws BundleException
 * @throws InterruptedException 
 */
public static void main(String[] args){
  long time=System.currentTimeMillis();
  FrameworkFactory frameworkFactory=new FrameworkFactory();
  Logger logger=new Logger();
  int port=DISABLE_SCRIPTS_PORT;
  try {
    final File baseDirectory=getBaseDirectory();
    FSHelper.validateFile(baseDirectory,true,true,false,true);
    createKnapsackLayout(baseDirectory,logger);
    Config config=new Config(baseDirectory);
    if (config.containsKey(Config.CONFIG_DISABLE_SCRIPTS) && config.getBoolean(Config.CONFIG_DISABLE_SCRIPTS)) {
      Random r=new Random();
      port=PORT_START + r.nextInt(MAX_PORT_RANGE);
    }
 else {
      createKnapsackScripts(baseDirectory,port);
    }
    List<BundleActivator> activators=new ArrayList<BundleActivator>();
    if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_LOGGER))     activators.add(new org.apache.felix.log.Activator());
    if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_CONFIGADMIN))     activators.add(new ConfigurationManager());
    activators.add(new org.knapsack.Activator(config,logger,port));
    config.put(FELIX_LOGGER_INSTANCE,logger);
    config.put(FELIX_BUNDLE_INSTANCES,activators);
    final Framework framework=frameworkFactory.newFramework(config);
    Runtime.getRuntime().addShutdownHook(new Thread(""String_Node_Str""){
      public void run(){
        try {
          if (framework != null) {
            framework.stop();
            framework.waitForStop(0);
          }
          FSHelper.deleteFilesInDir(scriptDir);
        }
 catch (        Exception ex) {
          System.err.println(""String_Node_Str"" + ex);
        }
      }
    }
);
    framework.init();
    framework.start();
    logger.log(LogService.LOG_INFO,""String_Node_Str"" + ((double)(System.currentTimeMillis() - time) / 1000) + ""String_Node_Str""+ activators);
  }
 catch (  Exception e) {
    logger.log(LogService.LOG_INFO,""String_Node_Str"",e);
    System.exit(1);
  }
}","/** 
 * Entry point for the knapsack.  Creates a felix framework and attaches the Log, ConfigAdmin, and Knapsack bundles.  Registers a shutdown hook to cleanup. Based on the example provided at: http://felix.apache.org/site/apache-felix-framework-launching-and-embedding.html
 * @param args
 * @throws IOException
 * @throws BundleException
 * @throws InterruptedException 
 */
public static void main(String[] args){
  long time=System.currentTimeMillis();
  FrameworkFactory frameworkFactory=new FrameworkFactory();
  Logger logger=new Logger();
  int port=DISABLE_SCRIPTS_PORT;
  try {
    final File baseDirectory=getBaseDirectory();
    FSHelper.validateFile(baseDirectory,true,true,false,true);
    createKnapsackLayout(baseDirectory,logger);
    Config config=new Config(baseDirectory);
    if (!config.containsKey(Config.CONFIG_DISABLE_SCRIPTS) || !config.getBoolean(Config.CONFIG_DISABLE_SCRIPTS)) {
      Random r=new Random();
      port=PORT_START + r.nextInt(MAX_PORT_RANGE);
      createKnapsackScripts(baseDirectory,port);
    }
    List<BundleActivator> activators=new ArrayList<BundleActivator>();
    if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_LOGGER))     activators.add(new org.apache.felix.log.Activator());
    if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_CONFIGADMIN))     activators.add(new ConfigurationManager());
    activators.add(new org.knapsack.Activator(config,logger,port));
    config.put(FELIX_LOGGER_INSTANCE,logger);
    config.put(FELIX_BUNDLE_INSTANCES,activators);
    final Framework framework=frameworkFactory.newFramework(config);
    Runtime.getRuntime().addShutdownHook(new Thread(""String_Node_Str""){
      public void run(){
        try {
          if (framework != null) {
            framework.stop();
            framework.waitForStop(0);
          }
          FSHelper.deleteFilesInDir(scriptDir);
        }
 catch (        Exception ex) {
          System.err.println(""String_Node_Str"" + ex);
        }
      }
    }
);
    framework.init();
    framework.start();
    logger.log(LogService.LOG_INFO,""String_Node_Str"" + ((double)(System.currentTimeMillis() - time) / 1000) + ""String_Node_Str""+ activators);
  }
 catch (  Exception e) {
    logger.log(LogService.LOG_INFO,""String_Node_Str"",e);
    System.exit(1);
  }
}",0.9951817783618048
178696,"public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  if (config == null)   config=Config.getRef();
  managedServiceRef=bundleContext.registerService(ManagedService.class.getName(),this,getManagedServiceProperties());
  context.addFrameworkListener(this);
  if (embeddedMode && defaultDirExists()) {
    ServiceReference sr=bundleContext.getServiceReference(ConfigurationAdmin.class.getName());
    if (sr != null) {
      ConfigurationAdmin ca=(ConfigurationAdmin)bundleContext.getService(sr);
      loadDefaults(getDefaultDir(),ca);
    }
  }
}","public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  managedServiceRef=bundleContext.registerService(ManagedService.class.getName(),this,getManagedServiceProperties());
  context.addFrameworkListener(this);
  if (embeddedMode) {
    ServiceReference sr=bundleContext.getServiceReference(ConfigurationAdmin.class.getName());
    if (sr != null) {
      ConfigurationAdmin ca=(ConfigurationAdmin)bundleContext.getService(sr);
      loadDefaults(new File(config.get(Config.CONFIG_KEY_ROOT_DIR).toString(),Config.CONFIGADMIN_DIRECTORY_NAME),ca);
    }
  }
}",0.8564273789649416
178697,"/** 
 * Constructor for running as an embedded bundle in the Knapsack bootstrap.
 * @param logger instance of framework logger.
 * @throws IOException Upon configuration error.
 * @throws InterruptedException Upon interruption.
 */
public Activator(Logger logger,int port) throws IOException, InterruptedException {
  ref=this;
  this.port=port;
  Activator.frameworkLogger=logger;
  embeddedMode=true;
  config=Config.getRef();
}","/** 
 * Constructor for running as an embedded bundle in the Knapsack bootstrap.
 * @param logger instance of framework logger.
 * @throws IOException Upon configuration error.
 * @throws InterruptedException Upon interruption.
 */
public Activator(Config config,Logger logger,int port) throws IOException, InterruptedException {
  ref=this;
  this.port=port;
  Activator.frameworkLogger=logger;
  embeddedMode=true;
  this.config=config;
}",0.9540229885057472
178698,"private static void createKnapsackLayout(File baseDirectory,Logger logger,int port) throws IOException {
  File confFile=new File(baseDirectory,Config.CONFIGURATION_FILENAME);
  scriptDir=new File(baseDirectory,Config.SCRIPT_DIRECTORY_NAME);
  FSHelper.validateFile(scriptDir,true,true,false,true);
  if (!confFile.exists()) {
    logger.log(LogService.LOG_INFO,""String_Node_Str"" + confFile);
    FSHelper.copyDefaultConfiguration(Config.CONFIGURATION_RESOURCE_FILENAME,confFile,baseDirectory);
  }
  if (FSHelper.directoryHasFiles(scriptDir))   FSHelper.deleteFilesInDir(scriptDir);
  FSHelper.copyScripts(confFile.getParentFile(),port);
}","private static void createKnapsackLayout(File baseDirectory,Logger logger,int port) throws IOException {
  File confFile=new File(baseDirectory,Config.CONFIGURATION_FILENAME);
  scriptDir=new File(baseDirectory,Config.SCRIPT_DIRECTORY_NAME);
  FSHelper.validateFile(scriptDir,true,true,false,true);
  if (!confFile.exists()) {
    logger.log(LogService.LOG_INFO,""String_Node_Str"" + confFile);
    FSHelper.copyDefaultConfiguration(Config.CONFIGURATION_RESOURCE_FILENAME,confFile,baseDirectory);
  }
  if (FSHelper.directoryHasFiles(scriptDir))   FSHelper.deleteFilesInDir(scriptDir);
  FSHelper.copyScripts(confFile.getParentFile(),port);
  File defaultDir=new File(baseDirectory,Config.DEFAULT_DIRECTORY_NAME);
  FSHelper.validateFile(defaultDir,true,true,false,true);
  File configAdminDir=new File(baseDirectory,Config.CONFIGADMIN_DIRECTORY_NAME);
  FSHelper.validateFile(configAdminDir,true,true,false,true);
}",0.8236808236808236
178699,"/** 
 * Entry point for the knapsack.  Creates a felix framework and attaches the Log, ConfigAdmin, and Knapsack bundles.  Registers a shutdown hook to cleanup. Based on the example provided at: http://felix.apache.org/site/apache-felix-framework-launching-and-embedding.html
 * @param args
 * @throws IOException
 * @throws BundleException
 * @throws InterruptedException 
 */
public static void main(String[] args) throws IOException, BundleException, InterruptedException {
  long time=System.currentTimeMillis();
  FrameworkFactory frameworkFactory=new FrameworkFactory();
  Logger logger=new Logger();
  Random r=new Random();
  int port=PORT_START + r.nextInt(MAX_PORT_RANGE);
  final File baseDirectory=getBaseDirectory();
  FSHelper.validateFile(baseDirectory,true,true,false,true);
  createKnapsackLayout(baseDirectory,logger,port);
  Config config=new Config(baseDirectory);
  List<BundleActivator> activators=new ArrayList<BundleActivator>();
  if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_LOGGER))   activators.add(new org.apache.felix.log.Activator());
  if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_CONFIGADMIN))   activators.add(new ConfigurationManager());
  activators.add(new org.knapsack.Activator(logger,port));
  config.put(FELIX_LOGGER_INSTANCE,logger);
  config.put(FELIX_BUNDLE_INSTANCES,activators);
  final Framework framework=frameworkFactory.newFramework(config);
  Runtime.getRuntime().addShutdownHook(new Thread(""String_Node_Str""){
    public void run(){
      try {
        if (framework != null) {
          framework.stop();
          framework.waitForStop(0);
        }
        FSHelper.deleteFilesInDir(scriptDir);
      }
 catch (      Exception ex) {
        System.err.println(""String_Node_Str"" + ex);
      }
    }
  }
);
  framework.init();
  framework.start();
  logger.log(LogService.LOG_INFO,""String_Node_Str"" + ((double)(System.currentTimeMillis() - time) / 1000) + ""String_Node_Str""+ activators);
}","/** 
 * Entry point for the knapsack.  Creates a felix framework and attaches the Log, ConfigAdmin, and Knapsack bundles.  Registers a shutdown hook to cleanup. Based on the example provided at: http://felix.apache.org/site/apache-felix-framework-launching-and-embedding.html
 * @param args
 * @throws IOException
 * @throws BundleException
 * @throws InterruptedException 
 */
public static void main(String[] args) throws IOException, BundleException, InterruptedException {
  long time=System.currentTimeMillis();
  FrameworkFactory frameworkFactory=new FrameworkFactory();
  Logger logger=new Logger();
  Random r=new Random();
  int port=PORT_START + r.nextInt(MAX_PORT_RANGE);
  final File baseDirectory=getBaseDirectory();
  FSHelper.validateFile(baseDirectory,true,true,false,true);
  createKnapsackLayout(baseDirectory,logger,port);
  Config config=new Config(baseDirectory);
  List<BundleActivator> activators=new ArrayList<BundleActivator>();
  if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_LOGGER))   activators.add(new org.apache.felix.log.Activator());
  if (config.getBoolean(Config.CONFIG_KEY_BUILTIN_CONFIGADMIN))   activators.add(new ConfigurationManager());
  activators.add(new org.knapsack.Activator(config,logger,port));
  config.put(FELIX_LOGGER_INSTANCE,logger);
  config.put(FELIX_BUNDLE_INSTANCES,activators);
  final Framework framework=frameworkFactory.newFramework(config);
  Runtime.getRuntime().addShutdownHook(new Thread(""String_Node_Str""){
    public void run(){
      try {
        if (framework != null) {
          framework.stop();
          framework.waitForStop(0);
        }
        FSHelper.deleteFilesInDir(scriptDir);
      }
 catch (      Exception ex) {
        System.err.println(""String_Node_Str"" + ex);
      }
    }
  }
);
  framework.init();
  framework.start();
  logger.log(LogService.LOG_INFO,""String_Node_Str"" + ((double)(System.currentTimeMillis() - time) / 1000) + ""String_Node_Str""+ activators);
}",0.9982074263764404
178700,"/** 
 * Generate the default configuration.
 * @param targetConfFile
 * @return
 * @throws IOException
 */
public static void copyDefaultConfiguration(String sourceResourceFilename,File targetConfFile,File baseDirectory) throws IOException {
  InputStream istream=Config.class.getResourceAsStream(sourceResourceFilename);
  if (istream == null)   throw new IOException(""String_Node_Str"" + sourceResourceFilename);
  OutputStream fos=new FileOutputStream(targetConfFile);
  IOUtils.copy(istream,fos);
  if (baseDirectory != null) {
    File configAdminDir=new File(baseDirectory,Activator.CONFIGADMIN_FILENAME);
    validateFile(configAdminDir,true,true,false,true);
    IOUtils.write(LS + ""String_Node_Str"" + configAdminDir,fos);
  }
  istream.close();
  fos.close();
}","/** 
 * Generate the default configuration.
 * @param targetConfFile
 * @return
 * @throws IOException
 */
public static void copyDefaultConfiguration(String sourceResourceFilename,File targetConfFile,File baseDirectory) throws IOException {
  InputStream istream=Config.class.getResourceAsStream(sourceResourceFilename);
  if (istream == null)   throw new IOException(""String_Node_Str"" + sourceResourceFilename);
  OutputStream fos=new FileOutputStream(targetConfFile);
  IOUtils.copy(istream,fos);
  if (baseDirectory != null) {
    File configAdminDir=new File(baseDirectory,Config.CONFIGADMIN_DIRECTORY_NAME);
    validateFile(configAdminDir,true,true,false,true);
    IOUtils.write(LS + ""String_Node_Str"" + configAdminDir,fos);
  }
  istream.close();
  fos.close();
}",0.982478909798832
178701,"/** 
 * Assume all files in default directory are property files.
 * @param f
 * @return
 */
private boolean isDefaultFile(File f){
  return f.getParentFile().getName().equals(Activator.DEFAULT_FILENAME);
}","/** 
 * Assume all files in default directory are property files.
 * @param f
 * @return
 */
private boolean isDefaultFile(File f){
  return f.getParentFile().getName().equals(Config.DEFAULT_DIRECTORY_NAME);
}",0.9397590361445785
178702,"public void create(){
  byte color;
  if (orange)   color=(byte)plugin.util.getRightPortalColor(owner.colorPreset);
 else   color=(byte)plugin.util.getLeftPortalColor(owner.colorPreset);
  Block rb;
  BlockHolder bh;
  for (  V10Location loc : border) {
    if (plugin.portalManager.insideBlocks.containsKey(loc))     plugin.portalManager.insideBlocks.get(loc).delete();
    if (plugin.portalManager.behindBlocks.containsKey(loc))     plugin.portalManager.behindBlocks.get(loc).delete();
    rb=loc.getHandle().getBlock();
    bh=new BlockHolder(rb);
    if (plugin.gelManager.gelMap.containsKey(bh))     bh=plugin.gelManager.gelMap.get(bh);
    plugin.portalManager.oldBlocks.put(loc,bh);
    rb.setType(Material.WOOL);
    rb.setData(color);
    plugin.portalManager.borderBlocks.put(loc,this);
  }
  for (  V10Location loc : inside) {
    if (loc != null) {
      rb=loc.getHandle().getBlock();
      bh=new BlockHolder(rb);
      if (plugin.gelManager.gelMap.containsKey(bh))       bh=plugin.gelManager.gelMap.get(bh);
      plugin.portalManager.oldBlocks.put(loc,bh);
    }
  }
  if (plugin.config.FillPortalBack > -1) {
    for (    V10Location loc : behind) {
      if (plugin.portalManager.borderBlocks.containsKey(loc))       plugin.portalManager.borderBlocks.get(loc).delete();
      if (plugin.portalManager.insideBlocks.containsKey(loc))       plugin.portalManager.insideBlocks.get(loc).delete();
      rb=loc.getHandle().getBlock();
      bh=new BlockHolder(rb);
      if (plugin.gelManager.gelMap.containsKey(bh))       bh=plugin.gelManager.gelMap.get(bh);
      plugin.portalManager.oldBlocks.put(loc,bh);
      if (plugin.config.CompactPortal) {
        rb.setType(Material.WOOL);
        rb.setData(color);
      }
 else {
        rb.setTypeId(plugin.config.FillPortalBack);
      }
      plugin.portalManager.behindBlocks.put(loc,this);
    }
  }
  if (getDestination() == null)   close();
 else {
    open();
    if (getDestination().isRegionPortal())     plugin.regionManager.getRegion(centerBlock).regionPortalOpened(orange);
 else     getDestination().open();
  }
  if (isRegionPortal())   plugin.regionManager.getRegion(centerBlock).regionPortalCreated(orange);
  V10Location oloc;
  V10Location loc;
  int i;
  oloc=inside[0].clone();
  plugin.portalManager.insideBlocks.put(inside[0],this);
  if (inside[1] != null)   plugin.portalManager.insideBlocks.put(inside[1],this);
  if (horizontal) {
    for (int y=-1; y < 2; y++) {
      if (y != 0) {
        loc=new V10Location(oloc.world,oloc.x,oloc.y + y,oloc.z);
        plugin.portalManager.awayBlocksY.put(loc,this);
        if (y < 1)         i=0;
 else         i=1;
        awayBlocksY[i]=loc;
      }
      for (int x=-1; x < 2; x++) {
        for (int z=-1; z < 2; z++) {
          loc=new V10Location(oloc.world,oloc.x + x,oloc.y + y,oloc.z + z);
          plugin.portalManager.awayBlocks.put(loc,this);
          awayBlocks.add(loc);
        }
      }
    }
  }
}","public void create(){
  byte color;
  if (orange)   color=(byte)plugin.util.getRightPortalColor(owner.colorPreset);
 else   color=(byte)plugin.util.getLeftPortalColor(owner.colorPreset);
  Block rb;
  BlockHolder bh;
  for (  V10Location loc : border) {
    if (plugin.portalManager.insideBlocks.containsKey(loc))     plugin.portalManager.insideBlocks.get(loc).delete();
    if (plugin.portalManager.behindBlocks.containsKey(loc))     plugin.portalManager.behindBlocks.get(loc).delete();
    rb=loc.getHandle().getBlock();
    bh=new BlockHolder(rb);
    if (plugin.gelManager.gelMap.containsKey(bh)) {
      bh=plugin.gelManager.gelMap.get(bh);
      plugin.gelManager.removeGel(bh);
    }
    plugin.portalManager.oldBlocks.put(loc,bh);
    rb.setType(Material.WOOL);
    rb.setData(color);
    plugin.portalManager.borderBlocks.put(loc,this);
  }
  for (  V10Location loc : inside) {
    if (loc != null) {
      rb=loc.getHandle().getBlock();
      bh=new BlockHolder(rb);
      if (plugin.gelManager.gelMap.containsKey(bh)) {
        bh=plugin.gelManager.gelMap.get(bh);
        plugin.gelManager.removeGel(bh);
      }
      plugin.portalManager.oldBlocks.put(loc,bh);
    }
  }
  if (plugin.config.FillPortalBack > -1) {
    for (    V10Location loc : behind) {
      if (plugin.portalManager.borderBlocks.containsKey(loc))       plugin.portalManager.borderBlocks.get(loc).delete();
      if (plugin.portalManager.insideBlocks.containsKey(loc))       plugin.portalManager.insideBlocks.get(loc).delete();
      rb=loc.getHandle().getBlock();
      bh=new BlockHolder(rb);
      if (plugin.gelManager.gelMap.containsKey(bh)) {
        bh=plugin.gelManager.gelMap.get(bh);
        plugin.gelManager.removeGel(bh);
      }
      plugin.portalManager.oldBlocks.put(loc,bh);
      if (plugin.config.CompactPortal) {
        rb.setType(Material.WOOL);
        rb.setData(color);
      }
 else {
        rb.setTypeId(plugin.config.FillPortalBack);
      }
      plugin.portalManager.behindBlocks.put(loc,this);
    }
  }
  if (getDestination() == null)   close();
 else {
    open();
    if (getDestination().isRegionPortal())     plugin.regionManager.getRegion(centerBlock).regionPortalOpened(orange);
 else     getDestination().open();
  }
  if (isRegionPortal())   plugin.regionManager.getRegion(centerBlock).regionPortalCreated(orange);
  V10Location oloc;
  V10Location loc;
  int i;
  oloc=inside[0].clone();
  plugin.portalManager.insideBlocks.put(inside[0],this);
  if (inside[1] != null)   plugin.portalManager.insideBlocks.put(inside[1],this);
  if (horizontal) {
    for (int y=-1; y < 2; y++) {
      if (y != 0) {
        loc=new V10Location(oloc.world,oloc.x,oloc.y + y,oloc.z);
        plugin.portalManager.awayBlocksY.put(loc,this);
        if (y < 1)         i=0;
 else         i=1;
        awayBlocksY[i]=loc;
      }
      for (int x=-1; x < 2; x++) {
        for (int z=-1; z < 2; z++) {
          loc=new V10Location(oloc.world,oloc.x + x,oloc.y + y,oloc.z + z);
          plugin.portalManager.awayBlocks.put(loc,this);
          awayBlocks.add(loc);
        }
      }
    }
  }
}",0.9743589743589745
178703,"public void delete(){
  BlockHolder bh;
  for (  V10Location loc : border) {
    if (plugin.portalManager.oldBlocks.containsKey(loc)) {
      bh=plugin.portalManager.oldBlocks.get(loc);
      bh.reset();
      if (plugin.gelManager.gelMap.containsKey(bh)) {
        plugin.gelManager.gelMap.remove(bh);
        for (        ArrayList<BlockHolder> blocks : plugin.gelManager.gels.values())         blocks.remove(bh);
      }
      plugin.portalManager.oldBlocks.remove(loc);
    }
    plugin.portalManager.borderBlocks.remove(loc);
  }
  for (  V10Location loc : inside) {
    if (loc == null)     continue;
    if (plugin.portalManager.oldBlocks.containsKey(loc)) {
      bh=plugin.portalManager.oldBlocks.get(loc);
      bh.reset();
      if (plugin.gelManager.gelMap.containsKey(bh)) {
        plugin.gelManager.gelMap.remove(bh);
        for (        ArrayList<BlockHolder> blocks : plugin.gelManager.gels.values())         blocks.remove(bh);
      }
      plugin.portalManager.oldBlocks.remove(loc);
    }
    plugin.portalManager.insideBlocks.remove(loc);
  }
  if (plugin.config.FillPortalBack > -1) {
    for (    V10Location loc : behind) {
      if (plugin.portalManager.oldBlocks.containsKey(loc)) {
        bh=plugin.portalManager.oldBlocks.get(loc);
        bh.reset();
        if (plugin.gelManager.gelMap.containsKey(bh)) {
          plugin.gelManager.gelMap.remove(bh);
          for (          ArrayList<BlockHolder> blocks : plugin.gelManager.gels.values())           blocks.remove(bh);
        }
        plugin.portalManager.oldBlocks.remove(loc);
      }
      plugin.portalManager.behindBlocks.remove(loc);
    }
  }
  if (horizontal) {
    for (    V10Location l : awayBlocks)     plugin.portalManager.awayBlocks.remove(l);
    plugin.portalManager.awayBlocksY.remove(awayBlocksY[0]);
    plugin.portalManager.awayBlocksY.remove(awayBlocksY[1]);
  }
  if (orange)   owner.orangePortal=null;
 else   owner.bluePortal=null;
  open=false;
  plugin.portalManager.portals.remove(this);
  plugin.regionManager.getRegion(centerBlock).portals.remove(this);
  if (getDestination() != null && getDestination().open) {
    if (getDestination().isRegionPortal()) {
      V10Location loc=getDestination().centerBlock;
      plugin.regionManager.getRegion(loc).regionPortalClosed(orange);
    }
 else     getDestination().close();
  }
  if (isRegionPortal())   plugin.regionManager.getRegion(centerBlock).regionPortalDeleted(this);
}","public void delete(){
  BlockHolder bh;
  for (  V10Location loc : border) {
    if (plugin.portalManager.oldBlocks.containsKey(loc)) {
      bh=plugin.portalManager.oldBlocks.get(loc);
      bh.reset();
      if (plugin.gelManager.gelMap.containsKey(bh))       plugin.gelManager.removeGel(bh);
      plugin.portalManager.oldBlocks.remove(loc);
    }
    plugin.portalManager.borderBlocks.remove(loc);
  }
  for (  V10Location loc : inside) {
    if (loc == null)     continue;
    if (plugin.portalManager.oldBlocks.containsKey(loc)) {
      bh=plugin.portalManager.oldBlocks.get(loc);
      bh.reset();
      if (plugin.gelManager.gelMap.containsKey(bh))       plugin.gelManager.removeGel(bh);
      plugin.portalManager.oldBlocks.remove(loc);
    }
    plugin.portalManager.insideBlocks.remove(loc);
  }
  if (plugin.config.FillPortalBack > -1) {
    for (    V10Location loc : behind) {
      if (plugin.portalManager.oldBlocks.containsKey(loc)) {
        bh=plugin.portalManager.oldBlocks.get(loc);
        bh.reset();
        if (plugin.gelManager.gelMap.containsKey(bh))         plugin.gelManager.removeGel(bh);
        plugin.portalManager.oldBlocks.remove(loc);
      }
      plugin.portalManager.behindBlocks.remove(loc);
    }
  }
  if (horizontal) {
    for (    V10Location l : awayBlocks)     plugin.portalManager.awayBlocks.remove(l);
    plugin.portalManager.awayBlocksY.remove(awayBlocksY[0]);
    plugin.portalManager.awayBlocksY.remove(awayBlocksY[1]);
  }
  if (orange)   owner.orangePortal=null;
 else   owner.bluePortal=null;
  open=false;
  plugin.portalManager.portals.remove(this);
  plugin.regionManager.getRegion(centerBlock).portals.remove(this);
  if (getDestination() != null && getDestination().open) {
    if (getDestination().isRegionPortal()) {
      V10Location loc=getDestination().centerBlock;
      plugin.regionManager.getRegion(loc).regionPortalClosed(orange);
    }
 else     getDestination().close();
  }
  if (isRegionPortal())   plugin.regionManager.getRegion(centerBlock).regionPortalDeleted(this);
}",0.8762541806020067
178704,"@EventHandler() public void onBlockBreak(BlockBreakEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  if (plugin.config.DisabledWorlds.contains(loc.world))   return;
  BlockHolder bh=new BlockHolder(block);
  if (plugin.gelManager.gelMap.containsKey(bh)) {
    plugin.gelManager.gelMap.remove(bh);
    for (    ArrayList<BlockHolder> blocks : plugin.gelManager.gels.values())     blocks.remove(bh);
  }
  plugin.funnelBridgeManager.updateBridge(loc);
  Portal portal=null;
  if (plugin.portalManager.borderBlocks.containsKey(loc))   portal=plugin.portalManager.borderBlocks.get(loc);
 else   if (plugin.portalManager.behindBlocks.containsKey(loc))   portal=plugin.portalManager.behindBlocks.get(loc);
 else   if (plugin.portalManager.insideBlocks.containsKey(loc)) {
    portal=plugin.portalManager.insideBlocks.get(loc);
    if (portal.transmitter && block.getType() == Material.REDSTONE_TORCH_ON) {
      event.setCancelled(true);
      fakeBBE=false;
      return;
    }
    if (portal.open)     return;
  }
  if (portal != null) {
    portal.delete();
    event.setCancelled(true);
    return;
  }
  if (plugin.grillManager.insideBlocks.containsKey(loc) || plugin.funnelBridgeManager.bridgeBlocks.containsKey(loc)) {
    event.setCancelled(true);
    fakeBBE=false;
    return;
  }
  if (plugin.funnelBridgeManager.bridgeMachineBlocks.containsKey(loc)) {
    if (event.getPlayer() == null || plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_BRIDGE))     plugin.funnelBridgeManager.bridgeMachineBlocks.get(loc).delete();
 else {
      event.setCancelled(true);
      fakeBBE=false;
    }
    return;
  }
  if (plugin.grillManager.borderBlocks.containsKey(loc)) {
    if (event.getPlayer() == null || plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_GRILL))     plugin.grillManager.borderBlocks.get(loc).delete();
 else {
      event.setCancelled(true);
      fakeBBE=false;
    }
    return;
  }
  Material type=block.getType();
  Region region=plugin.regionManager.getRegion(loc);
  if (type == Material.REDSTONE_WIRE && region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=block.getLocation();
    for (int i=0; i < 4; i++) {
      BlockFace face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        for (        V10Location b : destination.inside)         if (b != null)         b.getHandle().getBlock().setType(Material.AIR);
        portal.transmitter=false;
      }
    }
  }
}","@EventHandler() public void onBlockBreak(BlockBreakEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  if (plugin.config.DisabledWorlds.contains(loc.world))   return;
  BlockHolder bh=new BlockHolder(block);
  if (plugin.gelManager.gelMap.containsKey(bh))   plugin.gelManager.removeGel(bh);
  plugin.funnelBridgeManager.updateBridge(loc);
  Portal portal=null;
  if (plugin.portalManager.borderBlocks.containsKey(loc))   portal=plugin.portalManager.borderBlocks.get(loc);
 else   if (plugin.portalManager.behindBlocks.containsKey(loc))   portal=plugin.portalManager.behindBlocks.get(loc);
 else   if (plugin.portalManager.insideBlocks.containsKey(loc)) {
    portal=plugin.portalManager.insideBlocks.get(loc);
    if (portal.transmitter && block.getType() == Material.REDSTONE_TORCH_ON) {
      event.setCancelled(true);
      fakeBBE=false;
      return;
    }
    if (portal.open)     return;
  }
  if (portal != null) {
    portal.delete();
    event.setCancelled(true);
    return;
  }
  if (plugin.grillManager.insideBlocks.containsKey(loc) || plugin.funnelBridgeManager.bridgeBlocks.containsKey(loc)) {
    event.setCancelled(true);
    fakeBBE=false;
    return;
  }
  if (plugin.funnelBridgeManager.bridgeMachineBlocks.containsKey(loc)) {
    if (event.getPlayer() == null || plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_BRIDGE))     plugin.funnelBridgeManager.bridgeMachineBlocks.get(loc).delete();
 else {
      event.setCancelled(true);
      fakeBBE=false;
    }
    return;
  }
  if (plugin.grillManager.borderBlocks.containsKey(loc)) {
    if (event.getPlayer() == null || plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_GRILL))     plugin.grillManager.borderBlocks.get(loc).delete();
 else {
      event.setCancelled(true);
      fakeBBE=false;
    }
    return;
  }
  Material type=block.getType();
  Region region=plugin.regionManager.getRegion(loc);
  if (type == Material.REDSTONE_WIRE && region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=block.getLocation();
    for (int i=0; i < 4; i++) {
      BlockFace face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        for (        V10Location b : destination.inside)         if (b != null)         b.getHandle().getBlock().setType(Material.AIR);
        portal.transmitter=false;
      }
    }
  }
}",0.9721384205856256
178705,"public void tryPlacingAutomatedPortal(V10Location b){
  Block rb=b.getHandle().getBlock();
  Wool wool=(Wool)Material.WOOL.getNewData(rb.getData());
  if (wool.getColor() != DyeColor.BLACK && wool.getColor() != DyeColor.BLUE && wool.getColor() != DyeColor.ORANGE)   return;
  Block firstIronBar=null;
  for (int i=0; i < 6; i++) {
    if (rb.getRelative(BlockFace.values()[i],2).getType() == Material.IRON_FENCE) {
      firstIronBar=rb.getRelative(BlockFace.values()[i],2);
      break;
    }
 else     if (rb.getRelative(BlockFace.values()[i]).getType() == Material.IRON_FENCE) {
      firstIronBar=rb.getRelative(BlockFace.values()[i]);
      break;
    }
  }
  if (firstIronBar == null)   return;
  ArrayList<Block> ironBars=new ArrayList<Block>();
  for (int i=0; i < 6; i++) {
    BlockFace face=BlockFace.values()[i];
    if (firstIronBar.getRelative(face).getType() == Material.IRON_FENCE) {
      while (firstIronBar.getRelative(face).getType() == Material.IRON_FENCE) {
        firstIronBar=firstIronBar.getRelative(face);
      }
      ironBars.add(firstIronBar);
      int counter=1;
      while (firstIronBar.getRelative(face.getOppositeFace(),counter).getType() == Material.IRON_FENCE) {
        ironBars.add(firstIronBar.getRelative(face.getOppositeFace(),counter));
        counter++;
      }
      break;
    }
  }
  int size=plugin.config.CompactPortal ? 2 : 4;
  BlockFace otherSide=null;
  for (int i=0; i < 6; i++) {
    BlockFace face=BlockFace.values()[i];
    if (firstIronBar.getRelative(face,size).getType() == Material.IRON_FENCE) {
      otherSide=face;
      break;
    }
  }
  if (otherSide == null)   return;
  for (  Block ironBar : ironBars.toArray(new Block[0])) {
    if (ironBar.getRelative(otherSide,size).getType() == Material.IRON_FENCE)     ironBars.add(ironBar.getRelative(otherSide,size));
  }
  BlockFace portalFace=null;
  Portal oldPortal=null;
  Region region=plugin.regionManager.getRegion(b);
  for (int i=0; i < 6; i++) {
    BlockFace face2=BlockFace.values()[i];
    if (face2 == otherSide || face2.getOppositeFace() == otherSide)     continue;
    Block firstPortalBlock=firstIronBar.getRelative(otherSide).getRelative(face2);
    if (region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && region.getList(RegionSetting.PORTAL_BLOCKS).contains(firstPortalBlock.getTypeId())) {
      portalFace=face2;
      break;
    }
 else {
      V10Location loc=new V10Location(firstPortalBlock);
      if (borderBlocks.containsKey(loc))       oldPortal=borderBlocks.get(loc);
 else       oldPortal=insideBlocks.get(loc);
      portalFace=face2;
      break;
    }
  }
  if (portalFace == null)   return;
  if ((!plugin.config.CompactPortal && (((portalFace == BlockFace.UP || portalFace == BlockFace.DOWN) && ironBars.size() != 6) || (portalFace != BlockFace.UP && portalFace != BlockFace.DOWN && ironBars.size() != 8))) || (plugin.config.CompactPortal && (((portalFace == BlockFace.UP || portalFace == BlockFace.DOWN) && ironBars.size() != 2) || (portalFace != BlockFace.UP && portalFace != BlockFace.DOWN && ironBars.size() != 4))))   return;
  if (wool.getColor() == DyeColor.BLACK) {
    if (oldPortal != null)     oldPortal.delete();
    return;
  }
  PortalCoord portalc=new PortalCoord();
  int c=0;
  for (int i=0; i < ironBars.size() / 2; i++) {
    portalc.border.add(new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,1)));
    portalc.border.add(new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,3)));
    if (i == 0 || i == (ironBars.size() / 2) - 1)     portalc.border.add(new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,2)));
 else     portalc.inside[c++]=new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,2));
  }
  portalc.vertical=portalFace == BlockFace.UP || portalFace == BlockFace.DOWN;
  portalc.block=portalc.inside[0];
  if (oldPortal != null)   oldPortal.delete();
  if (portalc.border.size() == 0 || portalc.inside[0] == null)   return;
  for (  V10Location tb : portalc.border)   if ((!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(tb.getHandle().getBlock().getTypeId())) || borderBlocks.containsKey(tb) || insideBlocks.containsKey(tb))   return;
  for (  V10Location tb : portalc.inside)   if (tb != null)   if ((!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(tb.getHandle().getBlock().getTypeId())) || borderBlocks.containsKey(tb) || insideBlocks.containsKey(tb))   return;
  if (portalc.vertical)   portalc.destLoc[0]=new V10Location(portalc.inside[0].getHandle().getBlock().getRelative(portalFace.getOppositeFace()));
 else {
    Block block=portalc.inside[0].getHandle().getBlock().getRelative(portalFace.getOppositeFace());
    portalc.destLoc[0]=new V10Location(block);
    block=block.getRelative(BlockFace.UP);
    portalc.destLoc[1]=new V10Location(block);
  }
  portalc.tpFace=portalFace;
  boolean orange=wool.getColor() == DyeColor.ORANGE;
  Portal portal=new Portal(plugin,portalc.destLoc,portalc.block,portalc.border,portalc.inside,portalc.behind,region,orange,portalc.vertical,portalc.tpFace);
  if (orange) {
    if (region.orangePortal != null)     region.orangePortal.delete();
    region.orangePortal=portal;
  }
 else {
    if (region.bluePortal != null)     region.bluePortal.delete();
    region.bluePortal=portal;
  }
  portals.add(portal);
  region.portals.add(portal);
  portal.create();
}","public void tryPlacingAutomatedPortal(V10Location b){
  Block rb=b.getHandle().getBlock();
  Wool wool=(Wool)Material.WOOL.getNewData(rb.getData());
  if (wool.getColor() != DyeColor.BLACK && wool.getColor() != DyeColor.LIGHT_BLUE && wool.getColor() != DyeColor.ORANGE)   return;
  Block firstIronBar=null;
  for (int i=0; i < 6; i++) {
    if (rb.getRelative(BlockFace.values()[i],2).getType() == Material.IRON_FENCE) {
      firstIronBar=rb.getRelative(BlockFace.values()[i],2);
      break;
    }
 else     if (rb.getRelative(BlockFace.values()[i]).getType() == Material.IRON_FENCE) {
      firstIronBar=rb.getRelative(BlockFace.values()[i]);
      break;
    }
  }
  if (firstIronBar == null)   return;
  ArrayList<Block> ironBars=new ArrayList<Block>();
  for (int i=0; i < 6; i++) {
    BlockFace face=BlockFace.values()[i];
    if (firstIronBar.getRelative(face).getType() == Material.IRON_FENCE) {
      while (firstIronBar.getRelative(face).getType() == Material.IRON_FENCE) {
        firstIronBar=firstIronBar.getRelative(face);
      }
      ironBars.add(firstIronBar);
      int counter=1;
      while (firstIronBar.getRelative(face.getOppositeFace(),counter).getType() == Material.IRON_FENCE) {
        ironBars.add(firstIronBar.getRelative(face.getOppositeFace(),counter));
        counter++;
      }
      break;
    }
  }
  int size=plugin.config.CompactPortal ? 2 : 4;
  BlockFace otherSide=null;
  for (int i=0; i < 6; i++) {
    BlockFace face=BlockFace.values()[i];
    if (firstIronBar.getRelative(face,size).getType() == Material.IRON_FENCE) {
      otherSide=face;
      break;
    }
  }
  if (otherSide == null)   return;
  for (  Block ironBar : ironBars.toArray(new Block[0])) {
    if (ironBar.getRelative(otherSide,size).getType() == Material.IRON_FENCE)     ironBars.add(ironBar.getRelative(otherSide,size));
  }
  BlockFace portalFace=null;
  Portal oldPortal=null;
  Region region=plugin.regionManager.getRegion(b);
  for (int i=0; i < 6; i++) {
    BlockFace face2=BlockFace.values()[i];
    if (face2 == otherSide || face2.getOppositeFace() == otherSide)     continue;
    Block firstPortalBlock=firstIronBar.getRelative(otherSide).getRelative(face2);
    if (region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && region.getList(RegionSetting.PORTAL_BLOCKS).contains(firstPortalBlock.getTypeId())) {
      portalFace=face2;
      break;
    }
 else {
      V10Location loc=new V10Location(firstPortalBlock);
      if (borderBlocks.containsKey(loc))       oldPortal=borderBlocks.get(loc);
 else       oldPortal=insideBlocks.get(loc);
      portalFace=face2;
      break;
    }
  }
  if (portalFace == null)   return;
  if ((!plugin.config.CompactPortal && (((portalFace == BlockFace.UP || portalFace == BlockFace.DOWN) && ironBars.size() != 6) || (portalFace != BlockFace.UP && portalFace != BlockFace.DOWN && ironBars.size() != 8))) || (plugin.config.CompactPortal && (((portalFace == BlockFace.UP || portalFace == BlockFace.DOWN) && ironBars.size() != 2) || (portalFace != BlockFace.UP && portalFace != BlockFace.DOWN && ironBars.size() != 4))))   return;
  if (wool.getColor() == DyeColor.BLACK) {
    if (oldPortal != null)     oldPortal.delete();
    return;
  }
  PortalCoord portalc=new PortalCoord();
  int c=0;
  for (int i=0; i < ironBars.size() / 2; i++) {
    portalc.border.add(new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,1)));
    portalc.border.add(new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,3)));
    if (i == 0 || i == (ironBars.size() / 2) - 1)     portalc.border.add(new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,2)));
 else     portalc.inside[c++]=new V10Location(ironBars.get(i).getRelative(portalFace).getRelative(otherSide,2));
  }
  portalc.vertical=portalFace == BlockFace.UP || portalFace == BlockFace.DOWN;
  portalc.block=portalc.inside[0];
  if (oldPortal != null)   oldPortal.delete();
  if (portalc.border.size() == 0 || portalc.inside[0] == null)   return;
  for (  V10Location tb : portalc.border)   if ((!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(tb.getHandle().getBlock().getTypeId())) || borderBlocks.containsKey(tb) || insideBlocks.containsKey(tb))   return;
  for (  V10Location tb : portalc.inside)   if (tb != null)   if ((!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(tb.getHandle().getBlock().getTypeId())) || borderBlocks.containsKey(tb) || insideBlocks.containsKey(tb))   return;
  if (portalc.vertical)   portalc.destLoc[0]=new V10Location(portalc.inside[0].getHandle().getBlock().getRelative(portalFace.getOppositeFace()));
 else {
    Block block=portalc.inside[0].getHandle().getBlock().getRelative(portalFace.getOppositeFace());
    portalc.destLoc[0]=new V10Location(block);
    block=block.getRelative(BlockFace.UP);
    portalc.destLoc[1]=new V10Location(block);
  }
  portalc.tpFace=portalFace;
  boolean orange=wool.getColor() == DyeColor.ORANGE;
  Portal portal=new Portal(plugin,portalc.destLoc,portalc.block,portalc.border,portalc.inside,portalc.behind,region,orange,portalc.vertical,portalc.tpFace);
  if (orange) {
    if (region.orangePortal != null)     region.orangePortal.delete();
    region.orangePortal=portal;
  }
 else {
    if (region.bluePortal != null)     region.bluePortal.delete();
    region.bluePortal=portal;
  }
  portals.add(portal);
  region.portals.add(portal);
  portal.create();
}",0.9994567185802246
178706,"public void onDisable(){
  EntityRemoveEvent ere;
  for (  World w : getServer().getWorlds())   for (  Entity e : w.getEntities()) {
    ere=new EntityRemoveEvent(e);
    eL.despawn(ere);
  }
  for (  Region region : regionManager.regions.values()) {
    for (    Portal p : region.portals)     p.delete();
  }
  funnelBridgeManager.deleteAll();
}","public void onDisable(){
  EntityRemoveEvent ere;
  for (  World w : getServer().getWorlds())   for (  Entity e : w.getEntities()) {
    ere=new EntityRemoveEvent(e);
    eL.despawn(ere);
  }
  for (  Region region : regionManager.regions.values()) {
    for (    Portal p : region.portals)     p.delete();
  }
  funnelBridgeManager.deleteAll();
  getServer().getScheduler().cancelTasks(this);
}",0.935309973045822
178707,"private PortalCoord generatePortal(V10Location block,BlockFace face){
  PortalCoord portal=new PortalCoord();
  portal.block=block;
  Block rb=block.getHandle().getBlock();
switch (face) {
case DOWN:
case UP:
    if (!plugin.config.CompactPortal || plugin.config.FillPortalBack < 0) {
      portal.border.add(new V10Location(rb.getRelative(BlockFace.NORTH)));
      if (!plugin.config.CompactPortal) {
        portal.border.add(new V10Location(rb.getRelative(BlockFace.NORTH_WEST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.WEST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.SOUTH_WEST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.SOUTH)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.SOUTH_EAST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.EAST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.NORTH_EAST)));
      }
    }
  portal.inside.add(new V10Location(rb));
portal.destLoc=new V10Location(rb.getRelative(face));
face=face.getOppositeFace();
portal.behind.add(new V10Location(rb.getRelative(face)));
portal.tpFace=face;
portal.vertical=true;
return portal;
case NORTH:
case NORTH_EAST:
face=BlockFace.SOUTH;
break;
case EAST:
case SOUTH_EAST:
face=BlockFace.WEST;
break;
case SOUTH:
case SOUTH_WEST:
face=BlockFace.NORTH;
break;
default :
face=BlockFace.NORTH;
break;
}
portal.tpFace=face;
switch (face) {
case NORTH:
case SOUTH:
face=BlockFace.EAST;
break;
default :
face=BlockFace.NORTH;
}
if (!plugin.config.CompactPortal || plugin.config.FillPortalBack < 0) {
portal.border.add(new V10Location(rb.getRelative(BlockFace.DOWN,2)));
if (!plugin.config.CompactPortal) {
portal.border.add(new V10Location(rb.getRelative(BlockFace.UP)));
Block block2=rb.getRelative(face);
for (int i=0; i < 3; i++) portal.border.add(new V10Location(block2.getRelative(BlockFace.DOWN,i)));
block2=rb.getRelative(face.getOppositeFace());
for (int i=0; i < 3; i++) portal.border.add(new V10Location(block2.getRelative(BlockFace.DOWN,i)));
}
}
portal.inside.add(block);
Block block2=rb.getRelative(BlockFace.DOWN);
portal.inside.add(new V10Location(block2));
portal.destLoc=new V10Location(block2.getRelative(portal.tpFace));
portal.vertical=false;
block2.getRelative(portal.tpFace.getOppositeFace());
portal.behind.add(new V10Location(block2));
portal.behind.add(new V10Location(block2.getRelative(BlockFace.UP)));
return portal;
}","private PortalCoord generatePortal(V10Location block,BlockFace face){
  PortalCoord portal=new PortalCoord();
  portal.block=block;
  Block rb=block.getHandle().getBlock();
switch (face) {
case DOWN:
case UP:
    if (!plugin.config.CompactPortal || plugin.config.FillPortalBack < 0) {
      portal.border.add(new V10Location(rb.getRelative(BlockFace.NORTH)));
      if (!plugin.config.CompactPortal) {
        portal.border.add(new V10Location(rb.getRelative(BlockFace.NORTH_WEST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.WEST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.SOUTH_WEST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.SOUTH)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.SOUTH_EAST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.EAST)));
        portal.border.add(new V10Location(rb.getRelative(BlockFace.NORTH_EAST)));
      }
    }
  portal.inside.add(new V10Location(rb));
portal.destLoc=new V10Location(rb.getRelative(face));
face=face.getOppositeFace();
portal.behind.add(new V10Location(rb.getRelative(face)));
portal.tpFace=face;
portal.vertical=true;
return portal;
case NORTH:
case NORTH_EAST:
face=BlockFace.SOUTH;
break;
case EAST:
case SOUTH_EAST:
face=BlockFace.WEST;
break;
case SOUTH:
case SOUTH_WEST:
face=BlockFace.NORTH;
break;
default :
face=BlockFace.NORTH;
break;
}
portal.tpFace=face;
switch (face) {
case NORTH:
case SOUTH:
face=BlockFace.EAST;
break;
default :
face=BlockFace.NORTH;
}
if (!plugin.config.CompactPortal || plugin.config.FillPortalBack < 0) {
Block block2=rb.getRelative(BlockFace.DOWN,2);
portal.border.add(new V10Location(block2));
if (!plugin.config.CompactPortal) {
block2=block2.getRelative(face);
portal.border.add(new V10Location(block2));
for (int i=0; i < 3; i++) {
block2=block2.getRelative(BlockFace.UP);
portal.border.add(new V10Location(block2));
}
face=face.getOppositeFace();
for (int i=0; i < 2; i++) {
block2=block2.getRelative(face);
portal.border.add(new V10Location(block2));
}
for (int i=0; i < 3; i++) {
block2=block2.getRelative(BlockFace.DOWN);
portal.border.add(new V10Location(block2));
}
}
}
portal.inside.add(block);
Block block2=rb.getRelative(BlockFace.DOWN);
portal.inside.add(new V10Location(block2));
portal.destLoc=new V10Location(block2.getRelative(portal.tpFace.getOppositeFace()));
portal.vertical=false;
block2.getRelative(portal.tpFace);
portal.behind.add(new V10Location(block2));
portal.behind.add(new V10Location(block2.getRelative(BlockFace.UP)));
return portal;
}",0.8518811881188119
178708,"public void teleport(Entity entity,V10Location locTo,Vector vector){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=plugin.portalManager.awayBlocksGeneral.get(locTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=plugin.portalManager.awayBlocksX.get(locTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=plugin.portalManager.awayBlocksY.get(locTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=plugin.portalManager.awayBlocksZ.get(locTo);
  }
  if (portal == null && (entity instanceof FallingBlock || entity instanceof TNTPrimed))   portal=plugin.portalManager.awayBlocksY.get(locTo);
  if (portal == null || !portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical))   return;
  double x, y, z;
  for (  V10Location b : portal.inside) {
    x=b.x;
    y=b.y;
    z=b.z;
    if (!portal.vertical) {
      if (x + 0.5 < entity.getLocation().getX() && vector.getX() > 0)       return;
 else       if (x - 0.5 > entity.getLocation().getX() && vector.getX() < 0)       return;
 else       if (y + 0.5 < entity.getLocation().getZ() && vector.getZ() > 0)       return;
 else       if (z - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)       return;
    }
 else {
      if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return;
      if (y - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)       return;
    }
  }
  Portal destination=portal.getDestination();
  Location teleport=destination.teleport.getHandle();
  teleport.setX(teleport.getX() + 0.5D);
  teleport.setZ(teleport.getZ() + 0.5D);
  float yaw=entity.getLocation().getYaw();
  float pitch=entity.getLocation().getPitch();
  float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
    yaw-=90;
  break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
pitch=startyaw;
yaw=0;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
pitch=startyaw + 180;
yaw=0;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
entity.teleport(teleport);
entity.setVelocity(outvector);
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
}","public Location teleport(Entity entity,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=plugin.portalManager.awayBlocksGeneral.get(locTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=plugin.portalManager.awayBlocksX.get(locTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=plugin.portalManager.awayBlocksY.get(locTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=plugin.portalManager.awayBlocksZ.get(locTo);
  }
  if (portal == null && (entity instanceof FallingBlock || entity instanceof TNTPrimed))   portal=plugin.portalManager.awayBlocksY.get(locTo);
  if (portal == null || !portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical))   return null;
  double x, y, z;
  for (  V10Location b : portal.inside) {
    x=b.x;
    y=b.y;
    z=b.z;
    if (!portal.vertical) {
      if (x + 0.5 < entity.getLocation().getX() && vector.getX() > 0)       return null;
 else       if (x - 0.5 > entity.getLocation().getX() && vector.getX() < 0)       return null;
 else       if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
 else       if (z - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)       return null;
    }
 else {
      if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
      if (y - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)       return null;
    }
  }
  Portal destination=portal.getDestination();
  Location teleport=destination.teleport.getHandle();
  teleport.setX(teleport.getX() + 0.5D);
  teleport.setZ(teleport.getZ() + 0.5D);
  float yaw=entity.getLocation().getYaw();
  float pitch=entity.getLocation().getPitch();
  float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
    yaw-=90;
  break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
entity.setVelocity(outvector);
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
if (really && !entity.teleport(teleport)) return null;
return teleport;
}",0.9761020881670532
178709,"public void redGel(Player player,Vector vector,Region region){
  if (player.isSneaking()) {
    vector=vector.setX(0);
    vector=vector.setZ(0);
  }
 else {
    vector=vector.setX(vector.getX() * region.getDouble(RegionSetting.RED_GEL_VELOCITY_MULTIPLIER));
    vector=vector.setZ(vector.getZ() * region.getDouble(RegionSetting.RED_GEL_VELOCITY_MULTIPLIER));
  }
  if (vector.getX() > 11)   vector=vector.setX(11);
  if (vector.getZ() > 11)   vector=vector.setZ(11);
  if (vector.getX() < -11)   vector=vector.setX(-11);
  if (vector.getZ() < -11)   vector=vector.setZ(-11);
  player.setVelocity(vector);
}","private boolean redGel(Player player,Block under,Region region){
  String pn=player.getName();
  String rg=region.getString(RegionSetting.RED_GEL_BLOCK);
  if (onRedGel.containsKey(pn)) {
    if (!plugin.blockUtil.compareBlockToString(under,rg)) {
      resetPlayer(player);
      return false;
    }
    return true;
  }
  if (!plugin.blockUtil.compareBlockToString(under,rg))   return false;
  float os=player.getWalkSpeed();
  player.setWalkSpeed(os * (float)region.getDouble(RegionSetting.RED_GEL_VELOCITY_MULTIPLIER));
  onRedGel.put(pn,os);
  return true;
}",0.2102564102564102
178710,"public void useGel(Player player,V10Location locTo,Vector vector){
  Region region=plugin.regionManager.getRegion(locTo);
  Block block=locTo.getHandle().getBlock();
  if (region.getBoolean(RegionSetting.ENABLE_RED_GEL_BLOCKS) && plugin.blockUtil.compareBlockToString(block.getRelative(0,-1,0),region.getString(RegionSetting.RED_GEL_BLOCK)))   return;
  if (region.getBoolean(RegionSetting.ENABLE_BLUE_GEL_BLOCKS)) {
    if (player.getVelocity().getY() <= 0) {
      if (plugin.blockUtil.compareBlockToString(block.getRelative(0,-1,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getY()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(0,-2,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getY()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(0,-3,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
    }
    if (vector.getX() >= 0) {
      if (plugin.blockUtil.compareBlockToString(block.getRelative(1,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getX()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(2,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getX()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(3,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
    }
 else     if (vector.getX() <= 0) {
      if (plugin.blockUtil.compareBlockToString(block.getRelative(-1,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getX()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(-2,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getX()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(-3,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
    }
    if (vector.getZ() >= 0) {
      if (plugin.blockUtil.compareBlockToString(block.getRelative(0,0,1),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getZ()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(0,0,2),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getZ()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(0,0,3),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
    }
 else     if (vector.getZ() <= 0) {
      if (plugin.blockUtil.compareBlockToString(block.getRelative(0,0,-1),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getZ()) < 1 && plugin.blockUtil.compareBlockToString(block.getRelative(0,0,-2),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
 else       if (Math.abs(vector.getZ()) > 1 && plugin.blockUtil.compareBlockToString(block.getRelative(0,0,-3),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return;
    }
  }
  return;
}","public void useGel(Player player,V10Location locTo,Vector vector){
  V10Location vl=new V10Location(locTo.world,locTo.x,locTo.y - 1,locTo.z);
  for (  V10Location loc : plugin.portalManager.borderBlocks.keySet()) {
    if (loc.equals(vl)) {
      resetPlayer(player);
      return;
    }
  }
  for (  V10Location loc : plugin.portalManager.insideBlocks.keySet()) {
    if (loc.equals(vl)) {
      resetPlayer(player);
      return;
    }
  }
  Region region=plugin.regionManager.getRegion(locTo);
  Block block=locTo.getHandle().getBlock();
  if (region.getBoolean(RegionSetting.ENABLE_RED_GEL_BLOCKS))   redGel(player,block.getRelative(BlockFace.DOWN),region);
  if (region.getBoolean(RegionSetting.ENABLE_BLUE_GEL_BLOCKS)) {
    if (player.isSneaking() || ignore.contains(player))     return;
    String bg=region.getString(RegionSetting.BLUE_GEL_BLOCK);
    for (    BlockFace face : new BlockFace[]{BlockFace.DOWN,BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST,BlockFace.WEST})     if (plugin.blockUtil.compareBlockToString(block.getRelative(face),bg)) {
      blueGel(player,region,face == BlockFace.DOWN);
      break;
    }
  }
}",0.1874552826138802
178711,"@Override public void run(){
  Block b;
  for (  Grill g : grills.toArray(new Grill[0])) {
    b=g.firstBlock.getHandle().getBlock();
    if (g.disabled || !b.getWorld().isChunkLoaded(b.getChunk()))     continue;
    if (!g.create()) {
      V10Location loc=g.firstBlock;
      g.delete();
      placeRecursiveEmancipationGrill(loc);
    }
  }
}","@Override public void run(){
}",0.16
178712,"public void create(){
  byte color;
  if (orange)   color=(byte)plugin.util.getRightPortalColor(owner.colorPreset);
 else   color=(byte)plugin.util.getLeftPortalColor(owner.colorPreset);
  Block rb;
  for (  V10Location loc : border) {
    if (plugin.portalManager.borderBlocks.containsKey(loc))     plugin.portalManager.borderBlocks.get(loc).delete();
    if (plugin.portalManager.insideBlocks.containsKey(loc))     plugin.portalManager.insideBlocks.get(loc).delete();
    if (plugin.portalManager.behindBlocks.containsKey(loc))     plugin.portalManager.behindBlocks.get(loc).delete();
    rb=loc.getHandle().getBlock();
    oldBlocks.put(loc,plugin.blockUtil.getBlockData(rb));
    rb.setType(Material.WOOL);
    rb.setData(color);
    plugin.portalManager.borderBlocks.put(loc,this);
  }
  for (  V10Location loc : inside) {
    rb=loc.getHandle().getBlock();
    oldBlocks.put(loc,plugin.blockUtil.getBlockData(rb));
  }
  if (plugin.config.FillPortalBack > -1) {
    for (    V10Location loc : behind) {
      if (plugin.portalManager.borderBlocks.containsKey(loc))       plugin.portalManager.borderBlocks.get(loc).delete();
      if (plugin.portalManager.insideBlocks.containsKey(loc))       plugin.portalManager.insideBlocks.get(loc).delete();
      if (plugin.portalManager.behindBlocks.containsKey(loc))       plugin.portalManager.behindBlocks.get(loc).delete();
      rb=loc.getHandle().getBlock();
      oldBlocks.put(loc,plugin.blockUtil.getBlockData(rb));
      if (plugin.config.CompactPortal) {
        rb.setType(Material.WOOL);
        rb.setData(color);
      }
 else {
        rb.setTypeId(plugin.config.FillPortalBack);
      }
      plugin.portalManager.behindBlocks.put(loc,this);
    }
  }
  if (getDestination() == null)   close();
 else {
    open();
    if (getDestination().isRegionPortal())     plugin.regionManager.getRegion(centerBlock).regionPortalOpened(orange);
 else     getDestination().open();
  }
  if (isRegionPortal())   plugin.regionManager.getRegion(centerBlock).regionPortalCreated(orange);
  for (  V10Location loc : inside) {
    plugin.portalManager.insideBlocks.put(loc,this);
    for (int x=-2; x < 3; x++) {
      for (int y=-2; y < 3; y++) {
        for (int z=-2; z < 3; z++) {
          loc=new V10Location(loc.world,loc.x + x,loc.y + y,loc.z + z);
          plugin.portalManager.awayBlocksGeneral.put(loc,this);
          awayBlocks.add(loc);
        }
      }
    }
    for (int y=-2; y < 3; y++) {
      for (int z=-2; z < 3; z++) {
        loc=new V10Location(loc.world,loc.x + 3,loc.y + y,loc.z + z);
        plugin.portalManager.awayBlocksX.put(loc,this);
        awayBlocks.add(loc);
        loc=new V10Location(loc.world,loc.x + -3,loc.y + y,loc.z + z);
        plugin.portalManager.awayBlocksX.put(loc,this);
        awayBlocks.add(loc);
      }
    }
    for (int x=-2; x < 3; x++) {
      for (int z=-2; z < 3; z++) {
        loc=new V10Location(loc.world,loc.x + x,loc.y + 3,loc.z + z);
        plugin.portalManager.awayBlocksY.put(loc,this);
        awayBlocks.add(loc);
        loc=new V10Location(loc.world,loc.x + x,loc.y + 3,loc.z + z);
        plugin.portalManager.awayBlocksY.put(loc,this);
        awayBlocks.add(loc);
      }
    }
    for (int x=-2; x < 3; x++) {
      for (int y=-2; y < 3; y++) {
        loc=new V10Location(loc.world,loc.x + x,loc.y + y,loc.z + 3);
        plugin.portalManager.awayBlocksZ.put(loc,this);
        awayBlocks.add(loc);
        loc=new V10Location(loc.world,loc.x + x,loc.y + y,loc.z + 3);
        plugin.portalManager.awayBlocksZ.put(loc,this);
        awayBlocks.add(loc);
      }
    }
  }
}","public void create(){
  byte color;
  if (orange)   color=(byte)plugin.util.getRightPortalColor(owner.colorPreset);
 else   color=(byte)plugin.util.getLeftPortalColor(owner.colorPreset);
  Block rb;
  for (  V10Location loc : border) {
    if (plugin.portalManager.insideBlocks.containsKey(loc))     plugin.portalManager.insideBlocks.get(loc).delete();
    if (plugin.portalManager.behindBlocks.containsKey(loc))     plugin.portalManager.behindBlocks.get(loc).delete();
    rb=loc.getHandle().getBlock();
    oldBlocks.put(loc,plugin.blockUtil.getBlockData(rb));
    rb.setType(Material.WOOL);
    rb.setData(color);
    plugin.portalManager.borderBlocks.put(loc,this);
  }
  for (  V10Location loc : inside) {
    rb=loc.getHandle().getBlock();
    oldBlocks.put(loc,plugin.blockUtil.getBlockData(rb));
  }
  if (plugin.config.FillPortalBack > -1) {
    for (    V10Location loc : behind) {
      if (plugin.portalManager.borderBlocks.containsKey(loc))       plugin.portalManager.borderBlocks.get(loc).delete();
      if (plugin.portalManager.insideBlocks.containsKey(loc))       plugin.portalManager.insideBlocks.get(loc).delete();
      rb=loc.getHandle().getBlock();
      oldBlocks.put(loc,plugin.blockUtil.getBlockData(rb));
      if (plugin.config.CompactPortal) {
        rb.setType(Material.WOOL);
        rb.setData(color);
      }
 else {
        rb.setTypeId(plugin.config.FillPortalBack);
      }
      plugin.portalManager.behindBlocks.put(loc,this);
    }
  }
  if (getDestination() == null)   close();
 else {
    open();
    if (getDestination().isRegionPortal())     plugin.regionManager.getRegion(centerBlock).regionPortalOpened(orange);
 else     getDestination().open();
  }
  if (isRegionPortal())   plugin.regionManager.getRegion(centerBlock).regionPortalCreated(orange);
  for (  V10Location loc : inside) {
    plugin.portalManager.insideBlocks.put(loc,this);
    for (int x=-2; x < 3; x++) {
      for (int y=-2; y < 3; y++) {
        for (int z=-2; z < 3; z++) {
          loc=new V10Location(loc.world,loc.x + x,loc.y + y,loc.z + z);
          plugin.portalManager.awayBlocksGeneral.put(loc,this);
          awayBlocks.add(loc);
        }
      }
    }
    for (int y=-2; y < 3; y++) {
      for (int z=-2; z < 3; z++) {
        loc=new V10Location(loc.world,loc.x + 3,loc.y + y,loc.z + z);
        plugin.portalManager.awayBlocksX.put(loc,this);
        awayBlocks.add(loc);
        loc=new V10Location(loc.world,loc.x + -3,loc.y + y,loc.z + z);
        plugin.portalManager.awayBlocksX.put(loc,this);
        awayBlocks.add(loc);
      }
    }
    for (int x=-2; x < 3; x++) {
      for (int z=-2; z < 3; z++) {
        loc=new V10Location(loc.world,loc.x + x,loc.y + 3,loc.z + z);
        plugin.portalManager.awayBlocksY.put(loc,this);
        awayBlocks.add(loc);
        loc=new V10Location(loc.world,loc.x + x,loc.y + 3,loc.z + z);
        plugin.portalManager.awayBlocksY.put(loc,this);
        awayBlocks.add(loc);
      }
    }
    for (int x=-2; x < 3; x++) {
      for (int y=-2; y < 3; y++) {
        loc=new V10Location(loc.world,loc.x + x,loc.y + y,loc.z + 3);
        plugin.portalManager.awayBlocksZ.put(loc,this);
        awayBlocks.add(loc);
        loc=new V10Location(loc.world,loc.x + x,loc.y + y,loc.z + 3);
        plugin.portalManager.awayBlocksZ.put(loc,this);
        awayBlocks.add(loc);
      }
    }
  }
}",0.9658242389431362
178713,"public void deleteInside(){
  for (  V10Location b : inside) {
    b.getHandle().getBlock().setType(Material.AIR);
    plugin.grillManager.insideBlocks.remove(b.getHandle());
  }
}","public void deleteInside(){
  for (  V10Location b : inside) {
    b.getHandle().getBlock().setType(Material.AIR);
    plugin.grillManager.insideBlocks.remove(b);
  }
}",0.9655172413793104
178714,"public void delete(){
  deleteInside();
  plugin.config.deleteGrill(getStringLocation());
  plugin.grillManager.grills.remove(this);
  plugin.config.saveAll();
  for (  V10Location b : border) {
    plugin.grillManager.borderBlocks.remove(b.getHandle());
  }
}","public void delete(){
  deleteInside();
  plugin.config.deleteGrill(getStringLocation());
  plugin.grillManager.grills.remove(this);
  plugin.config.saveAll();
  for (  V10Location b : border)   plugin.grillManager.borderBlocks.remove(b);
}",0.948
178715,"public void setPortalInventory(Player player,Region region){
  PlayerInventory inv=player.getInventory();
  for (int i=0; i < 40; i++) {
    ItemStack item=inv.getItem(i);
    if (item == null || item.getTypeId() == 0)     continue;
    Boolean keep=false;
    for (    Object is : region.getList(RegionSetting.GRILL_INVENTORY_CLEAR_EXCEPTIONS)) {
      ItemStack itemcheck=plugin.util.getItemData((String)is);
      if (item.getTypeId() == itemcheck.getTypeId()) {
        keep=true;
        break;
      }
    }
    if (!keep)     inv.clear(i);
  }
  for (  Object is : region.getList(RegionSetting.UNIQUE_INVENTORY_ITEMS)) {
    ItemStack item=plugin.util.getItemData((String)is);
    if (item.getTypeId() == plugin.config.PortalTool && item.getDurability() == plugin.config.portalToolData)     inv.setItemInHand(item);
 else     inv.addItem(item);
  }
}","public void setPortalInventory(Player player,Region region){
  PlayerInventory inv=player.getInventory();
  for (int i=0; i < 40; i++) {
    ItemStack item=inv.getItem(i);
    if (item == null || item.getTypeId() == 0)     continue;
    boolean keep=false;
    for (    Object is : region.getList(RegionSetting.GRILL_INVENTORY_CLEAR_EXCEPTIONS)) {
      ItemStack itemcheck=plugin.util.getItemData((String)is);
      if (item.getTypeId() == itemcheck.getTypeId()) {
        keep=true;
        break;
      }
    }
    if (!keep)     inv.clear(i);
  }
  for (  Object is : region.getList(RegionSetting.UNIQUE_INVENTORY_ITEMS)) {
    ItemStack item=plugin.util.getItemData((String)is);
    if (item.getTypeId() == plugin.config.PortalTool && item.getDurability() == plugin.config.portalToolData)     inv.setItemInHand(item);
 else     inv.addItem(item);
  }
}",0.998833138856476
178716,"public void onBlockPistonExtend(BlockPistonExtendEvent event){
  if (event.isCancelled())   return;
  Region region=plugin.regionManager.getRegion(new V10Location(event.getBlock()));
  for (  Block b : event.getBlocks()) {
    if (blockedPistonBlocks.contains(b)) {
      event.setCancelled(true);
      return;
    }
    Portal portal=plugin.portalManager.insideBlocks.get(b.getRelative(event.getDirection()).getLocation());
    if (portal != null && region.getBoolean(RegionSetting.ENABLE_PISTON_BLOCK_TELEPORT)) {
      Portal destP=portal.getDestination();
      final Block destB=destP.teleport.getHandle().getBlock();
      if (!portal.open || !destP.open) {
        event.setCancelled(true);
        return;
      }
      if (destB.isLiquid() || destB.getType() == Material.AIR) {
        final Block endBlock=b.getRelative(event.getDirection());
        blockedPistonBlocks.add(endBlock);
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          public void run(){
            destB.setType(endBlock.getType());
            destB.setData(endBlock.getData(),false);
            endBlock.setType(Material.AIR);
            blockedPistonBlocks.remove(endBlock);
          }
        }
,2L);
      }
 else {
        event.setCancelled(true);
      }
    }
 else     if (plugin.portalManager.borderBlocks.containsKey(b.getLocation()) || plugin.grillManager.borderBlocks.containsKey(b.getLocation()) || plugin.grillManager.insideBlocks.containsKey(b.getLocation())) {
      event.setCancelled(true);
    }
  }
}","public void onBlockPistonExtend(BlockPistonExtendEvent event){
  if (event.isCancelled())   return;
  Region region=plugin.regionManager.getRegion(new V10Location(event.getBlock()));
  for (  Block b : event.getBlocks()) {
    if (blockedPistonBlocks.contains(b)) {
      event.setCancelled(true);
      return;
    }
    Portal portal=plugin.portalManager.insideBlocks.get(new V10Location(b.getRelative(event.getDirection()).getLocation()));
    if (portal != null && region.getBoolean(RegionSetting.ENABLE_PISTON_BLOCK_TELEPORT)) {
      Portal destP=portal.getDestination();
      final Block destB=destP.teleport.getHandle().getBlock();
      if (!portal.open || !destP.open) {
        event.setCancelled(true);
        return;
      }
      if (destB.isLiquid() || destB.getType() == Material.AIR) {
        final Block endBlock=b.getRelative(event.getDirection());
        blockedPistonBlocks.add(endBlock);
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          public void run(){
            destB.setType(endBlock.getType());
            destB.setData(endBlock.getData(),false);
            endBlock.setType(Material.AIR);
            blockedPistonBlocks.remove(endBlock);
          }
        }
,2L);
      }
 else       event.setCancelled(true);
    }
 else {
      V10Location loc=new V10Location(b.getLocation());
      if (plugin.portalManager.borderBlocks.containsKey(loc) || plugin.grillManager.borderBlocks.containsKey(loc) || plugin.grillManager.insideBlocks.containsKey(loc))       event.setCancelled(true);
    }
  }
}",0.9295055821371612
178717,"@EventHandler() public void onBlockBreak(BlockBreakEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  Portal portal=plugin.portalManager.borderBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.behindBlocks.get(loc);
  if (portal != null) {
    portal.delete();
    event.setCancelled(true);
    return;
  }
  portal=plugin.portalManager.insideBlocks.get(loc);
  if (portal != null) {
    if (portal.transmitter && block.getType() == Material.REDSTONE_TORCH_ON)     event.setCancelled(true);
    return;
  }
  Grill grill=plugin.grillManager.insideBlocks.get(loc);
  if (grill != null)   event.setCancelled(true);
  V10Location vb=new V10Location(block);
  Bridge bridge=plugin.funnelBridgeManager.bridgeBlocks.get(vb);
  if (bridge != null) {
    event.setCancelled(true);
    return;
  }
  bridge=plugin.funnelBridgeManager.bridgeMachineBlocks.get(vb);
  if (bridge != null) {
    if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_BRIDGE))     bridge.delete();
 else     event.setCancelled(true);
    return;
  }
  plugin.funnelBridgeManager.updateBridge(loc);
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(block,region.getString(RegionSetting.GRILL_MATERIAL))) {
    grill=plugin.grillManager.borderBlocks.get(loc);
    if (grill == null || !plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_GRILL))     return;
    grill.delete();
  }
  Material type=block.getType();
  if (type == Material.REDSTONE_WIRE && region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=event.getBlock().getLocation();
    for (int i=0; i < 4; i++) {
      BlockFace face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        for (        V10Location b : destination.inside)         b.getHandle().getBlock().setType(Material.AIR);
        portal.transmitter=false;
      }
    }
  }
}","@EventHandler() public void onBlockBreak(BlockBreakEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  Portal portal=plugin.portalManager.borderBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.behindBlocks.get(loc);
  if (portal != null) {
    portal.delete();
    event.setCancelled(true);
    return;
  }
  portal=plugin.portalManager.insideBlocks.get(loc);
  if (portal != null) {
    if (portal.transmitter && block.getType() == Material.REDSTONE_TORCH_ON)     event.setCancelled(true);
    return;
  }
  Grill grill=plugin.grillManager.insideBlocks.get(loc);
  if (grill != null)   event.setCancelled(true);
  V10Location vb=new V10Location(block);
  Bridge bridge=plugin.funnelBridgeManager.bridgeBlocks.get(vb);
  if (bridge != null) {
    event.setCancelled(true);
    return;
  }
  bridge=plugin.funnelBridgeManager.bridgeMachineBlocks.get(vb);
  if (bridge != null) {
    if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_BRIDGE))     bridge.delete();
 else     event.setCancelled(true);
    return;
  }
  plugin.funnelBridgeManager.updateBridge(loc);
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(block,region.getString(RegionSetting.GRILL_MATERIAL))) {
    grill=plugin.grillManager.borderBlocks.get(loc);
    if (grill != null) {
      if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_GRILL))       grill.delete();
 else       event.setCancelled(true);
      return;
    }
  }
  Material type=block.getType();
  if (type == Material.REDSTONE_WIRE && region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=event.getBlock().getLocation();
    for (int i=0; i < 4; i++) {
      BlockFace face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        for (        V10Location b : destination.inside)         b.getHandle().getBlock().setType(Material.AIR);
        portal.transmitter=false;
      }
    }
  }
}",0.9716840536512668
178718,"@EventHandler(ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){
  Material block=event.getBlock().getType();
  Bridge bridge=plugin.funnelBridgeManager.bridgeBlocks.get(new V10Location(event.getBlock()));
  if (bridge != null) {
    event.setCancelled(true);
  }
  if (block == Material.RAILS || block == Material.POWERED_RAIL || block == Material.DETECTOR_RAIL)   return;
  Portal portal=plugin.portalManager.insideBlocks.get(event.getBlockPlaced().getLocation());
  if (portal != null) {
    event.setCancelled(true);
    return;
  }
}","@EventHandler(ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){
  Material block=event.getBlock().getType();
  Bridge bridge=plugin.funnelBridgeManager.bridgeBlocks.get(new V10Location(event.getBlock()));
  if (bridge != null)   event.setCancelled(true);
  if (block == Material.RAILS || block == Material.POWERED_RAIL || block == Material.DETECTOR_RAIL)   return;
  Portal portal=plugin.portalManager.insideBlocks.get(new V10Location(event.getBlockPlaced()));
  if (portal != null) {
    event.setCancelled(true);
    return;
  }
}",0.9666966696669668
178719,"@EventHandler(ignoreCancelled=true) public void onBlockPhysics(BlockPhysicsEvent event){
  if (event.getBlock().getType() != Material.SUGAR_CANE_BLOCK)   return;
  Grill grill=plugin.grillManager.insideBlocks.get(event.getBlock().getLocation());
  if (grill == null)   return;
  event.setCancelled(true);
}","@EventHandler(ignoreCancelled=true) public void onBlockPhysics(BlockPhysicsEvent event){
  if (event.getBlock().getType() != Material.SUGAR_CANE_BLOCK)   return;
  System.out.print(""String_Node_Str"");
  Grill grill=plugin.grillManager.insideBlocks.get(new V10Location(event.getBlock().getLocation()));
  if (grill != null) {
    event.setCancelled(true);
    System.out.print(""String_Node_Str"");
  }
}",0.7553041018387553
178720,"public void onBlockPistonRetract(BlockPistonRetractEvent event){
  if (event.isCancelled() || !event.isSticky())   return;
  if (blockedPistonBlocks.contains(event.getRetractLocation().getBlock())) {
    event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(new V10Location(event.getBlock()));
  Portal portal=plugin.portalManager.insideBlocks.get(event.getRetractLocation());
  if (portal != null && region.getBoolean(RegionSetting.ENABLE_PISTON_BLOCK_TELEPORT)) {
    Portal destP=portal.getDestination();
    final Block sourceB=destP.teleport.getHandle().getBlock();
    if (!sourceB.isLiquid() && sourceB.getType() != Material.AIR) {
      final Block endBlock=event.getRetractLocation().getBlock().getRelative(event.getDirection().getOppositeFace());
      blockedPistonBlocks.add(endBlock);
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        public void run(){
          endBlock.setType(sourceB.getType());
          endBlock.setData(sourceB.getData());
          sourceB.setType(Material.AIR);
          blockedPistonBlocks.remove(endBlock);
        }
      }
,1L);
    }
  }
 else   if (plugin.portalManager.borderBlocks.containsKey(event.getRetractLocation()) || plugin.grillManager.borderBlocks.containsKey(event.getRetractLocation()) || plugin.grillManager.insideBlocks.containsKey(event.getRetractLocation())) {
    event.setCancelled(true);
  }
  plugin.funnelBridgeManager.updateBridge(new V10Location(event.getRetractLocation()));
}","public void onBlockPistonRetract(BlockPistonRetractEvent event){
  if (event.isCancelled() || !event.isSticky())   return;
  if (blockedPistonBlocks.contains(event.getRetractLocation().getBlock())) {
    event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(new V10Location(event.getBlock()));
  Portal portal=plugin.portalManager.insideBlocks.get(new V10Location(event.getRetractLocation()));
  if (portal != null && region.getBoolean(RegionSetting.ENABLE_PISTON_BLOCK_TELEPORT)) {
    Portal destP=portal.getDestination();
    final Block sourceB=destP.teleport.getHandle().getBlock();
    if (!sourceB.isLiquid() && sourceB.getType() != Material.AIR) {
      final Block endBlock=event.getRetractLocation().getBlock().getRelative(event.getDirection().getOppositeFace());
      blockedPistonBlocks.add(endBlock);
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        public void run(){
          endBlock.setType(sourceB.getType());
          endBlock.setData(sourceB.getData());
          sourceB.setType(Material.AIR);
          blockedPistonBlocks.remove(endBlock);
        }
      }
,1L);
    }
  }
 else {
    V10Location loc=new V10Location(event.getRetractLocation());
    if (plugin.portalManager.borderBlocks.containsKey(loc) || plugin.grillManager.borderBlocks.containsKey(loc) || plugin.grillManager.insideBlocks.containsKey(loc))     event.setCancelled(true);
  }
  plugin.funnelBridgeManager.updateBridge(new V10Location(event.getRetractLocation()));
}",0.791924454575057
178721,"@EventHandler() public void onBlockRedstoneChange(BlockRedstoneEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  Region region=plugin.regionManager.getRegion(loc);
  if (region.getBoolean(RegionSetting.INFINITE_DISPENSERS) && event.getNewCurrent() > 0) {
    Block poweredBlock=null;
    for (int i=0; i < 5; i++)     if (block.getRelative(BlockFace.values()[i]).getType() == Material.DISPENSER)     poweredBlock=block.getRelative(BlockFace.values()[i]);
    if (poweredBlock != null) {
      Dispenser dispenser=(Dispenser)poweredBlock.getState();
      ItemStack item=dispenser.getInventory().getItem(4);
      if (item != null && item.getType() != Material.AIR) {
        item.setAmount(item.getAmount() + 1);
        dispenser.getInventory().setItem(4,item);
      }
    }
  }
  if (region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=block.getLocation();
    BlockFace face;
    Block block2;
    for (int i=0; i < 5; i++) {
      face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        Portal portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        Material mat1, mat2;
        if (event.getNewCurrent() > 0) {
          portal.transmitter=true;
          mat1=Material.REDSTONE_TORCH_ON;
          mat2=Material.AIR;
        }
 else {
          portal.transmitter=false;
          mat1=Material.AIR;
          mat2=Material.REDSTONE_TORCH_ON;
        }
        for (        V10Location b : destination.inside) {
          block2=b.getHandle().getBlock();
          if (block2.getType() == mat2)           block2.setType(mat1);
        }
      }
    }
  }
  if (region.getBoolean(RegionSetting.ENABLE_GRILL_REDSTONE_DISABLING)) {
    Grill grill=null;
    for (int i=0; i < 5; i++) {
      if (grill == null) {
        grill=plugin.grillManager.borderBlocks.get(block.getRelative(BlockFace.values()[i]).getLocation());
        if (grill != null)         break;
      }
    }
    if (grill != null) {
      if (event.getNewCurrent() > 0)       grill.disable();
 else       grill.enable();
    }
  }
  if (region.getBoolean(RegionSetting.ENABLE_BRIDGE_REDSTONE_DISABLING) && block.getType() != Material.REDSTONE_TORCH_ON && block.getType() != Material.REDSTONE_TORCH_OFF) {
    Bridge bridge=null;
    Boolean cblock=false;
    for (int i=0; i < 5; i++) {
      if (bridge == null) {
        bridge=plugin.funnelBridgeManager.bridgeMachineBlocks.get(block.getRelative(BlockFace.values()[i]));
        if (bridge != null) {
          cblock=block.getRelative(BlockFace.values()[i]) == bridge.creationBlock;
          break;
        }
      }
    }
    if (bridge != null) {
      if (bridge instanceof Funnel && cblock) {
        ((Funnel)bridge).setReverse(event.getNewCurrent() > 0);
      }
 else {
        if (event.getNewCurrent() > 0)         bridge.deactivate();
 else         bridge.activate();
      }
    }
  }
  if (event.getOldCurrent() == 0 && event.getNewCurrent() > 0) {
    for (int i=0; i < 5; i++) {
      if (block.getRelative(BlockFace.values()[i]).getType() == Material.WOOL) {
        plugin.portalManager.tryPlacingAutomatedPortal(new V10Location(block.getRelative(BlockFace.values()[i])));
      }
    }
  }
}","@EventHandler() public void onBlockRedstoneChange(BlockRedstoneEvent event){
  if (event.getOldCurrent() == event.getNewCurrent())   return;
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  Region region=plugin.regionManager.getRegion(loc);
  if (region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=block.getLocation();
    BlockFace face;
    Block block2;
    for (int i=0; i < 5; i++) {
      face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        Portal portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        Material mat1, mat2;
        if (event.getNewCurrent() > 0) {
          portal.transmitter=true;
          mat1=Material.REDSTONE_TORCH_ON;
          mat2=Material.AIR;
        }
 else {
          portal.transmitter=false;
          mat1=Material.AIR;
          mat2=Material.REDSTONE_TORCH_ON;
        }
        for (        V10Location b : destination.inside) {
          block2=b.getHandle().getBlock();
          if (block2.getType() == mat2)           block2.setType(mat1);
        }
      }
    }
  }
  if (region.getBoolean(RegionSetting.ENABLE_GRILL_REDSTONE_DISABLING)) {
    Grill grill=null;
    for (int i=0; i < 5; i++) {
      grill=plugin.grillManager.borderBlocks.get(new V10Location(block.getRelative(BlockFace.values()[i])));
      if (grill != null)       break;
    }
    if (grill != null) {
      if (event.getNewCurrent() > 0)       grill.disable();
 else       grill.enable();
    }
  }
  if (region.getBoolean(RegionSetting.ENABLE_BRIDGE_REDSTONE_DISABLING) && block.getType() != Material.REDSTONE_TORCH_ON && block.getType() != Material.REDSTONE_TORCH_OFF) {
    Bridge bridge=null;
    Boolean cblock=false;
    for (int i=0; i < 5; i++) {
      if (bridge == null) {
        bridge=plugin.funnelBridgeManager.bridgeMachineBlocks.get(block.getRelative(BlockFace.values()[i]));
        if (bridge != null) {
          cblock=block.getRelative(BlockFace.values()[i]) == bridge.creationBlock;
          break;
        }
      }
    }
    if (bridge != null) {
      if (bridge instanceof Funnel && cblock) {
        ((Funnel)bridge).setReverse(event.getNewCurrent() > 0);
      }
 else {
        if (event.getNewCurrent() > 0)         bridge.deactivate();
 else         bridge.activate();
      }
    }
  }
  if (event.getOldCurrent() == 0 && event.getNewCurrent() > 0) {
    for (int i=0; i < 5; i++) {
      if (block.getRelative(BlockFace.values()[i]).getType() == Material.WOOL) {
        plugin.portalManager.tryPlacingAutomatedPortal(new V10Location(block.getRelative(BlockFace.values()[i])));
      }
    }
  }
}",0.881694030995857
178722,"@EventHandler(ignoreCancelled=false) public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=plugin.userManager.getUser(player);
  if (player.getItemInHand().getTypeId() == plugin.config.PortalTool && player.getItemInHand().getDurability() == plugin.config.portalToolData && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    event.setCancelled(true);
    Region region=plugin.regionManager.getRegion(new V10Location(player.getLocation()));
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && plugin.worldGuard != null && !plugin.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS) || !plugin.hasPermission(player,plugin.PERM_PLACE_PORTAL))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1 || plugin.config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName()) || !region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : plugin.portalManager.portals) {
          if (p.inside.contains(b)) {
            plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
            plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
 else         if (b.getType() == Material.TRAP_DOOR && (b.getData() & 4) == 0) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
      }
    }
    boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      V10Location loc=new V10Location(b);
      if (targetBlocks.size() < 2)       plugin.portalManager.placePortal(loc,event.getPlayer(),orange);
 else       plugin.portalManager.placePortal(loc,b.getFace(targetBlocks.get(targetBlocks.size() - 2)),event.getPlayer(),orange,true);
    }
 else     plugin.portalManager.placePortal(new V10Location(event.getClickedBlock()),event.getBlockFace(),event.getPlayer(),orange,true);
  }
 else   if (user.usingTool && player.getItemInHand().getTypeId() == plugin.config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.pointTwo=new V10Location(event.getClickedBlock());
    break;
case LEFT_CLICK_BLOCK:
  user.pointOne=new V10Location(event.getClickedBlock());
plugin.util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
{
V10Location loc=new V10Location(event.getClickedBlock());
if (plugin.grillManager.createGrill(player,loc) || plugin.funnelBridgeManager.placeGlassBridge(player,loc)) event.setCancelled(true);
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getTypeId() == 0 && event.getClickedBlock().getType() == Material.WOOL) {
Portal portal=plugin.portalManager.borderBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) portal=plugin.portalManager.insideBlocks.get(event.getClickedBlock().getLocation());
if (portal == null && plugin.config.CompactPortal) portal=plugin.portalManager.behindBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) return;
if (portal.owner.name != player.getName()) return;
int preset=user.colorPreset;
if (preset == plugin.config.ColorPresets.size() - 1) preset=0;
 else preset++;
user.colorPreset=preset;
user.recreatePortals();
String color1=DyeColor.values()[plugin.util.getLeftPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
String color2=DyeColor.values()[plugin.util.getRightPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
plugin.util.sendMessage(player,""String_Node_Str"" + color1 + ""String_Node_Str""+ color2);
}
}","@EventHandler(ignoreCancelled=false) public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=plugin.userManager.getUser(player);
  if (player.getItemInHand().getTypeId() == plugin.config.PortalTool && player.getItemInHand().getDurability() == plugin.config.portalToolData && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    event.setCancelled(true);
    Region region=plugin.regionManager.getRegion(new V10Location(player.getLocation()));
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && plugin.worldGuard != null && !plugin.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS) || !plugin.hasPermission(player,plugin.PERM_PLACE_PORTAL))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1 || plugin.config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName()) || !region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : plugin.portalManager.portals) {
          if (p.inside.contains(b)) {
            plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
            plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
 else         if (b.getType() == Material.TRAP_DOOR && (b.getData() & 4) == 0) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
      }
    }
    boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      V10Location loc=new V10Location(b);
      if (targetBlocks.size() < 2)       plugin.portalManager.placePortal(loc,event.getPlayer(),orange);
 else       plugin.portalManager.placePortal(loc,b.getFace(targetBlocks.get(targetBlocks.size() - 2)),event.getPlayer(),orange,true);
    }
 else     plugin.portalManager.placePortal(new V10Location(event.getClickedBlock()),event.getBlockFace(),event.getPlayer(),orange,true);
  }
 else   if (user.usingTool && player.getItemInHand().getTypeId() == plugin.config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.pointTwo=new V10Location(event.getClickedBlock());
    break;
case LEFT_CLICK_BLOCK:
  user.pointOne=new V10Location(event.getClickedBlock());
plugin.util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
{
V10Location loc=new V10Location(event.getClickedBlock());
if (plugin.grillManager.createGrill(player,loc) || plugin.funnelBridgeManager.placeGlassBridge(player,loc)) event.setCancelled(true);
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getTypeId() == 0 && event.getClickedBlock().getType() == Material.WOOL) {
V10Location loc=new V10Location(event.getClickedBlock());
Portal portal=plugin.portalManager.borderBlocks.get(loc);
if (portal == null) portal=plugin.portalManager.insideBlocks.get(loc);
if (portal == null && plugin.config.CompactPortal) portal=plugin.portalManager.behindBlocks.get(loc);
if (portal == null) return;
if (portal.owner.name != player.getName()) return;
int preset=user.colorPreset;
if (preset == plugin.config.ColorPresets.size() - 1) preset=0;
 else preset++;
user.colorPreset=preset;
user.recreatePortals();
String color1=DyeColor.values()[plugin.util.getLeftPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
String color2=DyeColor.values()[plugin.util.getRightPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
plugin.util.sendMessage(player,""String_Node_Str"" + color1 + ""String_Node_Str""+ color2);
}
}",0.9696018827221023
178723,"public V10Teleport teleport(Entity entity,Location oloc,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null) {
    if ((entity instanceof FallingBlock || entity instanceof TNTPrimed) && vector.getX() == 0.0D && vector.getZ() == 0.0D) {
      portal=plugin.portalManager.awayBlocksY.get(locTo);
    }
 else     if ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat) {
      portal=plugin.portalManager.awayBlocks.get(locTo);
      if (portal == null)       return null;
      Block to=locTo.getHandle().getBlock();
      for (int i=0; i < 2; i++) {
        BlockFace face=portal.awayBlocksY[i].getHandle().getBlock().getFace(to);
        if (face == null)         continue;
        if (face != BlockFace.SELF) {
          double x=1.0D, z=1.0D;
          boolean nef=false;
          boolean nwf=false;
switch (face) {
case NORTH_WEST:
            z=0.5D;
case NORTH:
          x=0.5D;
        nwf=true;
      break;
case NORTH_EAST:
    x=1.5D;
case EAST:
  z=0.5D;
nef=true;
break;
case SOUTH_EAST:
z=1.5D;
case SOUTH:
x=0.5D;
break;
case SOUTH_WEST:
x=0.5D;
default :
z=0.5D;
}
if (nef) {
if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z < z) return null;
}
 else if (nwf) {
if (oloc.getX() - locTo.x < x || oloc.getZ() - locTo.z > z) return null;
}
 else if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z > z) return null;
}
 else break;
}
}
 else return null;
}
if (!portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical)) return null;
Portal destination=portal.getDestination();
Location teleport=destination.teleport.getHandle();
teleport.setX(teleport.getX() + 0.5D);
teleport.setZ(teleport.getZ() + 0.5D);
float yaw=entity.getLocation().getYaw();
float pitch=entity.getLocation().getPitch();
float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
yaw-=90;
break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=450;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
if (really) {
if (!entity.teleport(teleport)) return null;
entity.setVelocity(outvector);
}
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
return new V10Teleport(teleport,outvector);
}","public V10Teleport teleport(Entity entity,Location oloc,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null) {
    if ((entity instanceof FallingBlock || entity instanceof TNTPrimed) && vector.getX() == 0.0D && vector.getZ() == 0.0D) {
      portal=plugin.portalManager.awayBlocksY.get(locTo);
    }
 else     if ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat) {
      portal=plugin.portalManager.awayBlocks.get(locTo);
      if (portal == null)       return null;
      Block to=locTo.getHandle().getBlock();
      for (int i=0; i < 2; i++) {
        BlockFace face=portal.awayBlocksY[i].getHandle().getBlock().getFace(to);
        if (face == null)         continue;
        if (face != BlockFace.SELF) {
          double x=1.0D, z=1.0D;
          boolean nef=false;
          boolean nwf=false;
switch (face) {
case NORTH_WEST:
            z=0.5D;
case NORTH:
          x=0.5D;
        nwf=true;
      break;
case NORTH_EAST:
    x=1.5D;
case EAST:
  z=0.5D;
nef=true;
break;
case SOUTH_EAST:
z=1.5D;
case SOUTH:
x=0.5D;
break;
case SOUTH_WEST:
x=0.5D;
default :
z=0.5D;
}
if (nef) {
if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z < z) return null;
}
 else if (nwf) {
if (oloc.getX() - locTo.x < x || oloc.getZ() - locTo.z > z) return null;
}
 else if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z > z) return null;
}
 else break;
}
}
 else return null;
}
if (!portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical)) return null;
final Portal destination=portal.getDestination();
Location teleport=destination.teleport.getHandle();
teleport.setX(teleport.getX() + 0.5D);
teleport.setZ(teleport.getZ() + 0.5D);
float yaw=entity.getLocation().getYaw();
float pitch=entity.getLocation().getPitch();
float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
yaw-=90;
break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=450;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
if (really) {
if (!entity.teleport(teleport)) return null;
entity.setVelocity(outvector);
}
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
public void run(){
destination.disabled=false;
}
}
,10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
return new V10Teleport(teleport,outvector);
}",0.9904784022294472
178724,"@Override public void run(){
  if (portal != null)   portal.disabled=false;
}","@Override public void run(){
  Location oloc;
  Vector vector;
  for (  World w : plugin.getServer().getWorlds()) {
    for (    Entity e : w.getEntities()) {
      if (e instanceof Player || e instanceof Vehicle || e.isDead())       continue;
      vector=e.getVelocity();
      oloc=e.getLocation();
      teleport(e,oloc,new V10Location(oloc),vector,true);
      plugin.funnelBridgeManager.EntityMoveCheck(e);
    }
  }
}",0.1516966067864271
178725,"public void PlaySound(Sound sound,Player player,V10Location loc){
  if (!plugin.regionManager.getRegion(loc).getBoolean(RegionSetting.ENABLE_SOUNDS))   return;
  Plugin spoutPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (spoutPlugin == null || !plugin.config.useSpoutSounds) {
    if (plugin.config.useNativeSounds) {
      String raw=plugin.config.soundNative[sound.ordinal()];
      if (raw == null || raw.equals(""String_Node_Str""))       return;
      String[] split=raw.split(""String_Node_Str"");
      float volume=0.0F;
      float pitch=volume;
      if (split.length > 1)       try {
        volume=Float.parseFloat(split[1]);
      }
 catch (      Exception e) {
        plugin.getLogger().info(""String_Node_Str"" + split[1] + ""String_Node_Str""+ split[0]);
        volume=1.0F;
      }
      if (split.length > 2) {
        try {
          volume=Float.parseFloat(split[1]);
        }
 catch (        Exception e) {
          plugin.getLogger().info(""String_Node_Str"" + split[2] + ""String_Node_Str""+ split[0]);
          pitch=1.0F;
        }
      }
      org.bukkit.Sound s=org.bukkit.Sound.valueOf(split[0]);
      World world;
      if (player != null)       world=player.getWorld();
 else       world=loc.getHandle().getWorld();
      world.playSound(loc.getHandle(),s,volume,pitch);
    }
 else {
      Byte instrument=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[0]);
      Byte note=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[1]);
      PlayNote(player,instrument,note);
    }
  }
 else {
    String url=plugin.config.soundUrls[sound.ordinal()];
    if (url != null && url.length() > 4 && url.length() < 257)     SpoutManager.getSoundManager().playGlobalCustomSoundEffect(plugin,url,false,loc.getHandle(),plugin.config.soundRange);
 else {
      plugin.config.useSpoutSounds=false;
      PlaySound(sound,player,loc);
      plugin.config.useSpoutSounds=true;
    }
  }
}","public void PlaySound(Sound sound,Player player,V10Location loc){
  if (!plugin.regionManager.getRegion(loc).getBoolean(RegionSetting.ENABLE_SOUNDS))   return;
  Plugin spoutPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (spoutPlugin == null || !plugin.config.useSpoutSounds) {
    if (plugin.config.useNativeSounds) {
      String raw=plugin.config.soundNative[sound.ordinal()];
      if (raw == null || raw.equals(""String_Node_Str""))       return;
      String[] split=raw.split(""String_Node_Str"");
      float volume=1.0F;
      float pitch=volume;
      if (split.length > 1)       try {
        volume=Float.parseFloat(split[1]);
      }
 catch (      Exception e) {
        plugin.getLogger().info(""String_Node_Str"" + split[1] + ""String_Node_Str""+ split[0]);
        volume=1.0F;
      }
      if (split.length > 2) {
        try {
          volume=Float.parseFloat(split[1]);
        }
 catch (        Exception e) {
          plugin.getLogger().info(""String_Node_Str"" + split[2] + ""String_Node_Str""+ split[0]);
          pitch=1.0F;
        }
      }
      org.bukkit.Sound s=org.bukkit.Sound.valueOf(split[0]);
      World world;
      if (player != null)       world=player.getWorld();
 else       world=loc.getHandle().getWorld();
      world.playSound(loc.getHandle(),s,volume,pitch);
    }
 else {
      Byte instrument=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[0]);
      Byte note=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[1]);
      PlayNote(player,instrument,note);
    }
  }
 else {
    String url=plugin.config.soundUrls[sound.ordinal()];
    if (url != null && url.length() > 4 && url.length() < 257)     SpoutManager.getSoundManager().playGlobalCustomSoundEffect(plugin,url,false,loc.getHandle(),plugin.config.soundRange);
 else {
      plugin.config.useSpoutSounds=false;
      PlaySound(sound,player,loc);
      plugin.config.useSpoutSounds=true;
    }
  }
}",0.9994984954864594
178726,"@EventHandler() public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  if (event.getEntity() instanceof Player) {
    Player player=(Player)event.getEntity();
    if (!plugin.hasPermission(player,plugin.PERM_DAMAGE_BOOTS))     return;
    Region region=plugin.regionManager.getRegion(new V10Location(player.getLocation()));
    if (event.getCause() == DamageCause.FALL && region.getBoolean(RegionSetting.ENABLE_FALL_DAMAGE_BOOTS) && region.getInt(RegionSetting.FALL_DAMAGE_BOOTS) == player.getInventory().getBoots().getTypeId())     event.setCancelled(true);
  }
}","@EventHandler() public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  if (event.getEntity() instanceof Player) {
    Player player=(Player)event.getEntity();
    if (!plugin.hasPermission(player,plugin.PERM_DAMAGE_BOOTS))     return;
    Region region=plugin.regionManager.getRegion(new V10Location(player.getLocation()));
    ItemStack is=player.getInventory().getBoots();
    if (event.getCause() == DamageCause.FALL && region.getBoolean(RegionSetting.ENABLE_FALL_DAMAGE_BOOTS) && is == null ? false : region.getInt(RegionSetting.FALL_DAMAGE_BOOTS) == is.getTypeId())     event.setCancelled(true);
  }
}",0.914790996784566
178727,"@EventHandler() public void onEntityExplode(EntityExplodeEvent event){
  if (event.isCancelled())   return;
  Region region=plugin.regionManager.getRegion(new V10Location(event.getLocation()));
  for (  Block block : event.blockList().toArray(new Block[0])) {
    Location loc=block.getLocation();
    if (block.getType() == Material.WOOL) {
      Portal portal=plugin.portalManager.borderBlocks.get(loc);
      if (portal == null)       portal=plugin.portalManager.insideBlocks.get(loc);
      if (portal == null)       portal=plugin.portalManager.behindBlocks.get(loc);
      if (portal != null) {
        portal.delete();
        if (region.getBoolean(RegionSetting.PREVENT_TNT_NEAR_PORTALS))         event.setCancelled(true);
        return;
      }
    }
    if (block.getType() == Material.SUGAR_CANE_BLOCK || plugin.blockUtil.compareBlockToString(block,region.getString(RegionSetting.GRILL_MATERIAL))) {
      Grill grill=plugin.grillManager.insideBlocks.get(loc);
      if (grill == null)       grill=plugin.grillManager.borderBlocks.get(loc);
      if (grill != null) {
        event.setCancelled(true);
        return;
      }
    }
  }
}","@EventHandler(ignoreCancelled=true) public void onEntityExplode(EntityExplodeEvent event){
  Region region=plugin.regionManager.getRegion(new V10Location(event.getLocation()));
  Iterator<Block> iter=event.blockList().iterator();
  Block block;
  V10Location loc;
  Portal portal;
  while (iter.hasNext()) {
    block=iter.next();
    loc=new V10Location(block.getLocation());
    if (block.getType() == Material.WOOL) {
      portal=plugin.portalManager.borderBlocks.get(loc);
      if (portal == null)       portal=plugin.portalManager.insideBlocks.get(loc);
      if (portal == null)       portal=plugin.portalManager.behindBlocks.get(loc);
      if (portal != null) {
        if (region.getBoolean(RegionSetting.PROTECT_PORTALS_FROM_TNT))         iter.remove();
 else {
          portal.delete();
          return;
        }
      }
    }
 else     if (block.getType() == Material.SUGAR_CANE_BLOCK || plugin.blockUtil.compareBlockToString(block,region.getString(RegionSetting.GRILL_MATERIAL))) {
      Grill grill=plugin.grillManager.insideBlocks.get(loc);
      if (grill == null)       grill=plugin.grillManager.borderBlocks.get(loc);
      if (grill != null) {
        event.setCancelled(true);
        return;
      }
    }
  }
}",0.8117400419287212
178728,"@EventHandler(ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=plugin.userManager.getUser(player);
  if (player.getItemInHand().getTypeId() == plugin.config.PortalTool && player.getItemInHand().getDurability() == plugin.config.portalToolData && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    event.setCancelled(true);
    Region region=plugin.regionManager.getRegion(new V10Location(player.getLocation()));
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && plugin.worldGuard != null && !plugin.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS) || !plugin.hasPermission(player,plugin.PERM_PLACE_PORTAL))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1 || plugin.config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName()) || !region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : plugin.portalManager.portals) {
          if (p.inside.contains(b)) {
            plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
            plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
 else         if (b.getType() == Material.TRAP_DOOR && (b.getData() & 4) == 0) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
      }
    }
    boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      V10Location loc=new V10Location(b);
      if (targetBlocks.size() < 2)       plugin.portalManager.placePortal(loc,event.getPlayer(),orange);
 else       plugin.portalManager.placePortal(loc,b.getFace(targetBlocks.get(targetBlocks.size() - 2)),event.getPlayer(),orange,true);
    }
 else     plugin.portalManager.placePortal(new V10Location(event.getClickedBlock()),event.getBlockFace(),event.getPlayer(),orange,true);
  }
 else   if (user.usingTool && player.getItemInHand().getTypeId() == plugin.config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.pointTwo=new V10Location(event.getClickedBlock());
    break;
case LEFT_CLICK_BLOCK:
  user.pointOne=new V10Location(event.getClickedBlock());
plugin.util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
{
V10Location loc=new V10Location(event.getClickedBlock());
if (plugin.grillManager.createGrill(player,loc) || plugin.funnelBridgeManager.placeGlassBridge(player,loc)) event.setCancelled(true);
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getTypeId() == 0 && event.getClickedBlock().getType() == Material.WOOL) {
Portal portal=plugin.portalManager.borderBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) portal=plugin.portalManager.insideBlocks.get(event.getClickedBlock().getLocation());
if (portal == null && plugin.config.CompactPortal) portal=plugin.portalManager.behindBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) return;
if (portal.owner.name != player.getName()) return;
int preset=user.colorPreset;
if (preset == plugin.config.ColorPresets.size() - 1) preset=0;
 else preset++;
user.colorPreset=preset;
user.recreatePortals();
String color1=DyeColor.values()[plugin.util.getLeftPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
String color2=DyeColor.values()[plugin.util.getRightPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
plugin.util.sendMessage(player,""String_Node_Str"" + color1 + ""String_Node_Str""+ color2);
}
}","@EventHandler(ignoreCancelled=false) public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=plugin.userManager.getUser(player);
  if (player.getItemInHand().getTypeId() == plugin.config.PortalTool && player.getItemInHand().getDurability() == plugin.config.portalToolData && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    event.setCancelled(true);
    Region region=plugin.regionManager.getRegion(new V10Location(player.getLocation()));
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && plugin.worldGuard != null && !plugin.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS) || !plugin.hasPermission(player,plugin.PERM_PLACE_PORTAL))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1 || plugin.config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName()) || !region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : plugin.portalManager.portals) {
          if (p.inside.contains(b)) {
            plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
            plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
 else         if (b.getType() == Material.TRAP_DOOR && (b.getData() & 4) == 0) {
          plugin.util.sendMessage(player,plugin.config.MessageCannotPlacePortal);
          plugin.util.PlaySound(Sound.PORTAL_CANNOT_CREATE,player,new V10Location(b.getLocation()));
          return;
        }
      }
    }
    boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      V10Location loc=new V10Location(b);
      if (targetBlocks.size() < 2)       plugin.portalManager.placePortal(loc,event.getPlayer(),orange);
 else       plugin.portalManager.placePortal(loc,b.getFace(targetBlocks.get(targetBlocks.size() - 2)),event.getPlayer(),orange,true);
    }
 else     plugin.portalManager.placePortal(new V10Location(event.getClickedBlock()),event.getBlockFace(),event.getPlayer(),orange,true);
  }
 else   if (user.usingTool && player.getItemInHand().getTypeId() == plugin.config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.pointTwo=new V10Location(event.getClickedBlock());
    break;
case LEFT_CLICK_BLOCK:
  user.pointOne=new V10Location(event.getClickedBlock());
plugin.util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
{
V10Location loc=new V10Location(event.getClickedBlock());
if (plugin.grillManager.createGrill(player,loc) || plugin.funnelBridgeManager.placeGlassBridge(player,loc)) event.setCancelled(true);
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getTypeId() == 0 && event.getClickedBlock().getType() == Material.WOOL) {
Portal portal=plugin.portalManager.borderBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) portal=plugin.portalManager.insideBlocks.get(event.getClickedBlock().getLocation());
if (portal == null && plugin.config.CompactPortal) portal=plugin.portalManager.behindBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) return;
if (portal.owner.name != player.getName()) return;
int preset=user.colorPreset;
if (preset == plugin.config.ColorPresets.size() - 1) preset=0;
 else preset++;
user.colorPreset=preset;
user.recreatePortals();
String color1=DyeColor.values()[plugin.util.getLeftPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
String color2=DyeColor.values()[plugin.util.getRightPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
plugin.util.sendMessage(player,""String_Node_Str"" + color1 + ""String_Node_Str""+ color2);
}
}",0.9993164730006836
178729,"public void load(){
  try {
    mainConfig.load(mainConfigFile);
    regionConfig.load(regionConfigFile);
    grillConfig.load(grillConfigFile);
    bridgeConfig.load(bridgeConfigFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InvalidConfigurationException e) {
    e.printStackTrace();
  }
  boolean aa=false;
  MessageCannotPlacePortal=getString(""String_Node_Str"",""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(getStringList(""String_Node_Str"",new ArrayList<String>()));
  DeleteOnQuit=getBoolean(""String_Node_Str"",false);
  String[] split=getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  PortalTool=Integer.parseInt(split[0]);
  if (split.length > 1)   portalToolData=Short.parseShort(split[1]);
 else   portalToolData=0;
  CompactPortal=getBoolean(""String_Node_Str"",false);
  RegionTool=getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=getBoolean(""String_Node_Str"",true);
  ColorPresets=getStringList(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  FillPortalBack=getInt(""String_Node_Str"",-1);
  useNativeSounds=getBoolean(""String_Node_Str"",true);
  soundNative[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  useSpoutSounds=getBoolean(""String_Node_Str"",true);
  if (mainConfig.isSet(""String_Node_Str"")) {
    if (!mainConfig.isSet(""String_Node_Str""))     useSpoutSounds=getBoolean(""String_Node_Str"",useSpoutSounds);
    getBoolean(""String_Node_Str"",useSpoutSounds);
    getBoolean(""String_Node_Str"",null);
    aa=true;
  }
  soundUrls[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundRange=getInt(""String_Node_Str"",20);
  for (  Player player : plugin.getServer().getOnlinePlayers())   plugin.userManager.createUser(player);
  if (regionConfig.getConfigurationSection(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getConfigurationSection(""String_Node_Str"").getKeys(false))   if (!regionName.equals(""String_Node_Str""))   plugin.regionManager.loadRegion(regionName);
  plugin.regionManager.loadRegion(""String_Node_Str"");
  plugin.getLogger().info(plugin.regionManager.regions.size() + ""String_Node_Str"");
  for (  String grill : (grillConfig.getStringList(""String_Node_Str"")).toArray(new String[0]))   plugin.grillManager.loadGrill(grill);
  plugin.getLogger().info(plugin.grillManager.grills.size() + ""String_Node_Str"");
  for (  String bridge : bridgeConfig.getStringList(""String_Node_Str""))   plugin.funnelBridgeManager.loadBridge(bridge);
  plugin.getLogger().info(plugin.funnelBridgeManager.bridges.size() + ""String_Node_Str"");
  if (aa)   plugin.getLogger().info(""String_Node_Str"");
  saveAll();
}","public void load(){
  try {
    mainConfig.load(mainConfigFile);
    regionConfig.load(regionConfigFile);
    grillConfig.load(grillConfigFile);
    bridgeConfig.load(bridgeConfigFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InvalidConfigurationException e) {
    e.printStackTrace();
  }
  boolean aa=false;
  MessageCannotPlacePortal=getString(""String_Node_Str"",""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(getStringList(""String_Node_Str"",new ArrayList<String>()));
  DeleteOnQuit=getBoolean(""String_Node_Str"",false);
  String[] split=getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  PortalTool=Integer.parseInt(split[0]);
  if (split.length > 1)   portalToolData=Short.parseShort(split[1]);
 else   portalToolData=0;
  CompactPortal=getBoolean(""String_Node_Str"",false);
  RegionTool=getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=getBoolean(""String_Node_Str"",true);
  ColorPresets=getStringList(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  FillPortalBack=getInt(""String_Node_Str"",-1);
  if (!mainConfig.isSet(""String_Node_Str""))   aa=true;
  useNativeSounds=getBoolean(""String_Node_Str"",true);
  soundNative[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNative[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  useSpoutSounds=getBoolean(""String_Node_Str"",false);
  if (mainConfig.isSet(""String_Node_Str"")) {
    if (!mainConfig.isSet(""String_Node_Str""))     useSpoutSounds=getBoolean(""String_Node_Str"",useSpoutSounds);
    getBoolean(""String_Node_Str"",useSpoutSounds);
    getBoolean(""String_Node_Str"",null);
    aa=true;
  }
  soundUrls[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundRange=getInt(""String_Node_Str"",20);
  for (  Player player : plugin.getServer().getOnlinePlayers())   plugin.userManager.createUser(player);
  if (regionConfig.getConfigurationSection(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getConfigurationSection(""String_Node_Str"").getKeys(false))   if (!regionName.equals(""String_Node_Str""))   plugin.regionManager.loadRegion(regionName);
  plugin.regionManager.loadRegion(""String_Node_Str"");
  plugin.getLogger().info(plugin.regionManager.regions.size() + ""String_Node_Str"");
  for (  String grill : (grillConfig.getStringList(""String_Node_Str"")).toArray(new String[0]))   plugin.grillManager.loadGrill(grill);
  plugin.getLogger().info(plugin.grillManager.grills.size() + ""String_Node_Str"");
  for (  String bridge : bridgeConfig.getStringList(""String_Node_Str""))   plugin.funnelBridgeManager.loadBridge(bridge);
  plugin.getLogger().info(plugin.funnelBridgeManager.bridges.size() + ""String_Node_Str"");
  if (aa)   plugin.getLogger().info(""String_Node_Str"");
  saveAll();
}",0.993808667864989
178730,"public void PlaySound(Sound sound,Player player,V10Location loc){
  if (!plugin.regionManager.getRegion(loc).getBoolean(RegionSetting.ENABLE_SOUNDS))   return;
  Plugin spoutPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (spoutPlugin == null || !plugin.config.useSpoutSounds) {
    if (plugin.config.useNativeSounds) {
      String raw=plugin.config.soundNative[sound.ordinal()];
      if (raw == null || raw.equals(""String_Node_Str""))       return;
      String[] split=raw.split(""String_Node_Str"");
      float volume=0.0F;
      float pitch=volume;
      if (split.length > 1)       try {
        volume=Float.parseFloat(split[1]);
      }
 catch (      Exception e) {
        plugin.getLogger().info(""String_Node_Str"" + split[1] + ""String_Node_Str""+ split[0]);
        volume=1.0F;
      }
      if (split.length > 2) {
        try {
          volume=Float.parseFloat(split[1]);
        }
 catch (        Exception e) {
          plugin.getLogger().info(""String_Node_Str"" + split[2] + ""String_Node_Str""+ split[0]);
          pitch=1.0F;
        }
      }
      org.bukkit.Sound s=org.bukkit.Sound.valueOf(split[0]);
      World world;
      if (player != null)       world=player.getWorld();
 else       world=loc.getHandle().getWorld();
      world.playSound(loc.getHandle(),s,volume,pitch);
    }
 else {
      Byte instrument=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[0]);
      Byte note=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[1]);
      PlayNote(player,instrument,note);
    }
  }
 else   SpoutManager.getSoundManager().playGlobalCustomSoundEffect(plugin,plugin.config.soundUrls[sound.ordinal()],false,loc.getHandle(),plugin.config.soundRange);
}","public void PlaySound(Sound sound,Player player,V10Location loc){
  if (!plugin.regionManager.getRegion(loc).getBoolean(RegionSetting.ENABLE_SOUNDS))   return;
  Plugin spoutPlugin=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (spoutPlugin == null || !plugin.config.useSpoutSounds) {
    if (plugin.config.useNativeSounds) {
      String raw=plugin.config.soundNative[sound.ordinal()];
      if (raw == null || raw.equals(""String_Node_Str""))       return;
      String[] split=raw.split(""String_Node_Str"");
      float volume=0.0F;
      float pitch=volume;
      if (split.length > 1)       try {
        volume=Float.parseFloat(split[1]);
      }
 catch (      Exception e) {
        plugin.getLogger().info(""String_Node_Str"" + split[1] + ""String_Node_Str""+ split[0]);
        volume=1.0F;
      }
      if (split.length > 2) {
        try {
          volume=Float.parseFloat(split[1]);
        }
 catch (        Exception e) {
          plugin.getLogger().info(""String_Node_Str"" + split[2] + ""String_Node_Str""+ split[0]);
          pitch=1.0F;
        }
      }
      org.bukkit.Sound s=org.bukkit.Sound.valueOf(split[0]);
      World world;
      if (player != null)       world=player.getWorld();
 else       world=loc.getHandle().getWorld();
      world.playSound(loc.getHandle(),s,volume,pitch);
    }
 else {
      Byte instrument=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[0]);
      Byte note=Byte.parseByte(plugin.config.soundNotes[sound.ordinal()].split(""String_Node_Str"")[1]);
      PlayNote(player,instrument,note);
    }
  }
 else {
    String url=plugin.config.soundUrls[sound.ordinal()];
    if (url != null && url.length() > 4 && url.length() < 257)     SpoutManager.getSoundManager().playGlobalCustomSoundEffect(plugin,url,false,loc.getHandle(),plugin.config.soundRange);
 else {
      plugin.config.useSpoutSounds=false;
      PlaySound(sound,player,loc);
      plugin.config.useSpoutSounds=true;
    }
  }
}",0.9195219123505975
178731,"public V10Teleport teleport(Entity entity,Location oloc,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null) {
    if ((entity instanceof FallingBlock || entity instanceof TNTPrimed) && vector.getX() == 0.0D && vector.getZ() == 0.0D) {
      portal=plugin.portalManager.awayBlocksY.get(locTo);
    }
 else     if ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat) {
      portal=plugin.portalManager.awayBlocks.get(locTo);
      if (portal == null)       return null;
      Block to=locTo.getHandle().getBlock();
      for (int i=0; i < 2; i++) {
        BlockFace face=portal.awayBlocksY[i].getHandle().getBlock().getFace(to);
        if (face == null)         continue;
        if (face != BlockFace.SELF) {
          double x=1.0D, z=1.0D;
switch (face) {
case NORTH_WEST:
            z=0.5D;
case NORTH:
          x=1.5D;
        break;
case NORTH_EAST:
      x=1.5D;
case EAST:
    z=1.5D;
  break;
case SOUTH_EAST:
z=1.5D;
case SOUTH:
x=0.5D;
break;
case SOUTH_WEST:
x=0.5D;
default :
z=0.5D;
}
if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z > z) return null;
}
 else {
System.out.print(""String_Node_Str"");
break;
}
}
}
 else return null;
}
if (!portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical)) return null;
Portal destination=portal.getDestination();
Location teleport=destination.teleport.getHandle();
teleport.setX(teleport.getX() + 0.5D);
teleport.setZ(teleport.getZ() + 0.5D);
float yaw=entity.getLocation().getYaw();
float pitch=entity.getLocation().getPitch();
float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
yaw-=90;
break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=450;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
if (really) {
if (!entity.teleport(teleport)) return null;
entity.setVelocity(outvector);
}
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
return new V10Teleport(teleport,outvector);
}","public V10Teleport teleport(Entity entity,Location oloc,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null) {
    if ((entity instanceof FallingBlock || entity instanceof TNTPrimed) && vector.getX() == 0.0D && vector.getZ() == 0.0D) {
      portal=plugin.portalManager.awayBlocksY.get(locTo);
    }
 else     if ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat) {
      portal=plugin.portalManager.awayBlocks.get(locTo);
      if (portal == null)       return null;
      Block to=locTo.getHandle().getBlock();
      for (int i=0; i < 2; i++) {
        BlockFace face=portal.awayBlocksY[i].getHandle().getBlock().getFace(to);
        if (face == null)         continue;
        if (face != BlockFace.SELF) {
          double x=1.0D, z=1.0D;
          boolean nef=false;
          boolean nwf=false;
switch (face) {
case NORTH_WEST:
            z=0.5D;
case NORTH:
          x=0.5D;
        nwf=true;
      break;
case NORTH_EAST:
    x=1.5D;
case EAST:
  z=0.5D;
nef=true;
break;
case SOUTH_EAST:
z=1.5D;
case SOUTH:
x=0.5D;
break;
case SOUTH_WEST:
x=0.5D;
default :
z=0.5D;
}
if (nef) {
if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z < z) return null;
}
 else if (nwf) {
if (oloc.getX() - locTo.x < x || oloc.getZ() - locTo.z > z) return null;
}
 else if (oloc.getX() - locTo.x > x || oloc.getZ() - locTo.z > z) return null;
}
 else break;
}
}
 else return null;
}
if (!portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical)) return null;
Portal destination=portal.getDestination();
Location teleport=destination.teleport.getHandle();
teleport.setX(teleport.getX() + 0.5D);
teleport.setZ(teleport.getZ() + 0.5D);
float yaw=entity.getLocation().getYaw();
float pitch=entity.getLocation().getPitch();
float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
yaw-=90;
break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=450;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
if (really) {
if (!entity.teleport(teleport)) return null;
entity.setVelocity(outvector);
}
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
return new V10Teleport(teleport,outvector);
}",0.9617826764106864
178732,"public void activate(){
  deactivate();
  BlockFace face=facingSide;
  V10Location nextV10Location=startBlock;
  Block nextBlock=nextV10Location.getHandle().getBlock();
  while (true) {
    Portal portal=plugin.portalManager.insideBlocks.get(nextV10Location);
    if (portal == null)     portal=plugin.portalManager.borderBlocks.get(nextV10Location);
    if (portal != null && portal.open) {
      nextV10Location=portal.getDestination().teleport;
      nextBlock=nextV10Location.getHandle().getBlock();
      face=portal.getDestination().teleportFace.getOppositeFace();
      involvedPortals.add(portal);
      plugin.funnelBridgeManager.involvedPortals.put(portal,this);
      continue;
    }
 else     if (nextBlock.getY() > 127 || (!nextBlock.isLiquid() && nextBlock.getType() != Material.AIR))     break;
    if (!nextBlock.getWorld().isChunkLoaded(nextBlock.getChunk()))     return;
    nextBlock.setType(Material.GLASS);
    bridgeBlocks.put(nextV10Location,0);
    plugin.funnelBridgeManager.bridgeBlocks.put(nextV10Location,this);
    nextBlock=nextBlock.getRelative(face);
  }
}","public void activate(){
  deactivate();
  BlockFace face=facingSide;
  V10Location nextV10Location=startBlock;
  Block nextBlock=nextV10Location.getHandle().getBlock();
  while (true) {
    Portal portal=plugin.portalManager.insideBlocks.get(nextV10Location);
    if (portal == null)     portal=plugin.portalManager.borderBlocks.get(nextV10Location);
    if (portal != null && portal.open) {
      nextV10Location=portal.getDestination().teleport;
      nextBlock=nextV10Location.getHandle().getBlock();
      face=portal.getDestination().teleportFace.getOppositeFace();
      involvedPortals.add(portal);
      plugin.funnelBridgeManager.involvedPortals.put(portal,this);
      continue;
    }
 else     if (nextBlock.getY() > nextBlock.getWorld().getMaxHeight() - 1 || (!nextBlock.isLiquid() && nextBlock.getType() != Material.AIR) || !nextBlock.getWorld().isChunkLoaded(nextBlock.getChunk()))     return;
    nextBlock.setType(Material.GLASS);
    bridgeBlocks.put(nextV10Location,0);
    plugin.funnelBridgeManager.bridgeBlocks.put(nextV10Location,this);
    nextBlock=nextBlock.getRelative(face);
  }
}",0.9703872437357632
178733,"public Location teleport(Entity entity,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=plugin.portalManager.awayBlocksGeneral.get(locTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=plugin.portalManager.awayBlocksX.get(locTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=plugin.portalManager.awayBlocksY.get(locTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=plugin.portalManager.awayBlocksZ.get(locTo);
  }
  if (portal == null && (entity instanceof FallingBlock || entity instanceof TNTPrimed))   portal=plugin.portalManager.awayBlocksY.get(locTo);
  if (portal == null || !portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical))   return null;
  double x, y, z;
  for (  V10Location b : portal.inside) {
    x=b.x;
    y=b.y;
    z=b.z;
    if (!portal.vertical) {
      if (x + 0.5 < entity.getLocation().getX() && vector.getX() > 0)       return null;
 else       if (x - 0.5 > entity.getLocation().getX() && vector.getX() < 0)       return null;
 else       if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
 else       if (z - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)       return null;
    }
 else {
      if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
      if (y - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)       return null;
    }
  }
  Portal destination=portal.getDestination();
  Location teleport=destination.teleport.getHandle();
  teleport.setX(teleport.getX() + 0.5D);
  teleport.setZ(teleport.getZ() + 0.5D);
  float yaw=entity.getLocation().getYaw();
  float pitch=entity.getLocation().getPitch();
  float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
    yaw-=90;
  break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
entity.setVelocity(outvector);
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
if (really && !entity.teleport(teleport)) return null;
return teleport;
}","public V10Teleport teleport(Entity entity,V10Location locTo,Vector vector,boolean really){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=plugin.portalManager.awayBlocksGeneral.get(locTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=plugin.portalManager.awayBlocksX.get(locTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=plugin.portalManager.awayBlocksY.get(locTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=plugin.portalManager.awayBlocksZ.get(locTo);
  }
  if (portal == null && (entity instanceof FallingBlock || entity instanceof TNTPrimed))   portal=plugin.portalManager.awayBlocksY.get(locTo);
  if (portal == null || !portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical))   return null;
  double x, y, z;
  for (  V10Location b : portal.inside) {
    x=b.x;
    y=b.y;
    z=b.z;
    if (!portal.vertical) {
      if (x + 0.5 < entity.getLocation().getX() && vector.getX() > 0)       return null;
 else       if (x - 0.5 > entity.getLocation().getX() && vector.getX() < 0)       return null;
 else       if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
 else       if (z - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)       return null;
    }
 else {
      if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
      if (y - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)       return null;
    }
  }
  Portal destination=portal.getDestination();
  Location teleport=destination.teleport.getHandle();
  teleport.setX(teleport.getX() + 0.5D);
  teleport.setZ(teleport.getZ() + 0.5D);
  float yaw=entity.getLocation().getYaw();
  float pitch=entity.getLocation().getPitch();
  float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
    yaw-=90;
  break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
yaw=pitch;
pitch=startyaw + 180;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
if (really && !entity.teleport(teleport)) return null;
if (really) {
if (!entity.teleport(teleport)) return null;
entity.setVelocity(outvector);
}
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
return new V10Teleport(teleport,outvector);
}",0.9400501481650332
178734,"public boolean placeRecursiveEmancipationGrill(V10Location initial){
  Region region=plugin.regionManager.getRegion(initial);
  String borderID=region.getString(RegionSetting.GRILL_MATERIAL);
  if (!plugin.blockUtil.compareBlockToString(initial,borderID) || !region.getBoolean(RegionSetting.ENABLE_GRILLS))   return false;
  for (  Grill grill : grills)   if (grill.border.contains(initial))   return false;
  startRecurse(initial,borderID,BlockFace.WEST,BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST,BlockFace.DOWN,BlockFace.UP);
  if (!complete)   startRecurse(initial,borderID,BlockFace.UP,BlockFace.WEST,BlockFace.EAST,BlockFace.DOWN,BlockFace.SOUTH,BlockFace.NORTH);
  if (!complete)   startRecurse(initial,borderID,BlockFace.UP,BlockFace.SOUTH,BlockFace.NORTH,BlockFace.DOWN,BlockFace.EAST,BlockFace.WEST);
  if (!complete)   return false;
  Grill grill=new Grill(plugin,border,inside,initial);
  grills.add(grill);
  grill.create();
  return true;
}","public boolean placeRecursiveEmancipationGrill(V10Location initial){
  Region region=plugin.regionManager.getRegion(initial);
  String borderID=region.getString(RegionSetting.GRILL_MATERIAL);
  System.out.print(initial.getHandle().getBlock().getTypeId() + ""String_Node_Str"" + borderID);
  if (!plugin.blockUtil.compareBlockToString(initial,borderID) || !region.getBoolean(RegionSetting.ENABLE_GRILLS))   return false;
  for (  Grill grill : grills)   if (grill.border.contains(initial))   return false;
  startRecurse(initial,borderID,BlockFace.WEST,BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST,BlockFace.DOWN,BlockFace.UP);
  if (!complete)   startRecurse(initial,borderID,BlockFace.UP,BlockFace.WEST,BlockFace.EAST,BlockFace.DOWN,BlockFace.SOUTH,BlockFace.NORTH);
  if (!complete)   startRecurse(initial,borderID,BlockFace.UP,BlockFace.SOUTH,BlockFace.NORTH,BlockFace.DOWN,BlockFace.EAST,BlockFace.WEST);
  if (!complete)   return false;
  Grill grill=new Grill(plugin,border,inside,initial);
  grills.add(grill);
  grill.create();
  return true;
}",0.9527127924340468
178735,"public void onEnable(){
  config=new Config(this);
  Server s=getServer();
  PluginManager pm=s.getPluginManager();
  pm.registerEvents(new PortalStickPlayerListener(this),this);
  pm.registerEvents(new PortalStickBlockListener(this),this);
  pm.registerEvents(new PortalStickVehicleListener(this),this);
  pm.registerEvents(new PortalStickEntityListener(this),this);
  pm.registerEvents(new PortalStickWorldListener(this),this);
  worldGuard=(WorldGuardPlugin)pm.getPlugin(""String_Node_Str"");
  config.load();
  s.getScheduler().scheduleSyncRepeatingTask(this,grillManager,400L,400L);
  s.getScheduler().scheduleSyncRepeatingTask(this,entityManager,1L,2L);
  ArrayList<BaseCommand> tmpList=new ArrayList<BaseCommand>();
  tmpList.add(new RegionToolCommand(this));
  tmpList.add(new SetRegionCommand(this));
  tmpList.add(new ReloadCommand(this));
  tmpList.add(new DeleteAllCommand(this));
  tmpList.add(new DeleteCommand(this));
  tmpList.add(new HelpCommand(this));
  tmpList.add(new RegionListCommand(this));
  tmpList.add(new DeleteRegionCommand(this));
  tmpList.add(new FlagCommand(this));
  tmpList.add(new RegionInfoCommand(this));
  commands=tmpList.toArray(new BaseCommand[0]);
}","public void onEnable(){
  config=new Config(this);
  Server s=getServer();
  PluginManager pm=s.getPluginManager();
  pm.registerEvents(pL,this);
  pm.registerEvents(new PortalStickBlockListener(this),this);
  pm.registerEvents(new PortalStickVehicleListener(this),this);
  pm.registerEvents(new PortalStickEntityListener(this),this);
  pm.registerEvents(new PortalStickWorldListener(this),this);
  worldGuard=(WorldGuardPlugin)pm.getPlugin(""String_Node_Str"");
  config.load();
  s.getScheduler().scheduleSyncRepeatingTask(this,grillManager,400L,400L);
  s.getScheduler().scheduleSyncRepeatingTask(this,entityManager,1L,2L);
  ArrayList<BaseCommand> tmpList=new ArrayList<BaseCommand>();
  tmpList.add(new RegionToolCommand(this));
  tmpList.add(new SetRegionCommand(this));
  tmpList.add(new ReloadCommand(this));
  tmpList.add(new DeleteAllCommand(this));
  tmpList.add(new DeleteCommand(this));
  tmpList.add(new HelpCommand(this));
  tmpList.add(new RegionListCommand(this));
  tmpList.add(new DeleteRegionCommand(this));
  tmpList.add(new FlagCommand(this));
  tmpList.add(new RegionInfoCommand(this));
  commands=tmpList.toArray(new BaseCommand[0]);
  PlayerJoinEvent pje;
  for (  Player p : getServer().getOnlinePlayers()) {
    pje=new PlayerJoinEvent(p,null);
    pL.onPlayerJoin(pje);
  }
}",0.9273384183059012
178736,"public void onDisable(){
  ArrayList<String> copy=new ArrayList<String>(gelManager.onRedGel.keySet());
  Player p;
  Server s=getServer();
  for (  String pn : copy) {
    p=s.getPlayerExact(pn);
    gelManager.resetPlayer(p);
  }
  config.saveAll();
  config.unLoad();
}","public void onDisable(){
  PlayerQuitEvent pqe;
  for (  Player p : getServer().getOnlinePlayers()) {
    pqe=new PlayerQuitEvent(p,null);
    pL.onPlayerQuit(pqe);
  }
  for (  User user : userManager.users.values())   portalManager.deletePortals(user);
}",0.1442125237191651
178737,"@EventHandler(ignoreCancelled=true) public void onBlockBurn2(BlockBurnEvent event){
  V10Location loc=new V10Location(event.getBlock().getLocation());
  Portal portal=plugin.portalManager.borderBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.insideBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.behindBlocks.get(loc);
  if (plugin.portalManager.borderBlocks.containsKey(loc) || plugin.portalManager.insideBlocks.containsKey(loc) || plugin.portalManager.behindBlocks.containsKey(loc)) {
    event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.BLUE_GEL_BLOCK)) || plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.RED_GEL_BLOCK))) {
    System.out.print(""String_Node_Str"");
    event.setCancelled(true);
  }
}","@EventHandler(ignoreCancelled=true) public void onBlockBurn2(BlockBurnEvent event){
  V10Location loc=new V10Location(event.getBlock());
  if (plugin.portalManager.borderBlocks.containsKey(loc) || plugin.portalManager.insideBlocks.containsKey(loc) || plugin.portalManager.behindBlocks.containsKey(loc)) {
    event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.BLUE_GEL_BLOCK)) || plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.RED_GEL_BLOCK))) {
    System.out.print(""String_Node_Str"");
    event.setCancelled(true);
  }
}",0.8608695652173913
178738,"@EventHandler() public void onBlockBreak(BlockBreakEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  Portal portal=plugin.portalManager.borderBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.behindBlocks.get(loc);
  if (portal != null) {
    portal.delete();
    event.setCancelled(true);
    return;
  }
  portal=plugin.portalManager.insideBlocks.get(loc);
  if (portal != null) {
    if (portal.transmitter && block.getType() == Material.REDSTONE_TORCH_ON)     event.setCancelled(true);
    return;
  }
  Grill grill=plugin.grillManager.insideBlocks.get(loc);
  if (grill != null)   event.setCancelled(true);
  V10Location vb=new V10Location(block);
  Bridge bridge=plugin.funnelBridgeManager.bridgeBlocks.get(vb);
  if (bridge != null) {
    event.setCancelled(true);
    return;
  }
  bridge=plugin.funnelBridgeManager.bridgeMachineBlocks.get(vb);
  if (bridge != null) {
    if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_BRIDGE))     bridge.delete();
 else     event.setCancelled(true);
    return;
  }
  plugin.funnelBridgeManager.updateBridge(loc);
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(block,region.getString(RegionSetting.GRILL_MATERIAL))) {
    grill=plugin.grillManager.borderBlocks.get(loc);
    if (grill != null) {
      if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_GRILL))       grill.delete();
 else       event.setCancelled(true);
      return;
    }
  }
  Material type=block.getType();
  if (type == Material.REDSTONE_WIRE && region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=event.getBlock().getLocation();
    for (int i=0; i < 4; i++) {
      BlockFace face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        for (        V10Location b : destination.inside)         b.getHandle().getBlock().setType(Material.AIR);
        portal.transmitter=false;
      }
    }
  }
}","@EventHandler() public void onBlockBreak(BlockBreakEvent event){
  Block block=event.getBlock();
  V10Location loc=new V10Location(block);
  plugin.funnelBridgeManager.updateBridge(loc);
  Portal portal=null;
  if (plugin.portalManager.borderBlocks.containsKey(loc))   portal=plugin.portalManager.borderBlocks.get(loc);
 else   if (plugin.portalManager.behindBlocks.containsKey(loc))   portal=plugin.portalManager.behindBlocks.get(loc);
 else   if (plugin.portalManager.insideBlocks.containsKey(loc)) {
    portal=plugin.portalManager.insideBlocks.get(loc);
    if (portal.transmitter && block.getType() == Material.REDSTONE_TORCH_ON) {
      event.setCancelled(true);
      return;
    }
    if (portal.open)     return;
  }
  if (portal != null) {
    portal.delete();
    event.setCancelled(true);
    return;
  }
  if (plugin.grillManager.insideBlocks.containsKey(loc) || plugin.funnelBridgeManager.bridgeBlocks.containsKey(loc)) {
    event.setCancelled(true);
    return;
  }
  if (plugin.funnelBridgeManager.bridgeMachineBlocks.containsKey(loc)) {
    if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_BRIDGE))     plugin.funnelBridgeManager.bridgeMachineBlocks.get(loc).delete();
 else     event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(block,region.getString(RegionSetting.GRILL_MATERIAL))) {
    if (plugin.grillManager.borderBlocks.containsKey(loc)) {
      if (plugin.hasPermission(event.getPlayer(),plugin.PERM_DELETE_GRILL))       plugin.grillManager.borderBlocks.get(loc).delete();
 else       event.setCancelled(true);
      return;
    }
  }
  Material type=block.getType();
  if (type == Material.REDSTONE_WIRE && region.getBoolean(RegionSetting.ENABLE_REDSTONE_TRANSFER)) {
    Location l=block.getLocation();
    for (int i=0; i < 4; i++) {
      BlockFace face=BlockFace.values()[i];
      loc=new V10Location(new Location(l.getWorld(),l.getX() + face.getModX(),l.getY() + face.getModY(),l.getZ() + face.getModZ()));
      if (plugin.portalManager.insideBlocks.containsKey(loc)) {
        portal=plugin.portalManager.insideBlocks.get(loc);
        if (!portal.open)         continue;
        Portal destination=portal.getDestination();
        if (destination == null || destination.transmitter)         continue;
        for (        V10Location b : destination.inside)         b.getHandle().getBlock().setType(Material.AIR);
        portal.transmitter=false;
      }
    }
  }
}",0.7132322818517002
178739,"@EventHandler(ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){
  Material block=event.getBlock().getType();
  Bridge bridge=plugin.funnelBridgeManager.bridgeBlocks.get(new V10Location(event.getBlock()));
  if (bridge != null)   event.setCancelled(true);
  if (block == Material.RAILS || block == Material.POWERED_RAIL || block == Material.DETECTOR_RAIL)   return;
  Portal portal=plugin.portalManager.insideBlocks.get(new V10Location(event.getBlockPlaced()));
  if (portal != null) {
    event.setCancelled(true);
    return;
  }
}","@EventHandler(ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){
  Material block=event.getBlock().getType();
  if (plugin.funnelBridgeManager.bridgeBlocks.containsKey(new V10Location(event.getBlock()))) {
    event.setCancelled(true);
    return;
  }
  if (block == Material.RAILS || block == Material.POWERED_RAIL || block == Material.DETECTOR_RAIL)   return;
  if (plugin.portalManager.insideBlocks.containsKey(new V10Location(event.getBlockPlaced())))   event.setCancelled(true);
}",0.6862003780718336
178740,"@EventHandler(ignoreCancelled=true) public void onBlockBurn(BlockIgniteEvent event){
  V10Location loc=new V10Location(event.getBlock().getLocation());
  Portal portal=plugin.portalManager.borderBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.insideBlocks.get(loc);
  if (portal == null)   portal=plugin.portalManager.behindBlocks.get(loc);
  if (plugin.portalManager.borderBlocks.containsKey(loc) || plugin.portalManager.insideBlocks.containsKey(loc) || plugin.portalManager.behindBlocks.containsKey(loc)) {
    event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.BLUE_GEL_BLOCK)) || plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.RED_GEL_BLOCK))) {
    System.out.print(""String_Node_Str"");
    event.setCancelled(true);
  }
}","@EventHandler(ignoreCancelled=true) public void onBlockBurn(BlockIgniteEvent event){
  V10Location loc=new V10Location(event.getBlock());
  if (plugin.portalManager.borderBlocks.containsKey(loc) || plugin.portalManager.insideBlocks.containsKey(loc) || plugin.portalManager.behindBlocks.containsKey(loc)) {
    event.setCancelled(true);
    return;
  }
  Region region=plugin.regionManager.getRegion(loc);
  if (plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.BLUE_GEL_BLOCK)) || plugin.blockUtil.compareBlockToString(loc,(String)region.settings.get(RegionSetting.RED_GEL_BLOCK))) {
    System.out.print(""String_Node_Str"");
    event.setCancelled(true);
  }
}",0.8610421836228288
178741,"public Location teleport(Entity entity,V10Location locTo,Vector vector){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return null;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=plugin.portalManager.awayBlocksGeneral.get(locTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=plugin.portalManager.awayBlocksX.get(locTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=plugin.portalManager.awayBlocksY.get(locTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=plugin.portalManager.awayBlocksZ.get(locTo);
  }
  if (portal == null && (entity instanceof FallingBlock || entity instanceof TNTPrimed))   portal=plugin.portalManager.awayBlocksY.get(locTo);
  if (portal == null || !portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical))   return null;
  double x, y, z;
  for (  V10Location b : portal.inside) {
    x=b.x;
    y=b.y;
    z=b.z;
    if (!portal.vertical) {
      if (x + 0.5 < entity.getLocation().getX() && vector.getX() > 0)       return null;
 else       if (x - 0.5 > entity.getLocation().getX() && vector.getX() < 0)       return null;
 else       if (y + 0.5 < entity.getLocation().getZ() && vector.getZ() > 0)       return null;
 else       if (z - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)       return null;
    }
 else {
      if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return null;
      if (y - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)       return null;
    }
  }
  Portal destination=portal.getDestination();
  Location teleport=destination.teleport.getHandle();
  teleport.setX(teleport.getX() + 0.5D);
  teleport.setY(teleport.getY() + 0.5D);
  teleport.setZ(teleport.getZ() + 0.5D);
  float yaw=entity.getLocation().getYaw();
  float pitch=entity.getLocation().getPitch();
  float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
    yaw-=90;
  break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw=-270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
pitch=startyaw;
yaw=0;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
pitch=startyaw + 180;
yaw=0;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) return null;
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) {
teleport.setY(teleport.getY() + 0.5);
entity.remove();
teleport.getWorld().spawnArrow(teleport,outvector,(float)(momentum * 1.0f),12.0f);
}
 else if (entity instanceof FallingBlock) {
FallingBlock sand=(FallingBlock)entity;
sand=teleport.getWorld().spawnFallingBlock(teleport,sand.getBlockId(),sand.getBlockData());
entity.remove();
}
 else if (entity instanceof Item) {
Item item=(Item)entity;
item=teleport.getWorld().dropItem(teleport,item.getItemStack());
entity.remove();
}
 else if (entity instanceof Player || entity instanceof Vehicle) {
blockedEntities.add(entity);
final Location tploc=teleport;
final Vector outVector=outvector;
final Entity entity2=entity;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
public void run(){
entity2.teleport(tploc);
entity2.setVelocity(outVector);
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
public void run(){
blockedEntities.remove(entity2);
}
}
,1L);
}
}
,1L);
}
 else {
entity.teleport(teleport);
entity.setVelocity(outvector);
}
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
return teleport;
}","public void teleport(Entity entity,V10Location locTo,Vector vector){
  if (entity == null || entity.isDead() || blockedEntities.contains(entity))   return;
  Region regionTo=plugin.regionManager.getRegion(locTo);
  Portal portal=plugin.portalManager.insideBlocks.get(locTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=plugin.portalManager.awayBlocksGeneral.get(locTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=plugin.portalManager.awayBlocksX.get(locTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=plugin.portalManager.awayBlocksY.get(locTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=plugin.portalManager.awayBlocksZ.get(locTo);
  }
  if (portal == null && (entity instanceof FallingBlock || entity instanceof TNTPrimed))   portal=plugin.portalManager.awayBlocksY.get(locTo);
  if (portal == null || !portal.open || portal.disabled || (Math.abs(vector.getY()) > 1 && !portal.vertical))   return;
  double x, y, z;
  for (  V10Location b : portal.inside) {
    x=b.x;
    y=b.y;
    z=b.z;
    if (!portal.vertical) {
      if (x + 0.5 < entity.getLocation().getX() && vector.getX() > 0)       return;
 else       if (x - 0.5 > entity.getLocation().getX() && vector.getX() < 0)       return;
 else       if (y + 0.5 < entity.getLocation().getZ() && vector.getZ() > 0)       return;
 else       if (z - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)       return;
    }
 else {
      if (y + 0.5 < entity.getLocation().getY() && vector.getY() > 0)       return;
      if (y - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)       return;
    }
  }
  Portal destination=portal.getDestination();
  Location teleport=destination.teleport.getHandle();
  teleport.setX(teleport.getX() + 0.5D);
  teleport.setZ(teleport.getZ() + 0.5D);
  float yaw=entity.getLocation().getYaw();
  float pitch=entity.getLocation().getPitch();
  float startyaw=yaw;
switch (portal.teleportFace) {
case EAST:
    yaw-=90;
  break;
case SOUTH:
yaw-=180;
break;
case WEST:
yaw-=270;
break;
case DOWN:
teleport.add(0,1,0);
case UP:
yaw=pitch;
pitch=0;
break;
}
double momentum=0.0;
switch (portal.teleportFace) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum*=regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.teleportFace) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case DOWN:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
pitch=startyaw;
yaw=0;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(momentum);
break;
case UP:
if (portal.teleportFace != BlockFace.UP && portal.teleportFace != BlockFace.DOWN) {
pitch=startyaw + 180;
yaw=0;
}
 else {
pitch=yaw;
yaw=startyaw;
}
outvector=outvector.setY(-momentum);
break;
}
if (!(entity instanceof Player) && !(entity instanceof Chicken) && momentum < 0.5 && (portal.teleportFace == BlockFace.UP || portal.teleportFace == BlockFace.DOWN) && (destination.teleportFace == BlockFace.UP || destination.teleportFace == BlockFace.DOWN)) teleport.setX(teleport.getX() + 0.5D);
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) teleport.setY(teleport.getY() + 0.5);
entity.teleport(teleport);
entity.setVelocity(outvector);
destination.disabled=true;
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new enablePortal(destination),10L);
if (portal.orange) plugin.util.PlaySound(Sound.PORTAL_EXIT_ORANGE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
 else plugin.util.PlaySound(Sound.PORTAL_EXIT_BLUE,entity instanceof Player ? (Player)entity : null,new V10Location(teleport));
}",0.8692542337225202
178742,"public void onEnable(){
  config=new Config(this);
  getServer().getPluginManager().registerEvents(new PortalStickPlayerListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickBlockListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickVehicleListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickEntityListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickWorldListener(this),this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,grillManager,400L,400L);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,entityManager,2L,2L);
  ArrayList<BaseCommand> tmpList=new ArrayList<BaseCommand>();
  tmpList.add(new RegionToolCommand(this));
  tmpList.add(new SetRegionCommand(this));
  tmpList.add(new ReloadCommand(this));
  tmpList.add(new DeleteAllCommand(this));
  tmpList.add(new DeleteCommand(this));
  tmpList.add(new HelpCommand(this));
  tmpList.add(new RegionListCommand(this));
  tmpList.add(new DeleteRegionCommand(this));
  tmpList.add(new FlagCommand(this));
  tmpList.add(new RegionInfoCommand(this));
  commands=tmpList.toArray(new BaseCommand[0]);
}","public void onEnable(){
  config=new Config(this);
  getServer().getPluginManager().registerEvents(new PortalStickPlayerListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickBlockListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickVehicleListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickEntityListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickWorldListener(this),this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,grillManager,400L,400L);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,entityManager,1L,2L);
  ArrayList<BaseCommand> tmpList=new ArrayList<BaseCommand>();
  tmpList.add(new RegionToolCommand(this));
  tmpList.add(new SetRegionCommand(this));
  tmpList.add(new ReloadCommand(this));
  tmpList.add(new DeleteAllCommand(this));
  tmpList.add(new DeleteCommand(this));
  tmpList.add(new HelpCommand(this));
  tmpList.add(new RegionListCommand(this));
  tmpList.add(new DeleteRegionCommand(this));
  tmpList.add(new FlagCommand(this));
  tmpList.add(new RegionInfoCommand(this));
  commands=tmpList.toArray(new BaseCommand[0]);
}",0.9992313604919292
178743,"public void onEnable(){
  getServer().getPluginManager().registerEvents(new PortalStickPlayerListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickBlockListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickVehicleListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickEntityListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickWorldListener(this),this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new GrillManager(this),400,400);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EntityManager(this),2,2);
  ArrayList<BaseCommand> tmpList=new ArrayList<BaseCommand>();
  tmpList.add(new RegionToolCommand(this));
  tmpList.add(new SetRegionCommand(this));
  tmpList.add(new ReloadCommand(this));
  tmpList.add(new DeleteAllCommand(this));
  tmpList.add(new DeleteCommand(this));
  tmpList.add(new HelpCommand(this));
  tmpList.add(new RegionListCommand(this));
  tmpList.add(new DeleteRegionCommand(this));
  tmpList.add(new FlagCommand(this));
  tmpList.add(new RegionInfoCommand(this));
  commands=tmpList.toArray(new BaseCommand[0]);
}","public void onEnable(){
  config=new Config(this);
  getServer().getPluginManager().registerEvents(new PortalStickPlayerListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickBlockListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickVehicleListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickEntityListener(this),this);
  getServer().getPluginManager().registerEvents(new PortalStickWorldListener(this),this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new GrillManager(this),400,400);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new EntityManager(this),2,2);
  ArrayList<BaseCommand> tmpList=new ArrayList<BaseCommand>();
  tmpList.add(new RegionToolCommand(this));
  tmpList.add(new SetRegionCommand(this));
  tmpList.add(new ReloadCommand(this));
  tmpList.add(new DeleteAllCommand(this));
  tmpList.add(new DeleteCommand(this));
  tmpList.add(new HelpCommand(this));
  tmpList.add(new RegionListCommand(this));
  tmpList.add(new DeleteRegionCommand(this));
  tmpList.add(new FlagCommand(this));
  tmpList.add(new RegionInfoCommand(this));
  commands=tmpList.toArray(new BaseCommand[0]);
}",0.9896432681242808
178744,"public Config(PortalStick instance){
  plugin=instance;
  mainConfigFile=getConfigFile(""String_Node_Str"");
  regionConfigFile=getConfigFile(""String_Node_Str"");
  grillConfigFile=getConfigFile(""String_Node_Str"");
  bridgeConfigFile=getConfigFile(""String_Node_Str"");
  mainConfig=getConfig(mainConfigFile);
  regionConfig=getConfig(regionConfigFile);
  grillConfig=getConfig(grillConfigFile);
  bridgeConfig=getConfig(bridgeConfigFile);
  load();
}","public Config(PortalStick instance){
  plugin=instance;
  mainConfigFile=getConfigFile(""String_Node_Str"");
  regionConfigFile=getConfigFile(""String_Node_Str"");
  grillConfigFile=getConfigFile(""String_Node_Str"");
  bridgeConfigFile=getConfigFile(""String_Node_Str"");
  mainConfig=getConfig(mainConfigFile);
  regionConfig=getConfig(regionConfigFile);
  grillConfig=getConfig(grillConfigFile);
  bridgeConfig=getConfig(bridgeConfigFile);
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
    public void run(){
      load();
    }
  }
);
}",0.8630541871921182
178745,"public void load(){
  try {
    mainConfig.load(mainConfigFile);
    regionConfig.load(regionConfigFile);
    grillConfig.load(grillConfigFile);
    bridgeConfig.load(bridgeConfigFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InvalidConfigurationException e) {
    e.printStackTrace();
  }
  MessageCannotPlacePortal=getString(""String_Node_Str"",""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(getStringList(""String_Node_Str"",new ArrayList<String>()));
  DeleteOnQuit=getBoolean(""String_Node_Str"",false);
  PortalTool=getInt(""String_Node_Str"",280);
  CompactPortal=getBoolean(""String_Node_Str"",false);
  RegionTool=getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=getBoolean(""String_Node_Str"",true);
  ColorPresets=getStringList(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  FillPortalBack=getInt(""String_Node_Str"",-1);
  useBukkitContribSounds=getBoolean(""String_Node_Str"",true);
  soundRange=getInt(""String_Node_Str"",20);
  soundUrls[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  for (  Player player : plugin.getServer().getOnlinePlayers())   plugin.userManager.createUser(player);
  if (regionConfig.getConfigurationSection(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getConfigurationSection(""String_Node_Str"").getKeys(false))   plugin.regionManager.loadRegion(regionName);
  plugin.regionManager.loadRegion(""String_Node_Str"");
  plugin.getLogger().info(plugin.regionManager.regions.size() + ""String_Node_Str"");
  for (  String grill : (grillConfig.getStringList(""String_Node_Str"")).toArray(new String[0]))   plugin.grillManager.loadGrill(grill);
  plugin.getLogger().info(plugin.grillManager.grills.size() + ""String_Node_Str"");
  for (  String bridge : bridgeConfig.getStringList(""String_Node_Str""))   plugin.funnelBridgeManager.loadBridge(bridge);
  plugin.getLogger().info(plugin.funnelBridgeManager.bridges.size() + ""String_Node_Str"");
  saveAll();
}","public void load(){
  try {
    mainConfig.load(mainConfigFile);
    regionConfig.load(regionConfigFile);
    grillConfig.load(grillConfigFile);
    bridgeConfig.load(bridgeConfigFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InvalidConfigurationException e) {
    e.printStackTrace();
  }
  MessageCannotPlacePortal=getString(""String_Node_Str"",""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(getStringList(""String_Node_Str"",new ArrayList<String>()));
  DeleteOnQuit=getBoolean(""String_Node_Str"",false);
  PortalTool=getInt(""String_Node_Str"",280);
  CompactPortal=getBoolean(""String_Node_Str"",false);
  RegionTool=getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=getBoolean(""String_Node_Str"",true);
  ColorPresets=getStringList(""String_Node_Str"",Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  FillPortalBack=getInt(""String_Node_Str"",-1);
  useBukkitContribSounds=getBoolean(""String_Node_Str"",true);
  soundRange=getInt(""String_Node_Str"",20);
  soundUrls[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundUrls[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CREATE_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_BLUE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_EXIT_ORANGE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.PORTAL_CANNOT_CREATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GRILL_EMANCIPATE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.FAITHPLATE_LAUNCH.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  soundNotes[Sound.GEL_BLUE_BOUNCE.ordinal()]=getString(""String_Node_Str"",""String_Node_Str"");
  for (  Player player : plugin.getServer().getOnlinePlayers())   plugin.userManager.createUser(player);
  if (regionConfig.getConfigurationSection(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getConfigurationSection(""String_Node_Str"").getKeys(false))   if (!regionName.equals(""String_Node_Str""))   plugin.regionManager.loadRegion(regionName);
  plugin.regionManager.loadRegion(""String_Node_Str"");
  plugin.getLogger().info(plugin.regionManager.regions.size() + ""String_Node_Str"");
  for (  String grill : (grillConfig.getStringList(""String_Node_Str"")).toArray(new String[0]))   plugin.grillManager.loadGrill(grill);
  plugin.getLogger().info(plugin.grillManager.grills.size() + ""String_Node_Str"");
  for (  String bridge : bridgeConfig.getStringList(""String_Node_Str""))   plugin.funnelBridgeManager.loadBridge(bridge);
  plugin.getLogger().info(plugin.funnelBridgeManager.bridges.size() + ""String_Node_Str"");
  saveAll();
}",0.9937664496467656
178746,"public static Location teleport(Entity entity,Location LocTo,Vector vector){
  if (blockedEntities.contains(entity))   return null;
  Region regionTo=RegionManager.getRegion(LocTo);
  Portal portal=PortalManager.insideBlocks.get(LocTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=PortalManager.awayBlocksGeneral.get(LocTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=PortalManager.awayBlocksX.get(LocTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=PortalManager.awayBlocksY.get(LocTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=PortalManager.awayBlocksZ.get(LocTo);
  }
  if (portal == null && (entity instanceof FallingSand || entity instanceof TNTPrimed))   portal=PortalManager.awayBlocksY.get(LocTo);
  if (portal != null) {
    if (!portal.isOpen() || portal.isDisabled())     return null;
    if (Math.abs(vector.getY()) > 1 && !portal.isVertical())     return null;
    for (    Block b : portal.getInside()) {
      if (!portal.isVertical()) {
        if (b.getX() + 0.5 < entity.getLocation().getX() && vector.getX() > 0)         return null;
 else         if (b.getX() - 0.5 > entity.getLocation().getX() && vector.getX() < 0)         return null;
 else         if (b.getZ() + 0.5 < entity.getLocation().getZ() && vector.getZ() > 0)         return null;
 else         if (b.getZ() - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)         return null;
      }
 else {
        if (b.getY() + 0.5 < entity.getLocation().getY() && vector.getY() > 0)         return null;
        if (b.getY() - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)         return null;
      }
    }
    Location teleport;
    Portal destination=portal.getDestination();
    teleport=destination.getTeleportLocation().clone();
    float yaw=entity.getLocation().getYaw();
    float pitch=entity.getLocation().getPitch();
    float startyaw=yaw;
switch (portal.getTeleportFace()) {
case EAST:
      yaw-=90;
    break;
case SOUTH:
  yaw-=180;
break;
case WEST:
yaw=-270;
break;
case UP:
yaw=pitch;
pitch=0;
break;
case DOWN:
yaw=pitch;
pitch=0;
break;
}
Double momentum=0.0;
switch (portal.getTeleportFace()) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum=momentum * regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.getTeleportFace()) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case UP:
if (portal.getTeleportFace() != BlockFace.UP || portal.getTeleportFace() != BlockFace.DOWN) {
pitch=startyaw;
yaw=0;
}
 else {
pitch=yaw;
startyaw=pitch;
}
outvector=outvector.setY(momentum);
break;
case DOWN:
if (portal.getTeleportFace() != BlockFace.UP || portal.getTeleportFace() != BlockFace.DOWN) {
pitch=startyaw + 180;
yaw=0;
}
 else {
pitch=yaw;
startyaw=pitch;
}
outvector=outvector.setY(-momentum);
break;
}
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) {
teleport.setY(teleport.getY() + 0.5);
entity.remove();
teleport.getWorld().spawnArrow(teleport,outvector,(float)(momentum * 1.0f),12.0f);
}
 else if (entity instanceof FallingSand) {
WorldServer world=((CraftWorld)teleport.getWorld()).getHandle();
EntityFallingSand sand=(EntityFallingSand)((CraftFallingSand)entity).getHandle();
EntityFallingSand newsand=new EntityFallingSand(world,teleport.getX(),teleport.getY(),teleport.getZ(),sand.a,0);
Material db=teleport.getBlock().getType();
if (db == Material.AIR || db == Material.WATER || db == Material.STATIONARY_WATER || db == Material.LAVA || db == Material.STATIONARY_LAVA) {
entity.remove();
world.addEntity((net.minecraft.server.Entity)newsand);
newsand.getBukkitEntity().setVelocity(outvector);
}
}
 else if (entity instanceof Item) {
WorldServer world=((CraftWorld)teleport.getWorld()).getHandle();
net.minecraft.server.EntityItem item=(net.minecraft.server.EntityItem)((CraftItem)entity).getHandle();
EntityItem newitem=new EntityItem(world,teleport.getX(),teleport.getY(),teleport.getZ(),item.itemStack);
entity.remove();
world.addEntity((net.minecraft.server.Entity)newitem);
newitem.getBukkitEntity().setVelocity(outvector);
}
 else if (entity instanceof Player || entity instanceof Vehicle) {
blockedEntities.add(entity);
final Location tploc=teleport;
final Vector outVector=outvector;
final Entity Entity=entity;
PortalStick.instance.getServer().getScheduler().scheduleSyncDelayedTask(PortalStick.instance,new Runnable(){
public void run(){
Entity.teleport(tploc);
Entity.setVelocity(outVector);
PortalStick.instance.getServer().getScheduler().scheduleSyncDelayedTask(PortalStick.instance,new Runnable(){
public void run(){
blockedEntities.remove(Entity);
}
}
,1L);
}
}
,1L);
}
 else {
World oldworld=entity.getWorld();
entity.teleport(teleport);
if (oldworld != teleport.getWorld()) {
net.minecraft.server.Entity bentity=((CraftEntity)entity).getHandle();
WorldServer world=((CraftWorld)teleport.getWorld()).getHandle();
world.addEntity(bentity);
}
entity.setVelocity(outvector);
}
destination.setDisabled(true);
PortalStick.instance.getServer().getScheduler().scheduleSyncDelayedTask(PortalStick.instance,new enablePortal(destination),10L);
return teleport;
}
return null;
}","public static Location teleport(Entity entity,Location LocTo,Vector vector){
  if (entity == null || entity.isDead())   return null;
  if (blockedEntities.contains(entity))   return null;
  Region regionTo=RegionManager.getRegion(LocTo);
  Portal portal=PortalManager.insideBlocks.get(LocTo);
  if (portal == null && ((Math.abs(vector.getX()) > 0.5 || (Math.abs(vector.getY()) > 1 || (Math.abs(vector.getZ()) > 0.5))) || entity instanceof Boat)) {
    portal=PortalManager.awayBlocksGeneral.get(LocTo);
    if (portal == null && (Math.abs(vector.getX()) > 0.5))     portal=PortalManager.awayBlocksX.get(LocTo);
    if (portal == null && (Math.abs(vector.getY()) > 1))     portal=PortalManager.awayBlocksY.get(LocTo);
    if (portal == null && (Math.abs(vector.getZ()) > 0.5))     portal=PortalManager.awayBlocksZ.get(LocTo);
  }
  if (portal == null && (entity instanceof FallingSand || entity instanceof TNTPrimed))   portal=PortalManager.awayBlocksY.get(LocTo);
  if (portal != null) {
    if (!portal.isOpen() || portal.isDisabled())     return null;
    if (Math.abs(vector.getY()) > 1 && !portal.isVertical())     return null;
    for (    Block b : portal.getInside()) {
      if (!portal.isVertical()) {
        if (b.getX() + 0.5 < entity.getLocation().getX() && vector.getX() > 0)         return null;
 else         if (b.getX() - 0.5 > entity.getLocation().getX() && vector.getX() < 0)         return null;
 else         if (b.getZ() + 0.5 < entity.getLocation().getZ() && vector.getZ() > 0)         return null;
 else         if (b.getZ() - 0.5 > entity.getLocation().getZ() && vector.getZ() < 0)         return null;
      }
 else {
        if (b.getY() + 0.5 < entity.getLocation().getY() && vector.getY() > 0)         return null;
        if (b.getY() - 0.5 > entity.getLocation().getY() && vector.getY() < -0.1)         return null;
      }
    }
    Location teleport;
    Portal destination=portal.getDestination();
    teleport=destination.getTeleportLocation().clone();
    float yaw=entity.getLocation().getYaw();
    float pitch=entity.getLocation().getPitch();
    float startyaw=yaw;
switch (portal.getTeleportFace()) {
case EAST:
      yaw-=90;
    break;
case SOUTH:
  yaw-=180;
break;
case WEST:
yaw=-270;
break;
case UP:
yaw=pitch;
pitch=0;
break;
case DOWN:
yaw=pitch;
pitch=0;
break;
}
Double momentum=0.0;
switch (portal.getTeleportFace()) {
case NORTH:
case SOUTH:
momentum=vector.getX();
break;
case EAST:
case WEST:
momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum=momentum * regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=entity.getVelocity().zero();
switch (destination.getTeleportFace()) {
case NORTH:
yaw+=180;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw+=270;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw+=360;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw+=430;
outvector=outvector.setZ(-momentum);
break;
case UP:
if (portal.getTeleportFace() != BlockFace.UP || portal.getTeleportFace() != BlockFace.DOWN) {
pitch=startyaw;
yaw=0;
}
 else {
pitch=yaw;
startyaw=pitch;
}
outvector=outvector.setY(momentum);
break;
case DOWN:
if (portal.getTeleportFace() != BlockFace.UP || portal.getTeleportFace() != BlockFace.DOWN) {
pitch=startyaw + 180;
yaw=0;
}
 else {
pitch=yaw;
startyaw=pitch;
}
outvector=outvector.setY(-momentum);
break;
}
entity.setFallDistance(0);
entity.setVelocity(entity.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
if (entity instanceof Arrow) {
teleport.setY(teleport.getY() + 0.5);
entity.remove();
teleport.getWorld().spawnArrow(teleport,outvector,(float)(momentum * 1.0f),12.0f);
}
 else if (entity instanceof FallingSand) {
WorldServer world=((CraftWorld)teleport.getWorld()).getHandle();
EntityFallingSand sand=(EntityFallingSand)((CraftFallingSand)entity).getHandle();
EntityFallingSand newsand=new EntityFallingSand(world,teleport.getX(),teleport.getY(),teleport.getZ(),sand.a,0);
Material db=teleport.getBlock().getType();
if (db == Material.AIR || db == Material.WATER || db == Material.STATIONARY_WATER || db == Material.LAVA || db == Material.STATIONARY_LAVA) {
entity.remove();
world.addEntity((net.minecraft.server.Entity)newsand);
newsand.getBukkitEntity().setVelocity(outvector);
}
}
 else if (entity instanceof Item) {
WorldServer world=((CraftWorld)teleport.getWorld()).getHandle();
net.minecraft.server.EntityItem item=(net.minecraft.server.EntityItem)((CraftItem)entity).getHandle();
EntityItem newitem=new EntityItem(world,teleport.getX(),teleport.getY(),teleport.getZ(),item.itemStack);
entity.remove();
world.addEntity((net.minecraft.server.Entity)newitem);
newitem.getBukkitEntity().setVelocity(outvector);
}
 else if (entity instanceof Player || entity instanceof Vehicle) {
blockedEntities.add(entity);
final Location tploc=teleport;
final Vector outVector=outvector;
final Entity Entity=entity;
PortalStick.instance.getServer().getScheduler().scheduleSyncDelayedTask(PortalStick.instance,new Runnable(){
public void run(){
Entity.teleport(tploc);
Entity.setVelocity(outVector);
PortalStick.instance.getServer().getScheduler().scheduleSyncDelayedTask(PortalStick.instance,new Runnable(){
public void run(){
blockedEntities.remove(Entity);
}
}
,1L);
}
}
,1L);
}
 else {
World oldworld=entity.getWorld();
entity.teleport(teleport);
if (oldworld != teleport.getWorld()) {
net.minecraft.server.Entity bentity=((CraftEntity)entity).getHandle();
WorldServer world=((CraftWorld)teleport.getWorld()).getHandle();
world.addEntity(bentity);
}
entity.setVelocity(outvector);
}
destination.setDisabled(true);
PortalStick.instance.getServer().getScheduler().scheduleSyncDelayedTask(PortalStick.instance,new enablePortal(destination),10L);
return teleport;
}
return null;
}",0.9951531936991518
178747,"public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=UserManager.getUser(player);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    Region region=RegionManager.getRegion(player.getLocation());
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && PortalStick.worldGuard != null && !PortalStick.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (!Permission.placePortal(player))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1)     return;
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : PortalManager.portals) {
          if (p.getInside().contains(b)) {
            Util.sendMessage(player,Config.MessageCannotPlacePortal);
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
 else         if (b.getType() == Material.TRAP_DOOR && (b.getData() & 4) == 0) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
      }
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      Block b2=targetBlocks.get(targetBlocks.size() - 2);
      BlockFace face=b.getFace(b2);
      if (face == null)       PortalManager.placePortal(b,event.getPlayer(),orange);
 else       PortalManager.placePortal(b,face,event.getPlayer(),orange,true);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
GrillManager.createGrill(player,event.getClickedBlock());
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getTypeId() == 0 && event.getClickedBlock().getType() == Material.WOOL) {
Portal portal=PortalManager.borderBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) portal=PortalManager.insideBlocks.get(event.getClickedBlock().getLocation());
if (portal == null && Config.CompactPortal) portal=PortalManager.behindBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) return;
if (portal.getOwner().name != player.getName()) return;
int preset=user.getColorPreset();
if (preset == Config.ColorPresets.size() - 1) preset=0;
 else preset++;
user.setColorPreset(preset);
user.recreatePortals();
String color1=DyeColor.values()[Util.getLeftPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
String color2=DyeColor.values()[Util.getRightPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
Util.sendMessage(player,""String_Node_Str"" + color1 + ""String_Node_Str""+ color2);
}
}","public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=UserManager.getUser(player);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    Region region=RegionManager.getRegion(player.getLocation());
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && PortalStick.worldGuard != null && !PortalStick.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (!Permission.placePortal(player))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1)     return;
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : PortalManager.portals) {
          if (p.getInside().contains(b)) {
            Util.sendMessage(player,Config.MessageCannotPlacePortal);
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
 else         if (b.getType() == Material.TRAP_DOOR && (b.getData() & 4) == 0) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
      }
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      Block b2=targetBlocks.size() >= 2 ? targetBlocks.get(targetBlocks.size() - 2) : null;
      if (targetBlocks.size() < 2 || b.getFace(b2) == null)       PortalManager.placePortal(b,event.getPlayer(),orange);
 else       PortalManager.placePortal(b,b.getFace(b2),event.getPlayer(),orange,true);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
GrillManager.createGrill(player,event.getClickedBlock());
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getTypeId() == 0 && event.getClickedBlock().getType() == Material.WOOL) {
Portal portal=PortalManager.borderBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) portal=PortalManager.insideBlocks.get(event.getClickedBlock().getLocation());
if (portal == null && Config.CompactPortal) portal=PortalManager.behindBlocks.get(event.getClickedBlock().getLocation());
if (portal == null) return;
if (portal.getOwner().name != player.getName()) return;
int preset=user.getColorPreset();
if (preset == Config.ColorPresets.size() - 1) preset=0;
 else preset++;
user.setColorPreset(preset);
user.recreatePortals();
String color1=DyeColor.values()[Util.getLeftPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
String color2=DyeColor.values()[Util.getRightPortalColor(preset)].toString().replace(""String_Node_Str"",""String_Node_Str"");
Util.sendMessage(player,""String_Node_Str"" + color1 + ""String_Node_Str""+ color2);
}
}",0.9877578030219476
178748,"public static void deleteDroppedItems(User user){
  if (user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     if (item != null)     item.remove();
    user.resetItems();
  }
}","public static void deleteDroppedItems(User user){
  if (user != null || user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     if (item != null)     item.remove();
    user.resetItems();
  }
}",0.6851851851851852
178749,"public static void deleteDroppedItems(User user){
  if (user != null || user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     if (item != null)     item.remove();
    user.resetItems();
  }
}","public static void deleteDroppedItems(User user){
  if (user != null && user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     if (item != null)     item.remove();
    user.resetItems();
  }
}",0.9910714285714286
178750,"public static Location useGel(Player player,Location LocTo,Vector vector){
  Vector fallingspeed=player.getVelocity();
  Region region=RegionManager.getRegion(LocTo);
  Block block=LocTo.getBlock();
  if (BlockUtil.compareBlockToString(block.getRelative(0,-1,0),region.getString(RegionSetting.RED_GEL_BLOCK)))   return redGel(player,vector,region);
  if (fallingspeed.getY() <= 0) {
    if (BlockUtil.compareBlockToString(block.getRelative(0,-1,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,0);
 else     if (Math.abs(vector.getY()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(0,-2,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,0);
 else     if (Math.abs(vector.getY()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(0,-3,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,0);
  }
  if (vector.getX() >= 0) {
    if (BlockUtil.compareBlockToString(block.getRelative(1,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,1);
 else     if (Math.abs(vector.getX()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(2,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,1);
 else     if (Math.abs(vector.getX()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(3,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,1);
  }
 else   if (vector.getX() <= 0) {
    if (BlockUtil.compareBlockToString(block.getRelative(-1,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,2);
 else     if (Math.abs(vector.getX()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(-2,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,2);
 else     if (Math.abs(vector.getX()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(-3,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,2);
  }
  if (vector.getZ() >= 0) {
    if (BlockUtil.compareBlockToString(block.getRelative(0,0,1),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,3);
 else     if (Math.abs(vector.getZ()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(0,0,2),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,3);
 else     if (Math.abs(vector.getZ()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(0,0,3),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,3);
  }
 else   if (vector.getZ() <= 0) {
    if (BlockUtil.compareBlockToString(block.getRelative(0,0,-1),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,4);
 else     if (Math.abs(vector.getZ()) < 0.3 && BlockUtil.compareBlockToString(block.getRelative(0,0,-2),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,4);
 else     if (Math.abs(vector.getZ()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(0,0,-3),region.getString(RegionSetting.BLUE_GEL_BLOCK)))     return BlueGel(player,vector,region,4);
  }
  return null;
}","public static Location useGel(Player player,Location LocTo,Vector vector){
  Vector fallingspeed=player.getVelocity();
  Region region=RegionManager.getRegion(LocTo);
  Block block=LocTo.getBlock();
  if (region.getBoolean(RegionSetting.ENABLE_RED_GEL_BLOCKS) && BlockUtil.compareBlockToString(block.getRelative(0,-1,0),region.getString(RegionSetting.RED_GEL_BLOCK)))   return redGel(player,vector,region);
  if (region.getBoolean(RegionSetting.ENABLE_BLUE_GEL_BLOCKS)) {
    if (fallingspeed.getY() <= 0) {
      if (BlockUtil.compareBlockToString(block.getRelative(0,-1,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,0);
 else       if (Math.abs(vector.getY()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(0,-2,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,0);
 else       if (Math.abs(vector.getY()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(0,-3,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,0);
    }
    if (vector.getX() >= 0) {
      if (BlockUtil.compareBlockToString(block.getRelative(1,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,1);
 else       if (Math.abs(vector.getX()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(2,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,1);
 else       if (Math.abs(vector.getX()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(3,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,1);
    }
 else     if (vector.getX() <= 0) {
      if (BlockUtil.compareBlockToString(block.getRelative(-1,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,2);
 else       if (Math.abs(vector.getX()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(-2,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,2);
 else       if (Math.abs(vector.getX()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(-3,0,0),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,2);
    }
    if (vector.getZ() >= 0) {
      if (BlockUtil.compareBlockToString(block.getRelative(0,0,1),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,3);
 else       if (Math.abs(vector.getZ()) > 0.3 && BlockUtil.compareBlockToString(block.getRelative(0,0,2),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,3);
 else       if (Math.abs(vector.getZ()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(0,0,3),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,3);
    }
 else     if (vector.getZ() <= 0) {
      if (BlockUtil.compareBlockToString(block.getRelative(0,0,-1),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,4);
 else       if (Math.abs(vector.getZ()) < 0.3 && BlockUtil.compareBlockToString(block.getRelative(0,0,-2),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,4);
 else       if (Math.abs(vector.getZ()) > 0.5 && BlockUtil.compareBlockToString(block.getRelative(0,0,-3),region.getString(RegionSetting.BLUE_GEL_BLOCK)))       return BlueGel(player,vector,region,4);
    }
  }
  return null;
}",0.7104837523893545
178751,"public static void deleteDroppedItems(User user){
  if (user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     item.remove();
    user.resetItems();
  }
}","public static void deleteDroppedItems(User user){
  if (user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     if (item != null)     item.remove();
    user.resetItems();
  }
}",0.9441624365482234
178752,"public void onPlayerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Vector vector=player.getVelocity();
  Location locTo=event.getTo();
  locTo=new Location(locTo.getWorld(),locTo.getBlockX(),locTo.getBlockY(),locTo.getBlockZ());
  Region regionTo=RegionManager.getRegion(event.getTo());
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  PortalManager.checkPlayerMove(player,regionFrom,regionTo);
  if (regionTo.getBoolean(RegionSetting.ENABLE_GRILLS)) {
    Grill grill=GrillManager.insideBlocks.get(locTo);
    if (grill != null) {
      GrillManager.emancipate(player);
    }
  }
  Block blockIn=locTo.getBlock();
  Block blockUnder=blockIn.getFace(BlockFace.DOWN);
  Block blockStart=null;
  Integer horPower=Integer.parseInt(regionTo.getString(RegionSetting.FAITH_PLATE_POWER).split(""String_Node_Str"")[0]);
  String faithBlock=regionTo.getString(RegionSetting.FAITH_PLATE_BLOCK);
  Vector velocity=new Vector(0,Integer.parseInt(regionTo.getString(RegionSetting.FAITH_PLATE_POWER).split(""String_Node_Str"")[1]),0);
  if (blockIn.getType() == Material.STONE_PLATE && BlockUtil.compareBlockToString(blockUnder,faithBlock))   blockStart=blockUnder;
 else   blockStart=blockIn;
  if (blockStart != null) {
    BlockFace[] faces=new BlockFace[]{BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST,BlockFace.WEST};
    BlockFace face=BlockUtil.getFaceOfMaterial(blockStart,faces,faithBlock);
    if (face != null) {
switch (face) {
case NORTH:
        velocity.setX(horPower);
      break;
case SOUTH:
    velocity.setX(-horPower);
  break;
case EAST:
velocity.setZ(horPower);
break;
case WEST:
velocity.setZ(-horPower);
break;
}
if (blockStart == blockUnder) {
velocity.setX(-velocity.getX());
velocity.setZ(-velocity.getZ());
}
player.setVelocity(velocity);
Util.PlayNote(player,4,5);
}
}
if (player.isInsideVehicle()) return;
Boolean permission=UserManager.teleportPermissionCache.get(player);
if (permission == null) {
permission=Permission.teleport(player);
UserManager.teleportPermissionCache.put(player,permission);
}
if (!permission) return;
Location out=EntityManager.teleport((Entity)player,locTo,vector);
if (out != null) {
event.setTo(out);
return;
}
Vector vec2=event.getTo().toVector();
Vector vec1=event.getFrom().toVector();
vector=vec2.subtract(vec1);
out=GelManager.useGel(player,locTo,vector);
if (out != null) event.setTo(out);
}","public void onPlayerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  if (player.isInsideVehicle())   return;
  Location locTo=event.getTo();
  locTo=new Location(locTo.getWorld(),locTo.getBlockX(),locTo.getBlockY(),locTo.getBlockZ());
  Region regionTo=RegionManager.getRegion(event.getTo());
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  Vector vec2=event.getTo().toVector();
  Vector vec1=event.getFrom().toVector();
  Vector vector=vec2.subtract(vec1);
  if (Config.DisabledWorlds.contains(locTo.getWorld().getName()))   return;
  PortalManager.checkPlayerMove(player,regionFrom,regionTo);
  if (regionTo.getBoolean(RegionSetting.ENABLE_GRILLS)) {
    Grill grill=GrillManager.insideBlocks.get(locTo);
    if (grill != null) {
      GrillManager.emancipate(player);
    }
  }
  if (regionTo.getBoolean(RegionSetting.ENABLE_AERIAL_FAITH_PLATES)) {
    Block blockIn=locTo.getBlock();
    Block blockUnder=blockIn.getFace(BlockFace.DOWN);
    Block blockStart=null;
    Integer horPower=Integer.parseInt(regionTo.getString(RegionSetting.FAITH_PLATE_POWER).split(""String_Node_Str"")[0]);
    String faithBlock=regionTo.getString(RegionSetting.FAITH_PLATE_BLOCK);
    Vector velocity=new Vector(0,Integer.parseInt(regionTo.getString(RegionSetting.FAITH_PLATE_POWER).split(""String_Node_Str"")[1]),0);
    if (blockIn.getType() == Material.STONE_PLATE && BlockUtil.compareBlockToString(blockUnder,faithBlock))     blockStart=blockUnder;
 else     blockStart=blockIn;
    if (blockStart != null) {
      BlockFace[] faces=new BlockFace[]{BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST,BlockFace.WEST};
      BlockFace face=BlockUtil.getFaceOfMaterial(blockStart,faces,faithBlock);
      if (face != null) {
switch (face) {
case NORTH:
          velocity.setX(horPower);
        break;
case SOUTH:
      velocity.setX(-horPower);
    break;
case EAST:
  velocity.setZ(horPower);
break;
case WEST:
velocity.setZ(-horPower);
break;
}
if (blockStart == blockUnder) {
velocity.setX(-velocity.getX());
velocity.setZ(-velocity.getZ());
}
player.setVelocity(velocity);
Util.PlayNote(player,4,5);
}
}
}
Boolean permission=UserManager.teleportPermissionCache.get(player);
if (permission == null) {
permission=Permission.teleport(player);
UserManager.teleportPermissionCache.put(player,permission);
}
if (permission) {
Location out=EntityManager.teleport((Entity)player,locTo,vector);
if (out != null) {
event.setTo(out);
return;
}
}
GelManager.useGel(player,locTo,vector);
}",0.6633785450061652
178753,"public void onPlayerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Vector vector=player.getVelocity();
  Block blockTo=event.getTo().getBlock();
  Region regionTo=RegionManager.getRegion(event.getTo());
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  PortalManager.checkPlayerMove(player,regionFrom,regionTo);
  if (blockTo.getType() == Material.SUGAR_CANE_BLOCK && regionTo.getBoolean(RegionSetting.ENABLE_GRILLS)) {
    for (    Grill grill : GrillManager.grills) {
      if (grill.getInside().contains(blockTo)) {
        GrillManager.emancipate(player);
      }
    }
  }
  if (player.isInsideVehicle())   return;
  if (!Permission.teleport(player))   return;
  double addX=0.0;
  double addY=0.0;
  double addZ=0.0;
  if (Math.abs(vector.getX()) > 1) {
    addX+=3.0;
    addY+=2.0;
    addZ+=2.0;
  }
  if (Math.abs(vector.getZ()) > 1) {
    addX+=2.0;
    addY+=2.0;
    addZ+=3.0;
  }
  if (Math.abs(vector.getY()) > 1) {
    addX+=2.0;
    addY+=3.0;
    addZ+=2.0;
  }
  Portal portal=null;
  for (  Portal p : PortalManager.portals) {
    for (    Block b : p.getInside()) {
      if (offsetequals(b.getLocation().getX(),blockTo.getX(),addX) && offsetequals(b.getLocation().getZ(),blockTo.getZ(),addZ) && offsetequals(b.getLocation().getY(),blockTo.getY(),addY)) {
        portal=p;
        break;
      }
    }
  }
  if (portal != null) {
    if (!portal.isOpen() || portal.isDisabled())     return;
    User owner=portal.getOwner();
    Location teleport;
    Portal destination;
    if (portal.isOrange())     destination=owner.getBluePortal();
 else     destination=owner.getOrangePortal();
    teleport=destination.getTeleportLocation().clone();
    float yaw=0;
    float pitch=0;
    Double momentum=0.0;
switch (portal.getTeleportFace()) {
case NORTH:
case SOUTH:
      momentum=vector.getX();
    break;
case EAST:
case WEST:
  momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum=momentum * regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=player.getVelocity().zero();
switch (destination.getTeleportFace()) {
case NORTH:
yaw=270;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw=0;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw=90;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw=180;
outvector=outvector.setZ(-momentum);
break;
case UP:
pitch=90;
outvector=outvector.setY(momentum);
break;
case DOWN:
pitch=-90;
outvector=outvector.setY(-momentum);
break;
}
player.setFallDistance(0);
player.setVelocity(player.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
event.setTo(teleport);
player.teleport(teleport);
player.setVelocity(outvector);
destination.setDisabled(true);
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new EnablePortal(destination),10L);
}
}","public void onPlayerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  Vector vector=player.getVelocity();
  Block blockTo=event.getTo().getBlock();
  Region regionTo=RegionManager.getRegion(event.getTo());
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  PortalManager.checkPlayerMove(player,regionFrom,regionTo);
  if (blockTo.getType() == Material.SUGAR_CANE_BLOCK && regionTo.getBoolean(RegionSetting.ENABLE_GRILLS)) {
    for (    Grill grill : GrillManager.grills) {
      if (grill.getInside().contains(blockTo)) {
        GrillManager.emancipate(player);
      }
    }
  }
  if (player.isInsideVehicle())   return;
  if (!Permission.teleport(player))   return;
  double addX=0.0;
  double addY=0.0;
  double addZ=0.0;
  if (Math.abs(vector.getX()) > 1) {
    addX+=3.0;
    addY+=2.0;
    addZ+=2.0;
  }
  if (Math.abs(vector.getZ()) > 1) {
    addX+=2.0;
    addY+=2.0;
    addZ+=3.0;
  }
  if (Math.abs(vector.getY()) > 1) {
    addX+=2.0;
    addY+=3.0;
    addZ+=2.0;
  }
  Portal portal=null;
  for (  Portal p : PortalManager.portals) {
    for (    Block b : p.getInside()) {
      if (offsetequals(b.getLocation().getX(),blockTo.getX(),addX) && offsetequals(b.getLocation().getZ(),blockTo.getZ(),addZ) && offsetequals(b.getLocation().getY(),blockTo.getY(),addY)) {
        portal=p;
        break;
      }
    }
  }
  if (portal != null) {
    if (!portal.isOpen() || portal.isDisabled())     return;
    if (Math.abs(vector.getY()) > 1 && !portal.isVertical())     return;
    User owner=portal.getOwner();
    Location teleport;
    Portal destination;
    if (portal.isOrange())     destination=owner.getBluePortal();
 else     destination=owner.getOrangePortal();
    teleport=destination.getTeleportLocation().clone();
    float yaw=0;
    float pitch=0;
    Double momentum=0.0;
switch (portal.getTeleportFace()) {
case NORTH:
case SOUTH:
      momentum=vector.getX();
    break;
case EAST:
case WEST:
  momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum=momentum * regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=player.getVelocity().zero();
switch (destination.getTeleportFace()) {
case NORTH:
yaw=270;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw=0;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw=90;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw=180;
outvector=outvector.setZ(-momentum);
break;
case UP:
pitch=90;
outvector=outvector.setY(momentum);
break;
case DOWN:
pitch=-90;
outvector=outvector.setY(-momentum);
break;
}
player.setFallDistance(0);
player.setVelocity(player.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
event.setTo(teleport);
player.teleport(teleport);
player.setVelocity(outvector);
destination.setDisabled(true);
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new EnablePortal(destination),10L);
}
}",0.9874892887746358
178754,"private static PortalCoord generatePortal(Block block,BlockFace face){
  PortalCoord portal=new PortalCoord();
  if (face == BlockFace.DOWN || face == BlockFace.UP) {
    if (!Config.CompactPortal) {
      portal.border.add(block.getRelative(1,0,0));
      portal.border.add(block.getRelative(0,0,1));
      portal.border.add(block.getRelative(-1,0,0));
      portal.border.add(block.getRelative(0,0,-1));
      portal.border.add(block.getRelative(1,0,-1));
      portal.border.add(block.getRelative(-1,0,1));
      portal.border.add(block.getRelative(1,0,1));
      portal.border.add(block.getRelative(-1,0,-1));
    }
    portal.border.add(block.getRelative(1,0,0));
    portal.inside.add(block);
    if (face == BlockFace.DOWN) {
      portal.destloc=block.getRelative(0,-2,0).getLocation();
      portal.tpface=BlockFace.DOWN;
    }
 else {
      portal.destloc=block.getRelative(0,2,0).getLocation();
      portal.tpface=BlockFace.UP;
    }
  }
 else {
    int x=0;
    int z=0;
switch (face) {
case NORTH:
      z=-1;
    portal.tpface=BlockFace.SOUTH;
  break;
case EAST:
x=-1;
portal.tpface=BlockFace.WEST;
break;
case SOUTH:
z=1;
portal.tpface=BlockFace.NORTH;
break;
case WEST:
x=1;
portal.tpface=BlockFace.EAST;
break;
}
if (!Config.CompactPortal) {
portal.border.add(block.getRelative(0,1,0));
portal.border.add(block.getRelative(x * 1,0,z * 1));
portal.border.add(block.getRelative(x * -1,0,z * -1));
portal.border.add(block.getRelative(x * 1,1,z * 1));
portal.border.add(block.getRelative(x * -1,1,z * -1));
portal.border.add(block.getRelative(x * 1,-1,z * 1));
portal.border.add(block.getRelative(x * -1,-1,z * -1));
portal.border.add(block.getRelative(x * 1,-2,z * 1));
portal.border.add(block.getRelative(x * -1,-2,z * -1));
}
portal.border.add(block.getRelative(0,-2,0));
portal.inside.add(block);
portal.inside.add(block.getRelative(0,-1,0));
portal.destloc=block.getRelative(z * 1,-1,x * 1).getLocation();
}
return portal;
}","private static PortalCoord generatePortal(Block block,BlockFace face){
  PortalCoord portal=new PortalCoord();
  if (face == BlockFace.DOWN || face == BlockFace.UP) {
    if (!Config.CompactPortal) {
      portal.border.add(block.getRelative(1,0,0));
      portal.border.add(block.getRelative(0,0,1));
      portal.border.add(block.getRelative(-1,0,0));
      portal.border.add(block.getRelative(0,0,-1));
      portal.border.add(block.getRelative(1,0,-1));
      portal.border.add(block.getRelative(-1,0,1));
      portal.border.add(block.getRelative(1,0,1));
      portal.border.add(block.getRelative(-1,0,-1));
    }
    portal.border.add(block.getRelative(1,0,0));
    portal.inside.add(block);
    if (face == BlockFace.DOWN) {
      portal.destloc=block.getRelative(0,-2,0).getLocation();
      portal.tpface=BlockFace.DOWN;
    }
 else {
      portal.destloc=block.getRelative(0,2,0).getLocation();
      portal.tpface=BlockFace.UP;
    }
    portal.vertical=true;
  }
 else {
    int x=0;
    int z=0;
switch (face) {
case NORTH:
      z=-1;
    portal.tpface=BlockFace.SOUTH;
  break;
case EAST:
x=-1;
portal.tpface=BlockFace.WEST;
break;
case SOUTH:
z=1;
portal.tpface=BlockFace.NORTH;
break;
case WEST:
x=1;
portal.tpface=BlockFace.EAST;
break;
}
if (!Config.CompactPortal) {
portal.border.add(block.getRelative(0,1,0));
portal.border.add(block.getRelative(x * 1,0,z * 1));
portal.border.add(block.getRelative(x * -1,0,z * -1));
portal.border.add(block.getRelative(x * 1,1,z * 1));
portal.border.add(block.getRelative(x * -1,1,z * -1));
portal.border.add(block.getRelative(x * 1,-1,z * 1));
portal.border.add(block.getRelative(x * -1,-1,z * -1));
portal.border.add(block.getRelative(x * 1,-2,z * 1));
portal.border.add(block.getRelative(x * -1,-2,z * -1));
}
portal.border.add(block.getRelative(0,-2,0));
portal.inside.add(block);
portal.inside.add(block.getRelative(0,-1,0));
portal.destloc=block.getRelative(z * 1,-1,x * 1).getLocation();
portal.vertical=false;
}
return portal;
}",0.9875539751079502
178755,"private static Boolean checkPortal(PortalCoord portal,Portal oldportal){
  for (  Block b : portal.border) {
    Region region=RegionManager.getRegion(b.getLocation());
    if ((!oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) && (region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(b.getTypeId()) || (!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(b.getTypeId())))) {
      return false;
    }
  }
  for (  Block b : portal.inside) {
    if (b.getTypeId() == 0 && !oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) {
      return false;
    }
  }
  Region region=RegionManager.getRegion(portal.destloc);
  if (!region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getTypeId()) && !region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getRelative(BlockFace.UP).getTypeId()))   return false;
  return true;
}","private static Boolean checkPortal(PortalCoord portal,Portal oldportal){
  for (  Block b : portal.border) {
    Region region=RegionManager.getRegion(b.getLocation());
    if ((!oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) && (region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(b.getTypeId()) || (!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(b.getTypeId())))) {
      return false;
    }
  }
  for (  Block b : portal.inside) {
    if (b.getTypeId() == 0 && !oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) {
      return false;
    }
  }
  Region region=RegionManager.getRegion(portal.destloc);
  if (!portal.vertical && !region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getTypeId()) && !region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getRelative(BlockFace.UP).getTypeId()))   return false;
  return true;
}",0.9899497487437184
178756,"public void create(){
  for (  Block b : inside) {
    b.setType(Material.SUGAR_CANE_BLOCK);
  }
}","public void create(){
  for (  Block b : inside) {
    if (b.getType() != Material.SUGAR_CANE_BLOCK)     b.setType(Material.SUGAR_CANE_BLOCK);
  }
}",0.7967479674796748
178757,"public static void checkPlayerMove(Player player,Region regionFrom,Region regionTo){
  User user=UserManager.getUser(player);
  if (user.getUsingTool())   return;
  if (!regionFrom.World.equalsIgnoreCase(regionTo.World))   return;
  if (!regionTo.Name.equals(regionFrom.Name)) {
    if (!Config.RestoreInvOnWorldChange && !regionFrom.World.equalsIgnoreCase(regionTo.World))     ;
 else {
      if (regionTo.Name.equalsIgnoreCase(""String_Node_Str""))       user.revertInventory(player);
 else {
        user.saveInventory(player);
        setPortalInventory(player);
      }
    }
    if (regionFrom.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE) || regionTo.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE))     deletePortals(user);
    UserManager.deleteDroppedItems(player);
  }
}","public static void checkPlayerMove(Player player,Region regionFrom,Region regionTo){
  User user=UserManager.getUser(player);
  if (user.getUsingTool())   return;
  if (!regionTo.Name.equals(regionFrom.Name)) {
    if (regionFrom.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE) || regionTo.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE))     deletePortals(user);
    UserManager.deleteDroppedItems(player);
    if (regionTo.Name.equalsIgnoreCase(""String_Node_Str""))     user.revertInventory(player);
 else {
      user.saveInventory(player);
      setPortalInventory(player);
    }
  }
}",0.4894391842680262
178758,"public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener(this);
  EntityListener=new PortalStickEntityListener();
  grillManager=new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_EXPLODE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,grillManager,400,400);
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new DeleteRegionCommand());
  commands.add(new FlagCommand());
  Util.info(""String_Node_Str"");
}","public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener(this);
  EntityListener=new PortalStickEntityListener();
  grillManager=new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_EXPLODE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,grillManager,400,400);
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new DeleteRegionCommand());
  commands.add(new FlagCommand());
  commands.add(new RegionInfoCommand());
  Util.info(""String_Node_Str"");
}",0.9921680993314232
178759,"public void onPlayerTeleport(PlayerTeleportEvent event){
  PortalManager.checkPlayerMove(event.getPlayer(),RegionManager.getRegion(event.getFrom()),RegionManager.getRegion(event.getTo()));
}","public void onPlayerTeleport(PlayerTeleportEvent event){
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  Region regionTo=RegionManager.getRegion(event.getTo());
  if (!Config.RestoreInvOnWorldChange && !event.getFrom().getWorld().getName().equalsIgnoreCase(event.getTo().getWorld().getName()))   return;
  PortalManager.checkPlayerMove(event.getPlayer(),regionFrom,regionTo);
}",0.3979416809605489
178760,"public static void load(){
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",true);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickEnabled=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickDisabled=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=mainConfig.getBoolean(""String_Node_Str"",true);
  for (  Player player : plugin.getServer().getOnlinePlayers())   UserManager.createUser(player);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  RegionManager.loadRegion(""String_Node_Str"");
  Util.info(RegionManager.getRegionMap().size() + ""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  Util.info(GrillManager.grills.size() + ""String_Node_Str"");
  saveAll();
}","public static void load(){
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",true);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=mainConfig.getBoolean(""String_Node_Str"",true);
  for (  Player player : plugin.getServer().getOnlinePlayers())   UserManager.createUser(player);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  RegionManager.loadRegion(""String_Node_Str"");
  Util.info(RegionManager.getRegionMap().size() + ""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  Util.info(GrillManager.grills.size() + ""String_Node_Str"");
  saveAll();
}",0.9124632436100428
178761,"public void delete(){
  deleteInside();
  Config.deleteGrill(getStringLocation());
  GrillManager.grills.remove(this);
}","public void delete(){
  deleteInside();
  Config.deleteGrill(getStringLocation());
  GrillManager.grills.remove(this);
  Config.saveAll();
}",0.9230769230769232
178762,"private static Boolean checkPortal(PortalCoord portal,Portal oldportal){
  for (  Block b : portal.border) {
    Region region=RegionManager.getRegion(b.getLocation());
    if ((!oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) && (region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(b.getTypeId()) || (!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(b.getTypeId())))) {
      return false;
    }
  }
  for (  Block b : portal.inside) {
    if (b.getTypeId() == 0 && !oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) {
      return false;
    }
  }
  HashSet<Integer> walkableblocks=new HashSet<Integer>();
  Region region=RegionManager.getRegion(portal.destloc);
  if (!region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getTypeId()) && !region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getRelative(BlockFace.UP).getTypeId()))   return false;
  return true;
}","private static Boolean checkPortal(PortalCoord portal,Portal oldportal){
  for (  Block b : portal.border) {
    Region region=RegionManager.getRegion(b.getLocation());
    if ((!oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) && (region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(b.getTypeId()) || (!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(b.getTypeId())))) {
      return false;
    }
  }
  for (  Block b : portal.inside) {
    if (b.getTypeId() == 0 && !oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) {
      return false;
    }
  }
  Region region=RegionManager.getRegion(portal.destloc);
  if (!region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getTypeId()) && !region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(portal.destloc.getBlock().getRelative(BlockFace.UP).getTypeId()))   return false;
  return true;
}",0.9714003944773176
178763,"public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=UserManager.getUser(player);
  Region region=RegionManager.getRegion(player.getLocation());
  HashSet<Byte> tb=new HashSet<Byte>();
  for (  int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))   tb.add((byte)i);
  List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,20);
  if (targetBlocks.size() < 1)   return;
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : PortalManager.portals) {
          if (p.getInside().contains(b)) {
            Util.sendMessage(player,Config.MessageCannotPlacePortal);
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
      }
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
GrillManager.createGrill(player,event.getClickedBlock());
}
}","public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=UserManager.getUser(player);
  Region region=RegionManager.getRegion(player.getLocation());
  HashSet<Byte> tb=new HashSet<Byte>();
  for (  int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))   tb.add((byte)i);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,20);
    if (targetBlocks.size() < 1)     return;
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : PortalManager.portals) {
          if (p.getInside().contains(b)) {
            Util.sendMessage(player,Config.MessageCannotPlacePortal);
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
      }
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
GrillManager.createGrill(player,event.getClickedBlock());
}
}",0.8929219600725953
178764,"public static void load(){
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",true);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=mainConfig.getBoolean(""String_Node_Str"",true);
  for (  Player player : plugin.getServer().getOnlinePlayers())   UserManager.createUser(player);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  RegionManager.loadRegion(""String_Node_Str"");
  Util.info(RegionManager.getRegionMap().size() + ""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  Util.info(GrillManager.grills.size() + ""String_Node_Str"");
  saveAll();
}","public static void load(){
  mainConfig.load();
  regionConfig.load();
  grillConfig.load();
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",true);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  RestoreInvOnWorldChange=mainConfig.getBoolean(""String_Node_Str"",true);
  for (  Player player : plugin.getServer().getOnlinePlayers())   UserManager.createUser(player);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  RegionManager.loadRegion(""String_Node_Str"");
  Util.info(RegionManager.getRegionMap().size() + ""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  Util.info(GrillManager.grills.size() + ""String_Node_Str"");
  saveAll();
}",0.9839024390243902
178765,"public Config(PortalStick instance){
  plugin=instance;
  mainConfig=plugin.getConfiguration();
  mainConfig.load();
  regionConfig=getConfigFile(""String_Node_Str"");
  grillConfig=getConfigFile(""String_Node_Str"");
  load();
}","public Config(PortalStick instance){
  plugin=instance;
  mainConfig=plugin.getConfiguration();
  regionConfig=getConfigFile(""String_Node_Str"");
  grillConfig=getConfigFile(""String_Node_Str"");
  load();
}",0.6899766899766899
178766,"public static void deleteDroppedItems(User user){
  for (  Item item : user.getDroppedItems())   item.remove();
  user.resetItems();
}","public static void deleteDroppedItems(User user){
  if (user.getDroppedItems() != null) {
    for (    Item item : user.getDroppedItems())     item.remove();
    user.resetItems();
  }
}",0.8375
178767,"public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=UserManager.getUser(player);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    Region region=RegionManager.getRegion(player.getLocation());
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && PortalStick.worldGuard != null && !PortalStick.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (!Permission.placePortal(player))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,20);
    if (targetBlocks.size() < 1)     return;
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : PortalManager.portals) {
          if (p.getInside().contains(b)) {
            Util.sendMessage(player,Config.MessageCannotPlacePortal);
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
      }
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
GrillManager.createGrill(player,event.getClickedBlock());
}
}","public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=UserManager.getUser(player);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    Region region=RegionManager.getRegion(player.getLocation());
    HashSet<Byte> tb=new HashSet<Byte>();
    for (    int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))     tb.add((byte)i);
    if (region.getBoolean(RegionSetting.CHECK_WORLDGUARD) && PortalStick.worldGuard != null && !PortalStick.worldGuard.canBuild(player,player.getLocation().getBlock()))     return;
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (!Permission.placePortal(player))     return;
    List<Block> targetBlocks=event.getPlayer().getLineOfSight(tb,120);
    if (targetBlocks.size() < 1)     return;
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    if (!region.getBoolean(RegionSetting.ENABLE_PORTALS))     return;
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_THROUGH_PORTAL)) {
      for (      Block b : targetBlocks) {
        for (        Portal p : PortalManager.portals) {
          if (p.getInside().contains(b)) {
            Util.sendMessage(player,Config.MessageCannotPlacePortal);
            return;
          }
        }
      }
    }
    if (region.getBoolean(RegionSetting.PREVENT_PORTAL_CLOSED_DOOR)) {
      for (      Block b : targetBlocks) {
        if ((b.getType() == Material.IRON_DOOR_BLOCK || b.getType() == Material.WOODEN_DOOR) && ((b.getData() & 4) != 4)) {
          Util.sendMessage(player,Config.MessageCannotPlacePortal);
          return;
        }
      }
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      Block b=targetBlocks.get(targetBlocks.size() - 1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
 else if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInHand().getType() == Material.FLINT_AND_STEEL) {
GrillManager.createGrill(player,event.getClickedBlock());
}
}",0.9998390989541432
178768,"public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener();
  EntityListener=new PortalStickEntityListener();
  new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  for (  Player player : getServer().getOnlinePlayers())   UserManager.createUser(player);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new DeleteRegionCommand());
}","public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener();
  EntityListener=new PortalStickEntityListener();
  new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new DeleteRegionCommand());
}",0.9807325852212576
178769,"public static void deleteRegion(String name){
  Region region=getRegion(name);
  Config.deleteRegion(name);
  regions.remove(region);
}","public static void deleteRegion(String name){
  Region region=getRegion(name);
  regions.remove(region.Name);
  Config.deleteRegion(name);
}",0.7927272727272727
178770,"public boolean run(CommandSender sender,String[] preArgs){
  this.sender=sender;
  for (  String arg : preArgs)   args.add(arg);
  args.remove(0);
  if (argLength != args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  player=(Player)sender;
  region=RegionManager.getRegion(player.getLocation());
  user=UserManager.getUser(player);
  if (!permission(player))   return false;
  return execute();
}","public boolean run(CommandSender sender,String[] preArgs){
  this.sender=sender;
  args.clear();
  for (  String arg : preArgs)   args.add(arg);
  args.remove(0);
  if (argLength != args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  player=(Player)sender;
  region=RegionManager.getRegion(player.getLocation());
  user=UserManager.getUser(player);
  if (!permission(player))   return false;
  return execute();
}",0.9830148619957536
178771,"public boolean execute(){
  if (args.get(0).equalsIgnoreCase(""String_Node_Str""))   Util.sendMessage(player,""String_Node_Str"");
 else   if (RegionManager.getRegion(args.get(0)) != null) {
    RegionManager.deleteRegion(args.get(0));
    Util.sendMessage(player,""String_Node_Str"" + args.get(0) + ""String_Node_Str"");
  }
 else   Util.sendMessage(player,""String_Node_Str"" + args.get(0) + ""String_Node_Str"");
  return true;
}","public boolean execute(){
  if (args.get(0).equalsIgnoreCase(""String_Node_Str""))   Util.sendMessage(player,""String_Node_Str"");
 else   if (RegionManager.getRegion(args.get(0)) != null) {
    RegionManager.deleteRegion(args.get(0));
    Config.reLoad();
    Util.sendMessage(player,""String_Node_Str"" + args.get(0) + ""String_Node_Str"");
  }
 else   Util.sendMessage(player,""String_Node_Str"" + args.get(0) + ""String_Node_Str"");
  return true;
}",0.975609756097561
178772,"public static void load(){
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickEnabled=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickDisabled=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  RegionManager.loadRegion(""String_Node_Str"");
  Util.info(RegionManager.getRegionMap().size() + ""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  Util.info(GrillManager.grills.size() + ""String_Node_Str"");
  saveAll();
}","public static void load(){
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickEnabled=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickDisabled=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  for (  Player player : plugin.getServer().getOnlinePlayers())   UserManager.createUser(player);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  RegionManager.loadRegion(""String_Node_Str"");
  Util.info(RegionManager.getRegionMap().size() + ""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  Util.info(GrillManager.grills.size() + ""String_Node_Str"");
  saveAll();
}",0.977471264367816
178773,"public static void deleteRegion(String name){
  regionConfig.removeProperty(name);
  saveAll();
}","public static void deleteRegion(String name){
  regionConfig.removeProperty(""String_Node_Str"" + name);
  saveAll();
}",0.9065420560747663
178774,"public static void deleteUser(User user){
  PortalManager.deletePortals(user);
  deleteDroppedItems(user);
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet())   if (entry.getValue() == user)   users.remove(entry.getKey());
}","public static void deleteUser(User user){
  PortalManager.deletePortals(user);
  deleteDroppedItems(user);
  for (  Map.Entry<String,User> entry : users.entrySet())   if (entry.getValue() == user)   users.remove(entry.getKey());
}",0.9375
178775,"public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   PortalManager.checkPlayerMove(event.getPlayer(),RegionManager.getRegion(event.getFrom()),RegionManager.getRegion(event.getTo()));
}","public void onPlayerTeleport(PlayerTeleportEvent event){
  PortalManager.checkPlayerMove(event.getPlayer(),RegionManager.getRegion(event.getFrom()),RegionManager.getRegion(event.getTo()));
}",0.9336609336609336
178776,"public static void checkPlayerMove(Player player,Region regionFrom,Region regionTo){
  User user=UserManager.getUser(player);
  if (!regionTo.Name.equals(regionFrom.Name)) {
    if (regionTo.Name == ""String_Node_Str"") {
      player.getInventory().setContents(user.getInventory().getContents());
    }
 else {
      user.setInventory(player.getInventory());
      setPortalInventory(player);
    }
    if (regionFrom.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE) || regionTo.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE))     deletePortals(user);
    UserManager.deleteDroppedItems(player);
  }
}","public static void checkPlayerMove(Player player,Region regionFrom,Region regionTo){
  User user=UserManager.getUser(player);
  if (user.getUsingTool())   return;
  if (!regionTo.Name.equals(regionFrom.Name)) {
    if (regionTo.Name == ""String_Node_Str"") {
      player.getInventory().setContents(user.getInventory().getContents());
    }
 else {
      user.setInventory(player.getInventory());
      setPortalInventory(player);
    }
    if (regionFrom.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE) || regionTo.getBoolean(RegionSetting.DELETE_ON_EXITENTRANCE))     deletePortals(user);
    UserManager.deleteDroppedItems(player);
  }
}",0.9701853344077356
178777,"public boolean run(CommandSender sender,String[] preArgs){
  this.sender=sender;
  for (  String arg : preArgs)   args.add(arg);
  args.remove(0);
  if (argLength != args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  player=(Player)sender;
  return execute();
}","public boolean run(CommandSender sender,String[] preArgs){
  this.sender=sender;
  for (  String arg : preArgs)   args.add(arg);
  args.remove(0);
  if (argLength != args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  player=(Player)sender;
  region=RegionManager.getRegion(player.getLocation());
  return execute();
}",0.9213483146067416
178778,"public boolean execute(){
  if (!Permission.adminRegions(player))   return false;
  User user=UserManager.getUser(player);
  if (user.getUsingTool()) {
    user.setUsingTool(false);
    Util.sendMessage(sender,""String_Node_Str"");
  }
 else {
    user.setUsingTool(true);
    Util.sendMessage(sender,""String_Node_Str"");
  }
  return true;
}","public boolean execute(){
  if (!Permission.adminRegions(player))   return false;
  User user=UserManager.getUser(player);
  if (user.getUsingTool()) {
    user.setUsingTool(false);
    Util.sendMessage(sender,""String_Node_Str"");
  }
 else {
    user.setUsingTool(true);
    Util.sendMessage(sender,""String_Node_Str"");
    if (!player.getInventory().contains(Config.RegionTool)) {
      int slot=player.getInventory().firstEmpty();
      if (slot == -1)       player.getWorld().dropItem(player.getLocation(),new ItemStack(Config.RegionTool));
 else       player.getInventory().setItem(slot,new ItemStack(Config.RegionTool));
    }
  }
  return true;
}",0.6585858585858586
178779,"public void deleteInside(){
  for (  Block b : inside) {
    b.setType(Material.AIR);
    GrillManager.grills.remove(this);
  }
}","public void deleteInside(){
  for (  Block b : inside) {
    b.setType(Material.AIR);
  }
}",0.8272727272727273
178780,"public void delete(){
  deleteInside();
  Config.deleteGrill(getStringLocation());
}","public void delete(){
  deleteInside();
  Config.deleteGrill(getStringLocation());
  GrillManager.grills.remove(this);
}",0.8235294117647058
178781,"public static HashMap<String,User> getUserList(){
  return users;
}","public static ConcurrentHashMap<String,User> getUserList(){
  return users;
}",0.9305555555555556
178782,"public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener(this);
  EntityListener=new PortalStickEntityListener();
  new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new DeleteRegionCommand());
  commands.add(new FlagCommand());
}","public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener(this);
  EntityListener=new PortalStickEntityListener();
  new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new DeleteRegionCommand());
  commands.add(new FlagCommand());
  Util.info(""String_Node_Str"");
}",0.9932517924926192
178783,"public void onDisable(){
  Config.saveAll();
  PortalManager.deleteAll();
  GrillManager.deleteAll();
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet()) {
    User user=entry.getValue();
    Player player=getServer().getPlayer(entry.getKey());
    if (player != null)     user.revertInventory(player);
    UserManager.deleteUser(user);
  }
}","public void onDisable(){
  Config.saveAll();
  Config.unLoad();
  Util.info(""String_Node_Str"");
}",0.3225806451612903
178784,"public void revertInventory(Player player){
  PlayerInventory inv=player.getInventory();
  inv.clear();
  for (  ItemStack old : inventory) {
    if (old != null) {
      ItemStack stack=new ItemStack(old.getType());
      stack.setAmount(old.getAmount());
      stack.setData(old.getData());
      inv.addItem(stack);
    }
  }
  if (boots != null && boots.getTypeId() != 0)   inv.setBoots(new ItemStack(boots.getType()));
  if (chest != null && chest.getTypeId() != 0)   inv.setChestplate(new ItemStack(chest.getType()));
  if (legs != null && legs.getTypeId() != 0)   inv.setLeggings(new ItemStack(legs.getType()));
  if (helmet != null && helmet.getTypeId() != 0)   inv.setHelmet(new ItemStack(helmet.getType()));
}","public void revertInventory(Player player){
  if (inventory == null)   return;
  PlayerInventory inv=player.getInventory();
  inv.clear();
  for (  ItemStack old : inventory) {
    if (old != null) {
      ItemStack stack=new ItemStack(old.getType());
      stack.setAmount(old.getAmount());
      stack.setData(old.getData());
      inv.addItem(stack);
    }
  }
  if (boots != null && boots.getTypeId() != 0)   inv.setBoots(new ItemStack(boots.getType()));
  if (chest != null && chest.getTypeId() != 0)   inv.setChestplate(new ItemStack(chest.getType()));
  if (legs != null && legs.getTypeId() != 0)   inv.setLeggings(new ItemStack(legs.getType()));
  if (helmet != null && helmet.getTypeId() != 0)   inv.setHelmet(new ItemStack(helmet.getType()));
}",0.9762389680923286
178785,"public FlagCommand(){
  name=""String_Node_Str"";
  argLength=0;
  usage=""String_Node_Str"";
}","public FlagCommand(){
  name=""String_Node_Str"";
  argLength=3;
  usage=""String_Node_Str"";
}",0.989010989010989
178786,"public boolean execute(){
  Config.unLoad();
  Config.load();
  Util.sendMessage(player,""String_Node_Str"");
  return true;
}","public boolean execute(){
  Region editRegion=RegionManager.getRegion(args.get(0));
  if (editRegion == null) {
    Util.sendMessage(player,""String_Node_Str"");
    return true;
  }
  for (  RegionSetting setting : RegionSetting.values()) {
    if (setting.getYaml().equalsIgnoreCase(args.get(1)) && setting.getEditable()) {
      Object old=editRegion.settings.remove(setting);
      try {
        if (setting.getDefault() instanceof Integer)         editRegion.settings.put(setting,Integer.parseInt(args.get(2)));
 else         if (setting.getDefault() instanceof Double)         editRegion.settings.put(setting,Double.parseDouble(args.get(2)));
 else         if (setting.getDefault() instanceof Boolean)         editRegion.settings.put(setting,Boolean.parseBoolean(args.get(2)));
 else         editRegion.settings.put(setting,args.get(2));
        Util.sendMessage(player,""String_Node_Str"" + editRegion.Name + ""String_Node_Str"");
        Config.saveAll();
        Config.reLoad();
        return true;
      }
 catch (      Throwable t) {
        Util.sendMessage(player,""String_Node_Str"" + setting.getYaml());
        editRegion.settings.put(setting,old);
        return true;
      }
    }
  }
  Util.sendMessage(player,""String_Node_Str"");
  String flags=""String_Node_Str"";
  for (  RegionSetting setting : RegionSetting.values())   if (setting.getEditable())   flags+=""String_Node_Str"" + setting.getYaml() + ""String_Node_Str"";
  Util.sendMessage(player,""String_Node_Str"" + flags.substring(0,flags.length() - 2));
  return true;
}",0.1001206272617611
178787,"public ReloadCommand(){
  name=""String_Node_Str"";
  argLength=2;
  usage=""String_Node_Str"";
}","public ReloadCommand(){
  name=""String_Node_Str"";
  argLength=0;
  usage=""String_Node_Str"";
}",0.989247311827957
178788,"public boolean execute(){
  Region editRegion=RegionManager.getRegion(args.get(0));
  if (editRegion == null) {
    Util.sendMessage(player,""String_Node_Str"");
    return true;
  }
  for (  RegionSetting setting : editRegion.settings.values().toArray(new RegionSetting[0])) {
    if (setting.getYaml().equalsIgnoreCase(args.get(1)) && setting.getEditable()) {
      Object old=editRegion.settings.remove(setting);
      try {
        if (setting.getDefault() instanceof Integer)         editRegion.settings.put(setting,Integer.parseInt(args.get(2)));
 else         if (setting.getDefault() instanceof Double)         editRegion.settings.put(setting,Double.parseDouble(args.get(2)));
 else         if (setting.getDefault() instanceof Boolean)         editRegion.settings.put(setting,Boolean.parseBoolean(args.get(2)));
 else         editRegion.settings.put(setting,args.get(2));
        Util.sendMessage(player,""String_Node_Str"" + editRegion.Name + ""String_Node_Str"");
        return true;
      }
 catch (      Exception e) {
        Util.sendMessage(player,""String_Node_Str"" + setting.getYaml());
        editRegion.settings.put(setting,old);
        return true;
      }
    }
  }
  Util.sendMessage(player,""String_Node_Str"");
  String flags=""String_Node_Str"";
  for (  RegionSetting setting : RegionSetting.values())   if (setting.getEditable())   flags+=setting.getYaml() + ""String_Node_Str"";
  Util.sendMessage(player,""String_Node_Str"" + flags.substring(0,flags.length() - 2));
  return true;
}","public boolean execute(){
  Config.unLoad();
  Config.load();
  Util.sendMessage(player,""String_Node_Str"");
  return true;
}",0.1318545902649414
178789,"public static void unLoad(){
  PortalManager.deleteAll();
  GrillManager.deleteAll();
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet()) {
    User user=entry.getValue();
    Player player=plugin.getServer().getPlayer(entry.getKey());
    if (player != null)     user.revertInventory(player);
    UserManager.deleteUser(user);
  }
}","public static void unLoad(){
  PortalManager.deleteAll();
  GrillManager.deleteAll();
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet()) {
    User user=entry.getValue();
    Player player=plugin.getServer().getPlayer(entry.getKey());
    if (player != null) {
      if (!RegionManager.getRegion(player.getLocation()).Name.equalsIgnoreCase(""String_Node_Str""))       user.revertInventory(player);
    }
    UserManager.deleteUser(user);
  }
}",0.7908101571946796
178790,"public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener();
  EntityListener=new PortalStickEntityListener();
  new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new TestCommand());
}","public void onEnable(){
  PlayerListener=new PortalStickPlayerListener(this);
  BlockListener=new PortalStickBlockListener(this);
  VehicleListener=new PortalStickVehicleListener();
  EntityListener=new PortalStickEntityListener();
  new GrillManager(this);
  config=new Config(this);
  permissions=new Permission(this);
  for (  Player player : getServer().getOnlinePlayers())   UserManager.createUser(player);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BURN,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PHYSICS,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_FROMTO,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_DROP_ITEM,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_MOVE,VehicleListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.REDSTONE_CHANGE,BlockListener,Event.Priority.Low,this);
  worldGuard=(WorldGuardPlugin)this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.add(new RegionToolCommand());
  commands.add(new SetRegionCommand());
  commands.add(new ReloadCommand());
  commands.add(new DeleteAllCommand());
  commands.add(new DeleteCommand());
  commands.add(new HelpCommand());
  commands.add(new RegionListCommand());
  commands.add(new TestCommand());
}",0.9806670915657532
178791,"public void onDisable(){
  Config.saveAll();
  PortalManager.deleteAll();
  GrillManager.deleteAll();
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet()) {
    Player player=getServer().getPlayer(entry.getKey());
    User user=entry.getValue();
    if (player != null && user.getInventory() != null)     player.getInventory().setContents(user.getInventory().getContents());
  }
}","public void onDisable(){
  Config.saveAll();
  Config.unLoad();
}",0.2340425531914893
178792,"public static void deleteUser(Player player){
  PortalManager.deletePortals(getUser(player));
  deleteDroppedItems(player);
  users.remove(player.getName());
}","public static void deleteUser(User user){
  PortalManager.deletePortals(user);
  deleteDroppedItems(user);
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet())   if (entry.getValue() == user)   users.remove(entry.getKey());
}",0.2151589242053789
178793,"public static void deleteDroppedItems(Player player){
  User user=getUser(player);
  for (  Item item : user.getDroppedItems())   item.remove();
  user.resetItems();
}","public static void deleteDroppedItems(User user){
  for (  Item item : user.getDroppedItems())   item.remove();
  user.resetItems();
}",0.8837209302325582
178794,"public static void unLoad(){
  PortalManager.deleteAll();
  GrillManager.deleteAll();
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet()) {
    Player player=plugin.getServer().getPlayer(entry.getKey());
    User user=entry.getValue();
    if (player != null && user.getInventory() != null)     player.getInventory().setContents(user.getInventory().getContents());
  }
}","public static void unLoad(){
  PortalManager.deleteAll();
  GrillManager.deleteAll();
  for (  Map.Entry<String,User> entry : UserManager.getUserList().entrySet()) {
    User user=entry.getValue();
    Player player=plugin.getServer().getPlayer(entry.getKey());
    if (player != null && user.getInventory() != null)     player.getInventory().setContents(user.getInventory().getContents());
    UserManager.deleteUser(user);
  }
}",0.8813559322033898
178795,"public static boolean placeRecursiveEmancipationGrill(Block initial){
  Region region=RegionManager.getRegion(initial.getLocation());
  int borderID=region.getInt(RegionSetting.GRILL_MATERIAL);
  if (initial.getTypeId() != borderID)   return false;
  Plane plane=Plane.XY;
  startRecurse(initial,borderID,BlockFace.UP,BlockFace.SOUTH,BlockFace.NORTH,BlockFace.DOWN);
  if (!complete) {
    startRecurse(initial,borderID,BlockFace.UP,BlockFace.WEST,BlockFace.EAST,BlockFace.DOWN);
    plane=Plane.YZ;
  }
  if (!complete) {
    startRecurse(initial,borderID,BlockFace.WEST,BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST);
    plane=Plane.ZX;
  }
  if (!complete) {
    return false;
  }
  Util.info(border.size() + ""String_Node_Str"" + plane.toString());
  Vector max=initial.getLocation().toVector();
  Vector min=initial.getLocation().toVector();
  for (  Block block : border.toArray(new Block[0])) {
    if (block.getX() > max.getX())     max.setX(block.getX());
    if (block.getY() > max.getY())     max.setY(block.getY());
    if (block.getZ() > max.getZ())     max.setX(block.getZ());
    if (block.getX() < min.getX())     min.setX(block.getX());
    if (block.getY() < min.getY())     min.setY(block.getY());
    if (block.getZ() < min.getZ())     min.setX(block.getZ());
  }
  Util.info(max.toString() + ""String_Node_Str"" + min.toString());
  Vector range=new Vector(max.getX() - min.getX() + 1,max.getY() - min.getY() + 1,max.getZ() - min.getZ() + 1);
  double num1=0;
  double num2=0;
switch (plane) {
case XY:
    num1=range.getX();
  num2=range.getY();
break;
case YZ:
num1=range.getY();
num2=range.getZ();
break;
case ZX:
num1=range.getZ();
num2=range.getX();
break;
}
Util.info(num1 + ""String_Node_Str"" + num2);
Block[][] lines=new Block[(int)num1][(int)num2];
for (Block block : border.toArray(new Block[0])) {
switch (plane) {
case XY:
lines[(int)(block.getX() - min.getX())][(int)(block.getY() - min.getY())]=block;
break;
case YZ:
lines[(int)(block.getY() - min.getY())][(int)(block.getZ() - min.getZ())]=block;
break;
case ZX:
lines[(int)(block.getZ() - min.getZ())][(int)(block.getX() - min.getX())]=block;
break;
}
}
HashSet<Block> inside=new HashSet<Block>();
int i=0;
World world=initial.getWorld();
for (Block[] line : lines) {
boolean rep=false;
int j=0;
for (Block block : line) {
if (block == null) {
switch (plane) {
case XY:
block=world.getBlockAt((int)min.getX() + i,(int)min.getY() + j,(int)min.getZ());
break;
case YZ:
block=world.getBlockAt((int)min.getX(),(int)min.getY() + i,(int)min.getZ() + j);
break;
case ZX:
block=world.getBlockAt((int)min.getX() + j,(int)min.getY(),(int)min.getZ() + i);
break;
}
}
if (block.getTypeId() == borderID) rep=!rep;
 else if (rep) inside.add(block);
j++;
}
i++;
}
Util.info(inside.size() + ""String_Node_Str"");
Grill grill=new Grill(border,inside,initial);
grills.add(grill);
grill.create();
return true;
}","public static boolean placeRecursiveEmancipationGrill(Block initial){
  Region region=RegionManager.getRegion(initial.getLocation());
  int borderID=region.getInt(RegionSetting.GRILL_MATERIAL);
  if (initial.getTypeId() != borderID)   return false;
  startRecurse(initial,borderID,BlockFace.UP,BlockFace.SOUTH,BlockFace.NORTH,BlockFace.DOWN);
  BlockFace iOne=BlockFace.EAST;
  BlockFace iTwo=BlockFace.WEST;
  if (!complete) {
    startRecurse(initial,borderID,BlockFace.UP,BlockFace.WEST,BlockFace.EAST,BlockFace.DOWN);
    iOne=BlockFace.NORTH;
    iTwo=BlockFace.SOUTH;
  }
  if (!complete) {
    startRecurse(initial,borderID,BlockFace.WEST,BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST);
    iOne=BlockFace.UP;
    iTwo=BlockFace.DOWN;
  }
  if (!complete) {
    return false;
  }
  Vector max=initial.getLocation().toVector();
  Vector min=initial.getLocation().toVector();
  for (  Block block : border.toArray(new Block[0])) {
    if (block.getX() > max.getX())     max.setX(block.getX());
    if (block.getY() > max.getY())     max.setY(block.getY());
    if (block.getZ() > max.getZ())     max.setX(block.getZ());
    if (block.getX() < min.getX())     min.setX(block.getX());
    if (block.getY() < min.getY())     min.setY(block.getY());
    if (block.getZ() < min.getZ())     min.setX(block.getZ());
  }
  HashSet<Block> inside=new HashSet<Block>();
  for (int y=(int)min.getY(); y <= (int)max.getY(); y++) {
    for (int x=(int)min.getX(); x <= (int)max.getX(); x++) {
      for (int z=(int)min.getZ(); z <= (int)max.getZ(); z++) {
        Block block=initial.getWorld().getBlockAt(x,y,z);
        if (border.contains(block) || inside.contains(block))         continue;
        boolean add=true;
        for (        BlockFace face : BlockFace.values()) {
          if (face == BlockFace.SELF || face == iOne || face == iTwo || face == BlockFace.NORTH_EAST || face == BlockFace.NORTH_WEST || face == BlockFace.SOUTH_EAST || face == BlockFace.SOUTH_WEST)           continue;
          Block temp=block.getFace(face);
          while (temp.getLocation().toVector().isInAABB(min,max)) {
            if (temp.getTypeId() == borderID)             break;
            temp=temp.getFace(face);
          }
          if (temp.getTypeId() != borderID) {
            add=false;
            break;
          }
        }
        if (add)         inside.add(block);
      }
    }
  }
  Grill grill=new Grill(border,inside,initial);
  grills.add(grill);
  grill.create();
  return true;
}",0.4765100671140939
178796,"private static Boolean checkPortal(PortalCoord portal,Portal oldportal){
  for (  Block b : portal.border) {
    Region region=RegionManager.getRegion(b.getLocation());
    if (region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(b.getTypeId()) || (region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(b.getTypeId()) && !oldportal.getInside().contains(b)&& !oldportal.getBorder().contains(b))) {
      return false;
    }
  }
  for (  Block b : portal.inside) {
    if (b.getTypeId() == 0 && !oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) {
      return false;
    }
  }
  return true;
}","private static Boolean checkPortal(PortalCoord portal,Portal oldportal){
  for (  Block b : portal.border) {
    Region region=RegionManager.getRegion(b.getLocation());
    if (region.getList(RegionSetting.TRANSPARENT_BLOCKS).contains(b.getTypeId()) || (!region.getBoolean(RegionSetting.ALL_BLOCKS_PORTAL) && !region.getList(RegionSetting.PORTAL_BLOCKS).contains(b.getTypeId()) && !oldportal.getInside().contains(b)&& !oldportal.getBorder().contains(b))) {
      return false;
    }
  }
  for (  Block b : portal.inside) {
    if (b.getTypeId() == 0 && !oldportal.getInside().contains(b) && !oldportal.getBorder().contains(b)) {
      return false;
    }
  }
  return true;
}",0.9992587101556708
178797,"public void updateLocation(){
  String[] loc=((String)settings.get(RegionSetting.LOCATION)).split(""String_Node_Str"");
  String[] loc1=loc[1].split(""String_Node_Str"");
  PointOne=new Vector(Integer.parseInt(loc1[0]),Integer.parseInt(loc1[1]),Integer.parseInt(loc1[2]));
  String[] loc2=loc[2].split(""String_Node_Str"");
  PointTwo=new Vector(Integer.parseInt(loc2[0]),Integer.parseInt(loc2[1]),Integer.parseInt(loc2[2]));
  World=loc[0];
}","public void updateLocation(){
  String[] loc=((String)settings.get(RegionSetting.LOCATION)).split(""String_Node_Str"");
  String[] loc1=loc[1].split(""String_Node_Str"");
  PointOne=new Vector(Double.parseDouble(loc1[0]),Double.parseDouble(loc1[1]),Double.parseDouble(loc1[2]));
  String[] loc2=loc[2].split(""String_Node_Str"");
  PointTwo=new Vector(Double.parseDouble(loc2[0]),Double.parseDouble(loc2[1]),Double.parseDouble(loc2[2]));
  World=loc[0];
}",0.7697516930022573
178798,"public boolean run(CommandSender sender,String[] args){
  this.sender=sender;
  if (args.length > 1) {
    int i=1;
    while (i < args.length) {
      this.args.add(args[i]);
    }
  }
  if (argLength != (args.length - 1)) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  player=(Player)sender;
  return execute();
}","public boolean run(CommandSender sender,String[] preArgs){
  this.sender=sender;
  for (  String arg : preArgs)   args.add(arg);
  args.remove(0);
  if (argLength != args.size()) {
    sendUsage();
    return true;
  }
  if (bePlayer && !(sender instanceof Player))   return false;
  player=(Player)sender;
  return execute();
}",0.7617689015691869
178799,"public boolean execute(){
  if (!Permission.adminRegions(player))   return false;
  User user=PortalStick.players.get(player.getName());
  if (user.getPointOne() == null || user.getPointTwo() == null)   Util.sendMessage(sender,""String_Node_Str"");
 else   if (RegionManager.getRegion(args.get(0)) != null)   Util.sendMessage(sender,""String_Node_Str"");
 else {
    RegionManager.createRegion(args.get(0),user.getPointOne(),user.getPointTwo());
  }
  return false;
}","public boolean execute(){
  if (!Permission.adminRegions(player))   return false;
  User user=PortalStick.players.get(player.getName());
  if (user.getPointOne() == null || user.getPointTwo() == null)   Util.sendMessage(sender,""String_Node_Str"");
 else   if (RegionManager.getRegion(args.get(0)) != null)   Util.sendMessage(sender,""String_Node_Str"");
 else {
    Util.sendMessage(sender,""String_Node_Str"" + args.get(0) + ""String_Node_Str"");
    RegionManager.createRegion(args.get(0),user.getPointOne(),user.getPointTwo());
  }
  return true;
}",0.9116186693147964
178800,"public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled())   return;
  Player player=event.getPlayer();
  User user=PortalStick.players.get(player.getName());
  Region region=RegionManager.getRegion(player.getLocation());
  HashSet<Byte> tb=new HashSet<Byte>();
  for (  int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))   tb.add((byte)i);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      List<Block> targetBlocks=event.getPlayer().getLastTwoTargetBlocks(tb,120);
      if (targetBlocks.size() != 2)       return;
      Block b=targetBlocks.get(1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
}","public void onPlayerInteract(PlayerInteractEvent event){
  Player player=event.getPlayer();
  User user=PortalStick.players.get(player.getName());
  Region region=RegionManager.getRegion(player.getLocation());
  HashSet<Byte> tb=new HashSet<Byte>();
  for (  int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))   tb.add((byte)i);
  Util.info(event.getAction().name());
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      List<Block> targetBlocks=event.getPlayer().getLastTwoTargetBlocks(tb,120);
      if (targetBlocks.size() != 2)       return;
      Block b=targetBlocks.get(1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
}",0.9799472295514512
178801,"public void updateLocation(){
  String[] loc=((String)settings.get(RegionSetting.LOCATION)).split(""String_Node_Str"");
  String[] loc1=loc[1].split(""String_Node_Str"");
  PointOne=new Vector(Integer.parseInt(loc1[0]),Integer.parseInt(loc1[1]),Integer.parseInt(loc1[2]));
  String[] loc2=loc[2].split(""String_Node_Str"");
  PointOne=new Vector(Integer.parseInt(loc2[0]),Integer.parseInt(loc2[1]),Integer.parseInt(loc2[2]));
  World=loc[0];
}","public void updateLocation(){
  String[] loc=((String)settings.get(RegionSetting.LOCATION)).split(""String_Node_Str"");
  String[] loc1=loc[1].split(""String_Node_Str"");
  PointOne=new Vector(Integer.parseInt(loc1[0]),Integer.parseInt(loc1[1]),Integer.parseInt(loc1[2]));
  String[] loc2=loc[2].split(""String_Node_Str"");
  PointTwo=new Vector(Integer.parseInt(loc2[0]),Integer.parseInt(loc2[1]),Integer.parseInt(loc2[2]));
  World=loc[0];
}",0.9862700228832952
178802,"public void onBlockIgnite(BlockIgniteEvent event){
  if (event.getPlayer() == null)   return;
  Player player=event.getPlayer();
  if (event.getCause() == IgniteCause.FLINT_AND_STEEL) {
    if (!Permission.createGrill(event.getPlayer()))     return;
    if (!Config.EnabledWorlds.contains(player.getLocation().getWorld().getName())) {
      Util.sendMessage(player,Config.MessageRestrictedWorld);
      return;
    }
    if (GrillManager.placeEmancipationGrill(event.getBlock().getRelative(0,-1,0)))     event.setCancelled(true);
  }
}","public void onBlockIgnite(BlockIgniteEvent event){
  if (event.getPlayer() == null)   return;
  Player player=event.getPlayer();
  if (event.getCause() == IgniteCause.FLINT_AND_STEEL) {
    if (!Permission.createGrill(event.getPlayer()))     return;
    if (Config.DisabledWorlds.contains(player.getLocation().getWorld().getName())) {
      Util.sendMessage(player,Config.MessageRestrictedWorld);
      return;
    }
    if (GrillManager.placeRecursiveEmancipationGrill(event.getBlock().getRelative(0,-1,0)))     event.setCancelled(true);
  }
}",0.9860982391102872
178803,"public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled())   return;
  Player player=event.getPlayer();
  User user=PortalStick.players.get(player.getName());
  Region region=RegionManager.getRegion(player.getLocation());
  HashSet<Byte> tb=new HashSet<Byte>();
  for (  int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))   tb.add((byte)i);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    if (!Config.EnabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      List<Block> targetBlocks=event.getPlayer().getLastTwoTargetBlocks(tb,120);
      if (targetBlocks.size() != 2)       return;
      Block b=targetBlocks.get(1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
}","public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled())   return;
  Player player=event.getPlayer();
  User user=PortalStick.players.get(player.getName());
  Region region=RegionManager.getRegion(player.getLocation());
  HashSet<Byte> tb=new HashSet<Byte>();
  for (  int i : region.getList(RegionSetting.TRANSPARENT_BLOCKS).toArray(new Integer[0]))   tb.add((byte)i);
  if (player.getItemInHand().getTypeId() == Config.PortalTool && (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK)) {
    if (Config.DisabledWorlds.contains(event.getPlayer().getLocation().getWorld().getName())) {
      player.sendMessage(Config.MessageRestrictedWorld);
      return;
    }
    Boolean orange=false;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK)     orange=true;
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_AIR || tb.contains((byte)event.getClickedBlock().getTypeId())) {
      List<Block> targetBlocks=event.getPlayer().getLastTwoTargetBlocks(tb,120);
      if (targetBlocks.size() != 2)       return;
      Block b=targetBlocks.get(1);
      PortalManager.placePortal(b,event.getPlayer(),orange);
    }
 else {
      PortalManager.placePortal(event.getClickedBlock(),event.getBlockFace(),event.getPlayer(),orange,true);
    }
  }
 else   if (user.getUsingTool() && player.getItemInHand().getTypeId() == Config.RegionTool) {
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
      user.setPointTwo(event.getClickedBlock().getLocation());
    Util.sendMessage(player,""String_Node_Str"");
  break;
case LEFT_CLICK_BLOCK:
user.setPointOne(event.getClickedBlock().getLocation());
Util.sendMessage(player,""String_Node_Str"");
break;
}
}
}",0.998416050686378
178804,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  Player player=event.getPlayer();
  Vector vector=player.getVelocity();
  Block loc=event.getTo().getBlock();
  Region regionTo=RegionManager.getRegion(event.getTo());
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  User user=PortalStick.players.get(player.getName());
  PortalManager.checkPlayerMove(player,regionFrom,regionTo);
  if (loc.getType() == Material.SUGAR_CANE_BLOCK && regionTo.getBoolean(RegionSetting.ENABLE_GRILL)) {
    for (    Grill grill : GrillManager.grills) {
      if (grill.getInside().contains(loc)) {
        if (user != null) {
          if (user.getBluePortal() != null)           user.getBluePortal().delete();
          if (user.getOrangePortal() != null)           user.getOrangePortal().delete();
        }
        if (regionTo.getBoolean(RegionSetting.GRILLS_CLEAR_INVENTORY)) {
          PortalManager.setPortalInventory(player);
        }
      }
    }
  }
  if (player.isInsideVehicle())   return;
  if (!Permission.teleport(player))   return;
  double addX=0.0;
  double addY=0.0;
  double addZ=0.0;
  if (Math.abs(vector.getX()) > 1) {
    addX+=3.0;
    addY+=2.0;
    addZ+=2.0;
  }
  if (Math.abs(vector.getZ()) > 1) {
    addX+=2.0;
    addY+=2.0;
    addZ+=3.0;
  }
  if (Math.abs(vector.getY()) > 1) {
    addX+=2.0;
    addY+=3.0;
    addZ+=2.0;
  }
  Portal portal=null;
  for (  Portal p : PortalManager.portals) {
    for (    Block b : p.getInside()) {
      if (offsetequals(b.getLocation().getX(),loc.getX(),addX) && offsetequals(b.getLocation().getZ(),loc.getZ(),addZ) && offsetequals(b.getLocation().getY(),loc.getY(),addY)) {
        portal=p;
        break;
      }
    }
  }
  if (portal != null) {
    if (!portal.isOpen() || portal.isDisabled())     return;
    User owner=portal.getOwner();
    Location teleport;
    Portal destination;
    if (portal.isOrange())     destination=owner.getBluePortal();
 else     destination=owner.getOrangePortal();
    teleport=destination.getTeleportLocation().clone();
    float yaw=0;
    float pitch=0;
    Double momentum=0.0;
switch (portal.getTeleportFace()) {
case NORTH:
case SOUTH:
      momentum=vector.getX();
    break;
case EAST:
case WEST:
  momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum=momentum * regionTo.getInt(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=player.getVelocity().zero();
switch (destination.getTeleportFace()) {
case NORTH:
yaw=270;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw=0;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw=90;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw=180;
outvector=outvector.setZ(-momentum);
break;
case UP:
pitch=90;
outvector=outvector.setY(momentum);
break;
case DOWN:
pitch=-90;
outvector=outvector.setY(-momentum);
break;
}
player.setFallDistance(0);
player.setVelocity(player.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
event.setTo(teleport);
player.teleport(teleport);
player.setVelocity(outvector);
destination.setDisabled(true);
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new EnablePortal(destination),10L);
}
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  Player player=event.getPlayer();
  Vector vector=player.getVelocity();
  Block loc=event.getTo().getBlock();
  Region regionTo=RegionManager.getRegion(event.getTo());
  Region regionFrom=RegionManager.getRegion(event.getFrom());
  User user=PortalStick.players.get(player.getName());
  PortalManager.checkPlayerMove(player,regionFrom,regionTo);
  if (loc.getType() == Material.SUGAR_CANE_BLOCK && regionTo.getBoolean(RegionSetting.ENABLE_GRILL)) {
    for (    Grill grill : GrillManager.grills) {
      if (grill.getInside().contains(loc)) {
        if (user != null) {
          if (user.getBluePortal() != null)           user.getBluePortal().delete();
          if (user.getOrangePortal() != null)           user.getOrangePortal().delete();
        }
        if (regionTo.getBoolean(RegionSetting.GRILLS_CLEAR_INVENTORY)) {
          PortalManager.setPortalInventory(player);
        }
      }
    }
  }
  if (player.isInsideVehicle())   return;
  if (!Permission.teleport(player))   return;
  double addX=0.0;
  double addY=0.0;
  double addZ=0.0;
  if (Math.abs(vector.getX()) > 1) {
    addX+=3.0;
    addY+=2.0;
    addZ+=2.0;
  }
  if (Math.abs(vector.getZ()) > 1) {
    addX+=2.0;
    addY+=2.0;
    addZ+=3.0;
  }
  if (Math.abs(vector.getY()) > 1) {
    addX+=2.0;
    addY+=3.0;
    addZ+=2.0;
  }
  Portal portal=null;
  for (  Portal p : PortalManager.portals) {
    for (    Block b : p.getInside()) {
      if (offsetequals(b.getLocation().getX(),loc.getX(),addX) && offsetequals(b.getLocation().getZ(),loc.getZ(),addZ) && offsetequals(b.getLocation().getY(),loc.getY(),addY)) {
        portal=p;
        break;
      }
    }
  }
  if (portal != null) {
    if (!portal.isOpen() || portal.isDisabled())     return;
    User owner=portal.getOwner();
    Location teleport;
    Portal destination;
    if (portal.isOrange())     destination=owner.getBluePortal();
 else     destination=owner.getOrangePortal();
    teleport=destination.getTeleportLocation().clone();
    float yaw=0;
    float pitch=0;
    Double momentum=0.0;
switch (portal.getTeleportFace()) {
case NORTH:
case SOUTH:
      momentum=vector.getX();
    break;
case EAST:
case WEST:
  momentum=vector.getZ();
break;
case UP:
case DOWN:
momentum=vector.getY();
break;
}
momentum=Math.abs(momentum);
momentum=momentum * regionTo.getDouble(RegionSetting.VELOCITY_MULTIPLIER);
Vector outvector=player.getVelocity().zero();
switch (destination.getTeleportFace()) {
case NORTH:
yaw=270;
outvector=outvector.setX(momentum);
break;
case EAST:
yaw=0;
outvector=outvector.setZ(momentum);
break;
case SOUTH:
yaw=90;
outvector=outvector.setX(-momentum);
break;
case WEST:
yaw=180;
outvector=outvector.setZ(-momentum);
break;
case UP:
pitch=90;
outvector=outvector.setY(momentum);
break;
case DOWN:
pitch=-90;
outvector=outvector.setY(-momentum);
break;
}
player.setFallDistance(0);
player.setVelocity(player.getVelocity().zero());
teleport.setPitch(pitch);
teleport.setYaw(yaw);
event.setTo(teleport);
player.teleport(teleport);
player.setVelocity(outvector);
destination.setDisabled(true);
plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new EnablePortal(destination),10L);
}
}",0.9986164488854729
178805,"public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  User user=PortalStick.players.get(player.getName());
  if (Config.DeleteOnQuit)   PortalManager.deletePortals(user);
  Region region=RegionManager.getRegion(player.getLocation());
  if (region.Name != ""String_Node_Str"" && region.getBoolean(RegionSetting.UNIQUE_INVENTORY))   player.getInventory().setContents(user.getInventory().getContents());
  PortalStick.players.remove(player.getName());
}","public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  User user=PortalStick.players.get(player.getName());
  Region region=RegionManager.getRegion(player.getLocation());
  if (region.Name != ""String_Node_Str"" && region.getBoolean(RegionSetting.UNIQUE_INVENTORY))   player.getInventory().setContents(user.getInventory().getContents());
  if (Config.DeleteOnQuit) {
    PortalManager.deletePortals(user);
    PortalStick.players.remove(player.getName());
  }
}",0.8577319587628865
178806,"public static void loadRegionSettings(Region region){
  for (  RegionSetting setting : RegionSetting.values()) {
    Object prop=regionConfig.getProperty(mkRegionNode(region.Name,setting.getYaml()));
    if (prop == null)     region.settings.put(setting,setting.getDefault());
 else     region.settings.put(setting,prop);
    regionConfig.setProperty(mkRegionNode(region.Name,setting.getYaml()),region.settings.get(setting));
  }
  region.updateLocation();
}","public static void loadRegionSettings(Region region){
  for (  RegionSetting setting : RegionSetting.values()) {
    Object prop=regionConfig.getProperty(region.Name + ""String_Node_Str"" + setting.getYaml());
    if (prop == null)     region.settings.put(setting,setting.getDefault());
 else     region.settings.put(setting,prop);
    regionConfig.setProperty(region.Name + ""String_Node_Str"" + setting.getYaml(),region.settings.get(setting));
  }
  region.updateLocation();
}",0.8304721030042919
178807,"public static void saveAll(){
  for (  Map.Entry<String,Region> entry : RegionManager.getRegionMap().entrySet()) {
    Region region=entry.getValue();
    for (    Entry<RegionSetting,Object> setting : region.settings.entrySet())     regionConfig.setProperty(mkRegionNode(setting.getKey().getYaml(),region.Name),setting.getValue());
  }
  if (!regionConfig.save())   Util.severe(""String_Node_Str"");
  grillConfig.removeProperty(""String_Node_Str"");
  List<String> list=new ArrayList<String>();
  for (  Grill grill : GrillManager.getGrillList()) {
    Block b=grill.getFirstBlock();
    Location loc=b.getLocation();
    list.add(b.getWorld().getName() + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
  }
  grillConfig.setProperty(""String_Node_Str"",list);
  if (!grillConfig.save())   Util.severe(""String_Node_Str"");
  if (!mainConfig.save())   Util.severe(""String_Node_Str"");
}","public static void saveAll(){
  for (  Map.Entry<String,Region> entry : RegionManager.getRegionMap().entrySet()) {
    Region region=entry.getValue();
    for (    Entry<RegionSetting,Object> setting : region.settings.entrySet())     regionConfig.setProperty(region.Name + ""String_Node_Str"" + setting.getKey().getYaml(),setting.getValue());
  }
  if (!regionConfig.save())   Util.severe(""String_Node_Str"");
  grillConfig.removeProperty(""String_Node_Str"");
  List<String> list=new ArrayList<String>();
  for (  Grill grill : GrillManager.getGrillList()) {
    Block b=grill.getFirstBlock();
    Location loc=b.getLocation();
    list.add(b.getWorld().getName() + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
  }
  grillConfig.setProperty(""String_Node_Str"",list);
  if (!grillConfig.save())   Util.severe(""String_Node_Str"");
  if (!mainConfig.save())   Util.severe(""String_Node_Str"");
}",0.9688172043010752
178808,"public Config(PortalStick instance){
  plugin=instance;
  mainConfig=plugin.getConfiguration();
  mainConfig.load();
  regionConfig=getConfigFile(""String_Node_Str"");
  grillConfig=getConfigFile(""String_Node_Str"");
  List<String> keys=mainConfig.getKeys(""String_Node_Str"");
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",plugin.getServer().getWorlds().get(0));
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",false);
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",false);
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",280);
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",268);
  keys=mainConfig.getKeys(""String_Node_Str"");
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!keys.contains(""String_Node_Str""))   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!keys.contains(""String_Node_Str""))   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!keys.contains(""String_Node_Str""))   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickEnabled=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickDisabled=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  EnabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  saveAll();
}","public Config(PortalStick instance){
  plugin=instance;
  mainConfig=plugin.getConfiguration();
  mainConfig.load();
  regionConfig=getConfigFile(""String_Node_Str"");
  grillConfig=getConfigFile(""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",false);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",280);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",268);
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   ;
  mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (mainConfig.getProperty(""String_Node_Str"") == null)   mainConfig.setProperty(""String_Node_Str"",""String_Node_Str"");
  MessageCannotPlacePortal=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickEnabled=mainConfig.getString(""String_Node_Str"");
  MessagePortalStickDisabled=mainConfig.getString(""String_Node_Str"");
  MessageRestrictedWorld=mainConfig.getString(""String_Node_Str"");
  DisabledWorlds=new HashSet<String>(mainConfig.getStringList(""String_Node_Str"",null));
  DeleteOnQuit=mainConfig.getBoolean(""String_Node_Str"",false);
  PortalTool=mainConfig.getInt(""String_Node_Str"",280);
  CompactPortal=mainConfig.getBoolean(""String_Node_Str"",false);
  RegionTool=mainConfig.getInt(""String_Node_Str"",268);
  if (regionConfig.getKeys(""String_Node_Str"") != null)   for (  String regionName : regionConfig.getKeys(""String_Node_Str""))   RegionManager.loadRegion(regionName);
  if (RegionManager.getRegion(""String_Node_Str"") == null)   RegionManager.loadRegion(""String_Node_Str"");
  for (  String grill : grillConfig.getStringList(""String_Node_Str"",null))   GrillManager.loadGrill(grill);
  saveAll();
}",0.6730232558139535
178809,"public static void deleteRegion(String name){
  regionConfig.removeProperty(""String_Node_Str"" + name);
}","public static void deleteRegion(String name){
  regionConfig.removeProperty(name);
}",0.8936170212765957
178810,"private static Configuration getConfigFile(String filename){
  Configuration configfile=null;
  File file=new File(plugin.getDataFolder(),filename);
  if (!file.exists()) {
    try {
      file.createNewFile();
      PrintWriter output=new PrintWriter(file);
      output.println(""String_Node_Str"");
      output.close();
    }
 catch (    Exception e) {
      Util.severe(""String_Node_Str"" + filename);
    }
  }
  try {
    configfile=new Configuration(file);
    configfile.load();
    configfile.removeProperty(""String_Node_Str"");
    configfile.save();
  }
 catch (  Exception e) {
    Util.severe(""String_Node_Str"" + filename);
  }
  return configfile;
}","private static Configuration getConfigFile(String filename){
  Configuration configfile=null;
  File file=new File(plugin.getDataFolder(),filename);
  try {
    configfile=new Configuration(file);
    configfile.load();
    configfile.removeProperty(""String_Node_Str"");
    configfile.save();
  }
 catch (  Exception e) {
    Util.severe(""String_Node_Str"" + filename);
  }
  return configfile;
}",0.5080568720379147
178811,"/** 
 * Finds all the base URIs which contain a (prefix) package. The URIs are returned without the actual package, opposed to a call to   {@link #findURIs(String)}
 * @param prefix The package prefix to scan for.
 * @return the base URIs
 */
public Set<URI> findBaseURIs(String prefix){
  Set<URI> result=new HashSet<URI>();
  Set<URI> urIs=findURIs(prefix);
  String path=packagePrefixToPath(prefix);
  for (  URI urI : urIs) {
    String schemeSpecificPart=urI.getSchemeSpecificPart();
    String based=schemeSpecificPart.substring(0,schemeSpecificPart.length() - path.length());
    try {
      result.add(new URI(urI.getScheme(),based,urI.getFragment()));
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
  }
  logger.debug(""String_Node_Str"",result);
  return result;
}","/** 
 * Finds all the base URIs which contain a (prefix) package. The URIs are returned without the actual package, opposed to a call to   {@link #findURIs(String)}
 * @param prefix The package prefix to scan for.
 * @return the base URIs
 */
public Set<URI> findBaseURIs(String prefix){
  Set<URI> result=new HashSet<URI>();
  Set<URI> urIs=findURIs(prefix);
  String path=packagePrefixToPath(prefix);
  for (  URI urI : urIs) {
    String schemeSpecificPart=urI.getSchemeSpecificPart();
    int l=path.length();
    if (schemeSpecificPart.endsWith(""String_Node_Str"") && !path.endsWith(""String_Node_Str"")) {
      l++;
    }
    String based=schemeSpecificPart.substring(0,schemeSpecificPart.length() - l);
    try {
      result.add(new URI(urI.getScheme(),based,urI.getFragment()));
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
  }
  logger.debug(""String_Node_Str"",result);
  return result;
}",0.9134670487106016
178812,"private void createFields(EClass eClass,DescriptorProto.Builder pbMessage){
  for (  EStructuralFeature eFeature : eClass.getEStructuralFeatures()) {
    if (shouldIgnoreFeature(eFeature))     continue;
    FieldDescriptorProto.Builder pbField=pbMessage.addFieldBuilder().setLabel(getFieldLabel(eFeature)).setName(eFeature.getName()).setNumber(pbMessage.getFieldCount());
    registry.find(eFeature.getEType()).mapReference(eFeature.getEType(),pbField);
  }
}","private void createFields(EClass eClass,DescriptorProto.Builder pbMessage){
  for (  EStructuralFeature eFeature : eClass.getEAllStructuralFeatures()) {
    if (shouldIgnoreFeature(eFeature))     continue;
    FieldDescriptorProto.Builder pbField=pbMessage.addFieldBuilder().setLabel(getFieldLabel(eFeature)).setName(eFeature.getName()).setNumber(pbMessage.getFieldCount());
    registry.find(eFeature.getEType()).mapReference(eFeature.getEType(),pbField);
  }
}",0.996742671009772
178813,"@Override protected void doMapReference(EEnum eEnum,FieldDescriptorProto.Builder pbField){
  pbField.setType(FieldDescriptorProto.Type.TYPE_ENUM);
  pbField.setTypeName(naming.getEnum(eEnum));
}","@Override protected void doMapReference(EEnum eEnum,FieldDescriptorProto.Builder pbField){
  pbField.setType(FieldDescriptorProto.Type.TYPE_ENUM);
  pbField.setTypeName(naming.getQualifiedEnum(eEnum));
}",0.9773299748110832
178814,"/** 
 */
public int read(InputStream in,int offset,int byteCount) throws IOException {
  if (_bytes.length + offset < byteCount) {
    byte[] newBytes=new byte[byteCount + offset];
    System.arraycopy(_bytes,0,newBytes,0,_bytes.length);
    _bytes=newBytes;
  }
  _size=in.read(_bytes,offset,byteCount);
  return _size;
}","/** 
 */
public int read(InputStream in,int offset,int byteCount) throws IOException {
  if (offset + byteCount > _bytes.length) {
    byte[] newBytes=new byte[byteCount + offset];
    System.arraycopy(_bytes,0,newBytes,0,_bytes.length);
    _bytes=newBytes;
  }
  _size=in.read(_bytes,offset,byteCount);
  return _size;
}",0.9347826086956522
178815,"public void onTap(Position cell,boolean editable){
  if (activeInputMethod == cellThenValues && (cell == null || cell.equals(lastMarkedCell))) {
    setUndecided();
  }
 else {
    ifUndecidedUseCellThenValues();
    activeInputMethod.onTap(cell,editable);
  }
}","public void onTap(Position cell,boolean editable){
  if ((activeInputMethod == null || activeInputMethod == cellThenValues) && (cell == null || cell.equals(lastMarkedCell))) {
    setUndecided();
  }
 else {
    ifUndecidedUseCellThenValues();
    activeInputMethod.onTap(cell,editable);
  }
}",0.9441441441441442
178816,"public void onTap(Position position,boolean editable){
  if (!editable)   return;
  ValueSet cellValues=target.getCellValues(position);
  if (cellValues.containsAny(values)) {
    cellValues.removeAll(values);
    target.setCellValues(position,cellValues);
  }
 else {
    cellValues.addAll(values);
    target.setCellValues(position,cellValues);
  }
}","public void onTap(Position position,boolean editable){
  if (!editable || values.isEmpty())   return;
  ValueSet cellValues=target.getCellValues(position);
  if (cellValues.containsAny(values)) {
    cellValues.removeAll(values);
    target.setCellValues(position,cellValues);
  }
 else {
    cellValues.addAll(values);
    target.setCellValues(position,cellValues);
  }
}",0.9723756906077348
178817,"public CommandStack<?> createFromParcel(Parcel in){
  final int size=in.readInt();
  List<Command<?>> stack=new ArrayList<Command<?>>();
  for (int i=0; i < size; i++) {
    Command<?> command=in.readParcelable(null);
    stack.add(command);
  }
  return new CommandStack(stack);
}","public CommandStack<?> createFromParcel(Parcel in){
  final int size=in.readInt();
  List<Command<?>> stack=new ArrayList<Command<?>>();
  for (int i=0; i < size; i++) {
    Command<?> command=in.readParcelable(CommandStack.class.getClassLoader());
    stack.add(command);
  }
  return new CommandStack(stack);
}",0.718381112984823
178818,"public void testSaveAndRestoreMemento() throws Exception {
  AndokuPuzzle p1=MockPuzzleSource.createPuzzle(0);
  p1.computeSolution();
  p1.setValues(0,1,ValueSet.of(7));
  p1.setValues(0,2,ValueSet.of(6));
  p1.setValues(0,4,ValueSet.of(3,4));
  p1.setValues(0,5,ValueSet.of(8));
  p1.checkForErrors(true);
  assertEquals(2,p1.getRegionErrors().size());
  assertEquals(1,p1.getCellErrors().size());
  Serializable memento=p1.saveToMemento();
  memento=SerializableUtil.roundTrip(memento);
  AndokuPuzzle p2=MockPuzzleSource.createPuzzle(0);
  assertEquals(ValueSet.none(),p2.getValues(0,1));
  assertEquals(ValueSet.none(),p2.getValues(0,2));
  assertEquals(ValueSet.none(),p2.getValues(0,4));
  assertEquals(ValueSet.none(),p2.getValues(0,5));
  assertTrue(p2.getRegionErrors().isEmpty());
  assertTrue(p2.getCellErrors().isEmpty());
  p2.restoreFromMemento(memento);
  assertEquals(ValueSet.of(7),p2.getValues(0,1));
  assertEquals(ValueSet.of(6),p2.getValues(0,2));
  assertEquals(ValueSet.of(3,4),p2.getValues(0,4));
  assertEquals(ValueSet.of(8),p2.getValues(0,5));
  assertEquals(2,p2.getRegionErrors().size());
  assertEquals(1,p2.getCellErrors().size());
  assertEquals(p1.getRegionErrors(),p2.getRegionErrors());
  assertEquals(p1.getCellErrors(),p2.getCellErrors());
}","public void testSaveAndRestoreMemento() throws Exception {
  AndokuPuzzle p1=MockPuzzleSource.createPuzzle(0);
  p1.computeSolution();
  p1.setValues(0,1,ValueSet.of(7));
  p1.setValues(0,2,ValueSet.of(6));
  p1.setValues(0,4,ValueSet.of(3,4));
  p1.setValues(0,5,ValueSet.of(8));
  p1.checkForErrors(true);
  assertEquals(2,p1.getRegionErrors().size());
  assertEquals(1,p1.getCellErrors().size());
  byte[] memento=p1.saveToMemento();
  AndokuPuzzle p2=MockPuzzleSource.createPuzzle(0);
  assertEquals(ValueSet.none(),p2.getValues(0,1));
  assertEquals(ValueSet.none(),p2.getValues(0,2));
  assertEquals(ValueSet.none(),p2.getValues(0,4));
  assertEquals(ValueSet.none(),p2.getValues(0,5));
  assertTrue(p2.getRegionErrors().isEmpty());
  assertTrue(p2.getCellErrors().isEmpty());
  p2.restoreFromMemento(memento);
  assertEquals(ValueSet.of(7),p2.getValues(0,1));
  assertEquals(ValueSet.of(6),p2.getValues(0,2));
  assertEquals(ValueSet.of(3,4),p2.getValues(0,4));
  assertEquals(ValueSet.of(8),p2.getValues(0,5));
  assertEquals(2,p2.getRegionErrors().size());
  assertEquals(1,p2.getCellErrors().size());
  assertEquals(p1.getRegionErrors(),p2.getRegionErrors());
  assertEquals(p1.getCellErrors(),p2.getCellErrors());
}",0.9748502994011976
178819,"public boolean loadGame(PuzzleId puzzleId,AndokuPuzzle puzzle,TickTimer timer){
  if (Constants.LOG_V)   Log.v(TAG,""String_Node_Str"" + puzzleId + ""String_Node_Str"");
  SQLiteDatabase db=openHelper.getReadableDatabase();
  String[] columns={COL_PUZZLE,COL_TIMER};
  String selection=COL_SOURCE + ""String_Node_Str"" + COL_NUMBER+ ""String_Node_Str"";
  String[] selectionArgs={puzzleId.puzzleSourceId,String.valueOf(puzzleId.number)};
  Cursor cursor=db.query(TABLE_GAMES,columns,selection,selectionArgs,null,null,null);
  try {
    if (!cursor.moveToFirst()) {
      return false;
    }
    Object memento=deserialize(cursor.getBlob(0));
    long time=cursor.getLong(1);
    if (!puzzle.restoreFromMemento(memento)) {
      Log.w(TAG,""String_Node_Str"" + puzzleId);
      return false;
    }
    timer.setTime(time);
    return true;
  }
  finally {
    cursor.close();
  }
}","public boolean loadGame(PuzzleId puzzleId,AndokuPuzzle puzzle,TickTimer timer){
  if (Constants.LOG_V)   Log.v(TAG,""String_Node_Str"" + puzzleId + ""String_Node_Str"");
  SQLiteDatabase db=openHelper.getReadableDatabase();
  String[] columns={COL_PUZZLE,COL_TIMER};
  String selection=COL_SOURCE + ""String_Node_Str"" + COL_NUMBER+ ""String_Node_Str"";
  String[] selectionArgs={puzzleId.puzzleSourceId,String.valueOf(puzzleId.number)};
  Cursor cursor=db.query(TABLE_GAMES,columns,selection,selectionArgs,null,null,null);
  try {
    if (!cursor.moveToFirst()) {
      return false;
    }
    byte[] memento=cursor.getBlob(0);
    long time=cursor.getLong(1);
    if (!puzzle.restoreFromMemento(memento)) {
      Log.w(TAG,""String_Node_Str"" + puzzleId);
      return false;
    }
    timer.setTime(time);
    return true;
  }
  finally {
    cursor.close();
  }
}",0.9855240301100172
178820,"public void saveGame(PuzzleId puzzleId,AndokuPuzzle puzzle,TickTimer timer){
  if (Constants.LOG_V)   Log.v(TAG,""String_Node_Str"" + puzzleId + ""String_Node_Str"");
  long now=System.currentTimeMillis();
  SQLiteDatabase db=openHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    String[] columns={COL_ID};
    String selection=COL_SOURCE + ""String_Node_Str"" + COL_NUMBER+ ""String_Node_Str"";
    String[] selectionArgs={puzzleId.puzzleSourceId,String.valueOf(puzzleId.number)};
    Cursor cursor=db.query(TABLE_GAMES,columns,selection,selectionArgs,null,null,null);
    long rowId=-1;
    if (cursor.moveToFirst()) {
      rowId=cursor.getLong(0);
    }
    cursor.close();
    ContentValues values=new ContentValues();
    values.put(COL_PUZZLE,serialize(puzzle.saveToMemento()));
    values.put(COL_TIMER,timer.getTime());
    values.put(COL_SOLVED,puzzle.isSolved());
    values.put(COL_MODIFIED_DATE,now);
    if (rowId == -1) {
      values.put(COL_SOURCE,puzzleId.puzzleSourceId);
      values.put(COL_NUMBER,puzzleId.number);
      values.put(COL_TYPE,puzzle.getPuzzleType().ordinal());
      values.put(COL_CREATED_DATE,now);
      long insertedRowId=db.insert(TABLE_GAMES,null,values);
      if (insertedRowId == -1)       return;
    }
 else {
      int updated=db.update(TABLE_GAMES,values,COL_ID + ""String_Node_Str"",new String[]{String.valueOf(rowId)});
      if (updated == 0)       return;
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}","public void saveGame(PuzzleId puzzleId,AndokuPuzzle puzzle,TickTimer timer){
  if (Constants.LOG_V)   Log.v(TAG,""String_Node_Str"" + puzzleId + ""String_Node_Str"");
  long now=System.currentTimeMillis();
  SQLiteDatabase db=openHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    String[] columns={COL_ID};
    String selection=COL_SOURCE + ""String_Node_Str"" + COL_NUMBER+ ""String_Node_Str"";
    String[] selectionArgs={puzzleId.puzzleSourceId,String.valueOf(puzzleId.number)};
    Cursor cursor=db.query(TABLE_GAMES,columns,selection,selectionArgs,null,null,null);
    long rowId=-1;
    if (cursor.moveToFirst()) {
      rowId=cursor.getLong(0);
    }
    cursor.close();
    ContentValues values=new ContentValues();
    values.put(COL_PUZZLE,puzzle.saveToMemento());
    values.put(COL_TIMER,timer.getTime());
    values.put(COL_SOLVED,puzzle.isSolved());
    values.put(COL_MODIFIED_DATE,now);
    if (rowId == -1) {
      values.put(COL_SOURCE,puzzleId.puzzleSourceId);
      values.put(COL_NUMBER,puzzleId.number);
      values.put(COL_TYPE,puzzle.getPuzzleType().ordinal());
      values.put(COL_CREATED_DATE,now);
      long insertedRowId=db.insert(TABLE_GAMES,null,values);
      if (insertedRowId == -1)       return;
    }
 else {
      int updated=db.update(TABLE_GAMES,values,COL_ID + ""String_Node_Str"",new String[]{String.valueOf(rowId)});
      if (updated == 0)       return;
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}",0.9963296629963296
178821,"public String getIconFileName(){
  if (publisher.isPublishHtmlReport()) {
    FilePath r=getWorkspaceReportDir();
    if (exists(r,""String_Node_Str"")) {
      return ICON;
    }
  }
  File reportDir=getLastBuildReportDir();
  if (exists(new FilePath(reportDir),""String_Node_Str"")) {
    return ICON;
  }
  return null;
}","public String getIconFileName(){
  if (publisher.isPublishHtmlReport()) {
    FilePath r=getWorkspaceReportDir();
    if (exists(r,""String_Node_Str"")) {
      return ICON;
    }
  }
  File reportDir=getLastBuildReportDir();
  if (reportDir != null && exists(new FilePath(reportDir),""String_Node_Str"")) {
    return ICON;
  }
  return null;
}",0.9682299546142208
178822,"/** 
 * Test of getPercentageStr method, of class Ratio.
 */
@Test public void testGetPercentageStr_undefined(){
  Ratio ratio=Ratio.create(1.0f,0.0f);
  assertEquals(""String_Node_Str"",ratio.getPercentageStr());
  ratio=Ratio.create(1.0f,-5.0f);
  assertEquals(""String_Node_Str"",ratio.getPercentageStr());
}","/** 
 * Test of getPercentageStr method, of class Ratio.
 */
@Test public void testGetPercentageStr_undefined(){
  Ratio ratio=Ratio.create(1.0f,0.0f);
  assertEquals(""String_Node_Str"",ratio.getPercentageStr());
  ratio=Ratio.create(1.0f,-50.0f);
  assertEquals(""String_Node_Str"",ratio.getPercentageStr());
}",0.9983739837398374
178823,"/** 
 * Test of getPreviousCloverBuildAction method, of class AbstractClassMetrics.
 */
@Test public void testGetPreviousCloverBuildAction_ActionNull(){
  CloverBuildAction cba=mock(CloverBuildAction.class);
  Run<?,?> r=mock(Run.class);
  when(r.getAction(CloverBuildAction.class)).thenReturn(cba);
  AbstractBuild b=mock(AbstractBuild.class);
  when(b.getPreviousBuild()).thenReturn(r);
  target.setOwner(b);
  assertEquals(cba,target.getPreviousCloverBuildAction());
}","/** 
 * Test of getPreviousCloverBuildAction method, of class AbstractClassMetrics.
 */
@Test public void testGetPreviousCloverBuildAction_ActionNull(){
  CloverBuildAction cba2=null;
  Run prebuild2=mock(Run.class);
  when(prebuild2.getAction(CloverBuildAction.class)).thenReturn(cba2);
  CloverBuildAction cba=null;
  Run prebuild=mock(Run.class);
  when(prebuild.getAction(CloverBuildAction.class)).thenReturn(cba);
  when(prebuild.getPreviousBuild()).thenReturn(prebuild2);
  AbstractBuild b=mock(AbstractBuild.class);
  when(b.getPreviousBuild()).thenReturn(prebuild);
  target.setOwner(b);
  assertEquals(cba2,target.getPreviousCloverBuildAction());
}",0.6737588652482269
178824,"final boolean fillAttributes(){
  int len=unknown.length();
  if (len > 0) {
    if (unknownOffset >= 0) {
      positionIncrementAtt.setPositionIncrement(0);
    }
    int offset=reader.offset();
    if (matchCell != null) {
      offset-=matchCell.depth;
    }
    if (unknownOffset == -1) {
      termAtt.copyBuffer(unknown.buffer,0,len);
      offsetAtt.setOffset(offset - len,offset);
    }
 else {
      termAtt.copyBuffer(unknown.buffer,unknownOffset,2);
      offset=offset - len + unknownOffset;
      offsetAtt.setOffset(offset,offset + 2);
    }
    unknownOffset++;
    typeAtt.setType(""String_Node_Str"");
    if (len <= 2 || unknownOffset >= len - 1) {
      unknown.reset();
      unknownOffset=-1;
    }
    return true;
  }
  if (matchCell == null) {
    return false;
  }
  int offset=reader.offset();
  if (cellWordOffset > 0) {
    positionIncrementAtt.setPositionIncrement(0);
  }
  typeAtt.setType(matchCell.type);
  if (matchCell.type != ""String_Node_Str"") {
    termAtt.copyBuffer(pending.buffer,0,pending.length());
    offsetAtt.setOffset(offset - pending.length(),offset);
    matchCell=null;
    cellWordOffset=0;
  }
 else {
    char[][] words=matchCell.words;
    char[] word=words[cellWordOffset];
    termAtt.copyBuffer(word,0,word.length);
    int start=offset - matchCell.depth + matchCell.offsets[cellWordOffset];
    offsetAtt.setOffset(start,start + word.length);
    cellWordOffset++;
    if (cellWordOffset == words.length) {
      matchCell=null;
      cellWordOffset=0;
    }
  }
  return true;
}","final boolean fillAttributes(){
  int len=unknown.length();
  if (len > 0) {
    if (unknownOffset >= 0) {
      positionIncrementAtt.setPositionIncrement(0);
    }
    int offset=reader.offset();
    if (matchCell != null) {
      if (matchCell.type == ""String_Node_Str"") {
        offset-=matchCell.depth;
      }
 else {
        offset-=pending.length();
      }
    }
    if (unknownOffset == -1) {
      termAtt.copyBuffer(unknown.buffer,0,len);
      offsetAtt.setOffset(offset - len,offset);
    }
 else {
      termAtt.copyBuffer(unknown.buffer,unknownOffset,2);
      offset=offset - len + unknownOffset;
      offsetAtt.setOffset(offset,offset + 2);
    }
    unknownOffset++;
    typeAtt.setType(""String_Node_Str"");
    if (len <= 2 || unknownOffset >= len - 1) {
      unknown.reset();
      unknownOffset=-1;
    }
    return true;
  }
  if (matchCell == null) {
    return false;
  }
  int offset=reader.offset();
  if (cellWordOffset > 0) {
    positionIncrementAtt.setPositionIncrement(0);
  }
  typeAtt.setType(matchCell.type);
  if (matchCell.type != ""String_Node_Str"") {
    termAtt.copyBuffer(pending.buffer,0,pending.length());
    offsetAtt.setOffset(offset - pending.length(),offset);
    matchCell=null;
    cellWordOffset=0;
  }
 else {
    char[][] words=matchCell.words;
    char[] word=words[cellWordOffset];
    termAtt.copyBuffer(word,0,word.length);
    int start=offset - matchCell.depth + matchCell.offsets[cellWordOffset];
    offsetAtt.setOffset(start,start + word.length);
    cellWordOffset++;
    if (cellWordOffset == words.length) {
      matchCell=null;
      cellWordOffset=0;
    }
  }
  return true;
}",0.9657340458975164
178825,"public DictTokenizer(AttributeFactory factory,Reader in){
  super(factory,in);
  init();
}","public DictTokenizer(AttributeFactory factory,Reader in){
  super(factory,in);
}",0.9411764705882352
178826,"public boolean incrementToken() throws IOException {
  clearAttributes();
  return moveToNextToken();
}","public boolean incrementToken() throws IOException {
  if (reader == null) {
    reader=new CharReader(input);
  }
  clearAttributes();
  return moveToNextToken();
}",0.7686567164179104
178827,"final boolean moveToNextToken() throws IOException {
  if (fillAttributes()) {
    return true;
  }
  int i;
  char c;
  Cell cell=dict.root;
  boolean hasWord=false;
  boolean hasPending=false;
  pending.reset();
  for (; ; ) {
    i=reader.read();
    if (i == CharReader.EOF) {
      break;
    }
    c=(char)i;
    cell=cell.child(c);
    if (cell == null) {
      if (hasWord) {
        reader.reset();
        return fillAttributes();
      }
 else {
        cell=dict.root;
        if (hasPending) {
          hasPending=false;
          unknown.append(pending.buffer[0]);
          reader.reset();
          pending.reset();
          continue;
        }
        unknown.append(c);
        reader.mark();
        if (unknown.length() >= MAX_UNKNOWN_WORD_SIZE - 2) {
          return fillAttributes();
        }
      }
    }
 else {
      pending.append(c);
      if (cell.end) {
        matchCell=cell;
        return fillAttributes();
      }
 else       if (cell.wordEnd) {
        hasWord=true;
        matchCell=cell;
        reader.mark();
      }
 else {
        if (!hasPending) {
          hasPending=true;
          reader.mark();
        }
      }
    }
  }
  if (pending.length() > 0) {
    unknown.append(pending);
  }
  return fillAttributes();
}","final boolean moveToNextToken() throws IOException {
  if (fillAttributes()) {
    return true;
  }
  int i;
  char c;
  Cell cell=dict.root;
  boolean hasWord=false;
  boolean hasPending=false;
  pending.reset();
  for (; ; ) {
    i=reader.read();
    if (i == CharReader.EOF) {
      if (hasWord) {
        reader.reset();
        return fillAttributes();
      }
      break;
    }
    c=(char)i;
    cell=cell.child(c);
    if (cell == null) {
      if (hasWord) {
        reader.reset();
        return fillAttributes();
      }
 else {
        cell=dict.root;
        if (hasPending) {
          hasPending=false;
          unknown.append(pending.buffer[0]);
          reader.reset();
          pending.reset();
          continue;
        }
        unknown.append(c);
        reader.mark();
        if (unknown.length() >= MAX_UNKNOWN_WORD_SIZE - 2) {
          return fillAttributes();
        }
      }
    }
 else {
      pending.append(c);
      if (cell.end) {
        matchCell=cell;
        return fillAttributes();
      }
 else       if (cell.wordEnd) {
        hasWord=true;
        matchCell=cell;
        reader.mark();
      }
 else {
        if (!hasPending) {
          hasPending=true;
          reader.mark();
        }
      }
    }
  }
  if (pending.length() > 0) {
    unknown.append(pending);
  }
  return fillAttributes();
}",0.9672006102212052
178828,"/** 
 * Constructor for the thread that does zeroconf work
 */
public ZeroconfServiceThread(Context ctx,ArrayList<Messenger> givenClients,boolean givenSendBlacklist){
  super(ctx,givenClients);
  sendBlacklist=givenSendBlacklist;
  setName(""String_Node_Str"");
  wifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  lock=wifiManager.createMulticastLock(""String_Node_Str"");
  lock.setReferenceCounted(true);
  lock.acquire();
  updateHashes(sendBlacklist);
  updateData();
  setServiceState(STATE_NONE);
}","/** 
 * Constructor for the thread that does zeroconf work
 */
public ZeroconfServiceThread(Context ctx,ArrayList<Messenger> givenClients,boolean givenSendBlacklist){
  super(ctx,givenClients);
  sendBlacklist=givenSendBlacklist;
  setName(""String_Node_Str"");
  wifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  lock=wifiManager.createMulticastLock(""String_Node_Str"");
  lock.setReferenceCounted(true);
  lock.acquire();
  updateHashes(sendBlacklist);
  updateData();
  if (serverThread == null) {
    serverThread=new ZeroconfServerThread(ctx,threadHandler,clients);
    serverThread.setHashes(currentHashes);
    serverThread.setData(currentData);
    serverThread.start();
  }
  setServiceState(STATE_NONE);
}",0.8320126782884311
178829,"@Override public void serviceResolved(ServiceEvent ev){
  String additions=""String_Node_Str"";
  if (ev.getInfo().getInetAddresses() != null && ev.getInfo().getInetAddresses().length > 0) {
    log.debug(""String_Node_Str"" + ev.getInfo().getInetAddresses().length);
    additions=ev.getInfo().getInetAddresses()[0].getHostAddress();
    log.debug(""String_Node_Str"" + ev.getInfo().getQualifiedName() + ""String_Node_Str""+ ev.getInfo().getPort()+ ""String_Node_Str""+ additions);
    String host=additions;
    int port=ev.getInfo().getPort();
    if (!(ev.getInfo().getQualifiedName().equals(zeroconfServiceName + ""String_Node_Str"" + zeroconfType))) {
      connect(host,port);
    }
  }
}","@Override public void serviceResolved(ServiceEvent ev){
  String additions=""String_Node_Str"";
  if (ev.getInfo().getInetAddresses() != null && ev.getInfo().getInetAddresses().length > 0) {
    log.debug(""String_Node_Str"" + ev.getInfo().getInetAddresses().length);
    additions=ev.getInfo().getInetAddresses()[0].getHostAddress();
    log.debug(""String_Node_Str"" + ev.getInfo().getQualifiedName() + ""String_Node_Str""+ ev.getInfo().getPort()+ ""String_Node_Str""+ additions);
    String host=additions;
    int port=ev.getInfo().getPort();
    if (!(ev.getInfo().getQualifiedName().equals(zeroconfServiceName + ""String_Node_Str"" + zeroconfType))) {
      DiscoveredDevice d=new DiscoveredDevice(ev.getName(),host,port);
      discoveredDevices.put(ev.getName(),d);
    }
  }
  if (!discoveredDevices.isEmpty()) {
    Iterator it=discoveredDevices.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pairs=(Map.Entry)it.next();
      DiscoveredDevice d=(DiscoveredDevice)pairs.getValue();
      connect(d.getHost(),d.getPort());
    }
  }
}",0.778995960761685
178830,"/** 
 * Set the listener for mDNS results
 */
private void setListener(){
  serviceListener=new ServiceListener(){
    @Override public void serviceResolved(    ServiceEvent ev){
      String additions=""String_Node_Str"";
      if (ev.getInfo().getInetAddresses() != null && ev.getInfo().getInetAddresses().length > 0) {
        log.debug(""String_Node_Str"" + ev.getInfo().getInetAddresses().length);
        additions=ev.getInfo().getInetAddresses()[0].getHostAddress();
        log.debug(""String_Node_Str"" + ev.getInfo().getQualifiedName() + ""String_Node_Str""+ ev.getInfo().getPort()+ ""String_Node_Str""+ additions);
        String host=additions;
        int port=ev.getInfo().getPort();
        if (!(ev.getInfo().getQualifiedName().equals(zeroconfServiceName + ""String_Node_Str"" + zeroconfType))) {
          connect(host,port);
        }
      }
    }
    @Override public void serviceRemoved(    ServiceEvent ev){
      log.debug(""String_Node_Str"" + ev.getName());
    }
    @Override public void serviceAdded(    ServiceEvent event){
      jmdns.requestServiceInfo(event.getType(),event.getName(),1);
    }
  }
;
}","/** 
 * Set the listener for mDNS results
 */
private void setListener(){
  serviceListener=new ServiceListener(){
    @Override public void serviceResolved(    ServiceEvent ev){
      String additions=""String_Node_Str"";
      if (ev.getInfo().getInetAddresses() != null && ev.getInfo().getInetAddresses().length > 0) {
        log.debug(""String_Node_Str"" + ev.getInfo().getInetAddresses().length);
        additions=ev.getInfo().getInetAddresses()[0].getHostAddress();
        log.debug(""String_Node_Str"" + ev.getInfo().getQualifiedName() + ""String_Node_Str""+ ev.getInfo().getPort()+ ""String_Node_Str""+ additions);
        String host=additions;
        int port=ev.getInfo().getPort();
        if (!(ev.getInfo().getQualifiedName().equals(zeroconfServiceName + ""String_Node_Str"" + zeroconfType))) {
          DiscoveredDevice d=new DiscoveredDevice(ev.getName(),host,port);
          discoveredDevices.put(ev.getName(),d);
        }
      }
      if (!discoveredDevices.isEmpty()) {
        Iterator it=discoveredDevices.entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry pairs=(Map.Entry)it.next();
          DiscoveredDevice d=(DiscoveredDevice)pairs.getValue();
          connect(d.getHost(),d.getPort());
        }
      }
    }
    @Override public void serviceRemoved(    ServiceEvent ev){
      log.debug(""String_Node_Str"" + ev.getName());
      discoveredDevices.remove(ev.getName());
    }
    @Override public void serviceAdded(    ServiceEvent event){
      jmdns.requestServiceInfo(event.getType(),event.getName(),1);
    }
  }
;
}",0.8269445478228508
178831,"@Override public void serviceRemoved(ServiceEvent ev){
  log.debug(""String_Node_Str"" + ev.getName());
}","@Override public void serviceRemoved(ServiceEvent ev){
  log.debug(""String_Node_Str"" + ev.getName());
  discoveredDevices.remove(ev.getName());
}",0.8306451612903226
178832,"@Override public void onCreate(){
  log.debug(""String_Node_Str"");
  nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  state=STATE_NONE;
  pairedDevices=bluetoothAdapter.getBondedDevices();
  btFoundFilter=new IntentFilter(BluetoothDevice.ACTION_FOUND);
  btFoundFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
  btFoundFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
  this.registerReceiver(btDiscoveryReceiver,btFoundFilter);
  dbAdapter=new MessagesDbAdapter(this);
  dbAdapter.open();
  showNotification();
  if (serviceThread == null) {
    boolean paired=true;
    serviceThread=new BluetoothServiceThread(paired);
    log.debug(""String_Node_Str"");
    serviceThread.start();
  }
}","@Override public void onCreate(){
  log.debug(""String_Node_Str"");
  nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  state=STATE_NONE;
  Set<BluetoothDevice> tmp=bluetoothAdapter.getBondedDevices();
  for (  BluetoothDevice device : tmp) {
    allDevicesBT.add(device);
  }
  btFoundFilter=new IntentFilter(BluetoothDevice.ACTION_FOUND);
  btFoundFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
  btFoundFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
  this.registerReceiver(btDiscoveryReceiver,btFoundFilter);
  dbAdapter=new MessagesDbAdapter(this);
  dbAdapter.open();
  showNotification();
  if (serviceThread == null) {
    boolean paired=true;
    serviceThread=new BluetoothServiceThread(paired);
    log.debug(""String_Node_Str"");
    serviceThread.start();
  }
}",0.8890229191797346
178833,"@Override protected void onPause(){
  super.onPause();
}","@Override protected void onPause(){
  log.debug(""String_Node_Str"");
  super.onPause();
}",0.7777777777777778
178834,"@Override public void onStart(){
  super.onStart();
  dbAdapter=new MessagesDbAdapter(this);
  dbAdapter.open();
  fillListView(VIEW_MODE);
  setupPreferences();
  File dataDir=Environment.getExternalStorageDirectory();
  attachmentsDir=new File(dataDir.getAbsolutePath() + ""String_Node_Str"");
  attachmentsDir.mkdirs();
  if (bluetoothAdapter != null) {
    if (!bluetoothAdapter.isEnabled()) {
      Intent enableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
      startActivityForResult(enableIntent,REQUEST_ENABLE_BT);
      toast=Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
      toast.show();
    }
 else {
    }
  }
  enableBluetoothServicePref=prefs.getBoolean(""String_Node_Str"",true);
  if (enableBluetoothServicePref) {
    doBindService();
  }
}","@Override public void onStart(){
  log.debug(""String_Node_Str"");
  super.onStart();
  if (dbAdapter == null) {
    dbAdapter=new MessagesDbAdapter(this);
    dbAdapter.open();
  }
  fillListView(VIEW_MODE);
  setupPreferences();
  if (bluetoothAdapter != null) {
    if (!bluetoothAdapter.isEnabled()) {
      Intent enableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
      startActivityForResult(enableIntent,REQUEST_ENABLE_BT);
      toast=Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
      toast.show();
    }
 else {
    }
  }
  enableBluetoothServicePref=prefs.getBoolean(""String_Node_Str"",true);
  if (enableBluetoothServicePref) {
    doBindService();
  }
}",0.7856173677069199
178835,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  log.verbose(""String_Node_Str"");
  setContentView(R.layout.message_list);
  registerForContextMenu(getListView());
  log.verbose(""String_Node_Str"");
  bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  if (bluetoothAdapter == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  log.verbose(""String_Node_Str"");
  setContentView(R.layout.message_list);
  registerForContextMenu(getListView());
  bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  if (bluetoothAdapter == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  File dataDir=Environment.getExternalStorageDirectory();
  attachmentsDir=new File(dataDir.getAbsolutePath() + ""String_Node_Str"");
  attachmentsDir.mkdirs();
}",0.8094768015794669
178836,"@Override protected void onDestroy(){
  super.onDestroy();
  prefs.unregisterOnSharedPreferenceChangeListener(preferenceChangeListener);
  dbCursor.close();
  dbAdapter.close();
  try {
    if (bound) {
      doUnbindService();
    }
  }
 catch (  Throwable t) {
    log.debug(""String_Node_Str"");
  }
}","@Override protected void onDestroy(){
  log.debug(""String_Node_Str"");
  super.onDestroy();
  prefs.unregisterOnSharedPreferenceChangeListener(preferenceChangeListener);
  dbCursor.close();
  dbAdapter.close();
  dbAdapter=null;
  try {
    if (bound) {
      doUnbindService();
    }
  }
 catch (  Throwable t) {
    log.debug(""String_Node_Str"");
  }
}",0.2293577981651376
178837,"@Override protected void onResume(){
  super.onResume();
}","@Override protected void onResume(){
  log.debug(""String_Node_Str"");
  super.onResume();
}",0.7837837837837838
178838,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  dbAdapter=new MessagesDbAdapter(this);
  dbAdapter.open();
  setContentView(R.layout.message_edit);
  setTitle(R.string.message_add_outgoing_title);
  titleEditText=(EditText)findViewById(R.id.title_edit);
  messageEditText=(EditText)findViewById(R.id.message_edit);
  Button addAttachmentButton=(Button)findViewById(R.id.add_attachment_button);
  Button removeAttachmentButton=(Button)findViewById(R.id.remove_attachment_button);
  attachmentLabel=(TextView)findViewById(R.id.attachment_label);
  attachmentLabel.setVisibility(View.GONE);
  Spinner attachmentSpinner=(Spinner)findViewById(R.id.add_attachment_spinner);
  ArrayAdapter adapter=ArrayAdapter.createFromResource(this,R.array.add_attachment_array,android.R.layout.simple_spinner_item);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  attachmentSpinner.setAdapter(adapter);
  attachmentSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView adapter,    View v,    int i,    long l){
      if (i == 0) {
        attachmentType=SELECT_TEXT;
      }
 else       if (i == 1) {
        attachmentType=SELECT_AUDIO;
      }
 else       if (i == 2) {
        attachmentType=SELECT_IMAGE;
      }
 else       if (i == 3) {
        attachmentType=SELECT_VIDEO;
      }
    }
    @Override public void onNothingSelected(    AdapterView arg0){
    }
  }
);
  addAttachmentButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      if (attachmentType != SELECT_TEXT) {
switch (attachmentType) {
case SELECT_AUDIO:
          startActivityForResult(new Intent(Intent.ACTION_PICK,MediaStore.Audio.Media.INTERNAL_CONTENT_URI),attachmentType);
        break;
case SELECT_IMAGE:
      startActivityForResult(new Intent(Intent.ACTION_PICK,MediaStore.Images.Media.INTERNAL_CONTENT_URI),attachmentType);
    break;
case SELECT_VIDEO:
  startActivityForResult(new Intent(Intent.ACTION_PICK,MediaStore.Video.Media.INTERNAL_CONTENT_URI),attachmentType);
break;
default :
break;
}
}
}
}
);
removeAttachmentButton.setOnClickListener(new View.OnClickListener(){
public void onClick(View view){
attachmentLabel.setVisibility(View.GONE);
attachmentUri=null;
attachmentPath=null;
}
}
);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  messagesProviderHelper=new MessagesProviderHelper(this);
  setContentView(R.layout.message_edit);
  setTitle(R.string.message_add_outgoing_title);
  titleEditText=(EditText)findViewById(R.id.title_edit);
  messageEditText=(EditText)findViewById(R.id.message_edit);
  Button addAttachmentButton=(Button)findViewById(R.id.add_attachment_button);
  Button removeAttachmentButton=(Button)findViewById(R.id.remove_attachment_button);
  attachmentLabel=(TextView)findViewById(R.id.attachment_label);
  attachmentLabel.setVisibility(View.GONE);
  Spinner attachmentSpinner=(Spinner)findViewById(R.id.add_attachment_spinner);
  ArrayAdapter adapter=ArrayAdapter.createFromResource(this,R.array.add_attachment_array,android.R.layout.simple_spinner_item);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  attachmentSpinner.setAdapter(adapter);
  attachmentSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView adapter,    View v,    int i,    long l){
      if (i == 0) {
        attachmentType=SELECT_TEXT;
      }
 else       if (i == 1) {
        attachmentType=SELECT_AUDIO;
      }
 else       if (i == 2) {
        attachmentType=SELECT_IMAGE;
      }
 else       if (i == 3) {
        attachmentType=SELECT_VIDEO;
      }
    }
    @Override public void onNothingSelected(    AdapterView arg0){
    }
  }
);
  addAttachmentButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      if (attachmentType != SELECT_TEXT) {
switch (attachmentType) {
case SELECT_AUDIO:
          startActivityForResult(new Intent(Intent.ACTION_PICK,MediaStore.Audio.Media.INTERNAL_CONTENT_URI),attachmentType);
        break;
case SELECT_IMAGE:
      startActivityForResult(new Intent(Intent.ACTION_PICK,MediaStore.Images.Media.INTERNAL_CONTENT_URI),attachmentType);
    break;
case SELECT_VIDEO:
  startActivityForResult(new Intent(Intent.ACTION_PICK,MediaStore.Video.Media.INTERNAL_CONTENT_URI),attachmentType);
break;
default :
break;
}
}
}
}
);
removeAttachmentButton.setOnClickListener(new View.OnClickListener(){
public void onClick(View view){
attachmentLabel.setVisibility(View.GONE);
attachmentUri=null;
attachmentPath=null;
}
}
);
}",0.9829859634198214
178839,"/** 
 * Save our state to the database
 */
private void saveState(){
  String title=titleEditText.getText().toString();
  String message=messageEditText.getText().toString();
  if (attachmentPath == null) {
    dbAdapter.add_new(0,title,message);
  }
 else {
    File file=new File(attachmentPath);
    dbAdapter.add_new(attachmentType,title,message,attachmentPath,file.getName());
  }
}","/** 
 * Save our state to the database
 */
private void saveState(){
  String title=titleEditText.getText().toString();
  String message=messageEditText.getText().toString();
  if (attachmentPath == null) {
    messagesProviderHelper.add_new(0,title,message);
  }
 else {
    File file=new File(attachmentPath);
    messagesProviderHelper.add_new(attachmentType,title,message,attachmentPath,file.getName());
  }
}",0.9375
178840,"/** 
 * Set the state of the connected thread
 * @param state Int that defines the connected thread state
 */
private synchronized void setConnectedState(char newState){
  int iNew=(int)newState;
  int iConnected=(int)connectedState;
  String tmpNewState=Integer.toString(iNew);
  String tmpConnectedState=Integer.toString(iConnected);
  log.debug(""String_Node_Str"" + tmpConnectedState + ""String_Node_Str""+ tmpNewState);
  connectedState=newState;
}","/** 
 * Set the state of the connected thread
 * @param state char that defines the connected thread state
 */
private synchronized void setConnectedState(char newState){
  int iNew=(int)newState;
  int iConnected=(int)connectedState;
  String tmpNewState=Integer.toString(iNew);
  String tmpConnectedState=Integer.toString(iConnected);
  log.debug(""String_Node_Str"" + tmpConnectedState + ""String_Node_Str""+ tmpNewState);
  connectedState=newState;
}",0.9922135706340378
178841,"public long add_new(int type,String title,String data,String cellID){
  float now=(float)System.currentTimeMillis();
  ContentValues values=new ContentValues();
  values.put(KEY_SOURCE,IMSI_HASH);
  values.put(KEY_TIME,now);
  values.put(KEY_TYPE,type);
  values.put(KEY_TITLE,title);
  values.put(KEY_DATA,data);
  values.put(KEY_HASH,makeMD5(title + data));
  values.put(KEY_CELLID,cellID);
  values.put(KEY_MINE,1);
  return database.insert(DATABASE_TABLE,null,values);
}","public long add_new(int type,String title,String data,String cellID){
  float now=(float)(System.currentTimeMillis() / 1000);
  ContentValues values=new ContentValues();
  values.put(KEY_SOURCE,IMSI_HASH);
  values.put(KEY_TIME,now);
  values.put(KEY_TYPE,type);
  values.put(KEY_TITLE,title);
  values.put(KEY_DATA,data);
  values.put(KEY_HASH,makeMD5(title + data));
  values.put(KEY_CELLID,cellID);
  values.put(KEY_MINE,1);
  return database.insert(DATABASE_TABLE,null,values);
}",0.9905956112852664
178842,"public void initialPopulate(){
  float now=(float)System.currentTimeMillis();
  add_received(0,now,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  add_received(0,now,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  add_received(0,now,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  add_new(0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void initialPopulate(){
  float now=(float)(System.currentTimeMillis() / 1000);
  add_received(0,now,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  add_received(0,now,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  add_received(0,now,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  add_new(0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9882352941176472
178843,"/** 
 * Read our messages sent in protobuf format
 */
private void readMessages(){
  try {
    int messageSize=inputStream.readInt();
    byte[] messagesArray=new byte[messageSize];
    inputStream.readFully(messagesArray,0,messageSize);
    FluidNexusProtos.FluidNexusMessages messages=FluidNexusProtos.FluidNexusMessages.parseFrom(messagesArray);
    for (    FluidNexusProtos.FluidNexusMessage message : messages.getMessageList()) {
      log.debug(""String_Node_Str"" + message.getMessageTitle());
      log.debug(""String_Node_Str"" + message.getMessageContent());
      log.debug(""String_Node_Str"" + message.getMessageTimestamp());
      dbAdapter.add_received(0,message.getMessageTimestamp(),message.getMessageTitle(),message.getMessageContent());
    }
    sendNewMessageMsg();
    Message msg=threadHandler.obtainMessage(UPDATE_HASHES);
    threadHandler.sendMessage(msg);
    setConnectedState(STATE_WRITE_SWITCH);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + e);
    cleanupConnection();
  }
}","/** 
 * Read our messages sent in protobuf format
 */
private void readMessages(){
  try {
    int messageSize=inputStream.readInt();
    byte[] messagesArray=new byte[messageSize];
    inputStream.readFully(messagesArray,0,messageSize);
    FluidNexusProtos.FluidNexusMessages messages=FluidNexusProtos.FluidNexusMessages.parseFrom(messagesArray);
    int count=0;
    for (    FluidNexusProtos.FluidNexusMessage message : messages.getMessageList()) {
      log.debug(""String_Node_Str"" + message.getMessageTitle());
      log.debug(""String_Node_Str"" + message.getMessageContent());
      log.debug(""String_Node_Str"" + message.getMessageTimestamp());
      dbAdapter.add_received(0,message.getMessageTimestamp(),message.getMessageTitle(),message.getMessageContent());
      count+=1;
    }
    if (count > 0) {
      sendNewMessageMsg();
      Message msg=threadHandler.obtainMessage(UPDATE_HASHES);
      threadHandler.sendMessage(msg);
    }
    setConnectedState(STATE_WRITE_SWITCH);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + e);
    cleanupConnection();
  }
}",0.9686609686609686
178844,"public static void main(String[] argv) throws Exception {
  if (argv.length != 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  final String imageID=argv[0];
  final String friendlyName=argv[1];
  final String prefix=""String_Node_Str"" + imageID;
  final String seqDumpDirectory=prefix + ""String_Node_Str"";
  final String tokenDumpDirectory=prefix + ""String_Node_Str"";
  final String vectorDumpDirectory=prefix + ""String_Node_Str"";
  final String clusterDumpDirectory=prefix + ""String_Node_Str"";
  final String dictionaryDumpDirectory=prefix + ""String_Node_Str"";
  FSEntryTikaTextExtractor.runPipeline(HBaseTables.ENTRIES_TBL,imageID,friendlyName);
  GrepSearchJob.runPipeline(HBaseTables.ENTRIES_TBL,imageID,GREP_KEYWORDS,friendlyName);
  boolean filesToSequence=(SequenceFsEntryText.runPipeline(seqDumpDirectory,imageID,friendlyName));
  if (filesToSequence) {
    TokenizeAndVectorizeDocuments.runPipeline(seqDumpDirectory,tokenDumpDirectory,vectorDumpDirectory);
    ClusterDocumentsJob.runPipeline(vectorDumpDirectory + ""String_Node_Str"",clusterDumpDirectory,dictionaryDumpDirectory,.65,.65,imageID,friendlyName);
  }
  GrepReportGenerator.runPipeline(GREP_KEYWORDS,imageID,friendlyName,prefix);
  CrossImageScorerJob.runPipeline(prefix,imageID);
  HDFSArchiver.runPipeline(prefix + ""String_Node_Str"",prefix + ""String_Node_Str"");
}","public static void main(String[] argv) throws Exception {
  if (argv.length != 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  final String imageID=argv[0];
  final String friendlyName=argv[1];
  final String prefix=""String_Node_Str"" + imageID;
  final String seqDumpDirectory=prefix + ""String_Node_Str"";
  final String tokenDumpDirectory=prefix + ""String_Node_Str"";
  final String vectorDumpDirectory=prefix + ""String_Node_Str"";
  final String clusterDumpDirectory=prefix + ""String_Node_Str"";
  final String dictionaryDumpDirectory=prefix + ""String_Node_Str"";
  FSEntryTikaTextExtractor.runPipeline(HBaseTables.ENTRIES_TBL,imageID,friendlyName);
  GrepSearchJob.runPipeline(HBaseTables.ENTRIES_TBL,imageID,GREP_KEYWORDS,friendlyName);
  boolean filesToSequence=(SequenceFsEntryText.runPipeline(seqDumpDirectory,imageID,friendlyName));
  if (filesToSequence) {
    TokenizeAndVectorizeDocuments.runPipeline(seqDumpDirectory,tokenDumpDirectory,vectorDumpDirectory);
    ClusterDocumentsJob.runPipeline(vectorDumpDirectory + ""String_Node_Str"",clusterDumpDirectory,dictionaryDumpDirectory,.65,.65,imageID,friendlyName,prefix);
  }
  GrepReportGenerator.runPipeline(GREP_KEYWORDS,imageID,friendlyName,prefix);
  CrossImageScorerJob.runPipeline(prefix,imageID,friendlyName);
  HDFSArchiver.runPipeline(prefix + ""String_Node_Str"",prefix + ""String_Node_Str"");
}",0.9927007299270072
178845,"/** 
 * start a new process by executing a command script with arguments
 * @param fileName path to image file
 * @param id job name
 * @return command executed with all arguments
 * @throws Exception
 */
public String runAsync(String fileName,String id) throws IllegalArgumentException {
  if (!imagesSubmitted.containsKey(id)) {
    imagesSubmitted.put(id,Calendar.getInstance().getTime());
  }
  try {
    ProcessBuilder pb=new ProcessBuilder(commandScript,id,fileName,commandJar);
    pb.directory(new File(workDir));
    Map<String,String> env=pb.environment();
    env.put(""String_Node_Str"",SampleServiceImpl.fsripLib);
    env.put(""String_Node_Str"",SampleServiceImpl.hadoopHome);
    env.put(""String_Node_Str"",env.get(""String_Node_Str"") + SampleServiceImpl.path);
    pb.start();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new IllegalArgumentException(t.getMessage());
  }
  String command=commandScript + ""String_Node_Str"" + id+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ commandJar;
  System.err.println(""String_Node_Str"" + command);
  return command;
}","/** 
 * start a new process by executing a command script with arguments
 * @param fileName path to image file
 * @param id job name
 * @return command executed with all arguments
 * @throws Exception
 */
public String runAsync(String fileName,String id) throws IllegalArgumentException {
  imagesSubmitted.put(id,Calendar.getInstance().getTime());
  try {
    ProcessBuilder pb=new ProcessBuilder(commandScript,id,fileName,commandJar);
    pb.directory(new File(workDir));
    Map<String,String> env=pb.environment();
    env.put(""String_Node_Str"",SampleServiceImpl.fsripLib);
    env.put(""String_Node_Str"",SampleServiceImpl.hadoopHome);
    env.put(""String_Node_Str"",SampleServiceImpl.path);
    System.err.println(""String_Node_Str"" + env.get(""String_Node_Str""));
    System.err.println(""String_Node_Str"" + env.get(""String_Node_Str""));
    System.err.println(""String_Node_Str"" + env.get(""String_Node_Str""));
    System.err.println(""String_Node_Str"" + pb.directory().getPath());
    pb.start();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new IllegalArgumentException(t.getMessage());
  }
  String command=commandScript + ""String_Node_Str"" + id+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ commandJar;
  System.err.println(""String_Node_Str"" + command);
  return command;
}",0.8360587002096436
178846,"public static void main(String[] argv) throws Exception {
  if (argv.length != 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  final String imageID=argv[0];
  final String friendlyName=argv[1];
  final String prefix=""String_Node_Str"" + imageID;
  final String seqDumpDirectory=prefix + ""String_Node_Str"";
  final String tokenDumpDirectory=prefix + ""String_Node_Str"";
  final String vectorDumpDirectory=prefix + ""String_Node_Str"";
  final String clusterDumpDirectory=prefix + ""String_Node_Str"";
  final String dictionaryDumpDirectory=prefix + ""String_Node_Str"";
  FSEntryTikaTextExtractor.runPipeline(HBaseTables.ENTRIES_TBL,imageID,friendlyName);
  GrepSearchJob.runPipeline(HBaseTables.ENTRIES_TBL,imageID,GREP_KEYWORDS,friendlyName);
  SequenceFsEntryText.runPipeline(seqDumpDirectory,imageID,friendlyName);
  boolean filesToSequence=(SequenceFsEntryText.runPipeline(seqDumpDirectory,imageID,friendlyName));
  if (filesToSequence) {
    TokenizeAndVectorizeDocuments.runPipeline(seqDumpDirectory,tokenDumpDirectory,vectorDumpDirectory);
    ClusterDocuments.runPipeline(vectorDumpDirectory + ""String_Node_Str"",clusterDumpDirectory,dictionaryDumpDirectory,.65,.65,imageID,friendlyName);
  }
  GrepReportGenerator.runPipeline(GREP_KEYWORDS,imageID,friendlyName);
  HDFSArchiver.runPipeline(prefix + ""String_Node_Str"",prefix + ""String_Node_Str"");
}","public static void main(String[] argv) throws Exception {
  if (argv.length != 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  final String imageID=argv[0];
  final String friendlyName=argv[1];
  final String prefix=""String_Node_Str"" + imageID;
  final String seqDumpDirectory=prefix + ""String_Node_Str"";
  final String tokenDumpDirectory=prefix + ""String_Node_Str"";
  final String vectorDumpDirectory=prefix + ""String_Node_Str"";
  final String clusterDumpDirectory=prefix + ""String_Node_Str"";
  final String dictionaryDumpDirectory=prefix + ""String_Node_Str"";
  FSEntryTikaTextExtractor.runPipeline(HBaseTables.ENTRIES_TBL,imageID,friendlyName);
  GrepSearchJob.runPipeline(HBaseTables.ENTRIES_TBL,imageID,GREP_KEYWORDS,friendlyName);
  boolean filesToSequence=(SequenceFsEntryText.runPipeline(seqDumpDirectory,imageID,friendlyName));
  if (filesToSequence) {
    TokenizeAndVectorizeDocuments.runPipeline(seqDumpDirectory,tokenDumpDirectory,vectorDumpDirectory);
    ClusterDocuments.runPipeline(vectorDumpDirectory + ""String_Node_Str"",clusterDumpDirectory,dictionaryDumpDirectory,.65,.65,imageID,friendlyName);
  }
  GrepReportGenerator.runPipeline(GREP_KEYWORDS,imageID,friendlyName);
  HDFSArchiver.runPipeline(prefix + ""String_Node_Str"",prefix + ""String_Node_Str"");
}",0.9723053892215568
178847,"@Override public void map(ImmutableHexWritable key,FsEntry value,Context context) throws InterruptedException, IOException {
  try {
    ArrayList<Object> grepKeywordList=(ArrayList)value.get(HBaseConstants.GREP_SEARCHES);
    for (int i=0; i < grepKeywordList.size(); i++) {
      context.write(new LongWritable((int)(Integer)grepKeywordList.get(i)),new LongWritable(1));
    }
  }
 catch (  Exception ex) {
  }
}","@Override public void map(ImmutableHexWritable key,FsEntry value,Context context) throws InterruptedException, IOException {
  final List<Integer> grepKeywordList=(List<Integer>)value.get(HBaseConstants.GREP_SEARCHES);
  if (grepKeywordList != null) {
    for (    Integer i : grepKeywordList) {
      okey.set(i);
      context.write(okey,oval);
    }
  }
}",0.5544041450777202
178848,"public static void main(String[] args) throws Exception {
  final Configuration conf=new Configuration();
  final String[] otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();
  if (otherArgs.length != 4) {
    System.err.println(""String_Node_Str"");
    System.exit(2);
  }
  final Job job=new Job(conf,""String_Node_Str"");
  job.setJarByClass(ExtractData.class);
  job.setMapperClass(ExtractMapper.class);
  job.setNumReduceTasks(1);
  job.setInputFormatClass(RawFileInputFormat.class);
  RawFileInputFormat.addInputPath(job,new Path(otherArgs[2]));
  job.setOutputFormatClass(TextOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  conf.setInt(""String_Node_Str"",-1);
  conf.set(FsEntryHBaseOutputFormat.ENTRY_TABLE,otherArgs[0]);
  conf.set(""String_Node_Str"",otherArgs[3]);
  FileOutputFormat.setOutputPath(job,new Path(otherArgs[3]));
  final URI extents=new Path(otherArgs[1]).toUri();
  LOG.info(""String_Node_Str"" + extents);
  DistributedCache.addCacheFile(new Path(otherArgs[1]).toUri(),conf);
  System.exit(job.waitForCompletion(true) ? 0 : 1);
}","public static void main(String[] args) throws Exception {
  final Configuration conf=new Configuration();
  final String[] otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();
  if (otherArgs.length != 4) {
    System.err.println(""String_Node_Str"");
    System.exit(2);
  }
  final Job job=new Job(conf,""String_Node_Str"");
  job.setJarByClass(ExtractData.class);
  job.setMapperClass(ExtractMapper.class);
  job.setNumReduceTasks(1);
  job.setInputFormatClass(RawFileInputFormat.class);
  RawFileInputFormat.addInputPath(job,new Path(otherArgs[2]));
  job.setOutputFormatClass(TextOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  conf.setInt(""String_Node_Str"",-1);
  conf.set(FsEntryHBaseOutputFormat.ENTRY_TABLE,otherArgs[0]);
  conf.set(""String_Node_Str"",otherArgs[3]);
  FileOutputFormat.setOutputPath(job,new Path(otherArgs[3]));
  final URI extents=new Path(otherArgs[1]).toUri();
  LOG.info(""String_Node_Str"" + extents);
  DistributedCache.addCacheFile(extents,job.getConfiguration());
  conf.set(""String_Node_Str"",extents.toString());
  System.exit(job.waitForCompletion(true) ? 0 : 1);
}",0.9053280493174812
178849,"SequenceFile.Reader openExtentsFile(FileSystem hdpFs,Configuration conf) throws IOException {
  SequenceFile.Reader extents=null;
  final Path[] files=DistributedCache.getLocalCacheFiles(conf);
  if (files != null && files.length == 1) {
    final RawLocalFileSystem localfs=new RawLocalFileSystem();
    localfs.initialize(null,conf);
    extents=new SequenceFile.Reader(localfs,files[0],conf);
  }
 else   if (files == null) {
    extents=new SequenceFile.Reader(hdpFs,new Path(""String_Node_Str""),conf);
  }
  if (extents == null) {
    throw new RuntimeException(""String_Node_Str"" + files.length);
  }
  return extents;
}","SequenceFile.Reader openExtentsFile(FileSystem hdpFs,Configuration conf) throws IOException {
  SequenceFile.Reader extents=null;
  final Path[] files=DistributedCache.getLocalCacheFiles(conf);
  if (files != null && files.length > 0) {
    final LocalFileSystem localfs=FileSystem.getLocal(conf);
    LOG.info(""String_Node_Str"" + files[0]);
    extents=new SequenceFile.Reader(localfs,files[0],conf);
  }
 else   if (files == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (extents == null) {
    throw new RuntimeException(""String_Node_Str"" + files.length);
  }
  return extents;
}",0.8403908794788274
178850,"/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split().right();
      if (key.compareTo(right.lowerBound()) >= 0) {
        right.addValue(key,value);
      }
 else {
        leaf.addValue(key,value);
      }
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      while (parent != null && !parent.addChild(newRight.lowerBound(),newRight)) {
        InternalNode<K,V> parentRight=parent.split().left();
        K newLB=newRight.lowerBound();
        if (newLB.compareTo(parentRight.lowerBound()) >= 0) {
          parentRight.addChild(newLB,newRight);
          newRight.parent=parentRight;
        }
 else {
          parent.addChild(newLB,newRight);
        }
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  System.out.println(root);
  return null;
}","/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split().right();
      if (key.compareTo(right.lowerBound()) >= 0) {
        right.addValue(key,value);
      }
 else {
        leaf.addValue(key,value);
      }
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      while (parent != null && !parent.addChild(newRight.lowerBound(),newRight)) {
        InternalNode<K,V> parentRight=parent.split().left();
        K newLB=newRight.lowerBound();
        if (newLB.compareTo(parentRight.lowerBound()) >= 0) {
          parentRight.addChild(newLB,newRight);
          newRight.parent=parentRight;
        }
 else {
          parent.addChild(newLB,newRight);
        }
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return null;
}",0.9896983075791024
178851,"/** 
 * {@inheritDoc} 
 */
public Union.Left<InternalNode<K,V>,LeafNode<K,V>> split(){
  InternalNode<K,V> newNode;
  newNode=new InternalNode<K,V>(Arrays.copyOfRange(this.keys,(1 + keys.length) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,(1 + children.length) / 2,children.length),this.parent,this.next);
  this.next=newNode;
  this.numKeys=(1 + keys.length) / 2;
  return new Union.Left<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}","/** 
 * {@inheritDoc} 
 */
public Union.Left<InternalNode<K,V>,LeafNode<K,V>> split(){
  InternalNode<K,V> newNode;
  newNode=new InternalNode<K,V>(Arrays.copyOfRange(this.keys,(1 + keys.length) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,(1 + children.length) / 2,children.length),this.parent,this.next);
  this.next=newNode;
  this.numKeys=(1 + keys.length) / 2;
  newNode.numKeys=keys.length - numKeys;
  return new Union.Left<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}",0.9556756756756756
178852,"public String toString(){
  String output=""String_Node_Str"";
  for (int i=0; i < numKeys; ++i) {
    output+=children[i].toString() + ""String_Node_Str"";
  }
  return output + ""String_Node_Str"";
}","public String toString(){
  String output=""String_Node_Str"";
  output+=""String_Node_Str"" + children[0].toString() + ""String_Node_Str"";
  for (int i=0; i < numKeys; ++i) {
    output+=keys[i] + ""String_Node_Str"" + children[i + 1].toString();
    if (i < numKeys)     output+=""String_Node_Str"";
  }
  return output + ""String_Node_Str"";
}",0.7245283018867924
178853,"/** 
 * Inserts a new childNode into this node. <b>Assumes that there is room to store the extra key.</b>
 * @param key The key corresponding to the <b>childNode</b>.
 * @param childNode The node that the <b>key</b> should map to.
 */
public boolean addChild(K key,Node<K,V> childNode){
  if (numKeys < keys.length) {
    int sentry=0;
    while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
      sentry++;
    }
    if (sentry <= numKeys) {
      numKeys++;
      int end=numKeys;
      while (end != sentry) {
        keys[end]=keys[end - 1];
        end--;
      }
      keys[sentry]=key;
      children[sentry]=childNode;
      return true;
    }
  }
  return false;
}","/** 
 * Inserts a new childNode into this node. <b>Assumes that there is room to store the extra key.</b>
 * @param key The key corresponding to the <b>childNode</b>.
 * @param childNode The node that the <b>key</b> should map to.
 */
public boolean addChild(K key,Node<K,V> childNode){
  if (numKeys < keys.length) {
    int sentry=0;
    while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
      sentry++;
    }
    if (sentry < numKeysPerNode) {
      int end=numKeys;
      while (end != sentry) {
        keys[end]=keys[end - 1];
        children[end + 1]=children[end];
        --end;
      }
      keys[sentry]=key;
      children[sentry + 1]=childNode;
      numKeys++;
      return true;
    }
  }
  return false;
}",0.6887791107974595
178854,"/** 
 * {@inheritDoc} 
 */
public Union.Right<InternalNode<K,V>,LeafNode<K,V>> split(){
  LeafNode<K,V> newNode;
  newNode=new LeafNode<K,V>(Arrays.copyOfRange(this.keys,(1 + keys.length) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,(1 + keys.length) / 2,keys.length),this.parent,this.next);
  this.next=newNode;
  this.numKeys=(1 + keys.length) / 2;
  return new Union.Right<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}","/** 
 * {@inheritDoc} 
 */
public Union.Right<InternalNode<K,V>,LeafNode<K,V>> split(){
  LeafNode<K,V> newNode;
  newNode=new LeafNode<K,V>(Arrays.copyOfRange(this.keys,(1 + keys.length) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,(1 + keys.length) / 2,keys.length),this.parent,this.next);
  this.next=newNode;
  this.numKeys=(1 + keys.length) / 2;
  newNode.numKeys=keys.length - numKeys;
  return new Union.Right<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}",0.9542920847268672
178855,"/** 
 * Adds a key:value pair to the current LeafNode.
 * @param key The key of the value to add
 * @param value The value of the key to add.
 * @return True if success, false otherwise.
 */
@SuppressWarnings({""String_Node_Str""}) public boolean addValue(K key,V value){
  int i=0;
  while (i < numKeys && key.compareTo(keys[i]) < 0) {
    ++i;
  }
  if (keys[i].compareTo(key) == 0) {
    children[i]=value;
  }
 else   if (numKeys != numKeysPerNode) {
    for (int j=numKeys; j > i; --j) {
      keys[j]=keys[j - 1];
      children[j]=children[j - 1];
    }
    keys[i]=key;
    children[i]=value;
    numKeys++;
  }
 else {
    return false;
  }
  return true;
}","/** 
 * Adds a key:value pair to the current LeafNode.
 * @param key The key of the value to add
 * @param value The value of the key to add.
 * @return True if success, false otherwise.
 */
@SuppressWarnings({""String_Node_Str""}) public boolean addValue(K key,V value){
  int i=0;
  while (i < numKeys && keys[i].compareTo(key) < 0) {
    ++i;
  }
  if (i != numKeys && keys[i].compareTo(key) == 0) {
    children[i]=value;
  }
 else   if (numKeys != numKeysPerNode) {
    for (int j=numKeys; j > i; --j) {
      keys[j]=keys[j - 1];
      children[j]=children[j - 1];
    }
    keys[i]=key;
    children[i]=value;
    numKeys++;
  }
 else {
    return false;
  }
  return true;
}",0.9821428571428572
178856,"/** 
 * Test to make sure that the   {@link BTree} doesn't crash when we tryto insert things into it.
 * @param tree The BTree that we'll be (barely) testing.
 */
public static void testInsertion(BTree<Integer,Integer> tree){
  for (int i=0; i < 100; i++) {
    System.out.println(i + ""String_Node_Str"" + (i * 10));
    tree.put(i,i * 10);
  }
}","/** 
 * Test to make sure that the   {@link BTree} doesn't crash when we tryto insert things into it.
 * @param tree The BTree that we'll be (barely) testing.
 */
public static void testInsertion(BTree<Integer,Integer> tree){
  for (int i=0; i < 100; i++) {
    System.out.println(i + ""String_Node_Str"" + (i * 10));
    tree.put(i,i * 10);
    if (i <= 11) {
      System.out.println(tree);
    }
  }
}",0.923694779116466
178857,"/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  if (root != null)   System.out.println(""String_Node_Str"" + root.getClass());
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  V oldVal=null;
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    oldVal=leaf.getChild(key).right();
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split(key,value).right();
      Node<K,V> newRight=right;
      System.out.println(""String_Node_Str"" + right);
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      K addToParent=newRight.lowerBound();
      if (parent != null)       System.out.println(""String_Node_Str"" + newRight.upperUpper() + ""String_Node_Str""+ parent.upperUpper());
      System.out.println(""String_Node_Str"" + addToParent + ""String_Node_Str"");
      while (parent != null) {
        if (newRight.upperUpper().compareTo(parent.upperUpper()) > 0) {
          if (parent != root) {
            parent=(InternalNode<K,V>)parent.parent;
            continue;
          }
        }
        if (parent.addChild(addToParent,newRight)) {
          break;
        }
        InternalNode<K,V> parentRight=(InternalNode<K,V>)parent.split(addToParent,newRight).left();
        K addToParentNew=parent.getMiddleKey();
        addToParent=addToParentNew;
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight,addToParent);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return oldVal;
}","/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  V oldVal=null;
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    oldVal=leaf.getChild(key).right();
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split(key,value).right();
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      K addToParent=newRight.lowerBound();
      if (parent != null)       while (parent != null) {
        if (newRight.upperUpper().compareTo(parent.upperUpper()) > 0) {
          if (parent != root) {
            parent=(InternalNode<K,V>)parent.parent;
            continue;
          }
        }
        if (parent.addChild(addToParent,newRight)) {
          break;
        }
        InternalNode<K,V> parentRight=(InternalNode<K,V>)parent.split(addToParent,newRight).left();
        K addToParentNew=parent.getMiddleKey();
        addToParent=addToParentNew;
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight,addToParent);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return oldVal;
}",0.0605682172962847
178858,"/** 
 * {@inheritDoc} 
 */
public V remove(K key){
  assert(false);
  return null;
}","/** 
 * {@inheritDoc} 
 */
public V remove(K key){
  V oldVal=get(key);
  if (oldVal != null) {
    put(key,null);
  }
  return oldVal;
}",0.7058823529411765
178859,"/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < numKeys && keys[sentry].compareTo(key) <= 0) {
    sentry++;
  }
  System.out.println(this + ""String_Node_Str"" + key+ ""String_Node_Str""+ sentry+ children[sentry]);
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}","/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < numKeys && keys[sentry].compareTo(key) <= 0) {
    sentry++;
  }
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}",0.8788249694002448
178860,"public InternalNode(K[] keys,Node<K,V>[] children,Node<K,V> parent,Node<K,V> next){
  super(keys,parent);
  this.children=(Node<K,V>[])Arrays.copyOf((Node<K,V>[])children,numKeysPerNode + 1);
  this.next=next;
}","public InternalNode(K[] keys,Node<K,V>[] children,Node<K,V> parent,Node<K,V> next){
  super(keys,parent,next);
  this.children=(Node<K,V>[])Arrays.copyOf((Node<K,V>[])children,numKeysPerNode + 1);
}",0.9437652811735942
178861,"/** 
 * Inserts a new childNode into this node. <b>Assumes that there is room to store the extra key.</b>
 * @param key The key corresponding to the <b>childNode</b>.
 * @param childNode The node that the <b>key</b> should map to.
 */
public boolean addChild(K key,Node<K,V> childNode){
  if (numKeys < numKeysPerNode) {
    int sentry=0;
    while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
      sentry++;
    }
    System.out.println(this + ""String_Node_Str"" + key+ ""String_Node_Str""+ (sentry + 1)+ children[sentry + 1]);
    if (sentry < numKeysPerNode) {
      int end=numKeys;
      while (end != sentry) {
        keys[end]=keys[end - 1];
        children[end + 1]=children[end];
        --end;
      }
      keys[sentry]=key;
      children[sentry + 1]=childNode;
      numKeys++;
      return true;
    }
  }
  return false;
}","/** 
 * Inserts a new childNode into this node. <b>Assumes that there is room to store the extra key.</b>
 * @param key The key corresponding to the <b>childNode</b>.
 * @param childNode The node that the <b>key</b> should map to.
 */
public boolean addChild(K key,Node<K,V> childNode){
  if (numKeys < numKeysPerNode) {
    int sentry=0;
    while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
      sentry++;
    }
    if (sentry < numKeysPerNode) {
      int end=numKeys;
      while (end != sentry) {
        keys[end]=keys[end - 1];
        children[end + 1]=children[end];
        --end;
      }
      keys[sentry]=key;
      children[sentry + 1]=childNode;
      numKeys++;
      return true;
    }
  }
  return false;
}",0.929968454258675
178862,"private LeafNode(K[] keys,V[] values,Node<K,V> parent,Node<K,V> next){
  super(keys,parent);
  children=Arrays.copyOf(values,numKeysPerNode + 2);
  this.next=next;
}","private LeafNode(K[] keys,V[] values,Node<K,V> parent,Node<K,V> next){
  super(keys,parent,next);
  children=Arrays.copyOf(values,numKeysPerNode + 2);
}",0.9274447949526814
178863,"/** 
 * Get the child of the given key.
 * @param key The key to get the child of.
 * @return A node in a Union or null.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Right<Node<K,V>,V> getChild(K key){
  int i=0;
  while (i < numKeys && keys[i].compareTo(key) < 0) {
    ++i;
  }
  if (keys[i] != null && keys[i].equals(key)) {
    return new Union.Right<Node<K,V>,V>(children[i]);
  }
 else {
    return new Union.Right<Node<K,V>,V>(null);
  }
}","/** 
 * Get the child of the given key.
 * @param key The key to get the child of.
 * @return A node in a Union or null.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Right<Node<K,V>,V> getChild(K key){
  int i=0;
  while (i < numKeys && keys[i].compareTo(key) < 0) {
    ++i;
  }
  if (i < numKeysPerNode && keys[i] != null && keys[i].equals(key)) {
    return new Union.Right<Node<K,V>,V>(children[i]);
  }
 else {
    return new Union.Right<Node<K,V>,V>(null);
  }
}",0.9764957264957264
178864,"/** 
 * Creates a node with the given keys and parent.
 * @param keys The keys in this node.
 * @param parent The parent node.
 */
protected Node(K[] keys,Node<K,V> parent){
  this.keys=Arrays.copyOf(keys,numKeysPerNode);
  numKeys=keys.length;
  this.parent=parent;
}","/** 
 * Creates a node with the given keys and parent.
 * @param keys The keys in this node.
 * @param parent The parent node.
 */
protected Node(K[] keys,Node<K,V> parent,Node<K,V> next){
  this.keys=Arrays.copyOf(keys,numKeysPerNode);
  numKeys=keys.length;
  this.parent=parent;
  this.next=next;
}",0.9420035149384886
178865,"/** 
 * Runs an interactive test of the BTree.
 */
public static void testInteractive(BTree<Integer,Integer> tree){
  Scanner stdin=new Scanner(System.in);
  String line;
  String[] components;
  System.out.print(""String_Node_Str"");
  while (stdin.hasNextLine()) {
    line=stdin.nextLine();
    components=line.split(""String_Node_Str"");
    try {
      if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (components.length < 3) {
          System.out.println(""String_Node_Str"");
          continue;
        }
        Integer retVal=tree.put(new Integer(components[1]),new Integer(components[2]));
        System.out.println(retVal);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        Integer retVal=tree.get(Integer.parseInt(components[1]));
        System.out.println(retVal);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        System.out.println(tree);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        tree.clear();
      }
 else {
        System.out.println(""String_Node_Str"" + components[0]);
        System.out.println(""String_Node_Str"");
      }
    }
 catch (    NumberFormatException nfe) {
      System.out.println(""String_Node_Str"" + components[1] + ""String_Node_Str"");
    }
    System.out.print(""String_Node_Str"");
  }
}","/** 
 * Runs an interactive test of the BTree.
 */
public static void testInteractive(BTree<Integer,Integer> tree){
  Scanner stdin=new Scanner(System.in);
  String line;
  String[] components;
  System.out.print(""String_Node_Str"");
  while (stdin.hasNextLine()) {
    line=stdin.nextLine();
    components=line.split(""String_Node_Str"");
    try {
      if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (components.length < 3) {
          System.out.println(""String_Node_Str"");
          continue;
        }
        Integer retVal=tree.put(new Integer(components[1]),new Integer(components[2]));
        System.out.println(retVal);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        Integer retVal=tree.get(Integer.parseInt(components[1]));
        System.out.println(""String_Node_Str"" + retVal);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        Integer retVal=tree.remove(Integer.parseInt(components[1]));
        System.out.println(""String_Node_Str"" + retVal);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        System.out.println(tree);
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        Integer key=Integer.parseInt(components[1]);
        Node<Integer,Integer> node=tree.getRoot();
        while (node instanceof InternalNode) {
          System.out.println(Arrays.toString(node.getKeys()));
          node=node.getChild(key).left();
        }
        System.out.println(Arrays.toString(node.getKeys()));
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        tree.clear();
      }
 else       if (components[0].equalsIgnoreCase(""String_Node_Str"")) {
        int i=Integer.parseInt(components[1]);
        Node<Integer,Integer> node=tree.getRoot();
        for (int j=0; j < i && node != null; ++j) {
          node=node.getChild(Integer.MIN_VALUE).left();
        }
        if (node != null) {
          System.out.print(Arrays.toString(node.getKeys()));
          node=node.getNext();
          while (node != null) {
            System.out.print(""String_Node_Str"" + Arrays.toString(node.getKeys()));
            node=node.getNext();
          }
          System.out.println();
        }
 else {
          System.err.println(""String_Node_Str"");
        }
      }
 else {
        System.err.println(""String_Node_Str"" + components[0]);
        System.err.println(""String_Node_Str"");
      }
    }
 catch (    NumberFormatException nfe) {
      System.err.println(""String_Node_Str"" + components[1] + ""String_Node_Str"");
    }
    System.out.print(""String_Node_Str"");
  }
}",0.596971177332682
178866,"/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
    sentry++;
  }
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}","/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
    sentry++;
  }
  System.out.println(this + ""String_Node_Str"" + key+ ""String_Node_Str""+ sentry+ children[sentry]);
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}",0.8785276073619632
178867,"public InternalNode(K[] keys,Node<K,V>[] children,Node<K,V> parent,Node<K,V> next){
  super(keys,parent);
  this.children=Arrays.copyOf(children,numKeysPerNode + 1);
  this.next=next;
}","public InternalNode(K[] keys,Node<K,V>[] children,Node<K,V> parent,Node<K,V> next){
  super(keys,parent);
  this.children=(Node<K,V>[])Arrays.copyOf((Node<K,V>[])children,numKeysPerNode + 1);
  this.next=next;
}",0.9343434343434344
178868,"/** 
 * Inserts a new childNode into this node. <b>Assumes that there is room to store the extra key.</b>
 * @param key The key corresponding to the <b>childNode</b>.
 * @param childNode The node that the <b>key</b> should map to.
 */
public boolean addChild(K key,Node<K,V> childNode){
  if (numKeys < numKeysPerNode) {
    int sentry=0;
    while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
      sentry++;
    }
    if (sentry < numKeysPerNode) {
      int end=numKeys;
      while (end != sentry) {
        keys[end]=keys[end - 1];
        children[end + 1]=children[end];
        --end;
      }
      keys[sentry]=key;
      children[sentry + 1]=childNode;
      numKeys++;
      return true;
    }
  }
  return false;
}","/** 
 * Inserts a new childNode into this node. <b>Assumes that there is room to store the extra key.</b>
 * @param key The key corresponding to the <b>childNode</b>.
 * @param childNode The node that the <b>key</b> should map to.
 */
public boolean addChild(K key,Node<K,V> childNode){
  if (numKeys < numKeysPerNode) {
    int sentry=0;
    while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
      sentry++;
    }
    System.out.println(this + ""String_Node_Str"" + key+ ""String_Node_Str""+ (sentry + 1)+ children[sentry + 1]);
    if (sentry < numKeysPerNode) {
      int end=numKeys;
      while (end != sentry) {
        keys[end]=keys[end - 1];
        children[end + 1]=children[end];
        --end;
      }
      keys[sentry]=key;
      children[sentry + 1]=childNode;
      numKeys++;
      return true;
    }
  }
  return false;
}",0.929968454258675
178869,"/** 
 * {@inheritDoc} 
 */
public Union.Right<InternalNode<K,V>,LeafNode<K,V>> split(K key,V value){
  LeafNode<K,V> newNode=new LeafNode<K,V>(Arrays.copyOfRange(this.keys,(numKeysPerNode) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,numKeysPerNode / 2,numKeysPerNode),this.parent,this.next);
  this.next=newNode;
  this.numKeys=numKeysPerNode / 2;
  newNode.numKeys=numKeysPerNode / 2;
  if (key.compareTo(newNode.lowerBound()) > 0) {
    newNode.addValue(key,value);
  }
 else {
    addValue(key,value);
  }
  return new Union.Right<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}","/** 
 * {@inheritDoc} 
 */
public Union.Right<InternalNode<K,V>,LeafNode<K,V>> split(K key,V value){
  LeafNode<K,V> newNode=new LeafNode<K,V>(Arrays.copyOfRange(this.keys,(numKeysPerNode) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,numKeysPerNode / 2,numKeysPerNode),this.parent,this.next);
  this.next=newNode;
  this.numKeys=numKeysPerNode / 2;
  newNode.numKeys=numKeysPerNode / 2;
  if (key.compareTo(newNode.lowerBound()) >= 0) {
    newNode.addValue(key,value);
  }
 else {
    addValue(key,value);
  }
  return new Union.Right<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}",0.9991489361702128
178870,"/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split(key,value).right();
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      K addToParent=newRight.lowerBound();
      System.out.println(addToParent);
      while (parent != null && !parent.addChild(addToParent,newRight)) {
        InternalNode<K,V> parentRight=(InternalNode<K,V>)parent.split(addToParent,newRight).left();
        K addToParentNew=parent.getMiddleKey();
        addToParent=addToParentNew;
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight,addToParent);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return null;
}","/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  if (root != null)   System.out.println(""String_Node_Str"" + root.getClass());
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split(key,value).right();
      Node<K,V> newRight=right;
      System.out.println(""String_Node_Str"" + right);
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      K addToParent=newRight.lowerBound();
      if (parent != null)       System.out.println(""String_Node_Str"" + newRight.upperUpper() + ""String_Node_Str""+ parent.upperUpper());
      System.out.println(""String_Node_Str"" + addToParent + ""String_Node_Str"");
      while (parent != null) {
        if (newRight.upperUpper().compareTo(parent.upperUpper()) > 0) {
          if (parent != root) {
            parent=(InternalNode<K,V>)parent.parent;
            continue;
          }
        }
        if (parent.addChild(addToParent,newRight)) {
          break;
        }
        InternalNode<K,V> parentRight=(InternalNode<K,V>)parent.split(addToParent,newRight).left();
        K addToParentNew=parent.getMiddleKey();
        addToParent=addToParentNew;
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight,addToParent);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return null;
}",0.1516952114645229
178871,"/** 
 * like   {@link testInsertion}, but tests for correctness.
 * @throws RuntimeException If an error is found. Read the exception'smessage for details.
 */
public static void testInsertionCorrectness(BTree<Integer,Integer> tree){
  for (int i=0; i < 100; i++) {
    tree.put(i,i * 10);
    if (tree.get(i) != i * 10) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ i * 10 + ""String_Node_Str"" + tree.get(i) + ""String_Node_Str"");
    }
  }
}","/** 
 * like   {@link testInsertion}, but tests for correctness.
 * @throws RuntimeException If an error is found. Read the exception'smessage for details.
 */
public static void testInsertionCorrectness(BTree<Integer,Integer> tree){
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 100; i++) {
    System.out.println(i + ""String_Node_Str"" + (i * 10));
    tree.put(i,i * 10);
    System.out.println(tree);
    if (tree.get(i) != i * 10) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ i * 10 + ""String_Node_Str"" + tree.get(i) + ""String_Node_Str"");
    }
  }
}",0.8595348837209302
178872,"public static void main(String[] args) throws IOException {
  Comm.init(args);
  BTree<Integer,Integer> seqBTree=new BTreeSeq<Integer,Integer>();
  Integer k=new Integer(1);
  Integer v=new Integer(11);
  LeafNode<Integer,Integer> root=new LeafNode<Integer,Integer>(k,v);
  root.addValue(new Integer(2),new Integer(11));
  root.addValue(new Integer(3),new Integer(11));
  root.addValue(new Integer(4),new Integer(11));
  root.addValue(new Integer(5),new Integer(11));
  root.addValue(new Integer(6),new Integer(11));
  root.addValue(new Integer(7),new Integer(11));
  root.addValue(new Integer(8),new Integer(11));
  if (false) {
    testInsertion(seqBTree);
    seqBTree.clear();
    testInsertionCorrectness(seqBTree);
    seqBTree.clear();
    System.out.println(seqBTree.getClass().toString() + ""String_Node_Str"" + stressTestInsertion(seqBTree)+ ""String_Node_Str"");
  }
  testInternalNodeSplitting();
}","public static void main(String[] args) throws IOException {
  Comm.init(args);
  BTree<Integer,Integer> seqBTree=new BTreeSeq<Integer,Integer>();
  Integer k=new Integer(1);
  Integer v=new Integer(11);
  LeafNode<Integer,Integer> root=new LeafNode<Integer,Integer>(k,v);
  root.addValue(new Integer(2),new Integer(11));
  root.addValue(new Integer(3),new Integer(11));
  root.addValue(new Integer(4),new Integer(11));
  root.addValue(new Integer(5),new Integer(11));
  root.addValue(new Integer(6),new Integer(11));
  root.addValue(new Integer(7),new Integer(11));
  root.addValue(new Integer(8),new Integer(11));
  if (true) {
    testInsertion(seqBTree);
    seqBTree.clear();
    testInsertionCorrectness(seqBTree);
    seqBTree.clear();
    System.out.println(seqBTree.getClass().toString() + ""String_Node_Str"" + stressTestInsertion(seqBTree)+ ""String_Node_Str"");
  }
  testInternalNodeSplitting();
}",0.996134732192159
178873,"/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  V oldVal=null;
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    oldVal=leaf.getChild(key).right();
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split(key,value).right();
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      K addToParent=newRight.lowerBound();
      if (parent != null)       while (parent != null) {
        if (newRight.upperUpper().compareTo(parent.upperUpper()) > 0) {
          if (parent != root) {
            parent=(InternalNode<K,V>)parent.parent;
            continue;
          }
        }
        if (parent.addChild(addToParent,newRight)) {
          break;
        }
        InternalNode<K,V> parentRight=(InternalNode<K,V>)parent.split(addToParent,newRight).left();
        K addToParentNew=parent.getMiddleKey();
        addToParent=addToParentNew;
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight,addToParent);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return oldVal;
}","/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  V oldVal=null;
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    oldVal=leaf.getChild(key).right();
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split(key,value).right();
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      K addToParent=newRight.lowerBound();
      if (parent != null)       while (parent != null) {
        if (parent.addChild(addToParent,newRight)) {
          break;
        }
        InternalNode<K,V> parentRight=(InternalNode<K,V>)parent.split(addToParent,newRight).left();
        K addToParentNew=parent.getMiddleKey();
        addToParent=addToParentNew;
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight,addToParent);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return oldVal;
}",0.5013054830287206
178874,"public InternalNode(K[] keys,Node<K,V>[] children,Node<K,V> parent,Node<K,V> next){
  super(keys,parent,next);
  this.children=(Node<K,V>[])Arrays.copyOf((Node<K,V>[])children,numKeysPerNode + 1);
}","public InternalNode(K[] keys,Node<K,V>[] children,int numKeys,Node<K,V> parent,Node<K,V> next){
  super(keys,numKeys,parent,next);
  this.children=(Node<K,V>[])Arrays.copyOf((Node<K,V>[])children,numKeysPerNode + 2);
  for (int i=0; i <= numKeys; ++i) {
    children[i].parent=this;
  }
}",0.7983539094650206
178875,"/** 
 * {@inheritDoc} 
 */
public Union.Right<InternalNode<K,V>,LeafNode<K,V>> split(K key,V value){
  LeafNode<K,V> newNode=new LeafNode<K,V>(Arrays.copyOfRange(this.keys,(numKeysPerNode) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,numKeysPerNode / 2,numKeysPerNode),this.parent,this.next);
  this.next=newNode;
  this.numKeys=numKeysPerNode / 2;
  newNode.numKeys=numKeysPerNode / 2;
  if (key.compareTo(newNode.lowerBound()) >= 0) {
    newNode.addValue(key,value);
  }
 else {
    addValue(key,value);
  }
  return new Union.Right<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}","/** 
 * {@inheritDoc} 
 */
public Union.Right<InternalNode<K,V>,LeafNode<K,V>> split(K key,V value){
  LeafNode<K,V> newNode=new LeafNode<K,V>(Arrays.copyOfRange(this.keys,(numKeysPerNode) / 2,numKeysPerNode),Arrays.copyOfRange(this.children,numKeysPerNode / 2,numKeysPerNode),numKeysPerNode / 2,this.parent,this.next);
  this.next=newNode;
  this.numKeys=numKeysPerNode / 2;
  if (key.compareTo(newNode.lowerBound()) >= 0) {
    newNode.addValue(key,value);
  }
 else {
    addValue(key,value);
  }
  return new Union.Right<InternalNode<K,V>,LeafNode<K,V>>(newNode);
}",0.668971477960242
178876,"private LeafNode(K[] keys,V[] values,Node<K,V> parent,Node<K,V> next){
  super(keys,parent,next);
  children=Arrays.copyOf(values,numKeysPerNode + 2);
}","private LeafNode(K[] keys,V[] values,int numKeys,Node<K,V> parent,Node<K,V> next){
  super(keys,numKeys,parent,next);
  children=Arrays.copyOf(values,numKeysPerNode + 2);
}",0.9382716049382716
178877,"/** 
 * Creates a node with the given keys and parent.
 * @param keys The keys in this node.
 * @param parent The parent node.
 */
protected Node(K[] keys,Node<K,V> parent,Node<K,V> next){
  this.keys=Arrays.copyOf(keys,numKeysPerNode);
  numKeys=keys.length;
  this.parent=parent;
  this.next=next;
}","/** 
 * Creates a node with the given keys and parent.
 * @param keys The keys in this node.
 * @param parent The parent node.
 */
protected Node(K[] keys,int numKeys,Node<K,V> parent,Node<K,V> next){
  this.keys=Arrays.copyOf(keys,numKeysPerNode + 1);
  this.numKeys=numKeys;
  this.parent=parent;
  this.next=next;
}",0.936995153473344
178878,"/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < numKeys && keys[sentry].compareTo(key) < 0) {
    sentry++;
  }
  System.out.println(this + ""String_Node_Str"" + key+ ""String_Node_Str""+ sentry+ children[sentry]);
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}","/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < numKeys && keys[sentry].compareTo(key) <= 0) {
    sentry++;
  }
  System.out.println(this + ""String_Node_Str"" + key+ ""String_Node_Str""+ sentry+ children[sentry]);
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}",0.9989071038251366
178879,"public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (keys[sentry].compareTo(key) < 0 && sentry < keys.length) {
    sentry++;
  }
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}","/** 
 * Get a child node of this node.
 * @param key The key to get the child of.
 * @return A Node in a Union.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Left<Node<K,V>,V> getChild(K key){
  int sentry=0;
  while (sentry < keys.length && keys[sentry].compareTo(key) < 0) {
    sentry++;
  }
  return new Union.Left<Node<K,V>,V>(children[sentry]);
}",0.5483304042179262
178880,"public InternalNode(K key,Node<K,V> parent){
  super(key,parent);
  children=new Node[numKeysPerNode + 1];
}","/** 
 * Constructs an InternalNode with K as the key and parent as the parent.
 * @param key The initial key in this node.
 * @param parent The parent of this node.
 */
@SuppressWarnings({""String_Node_Str""}) public InternalNode(K key,Node<K,V> parent){
  super(key,parent);
  children=new Node[numKeysPerNode + 1];
}",0.5094339622641509
178881,"public LeafNode(K key,Node<K,V> parent){
  super(key,parent);
  children=(V[])(new Object[numKeysPerNode + 1]);
}","/** 
 * Constructs a LeafNode with K as the key and parent as the parent.
 * @param key The initial key in this node.
 * @param parent The parent of this node.
 */
@SuppressWarnings({""String_Node_Str""}) public LeafNode(K key,Node<K,V> parent){
  super(key,parent);
  children=(V[])(new Object[numKeysPerNode]);
}",0.5129411764705882
178882,"public Union.Right<Node<K,V>,V> getChild(K key){
  return null;
}","/** 
 * Get the child of the given key.
 * @param key The key to get the child of.
 * @return A node in a Union or null.
 */
@SuppressWarnings({""String_Node_Str""}) public Union.Right<Node<K,V>,V> getChild(K key){
  int i=0;
  while (i < numKeysPerNode && keys[i].compareTo(key) < 0) {
    ++i;
  }
  if (keys[i].equals(key)) {
    return new Union.Right<Node<K,V>,V>(children[i]);
  }
 else {
    return new Union.Right<Node<K,V>,V>(null);
  }
}",0.2117647058823529
178883,"/** 
 * {@inheritDoc} 
 */
public V get(K key){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    if (currentNode == null) {
      return null;
    }
 else {
      currentNode=currentNode.getChild(key).left();
    }
  }
  if (currentNode instanceof LeafNode) {
    return currentNode.getChild(key).right();
  }
 else {
    return null;
  }
}","/** 
 * {@inheritDoc} 
 */
public V get(K key){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode instanceof LeafNode) {
    return currentNode.getChild(key).right();
  }
 else {
    return null;
  }
}",0.8931750741839762
178884,"/** 
 * Constructs a LeafNode with K as the key and parent as the parent.
 * @param key The initial key in this node.
 * @param parent The parent of this node.
 */
@SuppressWarnings({""String_Node_Str""}) public LeafNode(K key,Node<K,V> parent){
  super(key,parent);
  children=(V[])(new Object[numKeysPerNode]);
}","/** 
 * Constructs a LeafNode with K as the key and parent as the parent.
 * @param key The initial key in this node.
 * @param parent The parent of this node.
 */
@SuppressWarnings({""String_Node_Str""}) public LeafNode(K key,V value,Node<K,V> parent){
  super(key,parent);
  children=(V[])(Array.newInstance(value.getClass(),numKeysPerNode));
  children[0]=value;
}",0.8951255539143279
178885,"@SuppressWarnings({""String_Node_Str""}) public Node(K key,Node<K,V> parent){
  keys=(K[])(new Object[numKeysPerNode]);
  numKeys=0;
  this.parent=parent;
}","@SuppressWarnings({""String_Node_Str""}) public Node(K key,Node<K,V> parent){
}",0.6666666666666666
178886,"/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split().right();
      if (key.compareTo(right.lowerBound()) >= 0) {
        right.addValue(key,value);
      }
 else {
        leaf.addValue(key,value);
      }
      Node<K,V> parentRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      while (parent != null && !parent.addChild(parentRight.lowerBound(),parentRight)) {
        InternalNode<K,V> newRight=parent.split().left();
        K newLB=newRight.lowerBound();
        if (newLB.compareTo(newRight.lowerBound()) >= 0) {
          newRight.addChild(newLB,newRight);
        }
 else {
          parent.addChild(newLB,newRight);
        }
        parent=(InternalNode<K,V>)newRight.parent;
        parentRight=newRight;
      }
      if (parent == null) {
        if (!parent.addChild(parentRight.lowerBound(),parentRight)) {
          InternalNode<K,V> newRoot=new InternalNode<K,V>((InternalNode<K,V>)root,(InternalNode<K,V>)parentRight);
          root.parent=newRoot;
          parentRight.parent=newRoot;
          root=newRoot;
        }
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return null;
}","/** 
 * {@inheritDoc} 
 */
public V put(K key,V value){
  Node<K,V> currentNode=root;
  while (currentNode instanceof InternalNode) {
    currentNode=currentNode.getChild(key).left();
  }
  if (currentNode != null) {
    LeafNode<K,V> leaf=(LeafNode<K,V>)currentNode;
    if (!leaf.addValue(key,value)) {
      LeafNode<K,V> right=leaf.split().right();
      if (key.compareTo(right.lowerBound()) >= 0) {
        right.addValue(key,value);
      }
 else {
        leaf.addValue(key,value);
      }
      Node<K,V> newRight=right;
      InternalNode<K,V> parent=(InternalNode<K,V>)right.parent;
      while (parent != null && !parent.addChild(newRight.lowerBound(),newRight)) {
        InternalNode<K,V> parentRight=parent.split().left();
        K newLB=newRight.lowerBound();
        if (newLB.compareTo(parentRight.lowerBound()) >= 0) {
          parentRight.addChild(newLB,newRight);
          newRight.parent=parentRight;
        }
 else {
          parent.addChild(newLB,newRight);
        }
        parent=(InternalNode<K,V>)parent.parent;
        newRight=parentRight;
      }
      if (parent == null) {
        Node<K,V> newRoot=new InternalNode<K,V>(root,newRight);
        root.parent=newRoot;
        newRight.parent=newRoot;
        root=newRoot;
      }
    }
  }
 else {
    root=new LeafNode<K,V>(key,value);
  }
  return null;
}",0.7676333691371285
178887,"/** 
 * Returns the domain axis for a dataset.
 * @param index  the dataset index.
 * @return The axis.
 */
public ValueAxis getDomainAxisForDataset(int index){
  int upper=Math.max(getDatasetCount(),getRendererCount());
  if (index < 0 || index >= upper) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
  ValueAxis valueAxis=null;
  List axisIndices=(List)this.datasetToDomainAxesMap.get(new Integer(index));
  if (axisIndices != null) {
    Integer axisIndex=(Integer)axisIndices.get(0);
    valueAxis=getDomainAxis(axisIndex.intValue());
  }
 else {
    valueAxis=getDomainAxis(0);
  }
  return valueAxis;
}","/** 
 * Returns the domain axis for a dataset.
 * @param index  the dataset index.
 * @return The axis.
 */
public ValueAxis getDomainAxisForDataset(int index){
  int upper=Math.max(getDatasetCount(),getRendererCount());
  if (index < 0 || index >= upper) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str"");
  }
  ValueAxis valueAxis;
  List axisIndices=(List)this.datasetToDomainAxesMap.get(index);
  if (axisIndices != null) {
    Integer axisIndex=(Integer)axisIndices.get(0);
    valueAxis=getDomainAxis(axisIndex.intValue());
  }
 else {
    valueAxis=getDomainAxis(0);
  }
  return valueAxis;
}",0.9458204334365324
178888,"/** 
 * Draws the plot within the specified area on a graphics device.
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>permitted).
 * @param parentState  the state from the parent plot, if there is one(<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>permitted).
 */
public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){
  boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);
  boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);
  if (b1 || b2) {
    return;
  }
  if (info != null) {
    info.setPlotArea(area);
  }
  RectangleInsets insets=getInsets();
  insets.trim(area);
  AxisSpace space=calculateAxisSpace(g2,area);
  Rectangle2D dataArea=space.shrink(area,null);
  this.axisOffset.trim(dataArea);
  createAndAddEntity((Rectangle2D)dataArea.clone(),info,null,null);
  if (info != null) {
    info.setDataArea(dataArea);
  }
  drawBackground(g2,dataArea);
  Map axisStateMap=drawAxes(g2,area,dataArea,info);
  PlotOrientation orient=getOrientation();
  if (anchor != null && !dataArea.contains(anchor)) {
    anchor=null;
  }
  CrosshairState crosshairState=new CrosshairState();
  crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);
  crosshairState.setAnchor(anchor);
  crosshairState.setAnchorX(Double.NaN);
  crosshairState.setAnchorY(Double.NaN);
  if (anchor != null) {
    ValueAxis domainAxis=getDomainAxis();
    if (domainAxis != null) {
      double x;
      if (orient == PlotOrientation.VERTICAL) {
        x=domainAxis.java2DToValue(anchor.getX(),dataArea,getDomainAxisEdge());
      }
 else {
        x=domainAxis.java2DToValue(anchor.getY(),dataArea,getDomainAxisEdge());
      }
      crosshairState.setAnchorX(x);
    }
    ValueAxis rangeAxis=getRangeAxis();
    if (rangeAxis != null) {
      double y;
      if (orient == PlotOrientation.VERTICAL) {
        y=rangeAxis.java2DToValue(anchor.getY(),dataArea,getRangeAxisEdge());
      }
 else {
        y=rangeAxis.java2DToValue(anchor.getX(),dataArea,getRangeAxisEdge());
      }
      crosshairState.setAnchorY(y);
    }
  }
  crosshairState.setCrosshairX(getDomainCrosshairValue());
  crosshairState.setCrosshairY(getRangeCrosshairValue());
  Shape originalClip=g2.getClip();
  Composite originalComposite=g2.getComposite();
  g2.clip(dataArea);
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
  AxisState domainAxisState=(AxisState)axisStateMap.get(getDomainAxis());
  if (domainAxisState == null) {
    if (parentState != null) {
      domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());
    }
  }
  AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
  if (rangeAxisState == null) {
    if (parentState != null) {
      rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
    }
  }
  if (domainAxisState != null) {
    drawDomainTickBands(g2,dataArea,domainAxisState.getTicks());
  }
  if (rangeAxisState != null) {
    drawRangeTickBands(g2,dataArea,rangeAxisState.getTicks());
  }
  if (domainAxisState != null) {
    drawDomainGridlines(g2,dataArea,domainAxisState.getTicks());
    drawZeroDomainBaseline(g2,dataArea);
  }
  if (rangeAxisState != null) {
    drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
    drawZeroRangeBaseline(g2,dataArea);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
  }
  boolean foundData=false;
  DatasetRenderingOrder order=getDatasetRenderingOrder();
  if (order == DatasetRenderingOrder.FORWARD) {
    int rendererCount=this.renderers.size();
    for (int i=0; i < rendererCount; i++) {
      XYItemRenderer r=getRenderer(i);
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);
      }
    }
    for (int i=0; i < getDatasetCount(); i++) {
      foundData=render(g2,dataArea,i,info,crosshairState) || foundData;
    }
    for (int i=0; i < rendererCount; i++) {
      XYItemRenderer r=getRenderer(i);
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);
      }
    }
  }
 else   if (order == DatasetRenderingOrder.REVERSE) {
    int rendererCount=this.renderers.size();
    for (int i=rendererCount - 1; i >= 0; i--) {
      XYItemRenderer r=getRenderer(i);
      if (i >= getDatasetCount()) {
        continue;
      }
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);
      }
    }
    for (int i=getDatasetCount() - 1; i >= 0; i--) {
      foundData=render(g2,dataArea,i,info,crosshairState) || foundData;
    }
    for (int i=rendererCount - 1; i >= 0; i--) {
      XYItemRenderer r=getRenderer(i);
      if (i >= getDatasetCount()) {
        continue;
      }
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);
      }
    }
  }
  int xAxisIndex=crosshairState.getDomainAxisIndex();
  ValueAxis xAxis=getDomainAxis(xAxisIndex);
  RectangleEdge xAxisEdge=getDomainAxisEdge(xAxisIndex);
  if (!this.domainCrosshairLockedOnData && anchor != null) {
    double xx;
    if (orient == PlotOrientation.VERTICAL) {
      xx=xAxis.java2DToValue(anchor.getX(),dataArea,xAxisEdge);
    }
 else {
      xx=xAxis.java2DToValue(anchor.getY(),dataArea,xAxisEdge);
    }
    crosshairState.setCrosshairX(xx);
  }
  setDomainCrosshairValue(crosshairState.getCrosshairX(),false);
  if (isDomainCrosshairVisible()) {
    double x=getDomainCrosshairValue();
    Paint paint=getDomainCrosshairPaint();
    Stroke stroke=getDomainCrosshairStroke();
    drawDomainCrosshair(g2,dataArea,orient,x,xAxis,stroke,paint);
  }
  int yAxisIndex=crosshairState.getRangeAxisIndex();
  ValueAxis yAxis=getRangeAxis(yAxisIndex);
  RectangleEdge yAxisEdge=getRangeAxisEdge(yAxisIndex);
  if (!this.rangeCrosshairLockedOnData && anchor != null) {
    double yy;
    if (orient == PlotOrientation.VERTICAL) {
      yy=yAxis.java2DToValue(anchor.getY(),dataArea,yAxisEdge);
    }
 else {
      yy=yAxis.java2DToValue(anchor.getX(),dataArea,yAxisEdge);
    }
    crosshairState.setCrosshairY(yy);
  }
  setRangeCrosshairValue(crosshairState.getCrosshairY(),false);
  if (isRangeCrosshairVisible()) {
    double y=getRangeCrosshairValue();
    Paint paint=getRangeCrosshairPaint();
    Stroke stroke=getRangeCrosshairStroke();
    drawRangeCrosshair(g2,dataArea,orient,y,yAxis,stroke,paint);
  }
  if (!foundData) {
    drawNoDataMessage(g2,dataArea);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
  }
  drawAnnotations(g2,dataArea,info);
  g2.setClip(originalClip);
  g2.setComposite(originalComposite);
  drawOutline(g2,dataArea);
}","/** 
 * Draws the plot within the specified area on a graphics device.
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>permitted).
 * @param parentState  the state from the parent plot, if there is one(<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>permitted).
 */
public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){
  boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);
  boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);
  if (b1 || b2) {
    return;
  }
  setFireChangeEvents(false);
  if (info != null) {
    info.setPlotArea(area);
  }
  RectangleInsets insets=getInsets();
  insets.trim(area);
  AxisSpace space=calculateAxisSpace(g2,area);
  Rectangle2D dataArea=space.shrink(area,null);
  this.axisOffset.trim(dataArea);
  createAndAddEntity((Rectangle2D)dataArea.clone(),info,null,null);
  if (info != null) {
    info.setDataArea(dataArea);
  }
  drawBackground(g2,dataArea);
  Map axisStateMap=drawAxes(g2,area,dataArea,info);
  PlotOrientation orient=getOrientation();
  if (anchor != null && !dataArea.contains(anchor)) {
    anchor=null;
  }
  CrosshairState crosshairState=new CrosshairState();
  crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);
  crosshairState.setAnchor(anchor);
  crosshairState.setAnchorX(Double.NaN);
  crosshairState.setAnchorY(Double.NaN);
  if (anchor != null) {
    ValueAxis domainAxis=getDomainAxis();
    if (domainAxis != null) {
      double x;
      if (orient == PlotOrientation.VERTICAL) {
        x=domainAxis.java2DToValue(anchor.getX(),dataArea,getDomainAxisEdge());
      }
 else {
        x=domainAxis.java2DToValue(anchor.getY(),dataArea,getDomainAxisEdge());
      }
      crosshairState.setAnchorX(x);
    }
    ValueAxis rangeAxis=getRangeAxis();
    if (rangeAxis != null) {
      double y;
      if (orient == PlotOrientation.VERTICAL) {
        y=rangeAxis.java2DToValue(anchor.getY(),dataArea,getRangeAxisEdge());
      }
 else {
        y=rangeAxis.java2DToValue(anchor.getX(),dataArea,getRangeAxisEdge());
      }
      crosshairState.setAnchorY(y);
    }
  }
  crosshairState.setCrosshairX(getDomainCrosshairValue());
  crosshairState.setCrosshairY(getRangeCrosshairValue());
  Shape originalClip=g2.getClip();
  Composite originalComposite=g2.getComposite();
  g2.clip(dataArea);
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
  AxisState domainAxisState=(AxisState)axisStateMap.get(getDomainAxis());
  if (domainAxisState == null) {
    if (parentState != null) {
      domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());
    }
  }
  AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
  if (rangeAxisState == null) {
    if (parentState != null) {
      rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
    }
  }
  if (domainAxisState != null) {
    drawDomainTickBands(g2,dataArea,domainAxisState.getTicks());
  }
  if (rangeAxisState != null) {
    drawRangeTickBands(g2,dataArea,rangeAxisState.getTicks());
  }
  if (domainAxisState != null) {
    drawDomainGridlines(g2,dataArea,domainAxisState.getTicks());
    drawZeroDomainBaseline(g2,dataArea);
  }
  if (rangeAxisState != null) {
    drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
    drawZeroRangeBaseline(g2,dataArea);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
  }
  boolean foundData=false;
  DatasetRenderingOrder order=getDatasetRenderingOrder();
  if (order == DatasetRenderingOrder.FORWARD) {
    int rendererCount=this.renderers.size();
    for (int i=0; i < rendererCount; i++) {
      XYItemRenderer r=getRenderer(i);
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);
      }
    }
    for (int i=0; i < getDatasetCount(); i++) {
      foundData=render(g2,dataArea,i,info,crosshairState) || foundData;
    }
    for (int i=0; i < rendererCount; i++) {
      XYItemRenderer r=getRenderer(i);
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);
      }
    }
  }
 else   if (order == DatasetRenderingOrder.REVERSE) {
    int rendererCount=this.renderers.size();
    for (int i=rendererCount - 1; i >= 0; i--) {
      XYItemRenderer r=getRenderer(i);
      if (i >= getDatasetCount()) {
        continue;
      }
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);
      }
    }
    for (int i=getDatasetCount() - 1; i >= 0; i--) {
      foundData=render(g2,dataArea,i,info,crosshairState) || foundData;
    }
    for (int i=rendererCount - 1; i >= 0; i--) {
      XYItemRenderer r=getRenderer(i);
      if (i >= getDatasetCount()) {
        continue;
      }
      if (r != null) {
        ValueAxis domainAxis=getDomainAxisForDataset(i);
        ValueAxis rangeAxis=getRangeAxisForDataset(i);
        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);
      }
    }
  }
  int xAxisIndex=crosshairState.getDomainAxisIndex();
  ValueAxis xAxis=getDomainAxis(xAxisIndex);
  RectangleEdge xAxisEdge=getDomainAxisEdge(xAxisIndex);
  if (!this.domainCrosshairLockedOnData && anchor != null) {
    double xx;
    if (orient == PlotOrientation.VERTICAL) {
      xx=xAxis.java2DToValue(anchor.getX(),dataArea,xAxisEdge);
    }
 else {
      xx=xAxis.java2DToValue(anchor.getY(),dataArea,xAxisEdge);
    }
    crosshairState.setCrosshairX(xx);
  }
  setDomainCrosshairValue(crosshairState.getCrosshairX(),false);
  if (isDomainCrosshairVisible()) {
    double x=getDomainCrosshairValue();
    Paint paint=getDomainCrosshairPaint();
    Stroke stroke=getDomainCrosshairStroke();
    drawDomainCrosshair(g2,dataArea,orient,x,xAxis,stroke,paint);
  }
  int yAxisIndex=crosshairState.getRangeAxisIndex();
  ValueAxis yAxis=getRangeAxis(yAxisIndex);
  RectangleEdge yAxisEdge=getRangeAxisEdge(yAxisIndex);
  if (!this.rangeCrosshairLockedOnData && anchor != null) {
    double yy;
    if (orient == PlotOrientation.VERTICAL) {
      yy=yAxis.java2DToValue(anchor.getY(),dataArea,yAxisEdge);
    }
 else {
      yy=yAxis.java2DToValue(anchor.getX(),dataArea,yAxisEdge);
    }
    crosshairState.setCrosshairY(yy);
  }
  setRangeCrosshairValue(crosshairState.getCrosshairY(),false);
  if (isRangeCrosshairVisible()) {
    double y=getRangeCrosshairValue();
    Paint paint=getRangeCrosshairPaint();
    Stroke stroke=getRangeCrosshairStroke();
    drawRangeCrosshair(g2,dataArea,orient,y,yAxis,stroke,paint);
  }
  if (!foundData) {
    drawNoDataMessage(g2,dataArea);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
  }
  for (int i=0; i < this.renderers.size(); i++) {
    drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
  }
  drawAnnotations(g2,dataArea,info);
  g2.setClip(originalClip);
  g2.setComposite(originalComposite);
  drawOutline(g2,dataArea);
  setFireChangeEvents(true);
}",0.9961268299087508
178889,"public void add(Object[] elements,IProgressMonitor monitor){
  Object[] filteredObjects=null;
  if (workingSet != null) {
    filteredObjects=UIUtils.filterByWorkingSet(elements,workingSet);
  }
 else {
    filteredObjects=elements;
  }
  elementCollector.add(filteredObjects,monitor);
}","public void add(Object[] elements,IProgressMonitor monitor){
  Object[] filteredObjects=null;
  if (workingSet != null) {
    filteredObjects=UIUtils.filterByWorkingSet(elements,workingSet);
  }
 else {
    filteredObjects=elements;
  }
  elementCollector.add(filteredObjects,monitor);
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException e) {
  }
}",0.8813559322033898
178890,"public static void runWithProgress(IRunnableWithProgress operation,Shell shell,boolean cancelable) throws InvocationTargetException, InterruptedException {
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(shell);
  dialog.setCancelable(cancelable);
  dialog.run(true,false,operation);
}","public static void runWithProgress(IRunnableWithProgress operation,Shell shell,boolean cancelable) throws InvocationTargetException, InterruptedException {
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(shell);
  dialog.setCancelable(cancelable);
  dialog.run(true,cancelable,operation);
}",0.9780775716694772
178891,"/** 
 * Constructor.
 * @param file The file where to synchronize the map content.
 * @throws CoreException
 */
public PersistentMap(IFile file) throws CoreException {
  this.file=file;
  if (file.exists()) {
    try {
      map=(HashMap<String,String>)StorageUtils.readFromJSON(file,new HashMap<String,String>().getClass().getCanonicalName());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    map=new HashMap<String,String>();
    synchronize();
  }
}","/** 
 * Constructor.
 * @param file The file where to synchronize the map content.
 * @throws CoreException
 */
public PersistentMap(IFile file) throws CoreException {
  this.file=file;
  if (file.exists()) {
    try {
      map=(Map<String,String>)StorageUtils.readFromJson(file,new TypeToken<Map<String,String>>(){
      }
.getType());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    map=new HashMap<String,String>();
    synchronize();
  }
}",0.9241952232606438
178892,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayoutFactory.fillDefaults().applyTo(composite);
  CompareViewerPane pane=new CompareViewerPane(composite,SWT.BORDER | SWT.FLAT);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(pane);
  CompareConfiguration cc=new CompareConfiguration();
  if (ancestorPage != null) {
    cc.setAncestorLabel(String.format(""String_Node_Str"",ancestorPage.getId()));
  }
  cc.setLeftLabel(String.format(""String_Node_Str"",page.getId()));
  cc.setRightLabel(String.format(""String_Node_Str"",conflictingPage.getId()));
  viewer=new TextMergeViewer(pane,cc);
  pane.setContent(viewer.getControl());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(viewer.getControl());
  CompareElement left=new CompareElement(page,true);
  CompareElement right=new CompareElement(conflictingPage,false);
  if (ancestorPage != null) {
    CompareElement ancestor=new CompareElement(ancestorPage,false);
    viewer.setInput(new DiffNode(null,Differencer.CONFLICTING,ancestor,left,right));
  }
 else {
    viewer.setInput(new DiffNode(left,right));
  }
  return pane;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayoutFactory.fillDefaults().applyTo(composite);
  CompareViewerPane pane=new CompareViewerPane(composite,SWT.BORDER | SWT.FLAT);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(pane);
  CompareConfiguration cc=new CompareConfiguration();
  String pageId=StorageUtils.getExtendedPageId(page.getId(),page.getLanguage());
  if (ancestorPage != null) {
    cc.setAncestorLabel(String.format(""String_Node_Str"",pageId));
  }
  cc.setLeftLabel(String.format(""String_Node_Str"",pageId));
  cc.setRightLabel(String.format(""String_Node_Str"",pageId));
  viewer=new TextMergeViewer(pane,cc);
  pane.setContent(viewer.getControl());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(viewer.getControl());
  CompareElement left=new CompareElement(page,true);
  CompareElement right=new CompareElement(conflictingPage,false);
  if (ancestorPage != null) {
    CompareElement ancestor=new CompareElement(ancestorPage,false);
    viewer.setInput(new DiffNode(null,Differencer.CONFLICTING,ancestor,left,right));
  }
 else {
    viewer.setInput(new DiffNode(left,right));
  }
  return pane;
}",0.9416932907348244
178893,"@Override protected void doSaveDocument(IProgressMonitor monitor,Object element,IDocument document,boolean overwrite) throws CoreException {
  if (element instanceof PageEditorInput) {
    final PageEditorInput pageEditorInput=(PageEditorInput)element;
    pageEditorInput.getPage().setContent(document.get());
    SafeRunner.run(new XWikiEclipseSafeRunnable(){
      public void run() throws Exception {
      }
    }
);
  }
  super.doSaveDocument(monitor,element,document,overwrite);
}","@Override protected void doSaveDocument(IProgressMonitor monitor,Object element,IDocument document,boolean overwrite) throws CoreException {
  if (element instanceof PageEditorInput) {
    final PageEditorInput pageEditorInput=(PageEditorInput)element;
    pageEditorInput.getPage().setContent(document.get());
    SafeRunner.run(new XWikiEclipseSafeRunnable(){
      public void run() throws Exception {
        final XWikiEclipsePage page=pageEditorInput.getPage().getDataManager().storePage(pageEditorInput.getPage());
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            pageEditor.setInput(new PageEditorInput(page,pageEditorInput.isReadOnly()));
          }
        }
);
      }
    }
);
  }
  super.doSaveDocument(monitor,element,document,overwrite);
}",0.7562111801242236
178894,"public void run() throws Exception {
}","public void run(){
  pageEditor.setInput(new PageEditorInput(page,pageEditorInput.isReadOnly()));
}",0.291970802919708
178895,"private void updateInfo(){
  if (form != null) {
    PageEditorInput input=(PageEditorInput)getEditorInput();
    if (input != null) {
      XWikiEclipsePage page=input.getPage();
      int version=page.getMajorVersion();
      int minorVersion=page.getMinorVersion();
      if (version > 65536) {
        int temp=version;
        version=temp >> 16;
        minorVersion=temp & 0xFFFF;
      }
      if (page.getId().indexOf('.') != -1) {
        XWikiExtendedId extendedId=new XWikiExtendedId(page.getId());
        String language=""String_Node_Str"";
        if (page.getLanguage() != null) {
          if (!page.getLanguage().equals(""String_Node_Str"")) {
            language=page.getLanguage();
          }
        }
        form.setText(String.format(""String_Node_Str"",extendedId.getBasePageId(),version,minorVersion,language,input.isReadOnly() ? ""String_Node_Str"" : ""String_Node_Str""));
      }
 else {
        form.setText(String.format(""String_Node_Str"",page.getTitle(),version,minorVersion,input.isReadOnly() ? ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
    if (input.getPage().getDataManager().isInConflict(input.getPage().getId())) {
      boolean editConlictActionFound=false;
      for (      IContributionItem contributionItem : form.getToolBarManager().getItems()) {
        if (contributionItem instanceof ActionContributionItem) {
          ActionContributionItem actionContributionItem=(ActionContributionItem)contributionItem;
          if (actionContributionItem.getAction().equals(editConflictAction)) {
            editConlictActionFound=true;
          }
        }
      }
      if (!editConlictActionFound) {
        form.getToolBarManager().add(editConflictAction);
        form.updateToolBar();
      }
      form.setMessage(""String_Node_Str"",IMessageProvider.WARNING);
    }
 else {
      form.getToolBarManager().removeAll();
      form.updateToolBar();
      form.setMessage(input.getPage().getDataManager().getName());
    }
  }
}","private void updateInfo(){
  if (form != null) {
    PageEditorInput input=(PageEditorInput)getEditorInput();
    if (input != null) {
      XWikiEclipsePage page=input.getPage();
      int version=page.getMajorVersion();
      int minorVersion=page.getMinorVersion();
      if (version > 65536) {
        int temp=version;
        version=temp >> 16;
        minorVersion=temp & 0xFFFF;
      }
      if (page.getId().indexOf('.') != -1) {
        XWikiExtendedId extendedId=new XWikiExtendedId(page.getId());
        String language=""String_Node_Str"";
        if (page.getLanguage() != null) {
          if (!page.getLanguage().equals(""String_Node_Str"")) {
            language=page.getLanguage();
          }
        }
        form.setText(String.format(""String_Node_Str"",extendedId.getBasePageId(),version,minorVersion,language,input.isReadOnly() ? ""String_Node_Str"" : ""String_Node_Str""));
      }
 else {
        form.setText(String.format(""String_Node_Str"",page.getTitle(),version,minorVersion,input.isReadOnly() ? ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
    String pageId=StorageUtils.getExtendedPageId(input.getPage().getId(),input.getPage().getLanguage());
    if (input.getPage().getDataManager().isInConflict(pageId)) {
      boolean editConlictActionFound=false;
      for (      IContributionItem contributionItem : form.getToolBarManager().getItems()) {
        if (contributionItem instanceof ActionContributionItem) {
          ActionContributionItem actionContributionItem=(ActionContributionItem)contributionItem;
          if (actionContributionItem.getAction().equals(editConflictAction)) {
            editConlictActionFound=true;
          }
        }
      }
      if (!editConlictActionFound) {
        form.getToolBarManager().add(editConflictAction);
        form.updateToolBar();
      }
      form.setMessage(""String_Node_Str"",IMessageProvider.WARNING);
    }
 else {
      form.getToolBarManager().removeAll();
      form.updateToolBar();
      form.setMessage(input.getPage().getDataManager().getName());
    }
  }
}",0.9603371343579572
178896,"public void run(){
  PageEditor.this.updateInfo();
}","public void run(){
  int caretOffset=sourceViewer.getTextWidget().getCaretOffset();
  int topPixel=sourceViewer.getTextWidget().getTopPixel();
  try {
    doSetInput(new PageEditorInput(newPage,input.isReadOnly()));
  }
 catch (  CoreException e) {
    CoreLog.logError(""String_Node_Str"",e);
  }
  sourceViewer.getTextWidget().setCaretOffset(caretOffset);
  sourceViewer.getTextWidget().setTopPixel(topPixel);
  updateInfo();
  doSave(new NullProgressMonitor());
}",0.1821705426356589
178897,"public void handleCoreEvent(CoreEvent event){
  final PageEditorInput input=(PageEditorInput)getEditorInput();
  XWikiEclipsePage page=input.getPage();
  String targetPageId=null;
  DataManager dataManager=null;
  if (event.getSource() instanceof DataManager) {
    dataManager=(DataManager)event.getSource();
  }
  boolean updatePage=false;
switch (event.getType()) {
case OBJECT_STORED:
    XWikiEclipseObject object=(XWikiEclipseObject)event.getData();
  targetPageId=object.getPageId();
updatePage=page.getDataManager().equals(dataManager) && page.getId().equals(targetPageId);
break;
case OBJECT_REMOVED:
updatePage=page.getDataManager().equals(dataManager) && page.getId().equals(targetPageId);
break;
case DATA_MANAGER_CONNECTED:
updatePage=page.getDataManager().equals(dataManager);
Display.getDefault().syncExec(new Runnable(){
public void run(){
PageEditor.this.updateInfo();
}
}
);
break;
case REFRESH:
Object data=event.getData();
if (data instanceof DataManager || data instanceof XWikiEclipsePageSummary || data instanceof XWikiEclipseSpaceSummary) {
if (data instanceof XWikiEclipsePageSummary) {
return;
}
 else if (data instanceof DataManager) {
DataManager aDataManager=(DataManager)data;
if (!aDataManager.equals(page.getDataManager())) return;
}
 else if (data instanceof XWikiEclipseSpaceSummary) {
XWikiEclipseSpaceSummary space=(XWikiEclipseSpaceSummary)data;
if (!space.getDataManager().equals(page.getDataManager()) || !space.getId().equals(page.getSpace())) return;
}
if (isDirty()) {
MessageBox messageBox=new MessageBox(Display.getCurrent().getShells()[0],SWT.YES | SWT.NO | SWT.CANCEL| SWT.ICON_QUESTION);
messageBox.setMessage(String.format(""String_Node_Str"",page.getId()));
messageBox.setText(""String_Node_Str"");
this.setFocus();
int result=messageBox.open();
if (result == SWT.YES) {
this.doSave(null);
return;
}
 else if (result == SWT.CANCEL) {
return;
}
}
doRevertToSaved();
updatePage=true;
}
break;
case PAGE_REMOVED:
XWikiEclipsePage aPage=(XWikiEclipsePage)event.getData();
if (aPage.getXWikiEclipseId().equals(page.getXWikiEclipseId())) {
this.close(false);
}
break;
case SPACE_REMOVED:
XWikiEclipseSpaceSummary aSpace=(XWikiEclipseSpaceSummary)event.getData();
if (aSpace.getDataManager().equals(page.getDataManager()) && aSpace.getId().equals(page.getSpace())) {
this.close(false);
}
break;
case DATA_MANAGER_UNREGISTERED:
DataManager aDataManager=(DataManager)event.getData();
if (aDataManager.equals(page.getDataManager())) {
this.close(false);
}
break;
}
if (updatePage) {
if (!isDirty()) {
}
}
}","public void handleCoreEvent(CoreEvent event){
  final PageEditorInput input=(PageEditorInput)getEditorInput();
  XWikiEclipsePage page=input.getPage();
  String targetPageId=null;
  DataManager dataManager=null;
  if (event.getSource() instanceof DataManager) {
    dataManager=(DataManager)event.getSource();
  }
  boolean updatePage=false;
switch (event.getType()) {
case OBJECT_STORED:
    XWikiEclipseObject object=(XWikiEclipseObject)event.getData();
  targetPageId=object.getPageId();
updatePage=page.getDataManager().equals(dataManager) && page.getId().equals(targetPageId);
break;
case OBJECT_REMOVED:
updatePage=page.getDataManager().equals(dataManager) && page.getId().equals(targetPageId);
break;
case DATA_MANAGER_CONNECTED:
updatePage=page.getDataManager().equals(dataManager);
Display.getDefault().syncExec(new Runnable(){
public void run(){
PageEditor.this.updateInfo();
}
}
);
break;
case REFRESH:
Object data=event.getData();
if (data instanceof DataManager || data instanceof XWikiEclipsePageSummary || data instanceof XWikiEclipseSpaceSummary) {
if (data instanceof XWikiEclipsePageSummary) {
return;
}
 else if (data instanceof DataManager) {
DataManager aDataManager=(DataManager)data;
if (!aDataManager.equals(page.getDataManager())) return;
}
 else if (data instanceof XWikiEclipseSpaceSummary) {
XWikiEclipseSpaceSummary space=(XWikiEclipseSpaceSummary)data;
if (!space.getDataManager().equals(page.getDataManager()) || !space.getId().equals(page.getSpace())) return;
}
if (isDirty()) {
MessageBox messageBox=new MessageBox(Display.getCurrent().getShells()[0],SWT.YES | SWT.NO | SWT.CANCEL| SWT.ICON_QUESTION);
messageBox.setMessage(String.format(""String_Node_Str"",page.getId()));
messageBox.setText(""String_Node_Str"");
this.setFocus();
int result=messageBox.open();
if (result == SWT.YES) {
this.doSave(null);
return;
}
 else if (result == SWT.CANCEL) {
return;
}
try {
page.getDataManager().clearPageStatus(StorageUtils.getExtendedPageId(page.getId(),page.getLanguage()));
}
 catch (Exception ex) {
}
}
doRevertToSaved();
updatePage=true;
}
break;
case PAGE_REMOVED:
XWikiEclipsePage aPage=(XWikiEclipsePage)event.getData();
if (aPage.getXWikiEclipseId().equals(page.getXWikiEclipseId())) {
this.close(false);
}
break;
case SPACE_REMOVED:
XWikiEclipseSpaceSummary aSpace=(XWikiEclipseSpaceSummary)event.getData();
if (aSpace.getDataManager().equals(page.getDataManager()) && aSpace.getId().equals(page.getSpace())) {
this.close(false);
}
break;
case DATA_MANAGER_UNREGISTERED:
DataManager aDataManager=(DataManager)event.getData();
if (aDataManager.equals(page.getDataManager())) {
this.close(false);
}
break;
}
try {
if (updatePage) {
if (!isDirty()) {
final XWikiEclipsePage newPage=page.getDataManager().getPage(page.getWiki(),page.getSpace(),page.getName(),page.getLanguage());
if (page.getMajorVersion() != newPage.getMajorVersion()) {
final ISourceViewer sourceViewer=getSourceViewer();
if (sourceViewer != null) {
Display.getDefault().syncExec(new Runnable(){
public void run(){
int caretOffset=sourceViewer.getTextWidget().getCaretOffset();
int topPixel=sourceViewer.getTextWidget().getTopPixel();
try {
doSetInput(new PageEditorInput(newPage,input.isReadOnly()));
}
 catch (CoreException e) {
CoreLog.logError(""String_Node_Str"",e);
}
sourceViewer.getTextWidget().setCaretOffset(caretOffset);
sourceViewer.getTextWidget().setTopPixel(topPixel);
updateInfo();
doSave(new NullProgressMonitor());
}
}
);
}
}
}
}
}
 catch (XWikiEclipseStorageException e) {
CoreLog.logError(""String_Node_Str"",e);
}
}",0.8322899505766063
178898,"private void handleConflict(){
  PageEditorInput input=(PageEditorInput)getEditorInput();
  XWikiEclipsePage currentPage=input.getPage();
  DataManager dataManager=currentPage.getDataManager();
  if (dataManager.isInConflict(currentPage.getId())) {
    XWikiEclipsePage conflictingPage=dataManager.getConflictingPage(currentPage.getId());
    XWikiEclipsePage conflictAncestorPage=dataManager.getConflictAncestorPage(currentPage.getId());
    PageConflictDialog compareDialog=new PageConflictDialog(Display.getDefault().getActiveShell(),currentPage,conflictingPage,conflictAncestorPage);
    int result=compareDialog.open();
    conflictDialogDisplayed=true;
switch (result) {
case PageConflictDialog.ID_USE_LOCAL:
      break;
case PageConflictDialog.ID_USE_REMOTE:
    break;
default :
  return;
}
conflictDialogDisplayed=false;
}
}","private void handleConflict(){
  PageEditorInput input=(PageEditorInput)getEditorInput();
  XWikiEclipsePage currentPage=input.getPage();
  DataManager dataManager=currentPage.getDataManager();
  String pageId=StorageUtils.getExtendedPageId(currentPage.getId(),currentPage.getLanguage());
  if (dataManager.isInConflict(pageId)) {
    try {
      XWikiEclipsePage conflictingPage=dataManager.getConflictingPage(pageId);
      XWikiEclipsePage conflictAncestorPage=dataManager.getConflictAncestorPage(pageId);
      PageConflictDialog compareDialog=new PageConflictDialog(Display.getDefault().getActiveShell(),currentPage,conflictingPage,conflictAncestorPage);
      int result=compareDialog.open();
      conflictDialogDisplayed=true;
switch (result) {
case PageConflictDialog.ID_USE_LOCAL:
        XWikiEclipsePage newPage=conflictingPage;
      newPage.setContent(currentPage.getContent());
    dataManager.clearConflictingStatus(pageId);
  setInput(new PageEditorInput(newPage,input.isReadOnly()));
doSave(new NullProgressMonitor());
break;
case PageConflictDialog.ID_USE_REMOTE:
dataManager.clearConflictingStatus(pageId);
setInput(new PageEditorInput(conflictingPage,input.isReadOnly()));
doSave(new NullProgressMonitor());
break;
default :
return;
}
conflictDialogDisplayed=false;
}
 catch (Exception e) {
CoreLog.logError(""String_Node_Str"",e);
}
}
}",0.6986301369863014
178899,"public String getName(){
  String name=page.getName() + ""String_Node_Str"" + page.getVersion()+ ""String_Node_Str"";
  return name;
}","public String getName(){
  String name=page.getName() + (page.getLanguage().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + page.getLanguage() + ""String_Node_Str"");
  return name;
}",0.7311178247734139
178900,"public Object execute(ExecutionEvent event) throws ExecutionException {
  String spaceKey=null;
  DataManager dataManager=null;
  ISelection selection=HandlerUtil.getCurrentSelection(event);
  Set selectedObjects=UIUtils.getSelectedObjectsFromSelection(selection);
  if (selectedObjects.size() == 1) {
    Object selectedObject=selectedObjects.iterator().next();
    if (selectedObject instanceof XWikiEclipseSpaceSummary) {
      XWikiEclipseSpaceSummary spaceSummary=(XWikiEclipseSpaceSummary)selectedObject;
      dataManager=spaceSummary.getDataManager();
      spaceKey=spaceSummary.getId();
    }
    if (selectedObject instanceof DataManager) {
      dataManager=(DataManager)selectedObject;
    }
  }
  if (dataManager != null) {
    NewPageWizard wizard=new NewPageWizard(dataManager,spaceKey);
    WizardDialog dialog=new WizardDialog(HandlerUtil.getActiveWorkbenchWindow(event).getShell(),wizard);
    dialog.create();
    dialog.open();
  }
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  DataManager dataManager=null;
  NewPageWizardState state=new NewPageWizardState();
  ISelection selection=HandlerUtil.getCurrentSelection(event);
  Set selectedObjects=UIUtils.getSelectedObjectsFromSelection(selection);
  if (selectedObjects.size() == 1) {
    Object selectedObject=selectedObjects.iterator().next();
    if (selectedObject instanceof XWikiEclipseSpaceSummary) {
      XWikiEclipseSpaceSummary spaceSummary=(XWikiEclipseSpaceSummary)selectedObject;
      dataManager=spaceSummary.getDataManager();
      state.setSpace(spaceSummary.getName());
      state.setWiki(spaceSummary.getWiki());
    }
    if (selectedObject instanceof XWikiEclipseWikiSummary) {
      XWikiEclipseWikiSummary wikiSummary=(XWikiEclipseWikiSummary)selectedObject;
      state.setWiki(wikiSummary.getName());
      dataManager=wikiSummary.getDataManager();
    }
    if (selectedObject instanceof DataManager) {
      dataManager=(DataManager)selectedObject;
    }
  }
  if (dataManager != null) {
    NewPageWizard wizard=new NewPageWizard(dataManager,state);
    WizardDialog dialog=new WizardDialog(HandlerUtil.getActiveWorkbenchWindow(event).getShell(),wizard);
    dialog.create();
    dialog.open();
  }
  return null;
}",0.8212389380530973
178901,"public List<XWikiEclipseSpaceSummary> getSpaces(XWikiEclipseWikiSummary wiki) throws XWikiEclipseStorageException {
  final List<XWikiEclipseSpaceSummary> result=new ArrayList<XWikiEclipseSpaceSummary>();
  try {
    final IFolder spaceFolder=StorageUtils.createFolder(baseFolder.getFolder(SPACES_DIRECTORY));
    List<IResource> spaceFolderResources=getChildResources(spaceFolder,IResource.DEPTH_ONE);
    for (    IResource spaceFolderResource : spaceFolderResources) {
      if (spaceFolderResource instanceof IFile) {
        IFile wikiFile=(IFile)spaceFolderResource;
        XWikiEclipseSpaceSummary spaceSummary;
        try {
          spaceSummary=(XWikiEclipseSpaceSummary)StorageUtils.readFromJSON(wikiFile,XWikiEclipseSpaceSummary.class.getCanonicalName());
          result.add(spaceSummary);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  CoreException e) {
    throw new XWikiEclipseStorageException(e);
  }
  return result;
}","public List<XWikiEclipseSpaceSummary> getSpaces(XWikiEclipseWikiSummary wiki) throws XWikiEclipseStorageException {
  final List<XWikiEclipseSpaceSummary> result=new ArrayList<XWikiEclipseSpaceSummary>();
  try {
    final IFolder spaceFolder=StorageUtils.createFolder(baseFolder.getFolder(SPACES_DIRECTORY));
    List<IResource> spaceFolderResources=getChildResources(spaceFolder,IResource.DEPTH_ONE);
    for (    IResource spaceFolderResource : spaceFolderResources) {
      if (spaceFolderResource instanceof IFile) {
        IFile wikiFile=(IFile)spaceFolderResource;
        XWikiEclipseSpaceSummary spaceSummary;
        try {
          spaceSummary=(XWikiEclipseSpaceSummary)StorageUtils.readFromJSON(wikiFile,XWikiEclipseSpaceSummary.class.getCanonicalName());
          if (spaceSummary.getWiki().equals(wiki.getWikiId())) {
            result.add(spaceSummary);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  CoreException e) {
    throw new XWikiEclipseStorageException(e);
  }
  return result;
}",0.9563967417345473
178902,"/** 
 * @param spaceSummary
 * @return
 */
public List<XWikiEclipsePageSummary> getPageSummaries(XWikiEclipseSpaceSummary spaceSummary) throws XWikiEclipseStorageException {
  final List<XWikiEclipsePageSummary> result=new ArrayList<XWikiEclipsePageSummary>();
  try {
    final IFolder spaceFolder=StorageUtils.createFolder(baseFolder.getFolder(PAGES_DIRECTORY));
    List<IResource> pageFolderResources=getChildResources(spaceFolder,IResource.DEPTH_ONE);
    for (    IResource pageFolderResource : pageFolderResources) {
      if (pageFolderResource instanceof IFile) {
        IFile wikiFile=(IFile)pageFolderResource;
        XWikiEclipsePageSummary pageSummary;
        try {
          pageSummary=(XWikiEclipsePageSummary)StorageUtils.readFromJSON(wikiFile,XWikiEclipsePageSummary.class.getCanonicalName());
          result.add(pageSummary);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  CoreException e) {
    throw new XWikiEclipseStorageException(e);
  }
  return result;
}","/** 
 * @param spaceSummary
 * @return
 */
public List<XWikiEclipsePageSummary> getPageSummaries(XWikiEclipseSpaceSummary spaceSummary) throws XWikiEclipseStorageException {
  final List<XWikiEclipsePageSummary> result=new ArrayList<XWikiEclipsePageSummary>();
  try {
    final IFolder spaceFolder=StorageUtils.createFolder(baseFolder.getFolder(PAGES_DIRECTORY));
    List<IResource> pageFolderResources=getChildResources(spaceFolder,IResource.DEPTH_ONE);
    for (    IResource pageFolderResource : pageFolderResources) {
      if (pageFolderResource instanceof IFile) {
        IFile wikiFile=(IFile)pageFolderResource;
        XWikiEclipsePageSummary pageSummary;
        try {
          pageSummary=(XWikiEclipsePageSummary)StorageUtils.readFromJSON(wikiFile,XWikiEclipsePageSummary.class.getCanonicalName());
          if (pageSummary.getWiki().equals(spaceSummary.getWiki()) && pageSummary.getSpace().equals(spaceSummary.getName())) {
            result.add(pageSummary);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  CoreException e) {
    throw new XWikiEclipseStorageException(e);
  }
  return result;
}",0.9369691551184622
178903,"@Override public String getLabel(Object object){
  if (object instanceof XWikiEclipseObjectSummary) {
    XWikiEclipseObjectSummary objectSummary=(XWikiEclipseObjectSummary)object;
    int number=objectSummary.getNumber();
    String label=""String_Node_Str"" + number + ""String_Node_Str"";
    List<XWikiEclipseObjectProperty> objectProperties=objectSummary.getDataManager().getObjectProperties(objectSummary);
    boolean findNameAndTitle=false, foundStringProperty=false;
    for (    XWikiEclipseObjectProperty property : objectProperties) {
      String propertyName=property.getName().toLowerCase();
      if (propertyName.indexOf(""String_Node_Str"") >= 0) {
        label+=property.getValue();
        return label;
      }
    }
    for (    XWikiEclipseObjectProperty property : objectProperties) {
      String propertyName=property.getName().toLowerCase();
      if (propertyName.indexOf(""String_Node_Str"") >= 0 || propertyName.indexOf(""String_Node_Str"") >= 0) {
        findNameAndTitle=true;
        label+=property.getValue();
        return label;
      }
    }
    for (    XWikiEclipseObjectProperty property : objectProperties) {
      if (!findNameAndTitle) {
        if (property.getType().indexOf(""String_Node_Str"") >= 0 && !foundStringProperty) {
          foundStringProperty=true;
          label+=property.getValue();
          return label;
        }
 else         if (!(property.getType().indexOf(""String_Node_Str"") >= 0) && !foundStringProperty) {
          label+=property.getValue();
          return label;
        }
      }
    }
    return label;
  }
  return super.getLabel(object);
}","@Override public String getLabel(Object object){
  if (object instanceof XWikiEclipseObjectSummary) {
    XWikiEclipseObjectSummary objectSummary=(XWikiEclipseObjectSummary)object;
    int number=objectSummary.getNumber();
    String label=""String_Node_Str"" + number + ""String_Node_Str"";
    List<XWikiEclipseObjectProperty> objectProperties=objectSummary.getDataManager().getObjectProperties(objectSummary);
    boolean findNameAndTitle=false, foundStringProperty=false;
    for (    XWikiEclipseObjectProperty property : objectProperties) {
      String propertyName=property.getName().toLowerCase();
      if (propertyName.indexOf(""String_Node_Str"") >= 0 && property.getValue().length() > 0) {
        label+=property.getValue();
        return label;
      }
    }
    for (    XWikiEclipseObjectProperty property : objectProperties) {
      String propertyName=property.getName().toLowerCase();
      if (propertyName.indexOf(""String_Node_Str"") >= 0 || propertyName.indexOf(""String_Node_Str"") >= 0) {
        if (property.getValue().length() > 0) {
          findNameAndTitle=true;
          label+=property.getValue();
          return label;
        }
      }
    }
    for (    XWikiEclipseObjectProperty property : objectProperties) {
      if (!findNameAndTitle) {
        if (property.getType().indexOf(""String_Node_Str"") >= 0 && !foundStringProperty) {
          foundStringProperty=true;
          label+=property.getValue();
          return label;
        }
 else         if (!(property.getType().indexOf(""String_Node_Str"") >= 0) && !foundStringProperty) {
          label+=property.getValue();
          return label;
        }
      }
    }
    return label;
  }
  return super.getLabel(object);
}",0.9621394230769232
178904,"@Override public Object[] getChildren(Object object){
  if (object instanceof XWikiEclipsePageSummary) {
    final XWikiEclipsePageSummary pageSummary=(XWikiEclipsePageSummary)object;
    try {
      DataManager dataManager=pageSummary.getDataManager();
      List<XWikiEclipseObjectSummary> objects=dataManager.getObjectSummaries(pageSummary);
      List<XWikiEclipseAttachment> attachments=dataManager.getAttachments(pageSummary);
      XWikiEclipseClass pageClass=dataManager.getClass(pageSummary);
      List<XWikiEclipseTag> tags=dataManager.getTags(pageSummary);
      List<XWikiEclipseComment> comments=dataManager.getComments(pageSummary);
      List<ModelObject> result=new ArrayList<ModelObject>();
      String pageId=pageSummary.getId();
      result.add(pageClass);
      if (attachments != null && attachments.size() > 0) {
        XWikiEclipseObjectCollection a=new XWikiEclipseObjectCollection(dataManager);
        a.setClassName(""String_Node_Str"");
        a.setPageId(pageId);
        for (        XWikiEclipseAttachment attach : attachments) {
          a.getObjects().add(attach);
        }
        if (a.getObjects().size() > 0) {
          result.add(a);
        }
      }
      if (tags != null && tags.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        t.setPageId(pageId);
        for (        XWikiEclipseTag tag : tags) {
          t.getObjects().add(tag);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (comments != null && comments.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        t.setPageId(pageId);
        for (        XWikiEclipseComment comment : comments) {
          t.getObjects().add(comment);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (objects != null && objects.size() > 0) {
        XWikiEclipseObjectCollection collection=new XWikiEclipseObjectCollection(dataManager);
        collection.setClassName(""String_Node_Str"");
        collection.setPageId(pageId);
        Map<String,XWikiEclipseObjectCollection> classnameCollectionMap=new HashMap<String,XWikiEclipseObjectCollection>();
        for (        XWikiEclipseObjectSummary objectSummary : objects) {
          if (!objectSummary.getClassName().equals(""String_Node_Str"") && !objectSummary.getClassName().equals(""String_Node_Str"")) {
            String classname=objectSummary.getClassName();
            if (classnameCollectionMap.containsKey(classname)) {
              classnameCollectionMap.get(classname).getObjects().add(objectSummary);
            }
 else {
              XWikiEclipseObjectCollection subCollection=new XWikiEclipseObjectCollection(dataManager);
              subCollection.setPageId(pageId);
              if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else               if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else {
                subCollection.setClassName(classname);
              }
              subCollection.getObjects().add(objectSummary);
              classnameCollectionMap.put(classname,subCollection);
              collection.getObjects().add(subCollection);
            }
          }
        }
        result.add(collection);
      }
      return result.toArray();
    }
 catch (    XWikiEclipseStorageException e) {
      UIUtils.showMessageDialog(Display.getDefault().getActiveShell(),SWT.ICON_ERROR,""String_Node_Str"",""String_Node_Str"");
      pageSummary.getDataManager().disconnect();
      CoreLog.logError(""String_Node_Str"",e);
      return NO_CHILDREN;
    }
  }
  return super.getChildren(object);
}","@Override public Object[] getChildren(Object object){
  if (object instanceof XWikiEclipsePageSummary) {
    final XWikiEclipsePageSummary pageSummary=(XWikiEclipsePageSummary)object;
    try {
      DataManager dataManager=pageSummary.getDataManager();
      List<XWikiEclipseObjectSummary> objects=dataManager.getObjectSummaries(pageSummary);
      List<XWikiEclipseAttachment> attachments=dataManager.getAttachments(pageSummary);
      XWikiEclipseClass pageClass=dataManager.getClass(pageSummary);
      List<XWikiEclipseTag> tags=dataManager.getTags(pageSummary);
      List<XWikiEclipseComment> comments=dataManager.getComments(pageSummary);
      List<ModelObject> result=new ArrayList<ModelObject>();
      String pageId=pageSummary.getId();
      result.add(pageClass);
      if (attachments != null && attachments.size() > 0) {
        XWikiEclipseObjectCollection a=new XWikiEclipseObjectCollection(dataManager);
        a.setClassName(""String_Node_Str"");
        a.setPageId(pageId);
        for (        XWikiEclipseAttachment attach : attachments) {
          a.getObjects().add(attach);
        }
        if (a.getObjects().size() > 0) {
          result.add(a);
        }
      }
      if (tags != null && tags.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        t.setPageId(pageId);
        for (        XWikiEclipseTag tag : tags) {
          t.getObjects().add(tag);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (comments != null && comments.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        t.setPageId(pageId);
        for (        XWikiEclipseComment comment : comments) {
          t.getObjects().add(comment);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (objects != null && objects.size() > 0) {
        XWikiEclipseObjectCollection collection=null;
        Map<String,XWikiEclipseObjectCollection> classnameCollectionMap=new HashMap<String,XWikiEclipseObjectCollection>();
        for (        XWikiEclipseObjectSummary objectSummary : objects) {
          if (!objectSummary.getClassName().equals(""String_Node_Str"") && !objectSummary.getClassName().equals(""String_Node_Str"")) {
            String classname=objectSummary.getClassName();
            if (classnameCollectionMap.containsKey(classname)) {
              classnameCollectionMap.get(classname).getObjects().add(objectSummary);
            }
 else {
              XWikiEclipseObjectCollection subCollection=new XWikiEclipseObjectCollection(dataManager);
              subCollection.setPageId(pageId);
              if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else               if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else {
                subCollection.setClassName(classname);
              }
              subCollection.getObjects().add(objectSummary);
              classnameCollectionMap.put(classname,subCollection);
              if (collection == null) {
                collection=new XWikiEclipseObjectCollection(dataManager);
                collection.setClassName(""String_Node_Str"");
                collection.setPageId(pageId);
              }
              collection.getObjects().add(subCollection);
            }
          }
        }
        if (collection != null) {
          result.add(collection);
        }
      }
      return result.toArray();
    }
 catch (    XWikiEclipseStorageException e) {
      UIUtils.showMessageDialog(Display.getDefault().getActiveShell(),SWT.ICON_ERROR,""String_Node_Str"",""String_Node_Str"");
      pageSummary.getDataManager().disconnect();
      CoreLog.logError(""String_Node_Str"",e);
      return NO_CHILDREN;
    }
  }
  return super.getChildren(object);
}",0.9324003498687992
178905,"@Override public Composite createControl(Composite parent){
  String multiSelectAttributeString=property.getAttribute(""String_Node_Str"").toString();
  if (multiSelectAttributeString == null || multiSelectAttributeString.equals(""String_Node_Str"")) {
    multiSelect=false;
  }
 else {
    multiSelect=true;
  }
  String unModifiableAttributeString=property.getAttribute(""String_Node_Str"");
  if (unModifiableAttributeString == null || unModifiableAttributeString.equals(""String_Node_Str"")) {
    unmodifiable=true;
  }
 else {
    unmodifiable=false;
  }
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED);
  section.setText(property.getPrettyName() + ""String_Node_Str"" + (unmodifiable ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (multiSelect ? ""String_Node_Str"" : ""String_Node_Str""));
  Composite composite=toolkit.createComposite(section,SWT.NONE);
  GridLayoutFactory.fillDefaults().extendedMargins(0,0,0,10).applyTo(composite);
  tree=toolkit.createTree(composite,SWT.BORDER | SWT.V_SCROLL | (multiSelect ? SWT.MULTI : SWT.NONE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(tree);
  toolkit.paintBordersFor(tree);
  tree.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < items.length; i++) {
        TreeItem item=items[i];
        if (i == items.length - 1) {
          sb.append(item.getText());
        }
 else {
          sb.append(item.getText() + ""String_Node_Str"");
        }
      }
      property.setValue(sb.toString());
      firePropertyModifyListener();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  populateTree();
  section.setClient(composite);
  return section;
}","@Override public Composite createControl(Composite parent){
  String multiSelectAttributeString=property.getAttribute(""String_Node_Str"").toString();
  if (multiSelectAttributeString == null || multiSelectAttributeString.equals(""String_Node_Str"")) {
    multiSelect=false;
  }
 else {
    multiSelect=true;
  }
  String unModifiableAttributeString=property.getAttribute(""String_Node_Str"");
  if (unModifiableAttributeString == null || unModifiableAttributeString.equals(""String_Node_Str"")) {
    unmodifiable=false;
  }
 else {
    unmodifiable=true;
  }
  Section section=toolkit.createSection(parent,Section.TITLE_BAR | Section.EXPANDED);
  section.setText(property.getPrettyName() + ""String_Node_Str"" + (unmodifiable ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (multiSelect ? ""String_Node_Str"" : ""String_Node_Str""));
  Composite composite=toolkit.createComposite(section,SWT.NONE);
  GridLayoutFactory.fillDefaults().extendedMargins(0,0,0,10).applyTo(composite);
  tree=toolkit.createTree(composite,SWT.BORDER | SWT.V_SCROLL | (multiSelect ? SWT.MULTI : SWT.NONE));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(tree);
  toolkit.paintBordersFor(tree);
  tree.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < items.length; i++) {
        TreeItem item=items[i];
        if (i == items.length - 1) {
          sb.append(item.getText());
        }
 else {
          sb.append(item.getText() + ""String_Node_Str"");
        }
      }
      property.setValue(sb.toString());
      firePropertyModifyListener();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  populateTree();
  section.setClient(composite);
  return section;
}",0.9962506695232994
178906,"@Override public Object[] getChildren(Object object){
  if (object instanceof XWikiEclipsePageSummary) {
    final XWikiEclipsePageSummary pageSummary=(XWikiEclipsePageSummary)object;
    try {
      DataManager dataManager=pageSummary.getDataManager();
      List<XWikiEclipseObjectSummary> objects=dataManager.getObjectSummaries(pageSummary);
      List<XWikiEclipseAttachment> attachments=dataManager.getAttachments(pageSummary);
      XWikiEclipseClassSummary pageClass=dataManager.getPageClass(pageSummary);
      List<XWikiEclipseTag> tags=dataManager.getTags(pageSummary);
      List<XWikiEclipseComment> comments=dataManager.getComments(pageSummary);
      List<ModelObject> result=new ArrayList<ModelObject>();
      result.add(pageClass);
      if (attachments != null && attachments.size() > 0) {
        XWikiEclipseObjectCollection a=new XWikiEclipseObjectCollection(dataManager);
        a.setClassName(""String_Node_Str"");
        for (        XWikiEclipseAttachment attach : attachments) {
          a.getObjects().add(attach);
        }
        if (a.getObjects().size() > 0) {
          result.add(a);
        }
      }
      if (tags != null && tags.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        for (        XWikiEclipseTag tag : tags) {
          t.getObjects().add(tag);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (comments != null && comments.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        for (        XWikiEclipseComment comment : comments) {
          t.getObjects().add(comment);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (objects != null && objects.size() > 0) {
        XWikiEclipseObjectCollection collection=new XWikiEclipseObjectCollection(dataManager);
        collection.setClassName(""String_Node_Str"");
        Map<String,XWikiEclipseObjectCollection> classnameCollectionMap=new HashMap<String,XWikiEclipseObjectCollection>();
        for (        XWikiEclipseObjectSummary objectSummary : objects) {
          if (!objectSummary.getClassName().equals(""String_Node_Str"") && !objectSummary.getClassName().equals(""String_Node_Str"")) {
            String classname=objectSummary.getClassName();
            if (classnameCollectionMap.containsKey(classname)) {
              classnameCollectionMap.get(classname).getObjects().add(objectSummary);
            }
 else {
              XWikiEclipseObjectCollection subCollection=new XWikiEclipseObjectCollection(dataManager);
              if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else               if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else {
                subCollection.setClassName(classname);
              }
              subCollection.getObjects().add(objectSummary);
              classnameCollectionMap.put(classname,subCollection);
              collection.getObjects().add(subCollection);
            }
          }
        }
        result.add(collection);
      }
      return result.toArray();
    }
 catch (    XWikiEclipseStorageException e) {
      UIUtils.showMessageDialog(Display.getDefault().getActiveShell(),SWT.ICON_ERROR,""String_Node_Str"",""String_Node_Str"");
      pageSummary.getDataManager().disconnect();
      CoreLog.logError(""String_Node_Str"",e);
      return NO_CHILDREN;
    }
  }
  return super.getChildren(object);
}","@Override public Object[] getChildren(Object object){
  if (object instanceof XWikiEclipsePageSummary) {
    final XWikiEclipsePageSummary pageSummary=(XWikiEclipsePageSummary)object;
    try {
      DataManager dataManager=pageSummary.getDataManager();
      List<XWikiEclipseObjectSummary> objects=dataManager.getObjectSummaries(pageSummary);
      List<XWikiEclipseAttachment> attachments=dataManager.getAttachments(pageSummary);
      XWikiEclipseClassSummary pageClass=dataManager.getPageClass(pageSummary);
      List<XWikiEclipseTag> tags=dataManager.getTags(pageSummary);
      List<XWikiEclipseComment> comments=dataManager.getComments(pageSummary);
      List<ModelObject> result=new ArrayList<ModelObject>();
      String pageId=pageSummary.getId();
      result.add(pageClass);
      if (attachments != null && attachments.size() > 0) {
        XWikiEclipseObjectCollection a=new XWikiEclipseObjectCollection(dataManager);
        a.setClassName(""String_Node_Str"");
        a.setPageId(pageId);
        for (        XWikiEclipseAttachment attach : attachments) {
          a.getObjects().add(attach);
        }
        if (a.getObjects().size() > 0) {
          result.add(a);
        }
      }
      if (tags != null && tags.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        t.setPageId(pageId);
        for (        XWikiEclipseTag tag : tags) {
          t.getObjects().add(tag);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (comments != null && comments.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        t.setPageId(pageId);
        for (        XWikiEclipseComment comment : comments) {
          t.getObjects().add(comment);
        }
        if (t.getObjects().size() > 0) {
          result.add(t);
        }
      }
      if (objects != null && objects.size() > 0) {
        XWikiEclipseObjectCollection collection=new XWikiEclipseObjectCollection(dataManager);
        collection.setClassName(""String_Node_Str"");
        collection.setPageId(pageId);
        Map<String,XWikiEclipseObjectCollection> classnameCollectionMap=new HashMap<String,XWikiEclipseObjectCollection>();
        for (        XWikiEclipseObjectSummary objectSummary : objects) {
          if (!objectSummary.getClassName().equals(""String_Node_Str"") && !objectSummary.getClassName().equals(""String_Node_Str"")) {
            String classname=objectSummary.getClassName();
            if (classnameCollectionMap.containsKey(classname)) {
              classnameCollectionMap.get(classname).getObjects().add(objectSummary);
            }
 else {
              XWikiEclipseObjectCollection subCollection=new XWikiEclipseObjectCollection(dataManager);
              subCollection.setPageId(pageId);
              if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else               if (classname.equals(""String_Node_Str"")) {
                subCollection.setClassName(""String_Node_Str"");
              }
 else {
                subCollection.setClassName(classname);
              }
              subCollection.getObjects().add(objectSummary);
              classnameCollectionMap.put(classname,subCollection);
              collection.getObjects().add(subCollection);
            }
          }
        }
        result.add(collection);
      }
      return result.toArray();
    }
 catch (    XWikiEclipseStorageException e) {
      UIUtils.showMessageDialog(Display.getDefault().getActiveShell(),SWT.ICON_ERROR,""String_Node_Str"",""String_Node_Str"");
      pageSummary.getDataManager().disconnect();
      CoreLog.logError(""String_Node_Str"",e);
      return NO_CHILDREN;
    }
  }
  return super.getChildren(object);
}",0.9721968411434538
178907,"/** 
 * {@inheritDoc}
 * @see org.xwiki.eclipse.model.ModelObject#getXWikiEclipseId()
 */
@Override public String getXWikiEclipseId(){
  return String.format(""String_Node_Str"",getDataManager().getName(),getAuthor());
}","/** 
 * {@inheritDoc}
 * @see org.xwiki.eclipse.model.ModelObject#getXWikiEclipseId()
 */
@Override public String getXWikiEclipseId(){
  return String.format(""String_Node_Str"",getDataManager().getName(),getId(),getAuthor());
}",0.981981981981982
178908,"/** 
 * {@inheritDoc}
 * @see org.xwiki.eclipse.storage.IRemoteXWikiDataStorage#getComments(org.xwiki.eclipse.model.XWikiEclipsePageSummary)
 */
@Override public List<XWikiEclipseComment> getComments(XWikiEclipsePageSummary pageSummary){
  List<XWikiEclipseComment> result=new ArrayList<XWikiEclipseComment>();
  List<Comment> comments=this.restRemoteStorage.getComments(pageSummary.getCommentsUrl());
  for (  Comment comment : comments) {
    XWikiEclipseComment c=new XWikiEclipseComment(dataManager);
    c.setAuthor(comment.getAuthor());
    c.setDate(comment.getDate());
    c.setHighlight(comment.getHighlight());
    c.setId(comment.getId());
    c.setText(comment.getText());
    result.add(c);
  }
  return result;
}","/** 
 * {@inheritDoc}
 * @see org.xwiki.eclipse.storage.IRemoteXWikiDataStorage#getComments(org.xwiki.eclipse.model.XWikiEclipsePageSummary)
 */
@Override public List<XWikiEclipseComment> getComments(XWikiEclipsePageSummary pageSummary){
  List<XWikiEclipseComment> result=new ArrayList<XWikiEclipseComment>();
  List<Comment> comments=this.restRemoteStorage.getComments(pageSummary.getCommentsUrl());
  if (comments != null && comments.size() > 0) {
    for (    Comment comment : comments) {
      XWikiEclipseComment c=new XWikiEclipseComment(dataManager);
      c.setAuthor(comment.getAuthor());
      c.setDate(comment.getDate());
      c.setHighlight(comment.getHighlight());
      c.setId(comment.getId());
      c.setText(comment.getText());
      result.add(c);
    }
  }
  return result;
}",0.9272131147540984
178909,"@Override public Object[] getChildren(Object object){
  if (object instanceof XWikiEclipsePageSummary) {
    final XWikiEclipsePageSummary pageSummary=(XWikiEclipsePageSummary)object;
    try {
      DataManager dataManager=pageSummary.getDataManager();
      List<XWikiEclipseObjectSummary> objects=dataManager.getObjects(pageSummary);
      List<XWikiEclipseAttachment> attachments=dataManager.getAttachments(pageSummary);
      XWikiEclipseClassSummary pageClass=dataManager.getPageClass(pageSummary);
      List<XWikiEclipseTag> tags=dataManager.getTags(pageSummary);
      List<XWikiEclipseComment> comments=dataManager.getComments(pageSummary);
      List<ModelObject> result=new ArrayList<ModelObject>();
      result.add(pageClass);
      List<ModelObject> list=null;
      if (attachments != null && attachments.size() > 0) {
        XWikiEclipseObjectCollection a=new XWikiEclipseObjectCollection(dataManager);
        a.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseAttachment attach : attachments) {
          list.add(attach);
        }
        a.setObjects(list);
        result.add(a);
      }
      if (tags != null && tags.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseTag tag : tags) {
          list.add(tag);
        }
        t.setObjects(list);
        result.add(t);
      }
      if (comments != null && comments.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseComment comment : comments) {
          list.add(comment);
        }
        t.setObjects(list);
        result.add(t);
      }
      if (objects != null && objects.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseObjectSummary objectSummary : objects) {
          if (objectSummary.getClassName().equals(""String_Node_Str"")) {
            list.add(objectSummary);
          }
        }
        t.setObjects(list);
        result.add(t);
      }
      return result.toArray();
    }
 catch (    XWikiEclipseStorageException e) {
      UIUtils.showMessageDialog(Display.getDefault().getActiveShell(),SWT.ICON_ERROR,""String_Node_Str"",""String_Node_Str"");
      pageSummary.getDataManager().disconnect();
      CoreLog.logError(""String_Node_Str"",e);
      return NO_CHILDREN;
    }
  }
  return super.getChildren(object);
}","@Override public Object[] getChildren(Object object){
  if (object instanceof XWikiEclipsePageSummary) {
    final XWikiEclipsePageSummary pageSummary=(XWikiEclipsePageSummary)object;
    try {
      DataManager dataManager=pageSummary.getDataManager();
      List<XWikiEclipseObjectSummary> objects=dataManager.getObjects(pageSummary);
      List<XWikiEclipseAttachment> attachments=dataManager.getAttachments(pageSummary);
      XWikiEclipseClassSummary pageClass=dataManager.getPageClass(pageSummary);
      List<XWikiEclipseTag> tags=dataManager.getTags(pageSummary);
      List<XWikiEclipseComment> comments=dataManager.getComments(pageSummary);
      List<ModelObject> result=new ArrayList<ModelObject>();
      result.add(pageClass);
      List<ModelObject> list=null;
      if (attachments != null && attachments.size() > 0) {
        XWikiEclipseObjectCollection a=new XWikiEclipseObjectCollection(dataManager);
        a.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseAttachment attach : attachments) {
          list.add(attach);
        }
        a.setObjects(list);
        result.add(a);
      }
      if (tags != null && tags.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseTag tag : tags) {
          list.add(tag);
        }
        t.setObjects(list);
        result.add(t);
      }
      if (comments != null && comments.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseComment comment : comments) {
          list.add(comment);
        }
        t.setObjects(list);
        result.add(t);
      }
      if (objects != null && objects.size() > 0) {
        XWikiEclipseObjectCollection t=new XWikiEclipseObjectCollection(dataManager);
        t.setClassName(""String_Node_Str"");
        list=new ArrayList<ModelObject>();
        for (        XWikiEclipseObjectSummary objectSummary : objects) {
          if (objectSummary.getClassName().equals(""String_Node_Str"")) {
            list.add(objectSummary);
          }
        }
        if (list.size() > 0) {
          t.setObjects(list);
          result.add(t);
        }
      }
      return result.toArray();
    }
 catch (    XWikiEclipseStorageException e) {
      UIUtils.showMessageDialog(Display.getDefault().getActiveShell(),SWT.ICON_ERROR,""String_Node_Str"",""String_Node_Str"");
      pageSummary.getDataManager().disconnect();
      CoreLog.logError(""String_Node_Str"",e);
      return NO_CHILDREN;
    }
  }
  return super.getChildren(object);
}",0.9869759143621766
178910,"@Override public boolean close(){
  boolean warn=false;
  for (  Object o : selectedObjects) {
    if ((o instanceof DataManager) || (o instanceof XWikiEclipseSpaceSummary)) {
      warn=true;
      break;
    }
  }
  if (warn) {
    MessageBox messageBox=new MessageBox(getShell(),SWT.YES | SWT.NO | SWT.ICON_QUESTION);
    messageBox.setMessage(String.format(""String_Node_Str""));
    int result=messageBox.open();
    if (result == SWT.YES) {
      return super.close();
    }
 else {
      return false;
    }
  }
  return super.close();
}","@Override public boolean close(){
  if (getReturnCode() == Window.CANCEL) {
    return super.close();
  }
  boolean warn=false;
  for (  Object o : selectedObjects) {
    if ((o instanceof DataManager) || (o instanceof XWikiEclipseSpaceSummary)) {
      warn=true;
      break;
    }
  }
  if (warn) {
    MessageBox messageBox=new MessageBox(getShell(),SWT.YES | SWT.NO | SWT.ICON_QUESTION);
    messageBox.setMessage(""String_Node_Str"");
    int result=messageBox.open();
    if (result == SWT.YES) {
      return super.close();
    }
 else {
      return false;
    }
  }
  return super.close();
}",0.9237510955302366
178911,"private void clearPageStatus(String pageId) throws XWikiEclipseException {
  conflictingPagesDataStorage.removePage(pageId);
  pageToStatusMap.remove(pageId);
}","public void clearPageStatus(String pageId) throws XWikiEclipseException {
  conflictingPagesDataStorage.removePage(pageId);
  pageToStatusMap.remove(pageId);
}",0.9717868338557992
178912,"public void removePage(String pageId) throws XWikiEclipseException {
  XWikiPage page=null;
  if (isConnected()) {
    page=remoteXWikiDataStorage.getPage(pageId);
    remoteXWikiDataStorage.removePage(pageId);
  }
 else {
    page=localXWikiDataStorage.getPage(pageId);
  }
  localXWikiDataStorage.removePage(pageId);
  NotificationManager.getDefault().fireCoreEvent(CoreEvent.Type.PAGE_REMOVED,this,new XWikiEclipsePage(this,page));
}","public void removePage(String pageId) throws XWikiEclipseException {
  XWikiPage page=null;
  if (isConnected()) {
    page=remoteXWikiDataStorage.getPage(pageId);
    remoteXWikiDataStorage.removePage(pageId);
  }
 else {
    page=localXWikiDataStorage.getPage(pageId);
  }
  localXWikiDataStorage.removePage(pageId);
  String spaceKey=page.getSpace();
  List<XWikiEclipsePageSummary> pages=null;
  try {
    pages=getPages(spaceKey);
  }
 catch (  XWikiEclipseException e) {
    CoreLog.logError(""String_Node_Str"" + e.getMessage());
  }
  if (pages != null && pages.size() == 0) {
    localXWikiDataStorage.removeSpace(spaceKey);
  }
  NotificationManager.getDefault().fireCoreEvent(CoreEvent.Type.PAGE_REMOVED,this,new XWikiEclipsePage(this,page));
}",0.7333894028595458
178913,"public void removeObject(String pageId,String className,int objectId) throws XWikiEclipseException {
  XWikiPage page=null;
  if (isConnected()) {
    page=remoteXWikiDataStorage.getPage(pageId);
    remoteXWikiDataStorage.removeObject(pageId,className,objectId);
  }
 else {
    page=localXWikiDataStorage.getPage(pageId);
  }
  localXWikiDataStorage.removeObject(pageId,className,objectId);
  NotificationManager.getDefault().fireCoreEvent(CoreEvent.Type.OBJECT_REMOVED,this,new XWikiEclipsePage(this,page));
}","public void removeObject(String pageId,String className,int objectId) throws XWikiEclipseException {
  XWikiObject object=null;
  if (isConnected()) {
    object=remoteXWikiDataStorage.getObject(pageId,className,objectId);
    remoteXWikiDataStorage.removeObject(pageId,className,objectId);
  }
 else {
    object=localXWikiDataStorage.getObject(pageId,className,objectId);
  }
  localXWikiDataStorage.removeObject(pageId,className,objectId);
  NotificationManager.getDefault().fireCoreEvent(CoreEvent.Type.OBJECT_REMOVED,this,new XWikiEclipseObject(this,object,getClass(object.getClassName()).getData(),getPageSummary(object.getPageId()).getData()));
}",0.8017167381974248
178914,"public static DataManagerRegistry getDefault(){
  if (sharedInstance == null) {
    sharedInstance=new DataManagerRegistry();
    Job job=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        IProject[] projects=ResourcesPlugin.getWorkspace().getRoot().getProjects();
        for (        IProject project : projects) {
          if (project.isOpen()) {
            try {
              if (hasXWikiEclipseNature(project)) {
                sharedInstance.register(new DataManager(project));
              }
            }
 catch (            CoreException e) {
              CoreLog.logError(String.format(""String_Node_Str"",project.getName()),e);
            }
          }
        }
        return Status.OK_STATUS;
      }
    }
;
    job.schedule();
    ResourcesPlugin.getWorkspace().addResourceChangeListener(sharedInstance,IResourceChangeEvent.POST_BUILD);
  }
  return sharedInstance;
}","public synchronized static DataManagerRegistry getDefault(){
  if (sharedInstance == null) {
    sharedInstance=new DataManagerRegistry();
    Job job=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        IProject[] projects=ResourcesPlugin.getWorkspace().getRoot().getProjects();
        for (        IProject project : projects) {
          if (project.isOpen()) {
            try {
              if (hasXWikiEclipseNature(project)) {
                sharedInstance.register(new DataManager(project));
              }
            }
 catch (            CoreException e) {
              CoreLog.logError(String.format(""String_Node_Str"",project.getName()),e);
            }
          }
        }
        return Status.OK_STATUS;
      }
    }
;
    job.schedule();
    ResourcesPlugin.getWorkspace().addResourceChangeListener(sharedInstance,IResourceChangeEvent.POST_BUILD);
  }
  return sharedInstance;
}",0.9931614939505524
178915,"/** 
 * Notify an event to all the listeners interested to that event.
 * @param type The event type.
 * @param source The object that generated the event.
 * @param data Additional data associated to the event.
 */
public void fireCoreEvent(CoreEvent.Type type,Object source,Object data){
  CoreEvent coreEvent=new CoreEvent(type,source,data);
  Object[] objects=listenerList.getListeners();
  for (  Object object : objects) {
    ListenerEntry listenerEntry=(ListenerEntry)object;
    if (listenerEntry.getEventTypes().contains(type)) {
      listenerEntry.getListener().handleCoreEvent(coreEvent);
    }
  }
}","/** 
 * Notify an event to all the listeners interested to that event.
 * @param type The event type.
 * @param source The object that generated the event.
 * @param data Additional data associated to the event.
 */
public synchronized void fireCoreEvent(CoreEvent.Type type,Object source,Object data){
  CoreEvent coreEvent=new CoreEvent(type,source,data);
  Object[] objects=listenerList.getListeners();
  for (  Object object : objects) {
    ListenerEntry listenerEntry=(ListenerEntry)object;
    if (listenerEntry.getEventTypes().contains(type)) {
      listenerEntry.getListener().handleCoreEvent(coreEvent);
    }
  }
}",0.9895076674737692
178916,"/** 
 * @return The shared instance.
 */
public static NotificationManager getDefault(){
  if (sharedInstance == null) {
    sharedInstance=new NotificationManager();
  }
  return sharedInstance;
}","/** 
 * @return The shared instance.
 */
public synchronized static NotificationManager getDefault(){
  if (sharedInstance == null) {
    sharedInstance=new NotificationManager();
  }
  return sharedInstance;
}",0.968058968058968
178917,"public boolean removePage(final String pageId) throws XWikiEclipseException {
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          XWikiPage page=getPage(pageId);
          if (page == null) {
            return;
          }
          IFolder indexPageFolder=baseFolder.getFolder(INDEX_DIRECTORY).getFolder(page.getSpace()).getFolder(pageId);
          if (indexPageFolder.exists()) {
            indexPageFolder.delete(true,null);
          }
          IFolder pageFolder=CoreUtils.createFolder(baseFolder.getFolder(PAGES_DIRECTORY));
          IFile pageFile=pageFolder.getFile(getFileNameForPage(pageId));
          if (pageFile.exists()) {
            pageFile.delete(true,null);
          }
        }
 catch (        XWikiEclipseException e) {
          throw new CoreException(new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"",e));
        }
      }
    }
,null);
    return true;
  }
 catch (  CoreException e) {
    throw new XWikiEclipseException(e);
  }
}","public boolean removePage(final String pageId) throws XWikiEclipseException {
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          XWikiPage page=getPage(pageId);
          if (page == null) {
            return;
          }
          List<XWikiObjectSummary> objects=getObjects(pageId);
          for (          XWikiObjectSummary object : objects) {
            removeObject(pageId,object.getClassName(),object.getId());
          }
          IFolder indexPageFolder=baseFolder.getFolder(INDEX_DIRECTORY).getFolder(page.getSpace()).getFolder(pageId);
          if (indexPageFolder.exists()) {
            indexPageFolder.delete(true,null);
          }
          IFolder pageFolder=CoreUtils.createFolder(baseFolder.getFolder(PAGES_DIRECTORY));
          IFile pageFile=pageFolder.getFile(getFileNameForPage(pageId));
          if (pageFile.exists()) {
            pageFile.delete(true,null);
          }
        }
 catch (        XWikiEclipseException e) {
          throw new CoreException(new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"",e));
        }
      }
    }
,null);
    return true;
  }
 catch (  CoreException e) {
    throw new XWikiEclipseException(e);
  }
}",0.9127906976744186
178918,"public synchronized boolean exists(String pageId,String className,int objectId){
  return true;
}","public synchronized boolean exists(String pageId,String className,int objectId){
  try {
    XWikiObject object=getObject(pageId,className,objectId);
  }
 catch (  XWikiEclipseException e) {
    return false;
  }
  return true;
}",0.5276073619631901
178919,"@Override protected void createActions(){
  super.createActions();
  ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"");
  setAction(""String_Node_Str"",new TextOperationAction(bundle,""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS));
}","@Override protected void createActions(){
  super.createActions();
  ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"");
  Action action=new TextOperationAction(bundle,""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS);
  String id=ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS;
  action.setActionDefinitionId(id);
  setAction(""String_Node_Str"",action);
  markAsStateDependentAction(""String_Node_Str"",true);
}",0.6619519094766619
178920,"public void setSelectionRange(int start,int length){
  getSourceViewer().getTextWidget().setSelectionRange(start,length);
}","public void setSelectionRange(int start,int length){
  getSourceViewer().getTextWidget().setSelectionRange(start,length);
  getSourceViewer().getTextWidget().showSelection();
}",0.822742474916388
178921,"public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
  IDocument document=viewer.getDocument();
  String macroPrefix=Utils.getPrefix(document,offset,'#',""String_Node_Str"");
  if (macroPrefix != null) {
    for (    String directive : getMacros(document,offset)) {
      if (directive.startsWith(macroPrefix)) {
        int cursorPos;
        if (directive.equals(VelocityDirectiveType.ELSE) || directive.equals(VelocityDirectiveType.END) || directive.equals(VelocityDirectiveType.STOP)) {
          cursorPos=directive.length() - 1;
        }
 else {
          directive+=""String_Node_Str"";
          cursorPos=directive.length() - 2;
        }
        result.add(new CompletionProposal(directive,offset - macroPrefix.length(),macroPrefix.length(),cursorPos,null,""String_Node_Str"" + directive,null,null));
      }
    }
    Collections.sort(result,new Comparator<ICompletionProposal>(){
      public int compare(      ICompletionProposal proposal1,      ICompletionProposal proposal2){
        return proposal1.getDisplayString().compareTo(proposal2.getDisplayString());
      }
      public boolean equals(      Object proposal){
        return false;
      }
    }
);
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  if (result.size() > 0) {
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  return null;
}","public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
  IDocument document=viewer.getDocument();
  String macroPrefix=Utils.getPrefix(document,offset,""String_Node_Str"",""String_Node_Str"");
  if (macroPrefix != null) {
    for (    String directive : getMacros(document,offset)) {
      if (directive.startsWith(macroPrefix)) {
        int cursorPos;
        if (directive.equals(VelocityDirectiveType.ELSE) || directive.equals(VelocityDirectiveType.END) || directive.equals(VelocityDirectiveType.STOP)) {
          cursorPos=directive.length() - 1;
        }
 else {
          directive+=""String_Node_Str"";
          cursorPos=directive.length() - 2;
        }
        result.add(new CompletionProposal(directive,offset - macroPrefix.length(),macroPrefix.length(),cursorPos,null,""String_Node_Str"" + directive,null,null));
      }
    }
    Collections.sort(result,new Comparator<ICompletionProposal>(){
      public int compare(      ICompletionProposal proposal1,      ICompletionProposal proposal2){
        return proposal1.getDisplayString().compareTo(proposal2.getDisplayString());
      }
      public boolean equals(      Object proposal){
        return false;
      }
    }
);
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  if (result.size() > 0) {
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  return null;
}",0.9931972789115646
178922,"public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  IDocument document=viewer.getDocument();
  String variablePrefix=Utils.getPrefix(document,offset,'$',""String_Node_Str"");
  if (variablePrefix != null) {
    if (!variablePrefix.contains(""String_Node_Str"")) {
      List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
      for (      String variable : getVariables(document,offset)) {
        if (variable.startsWith(variablePrefix)) {
          result.add(new CompletionProposal(variable,offset - variablePrefix.length(),variablePrefix.length(),variable.length(),null,""String_Node_Str"" + variable,null,null));
        }
      }
      Collections.sort(result,new Comparator<ICompletionProposal>(){
        public int compare(        ICompletionProposal proposal1,        ICompletionProposal proposal2){
          return proposal1.getDisplayString().compareTo(proposal2.getDisplayString());
        }
        public boolean equals(        Object proposal){
          return false;
        }
      }
);
      return result.toArray(new ICompletionProposal[result.size()]);
    }
 else {
      int index=variablePrefix.indexOf('.');
      XWikiApiType xwikiApiType=XWikiApiType.valueOf(variablePrefix.substring(0,index).toUpperCase());
      XWikiApiCompletionProcessor xwikiAPIProcessor=new XWikiApiCompletionProcessor(xwikiApiType);
      return xwikiAPIProcessor.computeCompletionProposals(viewer,offset);
    }
  }
  return null;
}","public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  IDocument document=viewer.getDocument();
  String variablePrefix=Utils.getPrefix(document,offset,""String_Node_Str"",""String_Node_Str"");
  if (variablePrefix != null) {
    if (!variablePrefix.contains(""String_Node_Str"")) {
      List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
      for (      String variable : getVariables(document,offset)) {
        if (variable.startsWith(variablePrefix)) {
          result.add(new CompletionProposal(variable,offset - variablePrefix.length(),variablePrefix.length(),variable.length(),null,""String_Node_Str"" + variable,null,null));
        }
      }
      Collections.sort(result,new Comparator<ICompletionProposal>(){
        public int compare(        ICompletionProposal proposal1,        ICompletionProposal proposal2){
          return proposal1.getDisplayString().compareTo(proposal2.getDisplayString());
        }
        public boolean equals(        Object proposal){
          return false;
        }
      }
);
      return result.toArray(new ICompletionProposal[result.size()]);
    }
 else {
      int index=variablePrefix.indexOf('.');
      XWikiApiType xwikiApiType=XWikiApiType.valueOf(variablePrefix.substring(0,index).toUpperCase());
      XWikiApiCompletionProcessor xwikiAPIProcessor=new XWikiApiCompletionProcessor(xwikiApiType);
      return xwikiAPIProcessor.computeCompletionProposals(viewer,offset);
    }
  }
  return null;
}",0.9926470588235294
178923,"public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
  IDocument document=viewer.getDocument();
  String linkPrefix=Utils.getPrefix(document,offset,'[',""String_Node_Str"");
  if (linkPrefix != null) {
    List<XWikiEclipsePageSummary> pageSummaries=UIPlugin.getDefault().getAllPageSummariesForDataManager(dataManager);
    for (    XWikiEclipsePageSummary pageSummary : pageSummaries) {
      String pageId=pageSummary.getData().getId();
      if (pageId.startsWith(linkPrefix)) {
        result.add(new CompletionProposal(pageId,offset - linkPrefix.length(),linkPrefix.length(),pageId.length(),null,pageId,null,null));
      }
    }
  }
  if (result.size() > 0) {
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  return null;
}","public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
  IDocument document=viewer.getDocument();
  String linkPrefix=Utils.getPrefix(document,offset,""String_Node_Str"",""String_Node_Str"");
  if (linkPrefix != null) {
    List<XWikiEclipsePageSummary> pageSummaries=UIPlugin.getDefault().getAllPageSummariesForDataManager(dataManager);
    for (    XWikiEclipsePageSummary pageSummary : pageSummaries) {
      String pageId=pageSummary.getData().getId();
      if (pageId.startsWith(linkPrefix)) {
        result.add(new CompletionProposal(pageId,offset - linkPrefix.length(),linkPrefix.length(),pageId.length(),null,pageId,null,null));
      }
    }
  }
  if (result.size() > 0) {
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  return null;
}",0.9884526558891455
178924,"public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
  IDocument document=viewer.getDocument();
  String linkPrefix=Utils.getPrefix(document,offset,'[',""String_Node_Str"");
  String variablePrefix=Utils.getPrefix(document,offset,'$',""String_Node_Str"");
  String macroPrefix=Utils.getPrefix(document,offset,'#',""String_Node_Str"");
  if (linkPrefix == null && variablePrefix == null && macroPrefix == null) {
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,1,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
  }
  if (result.size() > 0) {
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  return null;
}","public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> result=new ArrayList<ICompletionProposal>();
  IDocument document=viewer.getDocument();
  String linkPrefix=Utils.getPrefix(document,offset,""String_Node_Str"",""String_Node_Str"");
  String variablePrefix=Utils.getPrefix(document,offset,""String_Node_Str"",""String_Node_Str"");
  String macroPrefix=Utils.getPrefix(document,offset,""String_Node_Str"",""String_Node_Str"");
  if (linkPrefix == null && variablePrefix == null && macroPrefix == null) {
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,1,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
    result.add(new CompletionProposal(""String_Node_Str"",offset,0,2,null,""String_Node_Str"",null,null));
  }
  if (result.size() > 0) {
    return result.toArray(new ICompletionProposal[result.size()]);
  }
  return null;
}",0.9781659388646288
178925,"/** 
 * Get a prefix from the current offset to a given character (not included). Examples (_ is the current offset): <code> [test_ : getPrefix(..., _, 0, '[', ""]"") = 'test' [test]..._ : getPrefix(..., _, 0, '[', ""]"") = null _ is the current offset </code>
 * @param document
 * @param offset The starting offset 
 * @param startCharacter The start character that marks the beginning of the scanning region.
 * @param blockingCharacters A string containing all the blocking characters that will make the scanning fail.
 * @return The found prefix or null if a blocking character is encountered or if the starCharacter is not found.
 */
public static String getPrefix(IDocument document,int offset,char startCharacter,String blockingCharacters){
  String result=null;
  if (offset == 0) {
    return null;
  }
  try {
    int currentOffset=offset - 1;
    while (currentOffset >= 0) {
      if (blockingCharacters.indexOf(document.getChar(currentOffset)) != -1) {
        result=null;
        break;
      }
      if (document.getChar(currentOffset) == startCharacter) {
        result=document.get(currentOffset + 1,offset - currentOffset - 1);
        break;
      }
      currentOffset--;
    }
  }
 catch (  BadLocationException e) {
    e.printStackTrace();
  }
  return result;
}","/** 
 * Get a prefix from the current offset to a given character (not included). Examples (_ is the current offset): <code> [test_ : getPrefix(..., _, 0, '[', ""]"") = 'test' [test]..._ : getPrefix(..., _, 0, '[', ""]"") = null _ is the current offset </code>
 * @param document
 * @param offset The starting offset 
 * @param startCharacter The start character that marks the beginning of the scanning region.
 * @param blockingCharacters A string containing all the blocking characters that will make the scanning fail.
 * @return The found prefix or null if a blocking character is encountered or if the starCharacter is not found.
 */
public static String getPrefix(IDocument document,int offset,String startCharacters,String blockingCharacters){
  String result=null;
  if (offset == 0) {
    return null;
  }
  try {
    int currentOffset=offset - 1;
    while (currentOffset >= 0) {
      if (blockingCharacters.indexOf(document.getChar(currentOffset)) != -1) {
        result=null;
        break;
      }
      if (startCharacters.indexOf(document.getChar(currentOffset)) != -1) {
        result=document.get(currentOffset + 1,offset - currentOffset - 1);
        break;
      }
      currentOffset--;
    }
  }
 catch (  BadLocationException e) {
    e.printStackTrace();
  }
  return result;
}",0.9775541795665634
178926,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    XWikiEclipsePageIndex pageIndex=XWikiEclipsePageIndex.getDefault();
    monitor.beginTask(String.format(""String_Node_Str""),IProgressMonitor.UNKNOWN);
    if (monitor.isCanceled() || !connection.isConnected()) {
      return Status.CANCEL_STATUS;
    }
    IXWikiConnection workingConnection=XWikiConnectionFactory.createPlainConnection(connection.getServerUrl(),connection.getUserName());
    workingConnection.connect(XWikiConnectionManager.getDefault().getPasswordForConnection(connection));
    if (monitor.isCanceled() || !connection.isConnected()) {
      return Status.CANCEL_STATUS;
    }
    Collection<IXWikiSpace> spaces=workingConnection.getSpaces();
    for (    IXWikiSpace space : spaces) {
      if (monitor.isCanceled() || !connection.isConnected()) {
        return Status.CANCEL_STATUS;
      }
      Collection<IXWikiPage> pages=space.getPages();
      for (      IXWikiPage page : pages) {
        pageIndex.addPage(page);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return new Status(IStatus.ERROR,XWikiEclipsePlugin.PLUGIN_ID,String.format(""String_Node_Str"",e.getMessage()));
  }
 finally {
    monitor.done();
    if (reschedule) {
      schedule(1200000);
    }
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    XWikiEclipsePageIndex pageIndex=XWikiEclipsePageIndex.getDefault();
    monitor.beginTask(String.format(""String_Node_Str""),IProgressMonitor.UNKNOWN);
    if (monitor.isCanceled() || !connection.isConnected()) {
      return Status.CANCEL_STATUS;
    }
    IXWikiConnection workingConnection=XWikiConnectionFactory.createPlainConnection(connection.getServerUrl(),connection.getUserName());
    workingConnection.connect(XWikiConnectionManager.getDefault().getPasswordForConnection(connection));
    if (monitor.isCanceled() || !connection.isConnected()) {
      return Status.CANCEL_STATUS;
    }
    Collection<IXWikiSpace> spaces=workingConnection.getSpaces();
    for (    IXWikiSpace space : spaces) {
      if (monitor.isCanceled() || !connection.isConnected()) {
        return Status.CANCEL_STATUS;
      }
      Collection<IXWikiPage> pages=space.getPages();
      for (      IXWikiPage page : pages) {
        pageIndex.addPage(page);
      }
    }
    workingConnection.disconnect();
    workingConnection.dispose();
    workingConnection=null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return new Status(IStatus.ERROR,XWikiEclipsePlugin.PLUGIN_ID,String.format(""String_Node_Str"",e.getMessage()));
  }
 finally {
    monitor.done();
    if (reschedule) {
      schedule(1200000);
    }
  }
  return Status.OK_STATUS;
}",0.964481874771146
178927,"@Override protected void fillContentProvider(AbstractContentProvider contentProvider,ItemsFilter itemsFilter,IProgressMonitor progressMonitor) throws CoreException {
  progressMonitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
  for (  IXWikiPage page : XWikiEclipsePageIndex.getDefault().getPages()) {
    if (page.isCached() || page.getConnection().isConnected()) {
      contentProvider.add(page,itemsFilter);
    }
  }
  progressMonitor.done();
}","@Override protected void fillContentProvider(AbstractContentProvider contentProvider,ItemsFilter itemsFilter,IProgressMonitor progressMonitor) throws CoreException {
  progressMonitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
  for (  IXWikiPage page : XWikiEclipsePageIndex.getDefault().getPages()) {
    List<IXWikiConnection> actualConnections=XWikiConnectionManager.getDefault().getConnections();
    IXWikiConnection actualConnection=null;
    for (    IXWikiConnection connection : actualConnections) {
      if (connection.equals(page.getConnection())) {
        actualConnection=connection;
        break;
      }
    }
    if (actualConnection != null) {
      if (page.isCached() || actualConnection.isConnected()) {
        contentProvider.add(page,itemsFilter);
      }
    }
  }
  progressMonitor.done();
}",0.6831530139103554
178928,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    XWikiEclipsePageIndex pageIndex=XWikiEclipsePageIndex.getDefault();
    monitor.beginTask(String.format(""String_Node_Str""),IProgressMonitor.UNKNOWN);
    if (monitor.isCanceled()) {
      return Status.CANCEL_STATUS;
    }
    Collection<IXWikiSpace> spaces=connection.getSpaces();
    for (    IXWikiSpace space : spaces) {
      if (monitor.isCanceled()) {
        return Status.CANCEL_STATUS;
      }
      Collection<IXWikiPage> pages=space.getPages();
      for (      IXWikiPage page : pages) {
        pageIndex.addPage(page);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return new Status(IStatus.ERROR,XWikiEclipsePlugin.PLUGIN_ID,String.format(""String_Node_Str"",e.getMessage()));
  }
 finally {
    monitor.done();
    if (reschedule) {
      schedule(1200000);
    }
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    XWikiEclipsePageIndex pageIndex=XWikiEclipsePageIndex.getDefault();
    monitor.beginTask(String.format(""String_Node_Str""),IProgressMonitor.UNKNOWN);
    if (monitor.isCanceled() || !connection.isConnected()) {
      return Status.CANCEL_STATUS;
    }
    IXWikiConnection workingConnection=XWikiConnectionFactory.createPlainConnection(connection.getServerUrl(),connection.getUserName());
    workingConnection.connect(XWikiConnectionManager.getDefault().getPasswordForConnection(connection));
    if (monitor.isCanceled() || !connection.isConnected()) {
      return Status.CANCEL_STATUS;
    }
    Collection<IXWikiSpace> spaces=workingConnection.getSpaces();
    for (    IXWikiSpace space : spaces) {
      if (monitor.isCanceled() || !connection.isConnected()) {
        return Status.CANCEL_STATUS;
      }
      Collection<IXWikiPage> pages=space.getPages();
      for (      IXWikiPage page : pages) {
        pageIndex.addPage(page);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return new Status(IStatus.ERROR,XWikiEclipsePlugin.PLUGIN_ID,String.format(""String_Node_Str"",e.getMessage()));
  }
 finally {
    monitor.done();
    if (reschedule) {
      schedule(1200000);
    }
  }
  return Status.OK_STATUS;
}",0.7604494382022472
178929,"/** 
 * {@inheritDoc}
 * @throws XWikiConnectionException
 */
public void disconnect() throws XWikiConnectionException {
  assertNotDisposed();
  if (!isConnected()) {
    return;
  }
  try {
    remoteDAO.close();
    remoteDAO=null;
  }
 catch (  XWikiDAOException e) {
    e.printStackTrace();
  }
  XWikiEclipseNotificationCenter.getDefault().fireEvent(this,XWikiEclipseEvent.CONNECTION_CLOSED,this);
}","/** 
 * {@inheritDoc}
 * @throws XWikiConnectionException
 */
public void disconnect() throws XWikiConnectionException {
  assertNotDisposed();
  if (!isConnected()) {
    return;
  }
  try {
    remoteDAO.close();
    remoteDAO=null;
  }
 catch (  XWikiDAOException e) {
    e.printStackTrace();
  }
}",0.8502824858757062
178930,"/** 
 * {@inheritDoc}
 */
public void connect(String password) throws XWikiConnectionException {
  assertNotDisposed();
  if (isConnected()) {
    return;
  }
  try {
    remoteDAO=new XWikiRemoteDAO(getServerUrl(),getUserName(),password);
  }
 catch (  XWikiDAOException e) {
    if (remoteDAO != null) {
      try {
        remoteDAO.close();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
    remoteDAO=null;
    throw new XWikiConnectionException(e);
  }
  XWikiEclipseNotificationCenter.getDefault().fireEvent(this,XWikiEclipseEvent.CONNECTION_ESTABLISHED,this);
}","/** 
 * {@inheritDoc}
 */
public void connect(String password) throws XWikiConnectionException {
  assertNotDisposed();
  if (isConnected()) {
    return;
  }
  try {
    remoteDAO=new XWikiRemoteDAO(getServerUrl(),getUserName(),password);
  }
 catch (  XWikiDAOException e) {
    if (remoteDAO != null) {
      try {
        remoteDAO.close();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
    remoteDAO=null;
    throw new XWikiConnectionException(e);
  }
}",0.8989990900818926
178931,"/** 
 * Stores a page in the cache.
 * @param page The page information to be stored.
 * @throws XWikiDAOException
 */
public void storePage(Page page) throws XWikiDAOException {
  try {
    String dataFileName=String.format(""String_Node_Str"",page.getId());
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(cacheDir,dataFileName)));
    oos.writeObject(page.toMap());
    oos.close();
    indexAggregate.getPageToDataFileNameIndex().put(page.getId(),dataFileName);
    Set<String> pagesInSpace=indexAggregate.getSpaceToPagesIndex().get(page.getSpace());
    if (pagesInSpace == null) {
      pagesInSpace=new HashSet<String>();
      indexAggregate.getSpaceToPagesIndex().put(page.getSpace(),pagesInSpace);
    }
    pagesInSpace.add(page.getId());
  }
 catch (  Exception e) {
    throw new XWikiDAOException(e);
  }
}","/** 
 * Stores a page in the cache.
 * @param page The page information to be stored.
 * @throws XWikiDAOException
 */
public void storePage(Page page) throws XWikiDAOException {
  try {
    String dataFileName=String.format(""String_Node_Str"",page.getId());
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(cacheDir,dataFileName)));
    oos.writeObject(page.toMap());
    oos.close();
    indexAggregate.getPageToDataFileNameIndex().put(page.getId(),dataFileName);
    indexAggregate.getPageToSpaceIndex().put(page.getId(),page.getSpace());
    Set<String> pagesInSpace=indexAggregate.getSpaceToPagesIndex().get(page.getSpace());
    if (pagesInSpace == null) {
      pagesInSpace=new HashSet<String>();
      indexAggregate.getSpaceToPagesIndex().put(page.getSpace(),pagesInSpace);
    }
    pagesInSpace.add(page.getId());
  }
 catch (  Exception e) {
    throw new XWikiDAOException(e);
  }
}",0.9572072072072072
178932,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  ISelection selection=HandlerUtil.getCurrentSelection(event);
  Object selectedObject=XWikiEclipseUtil.getSingleSelectedObjectInStructuredSelection(selection);
  if (selectedObject instanceof IXWikiConnection) {
    final IXWikiConnection xwikiConnection=(IXWikiConnection)selectedObject;
    try {
      String password=XWikiConnectionManager.getDefault().getPasswordForConnection(xwikiConnection.getId());
      if (password == null) {
        InputDialog inputDialog=new InputDialog(HandlerUtil.getActiveShell(event),""String_Node_Str"",String.format(""String_Node_Str"",xwikiConnection.getUserName(),xwikiConnection.getServerUrl()),null,null);
        inputDialog.open();
        password=inputDialog.getValue();
      }
      final String actualPassword=password;
      XWikiEclipseUtil.runOperationWithProgress(new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
          try {
            xwikiConnection.connect(actualPassword);
          }
 catch (          XWikiConnectionException e) {
            e.printStackTrace();
            throw new InvocationTargetException(e,String.format(""String_Node_Str"",xwikiConnection.getServerUrl(),e.getMessage()));
          }
          monitor.done();
        }
      }
,HandlerUtil.getActiveShell(event));
    }
 catch (    InvocationTargetException e) {
      e.printStackTrace();
      MessageDialog.openError(HandlerUtil.getActiveShell(event),""String_Node_Str"",e.getMessage());
    }
catch (    InterruptedException e) {
      e.printStackTrace();
    }
    HandlerUtil.getActiveSite(event).getSelectionProvider().setSelection(selection);
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  ISelection selection=HandlerUtil.getCurrentSelection(event);
  Object selectedObject=XWikiEclipseUtil.getSingleSelectedObjectInStructuredSelection(selection);
  if (selectedObject instanceof IXWikiConnection) {
    final IXWikiConnection xwikiConnection=(IXWikiConnection)selectedObject;
    try {
      String password=XWikiConnectionManager.getDefault().getPasswordForConnection(xwikiConnection.getId());
      if (password == null) {
        InputDialog inputDialog=new InputDialog(HandlerUtil.getActiveShell(event),""String_Node_Str"",String.format(""String_Node_Str"",xwikiConnection.getUserName(),xwikiConnection.getServerUrl()),null,null);
        inputDialog.open();
        password=inputDialog.getValue();
      }
      final String actualPassword=password;
      XWikiEclipseUtil.runOperationWithProgress(new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
          try {
            xwikiConnection.connect(actualPassword);
          }
 catch (          XWikiConnectionException e) {
            e.printStackTrace();
            throw new InvocationTargetException(e,String.format(""String_Node_Str"",xwikiConnection.getServerUrl(),e.getMessage()));
          }
          monitor.done();
        }
      }
,HandlerUtil.getActiveShell(event));
      XWikiEclipseUtil.closeReopenEditorsForConnection(HandlerUtil.getActiveWorkbenchWindow(event).getActivePage(),xwikiConnection);
    }
 catch (    InvocationTargetException e) {
      e.printStackTrace();
      MessageDialog.openError(HandlerUtil.getActiveShell(event),""String_Node_Str"",e.getMessage());
    }
catch (    InterruptedException e) {
      e.printStackTrace();
    }
    HandlerUtil.getActiveSite(event).getSelectionProvider().setSelection(selection);
  }
  return null;
}",0.965391621129326
178933,"/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
 */
public void stop(BundleContext context) throws Exception {
  for (  IXWikiConnection con : XWikiConnectionManager.getInstance().getAllConnections()) {
    try {
      con.disconnect();
    }
 catch (    Exception e) {
    }
  }
  File connections=new File(getStateLocation().toFile(),""String_Node_Str"");
  org.xwiki.xeclipse.XWikiConnectionManager.getDefault().saveConnections(connections);
  plugin=null;
  super.stop(context);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
 */
public void stop(BundleContext context) throws Exception {
  for (  IXWikiConnection con : XWikiConnectionManager.getInstance().getAllConnections()) {
    try {
      con.disconnect();
    }
 catch (    Exception e) {
    }
  }
  File connections=new File(getStateLocation().toFile(),""String_Node_Str"");
  org.xwiki.xeclipse.XWikiConnectionManager.getDefault().saveConnections(connections);
  org.xwiki.xeclipse.XWikiConnectionManager.getDefault().dispose();
  plugin=null;
  super.stop(context);
}",0.9409722222222222
178934,"/** 
 * Dispose the connection manager by releasing all the resources associated with it. This method should be called whenever the connection manager is not used anymore.
 * @throws XWikiConnectionException 
 */
public void dispose() throws XWikiConnectionException ;","/** 
 * Dispose the connection manager by releasing all the resources associated with it. This method should be called whenever the connection is not used anymore.
 * @throws XWikiConnectionException 
 */
public void dispose() throws XWikiConnectionException ;",0.9848484848484848
178935,"/** 
 * @param spaceKey The space key.
 * @return The page summaries for all the pages available in the given space. 
 * @throws XWikiDAOException
 */
public List<PageSummary> getPages(String spaceKey) throws XWikiDAOException {
  List<PageSummary> result=new ArrayList<PageSummary>();
  try {
    for (    String pageId : indexAggregate.getSpaceToPagesIndex().get(spaceKey)) {
      String dataFileName=indexAggregate.pageToDataFileNameIndex.get(pageId);
      ObjectInputStream ois=new ObjectInputStream(new FileInputStream(new File(cacheDir,dataFileName)));
      Map map=(Map)ois.readObject();
      ois.close();
      result.add(new PageSummary(map));
    }
  }
 catch (  Exception e) {
    throw new XWikiDAOException(e);
  }
  return result;
}","/** 
 * @param spaceKey The space key.
 * @return The page summaries for all the pages available in the given space.
 * @throws XWikiDAOException
 */
public List<PageSummary> getPages(String spaceKey) throws XWikiDAOException {
  List<PageSummary> result=new ArrayList<PageSummary>();
  try {
    Set<String> pageIds=indexAggregate.getSpaceToPagesIndex().get(spaceKey);
    if (pageIds != null) {
      for (      String pageId : pageIds) {
        String dataFileName=indexAggregate.pageToDataFileNameIndex.get(pageId);
        ObjectInputStream ois=new ObjectInputStream(new FileInputStream(new File(cacheDir,dataFileName)));
        Map map=(Map)ois.readObject();
        ois.close();
        result.add(new PageSummary(map));
      }
    }
  }
 catch (  Exception e) {
    throw new XWikiDAOException(e);
  }
  return result;
}",0.915876027830487
178936,"/** 
 * Dispose the connection manager by releasing all the resources associated with it. This method should be called whenever the connection is not used anymore.
 * @throws XWikiConnectionException 
 */
public void dispose() throws XWikiConnectionException ;","/** 
 * Dispose the connection manager by releasing all the resources associated with it. This method must be called whenever the connection is not used anymore.
 * @throws XWikiConnectionException 
 */
public void dispose() throws XWikiConnectionException ;",0.9806949806949808
178937,"/** 
 * {@inheritDoc}
 */
public void connect(String password) throws XWikiConnectionException {
  assertNotDisposed();
  if (isConnected()) {
    return;
  }
  try {
    remoteDAO=new XWikiRemoteDAO(getServerUrl(),getUserName(),password);
    synchronizeAll();
  }
 catch (  XWikiDAOException e) {
    if (remoteDAO != null) {
      try {
        remoteDAO.close();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
    remoteDAO=null;
    cacheDAO=null;
    throw new XWikiConnectionException(e);
  }
  fireConnectionEstablished();
}","/** 
 * {@inheritDoc}
 */
public void connect(String password) throws XWikiConnectionException {
  assertNotDisposed();
  if (isConnected()) {
    return;
  }
  try {
    remoteDAO=new XWikiRemoteDAO(getServerUrl(),getUserName(),password);
    synchronizeAll();
  }
 catch (  XWikiDAOException e) {
    if (remoteDAO != null) {
      try {
        remoteDAO.close();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
    remoteDAO=null;
    throw new XWikiConnectionException(e);
  }
  fireConnectionEstablished();
}",0.9829596412556054
178938,"@Override public Resource[] getResources(String locationPattern) throws IOException {
  if (jarCon != null || ClassUtils.isInJar(this.jarClass)) {
    return findPathMatchingJarResources(locationPattern);
  }
 else {
    Resource classRoot=ClassUtils.getClassesRootResource(this.jarClass);
    String directory=determineRootDir(locationPattern);
    String pattern=locationPattern.replaceAll(directory,""String_Node_Str"");
    Resource dirRoot=classRoot.createRelative(directory);
    if (dirRoot.exists()) {
      List<Resource> finder=new ArrayList<Resource>();
      Collection<?> files=FileUtils.listFiles(dirRoot.getFile(),null,true);
      for (      Object object : files) {
        if (!(object instanceof File)) {
          continue;
        }
        File file=(File)object;
        String filename=file.getName();
        if (getPathMatcher().match(pattern,filename)) {
          finder.add(new FileSystemResource(file));
        }
      }
      return finder.toArray(new Resource[finder.size()]);
    }
 else {
      return null;
    }
  }
}","@Override public Resource[] getResources(String locationPattern) throws IOException {
  if (!locationPattern.startsWith(""String_Node_Str"")) {
    locationPattern=""String_Node_Str"" + locationPattern;
  }
  if (jarCon != null || ClassUtils.isInJar(this.jarClass)) {
    return findPathMatchingJarResources(locationPattern);
  }
 else {
    Resource classRoot=ClassUtils.getClassesRootResource(this.jarClass);
    String rootPath=ResourceUtils.getAbsolutePath(classRoot);
    String directory=determineRootDir(locationPattern);
    Resource dirRoot=classRoot.createRelative(directory);
    if (dirRoot.exists()) {
      List<Resource> finder=new ArrayList<Resource>();
      boolean recursive=getPathMatcher().isPattern(locationPattern);
      Collection<?> files=FileUtils.listFiles(dirRoot.getFile(),null,recursive);
      for (      Object object : files) {
        if (!(object instanceof File)) {
          continue;
        }
        File file=(File)object;
        String absolutePath=StringUtils.cleanPath(file.getAbsolutePath());
        String relativePath=absolutePath.substring(rootPath.length());
        if (getPathMatcher().match(locationPattern,relativePath)) {
          finder.add(new FileSystemResource(file));
        }
      }
      return finder.toArray(new Resource[finder.size()]);
    }
 else {
      return null;
    }
  }
}",0.7544810337640684
178939,"public static Resource[] getSubResources(String rootPath,String path,boolean all){
  if (path == null || ""String_Node_Str"".equals(path)) {
    return new Resource[0];
  }
  if (!path.startsWith(""String_Node_Str"")) {
    log.warn(""String_Node_Str"" + path);
    return new Resource[0];
  }
  String jarPath=path;
  String dir=jarPath;
  if (matcher.isPattern(dir)) {
    dir=StringUtils.getPatternRoot(dir);
  }
  if (rootPath == null) {
    List<Resource> jarSubs=getSubResourcesForJar(dir,jarPath);
    return jarSubs.toArray(new Resource[jarSubs.size()]);
  }
  rootPath=StringUtils.cleanPath(rootPath);
  List<Resource> fileSubs=getSubResourcesForFile(rootPath,dir,jarPath);
  if (!all) {
    return fileSubs.toArray(new Resource[fileSubs.size()]);
  }
  fileSubs.addAll(getSubResourcesForJar(dir,jarPath));
  return fileSubs.toArray(new Resource[fileSubs.size()]);
}","/** 
 * 获取指定path路径下的资源信息。如果rootPath为null，直接从jar中相对path中获取。 如果rootPath不为null：如果all为false，直接从rootPath对应的path中获取； 如果all为true，合并返回从jar包中相对path资源信息加上rootPath对应的path资源信息
 * @param rootPath 指定物理文件夹路径
 * @param path 相当资源路径，必须以'/'开始，例如：/images/**, /images/*.jpg
 * @param all 是否合并获取资源
 * @return
 * @author 黄国庆 2012-5-11 下午3:31:00
 */
public static Resource[] getSubResources(String rootPath,String path,boolean all){
  if (path == null || ""String_Node_Str"".equals(path)) {
    return new Resource[0];
  }
  if (!path.startsWith(""String_Node_Str"")) {
    log.warn(""String_Node_Str"" + path);
    return new Resource[0];
  }
  String jarPath=path;
  String dir=jarPath;
  if (matcher.isPattern(dir)) {
    dir=StringUtils.getPatternRoot(dir);
  }
  if (rootPath == null) {
    List<Resource> jarSubs=getSubResourcesForJar(dir,jarPath);
    return jarSubs.toArray(new Resource[jarSubs.size()]);
  }
  rootPath=StringUtils.cleanPath(rootPath);
  if (rootPath.endsWith(""String_Node_Str"")) {
    rootPath=rootPath.substring(0,rootPath.length() - 1);
  }
  List<Resource> fileSubs=getSubResourcesForFile(rootPath,dir,jarPath);
  if (!all) {
    return fileSubs.toArray(new Resource[fileSubs.size()]);
  }
  fileSubs.addAll(getSubResourcesForJar(dir,jarPath));
  return fileSubs.toArray(new Resource[fileSubs.size()]);
}",0.8001841620626151
178940,"/** 
 * 获取指定path路径下的资源信息。如果rootPath为null，直接从jar中相对path中获取。 如果rootPath不为null：如果all为false，直接从rootPath对应的path中获取； 如果all为true，合并返回从jar包中相对path资源信息加上rootPath对应的path资源信息
 * @param rootPath 指定物理文件夹路径
 * @param path 相当资源路径，例如：/images/**, /images/*.jpg
 * @param all 是否合并获取资源
 * @return 不为null的数组集合
 * @author 黄国庆 2012-5-8 下午3:29:00
 */
public static String[] getSubs(String rootPath,String path,boolean all){
  if (path == null || ""String_Node_Str"".equals(path)) {
    return new String[0];
  }
  if (!path.startsWith(""String_Node_Str"")) {
    log.warn(""String_Node_Str"" + path);
    return new String[0];
  }
  String jarPath=path.substring(1);
  String dir=jarPath;
  if (matcher.isPattern(jarPath)) {
    dir=StringUtils.getPatternRoot(jarPath);
  }
  if (rootPath == null) {
    Set<String> jarSubs=getSubsForJar(dir,jarPath);
    return jarSubs.toArray(new String[jarSubs.size()]);
  }
  if (!rootPath.endsWith(""String_Node_Str"")) {
    rootPath=rootPath + ""String_Node_Str"";
  }
  rootPath=StringUtils.cleanPath(rootPath);
  Set<String> fileSubs=getSubsForFile(rootPath,dir,jarPath);
  if (!all) {
    return fileSubs.toArray(new String[fileSubs.size()]);
  }
  fileSubs.addAll(getSubsForJar(dir,jarPath));
  return fileSubs.toArray(new String[fileSubs.size()]);
}","/** 
 * 获取指定path路径下的资源信息。如果rootPath为null，直接从jar中相对path中获取。 如果rootPath不为null：如果all为false，直接从rootPath对应的path中获取； 如果all为true，合并返回从jar包中相对path资源信息加上rootPath对应的path资源信息
 * @param rootPath 指定物理文件夹路径
 * @param path 相当资源路径，必须以'/'开始，例如：/images/**, /images/*.jpg
 * @param all 是否合并获取资源
 * @return 不为null的数组集合
 * @author 黄国庆 2012-5-8 下午3:29:00
 */
public static String[] getSubs(String rootPath,String path,boolean all){
  if (path == null || ""String_Node_Str"".equals(path)) {
    return new String[0];
  }
  if (!path.startsWith(""String_Node_Str"")) {
    log.warn(""String_Node_Str"" + path);
    return new String[0];
  }
  String jarPath=path.substring(1);
  String dir=jarPath;
  if (matcher.isPattern(jarPath)) {
    dir=StringUtils.getPatternRoot(jarPath);
  }
  if (rootPath == null) {
    Set<String> jarSubs=getSubsForJar(dir,jarPath);
    return jarSubs.toArray(new String[jarSubs.size()]);
  }
  rootPath=StringUtils.cleanPath(rootPath);
  if (!rootPath.endsWith(""String_Node_Str"")) {
    rootPath=rootPath + ""String_Node_Str"";
  }
  Set<String> fileSubs=getSubsForFile(rootPath,dir,jarPath);
  if (!all) {
    return fileSubs.toArray(new String[fileSubs.size()]);
  }
  fileSubs.addAll(getSubsForJar(dir,jarPath));
  return fileSubs.toArray(new String[fileSubs.size()]);
}",0.9617054875641532
178941,"private static List<Resource> getSubResourcesForFile(String rootPath,String dir,String jarPath){
  File file=new File(rootPath + dir);
  List<Resource> subs=new ArrayList<Resource>();
  if (file.exists() && file.isDirectory()) {
    boolean recursive=false;
    if (!dir.equals(jarPath)) {
      recursive=true;
    }
    Collection<?> files=FileUtils.listFiles(file,null,recursive);
    for (    Object object : files) {
      if (!(object instanceof File)) {
        continue;
      }
      File child=(File)object;
      String absolutePath=StringUtils.cleanPath(child.getAbsolutePath());
      String relativePath=absolutePath.substring(rootPath.length());
      if (recursive) {
        if (matcher.match(jarPath,relativePath)) {
          subs.add(new FileSystemResource(child));
        }
      }
 else {
        subs.add(new FileSystemResource(child));
      }
    }
  }
  removeFolder(subs);
  return subs;
}","/** 
 * 获取物理文件夹资源集合
 * @param rootPath 不能以'/'结尾，根目录
 * @param dir 必须以'/'开始，相对文件夹
 * @param jarPath 必须以'/'开始，匹配符
 * @return
 * @author 黄国庆 2012-5-11 下午3:23:25
 */
private static List<Resource> getSubResourcesForFile(String rootPath,String dir,String jarPath){
  File file=new File(rootPath + dir);
  List<Resource> subs=new ArrayList<Resource>();
  if (file.exists() && file.isDirectory()) {
    boolean recursive=false;
    if (!dir.equals(jarPath)) {
      recursive=true;
    }
    Collection<?> files=FileUtils.listFiles(file,null,recursive);
    for (    Object object : files) {
      if (!(object instanceof File)) {
        continue;
      }
      File child=(File)object;
      String absolutePath=StringUtils.cleanPath(child.getAbsolutePath());
      String relativePath=absolutePath.substring(rootPath.length());
      if (recursive) {
        if (matcher.match(jarPath,relativePath)) {
          subs.add(new FileSystemResource(child));
        }
      }
 else {
        subs.add(new FileSystemResource(child));
      }
    }
  }
  removeFolder(subs);
  return subs;
}",0.9188376753507014
178942,"private static List<Resource> getSubResourcesForJar(String dir,String jarPath){
  List<Resource> subs=new ArrayList<Resource>();
  try {
    if (dir.startsWith(""String_Node_Str"")) {
      dir=dir.substring(1);
    }
    Enumeration<URL> dirs=classLoader.getResources(dir);
    while (dirs.hasMoreElements()) {
      URL url=dirs.nextElement();
      URLConnection urlConnection=url.openConnection();
      if (urlConnection instanceof JarURLConnection) {
        JarURLConnection jarURLConnection=(JarURLConnection)urlConnection;
        JarResourcePatternResolver patternResolver=JarResourcePatternResolver.getInstance(jarURLConnection);
        subs.addAll(Arrays.asList(patternResolver.getResources(jarPath)));
      }
    }
  }
 catch (  IOException e) {
  }
  removeFolder(subs);
  return subs;
}","/** 
 * 从jar包中搜索资源集合
 * @param dir 相对jar文件路径，如果以'/'开始，自动去除'/'
 * @param jarPath 匹配符，如果没有以'/'开始，自动补上'/'
 * @return
 * @author 黄国庆 2012-5-11 下午3:26:51
 */
private static List<Resource> getSubResourcesForJar(String dir,String jarPath){
  List<Resource> subs=new ArrayList<Resource>();
  try {
    if (dir.startsWith(""String_Node_Str"")) {
      dir=dir.substring(1);
    }
    Enumeration<URL> dirs=classLoader.getResources(dir);
    while (dirs.hasMoreElements()) {
      URL url=dirs.nextElement();
      URLConnection urlConnection=url.openConnection();
      if (urlConnection instanceof JarURLConnection) {
        JarURLConnection jarURLConnection=(JarURLConnection)urlConnection;
        JarResourcePatternResolver patternResolver=JarResourcePatternResolver.getInstance(jarURLConnection);
        subs.addAll(Arrays.asList(patternResolver.getResources(jarPath)));
      }
    }
  }
 catch (  IOException e) {
  }
  removeFolder(subs);
  return subs;
}",0.9128205128205128
178943,"/** 
 * Test method for   {@link org.webframe.support.util.ResourceUtils#getUrls(java.lang.String)}.
 * @throws IOException 
 */
@Test public void testGetUrls() throws IOException {
  List<URL> lists=ResourceUtils.getUrls(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",1,lists.size());
}","/** 
 * Test method for   {@link org.webframe.support.util.ResourceUtils#getUrls(java.lang.String)}.
 * @throws IOException
 */
@Test public void testGetUrls() throws IOException {
  List<URL> lists=ResourceUtils.getUrls(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",1,lists.size());
}",0.998330550918197
178944,"/** 
 * Test method for   {@link org.webframe.support.util.ResourceUtils#getSubResources(java.lang.String,java.lang.String,boolean)}.
 */
@Test public void testGetSubResources() throws IOException {
  String rootPath=ClassUtils.getClassesRootResource(ResourceUtils.class).getFile().getAbsolutePath();
  String path=""String_Node_Str"";
  Resource[] resources=ResourceUtils.getSubResources(rootPath,path,true);
  Assert.assertEquals(""String_Node_Str"",resources.length,ResourceUtils.getSubs(rootPath,path,true).length);
  System.out.println(path + ""String_Node_Str"" + resources.length);
  for (  Resource resource : resources) {
    System.out.println(""String_Node_Str"" + resource);
  }
}","/** 
 * Test method for  {@link org.webframe.support.util.ResourceUtils#getSubResources(java.lang.String,java.lang.String,boolean)}.
 */
@Test public void testGetSubResources() throws IOException {
  String rootPath=ResourceUtils.getAbsolutePath(ClassUtils.getClassesRootResource(ResourceUtils.class));
  String path=""String_Node_Str"";
  Resource[] resources=ResourceUtils.getSubResources(rootPath,path,true);
  Assert.assertEquals(""String_Node_Str"",resources.length,ResourceUtils.getSubs(rootPath,path,true).length);
  System.out.println(path + ""String_Node_Str"" + resources.length);
  for (  Resource resource : resources) {
    System.out.println(""String_Node_Str"" + resource);
  }
}",0.9576642335766424
178945,"/** 
 * Test method for  {@link org.webframe.support.util.ResourceUtils#getSubs(java.lang.String,java.lang.String,boolean)}.
 * @throws IOException
 */
@Test public void testGetSubs() throws IOException {
  String rootPath=ClassUtils.getClassesRootResource(ResourceUtils.class).getFile().getAbsolutePath();
  String path=""String_Node_Str"";
  String[] subs=ResourceUtils.getSubs(rootPath,path,true);
  Assert.assertEquals(""String_Node_Str"",subs.length,ResourceUtils.getSubResources(rootPath,path,true).length);
  System.out.println(path + ""String_Node_Str"" + subs.length);
  for (  String sub : subs) {
    System.out.println(""String_Node_Str"" + sub);
  }
}","/** 
 * Test method for  {@link org.webframe.support.util.ResourceUtils#getSubs(java.lang.String,java.lang.String,boolean)}.
 * @throws IOException
 */
@Test public void testGetSubs() throws IOException {
  String rootPath=ResourceUtils.getAbsolutePath(ClassUtils.getClassesRootResource(ResourceUtils.class)) + ""String_Node_Str"";
  String path=""String_Node_Str"";
  String[] subs=ResourceUtils.getSubs(rootPath,path,true);
  Assert.assertEquals(""String_Node_Str"",subs.length,ResourceUtils.getSubResources(rootPath,path,true).length);
  System.out.println(path + ""String_Node_Str"" + subs.length);
  for (  String sub : subs) {
    System.out.println(""String_Node_Str"" + sub);
  }
}",0.9408239700374532
178946,"/** 
 * Test method for   {@link org.webframe.support.util.StringUtils#getPatternRoot(java.lang.String)}.
 */
@Test public void testGetPatternRoot(){
  String[] strs={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(""String_Node_Str"");
  for (  String string : strs) {
    System.out.println(StringUtils.getPatternRoot(string));
  }
}","/** 
 * Test method for   {@link org.webframe.support.util.StringUtils#getPatternRoot(java.lang.String)}.
 */
@Test public void testGetPatternRoot(){
  String[] strs={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String string : strs) {
    System.out.println(""String_Node_Str"" + string + ""String_Node_Str""+ StringUtils.getPatternRoot(string));
  }
}",0.7359781121751026
178947,"/** 
 * Test method for   {@link org.webframe.support.util.StringUtils#getFileDirectory(java.lang.String)}.
 */
@Test public void testGetFileDirectory(){
  String[] strs={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(""String_Node_Str"");
  for (  String string : strs) {
    System.out.println(StringUtils.getFileDirectory(string));
  }
}","/** 
 * Test method for   {@link org.webframe.support.util.StringUtils#getFileDirectory(java.lang.String)}.
 */
@Test public void testGetFileDirectory(){
  String[] strs={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String string : strs) {
    System.out.println(""String_Node_Str"" + string + ""String_Node_Str""+ StringUtils.getFileDirectory(string));
  }
}",0.7348586810228802
178948,"/** 
 * Test method for   {@link org.webframe.support.util.StringUtils#getArtifactId(java.lang.String)}.
 */
@Test public void testGetArtifactId(){
  String[] strs={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(""String_Node_Str"");
  for (  String string : strs) {
    System.out.println(StringUtils.getArtifactId(string));
  }
}","/** 
 * Test method for   {@link org.webframe.support.util.StringUtils#getArtifactId(java.lang.String)}.
 */
@Test public void testGetArtifactId(){
  String[] strs={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String string : strs) {
    System.out.println(""String_Node_Str"" + string + ""String_Node_Str""+ StringUtils.getArtifactId(string));
  }
}",0.8499399759903962
178949,"public Set<String> getEntryFilesByDir(String directory){
  if (directory == null)   return null;
  return entryFilesPathMap.get(resolveJarEntryPath(directory));
}","public Set<String> getEntryFilesByDir(String directory,PathMatcher matcher){
  if (directory == null)   return null;
  String pattern=resolveJarEntryPath(directory);
  if (!matcher.isPattern(pattern))   return entryFilesPathMap.get(pattern);
  Set<String> matches=new HashSet<String>();
  for (  String key : entryFilesPathMap.keySet()) {
    if (matcher.match(pattern,key)) {
      matches.addAll(entryFilesPathMap.get(key));
    }
  }
  return matches;
}",0.4239482200647249
178950,"public Set<String> getEntryFilesByDir(String directory){
  return jarResource.getEntryFilesByDir(directory);
}","public Set<String> getEntryFilesByDir(String directory,PathMatcher matcher){
  return jarResource.getEntryFilesByDir(directory,matcher);
}",0.8870967741935484
178951,"protected Resource[] findPathMatchingJarResources(String locationPattern){
  List<Resource> result=new ArrayList<Resource>(16);
  JarResourceLoader jarResourceLoader=(JarResourceLoader)getResourceLoader();
  String directory=StringUtils.getFileDirectory(locationPattern);
  Set<String> entriesPath=jarResourceLoader.getEntryFilesByDir(directory);
  if (entriesPath == null)   return result.toArray(new Resource[result.size()]);
  for (  String entryPath : entriesPath) {
    String path=""String_Node_Str"" + entryPath;
    if (getPathMatcher().match(locationPattern,path)) {
      Resource resource=getResource(path);
      if (resource == null)       continue;
      result.add(resource);
    }
  }
  return result.toArray(new Resource[result.size()]);
}","protected Resource[] findPathMatchingJarResources(String locationPattern){
  List<Resource> result=new ArrayList<Resource>(16);
  JarResourceLoader jarResourceLoader=(JarResourceLoader)getResourceLoader();
  String directory=StringUtils.getFileDirectory(locationPattern);
  Set<String> entriesPath=jarResourceLoader.getEntryFilesByDir(directory,getPathMatcher());
  if (entriesPath == null)   return result.toArray(new Resource[result.size()]);
  for (  String entryPath : entriesPath) {
    String path=""String_Node_Str"" + entryPath;
    if (getPathMatcher().match(locationPattern,path)) {
      Resource resource=getResource(path);
      if (resource == null)       continue;
      result.add(resource);
    }
  }
  return result.toArray(new Resource[result.size()]);
}",0.9888524590163934
178952,"/** 
 * Test method for  {@link org.webframe.support.driver.resource.jar.JarResourcePatternResolver#getResources(java.lang.String)}.
 */
@Test public void testGetResourcesString(){
  try {
    JarResourcePatternResolver resolver=new JarResourcePatternResolver(getClass());
    Resource resource=resolver.getResource(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",resource instanceof FileSystemResource);
    resolver=new JarResourcePatternResolver(Test.class);
    resource=resolver.getResource(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",resource.exists());
    Assert.assertTrue(""String_Node_Str"",resource instanceof JarResource);
    Resource[] resources=resolver.getResources(""String_Node_Str"");
    Assert.assertEquals(""String_Node_Str"",12,resources.length);
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.webframe.support.driver.resource.jar.JarResourcePatternResolver#getResources(java.lang.String)}.
 */
@Test public void testGetResourcesString(){
  try {
    JarResourcePatternResolver resolver=new JarResourcePatternResolver(getClass());
    Resource resource=resolver.getResource(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",resource instanceof FileSystemResource);
    resolver=new JarResourcePatternResolver(Test.class);
    resource=resolver.getResource(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",resource.exists());
    Assert.assertTrue(""String_Node_Str"",resource instanceof JarResource);
    Resource[] resources=resolver.getResources(""String_Node_Str"");
    Assert.assertEquals(""String_Node_Str"",12,resources.length);
    resolver=new JarResourcePatternResolver(ClassUtils.class);
    resources=resolver.getResources(""String_Node_Str"");
    Assert.assertEquals(""String_Node_Str"",92,resources.length);
    SystemLogUtils.println(""String_Node_Str"" + resources.length + ""String_Node_Str"");
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
}",0.8650275965880582
178953,"public NettyRpcClient(final InetSocketAddress remoteAddress,final Map<Class<?>,Object> implementations,final ExceptionListener[] listeners,final ClassResolver classResolver,final long keepalivePeriod){
  this.implementations=implementations;
  this.listeners=listeners;
  this.classResolver=classResolver;
  bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));
  bootstrap.setPipelineFactory(new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      return Channels.pipeline(new ObjectEncoder(),new ObjectDecoder(classResolver),new RpcHandler());
    }
  }
);
  final ChannelFuture future=bootstrap.connect(remoteAddress);
  channel=future.awaitUninterruptibly().getChannel();
  if (!future.isSuccess()) {
    bootstrap.releaseExternalResources();
    throw new TransportException(""String_Node_Str"" + remoteAddress,future.getCause());
  }
  latch=new CountDownLatch(1);
  channel.write(new HandshakeFromClient(foldClassesToStrings(implementations.keySet())));
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  keepAliveTimer=new KeepAliveTimer(Collections.singleton(remote),keepalivePeriod);
}","public NettyRpcClient(final InetSocketAddress remoteAddress,final Map<Class<?>,Object> implementations,final ExceptionListener[] listeners,final ClassResolver classResolver,final long keepalivePeriod){
  this.implementations=implementations;
  this.listeners=listeners;
  this.classResolver=classResolver;
  bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));
  bootstrap.setPipelineFactory(new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      return Channels.pipeline(new ObjectEncoder(),new ObjectDecoder(classResolver),new RpcHandler());
    }
  }
);
  final ChannelFuture future=bootstrap.connect(remoteAddress);
  channel=future.awaitUninterruptibly().getChannel();
  if (!future.isSuccess()) {
    bootstrap.releaseExternalResources();
    throw new TransportException(""String_Node_Str"" + remoteAddress,future.getCause());
  }
  latch=new CountDownLatch(1);
  channel.write(new HandshakeFromClient(foldClassesToStrings(new ArrayList<Class<?>>(implementations.keySet()))));
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  keepAliveTimer=new KeepAliveTimer(Collections.singleton(remote),keepalivePeriod);
}",0.9903660886319846
178954,"@Override public void acceptHandshakeFromServer(HandshakeFromServer msg){
  try {
    remote=new NettyRemote(channel,msg.clientId,unfoldStringToClasses(classResolver,msg.classNames));
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    latch.countDown();
  }
}","@Override public void acceptHandshakeFromServer(HandshakeFromServer msg){
  try {
    remote=new NettyRemote(channel,msg.clientId,new HashSet<Class<?>>(unfoldStringToClasses(classResolver,msg.classNames)));
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    latch.countDown();
  }
}",0.9688768606224628
178955,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  channel.write(new InvocationRequest(method.getDeclaringClass().getName(),method.getName(),toSerializable(args),foldClassesToStrings(new HashSet<Class<?>>(Arrays.asList(method.getParameterTypes())))));
  return null;
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  channel.write(new InvocationRequest(method.getDeclaringClass().getName(),method.getName(),toSerializable(args),foldClassesToStrings(Arrays.asList(method.getParameterTypes()))));
  return null;
}",0.9616026711185308
178956,"public static String[] foldClassesToStrings(Set<Class<?>> classes){
  String[] result=new String[classes.size()];
  int i=0;
  for (  Class<?> clazz : classes) {
    result[i++]=clazz.getName();
  }
  return result;
}","public static String[] foldClassesToStrings(List<Class<?>> classes){
  String[] result=new String[classes.size()];
  int i=0;
  for (  Class<?> clazz : classes) {
    result[i++]=clazz.getName();
  }
  return result;
}",0.9885057471264368
178957,"public static Set<Class<?>> unfoldStringToClasses(ClassResolver classResolver,String[] classNames) throws ClassNotFoundException {
  Set<Class<?>> result=new HashSet<Class<?>>(classNames.length);
  for (  String name : classNames) {
    result.add(classResolver.resolve(name));
  }
  return result;
}","public static List<Class<?>> unfoldStringToClasses(ClassResolver classResolver,String[] classNames) throws ClassNotFoundException {
  List<Class<?>> result=new ArrayList<Class<?>>(classNames.length);
  for (  String name : classNames) {
    result.add(classResolver.resolve(name));
  }
  return result;
}",0.9602649006622516
178958,"@Override public void acceptHandshakeFromClient(HandshakeFromClient msg){
  try {
    remote=new NettyRemote(channel,new NettyId(channel.getId()),unfoldStringToClasses(classResolver,msg.classNames));
    channel.write(new HandshakeFromServer(remote.getId(),foldClassesToStrings(implementations.keySet())));
    clients.addClient(remote);
    fireClientConnect(remote);
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public void acceptHandshakeFromClient(HandshakeFromClient msg){
  try {
    remote=new NettyRemote(channel,new NettyId(channel.getId()),new HashSet<Class<?>>(unfoldStringToClasses(classResolver,msg.classNames)));
    channel.write(new HandshakeFromServer(remote.getId(),foldClassesToStrings(new ArrayList<Class<?>>(implementations.keySet()))));
    clients.addClient(remote);
    fireClientConnect(remote);
  }
 catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9546313799621928
178959,"@Test public void buildersCreateClientAndServerWhichCanTalk() throws Exception {
  final ServerRemote mock=mockery.mock(ServerRemote.class);
  mockery.checking(new Expectations(){
{
      one(mock).call();
    }
  }
);
  final NettyRpcServerBuilder serverBuilder=new NettyRpcServerBuilder(Config.BIND_ADDRESS);
  final NettyRpcClientBuilder clientBuilder=new NettyRpcClientBuilder(Config.BIND_ADDRESS);
  RpcServer server=serverBuilder.setClassResolver(ClassResolvers.cacheDisabled(this.getClass().getClassLoader())).addObject(ServerRemote.class,mock).setKeepAlive(50l).build();
  RpcClient client=clientBuilder.setClassResolver(ClassResolvers.cacheDisabled(this.getClass().getClassLoader())).setKeepAlive(50l).build();
  try {
    ServerRemote proxy=client.getRemote().getProxy(ServerRemote.class);
    proxy.call();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void buildersCreateClientAndServerWhichCanTalk() throws Exception {
  final ServerRemote mock=mockery.mock(ServerRemote.class);
  mockery.checking(new Expectations(){
{
      one(mock).call();
    }
  }
);
  final NettyRpcServerBuilder serverBuilder=new NettyRpcServerBuilder(Config.BIND_ADDRESS);
  final NettyRpcClientBuilder clientBuilder=new NettyRpcClientBuilder(Config.BIND_ADDRESS);
  RpcServer server=serverBuilder.addObject(ServerRemote.class,mock).setKeepAlive(50l).build();
  RpcClient client=clientBuilder.setKeepAlive(50l).build();
  try {
    ServerRemote proxy=client.getRemote().getProxy(ServerRemote.class);
    proxy.call();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.8950146627565982
178960,"@Test(timeout=Config.TIMEOUT) public void choosesOverloadedMethodByCompileTimeTypesAsOpposedToRuntimeTypes() throws Exception {
  final OverloadedString impl=mockery.mock(OverloadedString.class);
  final String s=""String_Node_Str"";
  mockery.checking(new Expectations(){
{
      one(impl).go(with(any(Serializable.class)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(OverloadedString.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final OverloadedString proxy=client.getRemote().getProxy(OverloadedString.class);
  try {
    proxy.go((Serializable)s);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void choosesOverloadedMethodByCompileTimeTypesAsOpposedToRuntimeTypes() throws Exception {
  final OverloadedString impl=mockery.mock(OverloadedString.class);
  final String s=""String_Node_Str"";
  mockery.checking(new Expectations(){
{
      one(impl).go(with(any(Serializable.class)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(OverloadedString.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final OverloadedString proxy=client.getRemote().getProxy(OverloadedString.class);
  try {
    proxy.go((Serializable)s);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.995336442371752
178961,"@Test(timeout=Config.TIMEOUT) public void differentClientsHaveSeparateStateOnServerSide() throws Exception {
  final String MSG1=""String_Node_Str"";
  final String MSG2=""String_Node_Str"";
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClass(State.class,ServerState.class).build();
  final ClientState clientOneState=new ClientState();
  final RpcClient clientOne=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(State.class,clientOneState).build();
  final State proxyOne=clientOne.getRemote().getProxy(State.class);
  final ClientState clientTwoState=new ClientState();
  final RpcClient clientTwo=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(State.class,clientTwoState).build();
  final State proxyTwo=clientTwo.getRemote().getProxy(State.class);
  try {
    proxyOne.set(MSG1);
    proxyTwo.set(MSG2);
    proxyOne.get();
    proxyTwo.get();
    giveTimeForMessagesToBeProcessed();
    assertThat(clientOneState.state,equalTo(MSG1));
    assertThat(clientTwoState.state,equalTo(MSG2));
  }
  finally {
    clientOne.shutdown();
    clientTwo.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void differentClientsHaveSeparateStateOnServerSide() throws Exception {
  final String MSG1=""String_Node_Str"";
  final String MSG2=""String_Node_Str"";
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClass(State.class,ServerState.class).build();
  final ClientState clientOneState=new ClientState();
  final RpcClient clientOne=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(State.class,clientOneState).build();
  final State proxyOne=clientOne.getRemote().getProxy(State.class);
  final ClientState clientTwoState=new ClientState();
  final RpcClient clientTwo=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(State.class,clientTwoState).build();
  final State proxyTwo=clientTwo.getRemote().getProxy(State.class);
  try {
    proxyOne.set(MSG1);
    proxyTwo.set(MSG2);
    proxyOne.get();
    proxyTwo.get();
    giveTimeForMessagesToBeProcessed();
    assertThat(clientOneState.state,equalTo(MSG1));
    assertThat(clientTwoState.state,equalTo(MSG2));
  }
  finally {
    clientOne.shutdown();
    clientTwo.shutdown();
    server.shutdown();
  }
}",0.9968397291196388
178962,"@Test(timeout=Config.TIMEOUT) public void exceptionsFromClientSideImplementationArePassedToServer() throws Throwable {
  final ThrowableThrower impl=new ThrowableThrower(){
    @Override public void go() throws Throwable {
      throw new IllegalAccessException(""String_Node_Str"");
    }
  }
;
  final ExceptionListener listener=mockery.mock(ExceptionListener.class);
  mockery.checking(new Expectations(){
{
      one(listener).onExceptionCaught(with(any(Remote.class)),with(any(RemoteException.class)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addExceptionListener(listener).addClass(NoParamsVoidReturn.class,CallClientBack.class).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(ThrowableThrower.class,impl).build();
  final NoParamsVoidReturn proxy=client.getRemote().getProxy(NoParamsVoidReturn.class);
  try {
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void exceptionsFromClientSideImplementationArePassedToServer() throws Throwable {
  final ThrowableThrower impl=new ThrowableThrower(){
    @Override public void go() throws Throwable {
      throw new IllegalAccessException(""String_Node_Str"");
    }
  }
;
  final ExceptionListener listener=mockery.mock(ExceptionListener.class);
  mockery.checking(new Expectations(){
{
      one(listener).onExceptionCaught(with(any(Remote.class)),with(any(RemoteException.class)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addExceptionListener(listener).addClass(NoParamsVoidReturn.class,CallClientBack.class).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(ThrowableThrower.class,impl).build();
  final NoParamsVoidReturn proxy=client.getRemote().getProxy(NoParamsVoidReturn.class);
  try {
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9965294992563212
178963,"@Test(timeout=Config.TIMEOUT) public void feedbackToClientWorks() throws Exception {
  final String MSG=""String_Node_Str"";
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClass(SomeServerApi.class,SomeServerImpl.class).build();
  final ClientApi mockClient=mockery.mock(ClientApi.class);
  mockery.checking(new Expectations(){
{
      one(mockClient).feedback(MSG);
    }
  }
);
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(ClientApi.class,mockClient).build();
  final SomeServerApi proxy=client.getRemote().getProxy(SomeServerApi.class);
  try {
    proxy.go(MSG);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void feedbackToClientWorks() throws Exception {
  final String MSG=""String_Node_Str"";
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClass(SomeServerApi.class,SomeServerImpl.class).build();
  final ClientApi mockClient=mockery.mock(ClientApi.class);
  mockery.checking(new Expectations(){
{
      one(mockClient).feedback(MSG);
    }
  }
);
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(ClientApi.class,mockClient).build();
  final SomeServerApi proxy=client.getRemote().getProxy(SomeServerApi.class);
  try {
    proxy.go(MSG);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.995135510771369
178964,"@Test(timeout=Config.TIMEOUT) public void methodParametersArePassedToRemoteSideProperly() throws Exception {
  final IntegerParam impl=mockery.mock(IntegerParam.class);
  final Integer param=5;
  mockery.checking(new Expectations(){
{
      one(impl).go(with(equalTo(param)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(IntegerParam.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final IntegerParam proxy=client.getRemote().getProxy(IntegerParam.class);
  try {
    proxy.go(param);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void methodParametersArePassedToRemoteSideProperly() throws Exception {
  final IntegerParam impl=mockery.mock(IntegerParam.class);
  final Integer param=5;
  mockery.checking(new Expectations(){
{
      one(impl).go(with(equalTo(param)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(IntegerParam.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final IntegerParam proxy=client.getRemote().getProxy(IntegerParam.class);
  try {
    proxy.go(param);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9948642699926632
178965,"@Test(timeout=Config.TIMEOUT) public void primitiveMethodParametersArePassedToRemoteSideProperly() throws Exception {
  final IntLongParam impl=mockery.mock(IntLongParam.class);
  final int paramInt=5;
  final long paramLong=10l;
  mockery.checking(new Expectations(){
{
      one(impl).go(with(equalTo(paramInt)),with(equalTo(paramLong)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(IntLongParam.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final IntLongParam proxy=client.getRemote().getProxy(IntLongParam.class);
  try {
    proxy.go(paramInt,paramLong);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void primitiveMethodParametersArePassedToRemoteSideProperly() throws Exception {
  final IntLongParam impl=mockery.mock(IntLongParam.class);
  final int paramInt=5;
  final long paramLong=10l;
  mockery.checking(new Expectations(){
{
      one(impl).go(with(equalTo(paramInt)),with(equalTo(paramLong)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(IntLongParam.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final IntLongParam proxy=client.getRemote().getProxy(IntLongParam.class);
  try {
    proxy.go(paramInt,paramLong);
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.995385629531971
178966,"@Test(timeout=Config.TIMEOUT,expected=ConfigurationException.class) public void throwsProtocolExceptionIfCannotSerializeParams() throws Exception {
  final NonSerializable impl=mockery.mock(NonSerializable.class);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NonSerializable.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NonSerializable proxy=client.getRemote().getProxy(NonSerializable.class);
  try {
    proxy.param(""String_Node_Str"",new Object());
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT,expected=ConfigurationException.class) public void throwsProtocolExceptionIfCannotSerializeParams() throws Exception {
  final NonSerializable impl=mockery.mock(NonSerializable.class);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NonSerializable.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NonSerializable proxy=client.getRemote().getProxy(NonSerializable.class);
  try {
    proxy.param(""String_Node_Str"",new Object());
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9941908713692946
178967,"@Test(timeout=Config.TIMEOUT,expected=ConfigurationException.class) public void doNotAllowMethodsWithNonVoidReturnTypeToBeProxied() throws Exception {
  final NoParamsIntegerReturn impl=mockery.mock(NoParamsIntegerReturn.class);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NoParamsIntegerReturn.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NoParamsIntegerReturn proxy=client.getRemote().getProxy(NoParamsIntegerReturn.class);
  try {
    proxy.go();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT,expected=ConfigurationException.class) public void doNotAllowMethodsWithNonVoidReturnTypeToBeProxied() throws Exception {
  final NoParamsIntegerReturn impl=mockery.mock(NoParamsIntegerReturn.class);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NoParamsIntegerReturn.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NoParamsIntegerReturn proxy=client.getRemote().getProxy(NoParamsIntegerReturn.class);
  try {
    proxy.go();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9941908713692946
178968,"@Test(timeout=Config.TIMEOUT) public void subsequentCallsWork() throws Exception {
  final NoParamsVoidReturn impl=mockery.mock(NoParamsVoidReturn.class);
  mockery.checking(new Expectations(){
{
      one(impl).go();
      one(impl).go();
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NoParamsVoidReturn.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NoParamsVoidReturn proxy=client.getRemote().getProxy(NoParamsVoidReturn.class);
  try {
    proxy.go();
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void subsequentCallsWork() throws Exception {
  final NoParamsVoidReturn impl=mockery.mock(NoParamsVoidReturn.class);
  mockery.checking(new Expectations(){
{
      one(impl).go();
      one(impl).go();
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NoParamsVoidReturn.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NoParamsVoidReturn proxy=client.getRemote().getProxy(NoParamsVoidReturn.class);
  try {
    proxy.go();
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9948032665181886
178969,"@Test(timeout=Config.TIMEOUT) public void throwsTransportExceptionIfConnectionIsAbruptlyTerminated() throws Throwable {
  final InfinteWaiter impl=new InfinteWaiter(){
    @SuppressWarnings({""String_Node_Str""}) @Override public void hang(){
      try {
        sleep(1000L);
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
;
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(InfinteWaiter.class,impl).build();
  final ExceptionSavingListener listener=new ExceptionSavingListener();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addExceptionListener(listener).setKeepAlive(30l).build();
  final InfinteWaiter proxy=client.getRemote().getProxy(InfinteWaiter.class);
  try {
    proxy.hang();
    server.shutdown();
    giveTimeForMessagesToBeProcessed();
    assertThat(listener.lastException(),notNullValue());
    assertThat(listener.lastException().getClass(),equalTo((Class)TransportException.class));
  }
  finally {
    client.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void throwsTransportExceptionIfConnectionIsAbruptlyTerminated() throws Throwable {
  final InfinteWaiter impl=new InfinteWaiter(){
    @SuppressWarnings({""String_Node_Str""}) @Override public void hang(){
      try {
        sleep(1000L);
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
;
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(InfinteWaiter.class,impl).build();
  final ExceptionSavingListener listener=new ExceptionSavingListener();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addExceptionListener(listener).setKeepAlive(30l).build();
  final InfinteWaiter proxy=client.getRemote().getProxy(InfinteWaiter.class);
  try {
    proxy.hang();
    server.shutdown();
    giveTimeForMessagesToBeProcessed();
    assertThat(listener.lastException(),notNullValue());
    assertThat(listener.lastException().getClass(),equalTo((Class)TransportException.class));
  }
  finally {
    client.shutdown();
  }
}",0.9965432098765432
178970,"@Test(timeout=Config.TIMEOUT) public void serverImplementationsAreCachedIeStatePersistsAcrossClientCalls() throws Exception {
  final String MSG=""String_Node_Str"";
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClass(State.class,ServerState.class).build();
  final ClientState clientState=new ClientState();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(State.class,clientState).build();
  final State serverStateProxy=client.getRemote().getProxy(State.class);
  try {
    serverStateProxy.set(MSG);
    serverStateProxy.get();
    giveTimeForMessagesToBeProcessed();
    assertThat(clientState.state,equalTo(MSG));
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void serverImplementationsAreCachedIeStatePersistsAcrossClientCalls() throws Exception {
  final String MSG=""String_Node_Str"";
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClass(State.class,ServerState.class).build();
  final ClientState clientState=new ClientState();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addObject(State.class,clientState).build();
  final State serverStateProxy=client.getRemote().getProxy(State.class);
  try {
    serverStateProxy.set(MSG);
    serverStateProxy.get();
    giveTimeForMessagesToBeProcessed();
    assertThat(clientState.state,equalTo(MSG));
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9952021932830706
178971,"@Test(timeout=Config.TIMEOUT) public void invokesMethodsWithNoParamsAndVoidReturnType() throws Exception {
  final NoParamsVoidReturn impl=mockery.mock(NoParamsVoidReturn.class);
  mockery.checking(new Expectations(){
{
      one(impl).go();
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NoParamsVoidReturn.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NoParamsVoidReturn proxy=client.getRemote().getProxy(NoParamsVoidReturn.class);
  try {
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void invokesMethodsWithNoParamsAndVoidReturnType() throws Exception {
  final NoParamsVoidReturn impl=mockery.mock(NoParamsVoidReturn.class);
  mockery.checking(new Expectations(){
{
      one(impl).go();
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(NoParamsVoidReturn.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  final NoParamsVoidReturn proxy=client.getRemote().getProxy(NoParamsVoidReturn.class);
  try {
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.9946929492039424
178972,"@Test(timeout=Config.TIMEOUT) public void exceptionsFromServerSideImplementationArePassedToClient() throws Throwable {
  final ThrowableThrower impl=new ThrowableThrower(){
    @Override public void go() throws Throwable {
      throw new IllegalAccessException(""String_Node_Str"");
    }
  }
;
  final ExceptionListener listener=mockery.mock(ExceptionListener.class);
  mockery.checking(new Expectations(){
{
      one(listener).onExceptionCaught(with(any(Remote.class)),with(any(RemoteException.class)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(ThrowableThrower.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addExceptionListener(listener).build();
  final ThrowableThrower proxy=client.getRemote().getProxy(ThrowableThrower.class);
  try {
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}","@Test(timeout=TIMEOUT) public void exceptionsFromServerSideImplementationArePassedToClient() throws Throwable {
  final ThrowableThrower impl=new ThrowableThrower(){
    @Override public void go() throws Throwable {
      throw new IllegalAccessException(""String_Node_Str"");
    }
  }
;
  final ExceptionListener listener=mockery.mock(ExceptionListener.class);
  mockery.checking(new Expectations(){
{
      one(listener).onExceptionCaught(with(any(Remote.class)),with(any(RemoteException.class)));
    }
  }
);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addObject(ThrowableThrower.class,impl).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).addExceptionListener(listener).build();
  final ThrowableThrower proxy=client.getRemote().getProxy(ThrowableThrower.class);
  try {
    proxy.go();
    giveTimeForMessagesToBeProcessed();
  }
  finally {
    client.shutdown();
    server.shutdown();
  }
}",0.996309963099631
178973,"@Test(timeout=Config.TIMEOUT) public void serverShutdownDoesNotHangIfThereAreStillClientsConnected() throws Exception {
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  server.shutdown();
  client.shutdown();
}","@Test(timeout=TIMEOUT) public void serverShutdownDoesNotHangIfThereAreStillClientsConnected() throws Exception {
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).build();
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  server.shutdown();
  client.shutdown();
}",0.9886178861788618
178974,"@Test(timeout=Config.TIMEOUT) public void serverNotifiesAboutClientConnectsAndDisconnects() throws Exception {
  final ClientListener mock=mockery.mock(ClientListener.class);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClientListener(mock).build();
  mockery.checking(new Expectations(){
{
      one(mock).onClientConnect(with(any(Remote.class)));
    }
  }
);
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  mockery.checking(new Expectations(){
{
      one(mock).onClientDisconnect(with(any(Remote.class)));
    }
  }
);
  client.shutdown();
  giveTimeForMessagesToBeProcessed();
  server.shutdown();
}","@Test(timeout=TIMEOUT) public void serverNotifiesAboutClientConnectsAndDisconnects() throws Exception {
  final ClientListener mock=mockery.mock(ClientListener.class);
  final RpcServer server=new NettyRpcServerBuilder(BIND_ADDRESS).addClientListener(mock).build();
  mockery.checking(new Expectations(){
{
      one(mock).onClientConnect(with(any(Remote.class)));
    }
  }
);
  final RpcClient client=new NettyRpcClientBuilder(BIND_ADDRESS).build();
  mockery.checking(new Expectations(){
{
      one(mock).onClientDisconnect(with(any(Remote.class)));
    }
  }
);
  client.shutdown();
  giveTimeForMessagesToBeProcessed();
  server.shutdown();
}",0.9946277820414428
178975,"/** 
 * Selects rows matching the specified qualifier.
 */
@Override public void selectAttributes(NSArray<EOAttribute> attributesToFetch,EOFetchSpecification fetchSpecification,boolean shouldLock,EOEntity entity){
  if (entity == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (attributesToFetch == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ERXSolrFetchSpecification solrFetchSpecification=null;
  if (fetchSpecification instanceof ERXSolrFetchSpecification) {
    solrFetchSpecification=(ERXSolrFetchSpecification)fetchSpecification;
  }
  setAttributesToFetch(attributesToFetch);
  try {
    _fetchIndex=0;
    _fetchedRows=new NSMutableArray<NSMutableDictionary<String,Object>>();
    NSDictionary connectionDictionary=adaptorContext().adaptor().connectionDictionary();
    String solrUrl=(String)connectionDictionary.objectForKey(""String_Node_Str"");
    String solrCore=entity.externalName();
    if (ERXStringUtilities.stringIsNullOrEmpty(solrUrl)) {
      throw new IllegalArgumentException(""String_Node_Str"" + connectionDictionary);
    }
    ERXMutableURL url=new ERXMutableURL(solrUrl);
    if (solrCore != null && !solrCore.equalsIgnoreCase(""String_Node_Str"")) {
      url.setPath(url.path() + solrCore);
    }
    EOQualifier qualifier=fetchSpecification.qualifier();
    ERSolrExpression solrExpression=ERSolrExpression.newERSolrExpression(entity);
    String solrQueryString=solrExpression.solrStringForQualifier(qualifier);
    SolrQuery solrQuery=new SolrQuery();
    solrQuery.setQuery(solrQueryString);
    solrQuery.setRows(Integer.MAX_VALUE);
    if (solrFetchSpecification != null) {
      if (solrFetchSpecification.maxTime() != null) {
        solrQuery.setTimeAllowed(solrFetchSpecification.maxTime());
      }
      if (solrFetchSpecification.isBatching()) {
        Integer numberOfRowsPerBatch=solrFetchSpecification.batchSize() != null ? solrFetchSpecification.batchSize() : Integer.MAX_VALUE;
        Integer rowOffset=(solrFetchSpecification.batchNumber().intValue() * numberOfRowsPerBatch.intValue()) - numberOfRowsPerBatch;
        solrQuery.setStart(rowOffset);
        solrQuery.setRows(numberOfRowsPerBatch);
      }
      if (solrFetchSpecification.facets() != null && solrFetchSpecification.facets().count() > 0) {
        solrQuery.setFacet(true);
        if (solrFetchSpecification.defaultMinFacetSize() != null) {
          solrQuery.setFacetMinCount(solrFetchSpecification.defaultMinFacetSize());
        }
        if (solrFetchSpecification.defaultFacetLimit() != null) {
          solrQuery.setFacetLimit(solrFetchSpecification.defaultFacetLimit());
        }
        for (Enumeration e=solrFetchSpecification.facets().objectEnumerator(); e.hasMoreElements(); ) {
          SolrFacet facet=(SolrFacet)e.nextElement();
          if (facet.sort() != null && facet.sort().solrValue() != null) {
            solrQuery.setParam(""String_Node_Str"" + facet.key() + ""String_Node_Str""+ (FacetParams.FACET_SORT),facet.sort().solrValue());
          }
          if (facet.minCount() != null) {
            solrQuery.setParam(""String_Node_Str"" + facet.key() + ""String_Node_Str""+ (FacetParams.FACET_MINCOUNT),String.valueOf(facet.minCount()));
          }
          if (facet.limit() != null) {
            solrQuery.setParam(""String_Node_Str"" + facet.key() + ""String_Node_Str""+ (FacetParams.FACET_LIMIT),String.valueOf(facet.limit()));
          }
          boolean isExcludingFromCounts=true;
          boolean isMultiValue=false;
          EOAttribute attribute=entity.attributeNamed(facet.key());
          if (attribute == null) {
            throw new IllegalStateException(""String_Node_Str"" + entity.name() + ""String_Node_Str""+ facet.key());
          }
          isMultiValue=NSValueUtilities.booleanValueWithDefault((attribute.userInfo() == null ? null : attribute.userInfo().valueForKey(""String_Node_Str"")),false);
          if (isMultiValue && SolrFacet.Operator.AND.equals(facet.operator())) {
            isExcludingFromCounts=false;
          }
          if (facet.isQuery()) {
            String qualifierKeyPrefix=facet.key() + ""String_Node_Str"";
            for (Enumeration qualifierKeyEnumeration=facet.qualifierKeys().objectEnumerator(); qualifierKeyEnumeration.hasMoreElements(); ) {
              String qualifierKey=(String)qualifierKeyEnumeration.nextElement();
              String prefixedQualifierKey=qualifierKeyPrefix + qualifierKey;
              NSMutableDictionary<String,String> parameters=new NSMutableDictionary<String,String>();
              parameters.takeValueForKey(prefixedQualifierKey,ERSolrExpression.PARAMETER_KEY);
              if (isExcludingFromCounts) {
                parameters.takeValueForKey(prefixedQualifierKey,ERSolrExpression.PARAMETER_EXCLUSION);
              }
              StringBuilder sb=new StringBuilder();
              ERSolrExpression.appendLocalParams(sb,parameters);
              EOQualifier facetQualifier=facet.qualifierForKey(qualifierKey);
              sb.append(solrExpression.solrStringForQualifier(facetQualifier));
              solrQuery.addFacetQuery(sb.toString());
            }
          }
 else {
            StringBuilder sb=new StringBuilder();
            if (isExcludingFromCounts) {
              ERSolrExpression.appendLocalParams(sb,new NSDictionary<String,String>(facet.key(),ERSolrExpression.PARAMETER_EXCLUSION));
            }
            sb.append(facet.key());
            solrQuery.addFacetField(sb.toString());
          }
          if (facet.selectedItems() != null && facet.selectedItems().count() > 0) {
            StringBuilder filterQuery=new StringBuilder();
            if (isExcludingFromCounts) {
              ERSolrExpression.appendLocalParams(filterQuery,new NSDictionary<String,String>(facet.key(),ERSolrExpression.PARAMETER_TAG));
            }
            filterQuery.append(""String_Node_Str"");
            for (Enumeration facetItemEnumeration=facet.selectedItems().objectEnumerator(); facetItemEnumeration.hasMoreElements(); ) {
              FacetItem selectedFacetItem=(FacetItem)facetItemEnumeration.nextElement();
              String operator=null;
              if (SolrFacet.Operator.NOT.equals(facet.operator())) {
                filterQuery.append(SolrFacet.Operator.NOT.toString()).append(""String_Node_Str"");
                operator=SolrFacet.Operator.AND.toString();
              }
 else {
                operator=facet.operator().toString();
              }
              if (selectedFacetItem.qualifier() != null) {
                filterQuery.append(solrExpression.solrStringForQualifier(selectedFacetItem.qualifier()));
              }
 else {
                filterQuery.append(facet.key()).append(""String_Node_Str"");
                ERSolrExpression.escapeAndAppend(selectedFacetItem.key(),filterQuery);
              }
              if (facetItemEnumeration.hasMoreElements()) {
                filterQuery.append(""String_Node_Str"").append(operator).append(""String_Node_Str"");
              }
            }
            filterQuery.append(""String_Node_Str"");
            solrQuery.addFilterQuery(filterQuery.toString());
          }
        }
      }
    }
    System.out.println(""String_Node_Str"" + qualifier);
    System.out.println(""String_Node_Str"" + ERXStringUtilities.urlDecode(solrQuery.toString()));
    CommonsHttpSolrServer solrServer=new CommonsHttpSolrServer(url.toURL());
    QueryResponse queryResponse=solrServer.query(solrQuery);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ERXStringUtilities.urlDecode(solrQuery.toString()));
      log.debug(""String_Node_Str"" + queryResponse.getElapsedTime() + ""String_Node_Str"");
    }
    if (solrFetchSpecification != null) {
      ERXSolrFetchSpecification.Result result=ERXSolrFetchSpecification.Result.newResult(queryResponse,solrFetchSpecification);
      solrFetchSpecification.setResult(result);
    }
    for (    SolrDocument solrDoc : queryResponse.getResults()) {
      NSMutableDictionary<String,Object> row=new NSMutableDictionary<String,Object>();
      for (      EOAttribute attribute : attributesToFetch) {
        if (solrDoc.containsKey(attribute.name())) {
          Object value=solrDoc.getFieldValue(attribute.name());
          if (value == null) {
            value=NSKeyValueCoding.NullValue;
          }
          if (value instanceof List) {
            value=value.toString();
          }
          row.takeValueForKey(value,attribute.name());
        }
      }
      _fetchedRows.addObject(row);
    }
  }
 catch (  EOGeneralAdaptorException e) {
    throw e;
  }
catch (  Throwable e) {
    e.printStackTrace();
    throw new EOGeneralAdaptorException(""String_Node_Str"" + entity.name() + ""String_Node_Str""+ fetchSpecification+ ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Selects rows matching the specified qualifier.
 */
@Override public void selectAttributes(NSArray<EOAttribute> attributesToFetch,EOFetchSpecification fetchSpecification,boolean shouldLock,EOEntity entity){
  if (entity == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (attributesToFetch == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ERXSolrFetchSpecification solrFetchSpecification=null;
  if (fetchSpecification instanceof ERXSolrFetchSpecification) {
    solrFetchSpecification=(ERXSolrFetchSpecification)fetchSpecification;
  }
  setAttributesToFetch(attributesToFetch);
  try {
    _fetchIndex=0;
    _fetchedRows=new NSMutableArray<NSMutableDictionary<String,Object>>();
    NSDictionary connectionDictionary=adaptorContext().adaptor().connectionDictionary();
    String solrUrl=(String)connectionDictionary.objectForKey(""String_Node_Str"");
    String solrCore=entity.externalName();
    if (ERXStringUtilities.stringIsNullOrEmpty(solrUrl)) {
      throw new IllegalArgumentException(""String_Node_Str"" + connectionDictionary);
    }
    ERXMutableURL url=new ERXMutableURL(solrUrl);
    if (solrCore != null && !solrCore.equalsIgnoreCase(""String_Node_Str"")) {
      url.setPath(url.path() + solrCore);
    }
    EOQualifier qualifier=fetchSpecification.qualifier();
    ERSolrExpression solrExpression=ERSolrExpression.newERSolrExpression(entity);
    String solrQueryString=solrExpression.solrStringForQualifier(qualifier);
    SolrQuery solrQuery=new SolrQuery();
    solrQuery.setQuery(solrQueryString);
    solrQuery.setRows(Integer.MAX_VALUE);
    if (solrFetchSpecification != null) {
      if (solrFetchSpecification.maxTime() != null) {
        solrQuery.setTimeAllowed(solrFetchSpecification.maxTime());
      }
      if (solrFetchSpecification.isBatching()) {
        Integer numberOfRowsPerBatch=solrFetchSpecification.batchSize() != null ? solrFetchSpecification.batchSize() : Integer.MAX_VALUE;
        Integer rowOffset=(solrFetchSpecification.batchNumber().intValue() * numberOfRowsPerBatch.intValue()) - numberOfRowsPerBatch;
        solrQuery.setStart(rowOffset);
        solrQuery.setRows(numberOfRowsPerBatch);
      }
      if (solrFetchSpecification.facets() != null && solrFetchSpecification.facets().count() > 0) {
        solrQuery.setFacet(true);
        if (solrFetchSpecification.defaultMinFacetSize() != null) {
          solrQuery.setFacetMinCount(solrFetchSpecification.defaultMinFacetSize());
        }
        if (solrFetchSpecification.defaultFacetLimit() != null) {
          solrQuery.setFacetLimit(solrFetchSpecification.defaultFacetLimit());
        }
        for (Enumeration e=solrFetchSpecification.facets().objectEnumerator(); e.hasMoreElements(); ) {
          SolrFacet facet=(SolrFacet)e.nextElement();
          if (facet.sort() != null && facet.sort().solrValue() != null) {
            solrQuery.setParam(""String_Node_Str"" + facet.key() + ""String_Node_Str""+ (FacetParams.FACET_SORT),facet.sort().solrValue());
          }
          if (facet.minCount() != null) {
            solrQuery.setParam(""String_Node_Str"" + facet.key() + ""String_Node_Str""+ (FacetParams.FACET_MINCOUNT),String.valueOf(facet.minCount()));
          }
          if (facet.limit() != null) {
            solrQuery.setParam(""String_Node_Str"" + facet.key() + ""String_Node_Str""+ (FacetParams.FACET_LIMIT),String.valueOf(facet.limit()));
          }
          boolean isExcludingFromCounts=true;
          boolean isMultiValue=false;
          EOAttribute attribute=entity.attributeNamed(facet.key());
          if (attribute == null) {
            throw new IllegalStateException(""String_Node_Str"" + entity.name() + ""String_Node_Str""+ facet.key());
          }
          isMultiValue=NSValueUtilities.booleanValueWithDefault((attribute.userInfo() == null ? null : attribute.userInfo().valueForKey(""String_Node_Str"")),false);
          if (isMultiValue && SolrFacet.Operator.AND.equals(facet.operator())) {
            isExcludingFromCounts=false;
          }
          if (facet.isQuery()) {
            String qualifierKeyPrefix=facet.key() + ""String_Node_Str"";
            for (Enumeration qualifierKeyEnumeration=facet.qualifierKeys().objectEnumerator(); qualifierKeyEnumeration.hasMoreElements(); ) {
              String qualifierKey=(String)qualifierKeyEnumeration.nextElement();
              String prefixedQualifierKey=qualifierKeyPrefix + qualifierKey;
              NSMutableDictionary<String,String> parameters=new NSMutableDictionary<String,String>();
              parameters.takeValueForKey(prefixedQualifierKey,ERSolrExpression.PARAMETER_KEY);
              if (isExcludingFromCounts) {
                parameters.takeValueForKey(facet.key(),ERSolrExpression.PARAMETER_EXCLUSION);
              }
              StringBuilder sb=new StringBuilder();
              ERSolrExpression.appendLocalParams(sb,parameters);
              EOQualifier facetQualifier=facet.qualifierForKey(qualifierKey);
              sb.append(solrExpression.solrStringForQualifier(facetQualifier));
              solrQuery.addFacetQuery(sb.toString());
            }
          }
 else {
            StringBuilder sb=new StringBuilder();
            if (isExcludingFromCounts) {
              ERSolrExpression.appendLocalParams(sb,new NSDictionary<String,String>(facet.key(),ERSolrExpression.PARAMETER_EXCLUSION));
            }
            sb.append(facet.key());
            solrQuery.addFacetField(sb.toString());
          }
          if (facet.selectedItems() != null && facet.selectedItems().count() > 0) {
            StringBuilder filterQuery=new StringBuilder();
            if (isExcludingFromCounts) {
              ERSolrExpression.appendLocalParams(filterQuery,new NSDictionary<String,String>(facet.key(),ERSolrExpression.PARAMETER_TAG));
            }
            filterQuery.append(""String_Node_Str"");
            for (Enumeration facetItemEnumeration=facet.selectedItems().objectEnumerator(); facetItemEnumeration.hasMoreElements(); ) {
              FacetItem selectedFacetItem=(FacetItem)facetItemEnumeration.nextElement();
              String operator=null;
              if (SolrFacet.Operator.NOT.equals(facet.operator())) {
                filterQuery.append(SolrFacet.Operator.NOT.toString()).append(""String_Node_Str"");
                operator=SolrFacet.Operator.AND.toString();
              }
 else {
                operator=facet.operator().toString();
              }
              if (selectedFacetItem.qualifier() != null) {
                filterQuery.append(solrExpression.solrStringForQualifier(selectedFacetItem.qualifier()));
              }
 else {
                filterQuery.append(facet.key()).append(""String_Node_Str"");
                ERSolrExpression.escapeAndAppend(selectedFacetItem.key(),filterQuery);
              }
              if (facetItemEnumeration.hasMoreElements()) {
                filterQuery.append(""String_Node_Str"").append(operator).append(""String_Node_Str"");
              }
            }
            filterQuery.append(""String_Node_Str"");
            solrQuery.addFilterQuery(filterQuery.toString());
          }
        }
      }
    }
    System.out.println(""String_Node_Str"" + qualifier);
    System.out.println(""String_Node_Str"" + ERXStringUtilities.urlDecode(solrQuery.toString()));
    CommonsHttpSolrServer solrServer=new CommonsHttpSolrServer(url.toURL());
    QueryResponse queryResponse=solrServer.query(solrQuery);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ERXStringUtilities.urlDecode(solrQuery.toString()));
      log.debug(""String_Node_Str"" + queryResponse.getElapsedTime() + ""String_Node_Str"");
    }
    if (solrFetchSpecification != null) {
      ERXSolrFetchSpecification.Result result=ERXSolrFetchSpecification.Result.newResult(queryResponse,solrFetchSpecification);
      solrFetchSpecification.setResult(result);
    }
    for (    SolrDocument solrDoc : queryResponse.getResults()) {
      NSMutableDictionary<String,Object> row=new NSMutableDictionary<String,Object>();
      for (      EOAttribute attribute : attributesToFetch) {
        if (solrDoc.containsKey(attribute.name())) {
          Object value=solrDoc.getFieldValue(attribute.name());
          if (value == null) {
            value=NSKeyValueCoding.NullValue;
          }
          if (value instanceof List) {
            value=value.toString();
          }
          row.takeValueForKey(value,attribute.name());
        }
      }
      _fetchedRows.addObject(row);
    }
  }
 catch (  EOGeneralAdaptorException e) {
    throw e;
  }
catch (  Throwable e) {
    e.printStackTrace();
    throw new EOGeneralAdaptorException(""String_Node_Str"" + entity.name() + ""String_Node_Str""+ fetchSpecification+ ""String_Node_Str""+ e.getMessage());
  }
}",0.9982387364354298
178976,"private static byte[] readDevice(DeviceHandler device,byte command) throws YubiHSMErrorException {
  byte[] result=new byte[0];
  if (device.available() > 0) {
    result=device.read(2);
  }
  if (result.length == 0) {
    reset(device);
    throw new YubiHSMErrorException(""String_Node_Str"");
  }
  if ((result[1] & Defines.YSM_RESPONSE) != 0) {
    log.debug(""String_Node_Str"",result[1],Defines.getCommandString((byte)(result[1] - Defines.YSM_RESPONSE)));
  }
  if (result[1] == (command | Defines.YSM_RESPONSE)) {
    int len=(int)result[0] - 1;
    return device.read(len);
  }
 else {
    reset(device);
    throw new YubiHSMErrorException(""String_Node_Str"");
  }
}","private static byte[] readDevice(DeviceHandler device,byte command) throws YubiHSMErrorException {
  byte[] result=new byte[0];
  if (device.available() > 0) {
    result=device.read(2);
  }
  if (result.length == 0) {
    reset(device);
    throw new YubiHSMErrorException(""String_Node_Str"");
  }
  if ((result[1] & Defines.YSM_RESPONSE) != 0) {
    log.debug(""String_Node_Str"",result[1],Defines.getCommandString((byte)(result[1] - Defines.YSM_RESPONSE)));
  }
  if (result[1] == (command | Defines.YSM_RESPONSE)) {
    int len=(int)result[0] - 1;
    return device.read(len);
  }
 else {
    reset(device);
    throw new YubiHSMErrorException(""String_Node_Str"" + Defines.getCommandString(command) + ""String_Node_Str""+ Defines.getCommandString((byte)(result[1] - Defines.YSM_RESPONSE)));
  }
}",0.9153005464480874
178977,"protected static synchronized byte[] execute(DeviceHandler device,byte command,byte[] data,boolean readResponse) throws YubiHSMErrorException {
  byte[] cmdBuffer;
  if (command != Defines.YSM_NULL) {
    cmdBuffer=new byte[]{(byte)(((data.length + 1) << 24) >> 24),command};
  }
 else {
    cmdBuffer=new byte[]{command};
  }
  log.debug(""String_Node_Str"",Utils.byteArrayToHex(Utils.concatAllArrays(cmdBuffer,data)));
  device.write(Utils.concatAllArrays(cmdBuffer,data));
  if (!readResponse) {
    try {
      Thread.sleep(10);
      return null;
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  try {
    int timeout=(int)device.getTimeout() * 1000;
    int sleptTime=0;
    log.debug(""String_Node_Str"" + Defines.getCommandString(command) + ""String_Node_Str""+ timeout);
    while (sleptTime <= timeout) {
      Thread.sleep(1);
      sleptTime+=1;
      if (device.available() > 0) {
        break;
      }
    }
    log.debug(""String_Node_Str"" + sleptTime + ""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return readDevice(device,command);
}","protected static synchronized byte[] execute(DeviceHandler device,byte command,byte[] data,boolean readResponse) throws YubiHSMErrorException {
  byte[] cmdBuffer;
  if (command != Defines.YSM_NULL) {
    cmdBuffer=new byte[]{(byte)(((data.length + 1) << 24) >> 24),command};
  }
 else {
    cmdBuffer=new byte[]{command};
  }
  log.debug(""String_Node_Str"",Utils.byteArrayToHex(Utils.concatAllArrays(cmdBuffer,data)));
  device.write(Utils.concatAllArrays(cmdBuffer,data));
  try {
    if (!readResponse) {
      Thread.sleep(10);
      return null;
    }
    int sleptTime=0;
    int timeout=100;
    if (device.getTimeout() > 0) {
      timeout=(int)(device.getTimeout() * 1000);
    }
    log.debug(""String_Node_Str"",Defines.getCommandString(command),timeout);
    while (sleptTime <= timeout) {
      Thread.sleep(1);
      sleptTime+=1;
      if (device.available() > 0) {
        break;
      }
    }
    log.debug(""String_Node_Str"",sleptTime);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  return readDevice(device,command);
}",0.8631386861313869
178978,"private void addKeys() throws Exception {
  for (int i=0; i < 32; i++) {
    int flags=1 << i;
    String key=new String();
    key=duplicateStr(String.format(""String_Node_Str"",i + 1),32);
    addKey(flags,i,key);
  }
  addKey(0x200,0x1000,duplicateStr(""String_Node_Str"",32));
  addKey(0xe000,0x1001,duplicateStr(""String_Node_Str"",16));
  addKey(0xffffffff,0x2000,duplicateStr(""String_Node_Str"",16));
  addKey(0x10000,0x3031,""String_Node_Str"");
}","private void addKeys() throws Exception {
  for (int i=0; i <= 30; i++) {
    int flags=1 << i;
    String key=new String();
    key=duplicateStr(String.format(""String_Node_Str"",i + 1),32);
    addKey(flags,i + 1,key);
  }
  addKey(0x200,0x1000,duplicateStr(""String_Node_Str"",32));
  addKey(0xe000,0x1001,duplicateStr(""String_Node_Str"",16));
  addKey(0xffffffff,0x2000,duplicateStr(""String_Node_Str"",16));
  addKey(0x10000,0x3031,""String_Node_Str"");
}",0.2274247491638795
178979,"/** 
 * Generate AEAD block of data buffer for a specific key. After a key has been loaded into the internal data buffer, this command can be used a number of times to get AEADs of the data buffer for different key handles. For example, to encrypt a YubiKey secrets to one or more Yubico KSM's that all have a YubiHSM attached to them.
 * @param device the YubiHSM device handler
 * @param nonce the nonce
 * @param keyHandle the key to use
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argmuent exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateBufferAEAD(DeviceHandler device,String nonce,int keyHandle) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle));
  byte[] result=CommandHandler.execute(device,Defines.YSM_BUFFER_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle,Defines.YSM_BUFFER_AEAD_GENERATE);
}","/** 
 * Generate AEAD block of data buffer for a specific key. After a key has been loaded into the internal data buffer, this command can be used a number of times to get AEADs of the data buffer for different key handles. For example, to encrypt a YubiKey secrets to one or more Yubico KSM's that all have a YubiHSM attached to them.
 * @param device the YubiHSM device handler
 * @param nonce the nonce
 * @param keyHandle the key to use
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateBufferAEAD(DeviceHandler device,String nonce,int keyHandle) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle));
  byte[] result=CommandHandler.execute(device,Defines.YSM_BUFFER_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle,Defines.YSM_BUFFER_AEAD_GENERATE);
}",0.9982920580700256
178980,"/** 
 * Validate an AEAD using the YubiHSM, matching it against some known plain text. Matching is done inside the YubiHSM so the decrypted AEAD is never exposed.
 * @param device the YubiHSM device
 * @param nonce the nonce or public_id
 * @param keyHandle the key to use
 * @param aead the AEAD
 * @param plaintext the plain text string
 * @return returns true if validation was a success, false if the validation failed
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static boolean validateAEAD(DeviceHandler device,String nonce,int keyHandle,String aead,String plaintext) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] aeadBA=Utils.validateByteArray(""String_Node_Str"",Utils.hexToByteArray(aead),Defines.YSM_MAX_KEY_SIZE + Defines.YSM_AEAD_MAC_SIZE,0,0);
  byte[] plainBA=Utils.validateByteArray(""String_Node_Str"",plaintext.getBytes(),0,aeadBA.length - Defines.YSM_AEAD_MAC_SIZE,YubiHSM.minHashLength);
  byte[] plainAndAead=Utils.concatAllArrays(plainBA,aeadBA);
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle),Utils.addLengthToData(plainAndAead));
  byte[] result=CommandHandler.execute(device,Defines.YSM_AEAD_DECRYPT_CMP,cmdBuffer,true);
  return parseValidationResult(result,nonce,keyHandle);
}","/** 
 * Validate an AEAD using the YubiHSM, matching it against some known plain text. Matching is done inside the YubiHSM so the decrypted AEAD is never exposed.
 * @param device the YubiHSM device
 * @param nonce the nonce or public_id
 * @param keyHandle the key to use
 * @param aead the AEAD
 * @param plaintext the plain text string
 * @return returns true if validation was a success, false if the validation failed
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static boolean validateAEAD(DeviceHandler device,String nonce,int keyHandle,String aead,String plaintext) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] aeadBA=Utils.hexToByteArray(aead);
  byte[] plainBA=Utils.validateByteArray(""String_Node_Str"",plaintext.getBytes(),0,aeadBA.length - Defines.YSM_AEAD_MAC_SIZE,YubiHSM.minHashLength);
  byte[] plainAndAead=Utils.concatAllArrays(plainBA,aeadBA);
  if (plainAndAead.length > (Defines.YSM_MAX_PKT_SIZE - 0x10))   throw new YubiHSMInputException(""String_Node_Str"");
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle),Utils.addLengthToData(plainAndAead));
  byte[] result=CommandHandler.execute(device,Defines.YSM_AEAD_DECRYPT_CMP,cmdBuffer,true);
  return parseValidationResult(result,nonce,keyHandle);
}",0.8331654917757637
178981,"/** 
 * Generate AEAD block of data buffer for a specific key. After a key has been loaded into the internal data buffer, this command can be used a number of times to get AEADs of the data buffer for different key handles. For example, to encrypt a YubiKey secrets to one or more Yubico KSM's that all have a YubiHSM attached to them.
 * @param device the YubiHSM device handler
 * @param nonce the nonce
 * @param keyHandle the key to use
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argmuent exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateBufferAEAD(DeviceHandler device,String nonce,int keyHandle) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle));
  byte[] result=CommandHandler.execute(device,Defines.YSM_BUFFER_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle);
}","/** 
 * Generate AEAD block of data buffer for a specific key. After a key has been loaded into the internal data buffer, this command can be used a number of times to get AEADs of the data buffer for different key handles. For example, to encrypt a YubiKey secrets to one or more Yubico KSM's that all have a YubiHSM attached to them.
 * @param device the YubiHSM device handler
 * @param nonce the nonce
 * @param keyHandle the key to use
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argmuent exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateBufferAEAD(DeviceHandler device,String nonce,int keyHandle) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle));
  byte[] result=CommandHandler.execute(device,Defines.YSM_BUFFER_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle,Defines.YSM_BUFFER_AEAD_GENERATE);
}",0.9857080987440452
178982,"/** 
 * Generate AEADCmd block from data for a specific key and nonce.
 * @param device the YubiHSM device handler
 * @param nonce the nonce
 * @param keyHandle the key to use
 * @param data is either a string or a YubiHSM YubiKey secret
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateAEAD(DeviceHandler device,String nonce,int keyHandle,String data) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] newdata=Utils.validateByteArray(""String_Node_Str"",data.getBytes(),0,0,YubiHSM.minHashLength);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle),Utils.addLengthToData(newdata));
  byte[] result=CommandHandler.execute(device,Defines.YSM_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle);
}","/** 
 * Generate AEADCmd block from data for a specific key and nonce.
 * @param device the YubiHSM device handler
 * @param nonce the nonce
 * @param keyHandle the key to use
 * @param data is either a string or a YubiHSM YubiKey secret
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateAEAD(DeviceHandler device,String nonce,int keyHandle,String data) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] newdata=Utils.validateByteArray(""String_Node_Str"",data.getBytes(),0,0,YubiHSM.minHashLength);
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle),Utils.addLengthToData(newdata));
  byte[] result=CommandHandler.execute(device,Defines.YSM_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle,Defines.YSM_AEAD_GENERATE);
}",0.9879740980573544
178983,"/** 
 * Parse the response from the YubiHSM for a previous command.
 * @param data the data from the YubiHSM
 * @param nonce the original nonce
 * @param keyHandle the key used to generate AEAD
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
private static Map<String,String> parseResult(byte[] data,String nonce,int keyHandle) throws YubiHSMCommandFailedException, YubiHSMErrorException {
  Map<String,String> result=new HashMap<String,String>();
  if (data[10] == Defines.YSM_STATUS_OK) {
    byte[] aead=Utils.rangeOfByteArray(data,Defines.YSM_AEAD_NONCE_SIZE + 6,data[11]);
    Utils.validateCmdResponseBA(""String_Node_Str"",Utils.rangeOfByteArray(data,6,4),Utils.leIntToBA(keyHandle));
    result.put(""String_Node_Str"",Utils.validateCmdResponseString(""String_Node_Str"",Utils.byteArrayToHex(Utils.rangeOfByteArray(data,0,Defines.YSM_AEAD_NONCE_SIZE)),nonce));
    result.put(""String_Node_Str"",Utils.byteArrayToHex(aead));
  }
 else {
    throw new YubiHSMCommandFailedException(""String_Node_Str"" + Defines.getCommandString(Defines.YSM_AEAD_GENERATE) + ""String_Node_Str""+ Defines.getCommandStatus(data[10]));
  }
  return result;
}","/** 
 * Parse the response from the YubiHSM for a previous command.
 * @param data the data from the YubiHSM
 * @param nonce the original nonce
 * @param keyHandle the key used to generate AEAD
 * @param command the YubiHSM command executed
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
private static Map<String,String> parseResult(byte[] data,String nonce,int keyHandle,byte command) throws YubiHSMCommandFailedException, YubiHSMErrorException {
  Map<String,String> result=new HashMap<String,String>();
  if (data[10] == Defines.YSM_STATUS_OK) {
    byte[] aead=Utils.rangeOfByteArray(data,Defines.YSM_AEAD_NONCE_SIZE + 6,data[11]);
    Utils.validateCmdResponseBA(""String_Node_Str"",Utils.rangeOfByteArray(data,6,4),Utils.leIntToBA(keyHandle));
    result.put(""String_Node_Str"",Utils.validateCmdResponseString(""String_Node_Str"",Utils.byteArrayToHex(Utils.rangeOfByteArray(data,0,Defines.YSM_AEAD_NONCE_SIZE)),nonce));
    result.put(""String_Node_Str"",Utils.byteArrayToHex(aead));
  }
 else {
    throw new YubiHSMCommandFailedException(""String_Node_Str"" + Defines.getCommandString(command) + ""String_Node_Str""+ Defines.getCommandStatus(data[10]));
  }
  return result;
}",0.963808025177026
178984,"/** 
 * Generate a random AEAD block using the YubiHSM internal TRNG. To generate a secret for a YubiKey use public_id as nonce.
 * @param device the YubiHSM device handler
 * @param nonce the nonce or public_id
 * @param keyHandle the key to use
 * @param size the resulting byte length of the AEAD
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateRandomAEAD(DeviceHandler device,String nonce,int keyHandle,int size) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] len={(byte)((size << 24) >> 24)};
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle),len);
  byte[] result=CommandHandler.execute(device,Defines.YSM_RANDOM_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle);
}","/** 
 * Generate a random AEAD block using the YubiHSM internal TRNG. To generate a secret for a YubiKey use public_id as nonce.
 * @param device the YubiHSM device handler
 * @param nonce the nonce or public_id
 * @param keyHandle the key to use
 * @param size the resulting byte length of the AEAD
 * @return a hash map with the AEAD and nonce
 * @throws YubiHSMInputException argument exceptions
 * @throws YubiHSMCommandFailedException command failed exception
 * @throws YubiHSMErrorException error exception
 */
public static Map<String,String> generateRandomAEAD(DeviceHandler device,String nonce,int keyHandle,int size) throws YubiHSMInputException, YubiHSMCommandFailedException, YubiHSMErrorException {
  byte[] nonceBA=Utils.validateNonce(Utils.hexToByteArray(nonce),true);
  byte[] len={(byte)((size << 24) >> 24)};
  byte[] cmdBuffer=Utils.concatAllArrays(nonceBA,Utils.leIntToBA(keyHandle),len);
  byte[] result=CommandHandler.execute(device,Defines.YSM_RANDOM_AEAD_GENERATE,cmdBuffer,true);
  return parseResult(result,nonce,keyHandle,Defines.YSM_RANDOM_AEAD_GENERATE);
}",0.9845722300140252
178985,"public void addPiece(){
  int type=(int)(Math.random() * 7);
  if (type == 0) {
    board[0][3]=new Block(0,3,""String_Node_Str"",1);
    board[0][4]=new Block(0,4,""String_Node_Str"",2);
    board[0][5]=new Block(0,5,""String_Node_Str"",3);
    board[0][6]=new Block(0,6,""String_Node_Str"",4);
  }
 else   if (type == 1) {
    board[0][3]=new Block(0,3,""String_Node_Str"",1);
    board[1][3]=new Block(1,3,""String_Node_Str"",2);
    board[1][4]=new Block(1,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
  }
 else   if (type == 2) {
    board[1][3]=new Block(1,3,""String_Node_Str"",1);
    board[1][4]=new Block(1,4,""String_Node_Str"",2);
    board[1][5]=new Block(1,5,""String_Node_Str"",3);
    board[0][5]=new Block(0,5,""String_Node_Str"",4);
  }
 else   if (type == 3) {
    board[0][4]=new Block(0,4,""String_Node_Str"",1);
    board[0][5]=new Block(0,5,""String_Node_Str"",2);
    board[1][4]=new Block(1,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
  }
 else   if (type == 4) {
    board[1][3]=new Block(1,3,""String_Node_Str"",1);
    board[1][4]=new Block(1,4,""String_Node_Str"",2);
    board[0][4]=new Block(0,4,""String_Node_Str"",3);
    board[0][5]=new Block(0,5,""String_Node_Str"",4);
  }
 else   if (type == 5) {
    board[1][3]=new Block(1,3,""String_Node_Str"",1);
    board[1][4]=new Block(1,4,""String_Node_Str"",2);
    board[0][4]=new Block(0,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
  }
 else {
    board[0][3]=new Block(0,3,""String_Node_Str"",1);
    board[0][4]=new Block(0,4,""String_Node_Str"",2);
    board[1][4]=new Block(1,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
  }
  int at=0;
  for (int i=0; i < 2; i++) {
    for (int j=3; j < 7; j++) {
      if (board[i][j] != null) {
        piece[at]=board[i][j];
        at++;
      }
    }
  }
}","public void addPiece(){
  int type=(int)(Math.random() * 7);
  if (type == 0) {
    board[0][3]=new Block(0,3,""String_Node_Str"",1);
    board[0][4]=new Block(0,4,""String_Node_Str"",2);
    board[0][5]=new Block(0,5,""String_Node_Str"",3);
    board[0][6]=new Block(0,6,""String_Node_Str"",4);
  }
 else   if (type == 1) {
    board[1][3]=new Block(1,3,""String_Node_Str"",2);
    board[1][4]=new Block(1,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
    board[0][3]=new Block(0,3,""String_Node_Str"",1);
  }
 else   if (type == 2) {
    board[1][3]=new Block(1,3,""String_Node_Str"",1);
    board[1][4]=new Block(1,4,""String_Node_Str"",2);
    board[1][5]=new Block(1,5,""String_Node_Str"",3);
    board[0][5]=new Block(0,5,""String_Node_Str"",4);
  }
 else   if (type == 3) {
    board[1][4]=new Block(1,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
    board[0][4]=new Block(0,4,""String_Node_Str"",1);
    board[0][5]=new Block(0,5,""String_Node_Str"",2);
  }
 else   if (type == 4) {
    board[1][3]=new Block(1,3,""String_Node_Str"",1);
    board[1][4]=new Block(1,4,""String_Node_Str"",2);
    board[0][4]=new Block(0,4,""String_Node_Str"",3);
    board[0][5]=new Block(0,5,""String_Node_Str"",4);
  }
 else   if (type == 5) {
    board[1][3]=new Block(1,3,""String_Node_Str"",1);
    board[1][4]=new Block(1,4,""String_Node_Str"",2);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
    board[0][4]=new Block(0,4,""String_Node_Str"",3);
  }
 else {
    board[1][4]=new Block(1,4,""String_Node_Str"",3);
    board[1][5]=new Block(1,5,""String_Node_Str"",4);
    board[0][3]=new Block(0,3,""String_Node_Str"",1);
    board[0][4]=new Block(0,4,""String_Node_Str"",2);
  }
  int at=0;
  for (int i=0; i < 2; i++) {
    for (int j=3; j < 7; j++) {
      if (board[i][j] != null) {
        piece[at]=board[i][j];
        at++;
      }
    }
  }
}",0.80406852248394
178986,"public Board(){
  gameboard=new int[3][3];
  isXTurn=true;
  myBot=new DumbBot(this,2);
}","public Board(){
  gameboard=new int[3][3];
  isXTurn=true;
  myBot=new GeniusBot(this,2);
}",0.9555555555555556
178987,"public int[][] getIntArray(){
  return gameboard;
}","public int[][] getIntArray(){
  int[][] temp=new int[3][3];
  for (int r=0; r < 3; r++) {
    for (int c=0; c < 3; c++) {
      temp[r][c]=gameboard[r][c];
    }
  }
  return temp;
}",0.4034334763948498
178988,"public int evaluate(int x,int y){
  int ans=0;
  if (!infoBoard.canMove(x,y))   return -100;
  if (isWinner(x,y))   ans+=500;
  if (isBlocker(x,y))   ans+=250;
  if (isCenter(x,y))   ans+=100;
  if (isCorner(x,y))   ans+=25;
  return ans + (int)(Math.random() * 10);
}","public int evaluate(int x,int y){
  int ans=0;
  if (!infoBoard.canMove(x,y))   return -100;
  if (isWinner(x,y))   ans+=500;
  if (isBlocker(x,y))   ans+=250;
  if (isCenter(x,y))   ans+=100;
  if (isCorner(x,y))   ans+=10;
  if (catchCornerTrap(x,y))   ans+=50;
  return ans + (int)(Math.random() * 5);
}",0.9233449477351916
178989,"public Board(){
  gameboard=new int[3][3];
  isXTurn=true;
}","public Board(){
  gameboard=new int[3][3];
  isXTurn=true;
  myBot=new DumbBot(this,2);
}",0.8053691275167785
178990,"public boolean makeMove(int x,int y){
  if (gameboard[x][y] == 0) {
    if (isXTurn) {
      gameboard[x][y]=1;
    }
 else {
      gameboard[x][y]=2;
    }
    return true;
  }
  return false;
}","public boolean makeMove(int x,int y){
  if (gameboard[x][y] == 0) {
    if (isXTurn) {
      gameboard[x][y]=1;
    }
 else {
      gameboard[x][y]=2;
    }
    switchTurn();
    return true;
  }
  return false;
}",0.9558823529411764
178991,"public void makeNextMove(){
  getNextMove();
  gameBoard.makeMove(next_move_xcor,next_move_ycor);
  displayBoard.display();
}","public void makeNextMove(){
  if (!gameBoard.isFilled()) {
    getNextMove();
    gameBoard.makeMove(next_move_xcor,next_move_ycor);
  }
}",0.7756653992395437
178992,"public DumbBot(Board newboard,int n,GameBoard display){
  gameBoard=newboard;
  displayBoard=display;
  team=n;
}","public DumbBot(Board newboard,int n){
  gameBoard=newboard;
  team=n;
}",0.7717391304347826
178993,"@Override public void sendTokens(Map<Connector,WorkToken> tokens){
  throw new IllegalStateException(""String_Node_Str"");
}","@Override public void sendTokens(Map<Connector,WorkToken> tokens){
  tokenOut.set(true);
  throw new IllegalStateException(""String_Node_Str"");
}",0.9172932330827068
178994,"@SuppressWarnings(""String_Node_Str"") private void cleanUpStartNodes(BusinessProcess process){
  acquireEntityManager();
  List<CatchEventNode> nodes=em.get().createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",process).getResultList();
  for (  CatchEventNode node : nodes) {
    if (em.get().contains(node)) {
      em.get().remove(node);
    }
  }
  releaseEntityManager();
}","@SuppressWarnings(""String_Node_Str"") private void cleanUpStartNodes(BusinessProcess process){
  acquireEntityManager();
  List<CatchEventNode> nodes=em.get().createNamedQuery(""String_Node_Str"").setParameter(""String_Node_Str"",process).getResultList();
  for (  CatchEventNode node : nodes) {
    em.get().remove(node);
  }
  releaseEntityManager();
}",0.941970310391363
178995,"private Object merge(final Object o){
  if (isRunner()) {
    return em.get().merge(o);
  }
 else {
    final LinkedBlockingQueue<Object> kicker=new LinkedBlockingQueue<Object>();
    executor.execute(new Runnable(){
      @Override public void run(){
        acquireEntityManager();
        beginTransaction();
        Object mergedEntity=em.get().merge(o);
        commitTransaction();
        releaseEntityManager();
        kicker.add(mergedEntity);
      }
    }
);
    try {
      Object entity=null;
      int retries=40;
      while (entity == null && retries > 0) {
        --retries;
        entity=kicker.poll(500,TimeUnit.MILLISECONDS);
      }
      return entity;
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  return null;
}","private Object merge(final Object o){
  if (isRunner()) {
    return em.get().merge(o);
  }
 else {
    final LinkedBlockingQueue<Object> kicker=new LinkedBlockingQueue<Object>();
    executor.execute(new Runnable(){
      @Override public void run(){
        acquireEntityManager();
        beginTransaction();
        Object mergedEntity=em.get().merge(o);
        commitTransaction();
        em.get().detach(mergedEntity);
        releaseEntityManager();
        kicker.add(mergedEntity);
      }
    }
);
    try {
      Object entity=null;
      int retries=40;
      while (entity == null && retries > 0) {
        --retries;
        entity=kicker.poll(500,TimeUnit.MILLISECONDS);
      }
      return entity;
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  return null;
}",0.9759110562075356
178996,"public PersistentWorkSession(String id,EntityManagerFactory emf,AnnotationDictionary dictionary){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (SessionRegistry.getSession(id) != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (emf == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.emf=emf;
  this.sessionId=id;
  if (dictionary != null) {
    this.dictionary=dictionary;
  }
 else {
    dictionary=new AnnotationDictionary(){
      @Override public void build(){
      }
    }
;
    dictionary.setScanned(true);
  }
  SessionRegistry.addSession(this);
  workItems=new LinkedBlockingQueue<WorkItem>();
  executor=Executors.newFixedThreadPool(10);
  em=new ThreadLocal<EntityManager>();
  acquireCounter=new ThreadLocal<Integer>();
  future=executor.submit((Runnable)this);
}","public PersistentWorkSession(String id,EntityManagerFactory emf,AnnotationDictionary dictionary){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (SessionRegistry.getSession(id) != null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (emf == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.emf=emf;
  this.sessionId=id;
  if (dictionary != null) {
    this.dictionary=dictionary;
  }
 else {
    dictionary=new AnnotationDictionary(){
      @Override public void build(){
      }
    }
;
    dictionary.setScanned(true);
  }
  SessionRegistry.addSession(this);
  workItems=new LinkedBlockingQueue<WorkItem>();
  executor=Executors.newFixedThreadPool(10);
  em=new ThreadLocal<EntityManager>();
  acquireCounter=new ThreadLocal<Integer>();
  tokenOut=new ThreadLocal<Boolean>();
  future=executor.submit((Runnable)this);
}",0.9785831960461284
178997,"@Override public long createProcess(String id){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!getProcessDefinitions().containsKey(id)) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  TProcess tProcess=getProcessDefinitions().get(id).getProcessDefinition();
  BusinessProcess process;
  AnnotatedClass ac=dictionary.findProcess(id,tProcess.getName());
  if (ac == null) {
    process=new BusinessProcess();
  }
 else {
    Object entity;
    try {
      entity=Class.forName(ac.getClazz()).newInstance();
    }
 catch (    Exception e) {
      throw new IllegalStateException(""String_Node_Str"" + ac.getClazz() + ""String_Node_Str""+ e);
    }
    if (!(entity instanceof BusinessProcess)) {
      throw new IllegalStateException(""String_Node_Str"" + ac.getClazz() + ""String_Node_Str"");
    }
    process=(BusinessProcess)entity;
  }
  acquireEntityManager();
  process.setDefinitionId(id);
  process.setSessionId(getId());
  persist(process);
  final List<TActivity> startActivities=new ArrayList<TActivity>();
  final List<TCatchEvent> noneStartEvents=new ArrayList<TCatchEvent>();
  final List<TCatchEvent> startEvents=new ArrayList<TCatchEvent>();
  forEachStartNode(tProcess,new EachNodeHandler(){
    public boolean node(    TFlowNode tNode){
      if (tNode instanceof TCatchEvent) {
        if (((TCatchEvent)tNode).getEventDefinition().isEmpty()) {
          noneStartEvents.add((TCatchEvent)tNode);
        }
 else {
          startEvents.add((TCatchEvent)tNode);
        }
      }
 else       if (tNode instanceof TActivity) {
        startActivities.add((TActivity)tNode);
      }
      return true;
    }
  }
);
  for (  TActivity activity : startActivities) {
    Node node=createNode(activity,process);
    node.tokenIn(new WorkToken(),null);
    merge(node);
  }
  if (noneStartEvents.isEmpty()) {
    for (    TCatchEvent start : startEvents) {
      CatchEventNode node=(CatchEventNode)createNode(start,process);
      node.setStartEvent(true);
      merge(node);
    }
  }
 else {
    CatchEventNode node=(CatchEventNode)createNode(noneStartEvents.get(0),process);
    node.eventIn(new EventToken());
    node.setStartEvent(true);
    merge(node);
  }
  if (isRunner()) {
    em.get().flush();
  }
  releaseEntityManager();
  return process.getInstanceId();
}","@Override public long createProcess(String id){
  if (id == null || id.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!getProcessDefinitions().containsKey(id)) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  TProcess tProcess=getProcessDefinitions().get(id).getProcessDefinition();
  BusinessProcess process;
  AnnotatedClass ac=dictionary.findProcess(id,tProcess.getName());
  if (ac == null) {
    process=new BusinessProcess();
  }
 else {
    Object entity;
    try {
      entity=Class.forName(ac.getClazz()).newInstance();
    }
 catch (    Exception e) {
      throw new IllegalStateException(""String_Node_Str"" + ac.getClazz() + ""String_Node_Str""+ e);
    }
    if (!(entity instanceof BusinessProcess)) {
      throw new IllegalStateException(""String_Node_Str"" + ac.getClazz() + ""String_Node_Str"");
    }
    process=(BusinessProcess)entity;
  }
  acquireEntityManager();
  process.setDefinitionId(id);
  process.setSessionId(getId());
  persist(process);
  final List<TActivity> startActivities=new ArrayList<TActivity>();
  final List<TCatchEvent> noneStartEvents=new ArrayList<TCatchEvent>();
  final List<TCatchEvent> startEvents=new ArrayList<TCatchEvent>();
  forEachStartNode(tProcess,new EachNodeHandler(){
    public boolean node(    TFlowNode tNode){
      if (tNode instanceof TCatchEvent) {
        if (((TCatchEvent)tNode).getEventDefinition().isEmpty()) {
          noneStartEvents.add((TCatchEvent)tNode);
        }
 else {
          startEvents.add((TCatchEvent)tNode);
        }
      }
 else       if (tNode instanceof TActivity) {
        startActivities.add((TActivity)tNode);
      }
      return true;
    }
  }
);
  for (  TActivity activity : startActivities) {
    Node node=createNode(activity,process);
    tokenOut.set(false);
    node.tokenIn(new WorkToken(),null);
    if (!isRunner() && !tokenOut.get()) {
      merge(node);
    }
  }
  if (noneStartEvents.isEmpty()) {
    for (    TCatchEvent start : startEvents) {
      CatchEventNode node=(CatchEventNode)createNode(start,process);
      node.setStartEvent(true);
      if (!isRunner()) {
        merge(node);
      }
    }
  }
 else {
    CatchEventNode node=(CatchEventNode)createNode(noneStartEvents.get(0),process);
    tokenOut.set(false);
    node.eventIn(new EventToken());
    node.setStartEvent(true);
    if (!isRunner() && !tokenOut.get()) {
      merge(node);
    }
  }
  if (isRunner()) {
    em.get().flush();
  }
  releaseEntityManager();
  return process.getInstanceId();
}",0.9532293986636972
178998,"@Override public void sendToken(WorkToken token,Node fromNode){
  TokenFromNode tokenFromNode=new TokenFromNode();
  tokenFromNode.setToken(token);
  BusinessProcess process=fromNode.getProcess();
  tokenFromNode.setProcessInstanceId(process.getInstanceId());
  tokenFromNode.setProcessDefinitionId(process.getDefinitionId());
  tokenFromNode.setNodeId(fromNode.getNodeId());
  workItems.add(tokenFromNode);
}","@Override public void sendToken(WorkToken token,Node fromNode){
  tokenOut.set(true);
  if (!isRunner()) {
    fromNode=(Node)merge(fromNode);
  }
  TokenFromNode tokenFromNode=new TokenFromNode();
  tokenFromNode.setToken(token);
  BusinessProcess process=fromNode.getProcess();
  tokenFromNode.setProcessInstanceId(process.getInstanceId());
  tokenFromNode.setProcessDefinitionId(process.getDefinitionId());
  tokenFromNode.setNodeId(fromNode.getNodeId());
  workItems.add(tokenFromNode);
}",0.9078801331853495
178999,"private void persistList(final List<Object> entities){
  if (isRunner()) {
    for (    Object o : entities) {
      em.get().persist(o);
    }
  }
 else {
    final LinkedBlockingQueue<String> kicker=new LinkedBlockingQueue<String>();
    executor.execute(new Runnable(){
      @Override public void run(){
        acquireEntityManager();
        beginTransaction();
        for (        Object o : entities) {
          em.get().persist(o);
        }
        commitTransaction();
        releaseEntityManager();
        kicker.add(""String_Node_Str"");
      }
    }
);
    try {
      String result=null;
      int retries=40;
      while (result == null && retries > 0) {
        --retries;
        result=kicker.poll(500,TimeUnit.MILLISECONDS);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","private void persistList(final List<Object> entities){
  if (isRunner()) {
    for (    Object o : entities) {
      em.get().persist(o);
    }
  }
 else {
    final LinkedBlockingQueue<String> kicker=new LinkedBlockingQueue<String>();
    executor.execute(new Runnable(){
      @Override public void run(){
        acquireEntityManager();
        beginTransaction();
        for (        Object o : entities) {
          em.get().persist(o);
        }
        commitTransaction();
        for (        Object o : entities) {
          em.get().detach(o);
        }
        releaseEntityManager();
        kicker.add(""String_Node_Str"");
      }
    }
);
    try {
      String result=null;
      int retries=40;
      while (result == null && retries > 0) {
        --retries;
        result=kicker.poll(500,TimeUnit.MILLISECONDS);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}",0.953072625698324
179000,"@Test public void testHelloWorld() throws Exception {
  long processId=session.createProcess(""String_Node_Str"");
  Assert.assertTrue(processId > 0);
  EntityManager em=emf.createEntityManager();
  BusinessProcess process=em.find(HelpDeskProcess.class,processId);
  Assert.assertNotNull(process);
  em.detach(process);
  em.close();
  System.out.println(""String_Node_Str"");
  Thread.sleep(2000);
  Assert.assertTrue(session.isRunning());
  List<UserTask> userTasks=session.getUserTasks();
  Assert.assertTrue(userTasks.size() == 1);
  UserTask userTask=userTasks.get(0);
  Assert.assertTrue(userTask.getTaskState() == TaskState.Created);
}","@Test public void testHelloWorld() throws Exception {
  long processId=session.createProcess(""String_Node_Str"");
  Assert.assertTrue(processId > 0);
  EntityManager em=emf.createEntityManager();
  BusinessProcess process=em.find(BusinessProcess.class,processId);
  Assert.assertNotNull(process);
  em.detach(process);
  em.close();
  System.out.println(""String_Node_Str"");
  Thread.sleep(2000);
  Assert.assertTrue(session.isRunning());
  List<UserTask> userTasks=session.getUserTasks();
  Assert.assertTrue(userTasks.size() == 1);
  UserTask userTask=userTasks.get(0);
  Assert.assertTrue(userTask.getTaskState() == TaskState.Created);
}",0.987460815047022
