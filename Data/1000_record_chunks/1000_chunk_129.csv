record_number,buggy_code,fixed_code,code_similarity
128001,"private static void generatePigudfInfor(JobInfo jobInfo,ProcessItem selectedProcessItem,IProcess currentProcess,IProcessor processor,Set<ModuleNeeded> neededLibraries) throws ProcessorException {
  Set<String> jarList=new HashSet<String>();
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  for (  ModuleNeeded module : neededModules) {
    jarList.add(module.getModuleName());
  }
  CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
  String pigModuleName=null;
  if (selectedProcessItem != null) {
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    pigModuleName=service.exportPigudf(processor,selectedProcessItem.getProperty(),exportConfig);
  }
  Set<ModuleNeeded> test=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  if (test != null && pigModuleName != null) {
    test.add(new ModuleNeeded(null,pigModuleName,null,true));
  }
}","private static void generatePigudfInfor(JobInfo jobInfo,ProcessItem selectedProcessItem,IProcess currentProcess,IProcessor processor,Set<ModuleNeeded> neededLibraries) throws ProcessorException {
  Set<String> jarList=new HashSet<String>();
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  for (  ModuleNeeded module : neededModules) {
    jarList.add(module.getModuleName());
  }
  Set<String> pigudfNeededWithSubjobPerJob=LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  String pigModuleName=null;
  if (selectedProcessItem != null && !pigudfNeededWithSubjobPerJob.isEmpty()) {
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    pigModuleName=service.exportPigudf(processor,selectedProcessItem.getProperty(),exportConfig);
  }
  Set<ModuleNeeded> test=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  if (test != null && pigModuleName != null) {
    test.add(new ModuleNeeded(null,pigModuleName,null,true));
  }
}",0.8437768240343347
128002,"public boolean saveProcess(IProgressMonitor monitor,IPath path,final boolean avoidSaveRelations){
  try {
    if (monitor != null) {
      monitor.beginTask(""String_Node_Str"",100);
    }
    final ProcessType processType=loadedProcess.saveXmlFile();
    if (monitor != null) {
      monitor.worked(40);
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    final IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (path != null) {
    }
 else {
      RepositoryWorkUnit rwu=new RepositoryWorkUnit(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
          resetItem();
          if (getItem() instanceof JobletProcessItem) {
            ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
          }
 else           if (getItem() instanceof ProcessItem) {
            ((ProcessItem)getItem()).setProcess(processType);
          }
          factory.save(getItem());
          loadedProcess.setProperty(getItem().getProperty());
          if (!avoidSaveRelations) {
            RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
          }
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      factory.executeRepositoryWorkUnit(rwu);
      if (monitor != null) {
        monitor.worked(50);
      }
    }
    if (monitor != null) {
      monitor.worked(10);
    }
    return true;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
 finally {
    if (monitor != null) {
      monitor.done();
    }
  }
}","public boolean saveProcess(final IProgressMonitor monitor,IPath path,final boolean avoidSaveRelations){
  try {
    if (monitor != null) {
      monitor.beginTask(""String_Node_Str"",100);
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    final IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (path != null) {
    }
 else {
      RepositoryWorkUnit rwu=new RepositoryWorkUnit(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
          resetItem();
          ProcessType processType;
          try {
            processType=loadedProcess.saveXmlFile();
          }
 catch (          IOException e) {
            throw new PersistenceException(e);
          }
          if (monitor != null) {
            monitor.worked(40);
          }
          if (getItem() instanceof JobletProcessItem) {
            ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
          }
 else           if (getItem() instanceof ProcessItem) {
            ((ProcessItem)getItem()).setProcess(processType);
          }
          factory.save(getItem());
          loadedProcess.setProperty(getItem().getProperty());
          if (!avoidSaveRelations) {
            RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
          }
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      factory.executeRepositoryWorkUnit(rwu);
      if (monitor != null) {
        monitor.worked(50);
      }
    }
    if (monitor != null) {
      monitor.worked(10);
    }
    return true;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
 finally {
    if (monitor != null) {
      monitor.done();
    }
  }
}",0.4978142076502732
128003,"@Override protected void run() throws LoginException, PersistenceException {
  resetItem();
  if (getItem() instanceof JobletProcessItem) {
    ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
  }
 else   if (getItem() instanceof ProcessItem) {
    ((ProcessItem)getItem()).setProcess(processType);
  }
  factory.save(getItem());
  loadedProcess.setProperty(getItem().getProperty());
  if (!avoidSaveRelations) {
    RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  resetItem();
  ProcessType processType;
  try {
    processType=loadedProcess.saveXmlFile();
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
  if (monitor != null) {
    monitor.worked(40);
  }
  if (getItem() instanceof JobletProcessItem) {
    ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
  }
 else   if (getItem() instanceof ProcessItem) {
    ((ProcessItem)getItem()).setProcess(processType);
  }
  factory.save(getItem());
  loadedProcess.setProperty(getItem().getProperty());
  if (!avoidSaveRelations) {
    RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
  }
}",0.8329297820823245
128004,"private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
  }
  if (screenshots != null && !screenshots.isEmpty()) {
    itemResource.getContents().clear();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
  return itemResource;
}","private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true,true);
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
  }
  if (screenshots != null && !screenshots.isEmpty()) {
    itemResource.getContents().clear();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
  return itemResource;
}",0.9957155098543272
128005,"/** 
 * DOC plv Comment method ""createLinkGroup"".
 * @param parent
 */
private void createHadoopLinkPart(Composite parent){
  hadoopLinkComp=new Composite(parent,SWT.NONE);
  hadoopLinkComp.setLayout(new GridLayout(5,false));
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).applyTo(hadoopLinkComp);
  String[] types=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  hcPropertyTypeCombo=new LabelledCombo(hadoopLinkComp,Messages.getString(""String_Node_Str""),""String_Node_Str"",types,1,true);
  hcPropertyTypeCombo.select(0);
  GridDataFactory.fillDefaults().span(1,1).align(SWT.FILL,SWT.CENTER).applyTo(hcPropertyTypeCombo.getCombo());
  hcRepositoryText=new Text(hadoopLinkComp,SWT.BORDER);
  hcRepositoryText.setEditable(false);
  GridDataFactory.fillDefaults().grab(true,false).hint(SWT.DEFAULT,hcPropertyTypeCombo.getCombo().getItemHeight()).span(2,1).align(SWT.FILL,SWT.CENTER).applyTo(hcRepositoryText);
  hcSelectBtn=new Button(hadoopLinkComp,SWT.PUSH);
  hcSelectBtn.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  GridDataFactory.fillDefaults().grab(false,false).hint(SWT.DEFAULT,hcPropertyTypeCombo.getCombo().getItemHeight()).align(SWT.BEGINNING,SWT.FILL).span(1,1).applyTo(hcSelectBtn);
  hideHCLinkSettings(true);
}","/** 
 * DOC plv Comment method ""createLinkGroup"".
 * @param parent
 */
private void createHadoopLinkPart(Composite parent){
  hadoopLinkComp=new Composite(parent,SWT.NONE);
  hadoopLinkComp.setLayout(new GridLayout(4,false));
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).applyTo(hadoopLinkComp);
  String[] types=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  hcPropertyTypeCombo=new LabelledCombo(hadoopLinkComp,Messages.getString(""String_Node_Str""),""String_Node_Str"",types,1,true);
  hcPropertyTypeCombo.select(0);
  GridDataFactory.fillDefaults().span(1,1).align(SWT.FILL,SWT.CENTER).applyTo(hcPropertyTypeCombo.getCombo());
  hcRepositoryText=new Text(hadoopLinkComp,SWT.BORDER);
  hcRepositoryText.setEditable(false);
  GridDataFactory.fillDefaults().grab(true,false).span(1,1).align(SWT.FILL,SWT.CENTER).applyTo(hcRepositoryText);
  hcSelectBtn=new Button(hadoopLinkComp,SWT.PUSH);
  hcSelectBtn.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  GridDataFactory.fillDefaults().grab(false,false).align(SWT.BEGINNING,SWT.CENTER).span(1,1).applyTo(hcSelectBtn);
  hideHCLinkSettings(true);
}",0.9404024767801856
128006,"/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  String hiveServerKey=connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  if (distributionObj != null) {
    currIndexofDistribution=HiveConnUtils.getIndexOfDistribution(distributionObj == null ? null : ((String)distributionObj));
    updateHiveDistributionAndMakeSelection(currIndexofDistribution);
    currIndexofHiveVersion=HiveConnUtils.getIndexOfHiveVersion(distributionObj == null ? null : ((String)distributionObj),hiveVersion == null ? null : ((String)hiveVersion));
    updateHiveVersionAndMakeSelection(currIndexofDistribution,currIndexofHiveVersion);
    currIndexofHiveMode=HiveConnUtils.getIndexOfHiveMode(distributionObj == null ? null : ((String)distributionObj),hiveVersion == null ? null : ((String)hiveVersion),hiveMode == null ? ""String_Node_Str"" : ((String)hiveMode));
    updateHiveModeAndMakeSelection(currIndexofDistribution,currIndexofHiveVersion,currIndexofHiveMode);
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(connection.getDatabaseType())) {
      doHiveModeModify();
    }
  }
 else {
    updateHiveDistributionAndMakeSelection(0);
    updateHiveVersionAndMakeSelection(0,0);
    updateHiveModeAndMakeSelection(0,0,0);
    doHiveModeModify();
  }
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
}","/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  String hiveServerKey=connection.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  if (distributionObj != null) {
    currIndexofDistribution=HiveConnUtils.getIndexOfDistribution(distributionObj == null ? null : ((String)distributionObj));
    updateHiveDistributionAndMakeSelection(currIndexofDistribution);
    currIndexofHiveVersion=HiveConnUtils.getIndexOfHiveVersion(distributionObj == null ? null : ((String)distributionObj),hiveVersion == null ? null : ((String)hiveVersion));
    updateHiveVersionAndMakeSelection(currIndexofDistribution,currIndexofHiveVersion);
    currIndexofHiveMode=HiveConnUtils.getIndexOfHiveMode(distributionObj == null ? null : ((String)distributionObj),hiveVersion == null ? null : ((String)hiveVersion),hiveMode == null ? null : ((String)hiveMode));
    updateHiveModeAndMakeSelection(currIndexofDistribution,currIndexofHiveVersion,currIndexofHiveMode);
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(connection.getDatabaseType())) {
      doHiveModeModify();
    }
  }
 else {
    updateHiveDistributionAndMakeSelection(0);
    updateHiveVersionAndMakeSelection(0,0);
    updateHiveModeAndMakeSelection(0,0,0);
    doHiveModeModify();
  }
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
}",0.9969648793178204
128007,"public boolean saveProcess(IProgressMonitor monitor,IPath path,final boolean avoidSaveRelations){
  try {
    if (monitor != null) {
      monitor.beginTask(""String_Node_Str"",100);
    }
    final ProcessType processType=loadedProcess.saveXmlFile();
    if (monitor != null) {
      monitor.worked(40);
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    final IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (path != null) {
    }
 else {
      RepositoryWorkUnit rwu=new RepositoryWorkUnit(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
          resetItem();
          if (getItem() instanceof JobletProcessItem) {
            ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
          }
 else           if (getItem() instanceof ProcessItem) {
            ((ProcessItem)getItem()).setProcess(processType);
          }
          factory.save(getItem());
          loadedProcess.setProperty(getItem().getProperty());
          if (!avoidSaveRelations) {
            RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
          }
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      factory.executeRepositoryWorkUnit(rwu);
      if (monitor != null) {
        monitor.worked(50);
      }
    }
    if (monitor != null) {
      monitor.worked(10);
    }
    return true;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
 finally {
    if (monitor != null) {
      monitor.done();
    }
  }
}","public boolean saveProcess(final IProgressMonitor monitor,IPath path,final boolean avoidSaveRelations){
  try {
    if (monitor != null) {
      monitor.beginTask(""String_Node_Str"",100);
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    final IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (path != null) {
    }
 else {
      RepositoryWorkUnit rwu=new RepositoryWorkUnit(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
          resetItem();
          ProcessType processType;
          try {
            processType=loadedProcess.saveXmlFile();
          }
 catch (          IOException e) {
            throw new PersistenceException(e);
          }
          if (monitor != null) {
            monitor.worked(40);
          }
          if (getItem() instanceof JobletProcessItem) {
            ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
          }
 else           if (getItem() instanceof ProcessItem) {
            ((ProcessItem)getItem()).setProcess(processType);
          }
          factory.save(getItem());
          loadedProcess.setProperty(getItem().getProperty());
          if (!avoidSaveRelations) {
            RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
          }
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      factory.executeRepositoryWorkUnit(rwu);
      if (monitor != null) {
        monitor.worked(50);
      }
    }
    if (monitor != null) {
      monitor.worked(10);
    }
    return true;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
 finally {
    if (monitor != null) {
      monitor.done();
    }
  }
}",0.4978142076502732
128008,"@Override protected void run() throws LoginException, PersistenceException {
  resetItem();
  if (getItem() instanceof JobletProcessItem) {
    ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
  }
 else   if (getItem() instanceof ProcessItem) {
    ((ProcessItem)getItem()).setProcess(processType);
  }
  factory.save(getItem());
  loadedProcess.setProperty(getItem().getProperty());
  if (!avoidSaveRelations) {
    RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  resetItem();
  ProcessType processType;
  try {
    processType=loadedProcess.saveXmlFile();
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
  if (monitor != null) {
    monitor.worked(40);
  }
  if (getItem() instanceof JobletProcessItem) {
    ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
  }
 else   if (getItem() instanceof ProcessItem) {
    ((ProcessItem)getItem()).setProcess(processType);
  }
  factory.save(getItem());
  loadedProcess.setProperty(getItem().getProperty());
  if (!avoidSaveRelations) {
    RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
  }
}",0.8329297820823245
128009,"private void synDuplicatedRoutine(RoutineItem item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createRoutineSynchronizer().renameRoutineClass(item);
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void synDuplicatedRoutine(RoutineItem item,String oldLabel){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    if (item instanceof PigudfItem) {
      codeGenService.createRoutineSynchronizer().renamePigudfClass((PigudfItem)item,oldLabel);
    }
 else {
      codeGenService.createRoutineSynchronizer().renameRoutineClass(item);
    }
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.824385805277525
128010,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            String id=null;
            String label=null;
            boolean isfirst=true;
            boolean needSys=true;
            for (            IRepositoryViewObject object : selectedVersionItems) {
              Item selectedItem=object.getProperty().getItem();
              try {
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy);
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
catch (              BusinessException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            String id=null;
            String label=null;
            boolean isfirst=true;
            boolean needSys=true;
            for (            IRepositoryViewObject object : selectedVersionItems) {
              Item selectedItem=object.getProperty().getItem();
              try {
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
catch (              BusinessException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}",0.9945714285714286
128011,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem);
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.993968636911942
128012,"private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PIG_UDF) {
        item=PropertiesFactory.eINSTANCE.createPigudfItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.9872468117029256
128013,"private void synDuplicatedRoutine(RoutineItem item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createRoutineSynchronizer().renameRoutineClass(item);
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void synDuplicatedRoutine(RoutineItem item,String oldLable){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    if (item instanceof PigudfItem) {
      codeGenService.createRoutineSynchronizer().renamePigudfClass((PigudfItem)item,oldLable);
    }
 else {
      codeGenService.createRoutineSynchronizer().renameRoutineClass(item);
    }
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.824385805277525
128014,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9956551566430368
128015,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9936842105263158
128016,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.9940198709798936
128017,"public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}","public Resource getScreenshotResource(Item item,boolean createIfNotExist,boolean forceReload){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
    if (forceReload) {
      for (      Resource res : resources) {
        if (res != null) {
          if (itemResourceURI.toString().equals(res.getURI().toString())) {
            res.unload();
            resourceSet.getResources().remove(res);
            break;
          }
        }
      }
    }
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}",0.8571428571428571
128018,"@Override public void moveObject(IRepositoryViewObject objToMove,IPath newPath) throws PersistenceException {
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
  IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
  FolderItem folderItem=getFolderItem(project,itemType,newPath);
  List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
  for (  IRepositoryViewObject oject : objects) {
    if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
      throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
    }
  }
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
  for (  IRepositoryViewObject obj : allVersionToMove) {
    Item currentItem=obj.getProperty().getItem();
    if (currentItem.getParent() instanceof FolderItem) {
      ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
    }
    FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
    newFolderItem.getChildren().add(currentItem);
    currentItem.setParent(newFolderItem);
    ItemState state=obj.getProperty().getItem().getState();
    state.setPath(newPath.toString());
    xmiResourceManager.saveResource(state.eResource());
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
    for (    Resource resource : affectedResources) {
      IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  saveProject(project);
}","@Override public void moveObject(IRepositoryViewObject objToMove,IPath newPath) throws PersistenceException {
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
  IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
  FolderItem folderItem=getFolderItem(project,itemType,newPath);
  List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
  for (  IRepositoryViewObject oject : objects) {
    if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
      throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
    }
  }
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
  for (  IRepositoryViewObject obj : allVersionToMove) {
    Item currentItem=obj.getProperty().getItem();
    if (currentItem.getParent() instanceof FolderItem) {
      ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
    }
    FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
    newFolderItem.getChildren().add(currentItem);
    currentItem.setParent(newFolderItem);
    ItemState state=obj.getProperty().getItem().getState();
    state.setPath(newPath.toString());
    xmiResourceManager.saveResource(state.eResource());
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
    IPath parentPath=folder.getFullPath();
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  saveProject(project);
}",0.9534697152025672
128019,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    IPath targetPath=sourcePath.removeLastSegments(1);
    Project project=getRepositoryContext().getProject();
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
    String completeNewPath;
    if (targetPath.isEmpty()) {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
    }
 else {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
    }
    if (completeNewPath.equals(completeOldPath)) {
      return;
    }
    IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
    FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
    FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
    if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
      IPath path=new Path(sourcePath.toString());
      ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
      emfFolder=folderHelper.getFolder(completeOldPath);
    }
    createFolder(getRepositoryContext().getProject(),type,targetPath,label);
    FolderItem newFolder=folderHelper.getFolder(completeNewPath);
    Item[] childrens=(Item[])emfFolder.getChildren().toArray();
    for (    Item children2 : childrens) {
      if (children2 instanceof FolderItem) {
        FolderItem children=(FolderItem)children2;
        moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
      }
 else {
        moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
      }
    }
    List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        List<Resource> needSaves=findCrossReference(resource);
        moveResource(resource,path);
        saveCrossReference(needSaves);
      }
      affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
    deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
    xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
  }
 catch (  PersistenceException e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    IPath targetPath=sourcePath.removeLastSegments(1);
    Project project=getRepositoryContext().getProject();
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
    String completeNewPath;
    if (targetPath.isEmpty()) {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
    }
 else {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
    }
    if (completeNewPath.equals(completeOldPath)) {
      return;
    }
    IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
    FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
    FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
    if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
      IPath path=new Path(sourcePath.toString());
      ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
      emfFolder=folderHelper.getFolder(completeOldPath);
    }
    createFolder(getRepositoryContext().getProject(),type,targetPath,label);
    FolderItem newFolder=folderHelper.getFolder(completeNewPath);
    Item[] childrens=(Item[])emfFolder.getChildren().toArray();
    for (    Item children2 : childrens) {
      if (children2 instanceof FolderItem) {
        FolderItem children=(FolderItem)children2;
        moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
      }
 else {
        moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
      }
    }
    List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
    List<Resource> allResource=new ArrayList<Resource>();
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        allResource.add(resource);
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        resourceAndPathMap.put(resource,path);
        List<Resource> needSaves=findCrossReference(resource);
        moveResource(resource,path);
        saveCrossReference(needSaves);
      }
    }
    svnMoveResource(allResource,parentPath,resourceAndPathMap);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
    deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
    xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
  }
 catch (  PersistenceException e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}",0.9317675040880036
128020,"private void moveOldContentToNewFolder(Project project,String completeNewPath,FolderItem emfFolder,FolderItem newFolder,Item child) throws PersistenceException {
  emfFolder.getChildren().remove(child);
  newFolder.getChildren().add(child);
  child.setParent(newFolder);
  moveDQItemToNewFolder(project,completeNewPath,child);
  List<Resource> affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
    List<Resource> needSaves=findCrossReference(resource);
    moveResource(resource,path);
    saveCrossReference(needSaves);
  }
  affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    xmiResourceManager.saveResource(resource);
  }
}","private void moveOldContentToNewFolder(Project project,String completeNewPath,FolderItem emfFolder,FolderItem newFolder,Item child) throws PersistenceException {
  emfFolder.getChildren().remove(child);
  newFolder.getChildren().add(child);
  child.setParent(newFolder);
  moveDQItemToNewFolder(project,completeNewPath,child);
  List<Resource> affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  for (  Resource resource : affectedResources) {
    IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    List<Resource> needSaves=findCrossReference(resource);
    moveResource(resource,path);
    saveCrossReference(needSaves);
  }
  IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
  svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
  affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    xmiResourceManager.saveResource(resource);
  }
}",0.8713534194165471
128021,"@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","@Override public void moveFolder(final ERepositoryObjectType type,final IPath sourcePath,final IPath targetPath) throws PersistenceException {
  if (type == null || RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + (""String_Node_Str"".equals(targetPath.toString()) ? ""String_Node_Str"" : IPath.SEPARATOR + targetPath.toString()) + IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    dealTdqResourceMove(project,completeNewPath,object);
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      resourceAndPathMap.put(resource,path);
      List<Resource> needSaves=findCrossReference(resource);
      moveResource(resource,path);
      saveCrossReference(needSaves);
    }
    IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
    svnMoveResource(affectedResources,parentPath,resourceAndPathMap);
    affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.958501872659176
128022,"private void renameFolderExecute(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  if (type == null) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            List<Resource> needSaves=findCrossReference(resource);
            moveResource(resource,path);
            saveCrossReference(needSaves);
          }
          affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            xmiResourceManager.saveResource(resource);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}","private void renameFolderExecute(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  if (type == null) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,true);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        List<Resource> allResource=new ArrayList<Resource>();
        Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
        IPath parentPath=getPhysicalProject(project).getFullPath().append(completeNewPath);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            allResource.add(resource);
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            resourceAndPathMap.put(resource,path);
            List<Resource> needSaves=findCrossReference(resource);
            moveResource(resource,path);
            saveCrossReference(needSaves);
          }
        }
        svnMoveResource(allResource,parentPath,resourceAndPathMap);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            xmiResourceManager.saveResource(resource);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}",0.9404547094911584
128023,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        setPropertiesFormEditable(true);
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  addHadoopClusterLinkListeners();
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(passwordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(hiddenGeneral);
      if (!isContextMode()) {
        setPropertiesFormEditable(true);
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
        }
 else {
          doHiveDBTypeNotSelected();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  dbTypeCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (dbTypeCombo.getSelectionIndex() > -1) {
        if (Character.isLetterOrDigit(e.character)) {
          e.doit=false;
        }
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.9985566861514036
128024,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData().getListColumns(),getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
          for (          IMetadataColumn column : list) {
            if (column.isUsefulColumn()) {
              temp.add(column);
            }
          }
          if (temp.size() == 0) {
            temp=getOutputMetaData().getListColumns();
          }
          MetadataToolHelper.copyTable(temp,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData().getListColumns(),getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData().getListColumns(),getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.9813964066408916
128025,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    for (    Object obj : ((StructuredSelection)data).toArray()) {
      final RepositoryNode sourceNode=(RepositoryNode)obj;
      monitor.subTask(Messages.getString(""String_Node_Str"") + sourceNode.getObject().getLabel());
      MoveObjectAction.getInstance().execute(sourceNode,targetNode,true);
    }
  }
 catch (  Exception e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    RepositoryNode[] nodeArray=new RepositoryNode[((StructuredSelection)data).toArray().length];
    for (int i=0; i < ((StructuredSelection)data).toArray().length; i++) {
      final RepositoryNode sourceNode=(RepositoryNode)((StructuredSelection)data).toArray()[i];
      nodeArray[i]=sourceNode;
    }
    MoveObjectAction.getInstance().executeMulti(nodeArray,targetNode,null,true);
  }
 catch (  Exception e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}",0.4742765273311897
128026,"public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  if (conn != null) {
    DatabaseMetaData dbMetaData=conn.getMetaData();
    if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
      return getDatabaseMetaData(conn,dbMetaData.getDatabaseProductName(),false,null);
    }
    return dbMetaData;
  }
  return null;
}","/** 
 * @param conn
 * @return
 * @throws SQLException this method will pass a mistake databaseType to get DatabaseMetDdata(e.x. db2->db2 for zos) if you can, you should use getDatabaseMetaData() instead of this method
 */
public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  if (conn != null) {
    DatabaseMetaData dbMetaData=conn.getMetaData();
    if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
      return getDatabaseMetaData(conn,dbMetaData.getDatabaseProductName(),false,null);
    }
    return dbMetaData;
  }
  return null;
}",0.6206206206206206
128027,"/** 
 * only for db2 on z/os right now.
 * @param conn2
 * @return
 */
private static DatabaseMetaData createDB2ForZosFakeDatabaseMetaData(Connection conn){
  DB2ForZosDataBaseMetadata dmd=new DB2ForZosDataBaseMetadata(conn);
  return dmd;
}","/** 
 * only for db2 on z/os right now.
 * @param conn2
 * @return
 */
public static DatabaseMetaData createDB2ForZosFakeDatabaseMetaData(Connection conn){
  DB2ForZosDataBaseMetadata dmd=new DB2ForZosDataBaseMetadata(conn);
  return dmd;
}",0.9771309771309772
128028,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData().getListColumns(),getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData().getListColumns(),getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.992520325203252
128029,"private void hideHCLinkSettings(boolean hide){
  GridData hadoopLinkData=(GridData)hadoopLinkComp.getLayoutData();
  hadoopLinkComp.setVisible(!hide);
  hadoopLinkData.exclude=hide;
  hcPropertyTypeCombo.setHideWidgets(hide);
}","private void hideHCLinkSettings(boolean hide){
  if (hadoopLinkComp == null) {
    return;
  }
  GridData hadoopLinkData=(GridData)hadoopLinkComp.getLayoutData();
  hadoopLinkComp.setVisible(!hide);
  hadoopLinkData.exclude=hide;
  hcPropertyTypeCombo.setHideWidgets(hide);
}",0.904382470119522
128030,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
          for (          IMetadataColumn column : list) {
            if (column.isUsefulColumn()) {
              temp.add(column);
            }
          }
          MetadataToolHelper.copyTable(temp,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
          for (          IMetadataColumn column : list) {
            if (column.isUsefulColumn()) {
              temp.add(column);
            }
          }
          MetadataToolHelper.copyTable(temp,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData().getListColumns(),getOutputMetaData(),outputMetaView.getMetadataTableEditor().getMetadataColumnList());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
          for (          IMetadataColumn column : list) {
            if (column.isUsefulColumn()) {
              temp.add(column);
            }
          }
          if (temp.size() == 0) {
            temp=getOutputMetaData().getListColumns();
          }
          MetadataToolHelper.copyTable(temp,getInputMetaData(),inputMetaView.getMetadataTableEditor().getMetadataColumnList());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.980963045912654
128031,"protected List<UpdateResult> getResultFromProcess(IProcess process,final Set<EUpdateItemType> types,final boolean onlySimpleShow){
  if (process == null || types == null) {
    return null;
  }
  List<UpdateResult> resultList=new ArrayList<UpdateResult>();
  if (process instanceof IProcess2) {
    IProcess2 process2=(IProcess2)process;
    IContextManager contextManager=process2.getContextManager();
    if (contextManager instanceof JobContextManager) {
      JobContextManager jobContextManager=(JobContextManager)contextManager;
      jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
      jobContextManager.setNewParametersMap(getNewParametersMap());
      Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
      List<IContext> listIContext=new ArrayList<IContext>();
      for (      ContextItem item : repositoryAddGroupContext.keySet()) {
        List<IContext> list=repositoryAddGroupContext.get(item);
        ListIterator<IContext> listIterator=list.listIterator();
        while (listIterator.hasNext()) {
          IContext context=listIterator.next();
          JobContext newJobContext=new JobContext(context.getName());
          List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
          for (int j=0; j < context.getContextParameterList().size(); j++) {
            IContextParameter param=context.getContextParameterList().get(j);
            IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
            if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
              IContextParameter clone=param.clone();
              clone.setContext(newJobContext);
              existedParameters.add(clone);
            }
          }
          if (!existedParameters.isEmpty()) {
            newJobContext.setContextParameterList(existedParameters);
            listIContext.add(newJobContext);
          }
        }
      }
      jobContextManager.setAddGroupContext(listIContext);
      jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
      Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
      List<IContext> removeListIContext=new ArrayList<IContext>();
      for (      ContextItem item : repositoryRemoveGroupContext.keySet()) {
        List<IContext> list=repositoryRemoveGroupContext.get(item);
        ListIterator<IContext> listIterator=list.listIterator();
        while (listIterator.hasNext()) {
          IContext context=listIterator.next();
          if (!removeListIContext.contains(context)) {
            removeListIContext.add(context);
          }
        }
      }
      jobContextManager.setRemoveGroupContext(removeListIContext);
      jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
      Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
      jobContextManager.setRenameGroupContext(getRenameContextGroup());
      jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
    }
    IUpdateManager updateManager=process2.getUpdateManager();
    if (updateManager instanceof AbstractUpdateManager) {
      AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
      if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
        manager.setSchemaRenamedMap(getSchemaRenamedMap());
      }
      if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
        manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
      }
      manager.setFromRepository(true);
    }
    for (    EUpdateItemType type : types) {
      List<UpdateResult> updatesNeeded=updateManager.getUpdatesNeeded(type,onlySimpleShow);
      if (updatesNeeded != null) {
        resultList.addAll(updatesNeeded);
      }
    }
    if (updateManager instanceof AbstractUpdateManager) {
      AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
      manager.setFromRepository(false);
    }
  }
  return resultList;
}","protected List<UpdateResult> getResultFromProcess(IProcess process,final Set<EUpdateItemType> types,final boolean onlySimpleShow){
  if (process == null || types == null) {
    return null;
  }
  List<UpdateResult> resultList=new ArrayList<UpdateResult>();
  if (process instanceof IProcess2) {
    IProcess2 process2=(IProcess2)process;
    IContextManager contextManager=process2.getContextManager();
    if (contextManager instanceof JobContextManager) {
      JobContextManager jobContextManager=(JobContextManager)contextManager;
      jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
      jobContextManager.setNewParametersMap(getNewParametersMap());
      Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
      List<IContext> listIContext=new ArrayList<IContext>();
      for (      ContextItem item : repositoryAddGroupContext.keySet()) {
        List<IContext> list=repositoryAddGroupContext.get(item);
        ListIterator<IContext> listIterator=list.listIterator();
        while (listIterator.hasNext()) {
          IContext context=listIterator.next();
          JobContext newJobContext=new JobContext(context.getName());
          List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
          for (int j=0; j < context.getContextParameterList().size(); j++) {
            IContextParameter param=context.getContextParameterList().get(j);
            IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
            if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
              IContextParameter clone=param.clone();
              clone.setContext(newJobContext);
              existedParameters.add(clone);
            }
          }
          if (!existedParameters.isEmpty()) {
            newJobContext.setContextParameterList(existedParameters);
            listIContext.add(newJobContext);
          }
        }
      }
      jobContextManager.setAddGroupContext(listIContext);
      jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
      Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
      List<IContext> removeListIContext=new ArrayList<IContext>();
      for (      ContextItem item : repositoryRemoveGroupContext.keySet()) {
        List<IContext> list=repositoryRemoveGroupContext.get(item);
        ListIterator<IContext> listIterator=list.listIterator();
        while (listIterator.hasNext()) {
          IContext context=listIterator.next();
          if (!removeListIContext.contains(context)) {
            removeListIContext.add(context);
          }
        }
      }
      jobContextManager.setRemoveGroupContext(removeListIContext);
      jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
      Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
      jobContextManager.setRenameGroupContext(getRenameContextGroup());
      jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
    }
    IUpdateManager updateManager=process2.getUpdateManager();
    if (updateManager instanceof AbstractUpdateManager) {
      AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
      if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
        manager.setSchemaRenamedMap(getSchemaRenamedMap());
      }
      if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
        manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
      }
      manager.setFromRepository(true);
      if (isAddColumn) {
        manager.setAddColumn(true);
        isAddColumn=false;
      }
    }
    for (    EUpdateItemType type : types) {
      List<UpdateResult> updatesNeeded=updateManager.getUpdatesNeeded(type,onlySimpleShow);
      if (updatesNeeded != null) {
        resultList.addAll(updatesNeeded);
      }
    }
    if (updateManager instanceof AbstractUpdateManager) {
      AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
      manager.setFromRepository(false);
    }
  }
  return resultList;
}",0.9887798036465638
128032,"public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      throw new IllegalStateException();
    }
  }
.doSwitch(item);
}","public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      return null;
    }
  }
.doSwitch(item);
}",0.9912414318354912
128033,"@Override public Object defaultCase(EObject object){
  throw new IllegalStateException();
}","@Override public Object defaultCase(EObject object){
  return null;
}",0.8
128034,"public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
 else   if (!str.contains(""String_Node_Str"")) {
    return str;
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}","public static String checkStringQuotationMarks(String str){
  String newStr=str;
  if (str == null) {
    return ""String_Node_Str"";
  }
  if (newStr.contains(""String_Node_Str"")) {
    newStr=newStr.replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (newStr.contains(""String_Node_Str"")) {
    newStr=newStr.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return newStr;
}",0.6988727858293076
128035,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        CorePlugin.getDefault().getRunProcessService().getJavaProject().getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (codeModified) {
      try {
        CorePlugin.getDefault().getRunProcessService().getJavaProject().getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}",0.9464788732394366
128036,"protected Item copyFromResource(Resource createResource,String newItemLabel) throws PersistenceException, BusinessException {
  if (newItemLabel != null) {
    Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
    Property property=newItem.getProperty();
    property.setId(getNextId());
    property.setAuthor(getRepositoryContext().getUser());
    property.setLabel(newItemLabel);
    property.setDisplayName(newItemLabel);
    if (!isNameAvailable(getRepositoryContext().getProject(),property.getItem(),null)) {
      throw new BusinessException(Messages.getString(""String_Node_Str""));
    }
    EcoreUtil.resolveAll(createResource);
    return newItem;
  }
 else {
    boolean changeLabelWithCopyPrefix=true;
    return copyFromResource(createResource,changeLabelWithCopyPrefix);
  }
}","protected Item copyFromResource(Resource createResource,String newItemLabel) throws PersistenceException, BusinessException {
  if (newItemLabel != null) {
    Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
    Property property=newItem.getProperty();
    property.setId(getNextId());
    property.setAuthor(getRepositoryContext().getUser());
    property.setLabel(newItemLabel);
    property.setDisplayName(newItemLabel);
    EcoreUtil.resolveAll(createResource);
    return newItem;
  }
 else {
    boolean changeLabelWithCopyPrefix=true;
    return copyFromResource(createResource,changeLabelWithCopyPrefix);
  }
}",0.8900455432661027
128037,"public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      throw new IllegalStateException();
    }
  }
.doSwitch(item);
}","public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      return null;
    }
  }
.doSwitch(item);
}",0.9912414318354912
128038,"@Override public Object defaultCase(EObject object){
  throw new IllegalStateException();
}","@Override public Object defaultCase(EObject object){
  return null;
}",0.8
128039,"private boolean isRepository(INode node){
  IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    String schemaType=(String)schemaParam.getValue();
    if (schemaType.equals(""String_Node_Str"")) {
      return true;
    }
  }
  schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    List schemaType=(List)schemaParam.getValue();
    for (int i=0; i < schemaType.size(); i++) {
      HashMap map=(HashMap)schemaType.get(i);
      if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}","private boolean isRepository(INode node){
  IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    String schemaType=(String)schemaParam.getValue();
    if (schemaType.equals(""String_Node_Str"")) {
      return true;
    }
  }
  schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    List schemaType=(List)schemaParam.getValue();
    for (int i=0; i < schemaType.size(); i++) {
      HashMap map=(HashMap)schemaType.get(i);
      Set set=map.keySet();
      Iterator it=set.iterator();
      while (it.hasNext()) {
        String key=(String)it.next();
        if (key.equals(""String_Node_Str"")) {
          String value=(String)map.get(key);
          if (this.outputMetaTable.getLabel().equals(TalendQuoteUtils.removeQuotes(value))) {
            if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}",0.7684021543985637
128040,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || initTables != null && initTables.isEmpty()) {
    if (initTables != null && !initTables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < initTables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
          metadataTable=(MetadataTable)initTables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (initTables != null && !initTables.isEmpty()) {
    boolean isAllDeleted=true;
    for (int i=0; i < initTables.size(); i++) {
      if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
        metadataTable=(MetadataTable)initTables.toArray()[i];
        isAllDeleted=false;
      }
    }
    if (isAllDeleted) {
      addMetadataTable(true);
    }
  }
 else {
    addMetadataTable(false);
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}",0.9575533878196678
128041,"/** 
 * Generates xml file base on inputted path, file path and an instance of <code>Document</code>
 * @param tempFolderPath
 * @param filePath
 * @param document
 */
public static void generateXMLFile(String tempFolderPath,String filePath,Document document){
  XMLWriter output=null;
  FileOutputStream out=null;
  Writer writer=null;
  try {
    out=new java.io.FileOutputStream(filePath);
    writer=new OutputStreamWriter(out,""String_Node_Str"");
    OutputFormat format=OutputFormat.createPrettyPrint();
    output=new XMLWriter(writer,format){
      protected void writeDeclaration() throws IOException {
        OutputFormat formatTmp=this.getOutputFormat();
        String encoding=formatTmp.getEncoding();
        if (!formatTmp.isSuppressDeclaration()) {
          if (encoding.equals(""String_Node_Str"")) {
            writer.write(""String_Node_Str"");
            if (!formatTmp.isOmitEncoding()) {
              writer.write(""String_Node_Str"");
            }
            writer.write(""String_Node_Str"");
          }
 else {
            writer.write(""String_Node_Str"");
            if (!formatTmp.isOmitEncoding()) {
              writer.write(""String_Node_Str"" + encoding + ""String_Node_Str"");
            }
            writer.write(""String_Node_Str"");
          }
          if (formatTmp.isNewLineAfterDeclaration()) {
            println();
          }
        }
      }
    }
;
    output.write(document);
    output.flush();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (output != null) {
      try {
        output.close();
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * Generates xml file base on inputted path, file path and an instance of <code>Document</code>
 * @param tempFolderPath
 * @param filePath
 * @param document
 */
public static void generateXMLFile(String tempFolderPath,String filePath,Document document){
  XMLWriter output=null;
  FileOutputStream out=null;
  Writer writer=null;
  try {
    out=new java.io.FileOutputStream(filePath);
    writer=new OutputStreamWriter(out,""String_Node_Str"");
    OutputFormat format=OutputFormat.createPrettyPrint();
    output=new XMLWriter(writer,format){
      @Override protected void writeDeclaration() throws IOException {
        OutputFormat formatTmp=this.getOutputFormat();
        String encoding=formatTmp.getEncoding();
        if (!formatTmp.isSuppressDeclaration()) {
          if (encoding.equals(""String_Node_Str"")) {
            writer.write(""String_Node_Str"");
            if (!formatTmp.isOmitEncoding()) {
              writer.write(""String_Node_Str"");
            }
            writer.write(""String_Node_Str"");
          }
 else {
            writer.write(""String_Node_Str"");
            if (!formatTmp.isOmitEncoding()) {
              writer.write(""String_Node_Str"" + encoding + ""String_Node_Str"");
            }
            writer.write(""String_Node_Str"");
          }
          if (formatTmp.isNewLineAfterDeclaration()) {
            println();
          }
        }
      }
    }
;
    output.setMaximumAllowedCharacter(127);
    output.write(document);
    output.flush();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (output != null) {
      try {
        output.close();
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9864525840441546
128042,"protected void writeDeclaration() throws IOException {
  OutputFormat formatTmp=this.getOutputFormat();
  String encoding=formatTmp.getEncoding();
  if (!formatTmp.isSuppressDeclaration()) {
    if (encoding.equals(""String_Node_Str"")) {
      writer.write(""String_Node_Str"");
      if (!formatTmp.isOmitEncoding()) {
        writer.write(""String_Node_Str"");
      }
      writer.write(""String_Node_Str"");
    }
 else {
      writer.write(""String_Node_Str"");
      if (!formatTmp.isOmitEncoding()) {
        writer.write(""String_Node_Str"" + encoding + ""String_Node_Str"");
      }
      writer.write(""String_Node_Str"");
    }
    if (formatTmp.isNewLineAfterDeclaration()) {
      println();
    }
  }
}","@Override protected void writeDeclaration() throws IOException {
  OutputFormat formatTmp=this.getOutputFormat();
  String encoding=formatTmp.getEncoding();
  if (!formatTmp.isSuppressDeclaration()) {
    if (encoding.equals(""String_Node_Str"")) {
      writer.write(""String_Node_Str"");
      if (!formatTmp.isOmitEncoding()) {
        writer.write(""String_Node_Str"");
      }
      writer.write(""String_Node_Str"");
    }
 else {
      writer.write(""String_Node_Str"");
      if (!formatTmp.isOmitEncoding()) {
        writer.write(""String_Node_Str"" + encoding + ""String_Node_Str"");
      }
      writer.write(""String_Node_Str"");
    }
    if (formatTmp.isNewLineAfterDeclaration()) {
      println();
    }
  }
}",0.9929178470254958
128043,"/** 
 * Export the resources contained in the previously-defined resourcesToExport collection.
 */
protected void exportSpecifiedResources() throws InterruptedException {
  for (  ExportFileResource fileResource : resourcesListToExport) {
    String rootName=fileResource.getDirectoryName();
    Set<String> paths=fileResource.getRelativePathList();
    for (Iterator iter=paths.iterator(); iter.hasNext(); ) {
      String relativePath=(String)iter.next();
      Set<URL> resource=fileResource.getResourcesByRelativePath(relativePath);
      for (      URL url : resource) {
        String currentResource=FilesUtils.getFileRealPath(url.getPath());
        exportResource(rootName,relativePath,currentResource,1);
      }
    }
  }
}","/** 
 * Export the resources contained in the previously-defined resourcesToExport collection.
 */
protected void exportSpecifiedResources() throws InterruptedException {
  for (  ExportFileResource fileResource : resourcesListToExport) {
    String rootName=fileResource.getDirectoryName();
    Set<String> paths=fileResource.getRelativePathList();
    for (    Object element : paths) {
      String relativePath=(String)element;
      Set<URL> resource=fileResource.getResourcesByRelativePath(relativePath);
      for (      URL url : resource) {
        String currentResource=FilesUtils.getFileRealPath(url.getPath());
        exportResource(rootName,relativePath,currentResource,1);
      }
    }
  }
}",0.8932038834951457
128044,"/** 
 * Export the passed resource to the destination .zip.
 * @param exportResource org.eclipse.core.resources.IResource
 * @param leadupDepth the number of resource levels to be included in the path including the resourse itself.
 */
public void exportResource(String rootName,String directory,String exportResource,int leadupDepth) throws InterruptedException {
  File file=new File(exportResource);
  if (file.isFile()) {
    String destinationName=file.getName();
    if (!""String_Node_Str"".equals(directory)) {
      if (directory.endsWith(SEPARATOR)) {
        destinationName=directory + file.getName();
      }
 else {
        destinationName=directory + SEPARATOR + file.getName();
      }
    }
    if (createLeadupStructure) {
      if (rootName != null && !""String_Node_Str"".equals(destinationName)) {
        if (file.getName().equals(Messages.getString(""String_Node_Str""))) {
          destinationName=rootName.substring(0,rootName.indexOf(""String_Node_Str"")) + SEPARATOR + destinationName;
        }
 else         if (!""String_Node_Str"".equals(rootName)) {
          destinationName=rootName + SEPARATOR + destinationName;
        }
      }
    }
    destinationName=destinationName.replace(""String_Node_Str"",SEPARATOR);
    monitor.subTask(destinationName);
    try {
      exporter.write(exportResource,destinationName);
    }
 catch (    IOException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
catch (    CoreException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
    monitor.worked(1);
    ModalContext.checkCanceled(monitor);
  }
 else   if (file.isDirectory()) {
    File[] children=null;
    try {
      children=file.listFiles(new FileFilter(){
        public boolean accept(        File pathname){
          boolean result=true;
          if (pathname != null && pathname.isFile()) {
            try {
              result=Pattern.compile(regEx).matcher(pathname.getName()).find();
            }
 catch (            PatternSyntaxException e) {
            }
          }
          return result;
        }
      }
);
    }
 catch (    Exception e) {
      addError(NLS.bind(""String_Node_Str"",exportResource),e);
    }
    for (int i=0; i < children.length; i++) {
      exportResource(rootName,directory + file.getName() + SEPARATOR,children[i].getPath(),leadupDepth + 1);
    }
  }
}","/** 
 * Export the passed resource to the destination .zip.
 * @param exportResource org.eclipse.core.resources.IResource
 * @param leadupDepth the number of resource levels to be included in the path including the resourse itself.
 */
public void exportResource(String rootName,String directory,String exportResource,int leadupDepth) throws InterruptedException {
  File file=new File(exportResource);
  if (file.isFile()) {
    String destinationName=file.getName();
    if (!""String_Node_Str"".equals(directory)) {
      if (directory.endsWith(SEPARATOR)) {
        destinationName=directory + file.getName();
      }
 else {
        destinationName=directory + SEPARATOR + file.getName();
      }
    }
    if (createLeadupStructure) {
      if (rootName != null && !""String_Node_Str"".equals(destinationName)) {
        if (file.getName().equals(Messages.getString(""String_Node_Str""))) {
          destinationName=rootName.substring(0,rootName.indexOf(""String_Node_Str"")) + SEPARATOR + destinationName;
        }
 else         if (!""String_Node_Str"".equals(rootName) && !rootName.equals(SEPARATOR)) {
          if (rootName.endsWith(SEPARATOR)) {
            destinationName=rootName + destinationName;
          }
 else {
            destinationName=rootName + SEPARATOR + destinationName;
          }
        }
      }
    }
    destinationName=destinationName.replace(""String_Node_Str"",SEPARATOR);
    monitor.subTask(destinationName);
    try {
      exporter.write(exportResource,destinationName);
    }
 catch (    IOException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
catch (    CoreException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
    monitor.worked(1);
    ModalContext.checkCanceled(monitor);
  }
 else   if (file.isDirectory()) {
    File[] children=null;
    try {
      children=file.listFiles(new FileFilter(){
        public boolean accept(        File pathname){
          boolean result=true;
          if (pathname != null && pathname.isFile()) {
            try {
              result=Pattern.compile(regEx).matcher(pathname.getName()).find();
            }
 catch (            PatternSyntaxException e) {
            }
          }
          return result;
        }
      }
);
    }
 catch (    Exception e) {
      addError(NLS.bind(""String_Node_Str"",exportResource),e);
    }
    for (    File element : children) {
      exportResource(rootName,directory + file.getName() + SEPARATOR,element.getPath(),leadupDepth + 1);
    }
  }
}",0.8870022235698403
128045,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || initTables != null && initTables.isEmpty()) {
    if (initTables != null && !initTables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < initTables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
          metadataTable=(MetadataTable)initTables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (initTables != null && !initTables.isEmpty()) {
    boolean isAllDeleted=true;
    for (int i=0; i < initTables.size(); i++) {
      if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
        metadataTable=(MetadataTable)initTables.toArray()[i];
        isAllDeleted=false;
      }
    }
    if (isAllDeleted) {
      addMetadataTable(true);
    }
  }
 else {
    addMetadataTable(false);
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}",0.9575533878196678
128046,"public static RepositoryComponentSetting getSetting(Item item,ERepositoryObjectType type){
  if (item == null) {
    return null;
  }
  boolean subItem=(type == ERepositoryObjectType.METADATA_CON_TABLE);
  for (  RepositoryComponentSetting setting : getSettings()) {
    Class<Item>[] classes=setting.getClasses();
    if (classes != null) {
      for (      Class<Item> clazz : classes) {
        if (clazz == item.eClass().getInstanceClass()) {
          if (clazz.isAssignableFrom(DatabaseConnectionItem.class)) {
            EDatabaseTypeName[] dbTypes=setting.getDbTypes();
            if (dbTypes != null) {
              for (              EDatabaseTypeName dbType : dbTypes) {
                DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
                DatabaseConnection dbConnection=(DatabaseConnection)dbItem.getConnection();
                if (dbType.getDisplayName().equals(dbConnection.getDatabaseType())) {
                  if (!subItem) {
                    return setting;
                  }
                  if (subItem && setting.withSchema()) {
                    return setting;
                  }
                }
              }
            }
          }
 else {
            return setting;
          }
        }
      }
    }
  }
  return null;
}","public static RepositoryComponentSetting getSetting(Item item,ERepositoryObjectType type){
  if (item == null) {
    return null;
  }
  boolean subItem=(type == ERepositoryObjectType.METADATA_CON_TABLE);
  for (  RepositoryComponentSetting setting : getSettings()) {
    Class<Item>[] classes=setting.getClasses();
    if (classes != null) {
      for (      Class<Item> clazz : classes) {
        if (clazz.isAssignableFrom(item.getClass())) {
          if (clazz.isAssignableFrom(DatabaseConnectionItem.class)) {
            EDatabaseTypeName[] dbTypes=setting.getDbTypes();
            if (dbTypes != null) {
              for (              EDatabaseTypeName dbType : dbTypes) {
                DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
                DatabaseConnection dbConnection=(DatabaseConnection)dbItem.getConnection();
                if (dbType.getDisplayName().equals(dbConnection.getDatabaseType())) {
                  if (!subItem) {
                    return setting;
                  }
                  if (subItem && setting.withSchema()) {
                    return setting;
                  }
                }
              }
            }
          }
 else           if (clazz.isAssignableFrom(ProcessItem.class)) {
            if (item.eClass() == PropertiesPackage.Literals.PROCESS_ITEM) {
              return setting;
            }
          }
 else {
            return setting;
          }
        }
      }
    }
  }
  return null;
}",0.3277039166367229
128047,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      if (ETableTypes.TABLETYPE_EXTERNAL_TABLE.getName().equals(temptableType)) {
        metadatatable.setTableType(ETableTypes.TABLETYPE_TABLE.getName());
      }
 else {
        metadatatable.setTableType(temptableType);
      }
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=schemaPattern + ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (""String_Node_Str"".equalsIgnoreCase(schemaPattern)) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().startsWith(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      if (ETableTypes.TABLETYPE_EXTERNAL_TABLE.getName().equals(temptableType)) {
        metadatatable.setTableType(ETableTypes.TABLETYPE_TABLE.getName());
      }
 else {
        metadatatable.setTableType(temptableType);
      }
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=schemaPattern + ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (""String_Node_Str"".equalsIgnoreCase(schemaPattern)) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().startsWith(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9977563870594196
128048,"public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
catch (        java.lang.NullPointerException npe) {
          log.error(npe.getMessage(),npe);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tables.getString(GetTable.TABLE_SCHEM.name());
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,table);
      }
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}","public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
catch (        java.lang.NullPointerException npe) {
          log.error(npe.getMessage(),npe);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    while (tables.next()) {
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tables.getString(GetTable.TABLE_SCHEM.name());
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,table);
      }
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}",0.995771381803301
128049,"public static String getTableComment(String tableName,ResultSet tablesSet,boolean needRemark) throws SQLException {
  String tableComment=""String_Node_Str"";
  if (needRemark) {
    tableComment=tablesSet.getString(GetTable.REMARKS.name());
  }
  if (StringUtils.isBlank(tableComment)) {
    String selectRemarkOnTable=getSelectRemarkOnTable(tableName);
    if (selectRemarkOnTable != null && ExtractMetaDataUtils.conn != null) {
      tableComment=executeGetCommentStatement(selectRemarkOnTable,ExtractMetaDataUtils.conn);
    }
  }
  return tableComment;
}","public static String getTableComment(String tableName,ResultSet tablesSet,boolean needRemark,Connection connection) throws SQLException {
  String tableComment=""String_Node_Str"";
  if (needRemark) {
    tableComment=tablesSet.getString(GetTable.REMARKS.name());
  }
  if (StringUtils.isBlank(tableComment)) {
    String selectRemarkOnTable=getSelectRemarkOnTable(tableName);
    if (selectRemarkOnTable != null && connection != null) {
      tableComment=executeGetCommentStatement(selectRemarkOnTable,connection);
    }
  }
  return tableComment;
}",0.9204339963833634
128050,"/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
public static List<String> getTableNamesFromQuery(ResultSet resultSet) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  tableCommentsMap.clear();
  while (resultSet.next()) {
    String nameKey=resultSet.getString(1).trim();
    String tableComment=getTableComment(nameKey,resultSet,false);
    if (tableCommentsMap.containsKey(nameKey)) {
      if (tableComment == null) {
        tableComment=""String_Node_Str"";
      }
      tableCommentsMap.remove(nameKey);
      tableCommentsMap.put(nameKey,tableComment);
    }
    itemTablesName.add(nameKey);
    tableCommentsMap.put(nameKey,tableComment);
  }
  return itemTablesName;
}","/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
public static List<String> getTableNamesFromQuery(ResultSet resultSet,Connection connection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  tableCommentsMap.clear();
  while (resultSet.next()) {
    String nameKey=resultSet.getString(1).trim();
    String tableComment=getTableComment(nameKey,resultSet,false,connection);
    if (tableCommentsMap.containsKey(nameKey)) {
      if (tableComment == null) {
        tableComment=""String_Node_Str"";
      }
      tableCommentsMap.remove(nameKey);
      tableCommentsMap.put(nameKey,tableComment);
    }
    itemTablesName.add(nameKey);
    tableCommentsMap.put(nameKey,tableComment);
  }
  return itemTablesName;
}",0.9792060491493384
128051,"/** 
 * DOC ggu Comment method ""returnTablesFormConnection"". work for @see ExtractMetaDataFromDataBase.returnTablesFormConnection(...)
 * @param metadataConnection
 * @param tableInfoParameters
 * @return
 */
public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters){
  getTableTypeMap().clear();
  List<String> itemTablesName=new ArrayList<String>();
  List connList=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
  try {
    if (!tableInfoParameters.isUsedName()) {
      if (tableInfoParameters.getSqlFiter() != null && !""String_Node_Str"".equals(tableInfoParameters.getSqlFiter())) {
        Statement stmt=ExtractMetaDataUtils.conn.createStatement();
        ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
        ResultSet rsTables=stmt.executeQuery(tableInfoParameters.getSqlFiter());
        itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
        rsTables.close();
        stmt.close();
      }
    }
 else {
      itemTablesName=retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  filterTablesFromRecycleBin(metadataConnection,itemTablesName);
  ExtractMetaDataUtils.closeConnection();
  DriverShim wapperDriver=null;
  if (connList != null && connList.size() > 0) {
    for (int i=0; i < connList.size(); i++) {
      if (connList.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)connList.get(i);
      }
    }
  }
  closeConnection(metadataConnection,wapperDriver);
  return itemTablesName;
}","/** 
 * DOC ggu Comment method ""returnTablesFormConnection"". work for @see ExtractMetaDataFromDataBase.returnTablesFormConnection(...)
 * @param metadataConnection
 * @param tableInfoParameters
 * @return
 */
public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters){
  getTableTypeMap().clear();
  List<String> itemTablesName=new ArrayList<String>();
  List connList=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
  try {
    if (!tableInfoParameters.isUsedName()) {
      if (tableInfoParameters.getSqlFiter() != null && !""String_Node_Str"".equals(tableInfoParameters.getSqlFiter())) {
        Statement stmt=ExtractMetaDataUtils.conn.createStatement();
        ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
        ResultSet rsTables=stmt.executeQuery(tableInfoParameters.getSqlFiter());
        itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,ExtractMetaDataUtils.conn);
        rsTables.close();
        stmt.close();
      }
    }
 else {
      itemTablesName=retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  filterTablesFromRecycleBin(metadataConnection,itemTablesName);
  ExtractMetaDataUtils.closeConnection();
  DriverShim wapperDriver=null;
  if (connList != null && connList.size() > 0) {
    for (int i=0; i < connList.size(); i++) {
      if (connList.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)connList.get(i);
      }
    }
  }
  closeConnection(metadataConnection,wapperDriver);
  return itemTablesName;
}",0.9937888198757764
128052,"public String getTableComment(IMetadataConnection metadataConnection,ResultSet resultSet,String nameKey) throws SQLException {
  return ExtractMetaDataFromDataBase.getTableComment(nameKey,resultSet,true);
}","public String getTableComment(IMetadataConnection metadataConnection,ResultSet resultSet,String nameKey) throws SQLException {
  return ExtractMetaDataFromDataBase.getTableComment(nameKey,resultSet,true,ExtractMetaDataUtils.conn);
}",0.9406392694063926
128053,"@Override protected void filterTablesFromRecycleBin(IMetadataConnection metadataConnection,List<String> itemTablesName){
  if (metadataConnection.getDbVersionString() != null && !metadataConnection.getDbVersionString().equals(EDatabaseVersion4Drivers.ORACLE_8.getVersionValue())) {
    try {
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
      itemTablesName.removeAll(ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables));
      rsTables.close();
      stmt.close();
    }
 catch (    SQLException e) {
    }
  }
}","@Override protected void filterTablesFromRecycleBin(IMetadataConnection metadataConnection,List<String> itemTablesName){
  if (metadataConnection.getDbVersionString() != null && !metadataConnection.getDbVersionString().equals(EDatabaseVersion4Drivers.ORACLE_8.getVersionValue())) {
    try {
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
      itemTablesName.removeAll(ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,ExtractMetaDataUtils.conn));
      rsTables.close();
      stmt.close();
    }
 catch (    SQLException e) {
    }
  }
}",0.9814814814814816
128054,"@Override protected List<String> retrieveItemTables(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters,List<String> itemTablesName) throws SQLException {
  if (ExtractMetaDataUtils.conn != null && ExtractMetaDataUtils.conn.toString().contains(""String_Node_Str"") && ExtractMetaDataUtils.isUseAllSynonyms()) {
    Set<String> nameFiters=tableInfoParameters.getNameFilters();
    Statement stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    StringBuffer filters=new StringBuffer();
    if (!nameFiters.isEmpty()) {
      filters.append(""String_Node_Str"");
      final String tStr=""String_Node_Str"";
      int i=0;
      for (      String s : nameFiters) {
        if (i != 0) {
          filters.append(""String_Node_Str"");
        }
        filters.append(tStr);
        filters.append(s);
        filters.append('\'');
        i++;
      }
      filters.append(')');
    }
    ResultSet rsTables=stmt.executeQuery(GET_ALL_SYNONYMS + filters.toString());
    itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
    rsTables.close();
    stmt.close();
    for (    String synonymName : itemTablesName) {
      getTableTypeMap().put(synonymName,ETableTypes.TABLETYPE_SYNONYM.getName());
    }
  }
 else {
    itemTablesName=super.retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
  }
  return itemTablesName;
}","@Override protected List<String> retrieveItemTables(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters,List<String> itemTablesName) throws SQLException {
  if (ExtractMetaDataUtils.conn != null && ExtractMetaDataUtils.conn.toString().contains(""String_Node_Str"") && ExtractMetaDataUtils.isUseAllSynonyms()) {
    Set<String> nameFiters=tableInfoParameters.getNameFilters();
    Statement stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    StringBuffer filters=new StringBuffer();
    if (!nameFiters.isEmpty()) {
      filters.append(""String_Node_Str"");
      final String tStr=""String_Node_Str"";
      int i=0;
      for (      String s : nameFiters) {
        if (i != 0) {
          filters.append(""String_Node_Str"");
        }
        filters.append(tStr);
        filters.append(s);
        filters.append('\'');
        i++;
      }
      filters.append(')');
    }
    ResultSet rsTables=stmt.executeQuery(GET_ALL_SYNONYMS + filters.toString());
    itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,ExtractMetaDataUtils.conn);
    rsTables.close();
    stmt.close();
    for (    String synonymName : itemTablesName) {
      getTableTypeMap().put(synonymName,ETableTypes.TABLETYPE_SYNONYM.getName());
    }
  }
 else {
    itemTablesName=super.retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
  }
  return itemTablesName;
}",0.9910714285714286
128055,"@Override protected List<String> getTablesToFilter(IMetadataConnection metadataConnection){
  List<String> tablesToFilter=new ArrayList<String>();
  Statement stmt;
  try {
    stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLE_RAC.getDisplayName().equals(metadataConnection.getDbType())|| EDatabaseTypeName.ORACLE_OCI.getDisplayName().equals(metadataConnection.getDbType())) {
      ResultSet rsTables=stmt.executeQuery(ORACLE_10G_RECBIN_SQL);
      tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
      rsTables.close();
    }
    stmt.close();
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
  }
  return tablesToFilter;
}","@Override protected List<String> getTablesToFilter(IMetadataConnection metadataConnection){
  List<String> tablesToFilter=new ArrayList<String>();
  Statement stmt;
  try {
    stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLE_RAC.getDisplayName().equals(metadataConnection.getDbType())|| EDatabaseTypeName.ORACLE_OCI.getDisplayName().equals(metadataConnection.getDbType())) {
      ResultSet rsTables=stmt.executeQuery(ORACLE_10G_RECBIN_SQL);
      tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,ExtractMetaDataUtils.conn);
      rsTables.close();
    }
    stmt.close();
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
  }
  return tablesToFilter;
}",0.9863013698630136
128056,"@Override public String getTableComment(IMetadataConnection metadataConnection,ResultSet resultSet,String nameKey) throws SQLException {
  if (EDatabaseVersion4Drivers.ORACLE_8.getVersionValue().equals(metadataConnection.getDbVersionString())) {
    return ExtractMetaDataFromDataBase.getTableComment(nameKey,resultSet,false);
  }
  return super.getTableComment(metadataConnection,resultSet,nameKey);
}","@Override public String getTableComment(IMetadataConnection metadataConnection,ResultSet resultSet,String nameKey) throws SQLException {
  if (EDatabaseVersion4Drivers.ORACLE_8.getVersionValue().equals(metadataConnection.getDbVersionString())) {
    return ExtractMetaDataFromDataBase.getTableComment(nameKey,resultSet,false,ExtractMetaDataUtils.conn);
  }
  return super.getTableComment(metadataConnection,resultSet,nameKey);
}",0.9686746987951808
128057,"@Override protected void createBottomPart(Composite parent){
  convertBtn=new Button(parent,SWT.BORDER);
  convertBtn.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).align(SWT.CENTER,SWT.CENTER).grab(false,false).applyTo(convertBtn);
  convertBtn.setEnabled(!isReadOnly());
}","@Override protected void createBottomPart(Composite parent){
  convertBtn=new Button(parent,SWT.PUSH);
  convertBtn.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).align(SWT.CENTER,SWT.CENTER).grab(false,false).applyTo(convertBtn);
  convertBtn.setEnabled(!isReadOnly());
}",0.9841772151898734
128058,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.ExtractMetaDataFromDataBase#getTableNamesFromQuery(java.sql.ResultSet)}.
 * @throws SQLException
 */
@Test public void testGetTableNamesFromQuery() throws SQLException {
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap instanceof HashMap<?,?>);
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap.isEmpty());
  ResultSet mockResultSet=mock(ResultSet.class);
  when(mockResultSet.getString(1)).thenReturn(""String_Node_Str"");
  String nameKey=mockResultSet.getString(1).trim();
  String tableComment=ExtractMetaDataFromDataBase.getTableComment(nameKey,mockResultSet,false);
  assertNotNull(tableComment);
  ExtractMetaDataFromDataBase.tableCommentsMap.put(nameKey,tableComment);
  assertNotNull(ExtractMetaDataFromDataBase.tableCommentsMap);
  assertNotNull(ExtractMetaDataFromDataBase.getTableNamesFromQuery(mockResultSet));
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.ExtractMetaDataFromDataBase#getTableNamesFromQuery(java.sql.ResultSet)}.
 * @throws SQLException
 */
@Test public void testGetTableNamesFromQuery() throws SQLException {
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap instanceof HashMap<?,?>);
  assertTrue(ExtractMetaDataFromDataBase.tableCommentsMap.isEmpty());
  ResultSet mockResultSet=mock(ResultSet.class);
  when(mockResultSet.getString(1)).thenReturn(""String_Node_Str"");
  String nameKey=mockResultSet.getString(1).trim();
  String tableComment=ExtractMetaDataFromDataBase.getTableComment(nameKey,mockResultSet,false,ExtractMetaDataUtils.conn);
  assertNotNull(tableComment);
  ExtractMetaDataFromDataBase.tableCommentsMap.put(nameKey,tableComment);
  assertNotNull(ExtractMetaDataFromDataBase.tableCommentsMap);
  assertNotNull(ExtractMetaDataFromDataBase.getTableNamesFromQuery(mockResultSet,ExtractMetaDataUtils.conn));
}",0.9725158562367864
128059,"protected Item copyFromResource(Resource createResource,String newItemLabel) throws PersistenceException, BusinessException {
  if (newItemLabel != null) {
    Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
    Property property=newItem.getProperty();
    property.setId(getNextId());
    property.setAuthor(getRepositoryContext().getUser());
    property.setLabel(newItemLabel);
    property.setDisplayName(newItemLabel);
    if (!isPocess(newItem) && !isNameAvailable(getRepositoryContext().getProject(),property.getItem(),null)) {
      throw new BusinessException(Messages.getString(""String_Node_Str""));
    }
    EcoreUtil.resolveAll(createResource);
    return newItem;
  }
 else {
    boolean changeLabelWithCopyPrefix=true;
    return copyFromResource(createResource,changeLabelWithCopyPrefix);
  }
}","protected Item copyFromResource(Resource createResource,String newItemLabel) throws PersistenceException, BusinessException {
  if (newItemLabel != null) {
    Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
    Property property=newItem.getProperty();
    property.setId(getNextId());
    property.setAuthor(getRepositoryContext().getUser());
    property.setLabel(newItemLabel);
    property.setDisplayName(newItemLabel);
    EcoreUtil.resolveAll(createResource);
    return newItem;
  }
 else {
    boolean changeLabelWithCopyPrefix=true;
    return copyFromResource(createResource,changeLabelWithCopyPrefix);
  }
}",0.8774855676715844
128060,"public static RepositoryComponentSetting getSetting(Item item,ERepositoryObjectType type){
  if (item == null) {
    return null;
  }
  boolean subItem=(type == ERepositoryObjectType.METADATA_CON_TABLE);
  for (  RepositoryComponentSetting setting : getSettings()) {
    Class<Item>[] classes=setting.getClasses();
    if (classes != null) {
      for (      Class<Item> clazz : classes) {
        if (clazz.isAssignableFrom(item.getClass())) {
          if (clazz.isAssignableFrom(DatabaseConnectionItem.class)) {
            EDatabaseTypeName[] dbTypes=setting.getDbTypes();
            if (dbTypes != null) {
              for (              EDatabaseTypeName dbType : dbTypes) {
                DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
                DatabaseConnection dbConnection=(DatabaseConnection)dbItem.getConnection();
                if (dbType.getDisplayName().equals(dbConnection.getDatabaseType())) {
                  if (!subItem) {
                    return setting;
                  }
                  if (subItem && setting.withSchema()) {
                    return setting;
                  }
                }
              }
            }
          }
 else {
            return setting;
          }
        }
      }
    }
  }
  return null;
}","public static RepositoryComponentSetting getSetting(Item item,ERepositoryObjectType type){
  if (item == null) {
    return null;
  }
  boolean subItem=(type == ERepositoryObjectType.METADATA_CON_TABLE);
  for (  RepositoryComponentSetting setting : getSettings()) {
    Class<Item>[] classes=setting.getClasses();
    if (classes != null) {
      for (      Class<Item> clazz : classes) {
        if (clazz == item.eClass().getInstanceClass()) {
          if (clazz.isAssignableFrom(DatabaseConnectionItem.class)) {
            EDatabaseTypeName[] dbTypes=setting.getDbTypes();
            if (dbTypes != null) {
              for (              EDatabaseTypeName dbType : dbTypes) {
                DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
                DatabaseConnection dbConnection=(DatabaseConnection)dbItem.getConnection();
                if (dbType.getDisplayName().equals(dbConnection.getDatabaseType())) {
                  if (!subItem) {
                    return setting;
                  }
                  if (subItem && setting.withSchema()) {
                    return setting;
                  }
                }
              }
            }
          }
 else {
            return setting;
          }
        }
      }
    }
  }
  return null;
}",0.977571539056458
128061,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || initTables != null && initTables.isEmpty()) {
    if (initTables != null && !initTables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < initTables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
          metadataTable=(MetadataTable)initTables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (initTables != null && !initTables.isEmpty()) {
    boolean isAllDeleted=true;
    for (int i=0; i < initTables.size(); i++) {
      if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
        metadataTable=(MetadataTable)initTables.toArray()[i];
        isAllDeleted=false;
      }
    }
    if (isAllDeleted) {
      addMetadataTable(true);
    }
  }
 else {
    addMetadataTable(false);
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}",0.9575533878196678
128062,"protected Item copyFromResource(Resource createResource,String newItemLabel) throws PersistenceException, BusinessException {
  if (newItemLabel != null) {
    Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
    Property property=newItem.getProperty();
    property.setId(getNextId());
    property.setAuthor(getRepositoryContext().getUser());
    property.setLabel(newItemLabel);
    property.setDisplayName(newItemLabel);
    if (!isNameAvailable(getRepositoryContext().getProject(),property.getItem(),null)) {
      throw new BusinessException(Messages.getString(""String_Node_Str""));
    }
    EcoreUtil.resolveAll(createResource);
    return newItem;
  }
 else {
    boolean changeLabelWithCopyPrefix=true;
    return copyFromResource(createResource,changeLabelWithCopyPrefix);
  }
}","protected Item copyFromResource(Resource createResource,String newItemLabel) throws PersistenceException, BusinessException {
  if (newItemLabel != null) {
    Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
    Property property=newItem.getProperty();
    property.setId(getNextId());
    property.setAuthor(getRepositoryContext().getUser());
    property.setLabel(newItemLabel);
    property.setDisplayName(newItemLabel);
    if (!isPocess(newItem) && !isNameAvailable(getRepositoryContext().getProject(),property.getItem(),null)) {
      throw new BusinessException(Messages.getString(""String_Node_Str""));
    }
    EcoreUtil.resolveAll(createResource);
    return newItem;
  }
 else {
    boolean changeLabelWithCopyPrefix=true;
    return copyFromResource(createResource,changeLabelWithCopyPrefix);
  }
}",0.9872685185185184
128063,"public boolean process(){
  boolean result=false;
  try {
    TokenCollectorFactory.getFactory().priorCollect();
    if (isActiveAndValid(true)) {
      send();
      final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
      result=true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return result;
}","public boolean process(){
  boolean result=false;
  try {
    if (isActiveAndValid(true)) {
      TokenCollectorFactory.getFactory().priorCollect();
      send();
      final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
      result=true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return result;
}",0.8842975206611571
128064,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      try {
        TokenCollectorFactory.getFactory().priorCollect();
      }
 catch (      Exception e) {
        throw new PersistenceException(e);
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.981607865818392
128065,"public boolean process(){
  boolean result=false;
  if (isActiveAndValid(true)) {
    send();
    final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
    preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
    result=true;
  }
  return result;
}","public boolean process(){
  boolean result=false;
  try {
    TokenCollectorFactory.getFactory().priorCollect();
    if (isActiveAndValid(true)) {
      send();
      final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
      result=true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return result;
}",0.7927272727272727
128066,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      try {
        TokenCollectorFactory.getFactory().priorCollect();
      }
 catch (      Exception e) {
        throw new PersistenceException(e);
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.981607865818392
128067,"public boolean process(){
  boolean result=false;
  if (isActiveAndValid(true)) {
    send();
    final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
    preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
    result=true;
  }
  return result;
}","public boolean process(){
  boolean result=false;
  try {
    TokenCollectorFactory.getFactory().priorCollect();
    if (isActiveAndValid(true)) {
      send();
      final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
      result=true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return result;
}",0.7927272727272727
128068,"public boolean process(){
  boolean result=false;
  try {
    TokenCollectorFactory.getFactory().priorCollect();
    if (isActiveAndValid(true)) {
      send();
      final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
      result=true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return result;
}","public boolean process(){
  boolean result=false;
  try {
    if (isActiveAndValid(true)) {
      TokenCollectorFactory.getFactory().priorCollect();
      send();
      final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_LAST_TIME,DATE_FORMAT.format(new Date()));
      result=true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return result;
}",0.8842975206611571
128069,"public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}","public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
 else   if (!str.contains(""String_Node_Str"")) {
    return str;
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}",0.7990430622009569
128070,"@Override public void logOnProject(Project project) throws PersistenceException, LoginException {
  if (getRepositoryContext().getUser().getLogin() == null) {
    throw new LoginException(Messages.getString(""String_Node_Str""));
  }
  super.logOnProject(project);
  if (!doesLoggedUserExist()) {
    createUser(project);
  }
  IProject project2=ResourceModelUtils.getProject(project);
  createFolders(project2,project.getEmfProject());
  synchronizeRoutines(project2);
  synchronizeSqlpatterns(project2);
  synchronizeFolders(project2,project.getEmfProject());
  changeRoutinesPackage(project);
  saveProject(project);
}","@Override public void logOnProject(Project project) throws PersistenceException, LoginException {
  if (getRepositoryContext().getUser().getLogin() == null) {
    throw new LoginException(Messages.getString(""String_Node_Str""));
  }
  if (project.getEmfProject().eResource() == null) {
    IProject iProject=ResourceModelUtils.getProject(getRepositoryContext().getProject());
    project.setEmfProject(xmiResourceManager.loadProject(iProject));
  }
  super.logOnProject(project);
  if (!doesLoggedUserExist()) {
    createUser(project);
  }
  IProject project2=ResourceModelUtils.getProject(project);
  createFolders(project2,project.getEmfProject());
  synchronizeRoutines(project2);
  synchronizeSqlpatterns(project2);
  synchronizeFolders(project2,project.getEmfProject());
  changeRoutinesPackage(project);
  saveProject(project);
}",0.8514442916093535
128071,"@Override public List<IRepositoryViewObject> collectRelatedRoutines(Set<String> includeRoutineIdOrNames,boolean system){
  return RoutinesUtil.collectRelatedRoutines(includeRoutineIdOrNames,true);
}","@Override public List<IRepositoryViewObject> collectRelatedRoutines(Set<String> includeRoutineIdOrNames,boolean system){
  return RoutinesUtil.collectRelatedRoutines(includeRoutineIdOrNames,system);
}",0.9748743718592964
128072,"public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}","public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
 else   if (!str.contains(""String_Node_Str"")) {
    return str;
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}",0.7990430622009569
128073,"/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == formatDate.length()) {
    return true;
  }
  return false;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}",0.9964747356051704
128074,"public synchronized Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}","public synchronized Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  URI screenshotResourceURI=getScreenshotResourceURI(itemResourceURI);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (screenshotResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}",0.8820779220779221
128075,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.8885937730559245
128076,"public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
    for (    Resource res : resources) {
      if (res != null) {
        if (itemResourceURI.toString().equals(res.getURI().toString())) {
          res.unload();
          resourceSet.getResources().remove(res);
          break;
        }
      }
    }
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}","public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}",0.8840381991814461
128077,"private void initExtensionRepositoryNodes(final IRepositoryNode curParentNode){
  Map<ERepositoryObjectType,RepositoryNode> repositoryNodeExtensionMap=new HashMap<ERepositoryObjectType,RepositoryNode>();
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  Map<ERepositoryObjectType,ERepositoryObjectType> parentNodeMapping=new HashMap<ERepositoryObjectType,ERepositoryObjectType>();
  try {
    for (    IConfigurationElement element : configurationElements) {
      Object extensionNode=element.createExecutableExtension(""String_Node_Str"");
      String type=element.getAttribute(""String_Node_Str"");
      String isResouce=element.getAttribute(""String_Node_Str"");
      boolean isResource=false;
      if (isResouce != null) {
        isResource=Boolean.parseBoolean(isResouce);
      }
      String parentNodeType=element.getAttribute(""String_Node_Str"");
      if (isResource && extensionNode instanceof IExtendRepositoryNode) {
        IExtendRepositoryNode diyNode=(IExtendRepositoryNode)extensionNode;
        IImage icon=diyNode.getNodeImage();
        RepositoryNode dynamicNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
        RepositoryNode[] children=(RepositoryNode[])diyNode.getChildren();
        if (children != null && (children.length > 0)) {
          for (          RepositoryNode nodeToAdd : children) {
            dynamicNode.getChildren().add(nodeToAdd);
            nodeToAdd.setParent(dynamicNode);
            nodeToAdd.setRoot(this);
          }
        }
        ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
        if (repositoryNodeType != null) {
          dynamicNode.setProperties(EProperties.LABEL,repositoryNodeType);
          dynamicNode.setProperties(EProperties.CONTENT_TYPE,repositoryNodeType);
        }
        dynamicNode.setIcon(icon);
        repositoryNodeExtensionMap.put(repositoryNodeType,dynamicNode);
        boolean withParent=false;
        if (parentNodeType != null) {
          ERepositoryObjectType parentType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,parentNodeType);
          if (parentType != null) {
            parentNodeMapping.put(repositoryNodeType,parentType);
            withParent=true;
          }
        }
        if (!withParent) {
          curParentNode.getChildren().add(dynamicNode);
        }
      }
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
  for (  ERepositoryObjectType childType : parentNodeMapping.keySet()) {
    RepositoryNode childNode=repositoryNodeExtensionMap.get(childType);
    ERepositoryObjectType parentType=parentNodeMapping.get(childType);
    if (parentType != null && childNode != null) {
      RepositoryNode parentNode=getRootRepositoryNode(parentType);
      if (parentNode == null) {
        parentNode=repositoryNodeExtensionMap.get(parentType);
      }
      if (parentNode != null) {
        parentNode.getChildren().add(childNode);
      }
 else {
        curParentNode.getChildren().add(childNode);
      }
    }
  }
}","private void initExtensionRepositoryNodes(final IRepositoryNode curParentNode){
  Map<ERepositoryObjectType,RepositoryNode> repositoryNodeExtensionMap=new HashMap<ERepositoryObjectType,RepositoryNode>();
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  Map<ERepositoryObjectType,ERepositoryObjectType> parentNodeMapping=new HashMap<ERepositoryObjectType,ERepositoryObjectType>();
  try {
    for (    IConfigurationElement element : configurationElements) {
      Object extensionNode=element.createExecutableExtension(""String_Node_Str"");
      String type=element.getAttribute(""String_Node_Str"");
      String parentNodeType=element.getAttribute(""String_Node_Str"");
      if (extensionNode instanceof IExtendRepositoryNode) {
        IExtendRepositoryNode diyNode=(IExtendRepositoryNode)extensionNode;
        IImage icon=diyNode.getNodeImage();
        RepositoryNode dynamicNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
        RepositoryNode[] children=(RepositoryNode[])diyNode.getChildren();
        if (children != null && (children.length > 0)) {
          for (          RepositoryNode nodeToAdd : children) {
            dynamicNode.getChildren().add(nodeToAdd);
            nodeToAdd.setParent(dynamicNode);
            nodeToAdd.setRoot(this);
          }
        }
        ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
        if (repositoryNodeType != null) {
          dynamicNode.setProperties(EProperties.LABEL,repositoryNodeType);
          dynamicNode.setProperties(EProperties.CONTENT_TYPE,repositoryNodeType);
        }
        dynamicNode.setIcon(icon);
        repositoryNodeExtensionMap.put(repositoryNodeType,dynamicNode);
        boolean withParent=false;
        if (parentNodeType != null) {
          ERepositoryObjectType parentType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,parentNodeType);
          if (parentType != null) {
            parentNodeMapping.put(repositoryNodeType,parentType);
            withParent=true;
          }
        }
        if (!withParent) {
          curParentNode.getChildren().add(dynamicNode);
        }
      }
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
  for (  ERepositoryObjectType childType : parentNodeMapping.keySet()) {
    RepositoryNode childNode=repositoryNodeExtensionMap.get(childType);
    ERepositoryObjectType parentType=parentNodeMapping.get(childType);
    if (parentType != null && childNode != null) {
      RepositoryNode parentNode=getRootRepositoryNode(parentType);
      if (parentNode == null) {
        parentNode=repositoryNodeExtensionMap.get(parentType);
      }
      if (parentNode != null) {
        parentNode.getChildren().add(childNode);
      }
 else {
        curParentNode.getChildren().add(childNode);
      }
    }
  }
}",0.962534169480624
128078,"protected String getText(String label,String version,String path,String projectLabel,boolean isDeleted,boolean isModified,boolean isFolder,boolean inRef){
  Assert.isNotNull(label);
  StringBuffer text=new StringBuffer(50);
  if (isModified) {
    text.append('>');
    text.append(SPACE);
  }
  text.append(label);
  if (isAllowChengeVersion() && !isFolder && version != null) {
    text.append(SPACE);
    text.append(version);
  }
  if (isRefMerged() && inRef && projectLabel != null) {
    text.append(SPACE);
    text.append('(');
    text.append('@');
    text.append(projectLabel);
    text.append(')');
  }
  if (!isFolder && isDeleted && path != null) {
    text.append(SPACE);
    text.append('(');
    text.append(path);
    text.append(')');
  }
  return text.toString();
}","protected String getText(String label,String version,String path,String projectLabel,boolean isDeleted,boolean isModified,boolean isFolder,boolean inRef){
  Assert.isNotNull(label);
  StringBuffer text=new StringBuffer(50);
  if (isModified) {
    text.append('>');
    text.append(SPACE);
  }
  text.append(label);
  if (isAllowChengeVersion() && !isFolder && version != null) {
    text.append(SPACE);
    text.append(version);
  }
  if (isRefMerged() && inRef && projectLabel != null) {
    text.append(SPACE);
    text.append('(');
    text.append('@');
    text.append(projectLabel);
    text.append(')');
  }
  if (!isFolder && isDeleted && path != null && path.length() > 0) {
    text.append(SPACE);
    text.append('(');
    text.append(path);
    text.append(')');
  }
  return text.toString();
}",0.9868007542426148
128079,"@Override public String getText(Object element){
  if (isRecycleBin(element)) {
    return ERepositoryObjectType.RECYCLE_BIN.toString();
  }
  return super.getText(element);
}","@Override public String getText(Object element){
  if (isRecycleBin(element)) {
    return ERepositoryObjectType.RECYCLE_BIN.toString();
  }
  return null;
}",0.933734939759036
128080,"@Override public Image getImage(Object element){
  if (isRecycleBin(element)) {
    RepositoryNode recyclebinNode=(RepositoryNode)element;
    if (recyclebinNode.getChildren().isEmpty()) {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_EMPTY_ICON);
    }
 else {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_FULL_ICON);
    }
  }
  return super.getImage(element);
}","@Override public Image getImage(Object element){
  if (isRecycleBin(element)) {
    RepositoryNode recyclebinNode=(RepositoryNode)element;
    if (recyclebinNode.getChildren().isEmpty()) {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_EMPTY_ICON);
    }
 else {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_FULL_ICON);
    }
  }
  return null;
}",0.9646133682830932
128081,"/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 01:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == formatDate.length()) {
    return true;
  }
  return false;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 01:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}",0.9964747356051704
128082,"protected String getText(String label,String version,String path,String projectLabel,boolean isDeleted,boolean isModified,boolean addVersion,boolean inRef){
  Assert.isNotNull(label);
  StringBuffer text=new StringBuffer(50);
  if (isModified) {
    text.append('>');
    text.append(SPACE);
  }
  text.append(label);
  if (isAllowChengeVersion() && addVersion && version != null) {
    text.append(SPACE);
    text.append(version);
  }
  if (isRefMerged() && inRef && projectLabel != null) {
    text.append(SPACE);
    text.append('(');
    text.append('@');
    text.append(projectLabel);
    text.append(')');
  }
  if (isDeleted && path != null) {
    text.append(SPACE);
    text.append('(');
    text.append(path);
    text.append(')');
  }
  return text.toString();
}","protected String getText(String label,String version,String path,String projectLabel,boolean isDeleted,boolean isModified,boolean isFolder,boolean inRef){
  Assert.isNotNull(label);
  StringBuffer text=new StringBuffer(50);
  if (isModified) {
    text.append('>');
    text.append(SPACE);
  }
  text.append(label);
  if (isAllowChengeVersion() && !isFolder && version != null) {
    text.append(SPACE);
    text.append(version);
  }
  if (isRefMerged() && inRef && projectLabel != null) {
    text.append(SPACE);
    text.append('(');
    text.append('@');
    text.append(projectLabel);
    text.append(')');
  }
  if (!isFolder && isDeleted && path != null) {
    text.append(SPACE);
    text.append('(');
    text.append(path);
    text.append(')');
  }
  return text.toString();
}",0.967948717948718
128083,"protected String getElementText(RepositoryNode node){
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    boolean isDeleted=false;
    boolean isModified=false;
    boolean inRef=false;
    boolean addVersion=true;
    IRepositoryViewObject object=node.getObject();
    isModified=object.isModified();
    isDeleted=object.isDeleted();
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    inRef=!mainProject.getLabel().equals(object.getProjectLabel());
    if (node.getType() == ENodeType.SIMPLE_FOLDER) {
      addVersion=false;
    }
    return getText(object.getLabel(),object.getVersion(),object.getPath(),object.getProjectLabel(),isDeleted,isModified,addVersion,inRef);
  }
 else {
    return getText(node.getLabel(),null,null,null,false,false,false,false);
  }
}","protected String getElementText(RepositoryNode node){
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    boolean isDeleted=false;
    boolean isModified=false;
    boolean inRef=false;
    boolean isFolder=false;
    IRepositoryViewObject object=node.getObject();
    isModified=object.isModified();
    isDeleted=object.isDeleted();
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    inRef=!mainProject.getLabel().equals(object.getProjectLabel());
    if (node.getType() == ENodeType.SIMPLE_FOLDER) {
      isFolder=true;
    }
    return getText(object.getLabel(),object.getVersion(),object.getPath(),object.getProjectLabel(),isDeleted,isModified,isFolder,inRef);
  }
 else {
    return getText(node.getLabel(),null,null,null,false,false,false,false);
  }
}",0.7432735426008968
128084,"@Override public Font getFont(Object element){
  return JFaceResources.getFontRegistry().defaultFont();
}","@Override public Font getFont(Object element){
  if (element instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)element;
switch (node.getType()) {
case SYSTEM_FOLDER:
      return JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT);
case STABLE_SYSTEM_FOLDER:
default :
  }
}
return JFaceResources.getFontRegistry().defaultFont();
}",0.4439746300211416
128085,"@Override public String getText(Object element){
  return ERepositoryObjectType.RECYCLE_BIN.toString();
}","@Override public String getText(Object element){
  if (isRecycleBin(element)) {
    return ERepositoryObjectType.RECYCLE_BIN.toString();
  }
  return super.getText(element);
}",0.75
128086,"@Override public Image getImage(Object element){
  if (element instanceof RepositoryNode) {
    RepositoryNode recyclebinNode=(RepositoryNode)element;
    if (recyclebinNode.getChildren().isEmpty()) {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_EMPTY_ICON);
    }
 else {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_FULL_ICON);
    }
  }
  return null;
}","@Override public Image getImage(Object element){
  if (isRecycleBin(element)) {
    RepositoryNode recyclebinNode=(RepositoryNode)element;
    if (recyclebinNode.getChildren().isEmpty()) {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_EMPTY_ICON);
    }
 else {
      return ImageProvider.getImage(ECoreImage.RECYCLE_BIN_FULL_ICON);
    }
  }
  return super.getImage(element);
}",0.895483870967742
128087,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}",0.2131624927198602
128088,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == stringDate.length()) {
    return true;
  }
  return false;
}",0.2131624927198602
128089,"public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}","public static String checkStringQuotationMarks(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
 else   if (!str.contains(""String_Node_Str"")) {
    return str;
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"");
}",0.7990430622009569
128090,"/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.isNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  mdColumn.setLength(field.getLength());
  mdColumn.setPrecision(field.getPrecision());
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}","/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.isNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}",0.9348789635185816
128091,"public List<IMetadataColumn> getCurrentMetadataColumns(){
  return this.currentMetadataColumns;
}","@Override public List<IMetadataColumn> getCurrentMetadataColumns(){
  return this.currentMetadataColumns;
}",0.9509803921568628
128092,"public ArrayList login(String endPoint,String username,String password,String timeOut) throws Exception {
  if (endPoint == null) {
    throw new RemoteException(Messages.getString(""String_Node_Str""));
  }
  if (username == null || password == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  ArrayList doLoginList=null;
  if (name != null && pwd != null && url != null) {
    if (!url.equals(endPoint) || !name.equals(username) || !pwd.equals(password)) {
      doLoginList=doLogin(endPoint,username,password);
    }
 else {
      if (isLogin()) {
        return doLoginList;
      }
    }
  }
 else {
    doLoginList=doLogin(endPoint,username,password);
  }
  this.name=username;
  this.pwd=password;
  this.url=endPoint;
  return doLoginList;
}","@Override public ArrayList login(String endPoint,String username,String password,String timeOut) throws Exception {
  if (endPoint == null) {
    throw new RemoteException(Messages.getString(""String_Node_Str""));
  }
  if (username == null || password == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  ArrayList doLoginList=null;
  if (name != null && pwd != null && url != null) {
    if (!url.equals(endPoint) || !name.equals(username) || !pwd.equals(password)) {
      doLoginList=doLogin(endPoint,username,password);
    }
 else {
      if (isLogin()) {
        return doLoginList;
      }
    }
  }
 else {
    doLoginList=doLogin(endPoint,username,password);
  }
  this.name=username;
  this.pwd=password;
  this.url=endPoint;
  return doLoginList;
}",0.9935979513444302
128093,"public boolean isLogin(){
  return this.loginOk;
}","@Override public boolean isLogin(){
  return this.loginOk;
}",0.9090909090909092
128094,"public void setCurrentMetadataColumns(List<IMetadataColumn> currentMetadataColumns){
  this.currentMetadataColumns=currentMetadataColumns;
}","@Override public void setCurrentMetadataColumns(List<IMetadataColumn> currentMetadataColumns){
  this.currentMetadataColumns=currentMetadataColumns;
}",0.9655172413793104
128095,"public void setLogin(boolean login){
  this.loginOk=login;
}","@Override public void setLogin(boolean login){
  this.loginOk=login;
}",0.9230769230769232
128096,"public void describeGlobalSample(){
  try {
    DescribeGlobalResult describeGlobalResult=null;
    describeGlobalResult=binding.describeGlobal();
    String[] types=describeGlobalResult.getTypes();
    for (int i=0; i < types.length; i++)     System.out.println(types[i]);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex.getMessage());
  }
}","@Override public void describeGlobalSample(){
  try {
    DescribeGlobalResult describeGlobalResult=null;
    describeGlobalResult=binding.describeGlobal();
    String[] types=describeGlobalResult.getTypes();
    for (    String type : types) {
      System.out.println(type);
    }
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex.getMessage());
  }
}",0.9005988023952096
128097,"public void setCurrentModuleName(String currentModuleName){
  this.currentModuleName=currentModuleName;
}","@Override public void setCurrentModuleName(String currentModuleName){
  this.currentModuleName=currentModuleName;
}",0.9545454545454546
128098,"public String getCurrentModuleName(){
  return this.currentModuleName;
}","@Override public String getCurrentModuleName(){
  return this.currentModuleName;
}",0.935064935064935
128099,"public List<IMetadataColumn> fetchMetaDataColumns(String module){
  Field[] fields=fetchSFDescriptionField(module);
  if (fields == null || fields.length <= 0) {
    return null;
  }
  List<IMetadataColumn> res=new ArrayList<IMetadataColumn>();
  for (  Field field : fields) {
    res.add(parseFieldToMetadataColumn(field));
  }
  setCurrentMetadataColumns(res);
  return res;
}","@Override public List<IMetadataColumn> fetchMetaDataColumns(String module){
  Field[] fields=fetchSFDescriptionField(module);
  if (fields == null || fields.length <= 0) {
    return null;
  }
  List<IMetadataColumn> res=new ArrayList<IMetadataColumn>();
  for (  Field field : fields) {
    res.add(parseFieldToMetadataColumn(field));
  }
  setCurrentMetadataColumns(res);
  return res;
}",0.9869791666666666
128100,"/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  mdColumn.setLength(field.getLength());
  mdColumn.setPrecision(field.getPrecision());
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}","/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}",0.934923339011925
128101,"/** 
 * Getter for currentMetadataColumns.
 * @return the currentMetadataColumns
 */
public List<IMetadataColumn> getCurrentMetadataColumns(){
  return this.currentMetadataColumns;
}","/** 
 * Getter for currentMetadataColumns.
 * @return the currentMetadataColumns
 */
@Override public List<IMetadataColumn> getCurrentMetadataColumns(){
  return this.currentMetadataColumns;
}",0.9732620320855616
128102,"public ArrayList login(String endPoint,String username,String password,String timeOut) throws Exception {
  if (endPoint == null) {
    throw new RemoteException(Messages.getString(""String_Node_Str""));
  }
  if (username == null || password == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  int time=Integer.valueOf(timeOut);
  ArrayList doLoginList=null;
  sforceManagement=new SforceManagementImpl();
  boolean login=false;
  if (name != null && pwd != null && url != null) {
    if (!url.equals(endPoint) || !name.equals(username) || !pwd.equals(password)) {
      login=sforceManagement.login(endPoint,username,password,time,false);
    }
 else {
      if (isLogin()) {
        return doLoginList;
      }
    }
  }
 else {
    login=sforceManagement.login(endPoint,username,password,time,false);
    doLoginList=new ArrayList();
    doLoginList.add(sforceManagement.getStub());
  }
  setLogin(login);
  setSforceManagement(sforceManagement);
  this.name=username;
  this.pwd=password;
  this.url=endPoint;
  return doLoginList;
}","@Override public ArrayList login(String endPoint,String username,String password,String timeOut) throws Exception {
  if (endPoint == null) {
    throw new RemoteException(Messages.getString(""String_Node_Str""));
  }
  if (username == null || password == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  int time=Integer.valueOf(timeOut);
  ArrayList doLoginList=null;
  sforceManagement=new SforceManagementImpl();
  boolean login=false;
  if (name != null && pwd != null && url != null) {
    if (!url.equals(endPoint) || !name.equals(username) || !pwd.equals(password)) {
      login=sforceManagement.login(endPoint,username,password,time,false);
    }
 else {
      if (isLogin()) {
        return doLoginList;
      }
    }
  }
 else {
    login=sforceManagement.login(endPoint,username,password,time,false);
    doLoginList=new ArrayList();
    doLoginList.add(sforceManagement.getStub());
  }
  setLogin(login);
  setSforceManagement(sforceManagement);
  this.name=username;
  this.pwd=password;
  this.url=endPoint;
  return doLoginList;
}",0.9953271028037384
128103,"/** 
 * Getter for login.
 * @return the login
 */
public boolean isLogin(){
  return this.loginOk;
}","/** 
 * Getter for login.
 * @return the login
 */
@Override public boolean isLogin(){
  return this.loginOk;
}",0.9528301886792452
128104,"/** 
 * Sets the currentMetadataColumns.
 * @param currentMetadataColumns the currentMetadataColumns to set
 */
public void setCurrentMetadataColumns(List<IMetadataColumn> currentMetadataColumns){
  this.currentMetadataColumns=currentMetadataColumns;
}","/** 
 * Sets the currentMetadataColumns.
 * @param currentMetadataColumns the currentMetadataColumns to set
 */
@Override public void setCurrentMetadataColumns(List<IMetadataColumn> currentMetadataColumns){
  this.currentMetadataColumns=currentMetadataColumns;
}",0.980544747081712
128105,"/** 
 * Sets the login.
 * @param login the login to set
 */
public void setLogin(boolean login){
  this.loginOk=login;
}","/** 
 * Sets the login.
 * @param login the login to set
 */
@Override public void setLogin(boolean login){
  this.loginOk=login;
}",0.9603174603174603
128106,"public void describeGlobalSample(){
}","@Override public void describeGlobalSample(){
}",0.8809523809523809
128107,"/** 
 * Sets the currentModuleName.
 * @param currentModuleName the currentModuleName to set
 */
public void setCurrentModuleName(String currentModuleName){
  this.currentModuleName=currentModuleName;
}","/** 
 * Sets the currentModuleName.
 * @param currentModuleName the currentModuleName to set
 */
@Override public void setCurrentModuleName(String currentModuleName){
  this.currentModuleName=currentModuleName;
}",0.9758454106280192
128108,"/** 
 * Getter for currentModuleName.
 * @return the currentModuleName
 */
public String getCurrentModuleName(){
  return this.currentModuleName;
}","/** 
 * Getter for currentModuleName.
 * @return the currentModuleName
 */
@Override public String getCurrentModuleName(){
  return this.currentModuleName;
}",0.9671052631578948
128109,"/** 
 * Fetch a module from SF and transfor to Talend metadata data type. DOC YeXiaowei Comment method ""fetchMetaDataColumns"".
 * @param module
 * @return
 */
public List<IMetadataColumn> fetchMetaDataColumns(String module){
  Field[] fields=fetchSFDescriptionField(module);
  if (fields == null || fields.length <= 0) {
    return null;
  }
  List<IMetadataColumn> res=new ArrayList<IMetadataColumn>();
  for (  Field field : fields) {
    res.add(parseFieldToMetadataColumn(field));
  }
  setCurrentMetadataColumns(res);
  return res;
}","/** 
 * Fetch a module from SF and transfor to Talend metadata data type. DOC YeXiaowei Comment method ""fetchMetaDataColumns"".
 * @param module
 * @return
 */
@Override public List<IMetadataColumn> fetchMetaDataColumns(String module){
  Field[] fields=fetchSFDescriptionField(module);
  if (fields == null || fields.length <= 0) {
    return null;
  }
  List<IMetadataColumn> res=new ArrayList<IMetadataColumn>();
  for (  Field field : fields) {
    res.add(parseFieldToMetadataColumn(field));
  }
  setCurrentMetadataColumns(res);
  return res;
}",0.990791896869245
128110,"private static void getImportFiles(String xsdFile,String newPath){
  File file=new File(xsdFile);
  if (!file.exists()) {
    return;
  }
  String xsdFolder=file.getParent();
  SAXReader saxReader=new SAXReader();
  Document doc;
  try {
    URL url=file.toURI().toURL();
    doc=saxReader.read(url.getFile());
    Element root=doc.getRootElement();
    List<Element> elementsList=new ArrayList<Element>();
    List<Element> importList=root.elements(""String_Node_Str"");
    if (importList != null) {
      elementsList.addAll(importList);
    }
    List<Element> includeList=root.elements(""String_Node_Str"");
    if (includeList != null) {
      elementsList.addAll(includeList);
    }
    if (elementsList.size() <= 0) {
      return;
    }
    for (    Element n : elementsList) {
      Attribute attr=n.attribute(""String_Node_Str"");
      if (attr != null) {
        String importFile=xsdFolder + File.separator + attr.getValue();
        File f=new File(importFile);
        if (f.exists()) {
          File newFile=new File(newPath + attr.getValue());
          if (!newFile.exists()) {
            FilesUtils.copyFile(f,newFile);
            getImportFiles(importFile,newFile.getParent() + File.separator);
          }
        }
      }
    }
  }
 catch (  DocumentException e) {
    ExceptionHandler.process(e);
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
}","private static void getImportFiles(String xsdFile,String newPath){
  File file=new File(xsdFile);
  if (!file.exists()) {
    return;
  }
  String xsdFolder=file.getParent();
  SAXReader saxReader=new SAXReader();
  Document doc;
  try {
    URL url=file.toURI().toURL();
    doc=saxReader.read(url.getFile());
    Element root=doc.getRootElement();
    List<Element> elementsList=new ArrayList<Element>();
    List<Element> importList=root.elements(""String_Node_Str"");
    if (importList != null) {
      elementsList.addAll(importList);
    }
    List<Element> includeList=root.elements(""String_Node_Str"");
    if (includeList != null) {
      elementsList.addAll(includeList);
    }
    if (elementsList.size() <= 0) {
      return;
    }
    for (    Element n : elementsList) {
      Attribute attr=n.attribute(""String_Node_Str"");
      if (attr != null) {
        String importFile=xsdFolder + File.separator + attr.getValue();
        File f=new File(importFile);
        if (f.exists()) {
          File newFile=new File(newPath + attr.getValue());
          FilesUtils.copyFile(f,newFile);
          getImportFiles(importFile,newFile.getParent() + File.separator);
        }
      }
    }
  }
 catch (  DocumentException e) {
    ExceptionHandler.process(e);
  }
catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
}",0.982223771348902
128111,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9800312554262892
128112,"protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<LibraryInfo>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}","protected void createSystemRoutines() throws PersistenceException {
  ERepositoryObjectType routinesType=ERepositoryObjectType.ROUTINES;
  if (routinesType == null) {
    return;
  }
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(routinesType));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(routinesType));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,routinesType,false,false);
  Map<String,List<LibraryInfo>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}",0.954649947753396
128113,"@Override public RootContainer<String,IRepositoryViewObject> getRoutineFromProject(Project project) throws PersistenceException {
  RootContainer<String,IRepositoryViewObject> toReturn=new RootContainer<String,IRepositoryViewObject>();
  ERepositoryObjectType type=ERepositoryObjectType.ROUTINES;
  IProject fsProject=ResourceModelUtils.getProject(project);
  IFolder objectFolder=ResourceUtils.getFolder(fsProject,ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES),true);
  addFolderMembers(project,type,toReturn,objectFolder,true);
  saveProject(project);
  return toReturn;
}","@Override public RootContainer<String,IRepositoryViewObject> getRoutineFromProject(Project project) throws PersistenceException {
  RootContainer<String,IRepositoryViewObject> toReturn=new RootContainer<String,IRepositoryViewObject>();
  ERepositoryObjectType type=ERepositoryObjectType.ROUTINES;
  if (type != null) {
    IProject fsProject=ResourceModelUtils.getProject(project);
    IFolder objectFolder=ResourceUtils.getFolder(fsProject,ERepositoryObjectType.getFolderName(type),true);
    addFolderMembers(project,type,toReturn,objectFolder,true);
    saveProject(project);
  }
  return toReturn;
}",0.9432387312186978
128114,"@Override public List<ModuleNeeded> getModulesNeededForJobs() throws PersistenceException {
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  IProxyRepositoryFactory repositoryFactory=CoreRuntimePlugin.getInstance().getRepositoryService().getProxyRepositoryFactory();
  List<IRepositoryViewObject> jobs=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true);
  for (  IRepositoryViewObject cur : jobs) {
    if (!cur.isDeleted()) {
      ProcessItem item=(ProcessItem)cur.getProperty().getItem();
      if (item == null || item.getProcess() == null) {
        continue;
      }
      List<NodeType> nodes=item.getProcess().getNode();
      for (      NodeType node : nodes) {
        List<ElementParameterType> elementParameter=node.getElementParameter();
        for (        ElementParameterType elementParam : elementParameter) {
          if (elementParam.getField() != null && elementParam.getField().equals(EParameterFieldType.MODULE_LIST.getName())) {
            String uniquename=coreSerivce.getParameterUNIQUENAME(node);
            ModuleNeeded toAdd=new ModuleNeeded(Messages.getString(""String_Node_Str"") + item.getProperty().getLabel(),elementParam.getValue(),Messages.getString(""String_Node_Str"") + uniquename + ""String_Node_Str"",true);
            importNeedsList.add(toAdd);
          }
        }
      }
    }
  }
  return importNeedsList;
}","@Override public List<ModuleNeeded> getModulesNeededForJobs() throws PersistenceException {
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  IProxyRepositoryFactory repositoryFactory=CoreRuntimePlugin.getInstance().getRepositoryService().getProxyRepositoryFactory();
  ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
  if (jobType != null) {
    List<IRepositoryViewObject> jobs=repositoryFactory.getAll(jobType,true);
    for (    IRepositoryViewObject cur : jobs) {
      if (!cur.isDeleted()) {
        ProcessItem item=(ProcessItem)cur.getProperty().getItem();
        if (item == null || item.getProcess() == null) {
          continue;
        }
        List<NodeType> nodes=item.getProcess().getNode();
        for (        NodeType node : nodes) {
          List<ElementParameterType> elementParameter=node.getElementParameter();
          for (          ElementParameterType elementParam : elementParameter) {
            if (elementParam.getField() != null && elementParam.getField().equals(EParameterFieldType.MODULE_LIST.getName())) {
              String uniquename=coreSerivce.getParameterUNIQUENAME(node);
              ModuleNeeded toAdd=new ModuleNeeded(Messages.getString(""String_Node_Str"") + item.getProperty().getLabel(),elementParam.getValue(),Messages.getString(""String_Node_Str"") + uniquename + ""String_Node_Str"",true);
              importNeedsList.add(toAdd);
            }
          }
        }
      }
    }
  }
  return importNeedsList;
}",0.9257975034674064
128115,"protected void createSystemSQLPatterns() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemSQLPatterns();
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.SQLPATTERNS,false,false);
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    Path relativePath=new Path(url.getFile());
    String fileName=relativePath.segment(relativePath.segmentCount() - 1);
    String categoryName=relativePath.segment(relativePath.segmentCount() - 2);
    tmp=fileName.split(""String_Node_Str"");
    String sqlPatternLabel=tmp[0];
    SQLPatternItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(sqlPatternLabel) && object.getProperty().getItem() instanceof SQLPatternItem && ((SQLPatternItem)object.getProperty().getItem()).getEltName().equals(categoryName)) {
        existingItem=(SQLPatternItem)object.getProperty().getItem();
        break;
      }
    }
    IPath categoryPath=new Path(categoryName);
    IPath systemPath=categoryPath.append(RepositoryConstants.SYSTEM_DIRECTORY);
    IPath userPath=categoryPath.append(RepositoryConstants.USER_DEFINED);
    IPath parentPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.SQLPATTERNS));
    if (folderHelper.getFolder(parentPath.append(categoryPath)) == null) {
      createFolder(getRepositoryContext().getProject(),ERepositoryObjectType.SQLPATTERNS,new Path(""String_Node_Str""),categoryPath.lastSegment());
    }
    FolderItem systemFolder=folderHelper.getFolder(parentPath.append(systemPath));
    if (systemFolder == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),ERepositoryObjectType.SQLPATTERNS,categoryPath,systemPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (folderHelper.getFolder(parentPath.append(userPath)) == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),ERepositoryObjectType.SQLPATTERNS,categoryPath,userPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (existingItem == null) {
      createSQLPattern(url,sqlPatternLabel,categoryName);
    }
 else {
      updateSQLPattern(url,existingItem);
      existingItem.setParent(systemFolder);
    }
  }
}","protected void createSystemSQLPatterns() throws PersistenceException {
  ERepositoryObjectType sqlpatternsType=ERepositoryObjectType.SQLPATTERNS;
  if (sqlpatternsType == null) {
    return;
  }
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemSQLPatterns();
  List<IRepositoryViewObject> repositoryObjects=getAll(project,sqlpatternsType,false,false);
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    Path relativePath=new Path(url.getFile());
    String fileName=relativePath.segment(relativePath.segmentCount() - 1);
    String categoryName=relativePath.segment(relativePath.segmentCount() - 2);
    tmp=fileName.split(""String_Node_Str"");
    String sqlPatternLabel=tmp[0];
    SQLPatternItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(sqlPatternLabel) && object.getProperty().getItem() instanceof SQLPatternItem && ((SQLPatternItem)object.getProperty().getItem()).getEltName().equals(categoryName)) {
        existingItem=(SQLPatternItem)object.getProperty().getItem();
        break;
      }
    }
    IPath categoryPath=new Path(categoryName);
    IPath systemPath=categoryPath.append(RepositoryConstants.SYSTEM_DIRECTORY);
    IPath userPath=categoryPath.append(RepositoryConstants.USER_DEFINED);
    IPath parentPath=new Path(ERepositoryObjectType.getFolderName(sqlpatternsType));
    if (folderHelper.getFolder(parentPath.append(categoryPath)) == null) {
      createFolder(getRepositoryContext().getProject(),sqlpatternsType,new Path(""String_Node_Str""),categoryPath.lastSegment());
    }
    FolderItem systemFolder=folderHelper.getFolder(parentPath.append(systemPath));
    if (systemFolder == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,systemPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (folderHelper.getFolder(parentPath.append(userPath)) == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,userPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (existingItem == null) {
      createSQLPattern(url,sqlPatternLabel,categoryName);
    }
 else {
      updateSQLPattern(url,existingItem);
      existingItem.setParent(systemFolder);
    }
  }
}",0.7481865284974093
128116,"@Override public List<IRepositoryViewObject> getRecycleBinItems(Project project,boolean... options) throws PersistenceException {
  ERepositoryObjectType types[]={ERepositoryObjectType.DOCUMENTATION,ERepositoryObjectType.METADATA_CONNECTIONS,ERepositoryObjectType.METADATA_SAPCONNECTIONS,ERepositoryObjectType.SQLPATTERNS,ERepositoryObjectType.METADATA_FILE_DELIMITED,ERepositoryObjectType.METADATA_FILE_POSITIONAL,ERepositoryObjectType.PROCESS,ERepositoryObjectType.CONTEXT,ERepositoryObjectType.SNIPPETS,ERepositoryObjectType.ROUTINES,ERepositoryObjectType.BUSINESS_PROCESS,ERepositoryObjectType.METADATA_FILE_REGEXP,ERepositoryObjectType.METADATA_FILE_XML,ERepositoryObjectType.METADATA_FILE_LDIF,ERepositoryObjectType.METADATA_FILE_EXCEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA,ERepositoryObjectType.METADATA_GENERIC_SCHEMA,ERepositoryObjectType.METADATA_WSDL_SCHEMA,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA,ERepositoryObjectType.JOBLET,ERepositoryObjectType.METADATA_FILE_EBCDIC,ERepositoryObjectType.METADATA_FILE_RULES,ERepositoryObjectType.METADATA_FILE_HL7,ERepositoryObjectType.METADATA_FILE_FTP,ERepositoryObjectType.METADATA_FILE_BRMS,ERepositoryObjectType.METADATA_MDMCONNECTION,ERepositoryObjectType.METADATA_HEADER_FOOTER,ERepositoryObjectType.JOB_SCRIPT};
  List<IRepositoryViewObject> deletedItems=new ArrayList<IRepositoryViewObject>();
  for (  ERepositoryObjectType type : types) {
    RootContainer<String,IRepositoryViewObject> container=getObjectFromFolder(project,type,true,options);
    List<IRepositoryViewObject> repositoryObjects=container.getAbsoluteMembers().objects();
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.isDeleted()) {
        deletedItems.add(object);
      }
    }
  }
  return deletedItems;
}","@Override public List<IRepositoryViewObject> getRecycleBinItems(Project project,boolean... options) throws PersistenceException {
  ERepositoryObjectType types[]={ERepositoryObjectType.DOCUMENTATION,ERepositoryObjectType.METADATA_CONNECTIONS,ERepositoryObjectType.METADATA_SAPCONNECTIONS,ERepositoryObjectType.SQLPATTERNS,ERepositoryObjectType.METADATA_FILE_DELIMITED,ERepositoryObjectType.METADATA_FILE_POSITIONAL,ERepositoryObjectType.PROCESS,ERepositoryObjectType.CONTEXT,ERepositoryObjectType.SNIPPETS,ERepositoryObjectType.ROUTINES,ERepositoryObjectType.BUSINESS_PROCESS,ERepositoryObjectType.METADATA_FILE_REGEXP,ERepositoryObjectType.METADATA_FILE_XML,ERepositoryObjectType.METADATA_FILE_LDIF,ERepositoryObjectType.METADATA_FILE_EXCEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA,ERepositoryObjectType.METADATA_GENERIC_SCHEMA,ERepositoryObjectType.METADATA_WSDL_SCHEMA,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA,ERepositoryObjectType.JOBLET,ERepositoryObjectType.METADATA_FILE_EBCDIC,ERepositoryObjectType.METADATA_FILE_RULES,ERepositoryObjectType.METADATA_FILE_HL7,ERepositoryObjectType.METADATA_FILE_FTP,ERepositoryObjectType.METADATA_FILE_BRMS,ERepositoryObjectType.METADATA_MDMCONNECTION,ERepositoryObjectType.METADATA_HEADER_FOOTER,ERepositoryObjectType.JOB_SCRIPT};
  List<IRepositoryViewObject> deletedItems=new ArrayList<IRepositoryViewObject>();
  for (  ERepositoryObjectType type : types) {
    if (type != null) {
      RootContainer<String,IRepositoryViewObject> container=getObjectFromFolder(project,type,true,options);
      List<IRepositoryViewObject> repositoryObjects=container.getAbsoluteMembers().objects();
      for (      IRepositoryViewObject object : repositoryObjects) {
        if (object.isDeleted()) {
          deletedItems.add(object);
        }
      }
    }
  }
  return deletedItems;
}",0.9872717210846708
128117,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 01:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == formatDate.length()) {
    return true;
  }
  return false;
}",0.2131004366812227
128118,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9800312554262892
128119,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}","/** 
 * test string value as a date with right pattern. </br>examples: </br>TimeZone:+0100 </br>2011/03/27 02:00:00 begin to carry out the daylight saving time. So parse dateString ""20110327 021711"" with TimeZone is wrong </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",false)</code> return <code>false</code> </br> <code>isDate(""20110327 021711"", ""yyyyMMdd HHmmss"",true)</code> return <code>true</code> </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",true)</code> return <code>false</code>  </br> <code>isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"",false)</code> return <code>false</code>
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @param ignoreTimeZone (if true ignore TimeZone when pare date with pattern)
 * @return the result whether the stringDate is a date string that with a right pattern
 */
public static boolean isDate(String stringDate,String pattern,boolean ignoreTimeZone){
  TimeZone tz=TimeZone.getDefault();
  if (ignoreTimeZone) {
    tz=TimeZone.getTimeZone(""String_Node_Str"");
  }
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  sdf.setTimeZone(tz);
  sdf.setLenient(false);
  java.util.Date testDate=null;
  ParsePosition pos=new ParsePosition(0);
  testDate=sdf.parse(stringDate,pos);
  if (testDate == null) {
    return false;
  }
  String formatDate=sdf.format(testDate);
  if (formatDate.equalsIgnoreCase(stringDate) || pos.getIndex() == formatDate.length()) {
    return true;
  }
  return false;
}",0.2131004366812227
128120,"@SuppressWarnings(""String_Node_Str"") public static <T extends DynaEnum<T>>T valueOf(Class<T> enumType,String name){
  return (T)elements.get(enumType).get(name.toUpperCase());
}","@SuppressWarnings(""String_Node_Str"") public static <T extends DynaEnum<T>>T valueOf(Class<T> enumType,String name){
  T t=(T)elements.get(enumType).get(name.toUpperCase());
  return t;
}",0.9421487603305784
128121,"@Override public String toString(){
switch (getType()) {
case REPOSITORY_ELEMENT:
    return getObject().toString();
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
return service.getRepositoryPath(this).toString();
default :
return getType() + ""String_Node_Str"" + getProperties(EProperties.LABEL);
}
}","@Override public String toString(){
switch (getType()) {
case REPOSITORY_ELEMENT:
    return getObject().toString();
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
return service.getRepositoryPath(this).toString() + ""String_Node_Str"" + getContentType();
default :
return getType().toString() + '-' + getProperties(EProperties.LABEL);
}
}",0.8940092165898618
128122,"/** 
 * Sets the icon.
 * @param icon the icon to set
 */
public void setIcon(IImage icon){
  this.icon=icon;
}","/** 
 * Sets the icon.
 * @param icon the icon to set
 */
@Override public void setIcon(IImage icon){
  this.icon=icon;
}",0.956896551724138
128123,"/** 
 * Getter for label.
 * @return the label
 */
public String getLabel(){
  return this.label;
}","/** 
 * Getter for label.
 * @return the label
 */
@Override public String getLabel(){
  return this.label;
}",0.9519230769230768
128124,"/** 
 * Getter for icon.
 * @return the icon
 */
public IImage getIcon(){
  return this.icon;
}","/** 
 * Getter for icon.
 * @return the icon
 */
@Override public IImage getIcon(){
  return this.icon;
}",0.95
128125,"/** 
 * DOC guanglong.du Comment method ""updateFromRepositoryType"".
 * @param itemType
 */
public static void updateFromRepositoryType(ERepositoryObjectType itemType){
  updatePalette(faState);
  setExtraEntryVisible(ERepositoryObjectType.JOBLET.equals(itemType));
}","/** 
 * DOC guanglong.du Comment method ""updateFromRepositoryType"".
 * @param itemType
 */
public static void updateFromRepositoryType(ERepositoryObjectType itemType){
  updatePalette(faState);
  setExtraEntryVisible(itemType.equals(ERepositoryObjectType.JOBLET));
}",0.9398496240601504
128126,"protected Item copyFromResource(Resource createResource,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
  Property property=newItem.getProperty();
  property.setId(getNextId());
  property.setAuthor(getRepositoryContext().getUser());
  if (changeLabelWithCopyPrefix) {
    setPropNewName(property);
  }
  EcoreUtil.resolveAll(createResource);
  return newItem;
}","protected Item copyFromResource(Resource createResource,String newItemName) throws PersistenceException, BusinessException {
  Item newItem=(Item)EcoreUtil.getObjectByType(createResource.getContents(),PropertiesPackage.eINSTANCE.getItem());
  Property property=newItem.getProperty();
  property.setId(getNextId());
  property.setLabel(newItemName);
  property.setDisplayName(newItemName);
  property.setAuthor(getRepositoryContext().getUser());
  EcoreUtil.resolveAll(createResource);
  return newItem;
}",0.6994106090373281
128127,"public Item copy(Item item,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException ;","public Item copy(Item originalItem,IPath path,String newItemName) throws PersistenceException, BusinessException ;",0.7914893617021277
128128,"@Override public Item copy(Item sourceItem,IPath targetPath,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  if (sourceItem instanceof ProcessItem) {
    try {
      coreService.checkJob(sourceItem.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  Item targetItem=this.repositoryFactoryFromProvider.copy(sourceItem,targetPath,changeLabelWithCopyPrefix);
  return targetItem;
}","@Override public Item copy(Item sourceItem,IPath targetPath,String newItemName) throws PersistenceException, BusinessException {
  if (sourceItem instanceof ProcessItem) {
    try {
      coreService.checkJob(sourceItem.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  Item targetItem=this.repositoryFactoryFromProvider.copy(sourceItem,targetPath,newItemName);
  return targetItem;
}",0.9144542772861356
128129,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.9866666666666668
128130,"private void synDuplicatedRoutine(RoutineItem item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createRoutineSynchronizer().renameRoutineClass((RoutineItem)item);
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine((RoutineItem)item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void synDuplicatedRoutine(RoutineItem item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createRoutineSynchronizer().renameRoutineClass(item);
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9727463312368972
128131,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            String id=null;
            String label=null;
            boolean isfirst=true;
            boolean needSys=true;
            for (            IRepositoryViewObject object : selectedVersionItems) {
              Item selectedItem=object.getProperty().getItem();
              try {
                final Item copy=factory.copy(selectedItem,path);
                if (isfirst) {
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
                copy.getProperty().setId(id);
                copy.getProperty().setLabel(label);
                copy.getProperty().setDisplayName(label);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy);
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
                }
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
catch (              BusinessException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            String id=null;
            String label=null;
            boolean isfirst=true;
            boolean needSys=true;
            for (            IRepositoryViewObject object : selectedVersionItems) {
              Item selectedItem=object.getProperty().getItem();
              try {
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy);
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
catch (              BusinessException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}",0.9519700891573196
128132,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem);
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem);
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.9959382615759546
128133,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    label=copy.getProperty().getLabel();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  copy.getProperty().setLabel(newJobName);
                  copy.getProperty().setDisplayName(newJobName);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9747503086073392
128134,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9790499896287076
128135,"public abstract Item copy(Item item,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException ;","public abstract Item copy(Item originalItem,IPath path,String newItemName) throws PersistenceException, BusinessException ;",0.8063241106719368
128136,"@Override public Item copy(Item originalItem,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    copyScreenshotFile(originalItem,newItem);
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","public Item copy(Item originalItem,IPath path,String newItemName) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=copyFromResource(createResource,newItemName);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    copyScreenshotFile(originalItem,newItem);
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9671742808798648
128137,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  IPath path=resource.getFullPath();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null) {
      int matchingFirstSegments=path.matchingFirstSegments(topLevelNodeWorkspaceRelativePath);
      if (path.segmentCount() == matchingFirstSegments || matchingFirstSegments == topLevelNodeWorkspaceRelativePath.segmentCount()) {
        if ((delta.getAffectedChildren().length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (resource instanceof IContainer))) {
          if (viewer instanceof RepoViewCommonViewer) {
            runnables.add(new Runnable(){
              @Override public void run(){
                refreshTopLevelNode(repoNode);
              }
            }
);
          }
          return false;
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  boolean talendProChange=false;
  IResource resource=delta.getResource();
  IPath path=resource.getFullPath();
  if (path != null && path.lastSegment() != null) {
    talendProChange=FileConstants.LOCAL_PROJECT_FILENAME.equals(path.lastSegment());
  }
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null) {
      int matchingFirstSegments=path.matchingFirstSegments(topLevelNodeWorkspaceRelativePath);
      if (path.segmentCount() == matchingFirstSegments || matchingFirstSegments == topLevelNodeWorkspaceRelativePath.segmentCount() || talendProChange) {
        if ((delta.getAffectedChildren().length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || talendProChange || (resource instanceof IContainer))) {
          if (viewer instanceof RepoViewCommonViewer) {
            runnables.add(new Runnable(){
              @Override public void run(){
                refreshTopLevelNode(repoNode);
              }
            }
);
          }
          return false;
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}",0.9158061953931692
128138,"private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
        emptyLibs();
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}","private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                if (installedModules > 0) {
                  emptyLibs();
                }
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}",0.9741496598639456
128139,"private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  if (itemResource.getContents().isEmpty()) {
    EMap screenshots=null;
    if (item instanceof ProcessItem) {
      screenshots=((ProcessItem)item).getProcess().getScreenshots();
      itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
    }
 else     if (item instanceof JobletProcessItem) {
      screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
      itemResource.getContents().addAll(screenshots);
    }
  }
  return itemResource;
}","private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
  }
  if (screenshots != null && !screenshots.isEmpty()) {
    itemResource.getContents().clear();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
  return itemResource;
}",0.5579036348267118
128140,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
    return false;
  }
  return true;
}","/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}",0.7272099447513812
128141,"public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}","public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
    for (    Resource res : resources) {
      if (res != null) {
        if (itemResourceURI.toString().equals(res.getURI().toString())) {
          res.unload();
          resourceSet.getResources().remove(res);
          break;
        }
      }
    }
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}",0.8408124704770902
128142,"@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      if (!job.installedModules.isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
    }
  }
);
}","@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      if (!job.installedModules.isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
        emptyLibs();
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
    }
  }
);
}",0.9794721407624634
128143,"private void addInstallButtons(TableViewerCreatorColumn installColumn,TableViewerCreatorColumn urlColumn){
  installButtons.clear();
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        installButtons.add(button);
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            button.setEnabled(false);
            table.select(table.indexOf(item));
            List<ModuleToInstall> datalist=new ArrayList<ModuleToInstall>();
            datalist.add(data);
            final DownloadModuleJob job=new DownloadModuleJob(datalist);
            job.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                Display.getDefault().asyncExec(new Runnable(){
                  @Override public void run(){
                    String message=""String_Node_Str"";
                    if (!job.installedModules.isEmpty()) {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                    }
 else {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                      ;
                    }
                    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                  }
                }
);
              }
            }
);
            job.setUser(true);
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            int n=0;
            for (            Button button : installButtons) {
              if (!button.isEnabled()) {
                n++;
              }
            }
            if (n == installButtons.size()) {
              close();
            }
          }
        }
);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout();
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        GridData gData=new GridData(GridData.FILL_HORIZONTAL);
        gData.horizontalAlignment=SWT.CENTER;
        gData.verticalAlignment=SWT.CENTER;
        final Link openLink=new Link(composite,SWT.NONE);
        openLink.setBackground(color);
        openLink.setLayoutData(gData);
        openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        openLink.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          final SelectionEvent e){
            Program.launch(data.getUrl_description());
          }
        }
);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installColumn));
      editor.layout();
      editor=new TableEditor(table);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + data.getUrl_description() + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlColumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}","private void addInstallButtons(TableViewerCreatorColumn installColumn,TableViewerCreatorColumn urlColumn){
  installButtons.clear();
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        installButtons.add(button);
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            button.setEnabled(false);
            table.select(table.indexOf(item));
            List<ModuleToInstall> datalist=new ArrayList<ModuleToInstall>();
            datalist.add(data);
            final DownloadModuleJob job=new DownloadModuleJob(datalist);
            job.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                Display.getDefault().asyncExec(new Runnable(){
                  @Override public void run(){
                    String message=""String_Node_Str"";
                    if (!job.installedModules.isEmpty()) {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                      emptyLibs();
                    }
 else {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                      ;
                    }
                    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                  }
                }
);
              }
            }
);
            job.setUser(true);
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            int n=0;
            for (            Button button : installButtons) {
              if (!button.isEnabled()) {
                n++;
              }
            }
            if (n == installButtons.size()) {
              close();
            }
          }
        }
);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout();
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        GridData gData=new GridData(GridData.FILL_HORIZONTAL);
        gData.horizontalAlignment=SWT.CENTER;
        gData.verticalAlignment=SWT.CENTER;
        final Link openLink=new Link(composite,SWT.NONE);
        openLink.setBackground(color);
        openLink.setLayoutData(gData);
        openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        openLink.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          final SelectionEvent e){
            Program.launch(data.getUrl_description());
          }
        }
);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installColumn));
      editor.layout();
      editor=new TableEditor(table);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + data.getUrl_description() + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlColumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}",0.9962084281226302
128144,"private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}","private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
        emptyLibs();
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}",0.995135510771369
128145,"private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  emptyLibs();
}","private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
}",0.9979819722857528
128146,"private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  if (itemResource.getContents().isEmpty()) {
    EMap screenshots=null;
    if (item instanceof ProcessItem) {
      screenshots=((ProcessItem)item).getProcess().getScreenshots();
      itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
    }
 else     if (item instanceof JobletProcessItem) {
      screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
      itemResource.getContents().addAll(screenshots);
    }
  }
  return itemResource;
}","private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
  }
  if (screenshots != null && !screenshots.isEmpty()) {
    itemResource.getContents().clear();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
  return itemResource;
}",0.5579036348267118
128147,"public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}","public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
if (dbType != null && dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName())) {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}",0.9604578563995838
128148,"private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  if (itemResource.getContents().isEmpty()) {
    EMap screenshots=null;
    if (item instanceof ProcessItem) {
      screenshots=((ProcessItem)item).getProcess().getScreenshots();
      itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
    }
 else     if (item instanceof JobletProcessItem) {
      screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
      itemResource.getContents().addAll(screenshots);
    }
  }
  return itemResource;
}","private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
  }
  if (screenshots != null && !screenshots.isEmpty()) {
    itemResource.getContents().clear();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
  return itemResource;
}",0.5579036348267118
128149,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
    return false;
  }
  return true;
}","/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}",0.7272099447513812
128150,"@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      if (!job.installedModules.isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
    }
  }
);
}","@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      if (!job.installedModules.isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
        emptyLibs();
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
    }
  }
);
}",0.9794721407624634
128151,"private void addInstallButtons(TableViewerCreatorColumn installColumn,TableViewerCreatorColumn urlColumn){
  installButtons.clear();
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        installButtons.add(button);
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            button.setEnabled(false);
            table.select(table.indexOf(item));
            List<ModuleToInstall> datalist=new ArrayList<ModuleToInstall>();
            datalist.add(data);
            final DownloadModuleJob job=new DownloadModuleJob(datalist);
            job.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                Display.getDefault().asyncExec(new Runnable(){
                  @Override public void run(){
                    String message=""String_Node_Str"";
                    if (!job.installedModules.isEmpty()) {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                    }
 else {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                      ;
                    }
                    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                  }
                }
);
              }
            }
);
            job.setUser(true);
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            int n=0;
            for (            Button button : installButtons) {
              if (!button.isEnabled()) {
                n++;
              }
            }
            if (n == installButtons.size()) {
              close();
            }
          }
        }
);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout();
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        GridData gData=new GridData(GridData.FILL_HORIZONTAL);
        gData.horizontalAlignment=SWT.CENTER;
        gData.verticalAlignment=SWT.CENTER;
        final Link openLink=new Link(composite,SWT.NONE);
        openLink.setBackground(color);
        openLink.setLayoutData(gData);
        openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        openLink.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          final SelectionEvent e){
            Program.launch(data.getUrl_description());
          }
        }
);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installColumn));
      editor.layout();
      editor=new TableEditor(table);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + data.getUrl_description() + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlColumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}","private void addInstallButtons(TableViewerCreatorColumn installColumn,TableViewerCreatorColumn urlColumn){
  installButtons.clear();
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        installButtons.add(button);
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            button.setEnabled(false);
            table.select(table.indexOf(item));
            List<ModuleToInstall> datalist=new ArrayList<ModuleToInstall>();
            datalist.add(data);
            final DownloadModuleJob job=new DownloadModuleJob(datalist);
            job.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                Display.getDefault().asyncExec(new Runnable(){
                  @Override public void run(){
                    String message=""String_Node_Str"";
                    if (!job.installedModules.isEmpty()) {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                      emptyLibs();
                    }
 else {
                      message=Messages.getString(""String_Node_Str"",data.getName());
                      ;
                    }
                    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                  }
                }
);
              }
            }
);
            job.setUser(true);
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            int n=0;
            for (            Button button : installButtons) {
              if (!button.isEnabled()) {
                n++;
              }
            }
            if (n == installButtons.size()) {
              close();
            }
          }
        }
);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout();
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        GridData gData=new GridData(GridData.FILL_HORIZONTAL);
        gData.horizontalAlignment=SWT.CENTER;
        gData.verticalAlignment=SWT.CENTER;
        final Link openLink=new Link(composite,SWT.NONE);
        openLink.setBackground(color);
        openLink.setLayoutData(gData);
        openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        openLink.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          final SelectionEvent e){
            Program.launch(data.getUrl_description());
          }
        }
);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installColumn));
      editor.layout();
      editor=new TableEditor(table);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + data.getUrl_description() + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlColumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}",0.9962084281226302
128152,"private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}","private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                if (installedModules > 0) {
                  emptyLibs();
                }
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}",0.9788106630211894
128153,"private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  emptyLibs();
}","private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
}",0.9979819722857528
128154,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
    return false;
  }
  return true;
}","/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}",0.7272099447513812
128155,"public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
if (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName())) {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}","public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
if (dbType != null && dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName())) {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}",0.995475113122172
128156,"private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}","private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(File.separator).append(JavaUtils.JAVA_LIB_DIRECTORY).toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}",0.8745387453874539
128157,"public void run(){
  for (int i=0; i < fileNames.length; i++) {
    final File file=new File(path + File.separatorChar + fileNames[i]);
    try {
      CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}","@Override public void run(){
  for (  String fileName : fileNames) {
    final File file=new File(path + File.separatorChar + fileName);
    try {
      CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      emptyLibs();
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.8765822784810127
128158,"public void setElement(IElement element){
  if (element instanceof INode) {
    jobInfo=new BasicJobInfo(((INode)element).getProcess().getId(),null,((INode)element).getProcess().getVersion());
    jobInfo.setJobName(((INode)element).getProcess().getName());
    type=ProblemType.JOB;
    nodeName=((INode)element).getUniqueName();
    componentName=((INode)element).getComponent().getName();
  }
}","public void setElement(IElement element){
  if (element instanceof INode) {
    jobInfo=new BasicJobInfo(((INode)element).getProcess().getId(),null,((INode)element).getProcess().getVersion());
    jobInfo.setJobName(((INode)element).getProcess().getName());
    type=ProblemType.JOB;
    nodeName=((INode)element).getUniqueName();
    componentName=((INode)element).getComponent().getName();
  }
 else   if (element instanceof IProcess) {
    jobInfo=new BasicJobInfo(((IProcess)element).getId(),null,((IProcess)element).getVersion());
    jobInfo.setJobName(((IProcess)element).getName());
    type=ProblemType.JOB;
  }
}",0.7791952894995093
128159,"private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}","private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}",0.923728813559322
128160,"/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
  java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
  java.util.Date testDate=null;
  try {
    testDate=sdf.parse(stringDate);
  }
 catch (  ParseException e) {
    return false;
  }
  if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
    return false;
  }
  return true;
}","/** 
 * test string value as a date (with right pattern)
 * @param stringDate (A <code>String</code> whose beginning should be parsed)
 * @param pattern (the pattern to format, like: ""yyyy-MM-dd HH:mm:ss"")
 * @return the result wheather the stringDate is a date string that with a right pattern{talendTypes} Boolean {Category} TalendDate {param} String(mydate) stringDate : the date to judge {param} String(""yyyy-MM-dd HH:mm:ss"") pattern : the specified pattern {examples} ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return true ->> isDate(""2008-11-24 12:15:25"", ""yyyy-MM-dd HH:mm"") return false ->> isDate(""2008-11-32 12:15:25"", ""yyyy-MM-dd HH:mm:ss"") return false #
 */
public static boolean isDate(String stringDate,String pattern){
  if (stringDate == null) {
    return false;
  }
  boolean hasZone=false;
  if (pattern == null) {
    pattern=""String_Node_Str"";
  }
 else {
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
  }
  java.util.Date testDate=null;
  if (hasZone) {
    testDate=parseDate(pattern,stringDate);
    if (!formatDate(pattern,testDate).equalsIgnoreCase(stringDate)) {
      return false;
    }
  }
 else {
    java.text.SimpleDateFormat sdf=new java.text.SimpleDateFormat(pattern);
    sdf.setTimeZone(new java.util.SimpleTimeZone(0,sdf.getTimeZone().getID()));
    try {
      testDate=sdf.parse(stringDate);
      if (!sdf.format(testDate).equalsIgnoreCase(stringDate)) {
        return false;
      }
    }
 catch (    ParseException e) {
      return false;
    }
  }
  return true;
}",0.7272099447513812
128161,"public void run(){
  if (PlatformUI.isWorkbenchRunning()) {
    IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
    list.addAll(Arrays.asList(reference));
  }
}","@Override public void run(){
  if (PlatformUI.isWorkbenchRunning()) {
    IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
    list.addAll(Arrays.asList(reference));
  }
}",0.9789915966386554
128162,"public static IEditorReference[] getEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      if (PlatformUI.isWorkbenchRunning()) {
        IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
        list.addAll(Arrays.asList(reference));
      }
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}","public static IEditorReference[] getEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      if (PlatformUI.isWorkbenchRunning()) {
        IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
        list.addAll(Arrays.asList(reference));
      }
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}",0.9896907216494846
128163,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  final Problem other=(Problem)obj;
  if (this.description == null) {
    if (other.description != null)     return false;
  }
 else   if (!this.description.equals(other.description))   return false;
  if (this.jobInfo == null) {
    if (other.jobInfo != null)     return false;
  }
 else   if (!this.jobInfo.equals(other.jobInfo))   return false;
  if (this.nodeName == null) {
    if (other.nodeName != null)     return false;
  }
 else   if (!this.nodeName.equals(other.nodeName))   return false;
  if (this.componentName == null) {
    if (other.componentName != null)     return false;
  }
 else   if (!this.componentName.equals(other.componentName))   return false;
  if (this.status == null) {
    if (other.status != null)     return false;
  }
 else   if (!this.status.equals(other.status))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Problem other=(Problem)obj;
  if (this.description == null) {
    if (other.description != null) {
      return false;
    }
  }
 else   if (!this.description.equals(other.description)) {
    return false;
  }
  if (this.jobInfo == null) {
    if (other.jobInfo != null) {
      return false;
    }
  }
 else   if (!this.jobInfo.equals(other.jobInfo)) {
    return false;
  }
  if (this.nodeName == null) {
    if (other.nodeName != null) {
      return false;
    }
  }
 else   if (!this.nodeName.equals(other.nodeName)) {
    return false;
  }
  if (this.componentName == null) {
    if (other.componentName != null) {
      return false;
    }
  }
 else   if (!this.componentName.equals(other.componentName)) {
    return false;
  }
  if (this.status == null) {
    if (other.status != null) {
      return false;
    }
  }
 else   if (!this.status.equals(other.status)) {
    return false;
  }
  return true;
}",0.7364928909952607
128164,"public void setElement(IElement element){
  if (element instanceof INode) {
    jobInfo=new BasicJobInfo(((INode)element).getProcess().getId(),null,((INode)element).getProcess().getVersion());
    jobInfo.setJobName(((INode)element).getProcess().getName());
    type=ProblemType.JOB;
    nodeName=((INode)element).getUniqueName();
    componentName=((INode)element).getComponent().getName();
  }
}","public void setElement(IElement element){
  if (element instanceof INode) {
    jobInfo=new BasicJobInfo(((INode)element).getProcess().getId(),null,((INode)element).getProcess().getVersion());
    jobInfo.setJobName(((INode)element).getProcess().getName());
    type=ProblemType.JOB;
    nodeName=((INode)element).getUniqueName();
    componentName=((INode)element).getComponent().getName();
  }
 else   if (element instanceof IProcess) {
    jobInfo=new BasicJobInfo(((IProcess)element).getId(),null,((IProcess)element).getVersion());
    jobInfo.setJobName(((IProcess)element).getName());
    type=ProblemType.JOB;
  }
}",0.7791952894995093
128165,"public void run(){
  for (int i=0; i < fileNames.length; i++) {
    final File file=new File(path + File.separatorChar + fileNames[i]);
    try {
      CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}","public void run(){
  for (int i=0; i < fileNames.length; i++) {
    final File file=new File(path + File.separatorChar + fileNames[i]);
    try {
      CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      emptyLibs();
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9698890649762282
128166,"private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
}","private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  emptyLibs();
}",0.9979819722857528
128167,"private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}","private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}",0.923728813559322
128168,"private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}","private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}",0.923728813559322
128169,"private void initExtensionRepositoryNodes(final IRepositoryNode curParentNode){
  Map<ERepositoryObjectType,RepositoryNode> repositoryNodeExtensionMap=new HashMap<ERepositoryObjectType,RepositoryNode>();
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  Map<ERepositoryObjectType,ERepositoryObjectType> parentNodeMapping=new HashMap<ERepositoryObjectType,ERepositoryObjectType>();
  try {
    for (    IConfigurationElement element : configurationElements) {
      Object extensionNode=element.createExecutableExtension(""String_Node_Str"");
      String type=element.getAttribute(""String_Node_Str"");
      String parentNodeType=element.getAttribute(""String_Node_Str"");
      if (extensionNode instanceof IExtendRepositoryNode) {
        IExtendRepositoryNode diyNode=(IExtendRepositoryNode)extensionNode;
        IImage icon=diyNode.getNodeImage();
        RepositoryNode dynamicNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
        RepositoryNode[] children=(RepositoryNode[])diyNode.getChildren();
        if (children != null && (children.length > 0)) {
          for (          RepositoryNode nodeToAdd : children) {
            dynamicNode.getChildren().add(nodeToAdd);
            nodeToAdd.setParent(dynamicNode);
            nodeToAdd.setRoot(this);
          }
        }
        ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
        if (repositoryNodeType != null) {
          dynamicNode.setProperties(EProperties.LABEL,repositoryNodeType);
          dynamicNode.setProperties(EProperties.CONTENT_TYPE,repositoryNodeType);
        }
        dynamicNode.setIcon(icon);
        repositoryNodeExtensionMap.put(repositoryNodeType,dynamicNode);
        boolean withParent=false;
        if (parentNodeType != null) {
          ERepositoryObjectType parentType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,parentNodeType);
          if (parentType != null) {
            parentNodeMapping.put(repositoryNodeType,parentType);
            withParent=true;
          }
        }
        if (!withParent) {
          curParentNode.getChildren().add(dynamicNode);
        }
      }
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
  for (  ERepositoryObjectType childType : parentNodeMapping.keySet()) {
    RepositoryNode childNode=repositoryNodeExtensionMap.get(childType);
    ERepositoryObjectType parentType=parentNodeMapping.get(childType);
    if (parentType != null && childNode != null) {
      RepositoryNode parentNode=getRootRepositoryNode(parentType);
      if (parentNode == null) {
        parentNode=repositoryNodeExtensionMap.get(parentType);
      }
      if (parentNode != null) {
        parentNode.getChildren().add(childNode);
      }
 else {
        curParentNode.getChildren().add(childNode);
      }
    }
  }
}","private void initExtensionRepositoryNodes(final IRepositoryNode curParentNode){
  Map<ERepositoryObjectType,RepositoryNode> repositoryNodeExtensionMap=new HashMap<ERepositoryObjectType,RepositoryNode>();
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  Map<ERepositoryObjectType,ERepositoryObjectType> parentNodeMapping=new HashMap<ERepositoryObjectType,ERepositoryObjectType>();
  try {
    for (    IConfigurationElement element : configurationElements) {
      Object extensionNode=element.createExecutableExtension(""String_Node_Str"");
      String type=element.getAttribute(""String_Node_Str"");
      String isResouce=element.getAttribute(""String_Node_Str"");
      boolean isResource=false;
      if (isResouce != null) {
        isResource=Boolean.parseBoolean(isResouce);
      }
      String parentNodeType=element.getAttribute(""String_Node_Str"");
      if (isResource && extensionNode instanceof IExtendRepositoryNode) {
        IExtendRepositoryNode diyNode=(IExtendRepositoryNode)extensionNode;
        IImage icon=diyNode.getNodeImage();
        RepositoryNode dynamicNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
        RepositoryNode[] children=(RepositoryNode[])diyNode.getChildren();
        if (children != null && (children.length > 0)) {
          for (          RepositoryNode nodeToAdd : children) {
            dynamicNode.getChildren().add(nodeToAdd);
            nodeToAdd.setParent(dynamicNode);
            nodeToAdd.setRoot(this);
          }
        }
        ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
        if (repositoryNodeType != null) {
          dynamicNode.setProperties(EProperties.LABEL,repositoryNodeType);
          dynamicNode.setProperties(EProperties.CONTENT_TYPE,repositoryNodeType);
        }
        dynamicNode.setIcon(icon);
        repositoryNodeExtensionMap.put(repositoryNodeType,dynamicNode);
        boolean withParent=false;
        if (parentNodeType != null) {
          ERepositoryObjectType parentType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,parentNodeType);
          if (parentType != null) {
            parentNodeMapping.put(repositoryNodeType,parentType);
            withParent=true;
          }
        }
        if (!withParent) {
          curParentNode.getChildren().add(dynamicNode);
        }
      }
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
  for (  ERepositoryObjectType childType : parentNodeMapping.keySet()) {
    RepositoryNode childNode=repositoryNodeExtensionMap.get(childType);
    ERepositoryObjectType parentType=parentNodeMapping.get(childType);
    if (parentType != null && childNode != null) {
      RepositoryNode parentNode=getRootRepositoryNode(parentType);
      if (parentNode == null) {
        parentNode=repositoryNodeExtensionMap.get(parentType);
      }
      if (parentNode != null) {
        parentNode.getChildren().add(childNode);
      }
 else {
        curParentNode.getChildren().add(childNode);
      }
    }
  }
}",0.962534169480624
128170,"public void setElement(IElement element){
  if (element instanceof INode) {
    jobInfo=new BasicJobInfo(((INode)element).getProcess().getId(),null,((INode)element).getProcess().getVersion());
    jobInfo.setJobName(((INode)element).getProcess().getName());
    type=ProblemType.JOB;
    nodeName=((INode)element).getUniqueName();
    componentName=((INode)element).getComponent().getName();
  }
}","public void setElement(IElement element){
  if (element instanceof INode) {
    jobInfo=new BasicJobInfo(((INode)element).getProcess().getId(),null,((INode)element).getProcess().getVersion());
    jobInfo.setJobName(((INode)element).getProcess().getName());
    type=ProblemType.JOB;
    nodeName=((INode)element).getUniqueName();
    componentName=((INode)element).getComponent().getName();
  }
 else   if (element instanceof IProcess) {
    jobInfo=new BasicJobInfo(((IProcess)element).getId(),null,((IProcess)element).getVersion());
    jobInfo.setJobName(((IProcess)element).getName());
    type=ProblemType.JOB;
  }
}",0.7791952894995093
128171,"public void run(){
  for (int i=0; i < fileNames.length; i++) {
    final File file=new File(path + File.separatorChar + fileNames[i]);
    try {
      CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}","public void run(){
  for (int i=0; i < fileNames.length; i++) {
    final File file=new File(path + File.separatorChar + fileNames[i]);
    try {
      CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      emptyLibs();
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9698890649762282
128172,"private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
}","private synchronized void getModuleUrlsFromWebService(final String jarNames,final List<ModuleToInstall> toInstall,final Map<String,List<ModuleNeeded>> contextMap,final IModulesListener listener,boolean isUser){
  Job job=new Job(Messages.getString(""String_Node_Str"")){
    @Override protected IStatus run(    IProgressMonitor monitor){
      int size=jarNames.split(SEPARATOR_SLIP).length;
      monitor.beginTask(Messages.getString(""String_Node_Str""),size * 10);
      JSONObject message=new JSONObject();
      try {
        JSONObject child=new JSONObject();
        child.put(""String_Node_Str"",""String_Node_Str"");
        child.put(""String_Node_Str"",jarNames);
        message.put(""String_Node_Str"",child);
        String url=serviceUrl + ""String_Node_Str"" + message;
        monitor.worked(10);
        JSONObject resultStr=readJsonFromUrl(url);
        if (resultStr != null) {
          JSONArray jsonArray=resultStr.getJSONArray(""String_Node_Str"");
          if (jsonArray != null) {
            for (int i=0; i < jsonArray.length(); i++) {
              JSONObject obj=jsonArray.getJSONObject(i);
              if (obj != null) {
                String url_description=obj.getString(""String_Node_Str"");
                String url_download=obj.getString(""String_Node_Str"");
                String name=obj.getString(""String_Node_Str"");
                if ((url_description == null && url_download == null) || ((""String_Node_Str"".equals(url_description) || ""String_Node_Str"".equals(url_description)) && (""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)))) {
                  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str"");
                  cache.put(name,null);
                  continue;
                }
                ModuleToInstall m=new ModuleToInstall();
                m.setName(name);
                if (contextMap != null) {
                  List<ModuleNeeded> nm=contextMap.get(m.getName());
                  m.setContext(getContext(nm));
                  m.setRequired(isRequired(nm));
                }
 else {
                  m.setContext(""String_Node_Str"");
                  m.setRequired(true);
                }
                String license=obj.getString(""String_Node_Str"");
                m.setLicenseType(license);
                if (""String_Node_Str"".equals(license) || ""String_Node_Str"".equals(license)) {
                  m.setLicenseType(null);
                }
                String description=obj.getString(""String_Node_Str"");
                if (description == null || ""String_Node_Str"".equals(description) || ""String_Node_Str"".equals(description)) {
                  description=m.getName();
                }
                m.setDescription(description);
                m.setUrl_description(url_description);
                if (url_download == null || ""String_Node_Str"".equals(url_download) || ""String_Node_Str"".equals(url_download)) {
                  m.setUrl_download(null);
                }
 else {
                  m.setUrl_download(url_download);
                }
                toInstall.add(m);
                cache.put(m.getName(),m);
              }
              monitor.worked(10);
            }
          }
        }
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      listener.listModulesDone();
    }
  }
);
  job.setUser(isUser);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  emptyLibs();
}",0.9979819722857528
128173,"/** 
 * DOC amaumont Comment method ""init"".
 * @param image
 * @param tooltip
 * @param parent2
 */
private void init(Composite parent,String tooltip,Image image){
  button=new Button(parent,SWT.PUSH);
  button.setToolTipText(tooltip);
  button.setImage(image);
  button.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      handleSelectionEvent(event);
    }
  }
);
  if (extendedControlViewer.getExtendedControlModel() == null) {
    button.setEnabled(false);
  }
  this.extendedControlViewer.addListener(new IExtendedControlListener(){
    public void handleEvent(    ExtendedControlEvent event){
      if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
        button.setEnabled(getEnabledState());
      }
    }
  }
);
}","/** 
 * DOC amaumont Comment method ""init"".
 * @param image
 * @param tooltip
 * @param parent2
 */
private void init(Composite parent,String tooltip,Image image){
  button=new Button(parent,SWT.PUSH);
  button.setToolTipText(tooltip);
  button.setImage(image);
  button.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      handleSelectionEvent(event);
    }
  }
);
  if (extendedControlViewer.getExtendedControlModel() == null) {
    button.setEnabled(false);
  }
  this.extendedControlViewer.addListener(new IExtendedControlListener(){
    public void handleEvent(    ExtendedControlEvent event){
      if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
        handleModelChange();
      }
    }
  }
);
}",0.9663064208518752
128174,"public void handleEvent(ExtendedControlEvent event){
  if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
    button.setEnabled(getEnabledState());
  }
}","public void handleEvent(ExtendedControlEvent event){
  if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
    handleModelChange();
  }
}",0.8882521489971347
128175,"private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}","private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(File.separator).append(JavaUtils.JAVA_LIB_DIRECTORY).toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}",0.8745387453874539
128176,"private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(""String_Node_Str"").toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}","private void emptyLibs(){
  File libsDir=org.eclipse.core.runtime.Platform.getLocation().append(JavaUtils.JAVA_PROJECT_NAME).append(File.separator).append(JavaUtils.JAVA_LIB_DIRECTORY).toFile();
  if (libsDir.exists() && libsDir.isDirectory()) {
    FilesUtils.emptyFolder(libsDir);
  }
}",0.8745387453874539
128177,"public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}","public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
if (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName())) {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}",0.9649764767381076
128178,"public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(columnStr);
      columnStr=TalendTextUtils.addQuotes(matcher.replaceAll(""String_Node_Str""));
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}","public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()))) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(columnStr);
      columnStr=TalendTextUtils.addQuotes(matcher.replaceAll(""String_Node_Str""));
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}",0.9893617021276596
128179,"public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}","public static String getTableName(IElement node,IMetadataTable repositoryMetadata,String schema,String dbType,String realTableName){
  String currentTableName=null;
  boolean flag=false;
  String dbTableName=getDbTableName(node);
  if (dbTableName != null) {
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
      if (dbTableName.contains(TalendTextUtils.QUOTATION_MARK)) {
        if (dbTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && dbTableName.length() > 2) {
          currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
          flag=true;
        }
 else {
          currentTableName=null;
        }
      }
 else {
        currentTableName=dbTableName;
        if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
          flag=true;
        }
      }
    break;
default :
  if (dbTableName.contains(TalendTextUtils.SINGLE_QUOTE)) {
    if (dbTableName.startsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.endsWith(TalendTextUtils.SINGLE_QUOTE) && dbTableName.length() > 2) {
      currentTableName=dbTableName.substring(1,dbTableName.length() - 1);
      flag=true;
    }
 else {
      currentTableName=null;
    }
  }
 else {
    currentTableName=dbTableName;
    if (null != currentTableName && !(""String_Node_Str"".equals(currentTableName))) {
      flag=true;
    }
  }
}
}
if (!flag) {
currentTableName=realTableName;
}
if (currentTableName == null) {
currentTableName=DEFAULT_TABLE_NAME;
}
if (schema != null && schema.length() > 0) {
currentTableName=getSchemaName(schema,dbType,currentTableName);
if (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName())) {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
 else {
if (isContext(currentTableName)) {
currentTableName=quoteVariableRefrence(currentTableName,dbType);
}
 else {
currentTableName=quoteStringValue(currentTableName,dbType);
}
}
return currentTableName;
}",0.9649764767381076
128180,"public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(columnStr);
      columnStr=TalendTextUtils.addQuotes(matcher.replaceAll(""String_Node_Str""));
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}","public static String generateNewQuery(final IMetadataTable repositoryMetadata,final String dbType,final String tableNameWithQuoteIfNeed,final String... realTableName){
  if (repositoryMetadata == null) {
    return ""String_Node_Str"";
  }
  List<IMetadataColumn> metaDataColumnList=repositoryMetadata.getListColumns();
  int index=metaDataColumnList.size();
  if (index == 0) {
    return ""String_Node_Str"";
  }
  isContextQuery=false;
  if (isContext(tableNameWithQuoteIfNeed)) {
    isContextQuery=true;
  }
  String columnsQuery=""String_Node_Str"";
  for (int i=0; i < metaDataColumnList.size(); i++) {
    IMetadataColumn metaDataColumn=metaDataColumnList.get(i);
    String columnName=quoteStringValue(metaDataColumn.getOriginalDbColumnName(),dbType);
    String columnStr=columnName;
    if (dbType != null && (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()))) {
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(columnStr);
      columnStr=TalendTextUtils.addQuotes(matcher.replaceAll(""String_Node_Str""));
    }
    if (i != index - 1) {
      columnStr=checkAndConcatString(columnStr,TalendTextUtils.declareString(""String_Node_Str"" + SPACE));
    }
    columnStr=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),columnStr);
    columnStr=checkAndConcatString(tableNameWithQuoteIfNeed,columnStr);
    if (""String_Node_Str"".equals(columnsQuery.trim())) {
      columnsQuery=columnStr;
    }
 else {
      columnsQuery=checkAndConcatString(columnsQuery,columnStr);
    }
  }
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  String query=TalendTextUtils.declareString(""String_Node_Str"");
  if (isContextQuery) {
    String end=ENTER + CON + checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(query,columnsQuery) + end;
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=""String_Node_Str"";
    if (!isCheck) {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    }
 else {
      end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0].substring(2,realTableName[0].length() - 2) + declareString);
    }
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else   if (dbType != null && dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String declareString=TalendTextUtils.getStringDeclare();
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),declareString + realTableName[0] + declareString);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
 else {
    String end=checkAndConcatString(TalendTextUtils.declareString(""String_Node_Str""),tableNameWithQuoteIfNeed);
    end=replaceTheSchemaString(end);
    query=checkAndConcatString(checkAndConcatString(query,columnsQuery),end);
  }
  return query;
}",0.9893617021276596
128181,"/** 
 * DOC amaumont Comment method ""init"".
 * @param image
 * @param tooltip
 * @param parent2
 */
private void init(Composite parent,String tooltip,Image image){
  button=new Button(parent,SWT.PUSH);
  button.setToolTipText(tooltip);
  button.setImage(image);
  button.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      handleSelectionEvent(event);
    }
  }
);
  if (extendedControlViewer.getExtendedControlModel() == null) {
    button.setEnabled(false);
  }
  this.extendedControlViewer.addListener(new IExtendedControlListener(){
    public void handleEvent(    ExtendedControlEvent event){
      if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
        button.setEnabled(getEnabledState());
      }
    }
  }
);
}","/** 
 * DOC amaumont Comment method ""init"".
 * @param image
 * @param tooltip
 * @param parent2
 */
private void init(Composite parent,String tooltip,Image image){
  button=new Button(parent,SWT.PUSH);
  button.setToolTipText(tooltip);
  button.setImage(image);
  button.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      handleSelectionEvent(event);
    }
  }
);
  if (extendedControlViewer.getExtendedControlModel() == null) {
    button.setEnabled(false);
  }
  this.extendedControlViewer.addListener(new IExtendedControlListener(){
    public void handleEvent(    ExtendedControlEvent event){
      if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
        handleModelChange();
      }
    }
  }
);
}",0.9663064208518752
128182,"public void handleEvent(ExtendedControlEvent event){
  if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
    button.setEnabled(getEnabledState());
  }
}","public void handleEvent(ExtendedControlEvent event){
  if (event.getType() == AbstractExtendedControlViewer.EVENT_TYPE.MODEL_CHANGED) {
    handleModelChange();
  }
}",0.8882521489971347
128183,"/** 
 * DOC YeXiaowei Comment method ""addGeneralDbFieldsListeners"".
 */
private void addGeneralDbFieldsListeners(){
  generalJdbcClassNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcClassNameText.getText())) {
          getConnection().setDriverClass(generalJdbcClassNameText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcDriverjarText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcDriverjarText.getText())) {
          getConnection().setDriverJarPath(generalJdbcDriverjarText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUrlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUrlText.getText())) {
          getConnection().setURL(generalJdbcUrlText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcPasswordText.getText())) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(generalJdbcPasswordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUserText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUserText.getText())) {
          getConnection().setUsername(generalJdbcUserText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  jDBCschemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String text=jDBCschemaText.getText();
        schemaText.setText(text);
        if (validText(schemaText.getText())) {
          getConnection().setUiSchema(schemaText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  generalMappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalMappingFileText.getText())) {
          getConnection().setDbmsId(generalMappingFileText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  mappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(mappingFileText.getText())) {
          getConnection().setDbmsId(mappingFileText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  browseJarFilesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectDatabaseJarDialog dialog=new SelectDatabaseJarDialog(getShell(),generalJdbcDriverjarText.getText());
      if (dialog.open() == Window.OK) {
        generalJdbcDriverjarText.setText(dialog.getJarsString());
      }
    }
  }
);
  browseClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      generalJdbcClassNameText.removeAll();
      for (      String stringToFile : generalJdbcDriverjarText.getText().trim().split(""String_Node_Str"")) {
        File file=new File(stringToFile);
        if (file != null) {
          try {
            MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
            Class[] classes=cl.getAssignableClasses(Driver.class);
            for (int i=0; i < classes.length; ++i) {
              generalJdbcClassNameText.add(classes[i].getName());
            }
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
      if (generalJdbcClassNameText.getItemCount() > 0) {
        String driverClassName=generalJdbcClassNameText.getItem(0);
        generalJdbcClassNameText.setText(driverClassName);
      }
    }
  }
);
  generalMappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      generalMappingFileText.setText(dialog.getSelectId());
    }
  }
);
  mappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      mappingFileText.setText(dialog.getSelectId());
    }
  }
);
}","/** 
 * DOC YeXiaowei Comment method ""addGeneralDbFieldsListeners"".
 */
private void addGeneralDbFieldsListeners(){
  generalJdbcClassNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcClassNameText.getText())) {
          getConnection().setDriverClass(generalJdbcClassNameText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcDriverjarText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcDriverjarText.getText())) {
          getConnection().setDriverJarPath(generalJdbcDriverjarText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUrlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUrlText.getText())) {
          getConnection().setURL(generalJdbcUrlText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (generalJdbcPasswordText.getText() != null) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(generalJdbcPasswordText.getText());
            getConnection().setPassword(password);
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUserText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUserText.getText())) {
          getConnection().setUsername(generalJdbcUserText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  jDBCschemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String text=jDBCschemaText.getText();
        schemaText.setText(text);
        if (validText(schemaText.getText())) {
          getConnection().setUiSchema(schemaText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  generalMappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalMappingFileText.getText())) {
          getConnection().setDbmsId(generalMappingFileText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  mappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(mappingFileText.getText())) {
          getConnection().setDbmsId(mappingFileText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  browseJarFilesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectDatabaseJarDialog dialog=new SelectDatabaseJarDialog(getShell(),generalJdbcDriverjarText.getText());
      if (dialog.open() == Window.OK) {
        generalJdbcDriverjarText.setText(dialog.getJarsString());
      }
    }
  }
);
  browseClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      generalJdbcClassNameText.removeAll();
      for (      String stringToFile : generalJdbcDriverjarText.getText().trim().split(""String_Node_Str"")) {
        File file=new File(stringToFile);
        if (file != null) {
          try {
            MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
            Class[] classes=cl.getAssignableClasses(Driver.class);
            for (int i=0; i < classes.length; ++i) {
              generalJdbcClassNameText.add(classes[i].getName());
            }
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
      if (generalJdbcClassNameText.getItemCount() > 0) {
        String driverClassName=generalJdbcClassNameText.getItem(0);
        generalJdbcClassNameText.setText(driverClassName);
      }
    }
  }
);
  generalMappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      generalMappingFileText.setText(dialog.getSelectId());
    }
  }
);
  mappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      mappingFileText.setText(dialog.getSelectId());
    }
  }
);
}",0.9981230860416872
128184,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128185,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128186,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9946062567421792
128187,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128188,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128189,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9946178686759956
128190,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128191,"public boolean performCancel(){
  if (creation) {
    Connection connection=connectionItem.getConnection();
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    g.getOwnedElement().remove(metadataTable);
  }
  return super.performCancel();
}","@Override public boolean performCancel(){
  if (creation) {
    Connection connection=connectionItem.getConnection();
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    g.getOwnedElement().remove(metadataTable);
  }
  if (metadataTable != null && oldMetadataTable != null && metadataTable.getLabel() != null && !metadataTable.getLabel().equals(oldMetadataTable.getLabel())) {
    this.metadataTable.setLabel(oldMetadataTable.getLabel());
  }
  return super.performCancel();
}",0.7093023255813954
128192,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128193,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9946178686759956
128194,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128195,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128196,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9944812362030904
128197,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128198,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128199,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    boolean needUpdateAnalysis=false;
    ITDQRepositoryService tdqRepositoryService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(repositoryObject.getProperty().getItem(),tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return true;
      }
    }
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
      if (tdqRepositoryService != null && needUpdateAnalysis) {
        tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
      }
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    boolean needUpdateAnalysis=false;
    ITDQRepositoryService tdqRepositoryService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(repositoryObject.getProperty().getItem(),tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return true;
      }
    }
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
      if (tdqRepositoryService != null && needUpdateAnalysis) {
        tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
      }
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9969751966122202
128200,"public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9572649572649572
128201,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128202,"public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9927953890489912
128203,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128204,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(tableWizardpage);
}",0.9934036939313984
128205,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      factory.save(repositoryObject.getProperty().getItem());
      closeLockStrategy();
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9944690265486724
128206,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9818181818181818
128207,"@Override public boolean performCancel(){
  return super.performCancel();
}","@Override public boolean performCancel(){
  if (metadataTable != null && oldMetadataTable != null && metadataTable.getLabel() != null && !metadataTable.getLabel().equals(oldMetadataTable.getLabel())) {
    this.metadataTable.setLabel(oldMetadataTable.getLabel());
  }
  return super.performCancel();
}",0.3617021276595745
128208,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  addPage(tableWizardpage);
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  tableWizardpage=new FileTableWizardPage(connectionItem,metadataTable,isRepositoryObjectEditable());
  addPage(tableWizardpage);
  if (creation) {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"",metadataTable.getLabel()));
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9934036939313984
128209,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  if (!tableWizardpage.isPageComplete()) {
    return false;
  }
  RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    factory.save(repositoryObject.getProperty().getItem());
    closeLockStrategy();
  }
 catch (  PersistenceException e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
  }
  return true;
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (!tableWizardpage.isPageComplete()) {
    return false;
  }
  RepositoryUpdateManager.updateSingleSchema(connectionItem,metadataTable,oldMetadataTable,oldTableMap);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    factory.save(repositoryObject.getProperty().getItem());
    closeLockStrategy();
  }
 catch (  PersistenceException e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
  }
  return true;
}",0.9942462600690448
128210,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField.getNodeValue() != null) {
        String originalFieldValue=MetadataToolHelper.validateColumnName(originalField.getNodeValue(),0);
        metadataColumn.setOriginalField(originalFieldValue);
      }
 else {
        metadataColumn.setOriginalField(metadataColumn.getLabel());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField.getNodeValue() != null) {
        metadataColumn.setOriginalField(originalField.getNodeValue());
      }
 else {
        metadataColumn.setOriginalField(metadataColumn.getLabel());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9852281074022688
128211,"@Override public boolean performCancel(){
  if (creation) {
    Connection connection=connectionItem.getConnection();
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    g.getOwnedElement().remove(metadataTable);
  }
  return super.performCancel();
}","@Override public boolean performCancel(){
  if (creation) {
    Connection connection=connectionItem.getConnection();
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    g.getOwnedElement().remove(metadataTable);
  }
  if (metadataTable != null && oldMetadataTable != null && metadataTable.getLabel() != null && !metadataTable.getLabel().equals(oldMetadataTable.getLabel())) {
    this.metadataTable.setLabel(oldMetadataTable.getLabel());
  }
  return super.performCancel();
}",0.7241379310344828
128212,"@Override public boolean performCancel(){
  return super.performCancel();
}","@Override public boolean performCancel(){
  if (metadataTable != null && oldMetadataTable != null && metadataTable.getLabel() != null && !metadataTable.getLabel().equals(oldMetadataTable.getLabel())) {
    this.metadataTable.setLabel(oldMetadataTable.getLabel());
  }
  return super.performCancel();
}",0.3617021276595745
128213,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField.getNodeValue() != null) {
        String originalFieldValue=MetadataToolHelper.validateColumnName(originalField.getNodeValue(),0);
        metadataColumn.setOriginalField(originalFieldValue);
      }
 else {
        metadataColumn.setOriginalField(metadataColumn.getLabel());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField.getNodeValue() != null) {
        metadataColumn.setOriginalField(originalField.getNodeValue());
      }
 else {
        metadataColumn.setOriginalField(metadataColumn.getLabel());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9852281074022688
128214,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  IPath path=resource.getFullPath();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null) {
      int matchingFirstSegments=path.matchingFirstSegments(topLevelNodeWorkspaceRelativePath);
      if (path.segmentCount() == matchingFirstSegments || matchingFirstSegments == topLevelNodeWorkspaceRelativePath.segmentCount()) {
        if ((delta.getAffectedChildren().length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (resource instanceof IContainer))) {
          if (viewer instanceof RepoViewCommonViewer) {
            runnables.add(new Runnable(){
              @Override public void run(){
                refreshTopLevelNode(repoNode);
              }
            }
);
          }
          return false;
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  boolean talendProChange=false;
  IResource resource=delta.getResource();
  IPath path=resource.getFullPath();
  if (path != null && path.lastSegment() != null) {
    talendProChange=FileConstants.LOCAL_PROJECT_FILENAME.equals(path.lastSegment());
  }
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null) {
      int matchingFirstSegments=path.matchingFirstSegments(topLevelNodeWorkspaceRelativePath);
      if (path.segmentCount() == matchingFirstSegments || matchingFirstSegments == topLevelNodeWorkspaceRelativePath.segmentCount() || talendProChange) {
        if ((delta.getAffectedChildren().length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || talendProChange || (resource instanceof IContainer))) {
          if (viewer instanceof RepoViewCommonViewer) {
            runnables.add(new Runnable(){
              @Override public void run(){
                refreshTopLevelNode(repoNode);
              }
            }
);
          }
          return false;
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}",0.9158061953931692
128215,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  IPath path=resource.getFullPath();
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null) {
      int matchingFirstSegments=path.matchingFirstSegments(topLevelNodeWorkspaceRelativePath);
      if (path.segmentCount() == matchingFirstSegments || matchingFirstSegments == topLevelNodeWorkspaceRelativePath.segmentCount()) {
        if ((delta.getAffectedChildren().length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || (resource instanceof IContainer))) {
          if (viewer instanceof RepoViewCommonViewer) {
            runnables.add(new Runnable(){
              @Override public void run(){
                refreshTopLevelNode(repoNode);
              }
            }
);
          }
          return false;
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  boolean talendProChange=false;
  IResource resource=delta.getResource();
  IPath path=resource.getFullPath();
  if (path != null && path.lastSegment() != null) {
    talendProChange=FileConstants.LOCAL_PROJECT_FILENAME.equals(path.lastSegment());
  }
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=topLevelNodeToPathMap.get(repoNode);
    if (topLevelNodeWorkspaceRelativePath != null) {
      int matchingFirstSegments=path.matchingFirstSegments(topLevelNodeWorkspaceRelativePath);
      if (path.segmentCount() == matchingFirstSegments || matchingFirstSegments == topLevelNodeWorkspaceRelativePath.segmentCount() || talendProChange) {
        if ((delta.getAffectedChildren().length == 0) && (FileConstants.PROPERTIES_EXTENSION.equals(path.getFileExtension()) || talendProChange || (resource instanceof IContainer))) {
          if (viewer instanceof RepoViewCommonViewer) {
            runnables.add(new Runnable(){
              @Override public void run(){
                refreshTopLevelNode(repoNode);
              }
            }
);
          }
          return false;
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}",0.9158061953931692
128216,"public boolean performCancel(){
  if (creation) {
    Connection connection=connectionItem.getConnection();
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    g.getOwnedElement().remove(metadataTable);
  }
  return super.performCancel();
}","public boolean performCancel(){
  if (creation) {
    Connection connection=connectionItem.getConnection();
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    g.getOwnedElement().remove(metadataTable);
  }
  if (metadataTable != null && oldMetadataTable != null && metadataTable.getLabel() != null && !metadataTable.getLabel().equals(oldMetadataTable.getLabel())) {
    this.metadataTable.setLabel(oldMetadataTable.getLabel());
  }
  return super.performCancel();
}",0.7176470588235294
128217,"@Override public boolean performCancel(){
  return super.performCancel();
}","public boolean performCancel(){
  if (metadataTable != null && oldMetadataTable != null && metadataTable.getLabel() != null && !metadataTable.getLabel().equals(oldMetadataTable.getLabel())) {
    this.metadataTable.setLabel(oldMetadataTable.getLabel());
  }
  return super.performCancel();
}",0.2677595628415301
128218,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      try {
        TokenCollectorFactory.getFactory().priorCollect();
      }
 catch (      Exception e) {
        throw new PersistenceException(e);
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      try {
        TokenCollectorFactory.getFactory().priorCollect();
      }
 catch (      Exception e) {
        throw new PersistenceException(e);
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.9904588823262154
128219,"public void modifyText(ModifyEvent e){
  property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
  updatePageStatus();
}","public void modifyText(ModifyEvent e){
  property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
  property.setModificationDate(new Date());
  updatePageStatus();
}",0.8625
128220,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
      if (property != null && nameStatus.getSeverity() == IStatus.OK && purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
        updatePageStatus();
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      if (property != null && purposeStatus.getSeverity() == IStatus.OK && descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
            property.setModificationDate(new Date());
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
      if (property != null && nameStatus.getSeverity() == IStatus.OK && purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
        updatePageStatus();
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      if (property != null && purposeStatus.getSeverity() == IStatus.OK && descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        property.setModificationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        property.setModificationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
}",0.9606340819022458
128221,"protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(StringUtils.trimToNull(nameText.getText()));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (readOnly) {
    return;
  }
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(StringUtils.trimToNull(nameText.getText()));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
    property.setModificationDate(new Date());
  }
  updatePageStatus();
}",0.98301329394387
128222,"@Override public void widgetSelected(SelectionEvent e){
  String version=property.getVersion();
  if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
    version=lastVersionFound;
  }
  version=VersionUtils.upMinor(version);
  versionText.setText(version);
  property.setVersion(version);
  property.setCreationDate(new Date());
  updatePageStatus();
}","@Override public void widgetSelected(SelectionEvent e){
  String version=property.getVersion();
  if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
    version=lastVersionFound;
  }
  version=VersionUtils.upMinor(version);
  versionText.setText(version);
  property.setVersion(version);
  property.setCreationDate(new Date());
  property.setModificationDate(new Date());
  updatePageStatus();
}",0.946341463414634
128223,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
RepositoryNode parent=node.getParent().getParent();
if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE == parent.getObjectType()) {
enabled=false;
visible=false;
break;
}
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.969087162080252
128224,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
RepositoryNode parent=node.getParent().getParent();
if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE == parent.getObjectType()) {
enabled=false;
visible=false;
break;
}
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.969087162080252
128225,"@Override protected void addFields(){
  int leftCompositeWidth=80;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=60;
  int tableSettingsCompositeHeight=90;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,1,leftCompositeWidth + rightCompositeWidth,height);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(mainComposite,1,rightCompositeWidth,height);
  Group groupTableSettings=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableSettingsCompositeHeight);
  Composite compositeTableSettings=Form.startNewDimensionnedGridLayout(groupTableSettings,1,rightCompositeWidth,tableSettingsCompositeHeight);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=3;
  Composite filterComposite=new Composite(compositeTableSettings,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  filterComposite.setLayout(gridLayout);
  GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
  filterComposite.setLayoutData(gridData2);
  Label label=new Label(filterComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  nameFilter=new Text(filterComposite,SWT.BORDER);
  nameFilter.setToolTipText(Messages.getString(""String_Node_Str""));
  nameFilter.setEditable(true);
  gridData2=new GridData(GridData.FILL_HORIZONTAL);
  nameFilter.setLayoutData(gridData2);
  scrolledCompositeFileViewer=new ScrolledComposite(compositeTableSettings,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NONE);
  scrolledCompositeFileViewer.setExpandHorizontal(true);
  scrolledCompositeFileViewer.setExpandVertical(true);
  GridData gridData1=new GridData(GridData.FILL_BOTH);
  int width=700;
  int hight=325;
  if (forTemplate) {
    width=375;
    hight=300;
  }
  gridData1.widthHint=width;
  gridData1.heightHint=hight;
  gridData1.horizontalSpan=2;
  scrolledCompositeFileViewer.setLayoutData(gridData1);
  createTable();
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(compositeTableSettings,3,false,SWT.CENTER,SWT.BOTTOM);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  selectAllTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  selectNoneTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  checkConnectionButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  gc.dispose();
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
}","@Override protected void addFields(){
  int leftCompositeWidth=80;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=60;
  int tableSettingsCompositeHeight=90;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,1,leftCompositeWidth + rightCompositeWidth,height);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(mainComposite,1,rightCompositeWidth,height);
  Group groupTableSettings=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableSettingsCompositeHeight);
  Composite compositeTableSettings=Form.startNewDimensionnedGridLayout(groupTableSettings,1,rightCompositeWidth,tableSettingsCompositeHeight);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=3;
  Composite filterComposite=new Composite(compositeTableSettings,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  filterComposite.setLayout(gridLayout);
  GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
  filterComposite.setLayoutData(gridData2);
  Label label=new Label(filterComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  nameFilter=new Text(filterComposite,SWT.BORDER);
  nameFilter.setToolTipText(Messages.getString(""String_Node_Str""));
  nameFilter.setEditable(true);
  gridData2=new GridData(GridData.FILL_HORIZONTAL);
  nameFilter.setLayoutData(gridData2);
  scrolledCompositeFileViewer=new ScrolledComposite(compositeTableSettings,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NONE);
  scrolledCompositeFileViewer.setExpandHorizontal(true);
  scrolledCompositeFileViewer.setExpandVertical(true);
  GridData gridData1=new GridData(GridData.FILL_BOTH);
  int width=700;
  int hight=325;
  if (forTemplate) {
    width=375;
    hight=300;
  }
  gridData1.widthHint=width;
  gridData1.heightHint=hight;
  gridData1.horizontalSpan=2;
  scrolledCompositeFileViewer.setLayoutData(gridData1);
  createTable();
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(compositeTableSettings,3,false,SWT.CENTER,SWT.BOTTOM);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  selectAllTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  selectNoneTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  checkConnectionButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  gc.dispose();
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  parentWizardPage.setPageComplete(false);
}",0.9932294126909148
128226,"private boolean pageComplete(){
  if (parentWizardPage instanceof SelectorTableWizardPage) {
    List<MetadataTable> list=new ArrayList<MetadataTable>();
    Set<MetadataTable> oldTables=((SelectorTableWizardPage)parentWizardPage).getOldTables();
    Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
    if (oldTables != null && oldTables.size() > 0) {
      for (      MetadataTable table : tables) {
        boolean found=false;
        for (        MetadataTable oldtable : oldTables) {
          if (table != null && oldtable != null && table.getLabel().equals(oldtable.getLabel())) {
            found=true;
            break;
          }
        }
        if (table != null && !found) {
          list.add(table);
        }
      }
    }
 else {
      list.addAll(tables);
    }
    if (forTemplate && list.size() <= 0) {
      return true;
    }
  }
  return false;
}","private boolean pageComplete(){
  if (parentWizardPage instanceof SelectorTableWizardPage) {
    List<MetadataTable> list=new ArrayList<MetadataTable>();
    Set<MetadataTable> oldTables=((SelectorTableWizardPage)parentWizardPage).getOldTables();
    Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
    if (oldTables != null && oldTables.size() > 0) {
      for (      MetadataTable table : tables) {
        boolean found=false;
        for (        MetadataTable oldtable : oldTables) {
          if (table != null && oldtable != null && table.getLabel().equals(oldtable.getLabel())) {
            found=true;
            break;
          }
        }
        if (table != null && !found) {
          list.add(table);
        }
      }
    }
 else {
      list.addAll(tables);
    }
    if (forTemplate || list.size() <= 0) {
      return true;
    }
  }
  return false;
}",0.9977678571428572
128227,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(""String_Node_Str"",tree.getItems().length);
                int length=tree.getItems().length;
                updateStatus(IStatus.ERROR,null);
                for (int i=0; i < length; i++) {
                  monitor.worked(i + 1);
                  TreeItem catalogItem=tree.getItem(i);
                  int type=((TableNode)catalogItem.getData()).getType();
                  if (type == TableNode.CATALOG) {
                    for (                    TreeItem schemaItem : catalogItem.getItems()) {
                      if (schemaItem.getData() != null) {
                        int t=((TableNode)schemaItem.getData()).getType();
                        if (t == TableNode.SCHEMA) {
                          for (                          TreeItem tableItem : schemaItem.getItems()) {
                            updateItem(tableItem,true,false);
                          }
                          schemaItem.setChecked(true);
                        }
 else                         if (t == TableNode.TABLE) {
                          updateItem(schemaItem,true,false);
                        }
                      }
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.SCHEMA) {
                    for (                    TreeItem tableItem : catalogItem.getItems()) {
                      updateItem(tableItem,true,false);
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.TABLE) {
                    updateItem(catalogItem,true,false);
                  }
                }
                if (forTemplate) {
                  parentWizardPage.setPageComplete(true);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,false,false);
                }
                schemaItem.setChecked(false);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,false,false);
              }
            }
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,false,false);
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,false,false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(false);
      }
    }
  }
);
  addTableListener();
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(""String_Node_Str"",tree.getItems().length);
                int length=tree.getItems().length;
                updateStatus(IStatus.ERROR,null);
                for (int i=0; i < length; i++) {
                  monitor.worked(i + 1);
                  TreeItem catalogItem=tree.getItem(i);
                  int type=((TableNode)catalogItem.getData()).getType();
                  if (type == TableNode.CATALOG) {
                    for (                    TreeItem schemaItem : catalogItem.getItems()) {
                      if (schemaItem.getData() != null) {
                        int t=((TableNode)schemaItem.getData()).getType();
                        if (t == TableNode.SCHEMA) {
                          for (                          TreeItem tableItem : schemaItem.getItems()) {
                            updateItem(tableItem,true,false);
                          }
                          schemaItem.setChecked(true);
                        }
 else                         if (t == TableNode.TABLE) {
                          updateItem(schemaItem,true,false);
                        }
                      }
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.SCHEMA) {
                    for (                    TreeItem tableItem : catalogItem.getItems()) {
                      updateItem(tableItem,true,false);
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.TABLE) {
                    updateItem(catalogItem,true,false);
                  }
                }
                if (forTemplate) {
                  parentWizardPage.setPageComplete(true);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,false,false);
                }
                schemaItem.setChecked(false);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,false,false);
              }
            }
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,false,false);
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,false,false);
        }
      }
      parentWizardPage.setPageComplete(false);
    }
  }
);
  addTableListener();
}",0.9799886941775016
128228,"/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if ((istRunJob && elemparameter.getName().equals(""String_Node_Str"")) || (!elemparameter.isShow(copyElementParameterList) && (!elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()))) || elemparameter.getCategory().equals(EComponentCategory.MAIN)|| elemparameter.getCategory().equals(EComponentCategory.VIEW)|| elemparameter.getName().equals(IHTMLDocConstants.REPOSITORY)|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(EParameterFieldType.ENCODING_TYPE.getName())) {
        continue;
      }
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}","/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}",0.8973680112132066
128229,"@Override protected IBeanPropertyAccessors<MetadataColumn,Integer> getLengthAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,Integer>(){
    public Integer get(    MetadataColumn bean){
      return Long.valueOf(bean.getLength()).intValue();
    }
    public void set(    MetadataColumn bean,    Integer value){
      if (value != null) {
        bean.setLength(value);
        if (Long.valueOf(bean.getOriginalLength()) == 0) {
          bean.setOriginalLength(value);
        }
      }
    }
  }
;
}","@Override protected IBeanPropertyAccessors<MetadataColumn,Integer> getLengthAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,Integer>(){
    public Integer get(    MetadataColumn bean){
      return Long.valueOf(bean.getLength()).intValue();
    }
    public void set(    MetadataColumn bean,    Integer value){
      if (value != null) {
        bean.setLength(value);
        if (Long.valueOf(bean.getOriginalLength()) == 0) {
          bean.setOriginalLength(value);
        }
      }
 else {
        bean.setLength(0);
      }
    }
  }
;
}",0.9412861136999068
128230,"@Override protected IBeanPropertyAccessors<MetadataColumn,Integer> getPrecisionAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,Integer>(){
    public Integer get(    MetadataColumn bean){
      return Long.valueOf(bean.getPrecision()).intValue();
    }
    public void set(    MetadataColumn bean,    Integer value){
      if (value != null) {
        bean.setPrecision(value);
      }
    }
  }
;
}","@Override protected IBeanPropertyAccessors<MetadataColumn,Integer> getPrecisionAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,Integer>(){
    public Integer get(    MetadataColumn bean){
      return Long.valueOf(bean.getPrecision()).intValue();
    }
    public void set(    MetadataColumn bean,    Integer value){
      if (value != null) {
        bean.setPrecision(value);
      }
 else {
        bean.setPrecision(0);
      }
    }
  }
;
}",0.9244851258581236
128231,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(""String_Node_Str"",tree.getItems().length);
                int length=tree.getItems().length;
                updateStatus(IStatus.ERROR,null);
                for (int i=0; i < length; i++) {
                  monitor.worked(i + 1);
                  TreeItem catalogItem=tree.getItem(i);
                  int type=((TableNode)catalogItem.getData()).getType();
                  if (type == TableNode.CATALOG) {
                    for (                    TreeItem schemaItem : catalogItem.getItems()) {
                      if (schemaItem.getData() != null) {
                        int t=((TableNode)schemaItem.getData()).getType();
                        if (t == TableNode.SCHEMA) {
                          for (                          TreeItem tableItem : schemaItem.getItems()) {
                            updateItem(tableItem,true,false);
                          }
                          schemaItem.setChecked(true);
                        }
 else                         if (t == TableNode.TABLE) {
                          updateItem(schemaItem,true,false);
                        }
                      }
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.SCHEMA) {
                    for (                    TreeItem tableItem : catalogItem.getItems()) {
                      updateItem(tableItem,true,false);
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.TABLE) {
                    updateItem(catalogItem,true,false);
                  }
                }
                if (forTemplate) {
                  parentWizardPage.setPageComplete(true);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,false,false);
                }
                schemaItem.setChecked(false);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,false,false);
              }
            }
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,false,false);
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,false,false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(false);
      }
    }
  }
);
  addTableListener();
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(""String_Node_Str"",tree.getItems().length);
                int length=tree.getItems().length;
                updateStatus(IStatus.ERROR,null);
                for (int i=0; i < length; i++) {
                  monitor.worked(i + 1);
                  TreeItem catalogItem=tree.getItem(i);
                  int type=((TableNode)catalogItem.getData()).getType();
                  if (type == TableNode.CATALOG) {
                    for (                    TreeItem schemaItem : catalogItem.getItems()) {
                      if (schemaItem.getData() != null) {
                        int t=((TableNode)schemaItem.getData()).getType();
                        if (t == TableNode.SCHEMA) {
                          for (                          TreeItem tableItem : schemaItem.getItems()) {
                            updateItem(tableItem,true,false);
                          }
                          schemaItem.setChecked(true);
                        }
 else                         if (t == TableNode.TABLE) {
                          updateItem(schemaItem,true,false);
                        }
                      }
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.SCHEMA) {
                    for (                    TreeItem tableItem : catalogItem.getItems()) {
                      updateItem(tableItem,true,false);
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.TABLE) {
                    updateItem(catalogItem,true,false);
                  }
                }
                if (forTemplate) {
                  parentWizardPage.setPageComplete(true);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,false,false);
                }
                schemaItem.setChecked(false);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,false,false);
              }
            }
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,false,false);
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,false,false);
        }
      }
      parentWizardPage.setPageComplete(false);
    }
  }
);
  addTableListener();
}",0.9799886941775016
128232,"/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if ((istRunJob && elemparameter.getName().equals(""String_Node_Str"")) || (!elemparameter.isShow(copyElementParameterList) && (!elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()))) || elemparameter.getCategory().equals(EComponentCategory.MAIN)|| elemparameter.getCategory().equals(EComponentCategory.VIEW)|| elemparameter.getName().equals(IHTMLDocConstants.REPOSITORY)|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(EParameterFieldType.ENCODING_TYPE.getName())) {
        continue;
      }
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}","/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}",0.8973680112132066
128233,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (    Object element : children) {
      if (element instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)element;
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath,boolean isXsd){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (    Object element : children) {
      if (element instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)element;
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"") && isXsd) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath,isXsd);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}",0.992022008253095
128234,"public static List<FOXTreeNode> getFoxTreeNodes(String filePath,String selectedEntity,boolean forMDM){
  if (selectedEntity == null || ""String_Node_Str"".equals(selectedEntity)) {
    return getFoxTreeNodes(filePath);
  }
 else {
    List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
    if (filePath == null) {
      return list;
    }
    List<String> attList=new ArrayList<String>();
    attList.add(selectedEntity);
    try {
      ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,forMDM,0,attList);
      ATreeNode selectedNode=null;
      if (treeNode != null) {
        if (forMDM) {
          if (selectedEntity.equals(treeNode.getValue())) {
            selectedNode=treeNode;
          }
        }
        for (        Object obj : treeNode.getChildren()) {
          if (obj instanceof ATreeNode) {
            ATreeNode node=(ATreeNode)obj;
            if (selectedEntity.equals(node.getValue())) {
              selectedNode=node;
              break;
            }
          }
        }
        if (selectedNode != null) {
          String rootName=""String_Node_Str"";
          if (treeNode.getValue() instanceof String) {
            rootName+=""String_Node_Str"" + treeNode.getValue();
          }
          FOXTreeNode root=cloneATreeNode(treeNode,rootName);
          if (root instanceof Element) {
            root.setParent(null);
            list.add(root);
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return list;
  }
}","public static List<FOXTreeNode> getFoxTreeNodes(String filePath,String selectedEntity,boolean forMDM){
  if (selectedEntity == null || ""String_Node_Str"".equals(selectedEntity)) {
    return getFoxTreeNodes(filePath);
  }
 else {
    List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
    if (filePath == null) {
      return list;
    }
    List<String> attList=new ArrayList<String>();
    attList.add(selectedEntity);
    try {
      ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,forMDM,0,attList);
      ATreeNode selectedNode=null;
      if (treeNode != null) {
        if (forMDM) {
          if (selectedEntity.equals(treeNode.getValue())) {
            selectedNode=treeNode;
          }
        }
        for (        Object obj : treeNode.getChildren()) {
          if (obj instanceof ATreeNode) {
            ATreeNode node=(ATreeNode)obj;
            if (selectedEntity.equals(node.getValue())) {
              selectedNode=node;
              break;
            }
          }
        }
        if (selectedNode != null) {
          String rootName=""String_Node_Str"";
          if (treeNode.getValue() instanceof String) {
            rootName+=""String_Node_Str"" + treeNode.getValue();
          }
          FOXTreeNode root=cloneATreeNode(treeNode,rootName,XmlUtil.isXSDFile(filePath));
          if (root instanceof Element) {
            root.setParent(null);
            list.add(root);
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return list;
  }
}",0.9908972691807544
128235,"private static void getFoxTreeNodesForXmlMap(String filePath,List<FOXTreeNode> list) throws OdaException, URISyntaxException, IOException {
  ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,0);
  String rootName=""String_Node_Str"";
  if (treeNode.getValue() instanceof String) {
    rootName+=""String_Node_Str"" + treeNode.getValue();
  }
  FOXTreeNode root=cloneATreeNode(treeNode,rootName);
  if (root instanceof Element) {
    if (root instanceof Element) {
      root=((Element)root).getElementChildren().get(0);
      root.setParent(null);
      list.add(root);
    }
  }
}","private static void getFoxTreeNodesForXmlMap(String filePath,List<FOXTreeNode> list) throws OdaException, URISyntaxException, IOException {
  ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,0);
  String rootName=""String_Node_Str"";
  if (treeNode.getValue() instanceof String) {
    rootName+=""String_Node_Str"" + treeNode.getValue();
  }
  FOXTreeNode root=cloneATreeNode(treeNode,rootName,XmlUtil.isXSDFile(filePath));
  if (root instanceof Element) {
    if (root instanceof Element) {
      root=((Element)root).getElementChildren().get(0);
      root.setParent(null);
      list.add(root);
    }
  }
}",0.9770491803278688
128236,"public Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}","public synchronized Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}",0.9922848664688428
128237,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      copy.setOriginalDbColumnName(nextGeneratedColumnName);
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.4070432197576035
128238,"@Override protected void addFields(){
  int leftCompositeWidth=80;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=60;
  int tableSettingsCompositeHeight=90;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,1,leftCompositeWidth + rightCompositeWidth,height);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(mainComposite,1,rightCompositeWidth,height);
  Group groupTableSettings=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableSettingsCompositeHeight);
  Composite compositeTableSettings=Form.startNewDimensionnedGridLayout(groupTableSettings,1,rightCompositeWidth,tableSettingsCompositeHeight);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=3;
  Composite filterComposite=new Composite(compositeTableSettings,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  filterComposite.setLayout(gridLayout);
  GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
  filterComposite.setLayoutData(gridData2);
  Label label=new Label(filterComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  nameFilter=new Text(filterComposite,SWT.BORDER);
  nameFilter.setToolTipText(Messages.getString(""String_Node_Str""));
  nameFilter.setEditable(true);
  gridData2=new GridData(GridData.FILL_HORIZONTAL);
  nameFilter.setLayoutData(gridData2);
  scrolledCompositeFileViewer=new ScrolledComposite(compositeTableSettings,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NONE);
  scrolledCompositeFileViewer.setExpandHorizontal(true);
  scrolledCompositeFileViewer.setExpandVertical(true);
  GridData gridData1=new GridData(GridData.FILL_BOTH);
  int width=700;
  int hight=325;
  if (forTemplate) {
    width=375;
    hight=300;
  }
  gridData1.widthHint=width;
  gridData1.heightHint=hight;
  gridData1.horizontalSpan=2;
  scrolledCompositeFileViewer.setLayoutData(gridData1);
  createTable();
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(compositeTableSettings,3,false,SWT.CENTER,SWT.BOTTOM);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  selectAllTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  selectNoneTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  checkConnectionButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  gc.dispose();
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
}","@Override protected void addFields(){
  int leftCompositeWidth=80;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=60;
  int tableSettingsCompositeHeight=90;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,1,leftCompositeWidth + rightCompositeWidth,height);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(mainComposite,1,rightCompositeWidth,height);
  Group groupTableSettings=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableSettingsCompositeHeight);
  Composite compositeTableSettings=Form.startNewDimensionnedGridLayout(groupTableSettings,1,rightCompositeWidth,tableSettingsCompositeHeight);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=3;
  Composite filterComposite=new Composite(compositeTableSettings,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  filterComposite.setLayout(gridLayout);
  GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
  filterComposite.setLayoutData(gridData2);
  Label label=new Label(filterComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  nameFilter=new Text(filterComposite,SWT.BORDER);
  nameFilter.setToolTipText(Messages.getString(""String_Node_Str""));
  nameFilter.setEditable(true);
  gridData2=new GridData(GridData.FILL_HORIZONTAL);
  nameFilter.setLayoutData(gridData2);
  scrolledCompositeFileViewer=new ScrolledComposite(compositeTableSettings,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NONE);
  scrolledCompositeFileViewer.setExpandHorizontal(true);
  scrolledCompositeFileViewer.setExpandVertical(true);
  GridData gridData1=new GridData(GridData.FILL_BOTH);
  int width=700;
  int hight=325;
  if (forTemplate) {
    width=375;
    hight=300;
  }
  gridData1.widthHint=width;
  gridData1.heightHint=hight;
  gridData1.horizontalSpan=2;
  scrolledCompositeFileViewer.setLayoutData(gridData1);
  createTable();
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(compositeTableSettings,3,false,SWT.CENTER,SWT.BOTTOM);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  selectAllTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  selectNoneTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  checkConnectionButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  gc.dispose();
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  parentWizardPage.setPageComplete(false);
}",0.9932294126909148
128239,"private boolean pageComplete(){
  if (parentWizardPage instanceof SelectorTableWizardPage) {
    List<MetadataTable> list=new ArrayList<MetadataTable>();
    Set<MetadataTable> oldTables=((SelectorTableWizardPage)parentWizardPage).getOldTables();
    Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
    if (oldTables != null && oldTables.size() > 0) {
      for (      MetadataTable table : tables) {
        boolean found=false;
        for (        MetadataTable oldtable : oldTables) {
          if (table != null && oldtable != null && table.getLabel().equals(oldtable.getLabel())) {
            found=true;
            break;
          }
        }
        if (table != null && !found) {
          list.add(table);
        }
      }
    }
 else {
      list.addAll(tables);
    }
    if (forTemplate && list.size() <= 0) {
      return true;
    }
  }
  return false;
}","private boolean pageComplete(){
  if (parentWizardPage instanceof SelectorTableWizardPage) {
    List<MetadataTable> list=new ArrayList<MetadataTable>();
    Set<MetadataTable> oldTables=((SelectorTableWizardPage)parentWizardPage).getOldTables();
    Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
    if (oldTables != null && oldTables.size() > 0) {
      for (      MetadataTable table : tables) {
        boolean found=false;
        for (        MetadataTable oldtable : oldTables) {
          if (table != null && oldtable != null && table.getLabel().equals(oldtable.getLabel())) {
            found=true;
            break;
          }
        }
        if (table != null && !found) {
          list.add(table);
        }
      }
    }
 else {
      list.addAll(tables);
    }
    if (forTemplate || list.size() <= 0) {
      return true;
    }
  }
  return false;
}",0.9977678571428572
128240,"public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(""String_Node_Str"");
    text.setSelection(selection.x,selection.y);
  }
}","public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
    text.setSelection(selection.x,selection.y);
  }
}",0.9734789391575664
128241,"protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  final Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(""String_Node_Str"");
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}","protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  final Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}",0.9884849853240008
128242,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      copy.setOriginalDbColumnName(nextGeneratedColumnName);
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.4070432197576035
128243,"public Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}","public synchronized Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}",0.9922848664688428
128244,"public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(""String_Node_Str"");
    text.setSelection(selection.x,selection.y);
  }
}","public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
    text.setSelection(selection.x,selection.y);
  }
}",0.9734789391575664
128245,"protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  final Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(""String_Node_Str"");
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}","protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  final Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",newValue,originalValue == null ? ""String_Node_Str"" : originalValue.toString()));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(originalValue == null ? ""String_Node_Str"" : originalValue.toString());
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}",0.9884849853240008
128246,"public Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}","public synchronized Property loadProperty(IResource iResource){
  URI propertyUri=URIHelper.convert(iResource.getFullPath());
  URI itemResourceURI=getItemResourceURI(propertyUri);
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null) {
      if (propertyUri.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
      if (itemResourceURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
  }
  Resource propertyResource=resourceSet.getResource(propertyUri,true);
  Property property=(Property)EcoreUtil.getObjectByType(propertyResource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
  return property;
}",0.9922848664688428
128247,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          File driverFile=new File(driverJarPathArg);
          boolean isExist=driverFile.exists();
          if (!isExist || !driverJarPathArg.contains(""String_Node_Str"")) {
            jarPathList.add(""String_Node_Str"");
          }
 else           if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9858230814294084
128248,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          File driverFile=new File(driverJarPathArg);
          boolean isExist=driverFile.exists();
          if (!isExist || !driverJarPathArg.contains(""String_Node_Str"")) {
            jarPathList.add(""String_Node_Str"");
          }
 else           if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9858230814294084
128249,"public static Set<String> retrieveContextVar(List<? extends IElementParameter> elementParameters,Connection connection,EComponentCategory category){
  if (elementParameters == null || connection == null) {
    return null;
  }
  Set<String> addedVars=new HashSet<String>();
  String var=null;
  for (  IElementParameter param : elementParameters) {
    if (category == null || category == param.getCategory()) {
      String repositoryValue=param.getRepositoryValue();
      if (repositoryValue != null) {
        Object objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,null);
        if (objectValue != null) {
          if (objectValue instanceof List) {
            List list=(List)objectValue;
            for (int i=0; i < list.size(); i++) {
              Object object=list.get(i);
              if (object instanceof HashMap) {
                Map map=(HashMap)object;
                if (!map.isEmpty()) {
                  Set keySet=map.keySet();
                  Iterator iterator=keySet.iterator();
                  while (iterator.hasNext()) {
                    String key=(String)iterator.next();
                    Object object2=map.get(key);
                    if (object2 instanceof String) {
                      var=ContextParameterUtils.getVariableFromCode((String)object2);
                      if (var != null) {
                        addedVars.add(var);
                      }
                    }
                  }
                }
              }
            }
          }
          if (objectValue instanceof String) {
            var=ContextParameterUtils.getVariableFromCode((String)objectValue);
            if (var != null) {
              addedVars.add(var);
            }
          }
        }
      }
    }
  }
  return addedVars;
}","public static Set<String> retrieveContextVar(List<? extends IElementParameter> elementParameters,Connection connection,EComponentCategory category){
  if (elementParameters == null || connection == null) {
    return null;
  }
  Set<String> addedVars=new HashSet<String>();
  String var=null;
  for (  IElementParameter param : elementParameters) {
    if (category == null || category == param.getCategory()) {
      String repositoryValue=param.getRepositoryValue();
      if (repositoryValue != null) {
        Object objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,null);
        if (objectValue != null) {
          if (objectValue instanceof List) {
            List list=(List)objectValue;
            for (int i=0; i < list.size(); i++) {
              Object object=list.get(i);
              if (object instanceof HashMap) {
                Map map=(HashMap)object;
                if (!map.isEmpty()) {
                  Set keySet=map.keySet();
                  Iterator iterator=keySet.iterator();
                  while (iterator.hasNext()) {
                    String key=(String)iterator.next();
                    Object object2=map.get(key);
                    if (object2 instanceof String) {
                      var=ContextParameterUtils.getVariableFromCode((String)object2);
                      if (var != null) {
                        addedVars.add(var);
                      }
                    }
                  }
                }
              }
            }
          }
          if (objectValue instanceof String) {
            var=ContextParameterUtils.getVariableFromCode((String)objectValue);
            if (var != null) {
              addedVars.add(var);
            }
          }
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) && connection.isContextMode() && param.getValue() instanceof String) {
        var=ContextParameterUtils.getVariableFromCode((String)param.getValue());
        if (var != null) {
          addedVars.add(var);
        }
      }
    }
  }
  return addedVars;
}",0.9270540056309188
128250,"/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  if (oldStr == null || newStr == null || replacement == null)   return oldStr;
 else   return oldStr.replaceAll(newStr,replacement);
}","/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  return CHANGE(oldStr,newStr,replacement);
}",0.8269617706237424
128251,"public void unloadUnlockedResources(){
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=xmiResourceManager.resourceSet.getResources().get(i);
    if (resource == null) {
      continue;
    }
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (object instanceof Property) {
        if (((Property)object).getItem() instanceof FolderItem) {
          continue;
        }
        if (((Property)object).getItem() instanceof RoutineItem) {
          RoutineItem item=(RoutineItem)((Property)object).getItem();
          if (item.isBuiltIn()) {
            continue;
          }
        }
        if (((Property)object).getItem() instanceof SQLPatternItem) {
          SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
          if (item.isSystem()) {
            continue;
          }
        }
        ERepositoryStatus status=getStatus(((Property)object).getItem());
        if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
          continue;
        }
        resourceToUnload.add(resource);
        if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
          boolean toKeepInMemorySinceDeleted=false;
          if (((Property)object).getItem().getState().isDeleted()) {
            toKeepInMemorySinceDeleted=true;
          }
 else           if (((Property)object).getItem() instanceof ConnectionItem) {
            Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
            boolean haveTableDeleted=false;
            for (            MetadataTable table : ConnectionHelper.getTables(connection)) {
              if (SubItemHelper.isDeleted(table)) {
                haveTableDeleted=true;
                break;
              }
            }
            if (!haveTableDeleted && connection != null) {
              QueriesConnection queriesConnection=connection.getQueries();
              if (queriesConnection != null) {
                for (                Query query : queriesConnection.getQuery()) {
                  if (SubItemHelper.isDeleted(query)) {
                    haveTableDeleted=true;
                    break;
                  }
                }
              }
              if (connection instanceof SAPConnection) {
                SAPConnection sapConn=(SAPConnection)connection;
                if (!haveTableDeleted) {
                  EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                  for (                  SAPFunctionUnit unit : funtions) {
                    if (SubItemHelper.isDeleted(unit)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (!haveTableDeleted) {
                  EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                  for (                  SAPIDocUnit iDoc : iDocs) {
                    if (SubItemHelper.isDeleted(iDoc)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
              }
            }
            if (haveTableDeleted) {
              toKeepInMemorySinceDeleted=true;
            }
          }
          if (!toKeepInMemorySinceDeleted) {
            ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
            ((Property)object).getItem().setParent(null);
          }
        }
        possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
      }
    }
  }
  kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=kaka.get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (!(object instanceof Property)) {
        if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
          resourceToUnload.add(resource);
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.015996800639872
128252,"/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  if (oldStr == null || newStr == null || replacement == null)   return oldStr;
 else   return oldStr.replaceAll(newStr,replacement);
}","/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  return CHANGE(oldStr,newStr,replacement);
}",0.8269617706237424
128253,"@Override public void preWindowOpen(){
  PerspectiveReviewUtil.setPerspectiveTabsBarSize();
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1000,750));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setShowPerspectiveBar(true);
  configurer.configureEditorAreaDropListener(new EditorAreaDropAdapter(configurer.getWindow()));
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  Object buildId=VersionUtils.getVersion();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  IBrandingConfiguration brandingConfiguration=service.getBrandingConfiguration();
  String appName=service.getFullProductName();
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean localProvider=false;
  try {
    localProvider=factory.isLocalConnectionProvider();
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (localProvider) {
    configurer.setTitle(appName + ""String_Node_Str"" + buildId+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ prefManipulator.getLastConnection()+ ""String_Node_Str"");
  }
 else {
    configurer.setTitle(appName + ""String_Node_Str"" + buildId+ ""String_Node_Str""+ repositoryContext.getUser()+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ prefManipulator.getLastConnection()+ ""String_Node_Str"");
  }
  ActionBarBuildHelper helper=(ActionBarBuildHelper)brandingConfiguration.getHelper();
  if (helper == null) {
    helper=new ActionBarBuildHelper();
    brandingConfiguration.setHelper(helper);
  }
  helper.preWindowOpen(configurer);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.initProxyRepository();
    }
  }
}","@Override public void preWindowOpen(){
  PerspectiveReviewUtil.setPerspectiveTabsBarSize();
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1000,750));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setShowPerspectiveBar(true);
  configurer.configureEditorAreaDropListener(new EditorAreaDropAdapter(configurer.getWindow()));
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  Object buildId=VersionUtils.getVersion();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  IBrandingConfiguration brandingConfiguration=service.getBrandingConfiguration();
  String appName=service.getFullProductName();
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean localProvider=false;
  try {
    localProvider=factory.isLocalConnectionProvider();
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (localProvider) {
    configurer.setTitle(appName + ""String_Node_Str"" + buildId+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ ConnectionUserPerReader.getInstance().readLastConncetion()+ ""String_Node_Str"");
  }
 else {
    configurer.setTitle(appName + ""String_Node_Str"" + buildId+ ""String_Node_Str""+ repositoryContext.getUser()+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ ConnectionUserPerReader.getInstance().readLastConncetion()+ ""String_Node_Str"");
  }
  ActionBarBuildHelper helper=(ActionBarBuildHelper)brandingConfiguration.getHelper();
  if (helper == null) {
    helper=new ActionBarBuildHelper();
    brandingConfiguration.setHelper(helper);
  }
  helper.preWindowOpen(configurer);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.initProxyRepository();
    }
  }
}",0.9732730263157896
128254,"/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  if (oldStr == null || newStr == null || replacement == null)   return oldStr;
 else   return oldStr.replaceAll(newStr,replacement);
}","/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  return CHANGE(oldStr,newStr,replacement);
}",0.8269617706237424
128255,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  deleteHiddenNodes(nodes);
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.9989624249610908
128256,"public static void getTypedPackges(ConnectionItem item,List returnlist,EPackageType pkgType){
switch (pkgType) {
case Generic:
    for (int i=0; i < item.getConnection().getDataPackage().size(); i++) {
      if (item.getConnection().getDataPackage().get(i) instanceof GenericPackage) {
        GenericPackage gpkg=(GenericPackage)item.getConnection().getDataPackage().get(i);
        returnlist.add(gpkg);
      }
    }
  break;
case DB_Catalog:
case DB_Schema:
Collection<? extends ModelElement> catalogsorSchemas=ConnectionHelper.getCatalogs(item.getConnection());
if (catalogsorSchemas.size() == 0) {
catalogsorSchemas=ConnectionHelper.getSchema(item.getConnection());
}
returnlist.addAll(catalogsorSchemas);
break;
case RecordFile:
for (int i=0; i < item.getConnection().getDataPackage().size(); i++) {
if (item.getConnection().getDataPackage().get(i) instanceof RecordFile) {
RecordFile rf=(RecordFile)item.getConnection().getDataPackage().get(i);
returnlist.add(rf);
}
}
break;
case XML_Schema:
for (int i=0; i < item.getConnection().getDataPackage().size(); i++) {
if (item.getConnection().getDataPackage().get(i) instanceof TdXmlSchema) {
TdXmlSchema xml=(TdXmlSchema)item.getConnection().getDataPackage().get(i);
returnlist.add(xml);
}
}
break;
case TDQ_compont:
if (item.getConnection().getComponent() instanceof Component) {
Component component=item.getConnection().getComponent();
returnlist.add(component);
}
break;
case Dependency:
List<Dependency> dependencies=item.getConnection().getSupplierDependency();
returnlist.addAll(dependencies);
break;
default :
}
}","public static void getTypedPackges(ConnectionItem item,List returnlist,EPackageType pkgType){
switch (pkgType) {
case Generic:
    for (int i=0; i < item.getConnection().getDataPackage().size(); i++) {
      if (item.getConnection().getDataPackage().get(i) instanceof GenericPackage) {
        GenericPackage gpkg=(GenericPackage)item.getConnection().getDataPackage().get(i);
        returnlist.add(gpkg);
      }
    }
  break;
case DB_Catalog:
case DB_Schema:
Collection<? extends ModelElement> catalogsorSchemas=ConnectionHelper.getCatalogs(item.getConnection());
if (catalogsorSchemas.size() == 0) {
catalogsorSchemas=ConnectionHelper.getSchema(item.getConnection());
}
returnlist.addAll(catalogsorSchemas);
break;
case RecordFile:
for (int i=0; i < item.getConnection().getDataPackage().size(); i++) {
if (item.getConnection().getDataPackage().get(i) instanceof RecordFile) {
RecordFile rf=(RecordFile)item.getConnection().getDataPackage().get(i);
item.getConnection().setName(item.getProperty().getDisplayName());
if (rf != null) {
rf.setName(""String_Node_Str"");
}
returnlist.add(rf);
}
}
break;
case XML_Schema:
for (int i=0; i < item.getConnection().getDataPackage().size(); i++) {
if (item.getConnection().getDataPackage().get(i) instanceof TdXmlSchema) {
TdXmlSchema xml=(TdXmlSchema)item.getConnection().getDataPackage().get(i);
returnlist.add(xml);
}
}
break;
case TDQ_compont:
if (item.getConnection().getComponent() instanceof Component) {
Component component=item.getConnection().getComponent();
returnlist.add(component);
}
break;
case Dependency:
List<Dependency> dependencies=item.getConnection().getSupplierDependency();
returnlist.addAll(dependencies);
break;
default :
}
}",0.9638922888616892
128257,"public static Set<String> retrieveContextVar(List<? extends IElementParameter> elementParameters,Connection connection,EComponentCategory category){
  if (elementParameters == null || connection == null) {
    return null;
  }
  Set<String> addedVars=new HashSet<String>();
  String var=null;
  for (  IElementParameter param : elementParameters) {
    if (category == null || category == param.getCategory()) {
      String repositoryValue=param.getRepositoryValue();
      if (repositoryValue != null) {
        Object objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,null);
        if (objectValue != null) {
          if (objectValue instanceof List) {
            List list=(List)objectValue;
            for (int i=0; i < list.size(); i++) {
              Object object=list.get(i);
              if (object instanceof HashMap) {
                Map map=(HashMap)object;
                if (!map.isEmpty()) {
                  Set keySet=map.keySet();
                  Iterator iterator=keySet.iterator();
                  while (iterator.hasNext()) {
                    String key=(String)iterator.next();
                    Object object2=map.get(key);
                    if (object2 instanceof String) {
                      var=ContextParameterUtils.getVariableFromCode((String)object2);
                      if (var != null) {
                        addedVars.add(var);
                      }
                    }
                  }
                }
              }
            }
          }
          if (objectValue instanceof String) {
            var=ContextParameterUtils.getVariableFromCode((String)objectValue);
            if (var != null) {
              addedVars.add(var);
            }
          }
        }
      }
    }
  }
  return addedVars;
}","public static Set<String> retrieveContextVar(List<? extends IElementParameter> elementParameters,Connection connection,EComponentCategory category){
  if (elementParameters == null || connection == null) {
    return null;
  }
  Set<String> addedVars=new HashSet<String>();
  String var=null;
  for (  IElementParameter param : elementParameters) {
    if (category == null || category == param.getCategory()) {
      String repositoryValue=param.getRepositoryValue();
      if (repositoryValue != null) {
        Object objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,null);
        if (objectValue != null) {
          if (objectValue instanceof List) {
            List list=(List)objectValue;
            for (int i=0; i < list.size(); i++) {
              Object object=list.get(i);
              if (object instanceof HashMap) {
                Map map=(HashMap)object;
                if (!map.isEmpty()) {
                  Set keySet=map.keySet();
                  Iterator iterator=keySet.iterator();
                  while (iterator.hasNext()) {
                    String key=(String)iterator.next();
                    Object object2=map.get(key);
                    if (object2 instanceof String) {
                      var=ContextParameterUtils.getVariableFromCode((String)object2);
                      if (var != null) {
                        addedVars.add(var);
                      }
                    }
                  }
                }
              }
            }
          }
          if (objectValue instanceof String) {
            var=ContextParameterUtils.getVariableFromCode((String)objectValue);
            if (var != null) {
              addedVars.add(var);
            }
          }
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) && connection.isContextMode() && param.getValue() instanceof String) {
        var=ContextParameterUtils.getVariableFromCode((String)param.getValue());
        if (var != null) {
          addedVars.add(var);
        }
      }
    }
  }
  return addedVars;
}",0.9270540056309188
128258,"/** 
 * ggu Comment method ""getEBCDICFieldValue"".
 */
private static Object getEBCDICFieldValue(EbcdicConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getDataFile())) {
      return connection.getDataFile();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getDataFile() != null) {
        p=new Path(connection.getDataFile());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  return null;
}","/** 
 * ggu Comment method ""getEBCDICFieldValue"".
 */
private static Object getEBCDICFieldValue(EbcdicConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getDataFile())) {
      return connection.getDataFile();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getDataFile() != null) {
        p=new Path(connection.getDataFile());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (""String_Node_Str"".equals(value)) {
    if (connection.getCodePage() == null) {
      return null;
    }
    if (isContextMode(connection,connection.getCodePage())) {
      return connection.getCodePage();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getCodePage() != null) {
        p=new Path(connection.getCodePage());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  return null;
}",0.7050938337801609
128259,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=xmiResourceManager.resourceSet.getResources().get(i);
    if (resource == null) {
      continue;
    }
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (object instanceof Property) {
        if (((Property)object).getItem() instanceof FolderItem) {
          continue;
        }
        if (((Property)object).getItem() instanceof RoutineItem) {
          RoutineItem item=(RoutineItem)((Property)object).getItem();
          if (item.isBuiltIn()) {
            continue;
          }
        }
        if (((Property)object).getItem() instanceof SQLPatternItem) {
          SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
          if (item.isSystem()) {
            continue;
          }
        }
        ERepositoryStatus status=getStatus(((Property)object).getItem());
        if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
          continue;
        }
        resourceToUnload.add(resource);
        if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
          boolean toKeepInMemorySinceDeleted=false;
          if (((Property)object).getItem().getState().isDeleted()) {
            toKeepInMemorySinceDeleted=true;
          }
 else           if (((Property)object).getItem() instanceof ConnectionItem) {
            Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
            boolean haveTableDeleted=false;
            for (            MetadataTable table : ConnectionHelper.getTables(connection)) {
              if (SubItemHelper.isDeleted(table)) {
                haveTableDeleted=true;
                break;
              }
            }
            if (!haveTableDeleted && connection != null) {
              QueriesConnection queriesConnection=connection.getQueries();
              if (queriesConnection != null) {
                for (                Query query : queriesConnection.getQuery()) {
                  if (SubItemHelper.isDeleted(query)) {
                    haveTableDeleted=true;
                    break;
                  }
                }
              }
              if (connection instanceof SAPConnection) {
                SAPConnection sapConn=(SAPConnection)connection;
                if (!haveTableDeleted) {
                  EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                  for (                  SAPFunctionUnit unit : funtions) {
                    if (SubItemHelper.isDeleted(unit)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (!haveTableDeleted) {
                  EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                  for (                  SAPIDocUnit iDoc : iDocs) {
                    if (SubItemHelper.isDeleted(iDoc)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
              }
            }
            if (haveTableDeleted) {
              toKeepInMemorySinceDeleted=true;
            }
          }
          if (!toKeepInMemorySinceDeleted) {
            ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
            ((Property)object).getItem().setParent(null);
          }
        }
        possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
      }
    }
  }
  kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=kaka.get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (!(object instanceof Property)) {
        if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
          resourceToUnload.add(resource);
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
}",0.015996800639872
128260,"/** 
 * ggu Comment method ""getEBCDICFieldValue"".
 */
private static Object getEBCDICFieldValue(EbcdicConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getDataFile())) {
      return connection.getDataFile();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getDataFile() != null) {
        p=new Path(connection.getDataFile());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  return null;
}","/** 
 * ggu Comment method ""getEBCDICFieldValue"".
 */
private static Object getEBCDICFieldValue(EbcdicConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getDataFile())) {
      return connection.getDataFile();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getDataFile() != null) {
        p=new Path(connection.getDataFile());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (""String_Node_Str"".equals(value)) {
    if (connection.getCodePage() == null) {
      return null;
    }
    if (isContextMode(connection,connection.getCodePage())) {
      return connection.getCodePage();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getCodePage() != null) {
        p=new Path(connection.getCodePage());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  return null;
}",0.7050938337801609
128261,"/** 
 * ggu Comment method ""getEBCDICFieldValue"".
 */
private static Object getEBCDICFieldValue(EbcdicConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getDataFile())) {
      return connection.getDataFile();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getDataFile() != null) {
        p=new Path(connection.getDataFile());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  return null;
}","/** 
 * ggu Comment method ""getEBCDICFieldValue"".
 */
private static Object getEBCDICFieldValue(EbcdicConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getDataFile())) {
      return connection.getDataFile();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getDataFile() != null) {
        p=new Path(connection.getDataFile());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  if (""String_Node_Str"".equals(value)) {
    if (connection.getCodePage() == null) {
      return null;
    }
    if (isContextMode(connection,connection.getCodePage())) {
      return connection.getCodePage();
    }
 else {
      Path p=new Path(""String_Node_Str"");
      if (connection.getCodePage() != null) {
        p=new Path(connection.getCodePage());
      }
      return TalendQuoteUtils.addQuotes(p.toPortableString());
    }
  }
  return null;
}",0.7050938337801609
128262,"public Resource getReferenceFileResource(Resource itemResource,String extension,boolean needLoad){
  URI referenceFileURI=getReferenceFileURI(itemResource.getURI(),extension);
  URIConverter converter=resourceSet.getURIConverter();
  Resource referenceResource=new ByteArrayResource(referenceFileURI);
  InputStream inputStream=null;
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null && referenceFileURI.toString().equals(res.getURI().toString())) {
      res.unload();
      resourceSet.getResources().remove(res);
    }
  }
  resourceSet.getResources().add(referenceResource);
  try {
    if (needLoad) {
      inputStream=converter.createInputStream(referenceFileURI);
      referenceResource.load(inputStream,null);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  return referenceResource;
}","public Resource getReferenceFileResource(Resource itemResource,ReferenceFileItem refFile,boolean needLoad){
  URI referenceFileURI=getReferenceFileURI(itemResource.getURI(),refFile.getExtension());
  URIConverter converter=resourceSet.getURIConverter();
  Resource referenceResource=new ByteArrayResource(referenceFileURI);
  InputStream inputStream=null;
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  if (refFile.isReloadFromFile()) {
    for (    Resource res : resources) {
      if (res != null && referenceFileURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
    resourceSet.getResources().add(referenceResource);
    try {
      if (needLoad) {
        inputStream=converter.createInputStream(referenceFileURI);
        referenceResource.load(inputStream,null);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      try {
        if (inputStream != null) {
          inputStream.close();
        }
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
 else {
    referenceResource=resourceSet.getResource(referenceFileURI,true);
  }
  return referenceResource;
}",0.8753202391118702
128263,"private static void populateRoot(ATreeNode root,ATreeNode selectedNode){
  Object[] toBeIterated=root.getChildren();
  for (int i=0; i < toBeIterated.length; i++) {
    ATreeNode node=((ATreeNode)toBeIterated[i]);
    Object nodeValue=node.getValue();
    if (nodeValue != null && !nodeValue.equals(selectedNode.getValue()) && !nodeValue.equals(selectedNode.getDataType())) {
      continue;
    }
    Object value=node.getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)toBeIterated[i]).getChildren();
        for (int k=0; k < os.length; k++) {
          if (os[k] instanceof ATreeNode) {
            if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType()))) {
              ((ATreeNode)container.get(j)).addChild(os[k]);
            }
          }
        }
      }
    }
    break;
  }
}","private static void populateRoot(ATreeNode root,ATreeNode selectedNode){
  Object[] toBeIterated=root.getChildren();
  for (  Object element : toBeIterated) {
    ATreeNode node=((ATreeNode)element);
    Object nodeValue=node.getValue();
    if (nodeValue != null && !nodeValue.equals(selectedNode.getValue()) && !nodeValue.equals(selectedNode.getDataType())) {
      continue;
    }
    Object value=node.getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)element).getChildren();
        for (int k=0; k < os.length; k++) {
          if (os[k] instanceof ATreeNode) {
            if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType()))) {
              ((ATreeNode)container.get(j)).addChild(os[k]);
            }
          }
        }
      }
    }
    break;
  }
}",0.7603686635944701
128264,"/** 
 * Return the tree node instance that represents to the ComplexElement that featured by the given value.
 * @param root the tree node from which the search begin
 * @param value the name of the ComplexElement
 * @return
 */
private static ATreeNode findComplexElement(ATreeNode root,String value){
  Object[] os=root.getChildren();
  for (int i=0; i < os.length; i++) {
    if (((ATreeNode)os[i]).getValue().equals(value)) {
      return (ATreeNode)os[i];
    }
  }
  return null;
}","/** 
 * Return the tree node instance that represents to the ComplexElement that featured by the given value.
 * @param root the tree node from which the search begin
 * @param value the name of the ComplexElement
 * @return
 */
private static ATreeNode findComplexElement(ATreeNode root,String value){
  Object[] os=root.getChildren();
  for (  Object element : os) {
    if (((ATreeNode)element).getValue().equals(value)) {
      return (ATreeNode)element;
    }
  }
  return null;
}",0.925925925925926
128265,"public synchronized void wakeup(){
  notify();
}","@Override public synchronized void wakeup(){
  notify();
}",0.9056603773584906
128266,"/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString())) {
    return;
  }
  if (root.getDataType() != null && root.getDataType().equals(value)) {
    container.add(root);
  }
  Object[] children=root.getChildren();
  for (int i=0; i < children.length; i++) {
    if (children[i] instanceof ATreeNode) {
      findNodeWithValue((ATreeNode)children[i],value,container,vr);
    }
  }
}","/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString())) {
    return;
  }
  if (root.getDataType() != null && root.getDataType().equals(value)) {
    container.add(root);
  }
  Object[] children=root.getChildren();
  for (  Object element : children) {
    if (element instanceof ATreeNode) {
      findNodeWithValue((ATreeNode)element,value,container,vr);
    }
  }
}",0.9408194233687404
128267,"public void detectNewRow(String path,String prefix,String uri,boolean start){
}","@Override public void detectNewRow(String path,String prefix,String uri,boolean start){
}",0.9404761904761904
128268,"public void manipulateData(String path,String value){
}","@Override public void manipulateData(String path,String value){
}",0.9166666666666666
128269,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9773672055427252
128270,"public XSDSchema getXSDSchema(String fileName) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}","public XSDSchema getXSDSchema(String fileName,boolean forceReload) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (forceReload || haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}",0.988306047444036
128271,"private void addComplexTypeDetails(XSDSchema xsdSchema,ATreeNode node,XSDTypeDefinition xsdTypeDefinition,String prefix,String namespace,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  String prefixToUse=prefix;
  if (namespace != null && !namespaceToPrefix.containsKey(namespace)) {
    if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
      prefixToUse=""String_Node_Str"" + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (namespaceToPrefix.containsValue(prefix)) {
      prefixToUse=prefixToUse + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (prefixToUse != null && !prefixToUse.isEmpty()) {
      namespaceToPrefix.put(namespace,prefixToUse);
    }
  }
  XSDComplexTypeDefinition xsdComplexTypeDefinition=(XSDComplexTypeDefinition)xsdTypeDefinition;
  if (xsdComplexTypeDefinition.getContentType() instanceof XSDParticle) {
    addParticleDetail(xsdSchema,(XSDParticle)xsdComplexTypeDefinition.getContentType(),node,currentPath);
  }
  for (Iterator attributeUses=xsdComplexTypeDefinition.getAttributeUses().iterator(); attributeUses.hasNext(); ) {
    XSDAttributeUse xsdAttributeUse=(XSDAttributeUse)attributeUses.next();
    XSDAttributeDeclaration xsdAttributeDeclaration=xsdAttributeUse.getAttributeDeclaration();
    String attributeDeclarationName=xsdAttributeDeclaration.getName();
    ATreeNode childNode=new ATreeNode();
    childNode.setValue(attributeDeclarationName);
    childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
    String dataType=xsdAttributeDeclaration.getTypeDefinition().getQName();
    if (xsdAttributeDeclaration.getTypeDefinition().getBaseType() != null) {
      dataType=xsdAttributeDeclaration.getTypeDefinition().getBaseType().getQName();
    }
    if (dataType != null && dataType.length() > 0) {
      childNode.setDataType(dataType);
    }
    node.addChild(childNode);
  }
}","private void addComplexTypeDetails(XSDSchema xsdSchema,ATreeNode node,XSDTypeDefinition xsdTypeDefinition,String prefix,String namespace,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  String prefixToUse=prefix;
  if (namespace != null && !namespaceToPrefix.containsKey(namespace)) {
    if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
      prefixToUse=""String_Node_Str"" + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (namespaceToPrefix.containsValue(prefix)) {
      prefixToUse=prefixToUse + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (prefixToUse != null && !prefixToUse.isEmpty()) {
      namespaceToPrefix.put(namespace,prefixToUse);
    }
  }
  XSDComplexTypeDefinition xsdComplexTypeDefinition=(XSDComplexTypeDefinition)xsdTypeDefinition;
  if (xsdComplexTypeDefinition.getContentType() instanceof XSDParticle) {
    addParticleDetail(xsdSchema,(XSDParticle)xsdComplexTypeDefinition.getContentType(),node,currentPath);
  }
  for (  Object element : xsdComplexTypeDefinition.getAttributeUses()) {
    XSDAttributeUse xsdAttributeUse=(XSDAttributeUse)element;
    XSDAttributeDeclaration xsdAttributeDeclaration=xsdAttributeUse.getAttributeDeclaration();
    String attributeDeclarationName=xsdAttributeDeclaration.getName();
    ATreeNode childNode=new ATreeNode();
    childNode.setValue(attributeDeclarationName);
    childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
    String dataType=xsdAttributeDeclaration.getTypeDefinition().getQName();
    if (xsdAttributeDeclaration.getTypeDefinition().getBaseType() != null) {
      dataType=xsdAttributeDeclaration.getTypeDefinition().getBaseType().getQName();
    }
    if (dataType != null && dataType.length() > 0) {
      childNode.setDataType(dataType);
    }
    node.addChild(childNode);
  }
}",0.932136255611302
128272,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (    Object element : children) {
      if (element instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)element;
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}",0.972913211719182
128273,"public static List<FOXTreeNode> getFoxTreeNodesByRootNode(XSDSchema xsdSchema,ATreeNode selectedRootNode,boolean resolved,boolean supportChoice,boolean supportSubstitution){
  List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
  if (xsdSchema == null || selectedRootNode == null) {
    return list;
  }
  ATreeNode treeNode=null;
  try {
    if (resolved) {
      treeNode=selectedRootNode;
    }
 else {
      treeNode=SchemaPopulationUtil.getSchemaTree(xsdSchema,selectedRootNode,supportChoice,supportSubstitution);
    }
    if (treeNode == null) {
      return list;
    }
    String rootName=""String_Node_Str"";
    if (treeNode.getValue() instanceof String) {
      rootName+=""String_Node_Str"" + treeNode.getValue();
    }
    FOXTreeNode root=cloneATreeNode(treeNode,rootName);
    if (root instanceof Element) {
      root.setParent(null);
      list.add(root);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return list;
}","public static List<FOXTreeNode> getFoxTreeNodesByRootNode(XSDSchema xsdSchema,ATreeNode selectedRootNode,boolean resolved,boolean supportChoice,boolean supportSubstitution){
  return getFoxTreeNodesByRootNode(null,xsdSchema,selectedRootNode,resolved,supportChoice,supportSubstitution);
}",0.2937399678972712
128274,"public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null)     return null;
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null) {
      return null;
    }
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9821731748726656
128275,"@Override public void preWindowOpen(){
  PerspectiveReviewUtil.setPerspectiveTabsBarSize();
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1000,750));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setShowPerspectiveBar(true);
  configurer.configureEditorAreaDropListener(new EditorAreaDropAdapter(configurer.getWindow()));
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  IBrandingConfiguration brandingConfiguration=service.getBrandingConfiguration();
  String appName=service.getFullProductName();
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean localProvider=false;
  try {
    localProvider=factory.isLocalConnectionProvider();
  }
 catch (  PersistenceException e) {
    localProvider=true;
  }
  String buildIdField=""String_Node_Str"" + VersionUtils.getVersion() + ""String_Node_Str"";
  if (TalendPropertiesUtil.isHideBuildNumber()) {
    buildIdField=""String_Node_Str"";
  }
  if (localProvider) {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ prefManipulator.getLastConnection()+ ""String_Node_Str"");
  }
 else {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ repositoryContext.getUser()+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ prefManipulator.getLastConnection()+ ""String_Node_Str"");
  }
  ActionBarBuildHelper helper=(ActionBarBuildHelper)brandingConfiguration.getHelper();
  if (helper == null) {
    helper=new ActionBarBuildHelper();
    brandingConfiguration.setHelper(helper);
  }
  helper.preWindowOpen(configurer);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.initProxyRepository();
    }
  }
}","@Override public void preWindowOpen(){
  PerspectiveReviewUtil.setPerspectiveTabsBarSize();
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1000,750));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setShowPerspectiveBar(true);
  configurer.configureEditorAreaDropListener(new EditorAreaDropAdapter(configurer.getWindow()));
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  IBrandingConfiguration brandingConfiguration=service.getBrandingConfiguration();
  String appName=service.getFullProductName();
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean localProvider=false;
  try {
    localProvider=factory.isLocalConnectionProvider();
  }
 catch (  PersistenceException e) {
    localProvider=true;
  }
  String buildIdField=""String_Node_Str"" + VersionUtils.getVersion() + ""String_Node_Str"";
  if (TalendPropertiesUtil.isHideBuildNumber()) {
    buildIdField=""String_Node_Str"";
  }
  if (localProvider) {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ ConnectionUserPerReader.getInstance().readLastConncetion()+ ""String_Node_Str"");
  }
 else {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ repositoryContext.getUser()+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ ConnectionUserPerReader.getInstance().readLastConncetion()+ ""String_Node_Str"");
  }
  ActionBarBuildHelper helper=(ActionBarBuildHelper)brandingConfiguration.getHelper();
  if (helper == null) {
    helper=new ActionBarBuildHelper();
    brandingConfiguration.setHelper(helper);
  }
  helper.preWindowOpen(configurer);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.initProxyRepository();
    }
  }
}",0.9743892828999212
128276,"/** 
 * Sets the dbType.
 * @param dbType the dbType to set
 */
public void setDbType(String dbType){
  if (dbType != null) {
    this.dbType=TextUtil.removeQuots(EDatabaseTypeName.getTypeFromDbType(dbType).getDisplayName());
  }
 else {
    this.dbType=""String_Node_Str"";
  }
}","/** 
 * Sets the dbType.
 * @param dbType the dbType to set
 */
public void setDbType(String dbType){
  if (dbType != null && !""String_Node_Str"".equals(dbType)) {
    this.dbType=TextUtil.removeQuots(EDatabaseTypeName.getTypeFromDbType(dbType).getDisplayName());
  }
 else {
    this.dbType=""String_Node_Str"";
  }
}",0.9376053962900506
128277,"@Override public void preWindowOpen(){
  PerspectiveReviewUtil.setPerspectiveTabsBarSize();
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1000,750));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setShowPerspectiveBar(true);
  configurer.configureEditorAreaDropListener(new EditorAreaDropAdapter(configurer.getWindow()));
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  IBrandingConfiguration brandingConfiguration=service.getBrandingConfiguration();
  String appName=service.getFullProductName();
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean localProvider=false;
  try {
    localProvider=factory.isLocalConnectionProvider();
  }
 catch (  PersistenceException e) {
    localProvider=true;
  }
  String buildIdField=""String_Node_Str"" + VersionUtils.getVersion() + ""String_Node_Str"";
  if (TalendPropertiesUtil.isHideBuildNumber()) {
    buildIdField=""String_Node_Str"";
  }
  if (localProvider) {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ prefManipulator.getLastConnection()+ ""String_Node_Str"");
  }
 else {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ repositoryContext.getUser()+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ prefManipulator.getLastConnection()+ ""String_Node_Str"");
  }
  ActionBarBuildHelper helper=(ActionBarBuildHelper)brandingConfiguration.getHelper();
  if (helper == null) {
    helper=new ActionBarBuildHelper();
    brandingConfiguration.setHelper(helper);
  }
  helper.preWindowOpen(configurer);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.initProxyRepository();
    }
  }
}","@Override public void preWindowOpen(){
  PerspectiveReviewUtil.setPerspectiveTabsBarSize();
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1000,750));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setShowProgressIndicator(true);
  configurer.setShowPerspectiveBar(true);
  configurer.configureEditorAreaDropListener(new EditorAreaDropAdapter(configurer.getWindow()));
  RepositoryContext repositoryContext=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  IBrandingConfiguration brandingConfiguration=service.getBrandingConfiguration();
  String appName=service.getFullProductName();
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean localProvider=false;
  try {
    localProvider=factory.isLocalConnectionProvider();
  }
 catch (  PersistenceException e) {
    localProvider=true;
  }
  String buildIdField=""String_Node_Str"" + VersionUtils.getVersion() + ""String_Node_Str"";
  if (TalendPropertiesUtil.isHideBuildNumber()) {
    buildIdField=""String_Node_Str"";
  }
  if (localProvider) {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ ConnectionUserPerReader.getInstance().readLastConncetion()+ ""String_Node_Str"");
  }
 else {
    configurer.setTitle(appName + buildIdField + ""String_Node_Str""+ repositoryContext.getUser()+ ""String_Node_Str""+ project.getLabel()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ ConnectionUserPerReader.getInstance().readLastConncetion()+ ""String_Node_Str"");
  }
  ActionBarBuildHelper helper=(ActionBarBuildHelper)brandingConfiguration.getHelper();
  if (helper == null) {
    helper=new ActionBarBuildHelper();
    brandingConfiguration.setHelper(helper);
  }
  helper.preWindowOpen(configurer);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.initProxyRepository();
    }
  }
}",0.9743892828999212
128278,"public T next(){
  current=internalListIterator.next();
  return current;
}","@Override public T next(){
  current=internalListIterator.next();
  return current;
}",0.9375
128279,"public void swapElement(T object1,T object2){
  swap(indexOf(object1),indexOf(object2));
}","@Override public void swapElement(T object1,T object2){
  swap(indexOf(object1),indexOf(object2));
}",0.9473684210526316
128280,"public int nextIndex(){
  return internalListIterator.nextIndex();
}","@Override public int nextIndex(){
  return internalListIterator.nextIndex();
}",0.9315068493150684
128281,"public T remove(int index){
  fireBeforeRemovedEvent(index);
  T removedObject=this.list.remove(index);
  fireRemovedEvent(index,removedObject);
  return removedObject;
}","@Override public T remove(int index){
  fireBeforeRemovedEvent(index);
  T removedObject=this.list.remove(index);
  fireRemovedEvent(index,removedObject);
  return removedObject;
}",0.9714285714285714
128282,"private void fireBeforeRemovedEvent(int index){
  if (beforeListeners.size() != 0) {
    T removingObject=this.list.get(index);
    List<T> currentList=new ArrayList<T>(1);
    currentList.add((T)removingObject);
    fireRemovedEvent(index,currentList,null,true);
  }
}","private void fireBeforeRemovedEvent(int index){
  if (beforeListeners.size() != 0) {
    T removingObject=this.list.get(index);
    List<T> currentList=new ArrayList<T>(1);
    currentList.add(removingObject);
    fireRemovedEvent(index,currentList,null,true);
  }
}",0.994392523364486
128283,"public void swapElements(List<Integer> indicesOrigin,List<Integer> indicesTarget){
  if (indicesOrigin.size() != indicesTarget.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  ArrayList<T> swapedObjects=new ArrayList<T>();
  fireSwapedEvent(indicesOrigin,indicesTarget,null,true);
  int lstSize=indicesOrigin.size();
  for (int i=0; i < lstSize; i++) {
    Integer idxOrigin=indicesOrigin.get(i);
    Integer idxDestination=indicesTarget.get(i);
    swapedObjects.add(list.get(idxOrigin));
    swapedObjects.add(list.get(idxDestination));
    internalSwap(idxOrigin,idxDestination);
  }
  fireSwapedEvent(indicesOrigin,indicesTarget,swapedObjects.toArray(),false);
}","@Override public void swapElements(List<Integer> indicesOrigin,List<Integer> indicesTarget){
  if (indicesOrigin.size() != indicesTarget.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  ArrayList<T> swapedObjects=new ArrayList<T>();
  fireSwapedEvent(indicesOrigin,indicesTarget,null,true);
  int lstSize=indicesOrigin.size();
  for (int i=0; i < lstSize; i++) {
    Integer idxOrigin=indicesOrigin.get(i);
    Integer idxDestination=indicesTarget.get(i);
    swapedObjects.add(list.get(idxOrigin));
    swapedObjects.add(list.get(idxDestination));
    internalSwap(idxOrigin,idxDestination);
  }
  fireSwapedEvent(indicesOrigin,indicesTarget,swapedObjects.toArray(),false);
}",0.99302649930265
128284,"public Iterator<T> iterator(){
  return new Iterator<T>(){
    private Iterator<T> internalIterator=list.iterator();
    private T current=null;
    public boolean hasNext(){
      return internalIterator.hasNext();
    }
    public T next(){
      current=internalIterator.next();
      return current;
    }
    public void remove(){
      Integer indexBeforeRemove=indexOf(current);
      fireBeforeRemovedEvent(indexBeforeRemove);
      internalIterator.remove();
      fireRemovedEvent(indexBeforeRemove,current);
    }
  }
;
}","@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    private Iterator<T> internalIterator=list.iterator();
    private T current=null;
    @Override public boolean hasNext(){
      return internalIterator.hasNext();
    }
    @Override public T next(){
      current=internalIterator.next();
      return current;
    }
    @Override public void remove(){
      Integer indexBeforeRemove=indexOf(current);
      fireBeforeRemovedEvent(indexBeforeRemove);
      internalIterator.remove();
      fireRemovedEvent(indexBeforeRemove,current);
    }
  }
;
}",0.9637681159420288
128285,"/** 
 * Removes each object of the collection from the list and returns whether any object was actually contained by the list.
 * @param collection the collection of objects to be removed.
 * @return whether any object was actually contained by the list.
 */
@SuppressWarnings(""String_Node_Str"") public boolean removeAll(Collection<?> collection){
  List<Integer> indices=getIndices(collection);
  fireRemovedEvent(null,new ArrayList(collection),indices,true);
  if (this.list == null) {
    return false;
  }
  boolean modified=false;
  for (int i=indices.size(); --i >= 0; ) {
    this.list.remove((int)indices.get(i));
    modified=true;
  }
  if (modified) {
    fireRemovedEvent(null,new ArrayList(collection),indices,false);
  }
  return modified;
}","public boolean removeAll(Collection<?> collection,boolean fireBefore,boolean fireAfter){
  List<Integer> indices=getIndices(collection);
  if (fireBefore) {
    fireRemovedEvent(null,new ArrayList(collection),indices,true);
  }
  if (this.list == null) {
    return false;
  }
  boolean modified=false;
  for (int i=indices.size(); --i >= 0; ) {
    this.list.remove((int)indices.get(i));
    modified=true;
  }
  if (modified && fireAfter) {
    fireRemovedEvent(null,new ArrayList(collection),indices,false);
  }
  return modified;
}",0.7116279069767442
128286,"/** 
 * Sets the useEquals.
 * @param useEquals the useEquals to set
 */
public void setUseEquals(boolean useEquals){
  this.useEquals=useEquals;
}","/** 
 * Sets the useEquals.
 * @param useEquals the useEquals to set
 */
@Override public void setUseEquals(boolean useEquals){
  this.useEquals=useEquals;
}",0.9671052631578948
128287,"public T get(int index){
  return this.list.get(index);
}","@Override public T get(int index){
  return this.list.get(index);
}",0.9193548387096774
128288,"@SuppressWarnings(""String_Node_Str"") public <T>T[] toArray(T[] a){
  if (this.list != null) {
    return this.list.toArray(a);
  }
 else {
    return (T[])new Object[0];
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T[] toArray(T[] a){
  if (this.list != null) {
    return this.list.toArray(a);
  }
 else {
    return (T[])new Object[0];
  }
}",0.9722222222222222
128289,"public boolean hasPrevious(){
  return internalListIterator.hasPrevious();
}","@Override public boolean hasPrevious(){
  return internalListIterator.hasPrevious();
}",0.9382716049382716
128290,"/** 
 * Returns the position of the first occurrence of the object in the list. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return the position of the first occurrence of the object in the list.
 */
public int indexOf(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    for (int i=0; i < size; ++i) {
      if (object.equals(this.list.get(i))) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < size; ++i) {
      if (this.list.get(i) == object) {
        return i;
      }
    }
  }
  return -1;
}","/** 
 * Returns the position of the first occurrence of the object in the list. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return the position of the first occurrence of the object in the list.
 */
@Override public int indexOf(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    for (int i=0; i < size; ++i) {
      if (object.equals(this.list.get(i))) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < size; ++i) {
      if (this.list.get(i) == object) {
        return i;
      }
    }
  }
  return -1;
}",0.9925373134328358
128291,"public void add(T o){
  internalListIterator.add(o);
  fireAddedEvent(internalListIterator.previousIndex(),o,false);
}","@Override public void add(T o){
  internalListIterator.add(o);
  fireAddedEvent(internalListIterator.previousIndex(),o,false);
}",0.959349593495935
128292,"public List<T> subList(int fromIndex,int toIndex){
  if (this.list != null) {
    return this.list.subList(fromIndex,toIndex);
  }
 else {
    return null;
  }
}","@Override public List<T> subList(int fromIndex,int toIndex){
  if (this.list != null) {
    return this.list.subList(fromIndex,toIndex);
  }
 else {
    return null;
  }
}",0.9698795180722892
128293,"public T set(int index,T element){
  fireReplacedEvent(index,null,element,true);
  T replacedObject=this.list.set(index,element);
  fireReplacedEvent(index,replacedObject,element,false);
  return replacedObject;
}","@Override public T set(int index,T element){
  fireReplacedEvent(index,null,element,true);
  T replacedObject=this.list.set(index,element);
  fireReplacedEvent(index,replacedObject,element,false);
  return replacedObject;
}",0.9770642201834864
128294,"public T previous(){
  current=internalListIterator.previous();
  return current;
}","@Override public T previous(){
  current=internalListIterator.previous();
  return current;
}",0.9431818181818182
128295,"public void swap(int index1,int index2){
  ArrayList<Integer> indexList1=new ArrayList<Integer>(1);
  ArrayList<Integer> indexList2=new ArrayList<Integer>(1);
  if (beforeListeners.size() != 0) {
    fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},true);
  }
  internalSwap(index1,index2);
  indexList1.add(index1);
  indexList2.add(index2);
  fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},false);
}","@Override public void swap(int index1,int index2){
  ArrayList<Integer> indexList1=new ArrayList<Integer>(1);
  ArrayList<Integer> indexList2=new ArrayList<Integer>(1);
  if (beforeListeners.size() != 0) {
    fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},true);
  }
  internalSwap(index1,index2);
  indexList1.add(index1);
  indexList2.add(index2);
  fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},false);
}",0.9900398406374502
128296,"public boolean containsAll(Collection<?> c){
  return this.list.containsAll(c);
}","@Override public boolean containsAll(Collection<?> c){
  return this.list.containsAll(c);
}",0.9418604651162792
128297,"public void clear(){
  fireClearedEvent(true);
  this.list.clear();
  fireClearedEvent(false);
}","@Override public void clear(){
  fireClearedEvent(true);
  this.list.clear();
  fireClearedEvent(false);
}",0.9504950495049505
128298,"public boolean isEmpty(){
  return this.list.isEmpty();
}","@Override public boolean isEmpty(){
  return this.list.isEmpty();
}",0.9193548387096774
128299,"public boolean hasNext(){
  return internalListIterator.hasNext();
}","@Override public boolean hasNext(){
  return internalListIterator.hasNext();
}",0.9315068493150684
128300,"public int lastIndexOf(Object o){
  return this.list.lastIndexOf(o);
}","@Override public int lastIndexOf(Object o){
  return this.list.lastIndexOf(o);
}",0.9333333333333332
128301,"/** 
 * Getter for useEquals.
 * @return the useEquals
 */
public boolean isUseEquals(){
  return this.useEquals;
}","/** 
 * Getter for useEquals.
 * @return the useEquals
 */
@Override public boolean isUseEquals(){
  return this.useEquals;
}",0.9583333333333334
128302,"/** 
 * Returns whether the list contains the object. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return whether the list contains the object.
 * @see #useEquals
 */
public boolean contains(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    return this.list.contains(object);
  }
 else {
    for (int i=0; i < size; ++i) {
      if (list.get(i) == object) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns whether the list contains the object. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return whether the list contains the object.
 * @see #useEquals
 */
@Override public boolean contains(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    return this.list.contains(object);
  }
 else {
    for (int i=0; i < size; ++i) {
      if (list.get(i) == object) {
        return true;
      }
    }
  }
  return false;
}",0.9912280701754386
128303,"public int size(){
  if (this.list != null) {
    return this.list.size();
  }
 else {
    return 0;
  }
}","@Override public int size(){
  if (this.list != null) {
    return this.list.size();
  }
 else {
    return 0;
  }
}",0.954954954954955
128304,"/** 
 */
@SuppressWarnings(""String_Node_Str"") public void addAll(List<Integer> indices,Collection<? extends T> c){
  fireAddedEvent(null,(Collection<T>)c,indices,true);
  Iterator<Integer> iterIndice=indices.iterator();
  for (  T t : c) {
    Integer indice=null;
    if (iterIndice.hasNext()) {
      indice=iterIndice.next();
    }
    if (indice != null) {
      this.list.add(indice,t);
    }
 else {
      this.list.add(t);
    }
  }
  fireAddedEvent(null,(Collection<T>)c,indices,false);
}","/** 
 */
@Override @SuppressWarnings(""String_Node_Str"") public void addAll(List<Integer> indices,Collection<? extends T> c){
  fireAddedEvent(null,(Collection<T>)c,indices,true);
  Iterator<Integer> iterIndice=indices.iterator();
  for (  T t : c) {
    Integer indice=null;
    if (iterIndice.hasNext()) {
      indice=iterIndice.next();
    }
    if (indice != null) {
      this.list.add(indice,t);
    }
 else {
      this.list.add(t);
    }
  }
  fireAddedEvent(null,(Collection<T>)c,indices,false);
}",0.9900199600798404
128305,"public ListIterator<T> listIterator(int index){
  return this.list.listIterator(index);
}","@Override public ListIterator<T> listIterator(int index){
  return this.list.listIterator(index);
}",0.946808510638298
128306,"public int previousIndex(){
  return internalListIterator.previousIndex();
}","@Override public int previousIndex(){
  return internalListIterator.previousIndex();
}",0.9382716049382716
128307,"public boolean retainAll(Collection<?> c){
  List<T> all=new ArrayList<T>();
  all.addAll(this.list);
  boolean isListChanged=this.list.retainAll(c);
  if (isListChanged) {
    int size=all.size();
    List<T> removedObjects=new ArrayList<T>();
    for (int i=0; i < size; i++) {
      T removedObject=all.get(i);
      if (indexOf(removedObject) < 0) {
        removedObjects.add(removedObject);
      }
    }
    fireRemovedEvent(null,removedObjects,null,false);
  }
  return isListChanged;
}","@Override public boolean retainAll(Collection<?> c){
  List<T> all=new ArrayList<T>();
  all.addAll(this.list);
  boolean isListChanged=this.list.retainAll(c);
  if (isListChanged) {
    int size=all.size();
    List<T> removedObjects=new ArrayList<T>();
    for (int i=0; i < size; i++) {
      T removedObject=all.get(i);
      if (indexOf(removedObject) < 0) {
        removedObjects.add(removedObject);
      }
    }
    fireRemovedEvent(null,removedObjects,null,false);
  }
  return isListChanged;
}",0.9899799599198396
128308,"/** 
 * Open an Error dialog with a details area (title = ""Error Message"").
 * @param shell
 * @param String (Product ID -> Activator.PLUGIN_ID)
 * @param mainMessage
 * @param detailMessage (\n an \t are interpreted ; \r are deleted)
 */
public ErrorDialogWidthDetailArea(Shell shell,String pid,String mainMessage,String detailMessage){
  MultiStatus info=new MultiStatus(pid,1,mainMessage,null);
  if (detailMessage != null) {
    String[] lines=detailMessage.split(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      info.add(new Status(IStatus.INFO,pid,1,lines[i].replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""),null));
    }
  }
  codeOfButton=ErrorDialog.openError(shell,Messages.getString(""String_Node_Str""),null,info);
}","public ErrorDialogWidthDetailArea(Shell shell,String pid,String mainMessage,String detailMessage,int status){
  MultiStatus info=new MultiStatus(pid,1,mainMessage,null);
  if (detailMessage != null) {
    String[] lines=detailMessage.split(""String_Node_Str"");
    for (    String line : lines) {
      info.add(new Status(status,pid,1,line.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""),null));
    }
  }
  codeOfButton=ErrorDialog.openError(shell,Messages.getString(""String_Node_Str""),null,info);
}",0.7367636092468307
128309,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(template.getDBDisplayName())) {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
        s=template.getUrlTemplate(version);
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase) {
      urlConnectionStringText.setVisible(false);
    }
    hideHBaseSettings(!isHbase);
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        addContextParams(EDBParamName.Server,visible);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
        addContextParams(EDBParamName.Port,visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            sidOrDatabaseText.hide();
            sidOrDatabaseText.setEditable(false);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            sidOrDatabaseText.show();
            sidOrDatabaseText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        usernameText.hide();
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(template.getDBDisplayName())) {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
        s=template.getUrlTemplate(version);
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_RAC)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_RAC)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHBaseSettings(!isHbase);
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        addContextParams(EDBParamName.Server,visible);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
        addContextParams(EDBParamName.Port,visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            sidOrDatabaseText.hide();
            sidOrDatabaseText.setEditable(false);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            sidOrDatabaseText.show();
            sidOrDatabaseText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        usernameText.hide();
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.986434184291802
128310,"/** 
 * Open an Error dialog with a details area (title = ""Error Message"").
 * @param shell
 * @param String (Product ID -> Activator.PLUGIN_ID)
 * @param mainMessage
 * @param detailMessage (\n an \t are interpreted ; \r are deleted)
 */
public ErrorDialogWidthDetailArea(Shell shell,String pid,String mainMessage,String detailMessage){
  MultiStatus info=new MultiStatus(pid,1,mainMessage,null);
  if (detailMessage != null) {
    String[] lines=detailMessage.split(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      info.add(new Status(IStatus.INFO,pid,1,lines[i].replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""),null));
    }
  }
  codeOfButton=ErrorDialog.openError(shell,Messages.getString(""String_Node_Str""),null,info);
}","public ErrorDialogWidthDetailArea(Shell shell,String pid,String mainMessage,String detailMessage,int status){
  MultiStatus info=new MultiStatus(pid,1,mainMessage,null);
  if (detailMessage != null) {
    String[] lines=detailMessage.split(""String_Node_Str"");
    for (    String line : lines) {
      info.add(new Status(status,pid,1,line.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""),null));
    }
  }
  codeOfButton=ErrorDialog.openError(shell,Messages.getString(""String_Node_Str""),null,info);
}",0.7367636092468307
128311,"public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    if (!(""String_Node_Str"").equals(newValue)) {
      text.setText(newValue);
    }
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
}","public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    if (!(""String_Node_Str"").equals(newValue)) {
      text.setText(newValue);
    }
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(""String_Node_Str"");
    text.setSelection(selection.x,selection.y);
  }
}",0.9853027630805408
128312,"protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            if (!(""String_Node_Str"").equals(newValue)) {
              text.setText(newValue);
            }
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}","protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            if (!(""String_Node_Str"").equals(newValue)) {
              text.setText(newValue);
            }
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(""String_Node_Str"");
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}",0.9940856399337592
128313,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
      s=template.getUrlTemplate(version);
    }
    if (isHbase) {
      urlConnectionStringText.setVisible(false);
    }
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      serverText.hide();
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      portText.hide();
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        sidOrDatabaseText.show();
        sidOrDatabaseText.setEditable(visible);
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
  }
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
      s=template.getUrlTemplate(version);
    }
    if (isHbase || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_RAC)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_RAC)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      serverText.hide();
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      portText.hide();
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        sidOrDatabaseText.show();
        sidOrDatabaseText.setEditable(visible);
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
  }
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.9829358249323826
128314,"public static Image getComponentIcon(IComponent component,ICON_SIZE iconSize){
  if (component != null && iconSize != null) {
    String name=component.getName();
    Image image=null;
    if (iconSize == ICON_SIZE.ICON_32 && CorePlugin.getDefault().getDesignerCoreService().isDummyComponent(component)) {
      image=component.getIcon32().createImage();
    }
 else {
      image=(Image)componentCachedImages.get(name,iconSize);
    }
    if (image == null || image.isDisposed()) {
      ImageDescriptor icon=null;
switch (iconSize) {
case ICON_16:
        icon=component.getIcon16();
case ICON_24:
      icon=component.getIcon24();
case ICON_32:
default :
    icon=component.getIcon32();
}
if (icon == null) {
  icon=component.getIcon32();
}
image=icon.createImage();
componentCachedImages.put(name,iconSize,image);
}
return image;
}
return null;
}","public static Image getComponentIcon(IComponent component,ICON_SIZE iconSize){
  if (component != null && iconSize != null) {
    String name=component.getName();
    Image image=null;
    if (iconSize == ICON_SIZE.ICON_32 && CorePlugin.getDefault().getDesignerCoreService().isDummyComponent(component)) {
      image=component.getIcon32().createImage();
    }
 else {
      image=(Image)componentCachedImages.get(name,iconSize);
    }
    if (image == null || image.isDisposed()) {
      ImageDescriptor icon=null;
switch (iconSize) {
case ICON_16:
        icon=component.getIcon16();
      break;
case ICON_24:
    icon=component.getIcon24();
  break;
case ICON_32:
default :
icon=component.getIcon32();
}
if (icon == null) {
icon=component.getIcon32();
}
image=icon.createImage();
componentCachedImages.put(name,iconSize,image);
}
return image;
}
return null;
}",0.9824970828471412
128315,"public int compare(IConnection connection1,IConnection connection2){
  EConnectionType lineStyle=connection1.getLineStyle();
  EConnectionType lineStyle2=connection2.getLineStyle();
  if (""String_Node_Str"".equals(connection1.getConnectorName())) {
    return -1;
  }
  if (""String_Node_Str"".equals(connection2.getConnectorName())) {
    return 1;
  }
  if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
    return -1;
  }
  if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
    return 1;
  }
  return 0;
}","@Override public int compare(IConnection connection1,IConnection connection2){
  EConnectionType lineStyle=connection1.getLineStyle();
  EConnectionType lineStyle2=connection2.getLineStyle();
  if (""String_Node_Str"".equals(connection1.getConnectorName())) {
    return -1;
  }
  if (""String_Node_Str"".equals(connection2.getConnectorName())) {
    return 1;
  }
  if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
    return -1;
  }
  if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
    return 1;
  }
  return 0;
}",0.9915254237288136
128316,"/** 
 * DOC jyhu <p> function:get the node from generating nodes by unique name. aim:to get the property value from any node. </p> Notice: It is used to get property values from the pointed node.
 * @param node:node from the job @param uniqueName:the unique name of the pointed node.
 * @return 
 */
public static INode getNodeByUniqueName(final IProcess process,String uniqueName){
  List<INode> nodes=(List<INode>)process.getGeneratingNodes();
  INode return_node=null;
  for (  INode current_node : nodes) {
    if (uniqueName.equals(current_node.getUniqueName())) {
      return_node=current_node;
    }
  }
  return return_node;
}","/** 
 * DOC jyhu <p> function:get the node from generating nodes by unique name. aim:to get the property value from any node. </p> Notice: It is used to get property values from the pointed node.
 * @param node:node from the job @param uniqueName:the unique name of the pointed node.
 * @return
 */
public static INode getNodeByUniqueName(final IProcess process,String uniqueName){
  List<INode> nodes=(List<INode>)process.getGeneratingNodes();
  INode return_node=null;
  for (  INode current_node : nodes) {
    if (uniqueName.equals(current_node.getUniqueName())) {
      return_node=current_node;
    }
  }
  return return_node;
}",0.9992119779353822
128317,"/** 
 * DOC sort the outgoingconnections to make sure the first connection is EConnectionType.FLOW_MAIN or EConnectionType.FLOW_REF<br/> <p> bug:9363, if a component have 2 output links, <li>""EConnectionType.FLOW_MAIN(FLOW), EConnectionType.FLOW_REF(REJECT)""</li> <li>""EConnectionType.FLOW_MAIN(REJECT), EConnectionType.FLOW_REF(FLOW)""</li>, make FLOW before ""REJECT"" </p>
 * @param node
 * @return List<? extends IConnection>
 */
public static List<? extends IConnection> getOutgoingCamelSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      public int compare(      IConnection o1,      IConnection o2){
        if (EConnectionType.ROUTE_WHEN == o1.getLineStyle()) {
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 1;
          }
          return -1;
        }
        if (EConnectionType.ROUTE_OTHER == o1.getLineStyle())         if (EConnectionType.ROUTE_WHEN == o2.getLineStyle())         return 1;
        if (EConnectionType.ROUTE_ENDBLOCK == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle() || EConnectionType.ROUTE_OTHER == o2.getLineStyle())           return 2;
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle() || EConnectionType.ROUTE_FINALLY == o2.getLineStyle())           return 3;
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 4;
          }
        }
        if (EConnectionType.ROUTE_TRY == o1.getLineStyle())         return -1;
        if (EConnectionType.ROUTE_CATCH == o1.getLineStyle())         if (EConnectionType.ROUTE_TRY == o2.getLineStyle())         return 1;
        if (EConnectionType.ROUTE_FINALLY == o1.getLineStyle())         if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle())         return 2;
        return 0;
      }
    }
);
  }
  return conns;
}","/** 
 * DOC sort the outgoingconnections to make sure the first connection is EConnectionType.FLOW_MAIN or EConnectionType.FLOW_REF<br/> <p> bug:9363, if a component have 2 output links, <li>""EConnectionType.FLOW_MAIN(FLOW), EConnectionType.FLOW_REF(REJECT)""</li> <li>""EConnectionType.FLOW_MAIN(REJECT), EConnectionType.FLOW_REF(FLOW)""</li>, make FLOW before ""REJECT"" </p>
 * @param node
 * @return List<? extends IConnection>
 */
public static List<? extends IConnection> getOutgoingCamelSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      @Override public int compare(      IConnection o1,      IConnection o2){
        if (EConnectionType.ROUTE_WHEN == o1.getLineStyle()) {
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 1;
          }
          return -1;
        }
        if (EConnectionType.ROUTE_OTHER == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle()) {
            return 1;
          }
        }
        if (EConnectionType.ROUTE_ENDBLOCK == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle() || EConnectionType.ROUTE_OTHER == o2.getLineStyle()) {
            return 2;
          }
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle() || EConnectionType.ROUTE_FINALLY == o2.getLineStyle()) {
            return 3;
          }
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 4;
          }
        }
        if (EConnectionType.ROUTE_TRY == o1.getLineStyle()) {
          return -1;
        }
        if (EConnectionType.ROUTE_CATCH == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle()) {
            return 1;
          }
        }
        if (EConnectionType.ROUTE_FINALLY == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle()) {
            return 2;
          }
        }
        return 0;
      }
    }
);
  }
  return conns;
}",0.9658273381294964
128318,"public static boolean checkConnectionAfterNode(INode node,EConnectionType connectionType,List<INode> checkedNodes){
  if (checkedNodes.contains(node)) {
    return false;
  }
 else {
    checkedNodes.add(node);
  }
  boolean result=false;
  List<? extends IConnection> onErrorConns=getOutgoingConnections(node,EConnectionType.ON_COMPONENT_ERROR);
  if (onErrorConns == null || onErrorConns.size() == 0) {
    List<? extends IConnection> conns=getOutgoingSortedConnections(node);
    if (conns != null && conns.size() > 0) {
      for (      IConnection conn : conns) {
        result=checkConnectionAfterNode(conn.getTarget(),EConnectionType.ON_COMPONENT_ERROR,checkedNodes);
        if (result) {
          break;
        }
      }
    }
 else {
      result=false;
    }
  }
 else {
    result=true;
  }
  return result;
}","public static boolean checkConnectionAfterNode(INode node,EConnectionType connectionType,List<INode> checkedNodes){
  if (checkedNodes.contains(node)) {
    return false;
  }
 else {
    checkedNodes.add(node);
  }
  boolean result=false;
  List<? extends IConnection> outConns=getOutgoingConnections(node,connectionType);
  if (outConns == null || outConns.size() == 0) {
    List<? extends IConnection> conns=getOutgoingSortedConnections(node);
    if (conns != null && conns.size() > 0) {
      for (      IConnection conn : conns) {
        result=checkConnectionAfterNode(conn.getTarget(),connectionType,checkedNodes);
        if (result) {
          break;
        }
      }
    }
 else {
      result=false;
    }
  }
 else {
    result=true;
  }
  return result;
}",0.7418546365914787
128319,"public static List<? extends IConnection> getOutgoingSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      public int compare(      IConnection connection1,      IConnection connection2){
        EConnectionType lineStyle=connection1.getLineStyle();
        EConnectionType lineStyle2=connection2.getLineStyle();
        if (""String_Node_Str"".equals(connection1.getConnectorName())) {
          return -1;
        }
        if (""String_Node_Str"".equals(connection2.getConnectorName())) {
          return 1;
        }
        if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
          return -1;
        }
        if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
          return 1;
        }
        return 0;
      }
    }
);
  }
  return conns;
}","public static List<? extends IConnection> getOutgoingSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      @Override public int compare(      IConnection connection1,      IConnection connection2){
        EConnectionType lineStyle=connection1.getLineStyle();
        EConnectionType lineStyle2=connection2.getLineStyle();
        if (""String_Node_Str"".equals(connection1.getConnectorName())) {
          return -1;
        }
        if (""String_Node_Str"".equals(connection2.getConnectorName())) {
          return 1;
        }
        if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
          return -1;
        }
        if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
          return 1;
        }
        return 0;
      }
    }
);
  }
  return conns;
}",0.9953959484346224
128320,"public XSDSchema getXSDSchema(String fileName) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}","public XSDSchema getXSDSchema(String fileName,boolean forceReload) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (forceReload || haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}",0.988306047444036
128321,"public static List<FOXTreeNode> getFoxTreeNodesByRootNode(XSDSchema xsdSchema,ATreeNode selectedRootNode,boolean resolved,boolean supportChoice,boolean supportSubstitution){
  List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
  if (xsdSchema == null || selectedRootNode == null) {
    return list;
  }
  ATreeNode treeNode=null;
  try {
    if (resolved) {
      treeNode=selectedRootNode;
    }
 else {
      treeNode=SchemaPopulationUtil.getSchemaTree(xsdSchema,selectedRootNode,supportChoice,supportSubstitution);
    }
    if (treeNode == null) {
      return list;
    }
    String rootName=""String_Node_Str"";
    if (treeNode.getValue() instanceof String) {
      rootName+=""String_Node_Str"" + treeNode.getValue();
    }
    FOXTreeNode root=cloneATreeNode(treeNode,rootName);
    if (root instanceof Element) {
      root.setParent(null);
      list.add(root);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return list;
}","public static List<FOXTreeNode> getFoxTreeNodesByRootNode(XSDSchema xsdSchema,ATreeNode selectedRootNode,boolean resolved,boolean supportChoice,boolean supportSubstitution){
  return getFoxTreeNodesByRootNode(null,xsdSchema,selectedRootNode,resolved,supportChoice,supportSubstitution);
}",0.2937399678972712
128322,"public XSDSchema getXSDSchema(String fileName) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}","public XSDSchema getXSDSchema(String fileName,boolean forceReload) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (forceReload || haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}",0.988306047444036
128323,"public T next(){
  current=internalListIterator.next();
  return current;
}","@Override public T next(){
  current=internalListIterator.next();
  return current;
}",0.9375
128324,"public void swapElement(T object1,T object2){
  swap(indexOf(object1),indexOf(object2));
}","@Override public void swapElement(T object1,T object2){
  swap(indexOf(object1),indexOf(object2));
}",0.9473684210526316
128325,"public int nextIndex(){
  return internalListIterator.nextIndex();
}","@Override public int nextIndex(){
  return internalListIterator.nextIndex();
}",0.9315068493150684
128326,"public T remove(int index){
  fireBeforeRemovedEvent(index);
  T removedObject=this.list.remove(index);
  fireRemovedEvent(index,removedObject);
  return removedObject;
}","@Override public T remove(int index){
  fireBeforeRemovedEvent(index);
  T removedObject=this.list.remove(index);
  fireRemovedEvent(index,removedObject);
  return removedObject;
}",0.9714285714285714
128327,"private void fireBeforeRemovedEvent(int index){
  if (beforeListeners.size() != 0) {
    T removingObject=this.list.get(index);
    List<T> currentList=new ArrayList<T>(1);
    currentList.add((T)removingObject);
    fireRemovedEvent(index,currentList,null,true);
  }
}","private void fireBeforeRemovedEvent(int index){
  if (beforeListeners.size() != 0) {
    T removingObject=this.list.get(index);
    List<T> currentList=new ArrayList<T>(1);
    currentList.add(removingObject);
    fireRemovedEvent(index,currentList,null,true);
  }
}",0.994392523364486
128328,"public void swapElements(List<Integer> indicesOrigin,List<Integer> indicesTarget){
  if (indicesOrigin.size() != indicesTarget.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  ArrayList<T> swapedObjects=new ArrayList<T>();
  fireSwapedEvent(indicesOrigin,indicesTarget,null,true);
  int lstSize=indicesOrigin.size();
  for (int i=0; i < lstSize; i++) {
    Integer idxOrigin=indicesOrigin.get(i);
    Integer idxDestination=indicesTarget.get(i);
    swapedObjects.add(list.get(idxOrigin));
    swapedObjects.add(list.get(idxDestination));
    internalSwap(idxOrigin,idxDestination);
  }
  fireSwapedEvent(indicesOrigin,indicesTarget,swapedObjects.toArray(),false);
}","@Override public void swapElements(List<Integer> indicesOrigin,List<Integer> indicesTarget){
  if (indicesOrigin.size() != indicesTarget.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  ArrayList<T> swapedObjects=new ArrayList<T>();
  fireSwapedEvent(indicesOrigin,indicesTarget,null,true);
  int lstSize=indicesOrigin.size();
  for (int i=0; i < lstSize; i++) {
    Integer idxOrigin=indicesOrigin.get(i);
    Integer idxDestination=indicesTarget.get(i);
    swapedObjects.add(list.get(idxOrigin));
    swapedObjects.add(list.get(idxDestination));
    internalSwap(idxOrigin,idxDestination);
  }
  fireSwapedEvent(indicesOrigin,indicesTarget,swapedObjects.toArray(),false);
}",0.99302649930265
128329,"public Iterator<T> iterator(){
  return new Iterator<T>(){
    private Iterator<T> internalIterator=list.iterator();
    private T current=null;
    public boolean hasNext(){
      return internalIterator.hasNext();
    }
    public T next(){
      current=internalIterator.next();
      return current;
    }
    public void remove(){
      Integer indexBeforeRemove=indexOf(current);
      fireBeforeRemovedEvent(indexBeforeRemove);
      internalIterator.remove();
      fireRemovedEvent(indexBeforeRemove,current);
    }
  }
;
}","@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    private Iterator<T> internalIterator=list.iterator();
    private T current=null;
    @Override public boolean hasNext(){
      return internalIterator.hasNext();
    }
    @Override public T next(){
      current=internalIterator.next();
      return current;
    }
    @Override public void remove(){
      Integer indexBeforeRemove=indexOf(current);
      fireBeforeRemovedEvent(indexBeforeRemove);
      internalIterator.remove();
      fireRemovedEvent(indexBeforeRemove,current);
    }
  }
;
}",0.9637681159420288
128330,"/** 
 * Removes each object of the collection from the list and returns whether any object was actually contained by the list.
 * @param collection the collection of objects to be removed.
 * @return whether any object was actually contained by the list.
 */
@SuppressWarnings(""String_Node_Str"") public boolean removeAll(Collection<?> collection){
  List<Integer> indices=getIndices(collection);
  fireRemovedEvent(null,new ArrayList(collection),indices,true);
  if (this.list == null) {
    return false;
  }
  boolean modified=false;
  for (int i=indices.size(); --i >= 0; ) {
    this.list.remove((int)indices.get(i));
    modified=true;
  }
  if (modified) {
    fireRemovedEvent(null,new ArrayList(collection),indices,false);
  }
  return modified;
}","public boolean removeAll(Collection<?> collection,boolean fireBefore,boolean fireAfter){
  List<Integer> indices=getIndices(collection);
  if (fireBefore) {
    fireRemovedEvent(null,new ArrayList(collection),indices,true);
  }
  if (this.list == null) {
    return false;
  }
  boolean modified=false;
  for (int i=indices.size(); --i >= 0; ) {
    this.list.remove((int)indices.get(i));
    modified=true;
  }
  if (modified && fireAfter) {
    fireRemovedEvent(null,new ArrayList(collection),indices,false);
  }
  return modified;
}",0.7116279069767442
128331,"/** 
 * Sets the useEquals.
 * @param useEquals the useEquals to set
 */
public void setUseEquals(boolean useEquals){
  this.useEquals=useEquals;
}","/** 
 * Sets the useEquals.
 * @param useEquals the useEquals to set
 */
@Override public void setUseEquals(boolean useEquals){
  this.useEquals=useEquals;
}",0.9671052631578948
128332,"public T get(int index){
  return this.list.get(index);
}","@Override public T get(int index){
  return this.list.get(index);
}",0.9193548387096774
128333,"@SuppressWarnings(""String_Node_Str"") public <T>T[] toArray(T[] a){
  if (this.list != null) {
    return this.list.toArray(a);
  }
 else {
    return (T[])new Object[0];
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T[] toArray(T[] a){
  if (this.list != null) {
    return this.list.toArray(a);
  }
 else {
    return (T[])new Object[0];
  }
}",0.9722222222222222
128334,"public boolean hasPrevious(){
  return internalListIterator.hasPrevious();
}","@Override public boolean hasPrevious(){
  return internalListIterator.hasPrevious();
}",0.9382716049382716
128335,"/** 
 * Returns the position of the first occurrence of the object in the list. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return the position of the first occurrence of the object in the list.
 */
public int indexOf(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    for (int i=0; i < size; ++i) {
      if (object.equals(this.list.get(i))) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < size; ++i) {
      if (this.list.get(i) == object) {
        return i;
      }
    }
  }
  return -1;
}","/** 
 * Returns the position of the first occurrence of the object in the list. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return the position of the first occurrence of the object in the list.
 */
@Override public int indexOf(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    for (int i=0; i < size; ++i) {
      if (object.equals(this.list.get(i))) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < size; ++i) {
      if (this.list.get(i) == object) {
        return i;
      }
    }
  }
  return -1;
}",0.9925373134328358
128336,"public void add(T o){
  internalListIterator.add(o);
  fireAddedEvent(internalListIterator.previousIndex(),o,false);
}","@Override public void add(T o){
  internalListIterator.add(o);
  fireAddedEvent(internalListIterator.previousIndex(),o,false);
}",0.959349593495935
128337,"public List<T> subList(int fromIndex,int toIndex){
  if (this.list != null) {
    return this.list.subList(fromIndex,toIndex);
  }
 else {
    return null;
  }
}","@Override public List<T> subList(int fromIndex,int toIndex){
  if (this.list != null) {
    return this.list.subList(fromIndex,toIndex);
  }
 else {
    return null;
  }
}",0.9698795180722892
128338,"public T set(int index,T element){
  fireReplacedEvent(index,null,element,true);
  T replacedObject=this.list.set(index,element);
  fireReplacedEvent(index,replacedObject,element,false);
  return replacedObject;
}","@Override public T set(int index,T element){
  fireReplacedEvent(index,null,element,true);
  T replacedObject=this.list.set(index,element);
  fireReplacedEvent(index,replacedObject,element,false);
  return replacedObject;
}",0.9770642201834864
128339,"public T previous(){
  current=internalListIterator.previous();
  return current;
}","@Override public T previous(){
  current=internalListIterator.previous();
  return current;
}",0.9431818181818182
128340,"public void swap(int index1,int index2){
  ArrayList<Integer> indexList1=new ArrayList<Integer>(1);
  ArrayList<Integer> indexList2=new ArrayList<Integer>(1);
  if (beforeListeners.size() != 0) {
    fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},true);
  }
  internalSwap(index1,index2);
  indexList1.add(index1);
  indexList2.add(index2);
  fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},false);
}","@Override public void swap(int index1,int index2){
  ArrayList<Integer> indexList1=new ArrayList<Integer>(1);
  ArrayList<Integer> indexList2=new ArrayList<Integer>(1);
  if (beforeListeners.size() != 0) {
    fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},true);
  }
  internalSwap(index1,index2);
  indexList1.add(index1);
  indexList2.add(index2);
  fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},false);
}",0.9900398406374502
128341,"public boolean containsAll(Collection<?> c){
  return this.list.containsAll(c);
}","@Override public boolean containsAll(Collection<?> c){
  return this.list.containsAll(c);
}",0.9418604651162792
128342,"public void clear(){
  fireClearedEvent(true);
  this.list.clear();
  fireClearedEvent(false);
}","@Override public void clear(){
  fireClearedEvent(true);
  this.list.clear();
  fireClearedEvent(false);
}",0.9504950495049505
128343,"public boolean isEmpty(){
  return this.list.isEmpty();
}","@Override public boolean isEmpty(){
  return this.list.isEmpty();
}",0.9193548387096774
128344,"public boolean hasNext(){
  return internalListIterator.hasNext();
}","@Override public boolean hasNext(){
  return internalListIterator.hasNext();
}",0.9315068493150684
128345,"public int lastIndexOf(Object o){
  return this.list.lastIndexOf(o);
}","@Override public int lastIndexOf(Object o){
  return this.list.lastIndexOf(o);
}",0.9333333333333332
128346,"/** 
 * Getter for useEquals.
 * @return the useEquals
 */
public boolean isUseEquals(){
  return this.useEquals;
}","/** 
 * Getter for useEquals.
 * @return the useEquals
 */
@Override public boolean isUseEquals(){
  return this.useEquals;
}",0.9583333333333334
128347,"/** 
 * Returns whether the list contains the object. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return whether the list contains the object.
 * @see #useEquals
 */
public boolean contains(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    return this.list.contains(object);
  }
 else {
    for (int i=0; i < size; ++i) {
      if (list.get(i) == object) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns whether the list contains the object. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return whether the list contains the object.
 * @see #useEquals
 */
@Override public boolean contains(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    return this.list.contains(object);
  }
 else {
    for (int i=0; i < size; ++i) {
      if (list.get(i) == object) {
        return true;
      }
    }
  }
  return false;
}",0.9912280701754386
128348,"public int size(){
  if (this.list != null) {
    return this.list.size();
  }
 else {
    return 0;
  }
}","@Override public int size(){
  if (this.list != null) {
    return this.list.size();
  }
 else {
    return 0;
  }
}",0.954954954954955
128349,"/** 
 */
@SuppressWarnings(""String_Node_Str"") public void addAll(List<Integer> indices,Collection<? extends T> c){
  fireAddedEvent(null,(Collection<T>)c,indices,true);
  Iterator<Integer> iterIndice=indices.iterator();
  for (  T t : c) {
    Integer indice=null;
    if (iterIndice.hasNext()) {
      indice=iterIndice.next();
    }
    if (indice != null) {
      this.list.add(indice,t);
    }
 else {
      this.list.add(t);
    }
  }
  fireAddedEvent(null,(Collection<T>)c,indices,false);
}","/** 
 */
@Override @SuppressWarnings(""String_Node_Str"") public void addAll(List<Integer> indices,Collection<? extends T> c){
  fireAddedEvent(null,(Collection<T>)c,indices,true);
  Iterator<Integer> iterIndice=indices.iterator();
  for (  T t : c) {
    Integer indice=null;
    if (iterIndice.hasNext()) {
      indice=iterIndice.next();
    }
    if (indice != null) {
      this.list.add(indice,t);
    }
 else {
      this.list.add(t);
    }
  }
  fireAddedEvent(null,(Collection<T>)c,indices,false);
}",0.9900199600798404
128350,"public ListIterator<T> listIterator(int index){
  return this.list.listIterator(index);
}","@Override public ListIterator<T> listIterator(int index){
  return this.list.listIterator(index);
}",0.946808510638298
128351,"public int previousIndex(){
  return internalListIterator.previousIndex();
}","@Override public int previousIndex(){
  return internalListIterator.previousIndex();
}",0.9382716049382716
128352,"public boolean retainAll(Collection<?> c){
  List<T> all=new ArrayList<T>();
  all.addAll(this.list);
  boolean isListChanged=this.list.retainAll(c);
  if (isListChanged) {
    int size=all.size();
    List<T> removedObjects=new ArrayList<T>();
    for (int i=0; i < size; i++) {
      T removedObject=all.get(i);
      if (indexOf(removedObject) < 0) {
        removedObjects.add(removedObject);
      }
    }
    fireRemovedEvent(null,removedObjects,null,false);
  }
  return isListChanged;
}","@Override public boolean retainAll(Collection<?> c){
  List<T> all=new ArrayList<T>();
  all.addAll(this.list);
  boolean isListChanged=this.list.retainAll(c);
  if (isListChanged) {
    int size=all.size();
    List<T> removedObjects=new ArrayList<T>();
    for (int i=0; i < size; i++) {
      T removedObject=all.get(i);
      if (indexOf(removedObject) < 0) {
        removedObjects.add(removedObject);
      }
    }
    fireRemovedEvent(null,removedObjects,null,false);
  }
  return isListChanged;
}",0.9899799599198396
128353,"private static void populateRoot(ATreeNode root,ATreeNode selectedNode){
  Object[] toBeIterated=root.getChildren();
  for (int i=0; i < toBeIterated.length; i++) {
    ATreeNode node=((ATreeNode)toBeIterated[i]);
    Object nodeValue=node.getValue();
    if (nodeValue != null && !nodeValue.equals(selectedNode.getValue()) && !nodeValue.equals(selectedNode.getDataType())) {
      continue;
    }
    Object value=node.getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)toBeIterated[i]).getChildren();
        for (int k=0; k < os.length; k++) {
          if (os[k] instanceof ATreeNode) {
            if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType()))) {
              ((ATreeNode)container.get(j)).addChild(os[k]);
            }
          }
        }
      }
    }
    break;
  }
}","private static void populateRoot(ATreeNode root,ATreeNode selectedNode){
  Object[] toBeIterated=root.getChildren();
  for (  Object element : toBeIterated) {
    ATreeNode node=((ATreeNode)element);
    Object nodeValue=node.getValue();
    if (nodeValue != null && !nodeValue.equals(selectedNode.getValue()) && !nodeValue.equals(selectedNode.getDataType())) {
      continue;
    }
    Object value=node.getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)element).getChildren();
        for (int k=0; k < os.length; k++) {
          if (os[k] instanceof ATreeNode) {
            if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType()))) {
              ((ATreeNode)container.get(j)).addChild(os[k]);
            }
          }
        }
      }
    }
    break;
  }
}",0.7603686635944701
128354,"/** 
 * Return the tree node instance that represents to the ComplexElement that featured by the given value.
 * @param root the tree node from which the search begin
 * @param value the name of the ComplexElement
 * @return
 */
private static ATreeNode findComplexElement(ATreeNode root,String value){
  Object[] os=root.getChildren();
  for (int i=0; i < os.length; i++) {
    if (((ATreeNode)os[i]).getValue().equals(value)) {
      return (ATreeNode)os[i];
    }
  }
  return null;
}","/** 
 * Return the tree node instance that represents to the ComplexElement that featured by the given value.
 * @param root the tree node from which the search begin
 * @param value the name of the ComplexElement
 * @return
 */
private static ATreeNode findComplexElement(ATreeNode root,String value){
  Object[] os=root.getChildren();
  for (  Object element : os) {
    if (((ATreeNode)element).getValue().equals(value)) {
      return (ATreeNode)element;
    }
  }
  return null;
}",0.925925925925926
128355,"public synchronized void wakeup(){
  notify();
}","@Override public synchronized void wakeup(){
  notify();
}",0.9056603773584906
128356,"/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString())) {
    return;
  }
  if (root.getDataType() != null && root.getDataType().equals(value)) {
    container.add(root);
  }
  Object[] children=root.getChildren();
  for (int i=0; i < children.length; i++) {
    if (children[i] instanceof ATreeNode) {
      findNodeWithValue((ATreeNode)children[i],value,container,vr);
    }
  }
}","/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString())) {
    return;
  }
  if (root.getDataType() != null && root.getDataType().equals(value)) {
    container.add(root);
  }
  Object[] children=root.getChildren();
  for (  Object element : children) {
    if (element instanceof ATreeNode) {
      findNodeWithValue((ATreeNode)element,value,container,vr);
    }
  }
}",0.9408194233687404
128357,"public void detectNewRow(String path,String prefix,String uri,boolean start){
}","@Override public void detectNewRow(String path,String prefix,String uri,boolean start){
}",0.9404761904761904
128358,"public void manipulateData(String path,String value){
}","@Override public void manipulateData(String path,String value){
}",0.9166666666666666
128359,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getType();
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9218354133433424
128360,"public static XSDSchema getXSDSchema(String fileName){
  XSDSchema schema=null;
  try {
    if (fileName.endsWith(""String_Node_Str"")) {
      Project project=ProjectManager.getInstance().getCurrentProject();
      IProject fsProject=null;
      try {
        fsProject=ResourceModelUtils.getProject(project);
      }
 catch (      PersistenceException e2) {
        ExceptionHandler.process(e2);
      }
      IPath path=new Path(fsProject.getLocationURI().getPath());
      path=path.append(""String_Node_Str"").append(""String_Node_Str"" + new Path(fileName).lastSegment());
      String unzipPath=path.toPortableString();
      File zip=new File(fileName);
      if (zip.exists()) {
        try {
          FilesUtils.unzip(zip.getAbsolutePath(),unzipPath);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      File unzipFile=new File(unzipPath);
      XSDPopulationUtil2 popUtil=new XSDPopulationUtil2();
      if (unzipFile.exists() && unzipFile.isDirectory()) {
        File[] tempXSDFiles=unzipFile.listFiles();
        for (        File tempXSDFile : tempXSDFiles) {
          popUtil.addSchema(tempXSDFile.getAbsolutePath());
        }
        schema=popUtil.getXSDSchema(tempXSDFiles[0].getAbsolutePath());
      }
    }
 else {
      String newFilePath;
      try {
        newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
      }
 catch (      PersistenceException e1) {
        newFilePath=fileName;
      }
      schema=new XSDPopulationUtil2().getXSDSchema(newFilePath);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}","public static XSDSchema getXSDSchema(XSDPopulationUtil2 popUtil,String fileName){
  XSDSchema schema=null;
  if (popUtil == null) {
    popUtil=new XSDPopulationUtil2();
  }
  try {
    if (fileName.endsWith(""String_Node_Str"")) {
      Project project=ProjectManager.getInstance().getCurrentProject();
      IProject fsProject=null;
      try {
        fsProject=ResourceModelUtils.getProject(project);
      }
 catch (      PersistenceException e2) {
        ExceptionHandler.process(e2);
      }
      IPath path=new Path(fsProject.getLocationURI().getPath());
      path=path.append(""String_Node_Str"").append(""String_Node_Str"" + new Path(fileName).lastSegment());
      String unzipPath=path.toPortableString();
      File zip=new File(fileName);
      if (zip.exists()) {
        try {
          FilesUtils.unzip(zip.getAbsolutePath(),unzipPath);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      File unzipFile=new File(unzipPath);
      if (unzipFile.exists() && unzipFile.isDirectory()) {
        File[] tempXSDFiles=unzipFile.listFiles();
        for (        File tempXSDFile : tempXSDFiles) {
          popUtil.addSchema(tempXSDFile.getAbsolutePath());
        }
        schema=popUtil.getXSDSchema(tempXSDFiles[0].getAbsolutePath());
      }
    }
 else {
      String newFilePath;
      try {
        newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
      }
 catch (      PersistenceException e1) {
        newFilePath=fileName;
      }
      schema=popUtil.getXSDSchema(newFilePath);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}",0.9465045592705168
128361,"public boolean populateTree(XSDSchema schema,ATreeNode selectedNode,List<ATreeNode> treeNodes){
  availableXmlTree.removeAll();
  xPathToTreeItem.clear();
  ATreeNode treeNode=null;
  if (schema != null) {
    try {
      treeNode=SchemaPopulationUtil.getSchemaTree(schema,selectedNode);
      if (treeNodes != null) {
        treeNodes.add(treeNode);
      }
    }
 catch (    MalformedURLException e) {
      ExceptionHandler.process(e);
    }
catch (    OdaException e) {
      ExceptionHandler.process(e);
    }
catch (    URISyntaxException e) {
      ExceptionHandler.process(e);
    }
catch (    Exception e) {
      ExceptionHandler.process(e);
      return false;
    }
    if (treeNode == null || treeNode.getChildren().length == 0) {
      return false;
    }
 else {
      populateTreeItems(availableXmlTree,new Object[]{treeNode},0,""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
  return false;
}","public boolean populateTree(XSDPopulationUtil2 popUtil,XSDSchema schema,ATreeNode selectedNode,List<ATreeNode> treeNodes){
  availableXmlTree.removeAll();
  xPathToTreeItem.clear();
  ATreeNode treeNode=null;
  if (schema != null) {
    try {
      if (popUtil == null) {
        treeNode=SchemaPopulationUtil.getSchemaTree(schema,selectedNode);
      }
 else {
        treeNode=SchemaPopulationUtil.getSchemaTree(popUtil,schema,selectedNode);
      }
      if (treeNodes != null) {
        treeNodes.add(treeNode);
      }
    }
 catch (    MalformedURLException e) {
      ExceptionHandler.process(e);
    }
catch (    OdaException e) {
      ExceptionHandler.process(e);
    }
catch (    URISyntaxException e) {
      ExceptionHandler.process(e);
    }
catch (    Exception e) {
      ExceptionHandler.process(e);
      return false;
    }
    if (treeNode == null || treeNode.getChildren().length == 0) {
      return false;
    }
 else {
      populateTreeItems(availableXmlTree,new Object[]{treeNode},0,""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.9188921859545004
128362,"/** 
 * populate tree items.
 * @param tree
 * @param node
 */
private void populateTreeItems(Object tree,Object[] node,int level,String parentPathForTreeLink,String parentPathToAvoidLoop){
  level++;
  for (int i=0; i < node.length; i++) {
    TreeItem treeItem;
    if (tree instanceof Tree) {
      treeItem=new TreeItem((Tree)tree,0);
    }
 else {
      treeItem=new TreeItem((TreeItem)tree,0);
    }
    ATreeNode treeNode=(ATreeNode)node[i];
    treeItem.setData(treeNode);
    int type=treeNode.getType();
    if (type == ATreeNode.NAMESPACE_TYPE) {
      if (""String_Node_Str"".equals(treeNode.getDataType())) {
        treeItem.setText(""String_Node_Str"" + treeNode.getLabel());
      }
 else {
        treeItem.setText(""String_Node_Str"" + treeNode.getDataType() + ""String_Node_Str""+ treeNode.getLabel());
      }
      treeItem.setForeground(new Color(Display.getDefault(),new RGB(0,130,0)));
    }
 else     if (type == ATreeNode.ATTRIBUTE_TYPE) {
      treeItem.setText(""String_Node_Str"" + treeNode.getLabel());
    }
 else {
      treeItem.setText(treeNode.getLabel());
    }
    if (parentPathToAvoidLoop.contains(""String_Node_Str"" + treeItem.getText() + ""String_Node_Str"")) {
      treeItem.setForeground(new Color(Display.getDefault(),new RGB(255,102,102)));
      continue;
    }
    String currentXPathForTreeLink=parentPathForTreeLink + ""String_Node_Str"" + treeItem.getText();
    xPathToTreeItem.put(currentXPathForTreeLink,treeItem);
    String currentXPathToAvoidLoop=parentPathForTreeLink + treeItem.getText() + ""String_Node_Str"";
    if (treeNode.getChildren() != null && treeNode.getChildren().length > 0) {
      populateTreeItems(treeItem,treeNode.getChildren(),level,currentXPathForTreeLink,currentXPathToAvoidLoop);
    }
    setExpanded(treeItem);
  }
}","/** 
 * populate tree items.
 * @param tree
 * @param node
 */
private void populateTreeItems(Object tree,Object[] node,int level,String parentPathForTreeLink,String parentPathToAvoidLoop){
  level++;
  for (  Object element : node) {
    TreeItem treeItem;
    if (tree instanceof Tree) {
      treeItem=new TreeItem((Tree)tree,0);
    }
 else {
      treeItem=new TreeItem((TreeItem)tree,0);
    }
    ATreeNode treeNode=(ATreeNode)element;
    treeItem.setData(treeNode);
    int type=treeNode.getType();
    if (type == ATreeNode.NAMESPACE_TYPE) {
      if (""String_Node_Str"".equals(treeNode.getDataType())) {
        treeItem.setText(""String_Node_Str"" + treeNode.getLabel());
      }
 else {
        treeItem.setText(""String_Node_Str"" + treeNode.getDataType() + ""String_Node_Str""+ treeNode.getLabel());
      }
      treeItem.setForeground(new Color(Display.getDefault(),new RGB(0,130,0)));
    }
 else     if (type == ATreeNode.ATTRIBUTE_TYPE) {
      treeItem.setText(""String_Node_Str"" + treeNode.getLabel());
    }
 else {
      treeItem.setText(treeNode.getLabel());
    }
    if (parentPathToAvoidLoop.contains(""String_Node_Str"" + treeItem.getText() + ""String_Node_Str"")) {
      treeItem.setForeground(new Color(Display.getDefault(),new RGB(255,102,102)));
      continue;
    }
    String currentXPathForTreeLink=parentPathForTreeLink + ""String_Node_Str"" + treeItem.getText();
    xPathToTreeItem.put(currentXPathForTreeLink,treeItem);
    String currentXPathToAvoidLoop=parentPathForTreeLink + treeItem.getText() + ""String_Node_Str"";
    if (treeNode.getChildren() != null && treeNode.getChildren().length > 0) {
      populateTreeItems(treeItem,treeNode.getChildren(),level,currentXPathForTreeLink,currentXPathToAvoidLoop);
    }
    setExpanded(treeItem);
  }
}",0.981450252951096
128363,"private void getTreeNode(XSDSchema xsdSchema){
  List<ATreeNode> rootNodes;
  try {
    rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
    if (rootNodes.size() > 0) {
      ATreeNode rootNode=getDefaultRootNode(rootNodes);
      List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
      if (rootNode == null) {
        valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
      }
 else {
        valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
}","private void getTreeNode(XSDPopulationUtil2 xsdPopulationUtil,XSDSchema xsdSchema){
  List<ATreeNode> rootNodes;
  try {
    rootNodes=xsdPopulationUtil.getAllRootNodes(xsdSchema);
    if (rootNodes.size() > 0) {
      ATreeNode rootNode=getDefaultRootNode(rootNodes);
      List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
      if (rootNode == null) {
        valid=treePopulator.populateTree(xsdPopulationUtil,xsdSchema,rootNodes.get(0),treeNodes);
      }
 else {
        valid=treePopulator.populateTree(xsdPopulationUtil,xsdSchema,rootNode,treeNodes);
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
}",0.9375907111756168
128364,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (xmlXsdPath != null && !""String_Node_Str"".equals(xmlXsdPath) && (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str""))) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        getTreeNode(xsdSchema);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (xmlXsdPath != null && !""String_Node_Str"".equals(xmlXsdPath) && (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str""))) {
      try {
        XSDPopulationUtil2 xsdPopulationUtil=new XSDPopulationUtil2();
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xsdPopulationUtil,xmlXsdPath);
        getTreeNode(xsdPopulationUtil,xsdSchema);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.9687591240875912
128365,"public T next(){
  current=internalListIterator.next();
  return current;
}","@Override public T next(){
  current=internalListIterator.next();
  return current;
}",0.9375
128366,"public void swapElement(T object1,T object2){
  swap(indexOf(object1),indexOf(object2));
}","@Override public void swapElement(T object1,T object2){
  swap(indexOf(object1),indexOf(object2));
}",0.9473684210526316
128367,"public int nextIndex(){
  return internalListIterator.nextIndex();
}","@Override public int nextIndex(){
  return internalListIterator.nextIndex();
}",0.9315068493150684
128368,"public T remove(int index){
  fireBeforeRemovedEvent(index);
  T removedObject=this.list.remove(index);
  fireRemovedEvent(index,removedObject);
  return removedObject;
}","@Override public T remove(int index){
  fireBeforeRemovedEvent(index);
  T removedObject=this.list.remove(index);
  fireRemovedEvent(index,removedObject);
  return removedObject;
}",0.9714285714285714
128369,"private void fireBeforeRemovedEvent(int index){
  if (beforeListeners.size() != 0) {
    T removingObject=this.list.get(index);
    List<T> currentList=new ArrayList<T>(1);
    currentList.add((T)removingObject);
    fireRemovedEvent(index,currentList,null,true);
  }
}","private void fireBeforeRemovedEvent(int index){
  if (beforeListeners.size() != 0) {
    T removingObject=this.list.get(index);
    List<T> currentList=new ArrayList<T>(1);
    currentList.add(removingObject);
    fireRemovedEvent(index,currentList,null,true);
  }
}",0.994392523364486
128370,"public void swapElements(List<Integer> indicesOrigin,List<Integer> indicesTarget){
  if (indicesOrigin.size() != indicesTarget.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  ArrayList<T> swapedObjects=new ArrayList<T>();
  fireSwapedEvent(indicesOrigin,indicesTarget,null,true);
  int lstSize=indicesOrigin.size();
  for (int i=0; i < lstSize; i++) {
    Integer idxOrigin=indicesOrigin.get(i);
    Integer idxDestination=indicesTarget.get(i);
    swapedObjects.add(list.get(idxOrigin));
    swapedObjects.add(list.get(idxDestination));
    internalSwap(idxOrigin,idxDestination);
  }
  fireSwapedEvent(indicesOrigin,indicesTarget,swapedObjects.toArray(),false);
}","@Override public void swapElements(List<Integer> indicesOrigin,List<Integer> indicesTarget){
  if (indicesOrigin.size() != indicesTarget.size()) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  ArrayList<T> swapedObjects=new ArrayList<T>();
  fireSwapedEvent(indicesOrigin,indicesTarget,null,true);
  int lstSize=indicesOrigin.size();
  for (int i=0; i < lstSize; i++) {
    Integer idxOrigin=indicesOrigin.get(i);
    Integer idxDestination=indicesTarget.get(i);
    swapedObjects.add(list.get(idxOrigin));
    swapedObjects.add(list.get(idxDestination));
    internalSwap(idxOrigin,idxDestination);
  }
  fireSwapedEvent(indicesOrigin,indicesTarget,swapedObjects.toArray(),false);
}",0.99302649930265
128371,"public Iterator<T> iterator(){
  return new Iterator<T>(){
    private Iterator<T> internalIterator=list.iterator();
    private T current=null;
    public boolean hasNext(){
      return internalIterator.hasNext();
    }
    public T next(){
      current=internalIterator.next();
      return current;
    }
    public void remove(){
      Integer indexBeforeRemove=indexOf(current);
      fireBeforeRemovedEvent(indexBeforeRemove);
      internalIterator.remove();
      fireRemovedEvent(indexBeforeRemove,current);
    }
  }
;
}","@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    private Iterator<T> internalIterator=list.iterator();
    private T current=null;
    @Override public boolean hasNext(){
      return internalIterator.hasNext();
    }
    @Override public T next(){
      current=internalIterator.next();
      return current;
    }
    @Override public void remove(){
      Integer indexBeforeRemove=indexOf(current);
      fireBeforeRemovedEvent(indexBeforeRemove);
      internalIterator.remove();
      fireRemovedEvent(indexBeforeRemove,current);
    }
  }
;
}",0.9637681159420288
128372,"/** 
 * Removes each object of the collection from the list and returns whether any object was actually contained by the list.
 * @param collection the collection of objects to be removed.
 * @return whether any object was actually contained by the list.
 */
@SuppressWarnings(""String_Node_Str"") public boolean removeAll(Collection<?> collection){
  List<Integer> indices=getIndices(collection);
  fireRemovedEvent(null,new ArrayList(collection),indices,true);
  if (this.list == null) {
    return false;
  }
  boolean modified=false;
  for (int i=indices.size(); --i >= 0; ) {
    this.list.remove((int)indices.get(i));
    modified=true;
  }
  if (modified) {
    fireRemovedEvent(null,new ArrayList(collection),indices,false);
  }
  return modified;
}","public boolean removeAll(Collection<?> collection,boolean fireBefore,boolean fireAfter){
  List<Integer> indices=getIndices(collection);
  if (fireBefore) {
    fireRemovedEvent(null,new ArrayList(collection),indices,true);
  }
  if (this.list == null) {
    return false;
  }
  boolean modified=false;
  for (int i=indices.size(); --i >= 0; ) {
    this.list.remove((int)indices.get(i));
    modified=true;
  }
  if (modified && fireAfter) {
    fireRemovedEvent(null,new ArrayList(collection),indices,false);
  }
  return modified;
}",0.7116279069767442
128373,"/** 
 * Sets the useEquals.
 * @param useEquals the useEquals to set
 */
public void setUseEquals(boolean useEquals){
  this.useEquals=useEquals;
}","/** 
 * Sets the useEquals.
 * @param useEquals the useEquals to set
 */
@Override public void setUseEquals(boolean useEquals){
  this.useEquals=useEquals;
}",0.9671052631578948
128374,"public T get(int index){
  return this.list.get(index);
}","@Override public T get(int index){
  return this.list.get(index);
}",0.9193548387096774
128375,"@SuppressWarnings(""String_Node_Str"") public <T>T[] toArray(T[] a){
  if (this.list != null) {
    return this.list.toArray(a);
  }
 else {
    return (T[])new Object[0];
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>T[] toArray(T[] a){
  if (this.list != null) {
    return this.list.toArray(a);
  }
 else {
    return (T[])new Object[0];
  }
}",0.9722222222222222
128376,"public boolean hasPrevious(){
  return internalListIterator.hasPrevious();
}","@Override public boolean hasPrevious(){
  return internalListIterator.hasPrevious();
}",0.9382716049382716
128377,"/** 
 * Returns the position of the first occurrence of the object in the list. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return the position of the first occurrence of the object in the list.
 */
public int indexOf(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    for (int i=0; i < size; ++i) {
      if (object.equals(this.list.get(i))) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < size; ++i) {
      if (this.list.get(i) == object) {
        return i;
      }
    }
  }
  return -1;
}","/** 
 * Returns the position of the first occurrence of the object in the list. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return the position of the first occurrence of the object in the list.
 */
@Override public int indexOf(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    for (int i=0; i < size; ++i) {
      if (object.equals(this.list.get(i))) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < size; ++i) {
      if (this.list.get(i) == object) {
        return i;
      }
    }
  }
  return -1;
}",0.9925373134328358
128378,"public void add(T o){
  internalListIterator.add(o);
  fireAddedEvent(internalListIterator.previousIndex(),o,false);
}","@Override public void add(T o){
  internalListIterator.add(o);
  fireAddedEvent(internalListIterator.previousIndex(),o,false);
}",0.959349593495935
128379,"public List<T> subList(int fromIndex,int toIndex){
  if (this.list != null) {
    return this.list.subList(fromIndex,toIndex);
  }
 else {
    return null;
  }
}","@Override public List<T> subList(int fromIndex,int toIndex){
  if (this.list != null) {
    return this.list.subList(fromIndex,toIndex);
  }
 else {
    return null;
  }
}",0.9698795180722892
128380,"public T set(int index,T element){
  fireReplacedEvent(index,null,element,true);
  T replacedObject=this.list.set(index,element);
  fireReplacedEvent(index,replacedObject,element,false);
  return replacedObject;
}","@Override public T set(int index,T element){
  fireReplacedEvent(index,null,element,true);
  T replacedObject=this.list.set(index,element);
  fireReplacedEvent(index,replacedObject,element,false);
  return replacedObject;
}",0.9770642201834864
128381,"public T previous(){
  current=internalListIterator.previous();
  return current;
}","@Override public T previous(){
  current=internalListIterator.previous();
  return current;
}",0.9431818181818182
128382,"public void swap(int index1,int index2){
  ArrayList<Integer> indexList1=new ArrayList<Integer>(1);
  ArrayList<Integer> indexList2=new ArrayList<Integer>(1);
  if (beforeListeners.size() != 0) {
    fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},true);
  }
  internalSwap(index1,index2);
  indexList1.add(index1);
  indexList2.add(index2);
  fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},false);
}","@Override public void swap(int index1,int index2){
  ArrayList<Integer> indexList1=new ArrayList<Integer>(1);
  ArrayList<Integer> indexList2=new ArrayList<Integer>(1);
  if (beforeListeners.size() != 0) {
    fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},true);
  }
  internalSwap(index1,index2);
  indexList1.add(index1);
  indexList2.add(index2);
  fireSwapedEvent(indexList1,indexList2,new Object[]{this.list.get(index1),this.list.get(index2)},false);
}",0.9900398406374502
128383,"public boolean containsAll(Collection<?> c){
  return this.list.containsAll(c);
}","@Override public boolean containsAll(Collection<?> c){
  return this.list.containsAll(c);
}",0.9418604651162792
128384,"public void clear(){
  fireClearedEvent(true);
  this.list.clear();
  fireClearedEvent(false);
}","@Override public void clear(){
  fireClearedEvent(true);
  this.list.clear();
  fireClearedEvent(false);
}",0.9504950495049505
128385,"public boolean isEmpty(){
  return this.list.isEmpty();
}","@Override public boolean isEmpty(){
  return this.list.isEmpty();
}",0.9193548387096774
128386,"public boolean hasNext(){
  return internalListIterator.hasNext();
}","@Override public boolean hasNext(){
  return internalListIterator.hasNext();
}",0.9315068493150684
128387,"public int lastIndexOf(Object o){
  return this.list.lastIndexOf(o);
}","@Override public int lastIndexOf(Object o){
  return this.list.lastIndexOf(o);
}",0.9333333333333332
128388,"/** 
 * Getter for useEquals.
 * @return the useEquals
 */
public boolean isUseEquals(){
  return this.useEquals;
}","/** 
 * Getter for useEquals.
 * @return the useEquals
 */
@Override public boolean isUseEquals(){
  return this.useEquals;
}",0.9583333333333334
128389,"/** 
 * Returns whether the list contains the object. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return whether the list contains the object.
 * @see #useEquals
 */
public boolean contains(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    return this.list.contains(object);
  }
 else {
    for (int i=0; i < size; ++i) {
      if (list.get(i) == object) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns whether the list contains the object. This implementation uses either <code>equals</code> or <code>""==""</code> depending on   {@link #isUseEquals useEquals}.
 * @param object the object in question.
 * @return whether the list contains the object.
 * @see #useEquals
 */
@Override public boolean contains(Object object){
  int size=list.size();
  if (useEquals && object != null) {
    return this.list.contains(object);
  }
 else {
    for (int i=0; i < size; ++i) {
      if (list.get(i) == object) {
        return true;
      }
    }
  }
  return false;
}",0.9912280701754386
128390,"public int size(){
  if (this.list != null) {
    return this.list.size();
  }
 else {
    return 0;
  }
}","@Override public int size(){
  if (this.list != null) {
    return this.list.size();
  }
 else {
    return 0;
  }
}",0.954954954954955
128391,"/** 
 */
@SuppressWarnings(""String_Node_Str"") public void addAll(List<Integer> indices,Collection<? extends T> c){
  fireAddedEvent(null,(Collection<T>)c,indices,true);
  Iterator<Integer> iterIndice=indices.iterator();
  for (  T t : c) {
    Integer indice=null;
    if (iterIndice.hasNext()) {
      indice=iterIndice.next();
    }
    if (indice != null) {
      this.list.add(indice,t);
    }
 else {
      this.list.add(t);
    }
  }
  fireAddedEvent(null,(Collection<T>)c,indices,false);
}","/** 
 */
@Override @SuppressWarnings(""String_Node_Str"") public void addAll(List<Integer> indices,Collection<? extends T> c){
  fireAddedEvent(null,(Collection<T>)c,indices,true);
  Iterator<Integer> iterIndice=indices.iterator();
  for (  T t : c) {
    Integer indice=null;
    if (iterIndice.hasNext()) {
      indice=iterIndice.next();
    }
    if (indice != null) {
      this.list.add(indice,t);
    }
 else {
      this.list.add(t);
    }
  }
  fireAddedEvent(null,(Collection<T>)c,indices,false);
}",0.9900199600798404
128392,"public ListIterator<T> listIterator(int index){
  return this.list.listIterator(index);
}","@Override public ListIterator<T> listIterator(int index){
  return this.list.listIterator(index);
}",0.946808510638298
128393,"public int previousIndex(){
  return internalListIterator.previousIndex();
}","@Override public int previousIndex(){
  return internalListIterator.previousIndex();
}",0.9382716049382716
128394,"public boolean retainAll(Collection<?> c){
  List<T> all=new ArrayList<T>();
  all.addAll(this.list);
  boolean isListChanged=this.list.retainAll(c);
  if (isListChanged) {
    int size=all.size();
    List<T> removedObjects=new ArrayList<T>();
    for (int i=0; i < size; i++) {
      T removedObject=all.get(i);
      if (indexOf(removedObject) < 0) {
        removedObjects.add(removedObject);
      }
    }
    fireRemovedEvent(null,removedObjects,null,false);
  }
  return isListChanged;
}","@Override public boolean retainAll(Collection<?> c){
  List<T> all=new ArrayList<T>();
  all.addAll(this.list);
  boolean isListChanged=this.list.retainAll(c);
  if (isListChanged) {
    int size=all.size();
    List<T> removedObjects=new ArrayList<T>();
    for (int i=0; i < size; i++) {
      T removedObject=all.get(i);
      if (indexOf(removedObject) < 0) {
        removedObjects.add(removedObject);
      }
    }
    fireRemovedEvent(null,removedObjects,null,false);
  }
  return isListChanged;
}",0.9899799599198396
128395,"private static void populateRoot(ATreeNode root,ATreeNode selectedNode){
  Object[] toBeIterated=root.getChildren();
  for (int i=0; i < toBeIterated.length; i++) {
    ATreeNode node=((ATreeNode)toBeIterated[i]);
    Object nodeValue=node.getValue();
    if (nodeValue != null && !nodeValue.equals(selectedNode.getValue()) && !nodeValue.equals(selectedNode.getDataType())) {
      continue;
    }
    Object value=node.getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)toBeIterated[i]).getChildren();
        for (int k=0; k < os.length; k++) {
          if (os[k] instanceof ATreeNode) {
            if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType()))) {
              ((ATreeNode)container.get(j)).addChild(os[k]);
            }
          }
        }
      }
    }
    break;
  }
}","private static void populateRoot(ATreeNode root,ATreeNode selectedNode){
  Object[] toBeIterated=root.getChildren();
  for (  Object element : toBeIterated) {
    ATreeNode node=((ATreeNode)element);
    Object nodeValue=node.getValue();
    if (nodeValue != null && !nodeValue.equals(selectedNode.getValue()) && !nodeValue.equals(selectedNode.getDataType())) {
      continue;
    }
    Object value=node.getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)element).getChildren();
        for (int k=0; k < os.length; k++) {
          if (os[k] instanceof ATreeNode) {
            if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType()))) {
              ((ATreeNode)container.get(j)).addChild(os[k]);
            }
          }
        }
      }
    }
    break;
  }
}",0.7603686635944701
128396,"/** 
 * Return the tree node instance that represents to the ComplexElement that featured by the given value.
 * @param root the tree node from which the search begin
 * @param value the name of the ComplexElement
 * @return
 */
private static ATreeNode findComplexElement(ATreeNode root,String value){
  Object[] os=root.getChildren();
  for (int i=0; i < os.length; i++) {
    if (((ATreeNode)os[i]).getValue().equals(value)) {
      return (ATreeNode)os[i];
    }
  }
  return null;
}","/** 
 * Return the tree node instance that represents to the ComplexElement that featured by the given value.
 * @param root the tree node from which the search begin
 * @param value the name of the ComplexElement
 * @return
 */
private static ATreeNode findComplexElement(ATreeNode root,String value){
  Object[] os=root.getChildren();
  for (  Object element : os) {
    if (((ATreeNode)element).getValue().equals(value)) {
      return (ATreeNode)element;
    }
  }
  return null;
}",0.925925925925926
128397,"public synchronized void wakeup(){
  notify();
}","@Override public synchronized void wakeup(){
  notify();
}",0.9056603773584906
128398,"/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString())) {
    return;
  }
  if (root.getDataType() != null && root.getDataType().equals(value)) {
    container.add(root);
  }
  Object[] children=root.getChildren();
  for (int i=0; i < children.length; i++) {
    if (children[i] instanceof ATreeNode) {
      findNodeWithValue((ATreeNode)children[i],value,container,vr);
    }
  }
}","/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString())) {
    return;
  }
  if (root.getDataType() != null && root.getDataType().equals(value)) {
    container.add(root);
  }
  Object[] children=root.getChildren();
  for (  Object element : children) {
    if (element instanceof ATreeNode) {
      findNodeWithValue((ATreeNode)element,value,container,vr);
    }
  }
}",0.9408194233687404
128399,"public void detectNewRow(String path,String prefix,String uri,boolean start){
}","@Override public void detectNewRow(String path,String prefix,String uri,boolean start){
}",0.9404761904761904
128400,"public void manipulateData(String path,String value){
}","@Override public void manipulateData(String path,String value){
}",0.9166666666666666
128401,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (    Object element : children) {
      if (element instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)element;
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}",0.972913211719182
128402,"public static List<FOXTreeNode> getFoxTreeNodesByRootNode(XSDSchema xsdSchema,ATreeNode selectedRootNode,boolean resolved,boolean supportChoice,boolean supportSubstitution){
  List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
  if (xsdSchema == null || selectedRootNode == null) {
    return list;
  }
  ATreeNode treeNode=null;
  try {
    if (resolved) {
      treeNode=selectedRootNode;
    }
 else {
      treeNode=SchemaPopulationUtil.getSchemaTree(xsdSchema,selectedRootNode,supportChoice,supportSubstitution);
    }
    if (treeNode == null) {
      return list;
    }
    String rootName=""String_Node_Str"";
    if (treeNode.getValue() instanceof String) {
      rootName+=""String_Node_Str"" + treeNode.getValue();
    }
    FOXTreeNode root=cloneATreeNode(treeNode,rootName);
    if (root instanceof Element) {
      root.setParent(null);
      list.add(root);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return list;
}","public static List<FOXTreeNode> getFoxTreeNodesByRootNode(XSDSchema xsdSchema,ATreeNode selectedRootNode,boolean resolved,boolean supportChoice,boolean supportSubstitution){
  return getFoxTreeNodesByRootNode(null,xsdSchema,selectedRootNode,resolved,supportChoice,supportSubstitution);
}",0.2937399678972712
128403,"public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null)     return null;
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null) {
      return null;
    }
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9821731748726656
128404,"private static void generateContextInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean trace,boolean properties,IProgressMonitor progressMonitor,IProcess currentProcess,String currentJobName,IProcessor processor) throws ProcessorException {
  if (isCodeGenerationNeeded(jobInfo,statistics,trace)) {
    codeModified=true;
    if ((currentProcess instanceof IProcess2) && exportConfig) {
      ((IProcess2)currentProcess).setProcessModified(true);
      resetRunJobComponentParameterForContextApply(jobInfo,currentProcess,selectedContextName);
    }
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    IContext currentContext;
    if (jobInfo.getContext() == null) {
      currentContext=getContext(currentProcess,jobInfo.getContextName());
    }
 else {
      currentContext=jobInfo.getContext();
    }
    List<IContext> list=currentProcess.getContextManager().getListContext();
    for (    IContext context : list) {
      if (context.getName().equals(currentContext.getName())) {
        processor.setContext(currentContext);
      }
 else {
        processor.setContext(context);
      }
      LastGenerationInfo.getInstance().getContextPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).add(context.getName());
      try {
        processor.generateContextCode();
      }
 catch (      ProcessorException pe) {
        ExceptionHandler.process(pe);
      }
    }
    processor.setContext(currentContext);
    processor.generateCode(statistics,trace,properties,exportAsOSGI);
    if (currentProcess instanceof IProcess2 && ((IProcess2)currentProcess).getProperty() != null) {
      designerCoreService.getLastGeneratedJobsDateMap().put(currentProcess.getId(),((IProcess2)currentProcess).getProperty().getModificationDate());
    }
    Integer infos=new Integer(0);
    infos+=statistics ? GENERATED_WITH_STATS : 0;
    infos+=trace ? GENERATED_WITH_TRACES : 0;
    lastGeneratedWithStatsOrTrace.put(jobInfo.getJobId(),infos);
    if (currentProcess instanceof IProcess2) {
      ((IProcess2)currentProcess).setNeedRegenerateCode(false);
    }
  }
 else {
    processor.setCodeGenerated(true);
  }
}","private static void generateContextInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean trace,boolean needContext,IProgressMonitor progressMonitor,IProcess currentProcess,String currentJobName,IProcessor processor) throws ProcessorException {
  if (isCodeGenerationNeeded(jobInfo,statistics,trace)) {
    codeModified=true;
    if ((currentProcess instanceof IProcess2) && exportConfig) {
      ((IProcess2)currentProcess).setProcessModified(true);
      resetRunJobComponentParameterForContextApply(jobInfo,currentProcess,selectedContextName);
    }
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    IContext currentContext;
    if (jobInfo.getContext() == null) {
      currentContext=getContext(currentProcess,jobInfo.getContextName());
    }
 else {
      currentContext=jobInfo.getContext();
    }
    if (needContext) {
      List<IContext> list=currentProcess.getContextManager().getListContext();
      for (      IContext context : list) {
        if (context.getName().equals(currentContext.getName())) {
          processor.setContext(currentContext);
        }
 else {
          processor.setContext(context);
        }
        LastGenerationInfo.getInstance().getContextPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).add(context.getName());
        try {
          processor.generateContextCode();
        }
 catch (        ProcessorException pe) {
          ExceptionHandler.process(pe);
        }
      }
    }
    processor.setContext(currentContext);
    processor.generateCode(statistics,trace,true,exportAsOSGI);
    if (currentProcess instanceof IProcess2 && ((IProcess2)currentProcess).getProperty() != null) {
      designerCoreService.getLastGeneratedJobsDateMap().put(currentProcess.getId(),((IProcess2)currentProcess).getProperty().getModificationDate());
    }
    Integer infos=new Integer(0);
    infos+=statistics ? GENERATED_WITH_STATS : 0;
    infos+=trace ? GENERATED_WITH_TRACES : 0;
    lastGeneratedWithStatsOrTrace.put(jobInfo.getJobId(),infos);
    if (currentProcess instanceof IProcess2) {
      ((IProcess2)currentProcess).setNeedRegenerateCode(false);
    }
  }
 else {
    processor.setCodeGenerated(true);
  }
}",0.9758101323596532
128405,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        ((IJavaProject)CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        CorePlugin.getDefault().getRunProcessService().getJavaProject().getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}",0.909692671394799
128406,"/** 
 * This method is used to reset the tRunJob component's context,see feature 1625.
 * @param jobInfo
 * @param currentProcess
 * @param selectedContextName
 */
private static void resetRunJobComponentParameterForContextApply(JobInfo jobInfo,IProcess currentProcess,String selectedContextName){
  if (jobInfo.isApplyContextToChildren()) {
    for (Iterator<? extends INode> iter=currentProcess.getGeneratingNodes().iterator(); iter.hasNext(); ) {
      INode node=iter.next();
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        node.getElementParameter(""String_Node_Str"").setValue(selectedContextName);
      }
    }
  }
}","/** 
 * This method is used to reset the tRunJob component's context,see feature 1625.
 * @param jobInfo
 * @param currentProcess
 * @param selectedContextName
 */
private static void resetRunJobComponentParameterForContextApply(JobInfo jobInfo,IProcess currentProcess,String selectedContextName){
  if (jobInfo.isApplyContextToChildren()) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        node.getElementParameter(""String_Node_Str"").setValue(selectedContextName);
      }
    }
  }
}",0.91699604743083
128407,"public static String[] getMainCommand(String processName,String processVersion,String contextName,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  IProcess currentProcess=null;
  ProcessItem selectedProcessItem=null;
  selectedProcessItem=ItemCacheManager.getProcessItem(processName,processVersion);
  if (selectedProcessItem != null) {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    currentProcess=service.getProcessFromProcessItem(selectedProcessItem);
  }
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,selectedProcessItem.getProperty(),currentContext);
  String[] cmd=new String[]{processor.getCodePath().removeFirstSegments(1).toString().replace(""String_Node_Str"",""String_Node_Str"")};
  if (codeOptions != null) {
    for (int i=0; i < codeOptions.length; i++) {
      String string=codeOptions[i];
      if (string != null) {
        cmd=(String[])ArrayUtils.add(cmd,string);
      }
    }
  }
  if (contextName != null && !contextName.equals(""String_Node_Str"")) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + contextName);
  }
  if (statisticPort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + statisticPort);
  }
  if (tracePort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + tracePort);
  }
  return cmd;
}","public static String[] getMainCommand(String processName,String processVersion,String contextName,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  IProcess currentProcess=null;
  ProcessItem selectedProcessItem=null;
  selectedProcessItem=ItemCacheManager.getProcessItem(processName,processVersion);
  if (selectedProcessItem != null) {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    currentProcess=service.getProcessFromProcessItem(selectedProcessItem);
  }
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,selectedProcessItem.getProperty(),currentContext);
  String[] cmd=new String[]{processor.getCodePath().removeFirstSegments(1).toString().replace(""String_Node_Str"",""String_Node_Str"")};
  if (codeOptions != null) {
    for (    String string : codeOptions) {
      if (string != null) {
        cmd=(String[])ArrayUtils.add(cmd,string);
      }
    }
  }
  if (needContextInCurrentGeneration && contextName != null && !contextName.equals(""String_Node_Str"")) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + contextName);
  }
  if (statisticPort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + statisticPort);
  }
  if (tracePort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + tracePort);
  }
  return cmd;
}",0.9527371642298538
128408,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.9942096833805594
128409,"private int parseSize(String numStr){
  return new Integer(numStr.substring(4)).intValue();
}","private int parseSize(String numStr){
  if (numStr.contains(""String_Node_Str"")) {
    return new Integer(numStr.substring(5)).intValue();
  }
  return new Integer(numStr.substring(4)).intValue();
}",0.6413793103448275
128410,"public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    if (!(""String_Node_Str"").equals(newValue)) {
      text.setText(newValue);
    }
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
}","public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    if (!(""String_Node_Str"").equals(newValue)) {
      text.setText(newValue);
    }
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(""String_Node_Str"");
    text.setSelection(selection.x,selection.y);
  }
}",0.9853027630805408
128411,"protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            if (!(""String_Node_Str"").equals(newValue)) {
              text.setText(newValue);
            }
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}","protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            if (!(""String_Node_Str"").equals(newValue)) {
              text.setText(newValue);
            }
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(""String_Node_Str"");
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}",0.9940856399337592
128412,"public Resource getReferenceFileResource(Resource itemResource,String extension,boolean needLoad){
  URI referenceFileURI=getReferenceFileURI(itemResource.getURI(),extension);
  URIConverter converter=resourceSet.getURIConverter();
  Resource referenceResource=new ByteArrayResource(referenceFileURI);
  InputStream inputStream=null;
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null && referenceFileURI.toString().equals(res.getURI().toString())) {
      res.unload();
      resourceSet.getResources().remove(res);
    }
  }
  resourceSet.getResources().add(referenceResource);
  try {
    if (needLoad) {
      inputStream=converter.createInputStream(referenceFileURI);
      referenceResource.load(inputStream,null);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  return referenceResource;
}","public Resource getReferenceFileResource(Resource itemResource,ReferenceFileItem refFile,boolean needLoad){
  URI referenceFileURI=getReferenceFileURI(itemResource.getURI(),refFile.getExtension());
  URIConverter converter=resourceSet.getURIConverter();
  Resource referenceResource=new ByteArrayResource(referenceFileURI);
  InputStream inputStream=null;
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  if (refFile.isReloadFromFile()) {
    for (    Resource res : resources) {
      if (res != null && referenceFileURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
    resourceSet.getResources().add(referenceResource);
    try {
      if (needLoad) {
        inputStream=converter.createInputStream(referenceFileURI);
        referenceResource.load(inputStream,null);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      try {
        if (inputStream != null) {
          inputStream.close();
        }
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
 else {
    referenceResource=resourceSet.getResource(referenceFileURI,true);
  }
  return referenceResource;
}",0.8753202391118702
128413,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || tables != null && tables.isEmpty()) {
    if (tables != null && !tables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < tables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)tables.toArray()[i])) {
          metadataTable=(MetadataTable)tables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || initTables != null && initTables.isEmpty()) {
    if (initTables != null && !initTables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < initTables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
          metadataTable=(MetadataTable)initTables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}",0.7743732590529248
128414,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getType();
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9220839958843888
128415,"public static XSDSchema getXSDSchema(String fileName){
  XSDSchema schema=null;
  try {
    if (fileName.endsWith(""String_Node_Str"")) {
      Project project=ProjectManager.getInstance().getCurrentProject();
      IProject fsProject=null;
      try {
        fsProject=ResourceModelUtils.getProject(project);
      }
 catch (      PersistenceException e2) {
        ExceptionHandler.process(e2);
      }
      IPath path=new Path(fsProject.getLocationURI().getPath());
      path=path.append(""String_Node_Str"").append(""String_Node_Str"" + new Path(fileName).lastSegment());
      String unzipPath=path.toPortableString();
      File zip=new File(fileName);
      if (zip.exists()) {
        try {
          FilesUtils.unzip(zip.getAbsolutePath(),unzipPath);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      File unzipFile=new File(unzipPath);
      XSDPopulationUtil2 popUtil=new XSDPopulationUtil2();
      if (unzipFile.exists() && unzipFile.isDirectory()) {
        File[] tempXSDFiles=unzipFile.listFiles();
        for (        File tempXSDFile : tempXSDFiles) {
          popUtil.addSchema(tempXSDFile.getAbsolutePath());
        }
        schema=popUtil.getXSDSchema(tempXSDFiles[0].getAbsolutePath());
      }
    }
 else {
      String newFilePath;
      try {
        newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
      }
 catch (      PersistenceException e1) {
        newFilePath=fileName;
      }
      schema=new XSDPopulationUtil2().getXSDSchema(newFilePath);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}","public static XSDSchema getXSDSchema(XSDPopulationUtil2 popUtil,String fileName){
  XSDSchema schema=null;
  if (popUtil == null) {
    popUtil=new XSDPopulationUtil2();
  }
  try {
    if (fileName.endsWith(""String_Node_Str"")) {
      Project project=ProjectManager.getInstance().getCurrentProject();
      IProject fsProject=null;
      try {
        fsProject=ResourceModelUtils.getProject(project);
      }
 catch (      PersistenceException e2) {
        ExceptionHandler.process(e2);
      }
      IPath path=new Path(fsProject.getLocationURI().getPath());
      path=path.append(""String_Node_Str"").append(""String_Node_Str"" + new Path(fileName).lastSegment());
      String unzipPath=path.toPortableString();
      File zip=new File(fileName);
      if (zip.exists()) {
        try {
          FilesUtils.unzip(zip.getAbsolutePath(),unzipPath);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      File unzipFile=new File(unzipPath);
      if (unzipFile.exists() && unzipFile.isDirectory()) {
        File[] tempXSDFiles=unzipFile.listFiles();
        for (        File tempXSDFile : tempXSDFiles) {
          popUtil.addSchema(tempXSDFile.getAbsolutePath());
        }
        schema=popUtil.getXSDSchema(tempXSDFiles[0].getAbsolutePath());
      }
    }
 else {
      String newFilePath;
      try {
        newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
      }
 catch (      PersistenceException e1) {
        newFilePath=fileName;
      }
      schema=popUtil.getXSDSchema(newFilePath);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}",0.9465045592705168
128416,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (xmlXsdPath != null && !""String_Node_Str"".equals(xmlXsdPath) && (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str""))) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (xmlXsdPath != null && !""String_Node_Str"".equals(xmlXsdPath) && (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str""))) {
      try {
        XSDPopulationUtil2 xsdPopulationUtil=new XSDPopulationUtil2();
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xsdPopulationUtil,xmlXsdPath);
        List<ATreeNode> rootNodes=xsdPopulationUtil.getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdPopulationUtil,xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdPopulationUtil,xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.9584805653710248
128417,"/** 
 * Sets the dbType.
 * @param dbType the dbType to set
 */
public void setDbType(String dbType){
  if (dbType != null) {
    this.dbType=TextUtil.removeQuots(EDatabaseTypeName.getTypeFromDbType(dbType).getDisplayName());
  }
 else {
    this.dbType=""String_Node_Str"";
  }
}","/** 
 * Sets the dbType.
 * @param dbType the dbType to set
 */
public void setDbType(String dbType){
  if (dbType != null && !""String_Node_Str"".equals(dbType)) {
    this.dbType=TextUtil.removeQuots(EDatabaseTypeName.getTypeFromDbType(dbType).getDisplayName());
  }
 else {
    this.dbType=""String_Node_Str"";
  }
}",0.9376053962900506
128418,"public void focusGained(FocusEvent e){
}","@Override public void focusGained(FocusEvent e){
}",0.8888888888888888
128419,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
128420,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9945310363686082
128421,"public void modifyText(ModifyEvent e){
  getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
  checkFieldsValue();
}","@Override public void modifyText(ModifyEvent e){
  getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
  checkFieldsValue();
}",0.9681528662420382
128422,"public void focusLost(FocusEvent e){
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
}","@Override public void focusLost(FocusEvent e){
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
}",0.9576271186440678
128423,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str"")) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (xmlXsdPath != null && !""String_Node_Str"".equals(xmlXsdPath) && (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str""))) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.9850402761795168
128424,"/** 
 * Sets the dbType.
 * @param dbType the dbType to set
 */
public void setDbType(String dbType){
  if (dbType != null) {
    this.dbType=TextUtil.removeQuots(EDatabaseTypeName.getTypeFromDbType(dbType).getDisplayName());
  }
 else {
    this.dbType=""String_Node_Str"";
  }
}","/** 
 * Sets the dbType.
 * @param dbType the dbType to set
 */
public void setDbType(String dbType){
  if (dbType != null && !""String_Node_Str"".equals(dbType)) {
    this.dbType=TextUtil.removeQuots(EDatabaseTypeName.getTypeFromDbType(dbType).getDisplayName());
  }
 else {
    this.dbType=""String_Node_Str"";
  }
}",0.9376053962900506
128425,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || tables != null && tables.isEmpty()) {
    if (tables != null && !tables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < tables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)tables.toArray()[i])) {
          metadataTable=(MetadataTable)tables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  initTables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || initTables != null && initTables.isEmpty()) {
    if (initTables != null && !initTables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < initTables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)initTables.toArray()[i])) {
          metadataTable=(MetadataTable)initTables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : initTables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  if (metadataTable != null && initTables != null && !initTables.isEmpty() && !tablenames.contains(metadataTable.getLabel())) {
    int size=initTables.size();
    if (size >= 1) {
      String tableName=null;
      for (      MetadataTable t : initTables) {
        if (t.getLabel().equals(allTableLabel[0])) {
          tableName=t.getLabel();
          break;
        }
      }
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj instanceof MetadataTable) {
          if (((MetadataTable)obj).getLabel().equals(tableName)) {
            metadataTable=(MetadataTable)obj;
          }
        }
      }
    }
  }
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(element);
    }
  }
}",0.7743732590529248
128426,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
      if (property != null && nameStatus.getSeverity() == IStatus.OK && purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
        updatePageStatus();
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      if (property != null && purposeStatus.getSeverity() == IStatus.OK && descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}",0.4873111339298812
128427,"public Resource getReferenceFileResource(Resource itemResource,String extension,boolean needLoad){
  URI referenceFileURI=getReferenceFileURI(itemResource.getURI(),extension);
  URIConverter converter=resourceSet.getURIConverter();
  Resource referenceResource=new ByteArrayResource(referenceFileURI);
  InputStream inputStream=null;
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  for (  Resource res : resources) {
    if (res != null && referenceFileURI.toString().equals(res.getURI().toString())) {
      res.unload();
      resourceSet.getResources().remove(res);
    }
  }
  resourceSet.getResources().add(referenceResource);
  try {
    if (needLoad) {
      inputStream=converter.createInputStream(referenceFileURI);
      referenceResource.load(inputStream,null);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (inputStream != null) {
        inputStream.close();
      }
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  return referenceResource;
}","public Resource getReferenceFileResource(Resource itemResource,ReferenceFileItem refFile,boolean needLoad){
  URI referenceFileURI=getReferenceFileURI(itemResource.getURI(),refFile.getExtension());
  URIConverter converter=resourceSet.getURIConverter();
  Resource referenceResource=new ByteArrayResource(referenceFileURI);
  InputStream inputStream=null;
  List<Resource> resources=new ArrayList<Resource>(resourceSet.getResources());
  if (refFile.isReloadFromFile()) {
    for (    Resource res : resources) {
      if (res != null && referenceFileURI.toString().equals(res.getURI().toString())) {
        res.unload();
        resourceSet.getResources().remove(res);
      }
    }
    resourceSet.getResources().add(referenceResource);
    try {
      if (needLoad) {
        inputStream=converter.createInputStream(referenceFileURI);
        referenceResource.load(inputStream,null);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      try {
        if (inputStream != null) {
          inputStream.close();
        }
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
 else {
    referenceResource=resourceSet.getResource(referenceFileURI,true);
  }
  return referenceResource;
}",0.8753202391118702
128428,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9794726597062466
128429,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str"")) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        getTreeNode(xsdSchema);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (xmlXsdPath != null && !""String_Node_Str"".equals(xmlXsdPath) && (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str""))) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        getTreeNode(xsdSchema);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.9800184445127574
128430,"public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  IPath path=URIHelper.convert(itemResourceURI);
  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
  Resource itemResource=null;
  if (file.exists()) {
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}","public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}",0.7589403973509934
128431,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
      if (property != null && nameStatus.getSeverity() == IStatus.OK && purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
        updatePageStatus();
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      if (property != null && purposeStatus.getSeverity() == IStatus.OK && descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}",0.4873111339298812
128432,"/** 
 * DOC YeXiaowei Comment method ""initializeGeneralJDBC"".
 */
private void initializeGeneralJDBC(){
  generalJdbcUrlText.setText(getConnection().getURL());
  generalJdbcClassNameText.setText(getConnection().getDriverClass());
  generalJdbcUserText.setText(getConnection().getUsername());
  generalJdbcPasswordText.setText(getConnection().getPassword());
  generalJdbcDriverjarText.setText(getConnection().getDriverJarPath());
  generalMappingFileText.setText(getConnection().getDbmsId());
  String jdbcUrlString=""String_Node_Str"";
  if (isContextMode()) {
    if (selectedContextType == null) {
      selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getConnection(),null,true);
    }
    if (selectedContextType != null) {
      jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
    }
  }
 else {
    jdbcUrlString=generalJdbcUrlText.getText();
  }
  if (jdbcUrlString.contains(""String_Node_Str"")) {
    String schema=getConnection().getUiSchema();
    if (schema == null || ""String_Node_Str"".equals(schema)) {
      for (      ContextParameterType param : (List<ContextParameterType>)selectedContextType.getContextParameter()) {
        if (param.getName() != null && param.getName().endsWith(ConnectionContextHelper.LINE + EDBParamName.Schema)) {
          if (getConnection().isContextMode()) {
            schema=""String_Node_Str"" + param.getName();
          }
 else {
            schema=param.getValue();
          }
          break;
        }
      }
    }
    jDBCschemaText.setText(schema);
  }
 else {
    jDBCschemaText.setHideWidgets(true);
  }
}","/** 
 * DOC YeXiaowei Comment method ""initializeGeneralJDBC"".
 */
private void initializeGeneralJDBC(){
  generalJdbcUrlText.setText(getConnection().getURL());
  generalJdbcClassNameText.setText(getConnection().getDriverClass());
  generalJdbcUserText.setText(getConnection().getUsername());
  generalJdbcPasswordText.setText(getConnection().getPassword());
  generalJdbcDriverjarText.setText(getConnection().getDriverJarPath());
  generalMappingFileText.setText(getConnection().getDbmsId());
  String jdbcUrlString=""String_Node_Str"";
  if (isContextMode()) {
    if (selectedContextType == null) {
      selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getConnection(),null,true);
    }
    if (selectedContextType != null) {
      jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
    }
  }
 else {
    jdbcUrlString=generalJdbcUrlText.getText();
  }
  if (jdbcUrlString.contains(""String_Node_Str"")) {
    String schema=getConnection().getUiSchema();
    if (selectedContextType != null && (schema == null || ""String_Node_Str"".equals(schema))) {
      for (      ContextParameterType param : (List<ContextParameterType>)selectedContextType.getContextParameter()) {
        if (param.getName() != null && param.getName().endsWith(ConnectionContextHelper.LINE + EDBParamName.Schema)) {
          if (getConnection().isContextMode()) {
            schema=""String_Node_Str"" + param.getName();
          }
 else {
            schema=param.getValue();
          }
          break;
        }
      }
    }
    jDBCschemaText.setText(schema);
  }
 else {
    jDBCschemaText.setHideWidgets(true);
  }
}",0.9900271985494108
128433,"/** 
 * Returns all   {@link HiveConnVersionInfo} objects with the given level. Added by Marvin Wang on Aug 9, 2012.
 * @param level
 * @return
 */
protected static List<HiveConnVersionInfo> getObjectsByLevel(int level){
  HiveConnVersionInfo[] beans=HiveConnVersionInfo.values();
  if (beans != null && beans.length > 0) {
    List<HiveConnVersionInfo> list=new ArrayList<HiveConnVersionInfo>();
    for (    HiveConnVersionInfo bean : beans) {
      int beanLevel=bean.getLevel();
      if (level == beanLevel) {
        list.add(bean);
      }
    }
    if (PluginChecker.isOnlyTopLoaded() && level == 0) {
      list.remove(0);
    }
    return list;
  }
  return null;
}","/** 
 * Returns all   {@link HiveConnVersionInfo} objects with the given level. Added by Marvin Wang on Aug 9, 2012.
 * @param level
 * @return
 */
protected static List<HiveConnVersionInfo> getObjectsByLevel(int level){
  HiveConnVersionInfo[] beans=HiveConnVersionInfo.values();
  if (beans != null && beans.length > 0) {
    List<HiveConnVersionInfo> list=new ArrayList<HiveConnVersionInfo>();
    for (    HiveConnVersionInfo bean : beans) {
      int beanLevel=bean.getLevel();
      if (level == beanLevel) {
        list.add(bean);
      }
    }
    if (PluginChecker.isOnlyTopLoaded() && (level == 0 || level == 2)) {
      list.remove(0);
    }
    return list;
  }
  return null;
}",0.9882869692532944
128434,"public void loadScreenshots(Property property,ProcessType processType){
  Resource screenshotResource=getScreenshotResource(property.getItem());
  processType.getScreenshots().addAll(screenshotResource.getContents());
}","public void loadScreenshots(Property property,ProcessType processType){
  Resource screenshotResource=getScreenshotResource(property.getItem());
  if (screenshotResource != null) {
    processType.getScreenshots().addAll(screenshotResource.getContents());
  }
}",0.9125
128435,"public Resource getScreenshotResource(Item item){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  Resource itemResource;
  try {
    itemResource=resourceSet.getResource(itemResourceURI,true);
  }
 catch (  Exception e) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}","public Resource getScreenshotResource(Item item,boolean createIfNotExist){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  IPath path=URIHelper.convert(itemResourceURI);
  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
  Resource itemResource=null;
  if (file.exists()) {
    try {
      itemResource=resourceSet.getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=resourceSet.createResource(itemResourceURI);
  }
  return itemResource;
}",0.1844262295081967
128436,"private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item);
  itemResource.getContents().clear();
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
    itemResource.getContents().addAll(screenshots);
  }
  return itemResource;
}","private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item,true);
  itemResource.getContents().clear();
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
    itemResource.getContents().addAll(screenshots);
  }
  return itemResource;
}",0.9956101843722563
128437,"private static void init(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  List<String> repositoryComponentNames=new ArrayList<String>();
  List<String> dndFilterIds=new ArrayList<String>();
  List<String> componentIds=new ArrayList<String>();
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    if (element.getName().equals(""String_Node_Str"")) {
      List<String> filterAttrs=getFilterAttrs(element,""String_Node_Str"",""String_Node_Str"");
      repositoryComponentNames.addAll(filterAttrs);
      filterAttrs=getFilterAttrs(element,""String_Node_Str"",""String_Node_Str"");
      dndFilterIds.addAll(filterAttrs);
      filterAttrs=getFilterAttrs(element,""String_Node_Str"",""String_Node_Str"");
      componentIds.addAll(filterAttrs);
    }
  }
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    if (element.getName().equals(""String_Node_Str"")) {
      String name=element.getAttribute(""String_Node_Str"");
      if (repositoryComponentNames.contains(name)) {
        continue;
      }
      String type=element.getAttribute(""String_Node_Str"");
      boolean withSchema=Boolean.parseBoolean(element.getAttribute(""String_Node_Str""));
      String input=element.getAttribute(""String_Node_Str"");
      String output=element.getAttribute(""String_Node_Str"");
      String def=element.getAttribute(""String_Node_Str"");
      IRepositoryComponentAgent agent=null;
      if (element.getAttribute(""String_Node_Str"") != null) {
        try {
          Object object=element.createExecutableExtension(""String_Node_Str"");
          if (object != null && (object instanceof IRepositoryComponentAgent)) {
            agent=(IRepositoryComponentAgent)object;
          }
        }
 catch (        Exception e) {
        }
      }
      RepositoryComponentSetting setting=new RepositoryComponentSetting();
      setting.setName(name);
      setting.setRepositoryType(type);
      setting.setWithSchema(withSchema);
      setting.setInputComponent(input);
      setting.setOutputComponent(output);
      setting.setDefaultComponent(def);
      setting.setClasses(retrieveClasses(element));
      setting.setDbTypes(retrieveDBTypes(element));
      setting.setAgent(agent);
      repComponentSettings.add(setting);
    }
 else     if (element.getName().equals(""String_Node_Str"")) {
      String id=element.getAttribute(""String_Node_Str"");
      if (dndFilterIds.contains(id)) {
        continue;
      }
      String name=element.getAttribute(""String_Node_Str"");
      int level=parserLevel(element.getAttribute(""String_Node_Str""));
      IRepositoryComponentDndFilter filter=null;
      try {
        Object object=element.createExecutableExtension(""String_Node_Str"");
        if (object == null || !(object instanceof IRepositoryComponentDndFilter)) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        filter=(IRepositoryComponentDndFilter)object;
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
      RepositoryComponentDndFilterSetting dndSetting=new RepositoryComponentDndFilterSetting();
      dndSetting.setId(id);
      dndSetting.setName(name);
      dndSetting.setLevel(level);
      dndSetting.setFilter(filter);
      repComponentDndFilterSettings.add(dndSetting);
    }
 else     if (element.getName().equals(""String_Node_Str"")) {
      retrieveSortedComponent(componentIds,sortedComponentSetting,element,""String_Node_Str"");
      retrieveSortedComponent(componentIds,specialSortedComponentSetting,element,""String_Node_Str"");
    }
  }
}","private static void init(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  List<String> repositoryComponentNames=new ArrayList<String>();
  List<String> dndFilterIds=new ArrayList<String>();
  List<String> componentIds=new ArrayList<String>();
  for (  IConfigurationElement element : configurationElements) {
    if (element.getName().equals(""String_Node_Str"")) {
      List<String> filterAttrs=getFilterAttrs(element,""String_Node_Str"",""String_Node_Str"");
      repositoryComponentNames.addAll(filterAttrs);
      filterAttrs=getFilterAttrs(element,""String_Node_Str"",""String_Node_Str"");
      dndFilterIds.addAll(filterAttrs);
      filterAttrs=getFilterAttrs(element,""String_Node_Str"",""String_Node_Str"");
      componentIds.addAll(filterAttrs);
    }
  }
  for (  IConfigurationElement element : configurationElements) {
    if (element.getName().equals(""String_Node_Str"")) {
      String name=element.getAttribute(""String_Node_Str"");
      if (repositoryComponentNames.contains(name)) {
        continue;
      }
      String type=element.getAttribute(""String_Node_Str"");
      boolean withSchema=Boolean.parseBoolean(element.getAttribute(""String_Node_Str""));
      String input=element.getAttribute(""String_Node_Str"");
      String output=element.getAttribute(""String_Node_Str"");
      String def=element.getAttribute(""String_Node_Str"");
      IRepositoryComponentAgent agent=null;
      if (element.getAttribute(""String_Node_Str"") != null) {
        try {
          Object object=element.createExecutableExtension(""String_Node_Str"");
          if (object != null && (object instanceof IRepositoryComponentAgent)) {
            agent=(IRepositoryComponentAgent)object;
          }
        }
 catch (        Exception e) {
        }
      }
      RepositoryComponentSetting setting=new RepositoryComponentSetting();
      setting.setName(name);
      setting.setRepositoryType(type);
      setting.setWithSchema(withSchema);
      setting.setInputComponent(input);
      setting.setOutputComponent(output);
      setting.setDefaultComponent(def);
      setting.setClasses(retrieveClasses(element));
      setting.setDbTypes(retrieveDBTypes(element));
      setting.setAgent(agent);
      repComponentSettings.add(setting);
    }
 else     if (element.getName().equals(""String_Node_Str"")) {
      String id=element.getAttribute(""String_Node_Str"");
      if (dndFilterIds.contains(id)) {
        continue;
      }
      String name=element.getAttribute(""String_Node_Str"");
      int level=parserLevel(element.getAttribute(""String_Node_Str""));
      IRepositoryComponentDndFilter filter=null;
      try {
        Object object=element.createExecutableExtension(""String_Node_Str"");
        if (object == null || !(object instanceof IRepositoryComponentDndFilter)) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        filter=(IRepositoryComponentDndFilter)object;
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
      RepositoryComponentDndFilterSetting dndSetting=new RepositoryComponentDndFilterSetting();
      dndSetting.setId(id);
      dndSetting.setName(name);
      dndSetting.setLevel(level);
      dndSetting.setFilter(filter);
      repComponentDndFilterSettings.add(dndSetting);
    }
 else     if (element.getName().equals(""String_Node_Str"")) {
      retrieveSortedComponent(componentIds,sortedComponentSetting,element,""String_Node_Str"");
      retrieveSortedComponent(componentIds,specialSortedComponentSetting,element,""String_Node_Str"");
    }
  }
}",0.9829821717990276
128438,"public int compare(SortedComponentSetting o1,SortedComponentSetting o2){
  return o1.getLevel() - o2.getLevel();
}","@Override public int compare(SortedComponentSetting o1,SortedComponentSetting o2){
  return o1.getLevel() - o2.getLevel();
}",0.957983193277311
128439,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Class<Item>[] retrieveClasses(IConfigurationElement parent){
  IConfigurationElement[] children=parent.getChildren(""String_Node_Str"");
  List<Class<Item>> list=new ArrayList<Class<Item>>();
  for (  IConfigurationElement ce : children) {
    String className=ce.getAttribute(""String_Node_Str"");
    try {
      Class clazz=Class.forName(className);
      list.add(clazz);
    }
 catch (    ClassNotFoundException e) {
      ExceptionHandler.process(e);
    }
  }
  return list.toArray(new Class[0]);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static Class<Item>[] retrieveClasses(IConfigurationElement parent){
  IConfigurationElement[] children=parent.getChildren(""String_Node_Str"");
  List<Class<Item>> list=new ArrayList<Class<Item>>();
  for (  IConfigurationElement ce : children) {
    String className=ce.getAttribute(""String_Node_Str"");
    try {
      IContributor contributor=ce.getContributor();
      Bundle bundle=ContributorFactoryOSGi.resolve(contributor);
      Class clazz=bundle.loadClass(className);
      list.add(clazz);
    }
 catch (    ClassNotFoundException e) {
      ExceptionHandler.process(e);
    }
  }
  return list.toArray(new Class[0]);
}",0.8846761453396524
128440,"private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}","private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (!repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_OTHER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}",0.9969450101832994
128441,"private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    if (column.getTaggedValue().size() > 0) {
      for (      TaggedValue tv : column.getTaggedValue()) {
        String additionalTag=tv.getTag();
        if (additionalTag.startsWith(""String_Node_Str"")) {
          String[] splits=additionalTag.split(""String_Node_Str"");
          additionalTag=splits[1];
        }
        newColumn.getAdditionalField().put(additionalTag,tv.getValue());
      }
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  return result;
}","private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    if (column.getTaggedValue().size() > 0) {
      for (      TaggedValue tv : column.getTaggedValue()) {
        String additionalTag=tv.getTag();
        if (additionalTag.startsWith(""String_Node_Str"")) {
          String[] splits=additionalTag.split(""String_Node_Str"");
          additionalTag=splits[1];
        }
        newColumn.getAdditionalField().put(additionalTag,tv.getValue());
      }
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  Map<String,String> newProperties=result.getAdditionalProperties();
  EMap<String,String> oldProperties=old.getAdditionalProperties();
  for (Iterator<Entry<String,String>> iterator=oldProperties.iterator(); iterator.hasNext(); ) {
    Entry<String,String> entry=iterator.next();
    newProperties.put(entry.getKey(),entry.getValue());
  }
  return result;
}",0.9394087865425444
128442,"public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.getComponent().getOriginalFamilyName().startsWith(ELT_LABEL);
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent && (!eltComponent),hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}","public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.isELTComponent();
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataToolHelper.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}",0.9811033608116676
128443,"public static boolean showContextdialog(IProcess2 process,ContextItem contextItem,IContextManager contextManager,Map<String,Set<String>> addedVarsMap,Set<String> addedVars){
  boolean isAddContext=false;
  ShowAddedContextdialog showDialog=new ShowAddedContextdialog(addedVarsMap,true);
  if (showDialog.open() == Window.OK) {
    List<ContextItem> selectedContextItems=new ArrayList<ContextItem>();
    selectedContextItems.add(contextItem);
    Set<String> groupSet=new HashSet<String>();
    for (    ContextType type : (List<ContextType>)contextItem.getContext()) {
      groupSet.add(type.getName());
    }
    Set<String> curGroupSet=new HashSet<String>();
    for (    IContext context : contextManager.getListContext()) {
      curGroupSet.add(context.getName());
    }
    Set<String> contextGoupNameSet=new HashSet<String>();
    if (!curGroupSet.containsAll(groupSet)) {
      SelectRepositoryContextGroupDialog groupDialog=new SelectRepositoryContextGroupDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),contextManager,new ContextManagerHelper(contextManager),selectedContextItems);
      if (Dialog.OK == groupDialog.open()) {
        contextGoupNameSet=groupDialog.getSelectedContextGroupName();
      }
    }
    addContextVarForJob(process,contextItem,contextManager,addedVars,contextGoupNameSet);
    isAddContext=true;
  }
  return isAddContext;
}","public static boolean showContextdialog(IProcess2 process,ContextItem contextItem,IContextManager contextManager,Map<String,Set<String>> addedVarsMap,Set<String> addedVars){
  boolean isAddContext=false;
  ShowAddedContextdialog showDialog=new ShowAddedContextdialog(addedVarsMap,true);
  if (showDialog.open() == Window.OK) {
    if (ConnectionContextHelper.containsVariable(contextManager)) {
      Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,addedVars,contextManager,false);
      if (addedContext != null && addedContext.size() > 0) {
        ConnectionContextHelper.addContextVarForJob(process,contextItem,addedVars);
      }
    }
 else {
      List<ContextItem> selectedContextItems=new ArrayList<ContextItem>();
      selectedContextItems.add(contextItem);
      Set<String> groupSet=new HashSet<String>();
      for (      ContextType type : (List<ContextType>)contextItem.getContext()) {
        groupSet.add(type.getName());
      }
      Set<String> curGroupSet=new HashSet<String>();
      for (      IContext context : contextManager.getListContext()) {
        curGroupSet.add(context.getName());
      }
      Set<String> contextGoupNameSet=new HashSet<String>();
      if (!curGroupSet.containsAll(groupSet)) {
        SelectRepositoryContextGroupDialog groupDialog=new SelectRepositoryContextGroupDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),contextManager,new ContextManagerHelper(contextManager),selectedContextItems);
        if (Dialog.OK == groupDialog.open()) {
          contextGoupNameSet=groupDialog.getSelectedContextGroupName();
        }
      }
      addContextVarForJob(process,contextItem,contextManager,addedVars,contextGoupNameSet);
    }
    isAddContext=true;
  }
  return isAddContext;
}",0.8708556994000631
128444,"/** 
 * Export the resources contained in the previously-defined resourcesToExport collection.
 */
protected void exportSpecifiedResources() throws InterruptedException {
  for (  ExportFileResource fileResource : resourcesListToExport) {
    String rootName=fileResource.getDirectoryName();
    Set<String> paths=fileResource.getRelativePathList();
    for (Iterator iter=paths.iterator(); iter.hasNext(); ) {
      String relativePath=(String)iter.next();
      Set<URL> resource=fileResource.getResourcesByRelativePath(relativePath);
      for (      URL url : resource) {
        String currentResource=url.getPath();
        exportResource(rootName,relativePath,currentResource,1);
      }
    }
  }
}","/** 
 * Export the resources contained in the previously-defined resourcesToExport collection.
 */
protected void exportSpecifiedResources() throws InterruptedException {
  for (  ExportFileResource fileResource : resourcesListToExport) {
    String rootName=fileResource.getDirectoryName();
    Set<String> paths=fileResource.getRelativePathList();
    for (Iterator iter=paths.iterator(); iter.hasNext(); ) {
      String relativePath=(String)iter.next();
      Set<URL> resource=fileResource.getResourcesByRelativePath(relativePath);
      for (      URL url : resource) {
        String currentResource=FilesUtils.getFileRealPath(url.getPath());
        exportResource(rootName,relativePath,currentResource,1);
      }
    }
  }
}",0.9708333333333332
128445,"/** 
 * DOC connection created by TOS need to fill the basic information for useing in TOP.<br>
 * @param conn
 * @return
 */
public static Connection fillConnectionInformation(ConnectionItem connItem){
  boolean saveFlag=false;
  Connection conn=connItem.getConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(conn);
  List<Schema> schemas=ConnectionHelper.getSchema(conn);
  boolean isNeedToFill=false;
  if (conn instanceof DatabaseConnection) {
    String dbProductID=((DatabaseConnection)conn).getProductId();
    if (ConnectionHelper.getAllSchemas(conn).isEmpty() && (EDatabaseTypeName.MSSQL05_08.getProduct().equals(dbProductID) || EDatabaseTypeName.MSSQL.getProduct().equals(dbProductID))) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.AS400.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.PSQL.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
  }
  if ((catalogs.isEmpty() && schemas.isEmpty()) || isNeedToFill) {
    DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
    if (dbConn != null) {
      saveFlag=true;
      conn=fillDbConnectionInformation(dbConn);
    }
  }
  if (saveFlag && conn != null) {
    try {
      ProxyRepositoryFactory.getInstance().save(connItem);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
  }
  return conn;
}","/** 
 * DOC connection created by TOS need to fill the basic information for useing in TOP.<br>
 * @param conn
 * @return
 */
public static Connection fillConnectionInformation(ConnectionItem connItem,IMetadataConnection metadataConnection){
  boolean saveFlag=false;
  Connection conn=connItem.getConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(conn);
  List<Schema> schemas=ConnectionHelper.getSchema(conn);
  boolean isNeedToFill=false;
  if (conn instanceof DatabaseConnection) {
    String dbProductID=((DatabaseConnection)conn).getProductId();
    if (ConnectionHelper.getAllSchemas(conn).isEmpty() && (EDatabaseTypeName.MSSQL05_08.getProduct().equals(dbProductID) || EDatabaseTypeName.MSSQL.getProduct().equals(dbProductID))) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.AS400.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.PSQL.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
  }
  if ((catalogs.isEmpty() && schemas.isEmpty()) || isNeedToFill) {
    DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
    if (dbConn != null) {
      saveFlag=true;
      conn=fillDbConnectionInformation(dbConn,metadataConnection);
    }
  }
  if (saveFlag && conn != null) {
    try {
      ProxyRepositoryFactory.getInstance().save(connItem);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
  }
  return conn;
}",0.9798890429958392
128446,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9439775910364144
128447,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      if (EDatabaseTypeName.VERTICA.equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(connection.getDbVersionString())) {
        driverClass=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      if (creation) {
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.openConnectionEditor(connectionItem);
      }
 else {
        tdqRepService.removeAliasInSQLExplorer(node);
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.refreshConnectionEditor(connectionItem);
      }
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.refresh(node.getParent());
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      if (EDatabaseTypeName.VERTICA.equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(connection.getDbVersionString())) {
        driverClass=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem,metadataConnection);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      if (creation) {
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.openConnectionEditor(connectionItem);
      }
 else {
        tdqRepService.removeAliasInSQLExplorer(node);
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.refreshConnectionEditor(connectionItem);
      }
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.refresh(node.getParent());
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}",0.9987059865150174
128448,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      metadataColumn.setOriginalField(metadataColumn.getLabel());
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField.getNodeValue() != null) {
        String originalFieldValue=MetadataToolHelper.validateColumnName(originalField.getNodeValue(),0);
        metadataColumn.setOriginalField(originalFieldValue);
      }
 else {
        metadataColumn.setOriginalField(metadataColumn.getLabel());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9786882537584668
128449,"@Override public boolean canModify(Object bean){
  return super.canModify(bean) && canModifyDBColumn(bean);
}","@Override public boolean canModify(Object bean){
  return super.canModify(bean);
}",0.8586387434554974
128450,"/** 
 * DOC amaumont Comment method ""configureNameColumn"".
 * @param tableViewerCreator
 */
protected void configureDbColumnName(TableViewerCreator<B> tableViewerCreator){
  TableViewerCreatorColumn column;
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setId(ID_COLUMN_DBCOLUMNNAME);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(getDbColumnNameAccessor());
  column.setWeight(25);
  column.setModifiable(!isReadOnly());
  column.setMinimumWidth(45);
  final TextCellEditor cellEditor=new TextCellEditor(tableViewerCreator.getTable());
  column.setCellEditor(cellEditor);
  column.setColumnCellModifier(new ColumnCellModifier(column){
    @Override public boolean canModify(    Object bean){
      return super.canModify(bean) && canModifyDBColumn(bean);
    }
  }
);
  if (!dbColumnNameWritable) {
    column.setColorProvider(new IColumnColorProvider(){
      public Color getBackgroundColor(      Object bean){
        return READONLY_CELL_BG_COLOR;
      }
      public Color getForegroundColor(      Object bean){
        return null;
      }
    }
);
  }
}","/** 
 * DOC amaumont Comment method ""configureNameColumn"".
 * @param tableViewerCreator
 */
protected void configureDbColumnName(TableViewerCreator<B> tableViewerCreator){
  TableViewerCreatorColumn column;
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setId(ID_COLUMN_DBCOLUMNNAME);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(getDbColumnNameAccessor());
  column.setWeight(25);
  column.setModifiable(!isReadOnly());
  column.setMinimumWidth(45);
  final TextCellEditor cellEditor=new TextCellEditor(tableViewerCreator.getTable());
  column.setCellEditor(cellEditor);
  column.setColumnCellModifier(new ColumnCellModifier(column){
    @Override public boolean canModify(    Object bean){
      return super.canModify(bean);
    }
  }
);
  if (!dbColumnNameWritable) {
    column.setColorProvider(new IColumnColorProvider(){
      public Color getBackgroundColor(      Object bean){
        return READONLY_CELL_BG_COLOR;
      }
      public Color getForegroundColor(      Object bean){
        return null;
      }
    }
);
  }
}",0.9883770985794232
128451,"/** 
 * DOC connection created by TOS need to fill the basic information for useing in TOP.<br>
 * @param conn
 * @return
 */
public static Connection fillConnectionInformation(ConnectionItem connItem){
  boolean saveFlag=false;
  Connection conn=connItem.getConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(conn);
  List<Schema> schemas=ConnectionHelper.getSchema(conn);
  boolean isNeedToFill=false;
  if (conn instanceof DatabaseConnection) {
    String dbProductID=((DatabaseConnection)conn).getProductId();
    if (ConnectionHelper.getAllSchemas(conn).isEmpty() && (EDatabaseTypeName.MSSQL05_08.getProduct().equals(dbProductID) || EDatabaseTypeName.MSSQL.getProduct().equals(dbProductID))) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.AS400.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.PSQL.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
  }
  if ((catalogs.isEmpty() && schemas.isEmpty()) || isNeedToFill) {
    DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
    if (dbConn != null) {
      saveFlag=true;
      conn=fillDbConnectionInformation(dbConn);
    }
  }
  if (saveFlag && conn != null) {
    try {
      ProxyRepositoryFactory.getInstance().save(connItem);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
  }
  return conn;
}","/** 
 * DOC connection created by TOS need to fill the basic information for useing in TOP.<br>
 * @param conn
 * @return
 */
public static Connection fillConnectionInformation(ConnectionItem connItem,IMetadataConnection metadataConnection){
  boolean saveFlag=false;
  Connection conn=connItem.getConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(conn);
  List<Schema> schemas=ConnectionHelper.getSchema(conn);
  boolean isNeedToFill=false;
  if (conn instanceof DatabaseConnection) {
    String dbProductID=((DatabaseConnection)conn).getProductId();
    if (ConnectionHelper.getAllSchemas(conn).isEmpty() && (EDatabaseTypeName.MSSQL05_08.getProduct().equals(dbProductID) || EDatabaseTypeName.MSSQL.getProduct().equals(dbProductID))) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.AS400.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
 else     if (EDatabaseTypeName.PSQL.getProduct().equals(dbProductID)) {
      isNeedToFill=true;
    }
  }
  if ((catalogs.isEmpty() && schemas.isEmpty()) || isNeedToFill) {
    DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
    if (dbConn != null) {
      saveFlag=true;
      conn=fillDbConnectionInformation(dbConn,metadataConnection);
    }
  }
  if (saveFlag && conn != null) {
    try {
      ProxyRepositoryFactory.getInstance().save(connItem);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
  }
  return conn;
}",0.9798890429958392
128452,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9439775910364144
128453,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh(node);
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem,metadataConnection);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh(node);
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}",0.9986164712735746
128454,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          CWMService cwmService=new TalendCWMService();
          Schema schema=SchemaHelper.createSchema(cwmService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          CWMService cwmService=new TalendCWMService();
          Schema schema=SchemaHelper.createSchema(cwmService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9947305389221556
128455,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        if (!ConnectionUtils.isSybase(databaseMetaData)) {
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9743404409107336
128456,"public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
}","public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    if (!(""String_Node_Str"").equals(newValue)) {
      text.setText(newValue);
    }
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
}",0.9492354740061162
128457,"protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}","protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            if (!(""String_Node_Str"").equals(newValue)) {
              text.setText(newValue);
            }
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}",0.982388419782871
128458,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      if (!dbConn.isContextMode()) {
        String sid=((DatabaseConnection)dbConn).getSID();
        if (sid != null && sid.length() > 0) {
          schemaFilter.add(sid);
        }
      }
 else {
        IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
        String sid=iMetadataCon.getDatabase();
        if (sid != null && sid.length() > 0) {
          schemaFilter.add(sid);
        }
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      if (!dbConn.isContextMode()) {
        String sid=((DatabaseConnection)dbConn).getSID();
        if (sid != null && sid.length() > 0) {
          schemaFilter.add(sid);
        }
      }
 else {
        IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
        String sid=iMetadataCon.getDatabase();
        if (sid != null && sid.length() > 0) {
          schemaFilter.add(sid);
        }
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9943748401943237
128459,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=MetadataFillFactory.getDBInstance().fillUIParams(dbConn);
      String databaseType=metaConnection.getDbType();
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        if (!ConnectionUtils.isSybase(databaseMetaData)) {
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=MetadataFillFactory.getDBInstance().fillUIParams(dbConn);
      String databaseType=metaConnection.getDbType();
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.975709887102292
128460,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9947140797693416
128461,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        if (!ConnectionUtils.isSybase(databaseMetaData)) {
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9743404409107336
128462,"public static boolean showContextdialog(IProcess2 process,ContextItem contextItem,IContextManager contextManager,Map<String,Set<String>> addedVarsMap,Set<String> addedVars){
  boolean isAddContext=false;
  ShowAddedContextdialog showDialog=new ShowAddedContextdialog(addedVarsMap,true);
  if (showDialog.open() == Window.OK) {
    List<ContextItem> selectedContextItems=new ArrayList<ContextItem>();
    selectedContextItems.add(contextItem);
    Set<String> groupSet=new HashSet<String>();
    for (    ContextType type : (List<ContextType>)contextItem.getContext()) {
      groupSet.add(type.getName());
    }
    Set<String> curGroupSet=new HashSet<String>();
    for (    IContext context : contextManager.getListContext()) {
      curGroupSet.add(context.getName());
    }
    Set<String> contextGoupNameSet=new HashSet<String>();
    if (!curGroupSet.containsAll(groupSet)) {
      SelectRepositoryContextGroupDialog groupDialog=new SelectRepositoryContextGroupDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),contextManager,new ContextManagerHelper(contextManager),selectedContextItems);
      if (Dialog.OK == groupDialog.open()) {
        contextGoupNameSet=groupDialog.getSelectedContextGroupName();
      }
    }
    addContextVarForJob(process,contextItem,contextManager,addedVars,contextGoupNameSet);
    isAddContext=true;
  }
  return isAddContext;
}","public static boolean showContextdialog(IProcess2 process,ContextItem contextItem,IContextManager contextManager,Map<String,Set<String>> addedVarsMap,Set<String> addedVars){
  boolean isAddContext=false;
  ShowAddedContextdialog showDialog=new ShowAddedContextdialog(addedVarsMap,true);
  if (showDialog.open() == Window.OK) {
    if (ConnectionContextHelper.containsVariable(contextManager)) {
      Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,addedVars,contextManager,false);
      if (addedContext != null && addedContext.size() > 0) {
        ConnectionContextHelper.addContextVarForJob(process,contextItem,addedVars);
      }
    }
 else {
      List<ContextItem> selectedContextItems=new ArrayList<ContextItem>();
      selectedContextItems.add(contextItem);
      Set<String> groupSet=new HashSet<String>();
      for (      ContextType type : (List<ContextType>)contextItem.getContext()) {
        groupSet.add(type.getName());
      }
      Set<String> curGroupSet=new HashSet<String>();
      for (      IContext context : contextManager.getListContext()) {
        curGroupSet.add(context.getName());
      }
      Set<String> contextGoupNameSet=new HashSet<String>();
      if (!curGroupSet.containsAll(groupSet)) {
        SelectRepositoryContextGroupDialog groupDialog=new SelectRepositoryContextGroupDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),contextManager,new ContextManagerHelper(contextManager),selectedContextItems);
        if (Dialog.OK == groupDialog.open()) {
          contextGoupNameSet=groupDialog.getSelectedContextGroupName();
        }
      }
      addContextVarForJob(process,contextItem,contextManager,addedVars,contextGoupNameSet);
    }
    isAddContext=true;
  }
  return isAddContext;
}",0.8708556994000631
128463,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      metadataColumn.setOriginalField(metadataColumn.getLabel());
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField.getNodeValue() != null) {
        String originalFieldValue=MetadataToolHelper.validateColumnName(originalField.getNodeValue(),0);
        metadataColumn.setOriginalField(originalFieldValue);
      }
 else {
        metadataColumn.setOriginalField(metadataColumn.getLabel());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9786882537584668
128464,"@Override public boolean canModify(Object bean){
  return super.canModify(bean) && canModifyDBColumn(bean);
}","@Override public boolean canModify(Object bean){
  return super.canModify(bean);
}",0.8586387434554974
128465,"/** 
 * DOC amaumont Comment method ""configureNameColumn"".
 * @param tableViewerCreator
 */
protected void configureDbColumnName(TableViewerCreator<B> tableViewerCreator){
  TableViewerCreatorColumn column;
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setId(ID_COLUMN_DBCOLUMNNAME);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(getDbColumnNameAccessor());
  column.setWeight(25);
  column.setModifiable(!isReadOnly());
  column.setMinimumWidth(45);
  final TextCellEditor cellEditor=new TextCellEditor(tableViewerCreator.getTable());
  column.setCellEditor(cellEditor);
  column.setColumnCellModifier(new ColumnCellModifier(column){
    @Override public boolean canModify(    Object bean){
      return super.canModify(bean) && canModifyDBColumn(bean);
    }
  }
);
  if (!dbColumnNameWritable) {
    column.setColorProvider(new IColumnColorProvider(){
      public Color getBackgroundColor(      Object bean){
        return READONLY_CELL_BG_COLOR;
      }
      public Color getForegroundColor(      Object bean){
        return null;
      }
    }
);
  }
}","/** 
 * DOC amaumont Comment method ""configureNameColumn"".
 * @param tableViewerCreator
 */
protected void configureDbColumnName(TableViewerCreator<B> tableViewerCreator){
  TableViewerCreatorColumn column;
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setId(ID_COLUMN_DBCOLUMNNAME);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(getDbColumnNameAccessor());
  column.setWeight(25);
  column.setModifiable(!isReadOnly());
  column.setMinimumWidth(45);
  final TextCellEditor cellEditor=new TextCellEditor(tableViewerCreator.getTable());
  column.setCellEditor(cellEditor);
  column.setColumnCellModifier(new ColumnCellModifier(column){
    @Override public boolean canModify(    Object bean){
      return super.canModify(bean);
    }
  }
);
  if (!dbColumnNameWritable) {
    column.setColorProvider(new IColumnColorProvider(){
      public Color getBackgroundColor(      Object bean){
        return READONLY_CELL_BG_COLOR;
      }
      public Color getForegroundColor(      Object bean){
        return null;
      }
    }
);
  }
}",0.9883770985794232
128466,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection){
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection){
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
    temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}",0.919869174161897
128467,"public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
}","public void run(){
  if (errorMessage.equals(""String_Node_Str"")) {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    if (!(""String_Node_Str"").equals(newValue)) {
      text.setText(newValue);
    }
    text.setSelection(selection.x,selection.y);
  }
 else {
    MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
    final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
    tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
    text.setText(newValue);
    text.setSelection(selection.x,selection.y);
  }
}",0.9492354740061162
128468,"protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}","protected void onValueChanged(final String newValue,boolean showAlertIfError,final Object currentModifiedBean,CELL_EDITOR_STATE state){
  final Text text=(Text)cellEditor.getControl();
  final ModifiedObjectInfo modifiedObjectInfo=tableViewerCreator.getModifiedObjectInfo();
  Object originalValue=modifiedObjectInfo.getOriginalPropertyBeanValue();
  lastValidValue=lastValidValue != null && state == CELL_EDITOR_STATE.EDITING ? lastValidValue : originalValue;
  int beanPosition=tableViewerCreator.getInputList().indexOf(currentModifiedBean);
  final String errorMessage=validateValue(newValue,beanPosition);
  if (errorMessage == null) {
    newValidValueTyped(beanPosition,lastValidValue,newValue,state);
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    lastValidValue=newValue;
  }
 else {
    text.setBackground(text.getDisplay().getSystemColor(SWT.COLOR_RED));
    if (showAlertIfError) {
      final Point selection=text.getSelection();
      text.setText(lastValidValue.toString());
      new AsynchronousThreading(20,false,text.getDisplay(),new Runnable(){
        public void run(){
          if (errorMessage.equals(""String_Node_Str"")) {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            if (!(""String_Node_Str"").equals(newValue)) {
              text.setText(newValue);
            }
            text.setSelection(selection.x,selection.y);
          }
 else {
            MessageDialog.openError(text.getShell(),Messages.getString(""String_Node_Str""),errorMessage);
            final int columnPosition=tableViewerCreator.getColumns().indexOf(column);
            tableViewerCreator.getTableViewer().editElement(currentModifiedBean,columnPosition);
            text.setText(newValue);
            text.setSelection(selection.x,selection.y);
          }
        }
      }
).start();
    }
  }
}",0.982388419782871
128469,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      String wapperDriverKey=EDatabase4DriverClassName.MSSQL.getDriverClass() + ""String_Node_Str"";
      String connectionKey=EDatabase4DriverClassName.MSSQL.getDriverClass() + ""String_Node_Str"";
      if (DRIVER_CACHE.containsKey(wapperDriverKey) && DRIVER_CACHE.containsKey(connectionKey)) {
        Object object1=DRIVER_CACHE.get(wapperDriverKey);
        if (object1 != null && object1 instanceof DriverShim) {
          wapperDriver=(DriverShim)object1;
        }
        Object object2=DRIVER_CACHE.get(connectionKey);
        if (object2 != null && object2 instanceof Connection) {
          connection=(Connection)object2;
        }
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(wapperDriverKey,wapperDriver);
          DRIVER_CACHE.put(connectionKey,connection);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.8688352570828961
128470,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh(node);
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh(node);
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}",0.98894131524624
128471,"public CsvArray convertNode(ConnectionItem connectionItem,String tableName) throws ProcessorException ;","public CsvArray convertNode(ConnectionItem connectionItem,IMetadataConnection convertedConnection,String tableName) throws ProcessorException ;",0.8373983739837398
128472,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection){
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=(java.sql.Connection)MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection){
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=(java.sql.Connection)MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}",0.9822380106571936
128473,"/** 
 * ggu Comment method ""setManagerConnectionValues"". set the ManagerConnection parameter and return the url string connection.
 */
public static String setManagerConnectionValues(ManagerConnection managerConnection,ConnectionItem connectionItem,final String dbType,final int dbTypeIndex){
  if (managerConnection == null || connectionItem == null || dbType == null || dbTypeIndex < 0) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String driverClassName=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String driverJarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbVersionString=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbVersionString());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  String urlConnection;
  if (dbConn.getDatabaseType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
    urlConnection=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  }
 else {
    urlConnection=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
  }
  if (dbConn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
    schemaOracle=schemaOracle.toUpperCase();
  }
  managerConnection.setValue(0,dbType,urlConnection,server,username,password,sidOrDatabase,port,filePath,datasource,schemaOracle,additionParam,driverClassName,driverJarPath,dbVersionString);
  managerConnection.setDbRootPath(dbRootPath);
  return urlConnection;
}","public static String setManagerConnectionValues(ManagerConnection managerConnection,ConnectionItem connectionItem,final String dbType,final int dbTypeIndex){
  return setManagerConnectionValues(managerConnection,connectionItem,null,dbType,dbTypeIndex);
}",0.1264330167048804
128474,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,dbConn.getContextName(),defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9953248031496064
128475,"/** 
 * fill the catalog and schemas into Postgresql database connection.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalogList
 * @return
 */
private List<Catalog> fillPostgresqlCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<Catalog> catalogList){
  DatabaseConnection databaseConnection=(DatabaseConnection)dbConn;
  String catalogName=databaseConnection.getSID();
  if (StringUtils.isEmpty(catalogName)) {
    catalogName=databaseConnection.getUsername();
  }
  if (StringUtils.isNotEmpty(catalogName)) {
    List<String> filterList=new ArrayList<String>();
    filterList.addAll(postFillCatalog(catalogList,filterList,TalendCWMService.getReadableName(dbConn,catalogName),dbConn));
    for (    Catalog catalog : catalogList) {
      List<Schema> schemaList=new ArrayList<Schema>();
      try {
        schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
        if (!schemaList.isEmpty() && schemaList.size() > 0) {
          CatalogHelper.addSchemas(schemaList,catalog);
        }
      }
 catch (      Throwable e) {
        log.info(e);
      }
      ConnectionHelper.addCatalog(catalog,dbConn);
    }
  }
  return catalogList;
}","/** 
 * fill the catalog and schemas into Postgresql database connection.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalogList
 * @return
 */
private List<Catalog> fillPostgresqlCatalogs(IMetadataConnection metaConnection,Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<Catalog> catalogList){
  DatabaseConnection databaseConnection=(DatabaseConnection)dbConn;
  String catalogName=databaseConnection.getSID();
  if (StringUtils.isEmpty(catalogName)) {
    catalogName=databaseConnection.getUsername();
  }
  if (StringUtils.isNotEmpty(catalogName)) {
    List<String> filterList=new ArrayList<String>();
    filterList.addAll(postFillCatalog(metaConnection,catalogList,filterList,TalendCWMService.getReadableName(dbConn,catalogName),dbConn));
    for (    Catalog catalog : catalogList) {
      List<Schema> schemaList=new ArrayList<Schema>();
      try {
        schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
        if (!schemaList.isEmpty() && schemaList.size() > 0) {
          CatalogHelper.addSchemas(schemaList,catalog);
        }
      }
 catch (      Throwable e) {
        log.info(e);
      }
      ConnectionHelper.addCatalog(catalog,dbConn);
    }
  }
  return catalogList;
}",0.9793388429752066
128476,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> filterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (!isNullSID(dbConn) && dbConn != null) {
          String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
          postFillCatalog(catalogList,filterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
          break;
        }
 else         if (isCreateElement(catalogFilter,catalogName)) {
          postFillCatalog(catalogList,filterList,catalogName,dbConn);
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (filterList != null) {
                    if (filterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> filterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (!isNullSID(dbConn) && dbConn != null) {
          String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
          postFillCatalog(metaConnection,catalogList,filterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
          break;
        }
 else         if (isCreateElement(catalogFilter,catalogName)) {
          postFillCatalog(metaConnection,catalogList,filterList,catalogName,dbConn);
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (filterList != null) {
                    if (filterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9890094698278842
128477,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9714285714285714
128478,"private List<String> postFillCatalog(List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}","private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.988313856427379
128479,"/** 
 * zshen Comment method ""fillSchemas"".
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the schemas intothe object of connection.And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param Filter The list for filter schemas which you want to get.If it is null all of schenas which belong to theconnection will be return.
 * @return The list of schemas after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> Filter);","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> Filter);",0.260978670012547
128480,"/** 
 * zshen Comment method ""fillUIParams"". convert a DatabaseConnection object to IMetadataConnection
 * @deprecated
 * @see {@link org.talend.core.model.metadata.builder.ConvertionHelper#fillUIParams(IMetadataConnection,DatabaseConnection)}
 * @param conn
 * @return null only if conn is null
 */
public IMetadataConnection fillUIParams(DatabaseConnection conn);","/** 
 * zshen Comment method ""fillUIParams"". convert a DatabaseConnection object to IMetadataConnection
 * @deprecated
 * @see {@link org.talend.core.model.metadata.builder.ConvertionHelper#fillUIParams(IMetadataConnection,DatabaseConnection)}
 * @param conn
 * @return null only if conn is null
 */
@Deprecated public IMetadataConnection fillUIParams(DatabaseConnection conn);",0.9838274932614556
128481,"/** 
 * DOC zshen Comment method ""fillCatalogs"".
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the catalogs intothe object of connection. And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param catalogFilter The list for filter catalogs which you want get.If it is null all of catalogs which belongto the connection will be return.
 * @return The list of catalogs after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter);","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter);",0.2708585247883918
128482,"public List<orgomg.cwm.objectmodel.core.Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<TdXmlSchema> xmlDocs=new ArrayList<TdXmlSchema>();
  try {
    XtentisBindingStub stub=MetadataConnectionUtils.getXtentisBindingStub((MDMConnection)dbConn);
    WSDataModelPK[] pks=stub.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str""));
    String techXSDFolderName=getTechXSDFolderName();
    for (    WSDataModelPK pk : pks) {
      if (isCreateElement(schemaFilter,pk.getPk())) {
        adaptToCWMDocument(xmlDocs,stub,pk.getPk(),techXSDFolderName,dbConn);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  ConnectionHelper.addXMLDocuments(xmlDocs);
  return ListUtils.castList(orgomg.cwm.objectmodel.core.Package.class,xmlDocs);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> Filter){
  return null;
}",0.3002070393374741
128483,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
  return null;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  return null;
}",0.8805460750853242
128484,"/** 
 * Fill the catalog with the restrain of catalogFilter, note that if the database name (e.g SID for SQL server ) on connection wizard UI is set, then this method will only return one catalog with this name.
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the catalogs intothe object of connection. And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param catalogFilter The list for filter catalogs which you want get.If it is null all of catalogs which belongto the connection will be return.
 * @return The list of catalogs after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
  return metadataFiller.fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  return metadataFiller.fillCatalogs(dbConn,dbJDBCMetadata,metaConnection,catalogFilter);
}",0.3261432269197584
128485,"/** 
 * Fill the schema with the restrain of schemaFilter, note that if the schema name (e.g UISchema for Oracle ) on connection wizard UI is set, then this method will only return one schema with this name.
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the schemas intothe object of connection.And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param Filter The list for filter schemas which you want to get.If it is null all of schenas which belong to theconnection will be return.
 * @return The list of schemas after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  return metadataFiller.fillSchemas(dbConn,dbJDBCMetadata,schemaFilter);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  return metadataFiller.fillSchemas(dbConn,dbJDBCMetadata,metaConnection,schemaFilter);
}",0.3251318101933216
128486,"public static String parseTo_String(String s){
  return s;
}","public static String parseTo_String(final List<String> s,String fieldSep){
  if (s == null) {
    return null;
  }
  StringBuffer result=new StringBuffer();
  result.append(""String_Node_Str"");
  for (int i=0; i < s.size(); i++) {
    if (i != 0) {
      result.append(fieldSep);
    }
    result.append(s.get(i));
  }
  result.append(""String_Node_Str"");
  return result.toString();
}",0.1896162528216704
128487,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9869894676642996
128488,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.914587852494577
128489,"public static String parseTo_String(String s){
  return s;
}","public static String parseTo_String(final List<String> s,String fieldSep){
  if (s == null) {
    return null;
  }
  StringBuffer result=new StringBuffer();
  result.append(""String_Node_Str"");
  for (int i=0; i < s.size(); i++) {
    if (i != 0) {
      result.append(fieldSep);
    }
    result.append(s.get(i));
  }
  result.append(""String_Node_Str"");
  return result.toString();
}",0.1896162528216704
128490,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
      if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
        wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
        Properties info=new Properties();
        username=username != null ? username : ""String_Node_Str"";
        pwd=pwd != null ? pwd : ""String_Node_Str"";
        info.put(""String_Node_Str"",username);
        info.put(""String_Node_Str"",pwd);
        connection=wapperDriver.connect(url,info);
      }
 else {
        JDBCDriverLoader loader=new JDBCDriverLoader();
        list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof Connection) {
              connection=(Connection)list.get(i);
            }
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
          DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        loadJarRequiredByDriver(dbType,dbVersion);
      }
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9190647482014388
128491,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
 else {
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    if (EDatabaseTypeName.MSSQL.getDisplayName().equals(dbType) && DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass()) && ""String_Node_Str"".equals(username)) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
    }
 else {
      wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    }
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        Thread.currentThread().setContextClassLoader(loader);
      }
      connection=wapperDriver.connect(url,info);
    }
    if (EDatabaseTypeName.MSSQL.getDisplayName().equals(dbType) && !DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass()) && ""String_Node_Str"".equals(username)) {
      DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
 else {
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        Thread.currentThread().setContextClassLoader(loader);
      }
      connection=wapperDriver.connect(url,info);
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9129570139207588
128492,"public CsvArray convertNode(ConnectionItem connectionItem,String tableName) throws ProcessorException ;","public CsvArray convertNode(ConnectionItem connectionItem,IMetadataConnection convertedConnection,String tableName) throws ProcessorException ;",0.8373983739837398
128493,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection){
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection){
  java.sql.Connection sqlConn=null;
  temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
  sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
  if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
    temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
  }
  String dbType=iMetadataConnection.getDbType();
  if (sqlConn != null) {
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
    MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
    MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
  }
}",0.9819004524886876
128494,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,dbConn.getContextName(),defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  if (contextType != null) {
    String encryptedPassword=null;
    try {
      encryptedPassword=PasswordEncryptUtil.encryptPassword(password);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    cloneConn.setPassword(encryptedPassword);
  }
 else {
    cloneConn.setPassword(password);
  }
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9952759820984584
128495,"/** 
 * fill the catalog and schemas into Postgresql database connection.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalogList
 * @return
 */
private List<Catalog> fillPostgresqlCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<Catalog> catalogList){
  DatabaseConnection databaseConnection=(DatabaseConnection)dbConn;
  String catalogName=databaseConnection.getSID();
  if (StringUtils.isEmpty(catalogName)) {
    catalogName=databaseConnection.getUsername();
  }
  if (StringUtils.isNotEmpty(catalogName)) {
    List<String> filterList=new ArrayList<String>();
    filterList.addAll(postFillCatalog(catalogList,filterList,catalogName,dbConn));
    for (    Catalog catalog : catalogList) {
      List<Schema> schemaList=new ArrayList<Schema>();
      try {
        schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
        if (!schemaList.isEmpty() && schemaList.size() > 0) {
          CatalogHelper.addSchemas(schemaList,catalog);
        }
      }
 catch (      Throwable e) {
        log.info(e);
      }
      ConnectionHelper.addCatalog(catalog,dbConn);
    }
  }
  return catalogList;
}","/** 
 * fill the catalog and schemas into Postgresql database connection.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalogList
 * @return
 */
private List<Catalog> fillPostgresqlCatalogs(IMetadataConnection metaConnection,Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<Catalog> catalogList){
  DatabaseConnection databaseConnection=(DatabaseConnection)dbConn;
  String catalogName=databaseConnection.getSID();
  if (StringUtils.isEmpty(catalogName)) {
    catalogName=databaseConnection.getUsername();
  }
  if (StringUtils.isNotEmpty(catalogName)) {
    List<String> filterList=new ArrayList<String>();
    filterList.addAll(postFillCatalog(metaConnection,catalogList,filterList,catalogName,dbConn));
    for (    Catalog catalog : catalogList) {
      List<Schema> schemaList=new ArrayList<Schema>();
      try {
        schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
        if (!schemaList.isEmpty() && schemaList.size() > 0) {
          CatalogHelper.addSchemas(schemaList,catalog);
        }
      }
 catch (      Throwable e) {
        log.info(e);
      }
      ConnectionHelper.addCatalog(catalog,dbConn);
    }
  }
  return catalogList;
}",0.9786142001710864
128496,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
}",0.8669201520912547
128497,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          CWMService cwmService=new TalendCWMService();
          Schema schema=SchemaHelper.createSchema(cwmService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!isNullUiSchema(dbConn) && dbConn != null) {
          String uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          CWMService cwmService=new TalendCWMService();
          Schema schema=SchemaHelper.createSchema(cwmService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.976211019351658
128498,"private List<String> postFillCatalog(List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}","private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=metaConnection;
    if (iMetadataCon == null) {
      iMetadataCon=ConvertionHelper.convert(dbConnection);
    }
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.9623430962343096
128499,"/** 
 * zshen Comment method ""fillSchemas"".
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the schemas intothe object of connection.And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param Filter The list for filter schemas which you want to get.If it is null all of schenas which belong to theconnection will be return.
 * @return The list of schemas after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> Filter);","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> Filter);",0.260978670012547
128500,"/** 
 * zshen Comment method ""fillUIParams"". convert a DatabaseConnection object to IMetadataConnection
 * @deprecated
 * @see {@link org.talend.core.model.metadata.builder.ConvertionHelper#fillUIParams(IMetadataConnection,DatabaseConnection)}
 * @param conn
 * @return null only if conn is null
 */
public IMetadataConnection fillUIParams(DatabaseConnection conn);","/** 
 * zshen Comment method ""fillUIParams"". convert a DatabaseConnection object to IMetadataConnection
 * @deprecated
 * @see {@link org.talend.core.model.metadata.builder.ConvertionHelper#fillUIParams(IMetadataConnection,DatabaseConnection)}
 * @param conn
 * @return null only if conn is null
 */
@Deprecated public IMetadataConnection fillUIParams(DatabaseConnection conn);",0.9838274932614556
128501,"/** 
 * DOC zshen Comment method ""fillCatalogs"".
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the catalogs intothe object of connection. And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param catalogFilter The list for filter catalogs which you want get.If it is null all of catalogs which belongto the connection will be return.
 * @return The list of catalogs after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter);","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter);",0.2708585247883918
128502,"public List<orgomg.cwm.objectmodel.core.Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<TdXmlSchema> xmlDocs=new ArrayList<TdXmlSchema>();
  try {
    XtentisBindingStub stub=MetadataConnectionUtils.getXtentisBindingStub((MDMConnection)dbConn);
    WSDataModelPK[] pks=stub.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str""));
    String techXSDFolderName=getTechXSDFolderName();
    for (    WSDataModelPK pk : pks) {
      if (isCreateElement(schemaFilter,pk.getPk())) {
        adaptToCWMDocument(xmlDocs,stub,pk.getPk(),techXSDFolderName,dbConn);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  ConnectionHelper.addXMLDocuments(xmlDocs);
  return ListUtils.castList(orgomg.cwm.objectmodel.core.Package.class,xmlDocs);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> Filter){
  return null;
}",0.3002070393374741
128503,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
  return null;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  return null;
}",0.8805460750853242
128504,"/** 
 * Fill the catalog with the restrain of catalogFilter, note that if the database name (e.g SID for SQL server ) on connection wizard UI is set, then this method will only return one catalog with this name.
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the catalogs intothe object of connection. And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param catalogFilter The list for filter catalogs which you want get.If it is null all of catalogs which belongto the connection will be return.
 * @return The list of catalogs after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
  return metadataFiller.fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  return metadataFiller.fillCatalogs(dbConn,dbJDBCMetadata,metaConnection,catalogFilter);
}",0.3261432269197584
128505,"/** 
 * Fill the schema with the restrain of schemaFilter, note that if the schema name (e.g UISchema for Oracle ) on connection wizard UI is set, then this method will only return one schema with this name.
 * @param dbConn the connection which you want schema to be filled.Can't be null if need to fill the schemas intothe object of connection.And if Linked is false everything is ok.
 * @param dbJDBCMetadata If it is null the method will do nothing and return null too.
 * @param Filter The list for filter schemas which you want to get.If it is null all of schenas which belong to theconnection will be return.
 * @return The list of schemas after filter.Will return null only if dbJDBCMetadata isn't normal.
 */
public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  return metadataFiller.fillSchemas(dbConn,dbJDBCMetadata,schemaFilter);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  return metadataFiller.fillSchemas(dbConn,dbJDBCMetadata,metaConnection,schemaFilter);
}",0.3251318101933216
128506,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
      s=template.getUrlTemplate(version);
    }
    if (isHbase) {
      urlConnectionStringText.setVisible(false);
    }
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        if (contextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(contextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      serverText.hide();
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      portText.hide();
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        sidOrDatabaseText.show();
        sidOrDatabaseText.setEditable(visible);
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
  }
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
      s=template.getUrlTemplate(version);
    }
    if (isHbase) {
      urlConnectionStringText.setVisible(false);
    }
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      serverText.hide();
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      portText.hide();
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        sidOrDatabaseText.show();
        sidOrDatabaseText.setEditable(visible);
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
  }
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.99239945638496
128507,"/** 
 * DOC YeXiaowei Comment method ""initializeGeneralJDBC"".
 */
private void initializeGeneralJDBC(){
  generalJdbcUrlText.setText(getConnection().getURL());
  generalJdbcClassNameText.setText(getConnection().getDriverClass());
  generalJdbcUserText.setText(getConnection().getUsername());
  generalJdbcPasswordText.setText(getConnection().getPassword());
  generalJdbcDriverjarText.setText(getConnection().getDriverJarPath());
  generalMappingFileText.setText(getConnection().getDbmsId());
  String jdbcUrlString=""String_Node_Str"";
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
    if (contextType != null) {
      jdbcUrlString=ConnectionContextHelper.getOriginalValue(contextType,getConnection().getURL());
    }
  }
 else {
    jdbcUrlString=generalJdbcUrlText.getText();
  }
  if (jdbcUrlString.contains(""String_Node_Str"")) {
    jDBCschemaText.setText(getConnection().getUiSchema());
  }
 else {
    jDBCschemaText.setHideWidgets(true);
  }
}","/** 
 * DOC YeXiaowei Comment method ""initializeGeneralJDBC"".
 */
private void initializeGeneralJDBC(){
  generalJdbcUrlText.setText(getConnection().getURL());
  generalJdbcClassNameText.setText(getConnection().getDriverClass());
  generalJdbcUserText.setText(getConnection().getUsername());
  generalJdbcPasswordText.setText(getConnection().getPassword());
  generalJdbcDriverjarText.setText(getConnection().getDriverJarPath());
  generalMappingFileText.setText(getConnection().getDbmsId());
  String jdbcUrlString=""String_Node_Str"";
  if (isContextMode()) {
    if (selectedContextType == null) {
      selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getConnection(),null,true);
    }
    if (selectedContextType != null) {
      jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
    }
  }
 else {
    jdbcUrlString=generalJdbcUrlText.getText();
  }
  if (jdbcUrlString.contains(""String_Node_Str"")) {
    String schema=getConnection().getUiSchema();
    if (schema == null || ""String_Node_Str"".equals(schema)) {
      for (      ContextParameterType param : (List<ContextParameterType>)selectedContextType.getContextParameter()) {
        if (param.getName() != null && param.getName().endsWith(ConnectionContextHelper.LINE + EDBParamName.Schema)) {
          if (getConnection().isContextMode()) {
            schema=""String_Node_Str"" + param.getName();
          }
 else {
            schema=param.getValue();
          }
          break;
        }
      }
    }
    jDBCschemaText.setText(schema);
  }
 else {
    jDBCschemaText.setHideWidgets(true);
  }
}",0.7434750186428039
128508,"/** 
 * ggu Comment method ""setManagerConnectionValues"". set the ManagerConnection parameter and return the url string connection.
 */
public static String setManagerConnectionValues(ManagerConnection managerConnection,ConnectionItem connectionItem,final String dbType,final int dbTypeIndex){
  if (managerConnection == null || connectionItem == null || dbType == null || dbTypeIndex < 0) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String driverClassName=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String driverJarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbVersionString=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbVersionString());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  String urlConnection;
  if (dbConn.getDatabaseType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
    urlConnection=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  }
 else {
    urlConnection=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
  }
  if (dbConn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
    schemaOracle=schemaOracle.toUpperCase();
  }
  managerConnection.setValue(0,dbType,urlConnection,server,username,password,sidOrDatabase,port,filePath,datasource,schemaOracle,additionParam,driverClassName,driverJarPath,dbVersionString);
  managerConnection.setDbRootPath(dbRootPath);
  return urlConnection;
}","public static String setManagerConnectionValues(ManagerConnection managerConnection,ConnectionItem connectionItem,final String dbType,final int dbTypeIndex){
  return setManagerConnectionValues(managerConnection,connectionItem,null,dbType,dbTypeIndex);
}",0.1264330167048804
128509,"/** 
 * Check data connection.
 */
private void checkConnection(){
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
      if (!isContextMode()) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
    }
  }
  ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
    if (version != null) {
      versionStr=version.getVersionValue();
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null);
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  databaseSettingIsValide=managerConnection.check();
  checkButton.setEnabled(true);
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
  }
}","/** 
 * Check data connection.
 */
private void checkConnection(){
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
      if (!isContextMode()) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
    }
  }
  ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        urlStr=ConnectionContextHelper.getOriginalValue(selectedContextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
    if (version != null) {
      versionStr=version.getVersionValue();
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null);
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  databaseSettingIsValide=managerConnection.check();
  checkButton.setEnabled(true);
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
  }
}",0.9562974203338392
128510,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,connection.getContextName());
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh(node);
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        if (tdqRepService != null) {
          tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
        }
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                ReturnCode retCode=tdqRepService.reloadDatabase(connectionItem);
                if (!retCode.isOk()) {
                  return Boolean.FALSE;
                }
              }
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn,metadataConnection);
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        boolean isNameModified=propertiesWizardPage.isNameModifiedByUser();
        if (isNameModified && tdqRepService != null) {
          tdqRepService.saveConnectionWithDependency(connectionItem);
          closeLockStrategy();
        }
 else {
          updateConnectionItem();
        }
        if (isNameModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh(node);
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}",0.9858963722754356
128511,"public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    DatabaseWizardPage.this.setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    DatabaseWizardPage.this.setPageComplete(isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}","@Override public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    DatabaseWizardPage.this.setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    DatabaseWizardPage.this.setPageComplete(isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}",0.9862637362637364
128512,"/** 
 * Create the composites, initialize it and add controls.
 * @see IDialogPage#createControl(Composite)
 */
public void createControl(final Composite parent){
  boolean isCreation=false;
  if (this.getWizard() instanceof RepositoryWizard) {
    isCreation=((RepositoryWizard)getWizard()).isCreation();
  }
  databaseForm=new DatabaseForm(parent,connectionItem,existingNames,isCreation);
  databaseForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        DatabaseWizardPage.this.setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        DatabaseWizardPage.this.setPageComplete(isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  databaseForm.setListener(listener);
  setControl(databaseForm);
  if (connectionItem.getProperty().getLabel() != null && !connectionItem.getProperty().getLabel().equals(""String_Node_Str"")) {
    databaseForm.checkFieldsValue();
  }
}","/** 
 * Create the composites, initialize it and add controls.
 * @see IDialogPage#createControl(Composite)
 */
@Override public void createControl(final Composite parent){
  boolean isCreation=false;
  if (this.getWizard() instanceof RepositoryWizard) {
    isCreation=((RepositoryWizard)getWizard()).isCreation();
  }
  databaseForm=new DatabaseForm(parent,connectionItem,existingNames,isCreation);
  databaseForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    @Override public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        DatabaseWizardPage.this.setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        DatabaseWizardPage.this.setPageComplete(isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  databaseForm.setListener(listener);
  setControl(databaseForm);
  if (connectionItem.getProperty().getLabel() != null && !connectionItem.getProperty().getLabel().equals(""String_Node_Str"")) {
    databaseForm.checkFieldsValue();
  }
}",0.9915038232795242
128513,"@Override protected void addFields(){
  int leftCompositeWidth=125;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=80;
  int tableSettingsCompositeHeight=15;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,2,WIDTH_GRIDDATA_PIXEL,height);
  mainComposite.setLayout(new GridLayout(2,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  SashForm sash=new SashForm(mainComposite,SWT.NONE);
  GridData sashData=new GridData(GridData.FILL_BOTH);
  sash.setLayoutData(sashData);
  Composite leftComposite=Form.startNewDimensionnedGridLayout(sash,1,leftCompositeWidth,height);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(sash,1,rightCompositeWidth,height);
  sash.setWeights(new int[]{1,4});
  addTreeNavigator(leftComposite,leftCompositeWidth,height);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=4;
  Composite composite1=Form.startNewDimensionnedGridLayout(rightComposite,4,SWT.DEFAULT,SWT.DEFAULT,false);
  ((GridData)composite1.getLayoutData()).verticalAlignment=GridData.VERTICAL_ALIGN_CENTER;
  nameText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  commentText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  typeText=new Label(composite1,SWT.NONE);
  typeText.setLayoutData(gridData);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  gridData1.horizontalSpan=4;
  Composite container=Form.startNewGridLayout(composite1,4,false,SWT.CENTER,SWT.TOP);
  container.setLayoutData(gridData1);
  tableCombo=new LabelledCombo(container,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),itemTableName != null ? itemTableName.toArray(new String[0]) : null,1,true,SWT.NONE);
  tableCombo.setEnabled(false);
  button=new Button(container,SWT.PUSH);
  button.setImage(ImageProvider.getImage(EImage.REFRESH_ICON));
  button.setToolTipText(Messages.getString(""String_Node_Str""));
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(container,3,false,SWT.CENTER,SWT.TOP);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  retreiveSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  retreiveSchemaButton.setToolTipText(RETRIEVE_SCHEMA_TOOLTIP);
  tableSettingsInfoLabel=new Label(composite1,SWT.NONE);
  tableSettingsInfoLabel.setLayoutData(gridData);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  guessSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  guessSchemaButton.setToolTipText(GUESS_SCHEMA_TOOLTIP);
  gc.dispose();
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    guessSchemaButton.setVisible(true);
  }
 else {
    guessSchemaButton.setVisible(false);
  }
  streamDetachCheckbox=new Button(composite1,SWT.CHECK);
  streamDetachCheckbox.setText(Messages.getString(""String_Node_Str""));
  streamDetachCheckbox.setAlignment(SWT.LEFT);
  streamDetachCheckbox.setVisible(STREAM_DETACH_IS_VISIBLE);
  Group groupMetaData=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableCompositeHeight);
  Composite compositeMetaData=Form.startNewGridLayout(groupMetaData,1);
  Composite compositeTable=Form.startNewDimensionnedGridLayout(compositeMetaData,1,rightCompositeWidth,tableCompositeHeight);
  compositeTable.setLayout(new FillLayout());
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  tableEditorView=new MetadataEmfTableEditorView(compositeTable,SWT.NONE,false);
  tableEditorView.setShowDbTypeColumn(true,true,true);
  tableEditorView.setShowDbColumnName(true,false);
  String trueDbmsID=metadataconnection.getMapping();
  if (trueDbmsID == null || ""String_Node_Str"".equals(trueDbmsID)) {
    final DatabaseConnection databaseConnection=getConnection();
    if (databaseConnection.isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),databaseConnection,databaseConnection.getContextName(),false);
      trueDbmsID=ConnectionContextHelper.getOriginalValue(contextType,trueDbmsID);
    }
  }
  tableEditorView.setCurrentDbms(trueDbmsID);
  tableEditorView.initGraphicComponents();
  metadataEditor.setDefaultLabel(Messages.getString(""String_Node_Str""));
}","@Override protected void addFields(){
  int leftCompositeWidth=125;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=80;
  int tableSettingsCompositeHeight=15;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,2,WIDTH_GRIDDATA_PIXEL,height);
  mainComposite.setLayout(new GridLayout(2,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  SashForm sash=new SashForm(mainComposite,SWT.NONE);
  GridData sashData=new GridData(GridData.FILL_BOTH);
  sash.setLayoutData(sashData);
  Composite leftComposite=Form.startNewDimensionnedGridLayout(sash,1,leftCompositeWidth,height);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(sash,1,rightCompositeWidth,height);
  sash.setWeights(new int[]{1,4});
  addTreeNavigator(leftComposite,leftCompositeWidth,height);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=4;
  Composite composite1=Form.startNewDimensionnedGridLayout(rightComposite,4,SWT.DEFAULT,SWT.DEFAULT,false);
  ((GridData)composite1.getLayoutData()).verticalAlignment=GridData.VERTICAL_ALIGN_CENTER;
  nameText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  commentText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  typeText=new Label(composite1,SWT.NONE);
  typeText.setLayoutData(gridData);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  gridData1.horizontalSpan=4;
  Composite container=Form.startNewGridLayout(composite1,4,false,SWT.CENTER,SWT.TOP);
  container.setLayoutData(gridData1);
  tableCombo=new LabelledCombo(container,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),itemTableName != null ? itemTableName.toArray(new String[0]) : null,1,true,SWT.NONE);
  tableCombo.setEnabled(false);
  button=new Button(container,SWT.PUSH);
  button.setImage(ImageProvider.getImage(EImage.REFRESH_ICON));
  button.setToolTipText(Messages.getString(""String_Node_Str""));
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(container,3,false,SWT.CENTER,SWT.TOP);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  retreiveSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  retreiveSchemaButton.setToolTipText(RETRIEVE_SCHEMA_TOOLTIP);
  tableSettingsInfoLabel=new Label(composite1,SWT.NONE);
  tableSettingsInfoLabel.setLayoutData(gridData);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  guessSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  guessSchemaButton.setToolTipText(GUESS_SCHEMA_TOOLTIP);
  gc.dispose();
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    guessSchemaButton.setVisible(true);
  }
 else {
    guessSchemaButton.setVisible(false);
  }
  streamDetachCheckbox=new Button(composite1,SWT.CHECK);
  streamDetachCheckbox.setText(Messages.getString(""String_Node_Str""));
  streamDetachCheckbox.setAlignment(SWT.LEFT);
  streamDetachCheckbox.setVisible(STREAM_DETACH_IS_VISIBLE);
  Group groupMetaData=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableCompositeHeight);
  Composite compositeMetaData=Form.startNewGridLayout(groupMetaData,1);
  Composite compositeTable=Form.startNewDimensionnedGridLayout(compositeMetaData,1,rightCompositeWidth,tableCompositeHeight);
  compositeTable.setLayout(new FillLayout());
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  tableEditorView=new MetadataEmfTableEditorView(compositeTable,SWT.NONE,false);
  tableEditorView.setShowDbTypeColumn(true,true,true);
  tableEditorView.setShowDbColumnName(true,false);
  String trueDbmsID=metadataconnection.getMapping();
  tableEditorView.setCurrentDbms(trueDbmsID);
  tableEditorView.initGraphicComponents();
  metadataEditor.setDefaultLabel(Messages.getString(""String_Node_Str""));
}",0.9203618898693176
128514,"public static String parseTo_String(String s){
  return s;
}","public static String parseTo_String(final List<String> s,String fieldSep){
  if (s == null) {
    return null;
  }
  StringBuffer result=new StringBuffer();
  result.append(""String_Node_Str"");
  for (int i=0; i < s.size(); i++) {
    if (i != 0) {
      result.append(fieldSep);
    }
    result.append(s.get(i));
  }
  result.append(""String_Node_Str"");
  return result.toString();
}",0.1896162528216704
128515,"protected boolean checkReadOnly() throws PersistenceException {
  return loadedProcess.checkReadOnly();
}","public boolean checkReadOnly() throws PersistenceException {
  return loadedProcess.checkReadOnly();
}",0.9468599033816424
128516,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        driverValue=dbVersionString;
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLE_RAC.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(databaseType)|| EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(databaseType)) {
        driverValue=dbVersionString;
      }
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          if (path.split(""String_Node_Str"").length > 2) {
            int startIndex=path.lastIndexOf(""String_Node_Str"") - 1;
            String filePath=path.substring(startIndex);
            h2Prefix+=path.substring(0,startIndex);
            path=filePath;
          }
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  return null;
}",0.9883626753058528
128517,"/** 
 * test connection used for test a connection,for example ,click ""check"" button on database wizard 
 */
public ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,String server,String port,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam);","/** 
 * test connection used for test a connection,for example ,click ""check"" button on database wizard 
 */
public ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,String server,String port,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam,Map<String,Object> otherParameters);",0.9514563106796116
128518,"public static List parseTo_List(String s){
  if (s != null) {
    List list=new ArrayList();
    list.add(s);
    return list;
  }
  return null;
}","/** 
 * the source should be a string wrapped in chars[ ] which stands for it is a collection
 * @param stSrc
 * @param fieldSep
 * @return
 */
public static List<String> parseTo_List(final String strSrc,String fieldSep){
  if (strSrc == null) {
    return null;
  }
  List<String> list=new ArrayList<String>();
  if ((fieldSep == null || ""String_Node_Str"".equals(fieldSep)) || !(strSrc.startsWith(""String_Node_Str"") && strSrc.endsWith(""String_Node_Str""))) {
    list.add(strSrc);
    return list;
  }
  String strTemp=strSrc.substring(1,strSrc.length() - 1);
  for (  String str : strTemp.split(fieldSep,-1)) {
    list.add(str);
  }
  return list;
}",0.2807017543859649
128519,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9965599108483938
128520,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9965599108483938
128521,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}",0.7335406946604458
128522,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(template.getDBDisplayName())) {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
        s=template.getUrlTemplate(version);
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase) {
      urlConnectionStringText.setVisible(false);
    }
    hideHBaseSettings(!isHbase);
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        if (contextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(contextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          serverText.hide();
          portText.hide();
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
        }
        addContextParams(EDBParamName.Server,visible);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
        addContextParams(EDBParamName.Port,visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            serverText.hide();
            portText.hide();
            sidOrDatabaseText.hide();
            sidOrDatabaseText.setEditable(false);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            sidOrDatabaseText.show();
            sidOrDatabaseText.setEditable(true);
          }
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.hide();
          passwordText.hide();
        }
 else {
          usernameText.show();
          passwordText.show();
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        portText.hide();
        serverText.hide();
      }
 else {
        portText.show();
        serverText.show();
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(template.getDBDisplayName())) {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
        s=template.getUrlTemplate(version);
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase) {
      urlConnectionStringText.setVisible(false);
    }
    hideHBaseSettings(!isHbase);
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        if (contextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(contextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          serverText.hide();
          portText.hide();
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
        }
        addContextParams(EDBParamName.Server,visible);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
        addContextParams(EDBParamName.Port,visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            serverText.hide();
            portText.hide();
            sidOrDatabaseText.hide();
            sidOrDatabaseText.setEditable(false);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            sidOrDatabaseText.show();
            sidOrDatabaseText.setEditable(true);
          }
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.hide();
          passwordText.hide();
        }
 else {
          usernameText.show();
          passwordText.show();
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        portText.hide();
        serverText.hide();
      }
 else {
        portText.show();
        serverText.show();
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.9964616680707666
128523,"@Override protected void addFields(){
  int leftCompositeWidth=125;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=80;
  int tableSettingsCompositeHeight=15;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,2,WIDTH_GRIDDATA_PIXEL,height);
  mainComposite.setLayout(new GridLayout(2,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  SashForm sash=new SashForm(mainComposite,SWT.NONE);
  GridData sashData=new GridData(GridData.FILL_BOTH);
  sash.setLayoutData(sashData);
  Composite leftComposite=Form.startNewDimensionnedGridLayout(sash,1,leftCompositeWidth,height);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(sash,1,rightCompositeWidth,height);
  sash.setWeights(new int[]{1,4});
  addTreeNavigator(leftComposite,leftCompositeWidth,height);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=4;
  Composite composite1=Form.startNewDimensionnedGridLayout(rightComposite,4,SWT.DEFAULT,SWT.DEFAULT,false);
  ((GridData)composite1.getLayoutData()).verticalAlignment=GridData.VERTICAL_ALIGN_CENTER;
  nameText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  commentText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  typeText=new Label(composite1,SWT.NONE);
  typeText.setLayoutData(gridData);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  gridData1.horizontalSpan=4;
  Composite container=Form.startNewGridLayout(composite1,4,false,SWT.CENTER,SWT.TOP);
  container.setLayoutData(gridData1);
  tableCombo=new LabelledCombo(container,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),itemTableName != null ? itemTableName.toArray(new String[0]) : null,1,true,SWT.NONE);
  tableCombo.setEnabled(false);
  button=new Button(container,SWT.PUSH);
  button.setImage(ImageProvider.getImage(EImage.REFRESH_ICON));
  button.setToolTipText(Messages.getString(""String_Node_Str""));
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(container,3,false,SWT.CENTER,SWT.TOP);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  retreiveSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  retreiveSchemaButton.setToolTipText(RETRIEVE_SCHEMA_TOOLTIP);
  tableSettingsInfoLabel=new Label(composite1,SWT.NONE);
  tableSettingsInfoLabel.setLayoutData(gridData);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  guessSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  guessSchemaButton.setToolTipText(GUESS_SCHEMA_TOOLTIP);
  gc.dispose();
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    guessSchemaButton.setVisible(true);
  }
 else {
    guessSchemaButton.setVisible(false);
  }
  streamDetachCheckbox=new Button(composite1,SWT.CHECK);
  streamDetachCheckbox.setText(Messages.getString(""String_Node_Str""));
  streamDetachCheckbox.setAlignment(SWT.LEFT);
  streamDetachCheckbox.setVisible(STREAM_DETACH_IS_VISIBLE);
  Group groupMetaData=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableCompositeHeight);
  Composite compositeMetaData=Form.startNewGridLayout(groupMetaData,1);
  Composite compositeTable=Form.startNewDimensionnedGridLayout(compositeMetaData,1,rightCompositeWidth,tableCompositeHeight);
  compositeTable.setLayout(new FillLayout());
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  tableEditorView=new MetadataEmfTableEditorView(compositeTable,SWT.NONE,false);
  tableEditorView.setShowDbTypeColumn(true,true,true);
  tableEditorView.setShowDbColumnName(true,false);
  final DatabaseConnection databaseConnection=getConnection();
  String trueDbmsID=DatabaseConnectionParameterUtil.getTrueParamValue(databaseConnection,databaseConnection.getDbmsId());
  tableEditorView.setCurrentDbms(trueDbmsID);
  tableEditorView.initGraphicComponents();
  metadataEditor.setDefaultLabel(Messages.getString(""String_Node_Str""));
}","@Override protected void addFields(){
  int leftCompositeWidth=125;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=80;
  int tableSettingsCompositeHeight=15;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,2,WIDTH_GRIDDATA_PIXEL,height);
  mainComposite.setLayout(new GridLayout(2,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  SashForm sash=new SashForm(mainComposite,SWT.NONE);
  GridData sashData=new GridData(GridData.FILL_BOTH);
  sash.setLayoutData(sashData);
  Composite leftComposite=Form.startNewDimensionnedGridLayout(sash,1,leftCompositeWidth,height);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(sash,1,rightCompositeWidth,height);
  sash.setWeights(new int[]{1,4});
  addTreeNavigator(leftComposite,leftCompositeWidth,height);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=4;
  Composite composite1=Form.startNewDimensionnedGridLayout(rightComposite,4,SWT.DEFAULT,SWT.DEFAULT,false);
  ((GridData)composite1.getLayoutData()).verticalAlignment=GridData.VERTICAL_ALIGN_CENTER;
  nameText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  commentText=new LabelledText(composite1,Messages.getString(""String_Node_Str""),3);
  typeText=new Label(composite1,SWT.NONE);
  typeText.setLayoutData(gridData);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  gridData1.horizontalSpan=4;
  Composite container=Form.startNewGridLayout(composite1,4,false,SWT.CENTER,SWT.TOP);
  container.setLayoutData(gridData1);
  tableCombo=new LabelledCombo(container,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),itemTableName != null ? itemTableName.toArray(new String[0]) : null,1,true,SWT.NONE);
  tableCombo.setEnabled(false);
  button=new Button(container,SWT.PUSH);
  button.setImage(ImageProvider.getImage(EImage.REFRESH_ICON));
  button.setToolTipText(Messages.getString(""String_Node_Str""));
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(container,3,false,SWT.CENTER,SWT.TOP);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  retreiveSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  retreiveSchemaButton.setToolTipText(RETRIEVE_SCHEMA_TOOLTIP);
  tableSettingsInfoLabel=new Label(composite1,SWT.NONE);
  tableSettingsInfoLabel.setLayoutData(gridData);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  guessSchemaButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  guessSchemaButton.setToolTipText(GUESS_SCHEMA_TOOLTIP);
  gc.dispose();
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    guessSchemaButton.setVisible(true);
  }
 else {
    guessSchemaButton.setVisible(false);
  }
  streamDetachCheckbox=new Button(composite1,SWT.CHECK);
  streamDetachCheckbox.setText(Messages.getString(""String_Node_Str""));
  streamDetachCheckbox.setAlignment(SWT.LEFT);
  streamDetachCheckbox.setVisible(STREAM_DETACH_IS_VISIBLE);
  Group groupMetaData=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableCompositeHeight);
  Composite compositeMetaData=Form.startNewGridLayout(groupMetaData,1);
  Composite compositeTable=Form.startNewDimensionnedGridLayout(compositeMetaData,1,rightCompositeWidth,tableCompositeHeight);
  compositeTable.setLayout(new FillLayout());
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  tableEditorView=new MetadataEmfTableEditorView(compositeTable,SWT.NONE,false);
  tableEditorView.setShowDbTypeColumn(true,true,true);
  tableEditorView.setShowDbColumnName(true,false);
  final DatabaseConnection databaseConnection=getConnection();
  String trueDbmsID=databaseConnection.getDbmsId();
  if (databaseConnection.isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),databaseConnection,null,false);
    trueDbmsID=ConnectionContextHelper.getOriginalValue(contextType,trueDbmsID);
  }
  tableEditorView.setCurrentDbms(trueDbmsID);
  tableEditorView.initGraphicComponents();
  metadataEditor.setDefaultLabel(Messages.getString(""String_Node_Str""));
}",0.959536283580426
128524,"public static List parseTo_List(String s){
  if (s != null) {
    List list=new ArrayList();
    list.add(s);
    return list;
  }
  return null;
}","/** 
 * the source should be a string wrapped in chars[ ] which stands for it is a collection
 * @param stSrc
 * @param fieldSep
 * @return
 */
public static List<String> parseTo_List(final String strSrc,String fieldSep){
  if (strSrc == null) {
    return null;
  }
  List<String> list=new ArrayList<String>();
  if ((fieldSep == null || ""String_Node_Str"".equals(fieldSep)) || !(strSrc.startsWith(""String_Node_Str"") && strSrc.endsWith(""String_Node_Str""))) {
    list.add(strSrc);
    return list;
  }
  String strTemp=strSrc.substring(1,strSrc.length() - 1);
  for (  String str : strTemp.split(fieldSep,-1)) {
    list.add(str);
  }
  return list;
}",0.2807017543859649
128525,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}",0.7335406946604458
128526,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
 else {
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        Thread.currentThread().setContextClassLoader(loader);
      }
      connection=wapperDriver.connect(url,info);
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
 else {
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    if (EDatabaseTypeName.MSSQL.getDisplayName().equals(dbType) && DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass()) && ""String_Node_Str"".equals(username)) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
    }
 else {
      wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    }
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
        Thread.currentThread().setContextClassLoader(loader);
      }
      connection=wapperDriver.connect(url,info);
    }
    if (EDatabaseTypeName.MSSQL.getDisplayName().equals(dbType) && !DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass()) && ""String_Node_Str"".equals(username)) {
      DRIVER_CACHE.put(EDatabase4DriverClassName.MSSQL.getDriverClass(),wapperDriver);
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9129570139207588
128527,"/** 
 * Loads the jars for hive embedded mode required, I do not think it is the better method  to do this here. Due to the limitation on code structure, I have to write this method  to load the jar required by Hive. If metadata connection part is refactored, developer  could adjust this method. Added by Marvin Wang on Oct 24, 2012.
 * @param libraries
 * @param dbType
 * @param dbVersion
 */
public void loadForHiveEmbedded(List<String> libraries,String dbType,String dbVersion){
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  HotClassLoader loader=null;
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < libraries.size(); i++) {
        loader.addPath(libraries.get(i));
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
 else {
      URL[] urls=loader.getURLs();
      if (urls != null && urls.length > 0) {
        for (int i=0; i < urls.length; i++) {
          String urlPath=urls[i].getPath();
          for (int j=0; j < libraries.size(); j++) {
            if (urlPath != null && !""String_Node_Str"".equals(urlPath) && urlPath.equals(libraries.get(j))) {
              loader.addPath(libraries.get(j));
              break;
            }
          }
        }
      }
    }
  }
}","/** 
 * Loads the jars for hive embedded mode required, I do not think it is the better method to do this here. Due to the limitation on code structure, I have to write this method to load the jar required by Hive. If metadata connection part is refactored, developer could adjust this method. Added by Marvin Wang on Oct 24, 2012.
 * @param libraries
 * @param dbType
 * @param dbVersion
 */
public void loadForHiveEmbedded(List<String> libraries,String dbType,String dbVersion){
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  HotClassLoader loader=null;
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < libraries.size(); i++) {
        loader.addPath(libraries.get(i));
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
 else {
      URL[] urls=loader.getURLs();
      if (urls != null && urls.length > 0) {
        for (int i=0; i < urls.length; i++) {
          String urlPath=urls[i].getPath();
          for (int j=0; j < libraries.size(); j++) {
            if (urlPath != null && !""String_Node_Str"".equals(urlPath) && urlPath.equals(libraries.get(j))) {
              loader.addPath(libraries.get(j));
              break;
            }
          }
        }
      }
    }
  }
}",0.99889339727038
128528,"protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<String>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}","protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<LibraryInfo>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}",0.9963975418520872
128529,"/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<String> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      String jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(jar);
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}","/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<LibraryInfo> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      LibraryInfo jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(jar.getLibName());
        type.setBundleID(jar.getBundleId());
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}",0.9723889555822328
128530,"public Map<String,List<String>> getRoutineAndJars();","public Map<String,List<LibraryInfo>> getRoutineAndJars();",0.8807339449541285
128531,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  RepositoryNode node=(RepositoryNode)selection.getFirstElement();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  RepositoryNode node=(RepositoryNode)selection.getFirstElement();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}",0.9963636363636365
128532,"@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  LocalSelectionTransfer.getTransfer().setSelection(selection);
  LocalSelectionTransfer.getTransfer().setSelectionSetTime(System.currentTimeMillis());
}","@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  LocalSelectionTransfer.getTransfer().setSelection(selection);
  LocalSelectionTransfer.getTransfer().setSelectionSetTime(System.currentTimeMillis());
  PasteAction pasteActionInstance=PasteAction.getInstance();
  if (pasteActionInstance != null) {
    pasteActionInstance.init(null,selection);
  }
}",0.8181818181818182
128533,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.9873976055450536
128534,"@Override public boolean performDrop(final Object data){
  int operation=getCurrentOperation();
  final RepositoryNode targetNode=(RepositoryNode)getCurrentTarget();
  boolean toReturn=true;
  try {
switch (operation) {
case DND.DROP_COPY:
      RunnableWithReturnValue runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
    runInProgressDialog(runnable);
  toReturn=(Boolean)runnable.getReturnValue();
break;
case DND.DROP_MOVE:
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
case DND.DROP_DEFAULT:
if (event.detail == DND.DROP_COPY) {
runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
if (event.detail == DND.DROP_MOVE) {
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
default :
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
}
return toReturn;
}","@Override public boolean performDrop(final Object data){
  int operation=getCurrentOperation();
  final RepositoryNode targetNode=(RepositoryNode)getCurrentTarget();
  boolean toReturn=true;
  try {
switch (operation) {
case DND.DROP_COPY:
      RunnableWithReturnValue runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
    runCopy(data,targetNode);
  break;
case DND.DROP_MOVE:
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
case DND.DROP_DEFAULT:
if (event.detail == DND.DROP_COPY) {
runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
if (event.detail == DND.DROP_MOVE) {
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
default :
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
}
return toReturn;
}",0.9552772808586762
128535,"private void runInProgressDialog(final IWorkspaceRunnable op){
  final IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        ProgressMonitorDialog progress=new ProgressMonitorDialog(getViewer().getControl().getShell());
        progress.run(false,false,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
}","private void runInProgressDialog(final IWorkspaceRunnable op){
  final IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        ProgressMonitorDialog progress=new ProgressMonitorDialog(getViewer().getControl().getShell());
        progress.run(false,false,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.9961028838659391
128536,"public void run(IProgressMonitor monitor) throws CoreException {
  try {
    for (    Object obj : ((StructuredSelection)data).toArray()) {
      final RepositoryNode sourceNode=(RepositoryNode)obj;
      monitor.subTask(Messages.getString(""String_Node_Str"") + sourceNode.getObject().getLabel());
      MoveObjectAction.getInstance().execute(sourceNode,targetNode,true);
    }
  }
 catch (  Exception e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    for (    Object obj : ((StructuredSelection)data).toArray()) {
      final RepositoryNode sourceNode=(RepositoryNode)obj;
      monitor.subTask(Messages.getString(""String_Node_Str"") + sourceNode.getObject().getLabel());
      MoveObjectAction.getInstance().execute(sourceNode,targetNode,true);
    }
  }
 catch (  Exception e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}",0.9913194444444444
128537,"@Override public boolean validateDrop(Object target,int operation,TransferData transferType){
  if (target == null)   return false;
  super.validateDrop(target,operation,transferType);
  boolean isValid=true;
  for (  Object obj : ((StructuredSelection)getViewer().getSelection()).toArray()) {
    RepositoryNode sourceNode=(RepositoryNode)obj;
    if (sourceNode != null) {
      IRepositoryViewObject object=sourceNode.getObject();
      if (object == null) {
        return false;
      }
      if (object.getRepositoryObjectType() == ERepositoryObjectType.JOB_DOC || object.getRepositoryObjectType() == ERepositoryObjectType.JOBLET_DOC) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
          IDiagramModelService diagramModelService=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
          if (diagramModelService != null && BusinessType.SHAP == diagramModelService.getBusinessModelType(target)) {
            return true;
          }
        }
        return false;
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
        Property property=object.getProperty();
        RoutineItem item=(RoutineItem)property.getItem();
        if (item.isBuiltIn() && target instanceof RepositoryNode) {
          return false;
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
        Property property=object.getProperty();
        SQLPatternItem item=(SQLPatternItem)property.getItem();
        if (item.isSystem() && target instanceof RepositoryNode) {
          return false;
        }
      }
    }
switch (operation) {
case DND.DROP_COPY:
      isValid=CopyObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target);
    break;
case DND.DROP_MOVE:
  isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
case DND.DROP_DEFAULT:
case DND.Drop:
isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
default :
isValid=false;
}
}
return isValid;
}","@Override public boolean validateDrop(Object target,int operation,TransferData transferType){
  if (target == null) {
    return false;
  }
  super.validateDrop(target,operation,transferType);
  boolean isValid=true;
  for (  Object obj : ((StructuredSelection)getViewer().getSelection()).toArray()) {
    RepositoryNode sourceNode=(RepositoryNode)obj;
    if (sourceNode != null) {
      IRepositoryViewObject object=sourceNode.getObject();
      if (object == null) {
        return false;
      }
      if (object.getRepositoryObjectType() == ERepositoryObjectType.JOB_DOC || object.getRepositoryObjectType() == ERepositoryObjectType.JOBLET_DOC) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
          IDiagramModelService diagramModelService=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
          if (diagramModelService != null && BusinessType.SHAP == diagramModelService.getBusinessModelType(target)) {
            return true;
          }
        }
        return false;
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
        Property property=object.getProperty();
        RoutineItem item=(RoutineItem)property.getItem();
        if (item.isBuiltIn() && target instanceof RepositoryNode) {
          return false;
        }
      }
 else       if (object.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
        Property property=object.getProperty();
        SQLPatternItem item=(SQLPatternItem)property.getItem();
        if (item.isSystem() && target instanceof RepositoryNode) {
          return false;
        }
      }
    }
switch (operation) {
case DND.DROP_COPY:
      isValid=CopyObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target);
    break;
case DND.DROP_MOVE:
  isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
case DND.DROP_DEFAULT:
case DND.Drop:
isValid=MoveObjectAction.getInstance().validateAction(sourceNode,(RepositoryNode)target,true);
break;
default :
isValid=false;
}
}
return isValid;
}",0.9912199630314232
128538,"@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),CopyAction.getInstance());
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),PasteAction.getInstance());
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(CopyAction.getInstance());
  textActionHandler.setPasteAction(PasteAction.getInstance());
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}","@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),PasteAction.getInstance());
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(PasteAction.getInstance());
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}",0.7601753287413902
128539,"/** 
 * judge whether UiSchema is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
private boolean isNullUiSchema(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) && isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}","/** 
 * judge whether UiSchema is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
private boolean isNullUiSchema(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) || isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}",0.996
128540,"/** 
 * judge whether SID is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
private boolean isNullSID(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) && isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}","/** 
 * judge whether SID is null or empty string whatever context mode or nor
 * @param dbConn
 * @return
 */
private boolean isNullSID(Connection dbConn){
  if (dbConn instanceof DatabaseConnection) {
    String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
    String readableName=TalendCWMService.getReadableName(dbConn,databaseOnConnWizard);
    if (isEmptyString(databaseOnConnWizard) || isEmptyString(readableName)) {
      return true;
    }
  }
  return false;
}",0.9958762886597938
128541,"private List<String> postFillCatalog(List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}","private List<String> postFillCatalog(List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.965034965034965
128542,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        if (!ConnectionUtils.isSybase(databaseMetaData)) {
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9743404409107336
128543,"/** 
 * DOC zshen Comment method ""isSybase"".
 * @param connection
 * @return decide to whether is sybase connection
 * @throws SQLException
 */
public static boolean isSybase(java.sql.Connection connection) throws SQLException {
  DatabaseMetaData connectionMetadata=connection.getMetaData();
  if (connectionMetadata.getDriverName() != null && connectionMetadata.getDatabaseProductName() != null) {
    for (    String keyString : getSybaseDBProductsName()) {
      if (keyString.equals(connectionMetadata.getDatabaseProductName().trim())) {
        return true;
      }
    }
  }
  return false;
}","public static boolean isSybase(DatabaseMetaData metadata){
  boolean result=false;
  if (metadata != null && ""String_Node_Str"".equals(metadata.getClass().getName())) {
    result=true;
  }
  return result;
}",0.0967741935483871
128544,"public synchronized void updateStatOnConnection(String connectionId,int mode,String exec){
  StatBean bean;
  StringBuffer key=new StringBuffer();
  key.append(connectionId + ""String_Node_Str"" + mode);
  if (connectionId.startsWith(""String_Node_Str"")) {
    key.delete(0,key.length());
    key.append(connectionId + ""String_Node_Str"" + mode+ ""String_Node_Str""+ exec);
  }
 else {
    if (connectionId.contains(""String_Node_Str"")) {
      String firstKey=null;
      String connectionName=connectionId.split(""String_Node_Str"")[0];
      int nbKeys=0;
      for (      String myKey : keysList) {
        if (myKey.startsWith(connectionName + ""String_Node_Str"")) {
          if (firstKey == null) {
            firstKey=myKey;
          }
          nbKeys++;
          if (nbKeys == 4) {
            break;
          }
        }
      }
      if (nbKeys == 4) {
        keysList.remove(firstKey);
      }
    }
  }
  if (keysList.contains(key)) {
    keysList.remove(key);
  }
  keysList.add(key.toString());
  if (processStats.containsKey(key)) {
    bean=processStats.get(key);
  }
 else {
    bean=new StatBean(connectionId);
  }
  bean.setState(mode);
  bean.setExec(exec);
  processStats.put(key.toString(),bean);
  long newStatsUpdate=System.currentTimeMillis();
  if (lastStatsUpdate == 0 || lastStatsUpdate + 250 < newStatsUpdate) {
    sendMessages();
    lastStatsUpdate=newStatsUpdate;
  }
}","public synchronized void updateStatOnConnection(String connectionId,int mode,String exec){
  StatBean bean;
  String key=connectionId + ""String_Node_Str"" + mode;
  if (connectionId.startsWith(""String_Node_Str"")) {
    key=connectionId + ""String_Node_Str"" + mode+ ""String_Node_Str""+ exec;
  }
 else {
    if (connectionId.contains(""String_Node_Str"")) {
      String firstKey=null;
      String connectionName=connectionId.split(""String_Node_Str"")[0];
      int nbKeys=0;
      for (      String myKey : keysList) {
        if (myKey.startsWith(connectionName + ""String_Node_Str"")) {
          if (firstKey == null) {
            firstKey=myKey;
          }
          nbKeys++;
          if (nbKeys == 4) {
            break;
          }
        }
      }
      if (nbKeys == 4) {
        keysList.remove(firstKey);
      }
    }
  }
  if (keysList.contains(key)) {
    keysList.remove(key);
  }
  keysList.add(key);
  if (processStats.containsKey(key)) {
    bean=processStats.get(key);
  }
 else {
    bean=new StatBean(connectionId);
  }
  bean.setState(mode);
  bean.setExec(exec);
  processStats.put(key,bean);
  long newStatsUpdate=System.currentTimeMillis();
  if (lastStatsUpdate == 0 || lastStatsUpdate + 250 < newStatsUpdate) {
    sendMessages();
    lastStatsUpdate=newStatsUpdate;
  }
}",0.9577151335311572
128545,"public void sendMessages(){
  for (  String curKey : keysList) {
    StatBean sb=processStats.get(curKey);
    int jobStat=sb.getJobStat();
    if (jobStat == JOBDEFAULT) {
      str.delete(0,str.length());
      str=str.append(TYPE1_CONNECTION + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str"").append(sb.getConnectionId());
      if (sb.getState() == RunStat.CLEAR) {
        str.append(""String_Node_Str"" + ""String_Node_Str"");
      }
 else {
        if (sb.getExec() == null) {
          str.append(""String_Node_Str"").append(sb.getNbLine()).append(""String_Node_Str"").append(sb.getEndTime() - sb.getStartTime());
        }
 else {
          str.append(""String_Node_Str"").append(sb.getExec());
        }
        if (sb.getState() != RunStat.RUNNING) {
          str.append(""String_Node_Str"" + ((sb.getState() == RunStat.BEGIN) ? ""String_Node_Str"" : ""String_Node_Str""));
        }
      }
    }
 else {
      SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
      String jobStatStr=""String_Node_Str"";
      String itemId=sb.getItemId();
      itemId=itemId == null ? ""String_Node_Str"" : itemId;
      if (jobStat == JOBSTART) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getStartTime()));
      }
 else       if (jobStat == JOBEND) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getEndTime()));
      }
      str.delete(0,str.length());
      str.append(TYPE0_JOB + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str"").append(jobStatStr);
    }
    pred.println(str.toString());
  }
  keysList.clear();
}","public void sendMessages(){
  for (  String curKey : keysList) {
    StatBean sb=processStats.get(curKey);
    int jobStat=sb.getJobStat();
    if (jobStat == JOBDEFAULT) {
      str=TYPE1_CONNECTION + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str""+ sb.getConnectionId();
      if (sb.getState() == RunStat.CLEAR) {
        str+=""String_Node_Str"" + ""String_Node_Str"";
      }
 else {
        if (sb.getExec() == null) {
          str+=""String_Node_Str"" + sb.getNbLine() + ""String_Node_Str""+ (sb.getEndTime() - sb.getStartTime());
        }
 else {
          str+=""String_Node_Str"" + sb.getExec();
        }
        if (sb.getState() != RunStat.RUNNING) {
          str+=""String_Node_Str"" + ((sb.getState() == RunStat.BEGIN) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
    }
 else {
      SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
      String jobStatStr=""String_Node_Str"";
      String itemId=sb.getItemId();
      itemId=itemId == null ? ""String_Node_Str"" : itemId;
      if (jobStat == JOBSTART) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getStartTime()));
      }
 else       if (jobStat == JOBEND) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getEndTime()));
      }
      str=TYPE0_JOB + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str""+ jobStatStr;
    }
    pred.println(str);
  }
  keysList.clear();
}",0.8745743473325767
128546,"/** 
 * Export the passed resource to the destination .zip.
 * @param exportResource org.eclipse.core.resources.IResource
 * @param leadupDepth the number of resource levels to be included in the path including the resourse itself.
 */
public void exportResource(String rootName,String directory,String exportResource,int leadupDepth) throws InterruptedException {
  File file=new File(exportResource);
  if (file.isFile()) {
    String destinationName=file.getName();
    if (!""String_Node_Str"".equals(directory)) {
      if (directory.endsWith(SEPARATOR)) {
        destinationName=directory + file.getName();
      }
 else {
        destinationName=directory + SEPARATOR + file.getName();
      }
    }
    if (createLeadupStructure) {
      if (rootName != null && !""String_Node_Str"".equals(destinationName)) {
        if (file.getName().equals(Messages.getString(""String_Node_Str""))) {
          destinationName=rootName.substring(0,rootName.indexOf(""String_Node_Str"")) + SEPARATOR + destinationName;
        }
 else {
          destinationName=rootName + SEPARATOR + destinationName;
        }
      }
    }
    monitor.subTask(destinationName);
    try {
      exporter.write(exportResource,destinationName);
    }
 catch (    IOException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
catch (    CoreException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
    monitor.worked(1);
    ModalContext.checkCanceled(monitor);
  }
 else   if (file.isDirectory()) {
    File[] children=null;
    try {
      children=file.listFiles(new FileFilter(){
        public boolean accept(        File pathname){
          boolean result=true;
          if (pathname != null && pathname.isFile()) {
            try {
              result=Pattern.compile(regEx).matcher(pathname.getName()).find();
            }
 catch (            PatternSyntaxException e) {
            }
          }
          return result;
        }
      }
);
    }
 catch (    Exception e) {
      addError(NLS.bind(""String_Node_Str"",exportResource),e);
    }
    for (int i=0; i < children.length; i++) {
      exportResource(rootName,directory + file.getName() + SEPARATOR,children[i].getPath(),leadupDepth + 1);
    }
  }
}","/** 
 * Export the passed resource to the destination .zip.
 * @param exportResource org.eclipse.core.resources.IResource
 * @param leadupDepth the number of resource levels to be included in the path including the resourse itself.
 */
public void exportResource(String rootName,String directory,String exportResource,int leadupDepth) throws InterruptedException {
  File file=new File(exportResource);
  if (file.isFile()) {
    String destinationName=file.getName();
    if (!""String_Node_Str"".equals(directory)) {
      if (directory.endsWith(SEPARATOR)) {
        destinationName=directory + file.getName();
      }
 else {
        destinationName=directory + SEPARATOR + file.getName();
      }
    }
    if (createLeadupStructure) {
      if (rootName != null && !""String_Node_Str"".equals(destinationName)) {
        if (file.getName().equals(Messages.getString(""String_Node_Str""))) {
          destinationName=rootName.substring(0,rootName.indexOf(""String_Node_Str"")) + SEPARATOR + destinationName;
        }
 else         if (!""String_Node_Str"".equals(rootName)) {
          destinationName=rootName + SEPARATOR + destinationName;
        }
      }
    }
    destinationName=destinationName.replace(""String_Node_Str"",SEPARATOR);
    monitor.subTask(destinationName);
    try {
      exporter.write(exportResource,destinationName);
    }
 catch (    IOException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
catch (    CoreException e) {
      addError(NLS.bind(""String_Node_Str"",exportResource,e.getMessage()),e);
    }
    monitor.worked(1);
    ModalContext.checkCanceled(monitor);
  }
 else   if (file.isDirectory()) {
    File[] children=null;
    try {
      children=file.listFiles(new FileFilter(){
        public boolean accept(        File pathname){
          boolean result=true;
          if (pathname != null && pathname.isFile()) {
            try {
              result=Pattern.compile(regEx).matcher(pathname.getName()).find();
            }
 catch (            PatternSyntaxException e) {
            }
          }
          return result;
        }
      }
);
    }
 catch (    Exception e) {
      addError(NLS.bind(""String_Node_Str"",exportResource),e);
    }
    for (int i=0; i < children.length; i++) {
      exportResource(rootName,directory + file.getName() + SEPARATOR,children[i].getPath(),leadupDepth + 1);
    }
  }
}",0.9736447396614528
128547,"public static void clearCache(){
}","@Deprecated public static void clearCache(){
}",0.85
128548,"/** 
 * DOC sgandon Comment method ""refreshTopLevelNodes"".
 */
protected void refreshTopLevelNodes(){
  for (  RepositoryNode topLevelNode : getTopLevelNodes()) {
    refreshTopLevelNode(topLevelNode);
  }
}","/** 
 * DOC sgandon Comment method ""refreshTopLevelNodes"".
 */
protected void refreshTopLevelNodes(){
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  if (topLevelNodes == null) {
    return;
  }
  for (  RepositoryNode topLevelNode : getTopLevelNodes()) {
    refreshTopLevelNode(topLevelNode);
  }
}",0.7736943907156673
128549,"protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<String>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}","protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<LibraryInfo>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}",0.9963975418520872
128550,"/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<String> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      String jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(jar);
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}","/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<LibraryInfo> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      LibraryInfo jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(jar.getLibName());
        type.setBundleID(jar.getBundleId());
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}",0.9723889555822328
128551,"public Map<String,List<String>> getRoutineAndJars();","public Map<String,List<LibraryInfo>> getRoutineAndJars();",0.8807339449541285
128552,"/** 
 * FIX(double) expression Rounds given double numbers to the closest long. {talendTypes} long | Long {Category} DataOperation {param} double (0.0) d:double number {example} FIX(3.14)
 */
public static long FIX(double d){
  return Math.round(d);
}","/** 
 * FIX(double) Rounds a number of type Double to a number of type Long with the precision specified in the PRECISION statement. {talendTypes} long | Long {Category} DataOperation {param} double (0.0) d:double number {example} FIX(3.14)
 */
public static long FIX(double d){
  return Math.round(d);
}",0.7315315315315315
128553,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=MetadataFillFactory.getDBInstance().fillUIParams(dbConn);
      String databaseType=metaConnection.getDbType();
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=MetadataFillFactory.getDBInstance().fillUIParams(dbConn);
      String databaseType=metaConnection.getDbType();
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        if (!ConnectionUtils.isSybase(databaseMetaData)) {
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.975709887102292
128554,"/** 
 * DOC zshen Comment method ""isSybase"".
 * @param connection
 * @return decide to whether is sybase connection
 * @throws SQLException
 */
public static boolean isSybase(java.sql.Connection connection) throws SQLException {
  DatabaseMetaData connectionMetadata=connection.getMetaData();
  if (connectionMetadata.getDriverName() != null && connectionMetadata.getDatabaseProductName() != null) {
    for (    String keyString : getSybaseDBProductsName()) {
      if (keyString.equals(connectionMetadata.getDatabaseProductName().trim())) {
        return true;
      }
    }
  }
  return false;
}","public static boolean isSybase(DatabaseMetaData metadata){
  boolean result=false;
  if (metadata != null && ""String_Node_Str"".equals(metadata.getClass().getName())) {
    result=true;
  }
  return result;
}",0.0967741935483871
128555,"public synchronized void updateStatOnConnection(String connectionId,int mode,String exec){
  StatBean bean;
  String key=connectionId + ""String_Node_Str"" + mode;
  if (connectionId.startsWith(""String_Node_Str"")) {
    key=connectionId + ""String_Node_Str"" + mode+ ""String_Node_Str""+ exec;
  }
 else {
    if (connectionId.contains(""String_Node_Str"")) {
      String firstKey=null;
      String connectionName=connectionId.split(""String_Node_Str"")[0];
      int nbKeys=0;
      for (      String myKey : keysList) {
        if (myKey.startsWith(connectionName + ""String_Node_Str"")) {
          if (firstKey == null) {
            firstKey=myKey;
          }
          nbKeys++;
          if (nbKeys == 4) {
            break;
          }
        }
      }
      if (nbKeys == 4) {
        keysList.remove(firstKey);
      }
    }
  }
  if (keysList.contains(key)) {
    keysList.remove(key);
  }
  keysList.add(key);
  if (processStats.containsKey(key)) {
    bean=processStats.get(key);
  }
 else {
    bean=new StatBean(connectionId);
  }
  bean.setState(mode);
  bean.setExec(exec);
  processStats.put(key,bean);
  long newStatsUpdate=System.currentTimeMillis();
  if (lastStatsUpdate == 0 || lastStatsUpdate + 250 < newStatsUpdate) {
    sendMessages();
    lastStatsUpdate=newStatsUpdate;
  }
}","public synchronized void updateStatOnConnection(String connectionId,int mode,String exec){
  StatBean bean;
  StringBuffer key=new StringBuffer();
  key.append(connectionId + ""String_Node_Str"" + mode);
  if (connectionId.startsWith(""String_Node_Str"")) {
    key.delete(0,key.length());
    key.append(connectionId + ""String_Node_Str"" + mode+ ""String_Node_Str""+ exec);
  }
 else {
    if (connectionId.contains(""String_Node_Str"")) {
      String firstKey=null;
      String connectionName=connectionId.split(""String_Node_Str"")[0];
      int nbKeys=0;
      for (      String myKey : keysList) {
        if (myKey.startsWith(connectionName + ""String_Node_Str"")) {
          if (firstKey == null) {
            firstKey=myKey;
          }
          nbKeys++;
          if (nbKeys == 4) {
            break;
          }
        }
      }
      if (nbKeys == 4) {
        keysList.remove(firstKey);
      }
    }
  }
  if (keysList.contains(key)) {
    keysList.remove(key);
  }
  keysList.add(key.toString());
  if (processStats.containsKey(key)) {
    bean=processStats.get(key);
  }
 else {
    bean=new StatBean(connectionId);
  }
  bean.setState(mode);
  bean.setExec(exec);
  processStats.put(key.toString(),bean);
  long newStatsUpdate=System.currentTimeMillis();
  if (lastStatsUpdate == 0 || lastStatsUpdate + 250 < newStatsUpdate) {
    sendMessages();
    lastStatsUpdate=newStatsUpdate;
  }
}",0.9577151335311572
128556,"public void sendMessages(){
  for (  String curKey : keysList) {
    StatBean sb=processStats.get(curKey);
    int jobStat=sb.getJobStat();
    if (jobStat == JOBDEFAULT) {
      str=TYPE1_CONNECTION + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str""+ sb.getConnectionId();
      if (sb.getState() == RunStat.CLEAR) {
        str+=""String_Node_Str"" + ""String_Node_Str"";
      }
 else {
        if (sb.getExec() == null) {
          str+=""String_Node_Str"" + sb.getNbLine() + ""String_Node_Str""+ (sb.getEndTime() - sb.getStartTime());
        }
 else {
          str+=""String_Node_Str"" + sb.getExec();
        }
        if (sb.getState() != RunStat.RUNNING) {
          str+=""String_Node_Str"" + ((sb.getState() == RunStat.BEGIN) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
      }
    }
 else {
      SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
      String jobStatStr=""String_Node_Str"";
      String itemId=sb.getItemId();
      itemId=itemId == null ? ""String_Node_Str"" : itemId;
      if (jobStat == JOBSTART) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getStartTime()));
      }
 else       if (jobStat == JOBEND) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getEndTime()));
      }
      str=TYPE0_JOB + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str""+ jobStatStr;
    }
    pred.println(str);
  }
  keysList.clear();
}","public void sendMessages(){
  for (  String curKey : keysList) {
    StatBean sb=processStats.get(curKey);
    int jobStat=sb.getJobStat();
    if (jobStat == JOBDEFAULT) {
      str.delete(0,str.length());
      str=str.append(TYPE1_CONNECTION + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str"").append(sb.getConnectionId());
      if (sb.getState() == RunStat.CLEAR) {
        str.append(""String_Node_Str"" + ""String_Node_Str"");
      }
 else {
        if (sb.getExec() == null) {
          str.append(""String_Node_Str"").append(sb.getNbLine()).append(""String_Node_Str"").append(sb.getEndTime() - sb.getStartTime());
        }
 else {
          str.append(""String_Node_Str"").append(sb.getExec());
        }
        if (sb.getState() != RunStat.RUNNING) {
          str.append(""String_Node_Str"" + ((sb.getState() == RunStat.BEGIN) ? ""String_Node_Str"" : ""String_Node_Str""));
        }
      }
    }
 else {
      SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
      String jobStatStr=""String_Node_Str"";
      String itemId=sb.getItemId();
      itemId=itemId == null ? ""String_Node_Str"" : itemId;
      if (jobStat == JOBSTART) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getStartTime()));
      }
 else       if (jobStat == JOBEND) {
        jobStatStr=jobName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ itemId+ ""String_Node_Str""+ simpleDateFormat.format(new Date(sb.getEndTime()));
      }
      str.delete(0,str.length());
      str.append(TYPE0_JOB + ""String_Node_Str"" + rootPid+ ""String_Node_Str""+ fatherPid+ ""String_Node_Str""+ pid+ ""String_Node_Str"").append(jobStatStr);
    }
    pred.println(str.toString());
  }
  keysList.clear();
}",0.8893303064699205
128557,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> filterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (!isNullSID(dbConn) && dbConn != null) {
          String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
          postFillCatalog(catalogList,filterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
          break;
        }
 else         if (isCreateElement(catalogFilter,catalogName)) {
          postFillCatalog(catalogList,filterList,catalogName,dbConn);
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (filterList != null) {
                    if (filterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.03137039075399
128558,"@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    ExceptionHandler.process(e);
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}",0.9933076455080104
128559,"/** 
 * FIX( ) Rounds an expression to a decimal number having the accuracy specified by the PRECISION statement. {talendTypes} long | Long {Category} DataOperation {param} double (0.0) d:decimal number {example} FIX(3.14)
 */
public static long FIX(double d){
  return Math.round(d);
}","/** 
 * FIX(double) expression Rounds given double numbers to the closest long. {talendTypes} long | Long {Category} DataOperation {param} double (0.0) d:double number {example} FIX(3.14)
 */
public static long FIX(double d){
  return Math.round(d);
}",0.7039106145251397
128560,"@Override public boolean performDrop(final Object data){
  int operation=getCurrentOperation();
  final RepositoryNode targetNode=(RepositoryNode)getCurrentTarget();
  boolean toReturn=true;
  try {
switch (operation) {
case DND.DROP_COPY:
      RunnableWithReturnValue runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
    runInProgressDialog(runnable);
  toReturn=(Boolean)runnable.getReturnValue();
break;
case DND.DROP_MOVE:
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
case DND.DROP_DEFAULT:
if (event.detail == DND.DROP_COPY) {
runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
if (event.detail == DND.DROP_MOVE) {
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
default :
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
}
return toReturn;
}","@Override public boolean performDrop(final Object data){
  int operation=getCurrentOperation();
  final RepositoryNode targetNode=(RepositoryNode)getCurrentTarget();
  boolean toReturn=true;
  try {
switch (operation) {
case DND.DROP_COPY:
      RunnableWithReturnValue runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
    runCopy(data,targetNode);
  break;
case DND.DROP_MOVE:
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
case DND.DROP_DEFAULT:
if (event.detail == DND.DROP_COPY) {
runnable=new CopyRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
if (event.detail == DND.DROP_MOVE) {
runnable=new MoveRunnable(Messages.getString(""String_Node_Str""),data,targetNode);
runInProgressDialog(runnable);
toReturn=(Boolean)runnable.getReturnValue();
break;
}
default :
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
}
return toReturn;
}",0.9552772808586762
128561,"@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),CopyAction.getInstance());
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),PasteAction.getInstance());
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(CopyAction.getInstance());
  textActionHandler.setPasteAction(PasteAction.getInstance());
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}","@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  PasteAction pasteActionInstance=PasteAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
      pasteActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(pasteActionInstance);
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}",0.6480511925538104
128562,"/** 
 * DOC sgandon Comment method ""refreshTopLevelNodes"".
 */
protected void refreshTopLevelNodes(){
  for (  RepositoryNode topLevelNode : getTopLevelNodes()) {
    refreshTopLevelNode(topLevelNode);
  }
}","/** 
 * DOC sgandon Comment method ""refreshTopLevelNodes"".
 */
protected void refreshTopLevelNodes(){
  Set<RepositoryNode> topLevelNodes=getTopLevelNodes();
  if (topLevelNodes == null) {
    return;
  }
  for (  RepositoryNode topLevelNode : topLevelNodes) {
    refreshTopLevelNode(topLevelNode);
  }
}",0.7109375
128563,"public static Object invokeStaticMethod(String className,String methodName,Object[] args){
  return invokeStaticMethod(className,null,methodName,args);
}","public static Object invokeStaticMethod(String className,String methodName,Object[] args) throws SecurityException, IllegalArgumentException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  return invokeStaticMethod(className,null,methodName,args);
}",0.6710526315789473
128564,"/** 
 * DOC ycbai Comment method ""getPrivateField"". Returns the value of a private field.
 * @param owner
 * @param fieldName
 * @return
 */
public static Object getPrivateField(Object owner,String fieldName){
  Object fieldValue=null;
  Class ownerClass=owner.getClass();
  try {
    Field f=ownerClass.getDeclaredField(fieldName);
    f.setAccessible(true);
    fieldValue=f.get(owner);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return fieldValue;
}","/** 
 * DOC ycbai Comment method ""getPrivateField"". Returns the value of a private field.
 * @param owner
 * @param fieldName
 * @return
 * @throws NoSuchFieldException
 * @throws SecurityException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static Object getPrivateField(Object owner,String fieldName) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
  Object fieldValue=null;
  Class ownerClass=owner.getClass();
  Field f=ownerClass.getDeclaredField(fieldName);
  f.setAccessible(true);
  fieldValue=f.get(owner);
  return fieldValue;
}",0.6835443037974683
128565,"public static Object newInstance(String className,Object[] args){
  return newInstance(className,null,args);
}","public static Object newInstance(String className,Object[] args) throws SecurityException, IllegalArgumentException, ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
  return newInstance(className,null,args);
}",0.5583756345177665
128566,"/** 
 * DOC ycbai Comment method ""getPublicField"". Returns the value of a public field.
 * @param owner
 * @param fieldName
 * @return
 * @throws Exception
 */
public static Object getPublicField(Object owner,String fieldName){
  Object fieldValue=null;
  Class ownerClass=owner.getClass();
  try {
    Field field=ownerClass.getField(fieldName);
    fieldValue=field.get(owner);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return fieldValue;
}","/** 
 * DOC ycbai Comment method ""getPublicField"". Returns the value of a public field.
 * @param owner
 * @param fieldName
 * @return
 * @throws NoSuchFieldException
 * @throws SecurityException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 * @throws Exception
 */
public static Object getPublicField(Object owner,String fieldName) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
  Object fieldValue=null;
  Class ownerClass=owner.getClass();
  Field field=ownerClass.getField(fieldName);
  fieldValue=field.get(owner);
  return fieldValue;
}",0.6807339449541284
128567,"/** 
 * DOC ycbai Comment method ""invokeMethod"". Returns the value of a method.
 * @param owner
 * @param methodName
 * @param args
 * @return
 */
public static Object invokeMethod(Object owner,String methodName,Object[] args){
  Object returnValue=null;
  Class ownerClass=owner.getClass();
  Class[] argsClass=new Class[args.length];
  for (int i=0, j=args.length; i < j; i++) {
    argsClass[i]=args[i].getClass();
  }
  try {
    Method method=ownerClass.getMethod(methodName,argsClass);
    returnValue=method.invoke(owner,args);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return returnValue;
}","/** 
 * DOC ycbai Comment method ""invokeMethod"". Returns the value of a method.
 * @param owner
 * @param methodName
 * @param args
 * @return
 * @throws NoSuchMethodException
 * @throws SecurityException
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static Object invokeMethod(Object owner,String methodName,Object[] args) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Object returnValue=null;
  Class ownerClass=owner.getClass();
  Class[] argsClass=new Class[args.length];
  for (int i=0, j=args.length; i < j; i++) {
    argsClass[i]=args[i].getClass();
  }
  Method method=ownerClass.getMethod(methodName,argsClass);
  returnValue=method.invoke(owner,args);
  return returnValue;
}",0.7166212534059946
128568,"public static Object getStaticField(String className,String fieldName){
  return getStaticField(className,null,fieldName);
}","public static Object getStaticField(String className,String fieldName) throws SecurityException, IllegalArgumentException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
  return getStaticField(className,null,fieldName);
}",0.6702702702702703
128569,"/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode whether is sqlMode
 * @param String dbType
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,String dbType,boolean isSqlMode,String database){
  DatabaseMetaData dbMetaData=null;
  if (conn != null) {
    try {
      if (MSSQL_CONN_CLASS.equals(conn.getClass().getName())) {
        dbMetaData=createJtdsDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.IBMDB2ZOS.getXmlName().equals(dbType)) {
        dbMetaData=createDB2ForZosFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.TERADATA.getXmlName().equals(dbType) && isSqlMode) {
        dbMetaData=createTeradataFakeDatabaseMetaData(conn);
        TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
        teraDbmeta.setDatabaseName(database);
      }
 else       if (EDatabaseTypeName.SAS.getXmlName().equals(dbType)) {
        dbMetaData=createSASFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType)) {
        dbMetaData=createSybaseFakeDatabaseMetaData(conn);
      }
 else {
        dbMetaData=conn.getMetaData();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return dbMetaData;
}","/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode whether is sqlMode
 * @param String dbType
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,String dbType,boolean isSqlMode,String database){
  DatabaseMetaData dbMetaData=null;
  if (conn != null) {
    try {
      if (MSSQL_CONN_CLASS.equals(conn.getClass().getName())) {
        dbMetaData=createJtdsDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.IBMDB2ZOS.getXmlName().equals(dbType)) {
        dbMetaData=createDB2ForZosFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.TERADATA.getXmlName().equals(dbType) && isSqlMode) {
        dbMetaData=createTeradataFakeDatabaseMetaData(conn);
        TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
        teraDbmeta.setDatabaseName(database);
      }
 else       if (EDatabaseTypeName.SAS.getXmlName().equals(dbType)) {
        dbMetaData=createSASFakeDatabaseMetaData(conn);
      }
 else       if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType) || SYBASE_DATABASE_PRODUCT_NAME.equals(dbType)) {
        dbMetaData=createSybaseFakeDatabaseMetaData(conn);
      }
 else {
        dbMetaData=conn.getMetaData();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return dbMetaData;
}",0.9846355017979732
128570,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        if (!ConnectionUtils.isSybase(databaseMetaData)) {
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9743404409107336
128571,"/** 
 * DOC zshen Comment method ""isSybase"".
 * @param connection
 * @return decide to whether is sybase connection
 * @throws SQLException
 */
public static boolean isSybase(java.sql.Connection connection) throws SQLException {
  DatabaseMetaData connectionMetadata=connection.getMetaData();
  if (connectionMetadata.getDriverName() != null && connectionMetadata.getDatabaseProductName() != null) {
    for (    String keyString : getSybaseDBProductsName()) {
      if (keyString.equals(connectionMetadata.getDatabaseProductName().trim())) {
        return true;
      }
    }
  }
  return false;
}","public static boolean isSybase(DatabaseMetaData metadata){
  boolean result=false;
  if (metadata != null && ""String_Node_Str"".equals(metadata.getClass().getName())) {
    result=true;
  }
  return result;
}",0.0967741935483871
128572,"@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  LocalSelectionTransfer.getTransfer().setSelection(selection);
  LocalSelectionTransfer.getTransfer().setSelectionSetTime(System.currentTimeMillis());
}","@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  LocalSelectionTransfer.getTransfer().setSelection(selection);
  LocalSelectionTransfer.getTransfer().setSelectionSetTime(System.currentTimeMillis());
  PasteAction pasteActionInstance=PasteAction.getInstance();
  if (pasteActionInstance != null) {
    pasteActionInstance.init(null,selection);
  }
}",0.8181818181818182
128573,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.9889555064689176
128574,"@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  PasteAction pasteActionInstance=PasteAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
      pasteActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(pasteActionInstance);
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}","@Override public void fillActionBars(IActionBars actionBars){
  super.fillActionBars(actionBars);
  CopyAction copyActionInstance=CopyAction.getInstance();
  PasteAction pasteActionInstance=PasteAction.getInstance();
  actionBars.setGlobalActionHandler(ActionFactory.COPY.getId(),copyActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.PASTE.getId(),pasteActionInstance);
  actionBars.setGlobalActionHandler(ActionFactory.DELETE.getId(),DeleteAction.getInstance());
  if (copyActionInstance != null && pasteActionInstance != null && getContext() != null && getContext().getSelection() instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)getContext().getSelection();
    if (sel != null) {
      copyActionInstance.init(null,sel);
    }
  }
  TextActionHandler textActionHandler=new TextActionHandler(actionBars);
  textActionHandler.setCopyAction(copyActionInstance);
  textActionHandler.setPasteAction(pasteActionInstance);
  textActionHandler.setDeleteAction(DeleteAction.getInstance());
}",0.9802073515551368
128575,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=schemaPattern + ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=schemaPattern + ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (""String_Node_Str"".equalsIgnoreCase(schemaPattern)) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9953772740829108
128576,"public ResultSet getSchemas() throws SQLException {
  java.sql.Statement statement=connection.createStatement();
  String sql;
  if (connection.getDatabaseMajorVersion() >= 9) {
    sql=Driver.JDBC3 ? ""String_Node_Str"" + connection.getCatalog() + ""String_Node_Str"" : ""String_Node_Str"" + connection.getCatalog() + ""String_Node_Str"";
  }
 else {
    sql=Driver.JDBC3 ? ""String_Node_Str"" : ""String_Node_Str"";
  }
  sql+=""String_Node_Str"";
  return statement.executeQuery(sql);
}","@Override public ResultSet getSchemas() throws SQLException {
  java.sql.Statement statement=connection.createStatement();
  String sql;
  if (connection.getDatabaseMajorVersion() >= 9) {
    sql=Driver.JDBC3 ? ""String_Node_Str"" + connection.getCatalog() + ""String_Node_Str"" : ""String_Node_Str"" + connection.getCatalog() + ""String_Node_Str"";
  }
 else {
    sql=Driver.JDBC3 ? ""String_Node_Str"" : ""String_Node_Str"";
  }
  sql+=""String_Node_Str"";
  return statement.executeQuery(sql);
}",0.9895833333333334
128577,"public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.IBMDB2ZOS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.TERADATA.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.TERADATA.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.SAS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.SAS.getXmlName());
    }
  }
  return dbMetaData;
}","public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=getDatabaseMetaData(conn,EDatabaseTypeName.IBMDB2ZOS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.TERADATA.getXmlName())) {
      dbMetaData=getDatabaseMetaData(conn,EDatabaseTypeName.TERADATA.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=getDatabaseMetaData(conn,EDatabaseTypeName.SAS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(SYBASE_DATABASE_PRODUCT_NAME)) {
      dbMetaData=getDatabaseMetaData(conn,SYBASE_DATABASE_PRODUCT_NAME);
    }
  }
  return dbMetaData;
}",0.8995024875621891
128578,"/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode
 * @param DatabaseConnection dbConn
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,DatabaseConnection dbConn,boolean isSqlMode){
  DatabaseMetaData dbMetaData=null;
  try {
    String dbType=dbConn.getDatabaseType();
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=createFakeDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.TERADATA.getXmlName()) && isSqlMode) {
      String database=dbConn.getSID();
      dbMetaData=createTeradataFakeDatabaseMetaData(conn);
      TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
      teraDbmeta.setDatabaseName(database);
    }
 else     if (dbType.equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=createSASFakeDatabaseMetaData(conn);
    }
 else     if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType)) {
      dbMetaData=createSybaseFakeDatabaseMetaData(conn);
    }
 else {
      dbMetaData=conn.getMetaData();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return dbMetaData;
}","/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode
 * @param DatabaseConnection dbConn
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,DatabaseConnection dbConn,boolean isSqlMode){
  DatabaseMetaData dbMetaData=null;
  try {
    String dbType=dbConn.getDatabaseType();
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=createFakeDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.TERADATA.getXmlName()) && isSqlMode) {
      String database=dbConn.getSID();
      dbMetaData=createTeradataFakeDatabaseMetaData(conn);
      TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
      teraDbmeta.setDatabaseName(database);
    }
 else     if (dbType.equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=createSASFakeDatabaseMetaData(conn);
    }
 else     if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType) || SYBASE_DATABASE_PRODUCT_NAME.equals(dbType)) {
      dbMetaData=createSybaseFakeDatabaseMetaData(conn);
    }
 else {
      dbMetaData=conn.getMetaData();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return dbMetaData;
}",0.9844319311030142
128579,"public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.IBMDB2ZOS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.TERADATA.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.TERADATA.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.SAS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.SAS.getXmlName());
    }
  }
  return dbMetaData;
}","public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=getDatabaseMetaData(conn,EDatabaseTypeName.IBMDB2ZOS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.TERADATA.getXmlName())) {
      dbMetaData=getDatabaseMetaData(conn,EDatabaseTypeName.TERADATA.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=getDatabaseMetaData(conn,EDatabaseTypeName.SAS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(SYBASE_DATABASE_PRODUCT_NAME)) {
      dbMetaData=getDatabaseMetaData(conn,SYBASE_DATABASE_PRODUCT_NAME);
    }
  }
  return dbMetaData;
}",0.8995024875621891
128580,"/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode
 * @param DatabaseConnection dbConn
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,DatabaseConnection dbConn,boolean isSqlMode){
  DatabaseMetaData dbMetaData=null;
  try {
    String dbType=dbConn.getDatabaseType();
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=createFakeDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.TERADATA.getXmlName()) && isSqlMode) {
      String database=dbConn.getSID();
      dbMetaData=createTeradataFakeDatabaseMetaData(conn);
      TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
      teraDbmeta.setDatabaseName(database);
    }
 else     if (dbType.equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=createSASFakeDatabaseMetaData(conn);
    }
 else     if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType)) {
      dbMetaData=createSybaseFakeDatabaseMetaData(conn);
    }
 else {
      dbMetaData=conn.getMetaData();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return dbMetaData;
}","/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param Connection conn
 * @param isSqlMode
 * @param DatabaseConnection dbConn
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,DatabaseConnection dbConn,boolean isSqlMode){
  DatabaseMetaData dbMetaData=null;
  try {
    String dbType=dbConn.getDatabaseType();
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=createFakeDatabaseMetaData(conn);
    }
 else     if (dbType.equals(EDatabaseTypeName.TERADATA.getXmlName()) && isSqlMode) {
      String database=dbConn.getSID();
      dbMetaData=createTeradataFakeDatabaseMetaData(conn);
      TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
      teraDbmeta.setDatabaseName(database);
    }
 else     if (dbType.equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=createSASFakeDatabaseMetaData(conn);
    }
 else     if (EDatabaseTypeName.SYBASEASE.getDisplayName().equals(dbType) || SYBASE_DATABASE_PRODUCT_NAME.equals(dbType)) {
      dbMetaData=createSybaseFakeDatabaseMetaData(conn);
    }
 else {
      dbMetaData=conn.getMetaData();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return dbMetaData;
}",0.9844319311030142
128581,"public static <E>DynaEnum<? extends DynaEnum<?>>[] values(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  String projectType=null;
  if (currentProject != null) {
    projectType=currentProject.getEmfProject().getType();
  }
  if (""String_Node_Str"".equals(projectType)) {
    List<ERepositoryObjectType> toReturn=new ArrayList<ERepositoryObjectType>();
    for (    ERepositoryObjectType currentType : values(ERepositoryObjectType.class)) {
      if (ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"") || ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"")) {
        toReturn.add(currentType);
      }
    }
    return toReturn.toArray(new ERepositoryObjectType[]{});
  }
  return values(ERepositoryObjectType.class);
}","public static <E>DynaEnum<? extends DynaEnum<?>>[] values(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  String projectType=null;
  if (currentProject != null) {
    projectType=currentProject.getEmfProject().getType();
  }
  if (""String_Node_Str"".equals(projectType)) {
    List<ERepositoryObjectType> toReturn=new ArrayList<ERepositoryObjectType>();
    for (    ERepositoryObjectType currentType : values(ERepositoryObjectType.class)) {
      if (ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"") || ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"")) {
        toReturn.add(currentType);
      }
    }
    return toReturn.toArray(new ERepositoryObjectType[]{});
  }
  if (!PluginChecker.isPluginLoaded(""String_Node_Str"")) {
    List<ERepositoryObjectType> toReturn=new ArrayList<ERepositoryObjectType>();
    for (    ERepositoryObjectType currentType : values(ERepositoryObjectType.class)) {
      if (!(currentType.getProducts().length == 1 && ArrayUtils.contains(currentType.getProducts(),""String_Node_Str""))) {
        toReturn.add(currentType);
      }
    }
    return toReturn.toArray(new ERepositoryObjectType[0]);
  }
  return values(ERepositoryObjectType.class);
}",0.7518573551263001
128582,"public Resource createTempProjectResource(){
  URI uri=null;
  try {
    uri=URI.createPlatformResourceURI(Platform.getInstallLocation().getURL().toURI().toString());
  }
 catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
  return resourceSet.createResource(uri);
}","public Resource createTempProjectResource(){
  URI uri=null;
  try {
    uri=URI.createPlatformResourceURI(Platform.getInstallLocation().getURL().getFile(),true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return resourceSet.createResource(uri);
}",0.9299820466786356
128583,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getType();
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9630066902794177
128584,"public Object caseJobletDocumentationItem(JobletDocumentationItem object){
  return JOBLET_DOC;
}","@Override public Object caseJobletDocumentationItem(JobletDocumentationItem object){
  return JOBLET_DOC;
}",0.9509803921568628
128585,"public Object caseLdifFileConnectionItem(LdifFileConnectionItem object){
  return METADATA_FILE_LDIF;
}","@Override public Object caseLdifFileConnectionItem(LdifFileConnectionItem object){
  return METADATA_FILE_LDIF;
}",0.9537037037037036
128586,"public Object caseContextItem(ContextItem object){
  return CONTEXT;
}","@Override public Object caseContextItem(ContextItem object){
  return CONTEXT;
}",0.9333333333333332
128587,"public Object caseDocumentationItem(DocumentationItem object){
  return DOCUMENTATION;
}","@Override public Object caseDocumentationItem(DocumentationItem object){
  return DOCUMENTATION;
}",0.946236559139785
128588,"public Object caseHeaderFooterConnectionItem(HeaderFooterConnectionItem object){
  return METADATA_HEADER_FOOTER;
}","@Override public Object caseHeaderFooterConnectionItem(HeaderFooterConnectionItem object){
  return METADATA_HEADER_FOOTER;
}",0.9583333333333334
128589,"private static <E>void initDynamicNodes(Class<E> clazz) throws Exception {
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  try {
    for (int i=0; i < configurationElements.length; i++) {
      IConfigurationElement element=configurationElements[i];
      Object extensionNode=element.createExecutableExtension(""String_Node_Str"");
      if (extensionNode instanceof IExtendRepositoryNode) {
        IExtendRepositoryNode diyNode=(IExtendRepositoryNode)extensionNode;
        String label=element.getAttribute(""String_Node_Str"");
        String type=element.getAttribute(""String_Node_Str"");
        String folder=element.getAttribute(""String_Node_Str"");
        if (folder == null) {
          folder=""String_Node_Str"";
        }
        String isResouce=element.getAttribute(""String_Node_Str"");
        String rightAttribute=element.getAttribute(""String_Node_Str"");
        if (rightAttribute == null) {
          rightAttribute=""String_Node_Str"";
        }
        String productsAttribute=element.getAttribute(""String_Node_Str"");
        String[] products=productsAttribute.split(""String_Node_Str"");
        String[] user_right=rightAttribute.split(""String_Node_Str"");
        boolean isResource=false;
        if (isResouce != null) {
          isResource=Boolean.parseBoolean(isResouce);
        }
        boolean[] resource=new boolean[]{isResource};
        if (products == null) {
          products=new String[]{productsAttribute};
        }
        if (user_right == null) {
          user_right=new String[]{rightAttribute};
        }
        int ordinal=diyNode.getOrdinal();
        Constructor<E> dynamicConstructor=getConstructor(clazz,new Class[]{String.class,String.class,String.class,boolean.class,int.class,String[].class,String[].class,boolean[].class});
        dynamicConstructor.newInstance(label,folder,type,false,ordinal,products,user_right,resource);
      }
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}","private static <E>void initDynamicNodes(Class<E> clazz) throws Exception {
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  try {
    for (    IConfigurationElement element : configurationElements) {
      Object extensionNode=element.createExecutableExtension(""String_Node_Str"");
      if (extensionNode instanceof IExtendRepositoryNode) {
        IExtendRepositoryNode diyNode=(IExtendRepositoryNode)extensionNode;
        String label=element.getAttribute(""String_Node_Str"");
        String type=element.getAttribute(""String_Node_Str"");
        String folder=element.getAttribute(""String_Node_Str"");
        if (folder == null) {
          folder=""String_Node_Str"";
        }
        String isResouce=element.getAttribute(""String_Node_Str"");
        String rightAttribute=element.getAttribute(""String_Node_Str"");
        if (rightAttribute == null) {
          rightAttribute=""String_Node_Str"";
        }
        String productsAttribute=element.getAttribute(""String_Node_Str"");
        String[] products=productsAttribute.split(""String_Node_Str"");
        String[] user_right=rightAttribute.split(""String_Node_Str"");
        boolean isResource=false;
        if (isResouce != null) {
          isResource=Boolean.parseBoolean(isResouce);
        }
        boolean[] resource=new boolean[]{isResource};
        if (products == null) {
          products=new String[]{productsAttribute};
        }
        if (user_right == null) {
          user_right=new String[]{rightAttribute};
        }
        int ordinal=diyNode.getOrdinal();
        Constructor<E> dynamicConstructor=getConstructor(clazz,new Class[]{String.class,String.class,String.class,boolean.class,int.class,String[].class,String[].class,boolean[].class});
        dynamicConstructor.newInstance(label,folder,type,false,ordinal,products,user_right,resource);
      }
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}",0.9846901579586878
128590,"public Object caseXmlFileConnectionItem(XmlFileConnectionItem object){
  return METADATA_FILE_XML;
}","@Override public Object caseXmlFileConnectionItem(XmlFileConnectionItem object){
  return METADATA_FILE_XML;
}",0.9523809523809524
128591,"public Object caseProcessItem(ProcessItem object){
  return PROCESS;
}","@Override public Object caseProcessItem(ProcessItem object){
  return PROCESS;
}",0.9333333333333332
128592,"public Object caseFTPConnectionItem(FTPConnectionItem object){
  return METADATA_FILE_FTP;
}","@Override public Object caseFTPConnectionItem(FTPConnectionItem object){
  return METADATA_FILE_FTP;
}",0.9484536082474226
128593,"public Object caseCSVFileConnectionItem(CSVFileConnectionItem object){
  throw new IllegalStateException(Messages.getString(""String_Node_Str""));
}","@Override public Object caseCSVFileConnectionItem(CSVFileConnectionItem object){
  throw new IllegalStateException(Messages.getString(""String_Node_Str""));
}",0.9668874172185432
128594,"public Object caseEDIFACTConnectionItem(EDIFACTConnectionItem object){
  return METADATA_EDIFACT;
}","@Override public Object caseEDIFACTConnectionItem(EDIFACTConnectionItem object){
  return METADATA_EDIFACT;
}",0.9519230769230768
128595,"public Object caseRoutineItem(RoutineItem object){
  return ROUTINES;
}","@Override public Object caseRoutineItem(RoutineItem object){
  return ROUTINES;
}",0.9342105263157896
128596,"public Object caseValidationRulesConnectionItem(ValidationRulesConnectionItem object){
  return METADATA_VALIDATION_RULES;
}","@Override public Object caseValidationRulesConnectionItem(ValidationRulesConnectionItem object){
  return METADATA_VALIDATION_RULES;
}",0.9612403100775194
128597,"public Object caseHL7ConnectionItem(HL7ConnectionItem object){
  return METADATA_FILE_HL7;
}","@Override public Object caseHL7ConnectionItem(HL7ConnectionItem object){
  return METADATA_FILE_HL7;
}",0.9484536082474226
128598,"public Object caseSnippetItem(SnippetItem object){
  return SNIPPETS;
}","@Override public Object caseSnippetItem(SnippetItem object){
  return SNIPPETS;
}",0.9342105263157896
128599,"public String name(){
  if (isStaticNode()) {
    Field[] allFields=ERepositoryObjectType.class.getDeclaredFields();
    for (    Field f : allFields) {
      try {
        Object object=f.get(null);
        if (object == this) {
          return f.getName();
        }
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
    }
  }
  return super.name();
}","@Override public String name(){
  if (isStaticNode()) {
    Field[] allFields=ERepositoryObjectType.class.getDeclaredFields();
    for (    Field f : allFields) {
      try {
        Object object=f.get(null);
        if (object == this) {
          return f.getName();
        }
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
    }
  }
  return super.name();
}",0.9880382775119616
128600,"public Object caseSnippetVariable(SnippetVariable object){
  return SNIPPETS;
}","@Override public Object caseSnippetVariable(SnippetVariable object){
  return SNIPPETS;
}",0.9404761904761904
128601,"public Object casePositionalFileConnectionItem(PositionalFileConnectionItem object){
  return METADATA_FILE_POSITIONAL;
}","@Override public Object casePositionalFileConnectionItem(PositionalFileConnectionItem object){
  return METADATA_FILE_POSITIONAL;
}",0.9603174603174603
128602,"public static <E>DynaEnum<? extends DynaEnum<?>>[] values(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  String projectType=null;
  if (currentProject != null) {
    projectType=currentProject.getEmfProject().getType();
  }
  if (""String_Node_Str"".equals(projectType)) {
    List<ERepositoryObjectType> toReturn=new ArrayList<ERepositoryObjectType>();
    for (    ERepositoryObjectType currentType : values(ERepositoryObjectType.class)) {
      if (ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"") || ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"")) {
        toReturn.add(currentType);
      }
    }
    return toReturn.toArray(new ERepositoryObjectType[]{});
  }
  return values(ERepositoryObjectType.class);
}","public static <E>DynaEnum<? extends DynaEnum<?>>[] values(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  String projectType=null;
  if (currentProject != null) {
    projectType=currentProject.getEmfProject().getType();
  }
  if (""String_Node_Str"".equals(projectType)) {
    List<ERepositoryObjectType> toReturn=new ArrayList<ERepositoryObjectType>();
    for (    ERepositoryObjectType currentType : values(ERepositoryObjectType.class)) {
      if (ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"") || ArrayUtils.contains(currentType.getProducts(),""String_Node_Str"")) {
        toReturn.add(currentType);
      }
    }
    return toReturn.toArray(new ERepositoryObjectType[]{});
  }
  if (!PluginChecker.isPluginLoaded(""String_Node_Str"")) {
    List<ERepositoryObjectType> toReturn=new ArrayList<ERepositoryObjectType>();
    for (    ERepositoryObjectType currentType : values(ERepositoryObjectType.class)) {
      if (!(currentType.getProducts().length == 1 && ArrayUtils.contains(currentType.getProducts(),""String_Node_Str""))) {
        toReturn.add(currentType);
      }
    }
    return toReturn.toArray(new ERepositoryObjectType[0]);
  }
  return values(ERepositoryObjectType.class);
}",0.7518573551263001
128603,"public Object caseMDMConnectionItem(MDMConnectionItem object){
  return METADATA_MDMCONNECTION;
}","@Override public Object caseMDMConnectionItem(MDMConnectionItem object){
  return METADATA_MDMCONNECTION;
}",0.9509803921568628
128604,"public Object caseJobScriptItem(JobScriptItem object){
  return JOB_SCRIPT;
}","@Override public Object caseJobScriptItem(JobScriptItem object){
  return JOB_SCRIPT;
}",0.9390243902439024
128605,"public Object caseJobDocumentationItem(JobDocumentationItem object){
  return JOB_DOC;
}","@Override public Object caseJobDocumentationItem(JobDocumentationItem object){
  return JOB_DOC;
}",0.946236559139785
128606,"public Object caseDelimitedFileConnectionItem(DelimitedFileConnectionItem object){
  return METADATA_FILE_DELIMITED;
}","@Override public Object caseDelimitedFileConnectionItem(DelimitedFileConnectionItem object){
  return METADATA_FILE_DELIMITED;
}",0.959349593495935
128607,"public Object caseSalesforceSchemaConnectionItem(SalesforceSchemaConnectionItem object){
  return METADATA_SALESFORCE_SCHEMA;
}","@Override public Object caseSalesforceSchemaConnectionItem(SalesforceSchemaConnectionItem object){
  return METADATA_SALESFORCE_SCHEMA;
}",0.9621212121212122
128608,"public Object caseExcelFileConnectionItem(ExcelFileConnectionItem object){
  return METADATA_FILE_EXCEL;
}","@Override public Object caseExcelFileConnectionItem(ExcelFileConnectionItem object){
  return METADATA_FILE_EXCEL;
}",0.954954954954955
128609,"public Object caseWSDLSchemaConnectionItem(WSDLSchemaConnectionItem object){
  return METADATA_WSDL_SCHEMA;
}","@Override public Object caseWSDLSchemaConnectionItem(WSDLSchemaConnectionItem object){
  return METADATA_WSDL_SCHEMA;
}",0.956140350877193
128610,"public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    public Object defaultCase(    EObject object){
      throw new IllegalStateException();
    }
  }
.doSwitch(item);
}","public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      throw new IllegalStateException();
    }
  }
.doSwitch(item);
}",0.9716686205549042
128611,"public Object caseGenericSchemaConnectionItem(GenericSchemaConnectionItem object){
  return METADATA_GENERIC_SCHEMA;
}","@Override public Object caseGenericSchemaConnectionItem(GenericSchemaConnectionItem object){
  return METADATA_GENERIC_SCHEMA;
}",0.959349593495935
128612,"public Object caseLDAPSchemaConnectionItem(LDAPSchemaConnectionItem object){
  return METADATA_LDAP_SCHEMA;
}","@Override public Object caseLDAPSchemaConnectionItem(LDAPSchemaConnectionItem object){
  return METADATA_LDAP_SCHEMA;
}",0.956140350877193
128613,"public Object caseRegExFileConnectionItem(RegExFileConnectionItem object){
  return METADATA_FILE_REGEXP;
}","@Override public Object caseRegExFileConnectionItem(RegExFileConnectionItem object){
  return METADATA_FILE_REGEXP;
}",0.9553571428571428
128614,"public Object caseBusinessProcessItem(BusinessProcessItem object){
  return BUSINESS_PROCESS;
}","@Override public Object caseBusinessProcessItem(BusinessProcessItem object){
  return BUSINESS_PROCESS;
}",0.95
128615,"public Object caseDatabaseConnectionItem(DatabaseConnectionItem object){
  return METADATA_CONNECTIONS;
}","@Override public Object caseDatabaseConnectionItem(DatabaseConnectionItem object){
  return METADATA_CONNECTIONS;
}",0.9545454545454546
128616,"public Object defaultCase(EObject object){
  throw new IllegalStateException();
}","@Override public Object defaultCase(EObject object){
  throw new IllegalStateException();
}",0.9418604651162792
128617,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getType();
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9387996452153344
128618,"private void addComplexTypeDetails(XSDSchema xsdSchema,ATreeNode node,XSDTypeDefinition xsdTypeDefinition,String prefix,String namespace,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  String prefixToUse=prefix;
  if (namespace != null && !namespaceToPrefix.containsKey(namespace)) {
    if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
      prefixToUse=""String_Node_Str"" + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (namespaceToPrefix.containsValue(prefix)) {
      prefixToUse=prefixToUse + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (prefixToUse != null && !prefixToUse.isEmpty()) {
      namespaceToPrefix.put(namespace,prefixToUse);
    }
  }
  XSDComplexTypeDefinition xsdComplexTypeDefinition=(XSDComplexTypeDefinition)xsdTypeDefinition;
  if (xsdComplexTypeDefinition.getContentType() instanceof XSDParticle) {
    addParticleDetail(xsdSchema,(XSDParticle)xsdComplexTypeDefinition.getContentType(),node,currentPath);
  }
  for (Iterator attributeUses=xsdComplexTypeDefinition.getAttributeUses().iterator(); attributeUses.hasNext(); ) {
    XSDAttributeUse xsdAttributeUse=(XSDAttributeUse)attributeUses.next();
    XSDAttributeDeclaration xsdAttributeDeclaration=xsdAttributeUse.getAttributeDeclaration();
    String attributeDeclarationName=xsdAttributeDeclaration.getName();
    ATreeNode childNode=new ATreeNode();
    childNode.setValue(attributeDeclarationName);
    childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
    String dataType=xsdAttributeDeclaration.getTypeDefinition().getQName();
    if (xsdAttributeDeclaration.getTypeDefinition().getBaseType() != null) {
      dataType=xsdAttributeDeclaration.getTypeDefinition().getBaseType().getQName();
    }
    if (dataType != null && dataType.length() > 0) {
      childNode.setDataType(dataType);
    }
    node.addChild(childNode);
  }
}","private void addComplexTypeDetails(XSDSchema xsdSchema,ATreeNode node,XSDTypeDefinition xsdTypeDefinition,String prefix,String namespace,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  String prefixToUse=prefix;
  if (namespace != null && !namespaceToPrefix.containsKey(namespace)) {
    if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
      prefixToUse=""String_Node_Str"" + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (namespaceToPrefix.containsValue(prefix)) {
      prefixToUse=prefixToUse + prefixNumberGenerated;
      prefixNumberGenerated++;
    }
    if (prefixToUse != null && !prefixToUse.isEmpty()) {
      namespaceToPrefix.put(namespace,prefixToUse);
    }
  }
  XSDComplexTypeDefinition xsdComplexTypeDefinition=(XSDComplexTypeDefinition)xsdTypeDefinition;
  if (xsdComplexTypeDefinition.getContentType() instanceof XSDParticle) {
    addParticleDetail(xsdSchema,(XSDParticle)xsdComplexTypeDefinition.getContentType(),node,currentPath);
  }
  for (  Object element : xsdComplexTypeDefinition.getAttributeUses()) {
    XSDAttributeUse xsdAttributeUse=(XSDAttributeUse)element;
    XSDAttributeDeclaration xsdAttributeDeclaration=xsdAttributeUse.getAttributeDeclaration();
    String attributeDeclarationName=xsdAttributeDeclaration.getName();
    ATreeNode childNode=new ATreeNode();
    childNode.setValue(attributeDeclarationName);
    childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
    String dataType=xsdAttributeDeclaration.getTypeDefinition().getQName();
    if (xsdAttributeDeclaration.getTypeDefinition().getBaseType() != null) {
      dataType=xsdAttributeDeclaration.getTypeDefinition().getBaseType().getQName();
    }
    if (dataType != null && dataType.length() > 0) {
      childNode.setDataType(dataType);
    }
    node.addChild(childNode);
  }
}",0.932136255611302
128619,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType) || EDatabaseConnTemplate.MYSQL.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else       if (EDatabaseTypeName.VERTICA.getXmlName().equals(databaseType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersionString)) {
        return ""String_Node_Str"";
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  }
  return null;
}",0.9968302156346266
128620,"public Resource createTempProjectResource(){
  URI uri=null;
  try {
    uri=URI.createPlatformResourceURI(Platform.getInstallLocation().getURL().toURI().toString());
  }
 catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
  return resourceSet.createResource(uri);
}","public Resource createTempProjectResource(){
  URI uri=null;
  try {
    uri=URI.createPlatformResourceURI(Platform.getInstallLocation().getURL().getFile(),true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return resourceSet.createResource(uri);
}",0.9299820466786356
128621,"protected void makeActions(){
  boolean isNewDoubleClickAction=false;
  if (doubleClickAction != null) {
    StructuredViewer structuredViewer=doubleClickAction.getStructuredViewer();
    ISelection selection=structuredViewer.getSelection();
    if (selection.isEmpty()) {
      isNewDoubleClickAction=true;
    }
  }
  if (contextualsActions == null || isNewDoubleClickAction) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}","protected void makeActions(){
  boolean isNewDoubleClickAction=false;
  if (doubleClickAction != null && doubleClickAction.getStructuredViewer() != null) {
    StructuredViewer structuredViewer=doubleClickAction.getStructuredViewer();
    ISelection selection=structuredViewer.getSelection();
    if (selection == null || selection.isEmpty()) {
      isNewDoubleClickAction=true;
    }
  }
  if (contextualsActions == null || isNewDoubleClickAction) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}",0.9750692520775625
128622,"/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection());
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}","/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection(),true);
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}",0.9971542401821286
128623,"public boolean getMergeRefProject(){
  IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
  return preferenceStore.getBoolean(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT);
}","public boolean getMergeRefProject(){
  IPreferenceStore preferenceStore=RepositoryManager.getRepositoryPreferenceStore();
  return preferenceStore.getBoolean(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT);
}",0.975609756097561
128624,"/** 
 * DOC sgandon Comment method ""registerMergeRefListgener"".
 */
private void registerMergeRefListener(){
  if (mergeRefListener == null) {
    mergeRefListener=new IPropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent event){
        if (IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT.equals(event.getProperty())) {
          refreshTopLevelNodes();
        }
      }
    }
;
    if (CoreRuntimePlugin.getInstance().getDesignerCoreService() != null) {
      IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
      preferenceStore.addPropertyChangeListener(mergeRefListener);
    }
  }
}","/** 
 * DOC sgandon Comment method ""registerMergeRefListgener"".
 */
private void registerMergeRefListener(){
  if (mergeRefListener == null) {
    mergeRefListener=new IPropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent event){
        if (IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT.equals(event.getProperty())) {
          refreshTopLevelNodes();
        }
      }
    }
;
    if (CoreRuntimePlugin.getInstance().getDesignerCoreService() != null) {
      IPreferenceStore preferenceStore=RepositoryManager.getRepositoryPreferenceStore();
      preferenceStore.addPropertyChangeListener(mergeRefListener);
    }
  }
}",0.9924471299093656
128625,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  Adapter adaptor=new Adapter(){
    @Override public Notifier getTarget(){
      return null;
    }
    @Override public boolean isAdapterForType(    Object arg0){
      return false;
    }
    @Override public void notifyChanged(    Notification arg0){
      int type=arg0.getEventType();
      int featureId=arg0.getFeatureID(ConnectionPackage.class);
      if (type == Notification.SET && featureId == ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL) {
        MetadataColumn column=(MetadataColumn)arg0.getNotifier();
        String tableName=column.getTable().getLabel();
        Map<String,String> columnChanged=labelChanged.get(tableName);
        if (columnChanged == null) {
          columnChanged=new HashMap<String,String>();
          labelChanged.put(tableName,columnChanged);
        }
        String originalColumnName=columnChanged.get(arg0.getOldStringValue());
        if (originalColumnName == null) {
          columnChanged.put(arg0.getNewStringValue(),arg0.getOldStringValue());
        }
 else {
          columnChanged.clear();
          columnChanged.put(arg0.getNewStringValue(),originalColumnName);
        }
      }
    }
    @Override public void setTarget(    Notifier arg0){
    }
  }
;
  if (visible) {
    initializeForm();
    for (    MetadataColumn column : metadataTable.getColumns()) {
      column.eAdapters().add(adaptor);
    }
  }
 else {
    for (    MetadataColumn column : metadataTable.getColumns()) {
      if (column.eAdapters().contains(adaptor)) {
        column.eAdapters().remove(adaptor);
      }
    }
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  Adapter adaptor=new Adapter(){
    @Override public Notifier getTarget(){
      return null;
    }
    @Override public boolean isAdapterForType(    Object arg0){
      return false;
    }
    @Override public void notifyChanged(    Notification arg0){
      int type=arg0.getEventType();
      int featureId=arg0.getFeatureID(ConnectionPackage.class);
      if (type == Notification.SET && featureId == ConnectionPackage.ABSTRACT_METADATA_OBJECT__LABEL) {
        MetadataColumn column=(MetadataColumn)arg0.getNotifier();
        String tableName=column.getTable().getLabel();
        Map<String,String> columnChanged=labelChanged.get(tableName);
        if (columnChanged == null) {
          columnChanged=new HashMap<String,String>();
          labelChanged.put(tableName,columnChanged);
        }
        String originalColumnName=columnChanged.get(arg0.getOldStringValue());
        if (originalColumnName == null) {
          columnChanged.put(arg0.getNewStringValue(),arg0.getOldStringValue());
        }
 else {
          columnChanged.clear();
          columnChanged.put(arg0.getNewStringValue(),originalColumnName);
        }
      }
    }
    @Override public void setTarget(    Notifier arg0){
    }
  }
;
  if (visible) {
    initializeForm();
    if (metadataTable != null) {
      for (      MetadataColumn column : metadataTable.getColumns()) {
        column.eAdapters().add(adaptor);
      }
    }
  }
 else {
    if (metadataTable != null) {
      for (      MetadataColumn column : metadataTable.getColumns()) {
        if (column.eAdapters().contains(adaptor)) {
          column.eAdapters().remove(adaptor);
        }
      }
    }
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
}",0.7993177942012507
128626,"public static List parseTo_List(String s){
  if (s != null) {
    List list=new ArrayList();
    list.add(s);
    return list;
  }
  return null;
}","/** 
 * the source should be a string wrapped in chars[ ] which stands for it is a collection
 * @param stSrc
 * @param fieldSep
 * @return
 */
public static List<String> parseTo_List(String strSrc,String fieldSep){
  if (strSrc == null) {
    return null;
  }
  List<String> list=new ArrayList<String>();
  if ((fieldSep == null || ""String_Node_Str"".equals(fieldSep)) || !(strSrc.startsWith(""String_Node_Str"") && strSrc.endsWith(""String_Node_Str""))) {
    list.add(strSrc);
    return list;
  }
  return Arrays.asList(strSrc.split(fieldSep,-1));
}",0.3683453237410072
128627,"@Override public void selectionChanged(IStructuredSelection selection){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node == null) {
    this.setEnabled(false);
  }
 else {
    if (node.getParent() == null) {
      this.setEnabled(false);
    }
 else     if (node.getColumn() != null) {
      this.setEnabled(false);
    }
 else     if (node.getChildren() != null && !node.getChildren().isEmpty()) {
      this.setEnabled(false);
    }
 else {
      this.setEnabled(true);
    }
  }
}","@Override public void selectionChanged(IStructuredSelection selection){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node == null) {
    this.setEnabled(false);
  }
 else {
    if (node.getParent() == null) {
      this.setEnabled(false);
    }
 else     if (node.getColumn() != null) {
      this.setEnabled(false);
    }
 else     if (node.getChildren() != null && !node.getChildren().isEmpty()) {
      boolean haveElementChild=false;
      for (      FOXTreeNode child : node.getChildren()) {
        if (child instanceof Element) {
          haveElementChild=true;
          break;
        }
      }
      if (haveElementChild) {
        setEnabled(false);
      }
 else {
        setEnabled(true);
      }
    }
 else {
      this.setEnabled(true);
    }
  }
}",0.6746626686656672
128628,"public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node != null) {
    setFixValue(node);
  }
}","@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node != null) {
    setFixValue(node);
  }
}",0.967741935483871
128629,"public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    return;
  }
  Control control=dropTarget.getControl();
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  IMetadataTable table=null;
  if (draggedData.getTable() instanceof MetadataTable) {
    table=ConvertionHelper.convert((MetadataTable)draggedData.getTable());
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (!targetNode.hasChildren()) {
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setDefaultValue(null);
      targetNode.setColumn(metaColumn);
      targetNode.setTable(table);
      targetNode.setDataType(metaColumn.getTalendType());
      linker.getXMLViewer().refresh(targetNode);
      linker.getXMLViewer().expandAll();
      Display display=linker.getSource().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getSource().getShell().setCursor(cursor);
      linker.valuedChanged(targetItem);
      linker.getSource().getShell().setCursor(null);
    }
  }
 else   if (dragdedData.size() > 0) {
    DragAndDrogDialog dialog=new DragAndDrogDialog(null);
    dialog.open();
    if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
      return;
    }
    if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_TEXT)) {
      if (targetNode.hasChildren()) {
        List<FOXTreeNode> children=targetNode.getChildren();
        for (        FOXTreeNode foxTreeNode : children) {
          if (!(foxTreeNode instanceof Attribute) && !(foxTreeNode instanceof NameSpaceNode)) {
            MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
            return;
          }
        }
      }
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setColumn(metaColumn);
      targetNode.setDataType(metaColumn.getTalendType());
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_SUBELEMENT)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      if (targetNode.getColumn() != null) {
        if (!MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"")) {
          return;
        }
        targetNode.setColumn(null);
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getElementChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setDataType(metaColumn.getTalendType());
            node.setTable(table);
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Element(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      if (targetNode instanceof Element && targetNode.getParent() == null && targetNode.isLoop()) {
        targetNode.setLoop(false);
      }
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_ATTRIBUTE)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getAttributeChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setTable(table);
            node.setDataType(metaColumn.getTalendType());
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Attribute(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      setDefaultFixValue(targetNode);
    }
    linker.getXMLViewer().refresh();
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
  linker.getXMLViewer().refresh();
  linker.getXMLViewer().expandAll();
  linker.updateLinksStyleAndControlsSelection(control,true);
  linker.getForm().updateConnection();
  linker.getForm().updateStatus();
}","@Override public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    return;
  }
  Control control=dropTarget.getControl();
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  IMetadataTable table=null;
  if (draggedData.getTable() instanceof MetadataTable) {
    table=ConvertionHelper.convert((MetadataTable)draggedData.getTable());
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
    targetNode.setDefaultValue(null);
    targetNode.setColumn(metaColumn);
    targetNode.setTable(table);
    targetNode.setDataType(metaColumn.getTalendType());
    linker.getXMLViewer().refresh(targetNode);
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
 else   if (dragdedData.size() > 0) {
    DragAndDrogDialog dialog=new DragAndDrogDialog(null);
    dialog.open();
    if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
      return;
    }
    if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_TEXT)) {
      if (hasElementChildren(targetNode)) {
        List<FOXTreeNode> children=targetNode.getChildren();
        for (        FOXTreeNode foxTreeNode : children) {
          if (!(foxTreeNode instanceof Attribute) && !(foxTreeNode instanceof NameSpaceNode)) {
            MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
            return;
          }
        }
      }
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setColumn(metaColumn);
      targetNode.setDataType(metaColumn.getTalendType());
      targetNode.setDefaultValue(null);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_SUBELEMENT)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      if (targetNode.getColumn() != null) {
        if (!MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"")) {
          return;
        }
        targetNode.setColumn(null);
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getElementChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setDataType(metaColumn.getTalendType());
            node.setTable(table);
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Element(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      if (targetNode instanceof Element && targetNode.getParent() == null && targetNode.isLoop()) {
        targetNode.setLoop(false);
      }
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_ATTRIBUTE)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getAttributeChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setTable(table);
            node.setDataType(metaColumn.getTalendType());
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Attribute(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
    }
    linker.getXMLViewer().refresh();
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
  linker.getXMLViewer().refresh();
  linker.getXMLViewer().expandAll();
  linker.updateLinksStyleAndControlsSelection(control,true);
  linker.getForm().updateConnection();
  linker.getForm().updateStatus();
}",0.9841614625757988
128630,"public void dragEnter(DropTargetEvent event){
}","@Override public void dragEnter(DropTargetEvent event){
}",0.903846153846154
128631,"public void dropAccept(DropTargetEvent event){
}","@Override public void dropAccept(DropTargetEvent event){
}",0.9056603773584906
128632,"public void dragStart(DragSourceEvent event){
  TableItem[] items=linker.getSource().getSelection();
  if (items.length == 0) {
    event.doit=false;
  }
 else {
    LocalDraggedData draggedData=new LocalDraggedData();
    for (    TableItem tableItem : items) {
      draggedData.add(tableItem.getData());
    }
    draggedData.setTable(getMainForm().getMetadataTable());
    LocalDataTransfer.getInstance().setLocalDraggedData(draggedData);
  }
}","@Override public void dragStart(DragSourceEvent event){
  TableItem[] items=linker.getSource().getSelection();
  if (items.length == 0) {
    event.doit=false;
  }
 else {
    LocalDraggedData draggedData=new LocalDraggedData();
    for (    TableItem tableItem : items) {
      draggedData.add(tableItem.getData());
    }
    draggedData.setTable(getMainForm().getMetadataTable());
    LocalDataTransfer.getInstance().setLocalDraggedData(draggedData);
  }
}",0.9889624724061812
128633,"public void dragSetData(DragSourceEvent event){
  event.getSource();
}","@Override public void dragSetData(DragSourceEvent event){
  event.getSource();
}",0.9333333333333332
128634,"public void dragFinished(DragSourceEvent event){
  event.getSource();
}","@Override public void dragFinished(DragSourceEvent event){
  event.getSource();
}",0.9342105263157896
128635,"public void dragOperationChanged(DropTargetEvent event){
}","@Override public void dragOperationChanged(DropTargetEvent event){
}",0.9206349206349206
128636,"public Transfer getTransfer(){
  return LocalDataTransfer.getInstance();
}","@Override public Transfer getTransfer(){
  return LocalDataTransfer.getInstance();
}",0.9367088607594936
128637,"public boolean isEnabled(DropTargetEvent event){
  return true;
}","@Override public boolean isEnabled(DropTargetEvent event){
  return true;
}",0.9285714285714286
128638,"public void dragOver(DropTargetEvent event){
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    event.detail=DND.DROP_NONE;
    return;
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (targetNode instanceof Element) {
      Element element=(Element)targetNode;
      if (!element.getElementChildren().isEmpty() || element.getParent() == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
    }
 else {
      FOXTreeNode parent=targetNode.getParent();
      if (parent == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
    }
  }
  event.detail=DND.DROP_LINK;
}","@Override public void dragOver(DropTargetEvent event){
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    event.detail=DND.DROP_NONE;
    return;
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (targetNode instanceof Element) {
      Element element=(Element)targetNode;
      if (!element.getElementChildren().isEmpty() || element.getParent() == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
    }
 else {
      FOXTreeNode parent=targetNode.getParent();
      if (parent == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
    }
  }
  event.detail=DND.DROP_LINK;
}",0.9941520467836256
128639,"public void dragLeave(DropTargetEvent event){
}","@Override public void dragLeave(DropTargetEvent event){
}",0.903846153846154
128640,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<JobletReferenceBean> checkRepository=checkRepositoryNodeFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkRepository.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkRepository);
        dialog.open();
      }
    }
);
    enableDeleting[0]=false;
    return true;
  }
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
Item item=null;
if (objToDelete != null && objToDelete.getProperty() != null) {
item=objToDelete.getProperty().getItem();
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
if (resChangeService != null && item != null && item instanceof ConnectionItem && item.getState().isDeleted()) {
if (!resChangeService.handleResourceChange(((ConnectionItem)item).getConnection())) {
return true;
}
}
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (confirm == null) {
Display.getDefault().syncExec(new Runnable(){
  public void run(){
    String title=Messages.getString(""String_Node_Str"");
    String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
    confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
  }
}
);
confirm=confirmFromDialog;
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && (item instanceof TDQItem || item instanceof ConnectionItem)) {
    resChangeService.removeAllDependecies(item);
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(repositoryNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<JobletReferenceBean> checkRepository=checkRepositoryNodeFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkRepository.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkRepository);
        dialog.open();
      }
    }
);
    enableDeleting[0]=false;
    return true;
  }
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
Item item=null;
if (objToDelete != null && objToDelete.getProperty() != null) {
item=objToDelete.getProperty().getItem();
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
if (resChangeService != null && item != null && item instanceof ConnectionItem && item.getState().isDeleted()) {
if (!resChangeService.handleResourceChange(((ConnectionItem)item).getConnection())) {
return true;
}
}
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (confirm == null) {
Display.getDefault().syncExec(new Runnable(){
  public void run(){
    String title=Messages.getString(""String_Node_Str"");
    String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
    confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
  }
}
);
confirm=confirmFromDialog;
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && (item instanceof TDQItem || item instanceof ConnectionItem)) {
    resChangeService.removeAllDependecies(item);
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9977698483496876
128641,"public void run(){
  IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
  list.addAll(Arrays.asList(reference));
}","@Override public void run(){
  IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
  list.addAll(Arrays.asList(reference));
}",0.9735449735449736
128642,"public static IEditorReference[] getEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
      list.addAll(Arrays.asList(reference));
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}","public static IEditorReference[] getEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
      list.addAll(Arrays.asList(reference));
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}",0.9883177570093458
128643,"/** 
 * ggu Comment method ""checkJobItemsForUpdate"".
 * @param types - need update types of jobs.
 * @param sourceIdMap - map old source id to new one.
 * @param sourceItem - modified repository item.
 * @return
 */
private List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<EUpdateItemType> types,final boolean onlySimpleShow) throws InterruptedException {
  if (types == null || types.isEmpty()) {
    return null;
  }
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
      list.addAll(Arrays.asList(reference));
    }
  }
);
  List<IProcess2> openedProcessList=CoreRuntimePlugin.getInstance().getDesignerCoreService().getOpenedProcess(getEditors());
  try {
    List<UpdateResult> resultList=new ArrayList<UpdateResult>();
    int size=openedProcessList.size();
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    MultiKeyMap openProcessMap=createOpenProcessMap(openedProcessList);
    if (isItemIndexChecked() && parameter != null && relations != null) {
      size=size + relations.size();
      parentMonitor.beginTask(Messages.getString(""String_Node_Str""),size);
      parentMonitor.setTaskName(Messages.getString(""String_Node_Str""));
      for (int i=0; i < relations.size(); i++) {
        RelationshipItemBuilder.Relation relation=relations.get(i);
        IRepositoryViewObject relatedObj=factory.getLastVersion(relation.getId());
        if (relatedObj == null) {
          continue;
        }
        List<IRepositoryViewObject> allVersionList=new ArrayList<IRepositoryViewObject>();
        if (!onlyOpeningJob) {
          boolean checkOnlyLastVersion=Boolean.parseBoolean(CoreRuntimePlugin.getInstance().getDesignerCoreService().getPreferenceStore(""String_Node_Str""));
          allVersionList=new ArrayList<IRepositoryViewObject>();
          if (!checkOnlyLastVersion) {
            List<IRepositoryViewObject> allVersion=factory.getAllVersion(relatedObj.getId());
            for (            IRepositoryViewObject object : allVersion) {
              if (factory.getStatus(object) != ERepositoryStatus.LOCK_BY_OTHER) {
                allVersionList.add(object);
              }
            }
          }
 else {
            IRepositoryViewObject lastVersion=relatedObj;
            ERepositoryStatus status=factory.getStatus(lastVersion);
            if (status != ERepositoryStatus.LOCK_BY_OTHER) {
              allVersionList.add(lastVersion);
            }
          }
          checkMonitorCanceled(parentMonitor);
          int index=0;
          for (          IRepositoryViewObject repositoryObj : allVersionList) {
            checkMonitorCanceled(parentMonitor);
            Item item=repositoryObj.getProperty().getItem();
            if (isOpenedItem(item,openProcessMap)) {
              continue;
            }
            parentMonitor.subTask(getUpdateJobInfor(repositoryObj.getProperty()));
            List<UpdateResult> updatesNeededFromItems=getUpdatesNeededFromItems(parentMonitor,item,types,onlySimpleShow);
            if (updatesNeededFromItems != null && !updatesNeededFromItems.isEmpty()) {
              resultList.addAll(updatesNeededFromItems);
            }
            index++;
            if (!ERepositoryStatus.LOCK_BY_USER.equals(factory.getStatus(item))) {
              if (repositoryObj instanceof RepositoryObject) {
                ((RepositoryObject)repositoryObj).unload();
              }
            }
          }
          parentMonitor.worked(1);
        }
      }
    }
 else {
      parentMonitor.beginTask(Messages.getString(""String_Node_Str""),size);
      parentMonitor.setTaskName(Messages.getString(""String_Node_Str""));
    }
    for (    IProcess2 process : openedProcessList) {
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(getUpdateJobInfor(process.getProperty()));
      List<UpdateResult> resultFromProcess=getResultFromProcess(process,types,onlySimpleShow);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
    if (isDetectAndUpdate) {
      resultList=updateAllProcess(parentMonitor,resultList,openedProcessList,types,onlySimpleShow);
    }
    if (!onlyOpeningJob) {
      List<UpdateResult> templateSetUpdate=checkSettingInJobTemplateWizard();
      if (templateSetUpdate != null) {
        resultList.addAll(templateSetUpdate);
      }
    }
    parentMonitor.done();
    return resultList;
  }
 catch (  PersistenceException e) {
  }
  return null;
}","/** 
 * ggu Comment method ""checkJobItemsForUpdate"".
 * @param types - need update types of jobs.
 * @param sourceIdMap - map old source id to new one.
 * @param sourceItem - modified repository item.
 * @return
 */
private List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<EUpdateItemType> types,final boolean onlySimpleShow) throws InterruptedException {
  if (types == null || types.isEmpty()) {
    return null;
  }
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
      list.addAll(Arrays.asList(reference));
    }
  }
);
  List<IProcess2> openedProcessList=CoreRuntimePlugin.getInstance().getDesignerCoreService().getOpenedProcess(getEditors());
  try {
    List<UpdateResult> resultList=new ArrayList<UpdateResult>();
    int size=openedProcessList.size();
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    MultiKeyMap openProcessMap=createOpenProcessMap(openedProcessList);
    if (isItemIndexChecked() && parameter != null && relations != null) {
      size=size + relations.size();
      parentMonitor.beginTask(Messages.getString(""String_Node_Str""),size);
      parentMonitor.setTaskName(Messages.getString(""String_Node_Str""));
      for (int i=0; i < relations.size(); i++) {
        RelationshipItemBuilder.Relation relation=relations.get(i);
        IRepositoryViewObject relatedObj=factory.getLastVersion(relation.getId());
        if (relatedObj == null) {
          continue;
        }
        List<IRepositoryViewObject> allVersionList=new ArrayList<IRepositoryViewObject>();
        if (!onlyOpeningJob) {
          boolean checkOnlyLastVersion=Boolean.parseBoolean(CoreRuntimePlugin.getInstance().getDesignerCoreService().getPreferenceStore(""String_Node_Str""));
          allVersionList=new ArrayList<IRepositoryViewObject>();
          if (!checkOnlyLastVersion) {
            List<IRepositoryViewObject> allVersion=factory.getAllVersion(relatedObj.getId());
            for (            IRepositoryViewObject object : allVersion) {
              if (factory.getStatus(object) != ERepositoryStatus.LOCK_BY_OTHER) {
                allVersionList.add(object);
              }
            }
          }
 else {
            IRepositoryViewObject lastVersion=relatedObj;
            ERepositoryStatus status=factory.getStatus(lastVersion);
            if (status != ERepositoryStatus.LOCK_BY_OTHER) {
              allVersionList.add(lastVersion);
            }
          }
          checkMonitorCanceled(parentMonitor);
          int index=0;
          for (          IRepositoryViewObject repositoryObj : allVersionList) {
            checkMonitorCanceled(parentMonitor);
            Item item=repositoryObj.getProperty().getItem();
            if (isOpenedItem(item,openProcessMap)) {
              continue;
            }
            parentMonitor.subTask(getUpdateJobInfor(repositoryObj.getProperty()));
            List<UpdateResult> updatesNeededFromItems=getUpdatesNeededFromItems(parentMonitor,item,types,onlySimpleShow);
            if (updatesNeededFromItems != null && !updatesNeededFromItems.isEmpty()) {
              resultList.addAll(updatesNeededFromItems);
            }
            index++;
            if (!ERepositoryStatus.LOCK_BY_USER.equals(factory.getStatus(item))) {
              if (repositoryObj instanceof RepositoryObject) {
                ((RepositoryObject)repositoryObj).unload();
              }
            }
          }
          parentMonitor.worked(1);
        }
      }
    }
 else {
      parentMonitor.beginTask(Messages.getString(""String_Node_Str""),size);
      parentMonitor.setTaskName(Messages.getString(""String_Node_Str""));
    }
    for (    IProcess2 process : openedProcessList) {
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(getUpdateJobInfor(process.getProperty()));
      List<UpdateResult> resultFromProcess=getResultFromProcess(process,types,onlySimpleShow);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
    if (isDetectAndUpdate) {
      resultList=updateAllProcess(parentMonitor,resultList,openedProcessList,types,onlySimpleShow);
    }
    if (!onlyOpeningJob) {
      List<UpdateResult> templateSetUpdate=checkSettingInJobTemplateWizard();
      if (templateSetUpdate != null) {
        resultList.addAll(templateSetUpdate);
      }
    }
    parentMonitor.done();
    return resultList;
  }
 catch (  PersistenceException e) {
  }
  return null;
}",0.9989462592202318
128644,"/** 
 * DOC hywang Comment method ""updateDeleteOrReselectSchema"".
 */
private static boolean updateDeleteOrReselectSchema(Object table,ConnectionItem connItem,Map<String,EUpdateResult> deletedOrReselectTablesMap,boolean show,boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(((ConnectionItem)connItem).getProperty().getId(),ItemCacheManager.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  if (connItem instanceof GenericSchemaConnectionItem) {
    String id=((ConnectionItem)connItem).getProperty().getId();
    if (table instanceof MetadataTable) {
      id=id + ""String_Node_Str"" + ((MetadataTable)table).getLabel();
    }
    List<RelationshipItemBuilder.Relation> schemaRelations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,ItemCacheManager.LATEST_VERSION,RelationshipItemBuilder.SCHEMA_RELATION);
    if (!schemaRelations.isEmpty()) {
      relations.addAll(schemaRelations);
    }
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(table,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_SCHEMA);
      return types;
    }
  }
;
  repositoryUpdateManager.setDeletedOrReselectTablesMap(deletedOrReselectTablesMap);
  final boolean doWork=repositoryUpdateManager.doWork(show,onlySimpleShow);
  repositoryUpdateManager.deletedOrReselectTablesMap.clear();
  return doWork;
}","/** 
 * DOC hywang Comment method ""updateDeleteOrReselectSchema"".
 */
private static boolean updateDeleteOrReselectSchema(Object table,ConnectionItem connItem,Map<String,EUpdateResult> deletedOrReselectTablesMap,boolean show,boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo((connItem).getProperty().getId(),ItemCacheManager.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  if (connItem instanceof GenericSchemaConnectionItem) {
    String id=(connItem).getProperty().getId();
    if (table instanceof MetadataTable) {
      id=id + ""String_Node_Str"" + ((MetadataTable)table).getLabel();
    }
    List<RelationshipItemBuilder.Relation> schemaRelations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,ItemCacheManager.LATEST_VERSION,RelationshipItemBuilder.SCHEMA_RELATION);
    if (!schemaRelations.isEmpty()) {
      relations.addAll(schemaRelations);
    }
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(table,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_SCHEMA);
      return types;
    }
  }
;
  repositoryUpdateManager.setDeletedOrReselectTablesMap(deletedOrReselectTablesMap);
  final boolean doWork=repositoryUpdateManager.doWork(show,onlySimpleShow);
  repositoryUpdateManager.deletedOrReselectTablesMap.clear();
  return doWork;
}",0.99
128645,"private static boolean updateSchema(final Object table,ConnectionItem connItem,Map<String,String> schemaRenamedMap,boolean show,boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(((ConnectionItem)connItem).getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(table,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_SCHEMA);
      return types;
    }
  }
;
  repositoryUpdateManager.setSchemaRenamedMap(schemaRenamedMap);
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","private static boolean updateSchema(final Object table,ConnectionItem connItem,Map<String,String> schemaRenamedMap,boolean show,boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo((connItem).getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(table,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_SCHEMA);
      return types;
    }
  }
;
  repositoryUpdateManager.setSchemaRenamedMap(schemaRenamedMap);
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.9918450560652396
128646,"private boolean checkResultSchema(UpdateResult result,Object object,Object parameter){
  if (object == null || parameter == null) {
    return false;
  }
  if (object instanceof IMetadataTable) {
    if (parameter instanceof ConnectionItem) {
      ConnectionItem connection=(ConnectionItem)parameter;
      String source=UpdateRepositoryHelper.getRepositorySourceName(connection);
      if (result.getRemark() != null) {
        if (result.getRemark().startsWith(source)) {
          return true;
        }
 else         if (result.isReadOnlyProcess()) {
          return true;
        }
 else {
          String[] split=result.getRemark().split(UpdatesConstants.SEGMENT_LINE);
          if (connection.getProperty() != null && split[0].equals(connection.getProperty().getId())) {
            return true;
          }
        }
      }
    }
 else     if (parameter instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
      IMetadataTable table1=((IMetadataTable)object);
      MetadataTable table2=(org.talend.core.model.metadata.builder.connection.MetadataTable)parameter;
      if (table1.getId() == null || table2.getId() == null) {
        return table1.getLabel().equals(table2.getLabel());
      }
 else {
        return table1.getId().equals(table2.getId());
      }
    }
 else     if (parameter instanceof SAPFunctionUnit) {
      IMetadataTable table1=((IMetadataTable)object);
      return table1.getId().equals(((SAPFunctionUnit)parameter).getMetadataTable().getId());
    }
 else     if (parameter instanceof Connection) {
      Set<MetadataTable> tables=ConnectionHelper.getTables((Connection)parameter);
      if (tables.size() == 1) {
        IMetadataTable table1=((IMetadataTable)object);
        MetadataTable table2=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
        return table1.getId().equals(table2.getId());
      }
      if (parameter instanceof XmlFileConnection) {
        boolean isResult=false;
        for (        MetadataTable table : tables) {
          if (table.getId() != null && table.getId().equals(((IMetadataTable)object).getId())) {
            isResult=true;
            break;
          }
        }
        return isResult;
      }
    }
  }
  Object parameter2=result.getParameter();
  if (object instanceof String && parameter2 instanceof List) {
    List listParameter=(List)parameter2;
    if (listParameter.get(1) instanceof EUpdateResult) {
      return true;
    }
  }
  return false;
}","private boolean checkResultSchema(UpdateResult result,Object object,Object parameter){
  if (object == null || parameter == null) {
    return false;
  }
  if (object instanceof IMetadataTable) {
    if (parameter instanceof ConnectionItem) {
      ConnectionItem connection=(ConnectionItem)parameter;
      String source=UpdateRepositoryHelper.getRepositorySourceName(connection);
      if (result.getRemark() != null) {
        if (result.getRemark().startsWith(source)) {
          return true;
        }
 else         if (result.isReadOnlyProcess()) {
          return true;
        }
 else {
          String[] split=result.getRemark().split(UpdatesConstants.SEGMENT_LINE);
          if (connection.getProperty() != null && split[0].equals(connection.getProperty().getId())) {
            return true;
          }
        }
      }
    }
 else     if (parameter instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
      IMetadataTable table1=((IMetadataTable)object);
      MetadataTable table2=(org.talend.core.model.metadata.builder.connection.MetadataTable)parameter;
      if (table1.getId() == null || table2.getId() == null) {
        return table1.getLabel().equals(table2.getLabel());
      }
 else {
        return table1.getId().equals(table2.getId());
      }
    }
 else     if (parameter instanceof SAPFunctionUnit) {
      IMetadataTable table1=((IMetadataTable)object);
      return table1.getId().equals(((SAPFunctionUnit)parameter).getMetadataTable().getId());
    }
 else     if (parameter instanceof Connection) {
      Set<MetadataTable> tables=ConnectionHelper.getTables((Connection)parameter);
      if (tables.size() == 1) {
        IMetadataTable table1=((IMetadataTable)object);
        MetadataTable table2=tables.toArray(new MetadataTable[0])[0];
        return table1.getId().equals(table2.getId());
      }
      if (parameter instanceof XmlFileConnection) {
        boolean isResult=false;
        for (        MetadataTable table : tables) {
          if (table.getId() != null && table.getId().equals(((IMetadataTable)object).getId())) {
            isResult=true;
            break;
          }
        }
        return isResult;
      }
    }
  }
  Object parameter2=result.getParameter();
  if (object instanceof String && parameter2 instanceof List) {
    List listParameter=(List)parameter2;
    if (listParameter.get(1) instanceof EUpdateResult) {
      return true;
    }
  }
  return false;
}",0.996964177292046
128647,"@SuppressWarnings(""String_Node_Str"") public boolean doWork(boolean show,final boolean onlyImpactAnalysis){
  boolean checked=true;
  boolean showed=false;
  if (show) {
    if (needForcePropagationForContext()) {
      checked=openRenameCheckedDialog();
      showed=true;
    }
 else     if (parameter != null && !needForcePropagation()) {
      IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
      boolean deactive=designerCoreService != null ? Boolean.parseBoolean(designerCoreService.getPreferenceStore(ITalendCorePrefConstants.DEACTIVE_REPOSITORY_UPDATE)) : true;
      if (deactive) {
        return false;
      }
      checked=openPropagationDialog();
      showed=true;
    }
  }
 else {
    showed=true;
  }
  if (checked) {
    final List<UpdateResult> results=new ArrayList<UpdateResult>();
    boolean cancelable=!needForcePropagation();
    IRunnableWithProgress runnable=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        List<UpdateResult> returnResult=checkJobItemsForUpdate(monitor,getTypes(),onlyImpactAnalysis);
        if (returnResult != null) {
          results.addAll(returnResult);
        }
      }
    }
;
    try {
      final ProgressMonitorJobsDialog dialog=new ProgressMonitorJobsDialog(null);
      dialog.run(true,cancelable,runnable);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      if (e.getMessage().equals(UpdatesConstants.MONITOR_IS_CANCELED)) {
        return false;
      }
      ExceptionHandler.process(e);
    }
    List<UpdateResult> checkedResults=null;
    if (parameter == null) {
      checkedResults=filterSpecialCheckedResult(results);
    }
 else {
      checkedResults=filterCheckedResult(results);
    }
    if (checkedResults != null && !checkedResults.isEmpty()) {
      if (showed || parameter == null || unShowDialog(checkedResults) || openPropagationDialog()) {
        IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
        return designerCoreService.executeUpdatesManager(checkedResults,onlyImpactAnalysis);
      }
      return false;
    }
    openNoModificationDialog(onlyImpactAnalysis);
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") public boolean doWork(boolean show,final boolean onlyImpactAnalysis){
  boolean checked=true;
  boolean showed=false;
  if (show) {
    if (needForcePropagationForContext()) {
      checked=openRenameCheckedDialog();
      showed=true;
    }
 else     if (parameter != null && !needForcePropagation()) {
      IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
      boolean deactive=designerCoreService != null ? Boolean.parseBoolean(designerCoreService.getPreferenceStore(ITalendCorePrefConstants.DEACTIVE_REPOSITORY_UPDATE)) : true;
      if (deactive) {
        return false;
      }
      checked=openPropagationDialog();
      showed=true;
    }
  }
 else {
    showed=true;
  }
  if (checked) {
    final List<UpdateResult> results=new ArrayList<UpdateResult>();
    boolean cancelable=!needForcePropagation();
    IRunnableWithProgress runnable=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        List<UpdateResult> returnResult=checkJobItemsForUpdate(monitor,getTypes(),onlyImpactAnalysis);
        if (returnResult != null) {
          results.addAll(returnResult);
        }
      }
    }
;
    try {
      final ProgressMonitorJobsDialog dialog=new ProgressMonitorJobsDialog(null);
      dialog.run(true,cancelable,runnable);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
      if (e.getMessage().equals(UpdatesConstants.MONITOR_IS_CANCELED)) {
        return false;
      }
      ExceptionHandler.process(e);
    }
    List<UpdateResult> checkedResults=null;
    if (parameter == null) {
      checkedResults=filterSpecialCheckedResult(results);
    }
 else {
      checkedResults=filterCheckedResult(results);
    }
    if (checkedResults != null && !checkedResults.isEmpty()) {
      if (showed || parameter == null || unShowDialog(checkedResults) || openPropagationDialog()) {
        IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
        return designerCoreService.executeUpdatesManager(checkedResults,onlyImpactAnalysis);
      }
      return false;
    }
    openNoModificationDialog(onlyImpactAnalysis);
  }
  return false;
}",0.9978858350951374
128648,"/** 
 * MOD qiongli 2011-11-28 change this method 'private' into 'public'.it is used to judge if need to update DQ analyses.
 */
public static boolean sameAsMetadatTable(List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,String> oldTableMap){
  if (newTables == null || oldTables == null) {
    return false;
  }
  Map<String,IMetadataTable> id2TableMap=new HashMap<String,IMetadataTable>();
  for (  IMetadataTable oldTable : oldTables) {
    id2TableMap.put(oldTable.getId(),oldTable);
  }
  for (  IMetadataTable newTable : newTables) {
    IMetadataTable oldTable=id2TableMap.get(newTable.getId());
    if (oldTableMap.containsKey(newTable.getId())) {
      if (oldTable == null) {
        return false;
      }
 else {
        if (!newTable.sameMetadataAs(oldTable,IMetadataColumn.OPTIONS_NONE)) {
          return false;
        }
      }
    }
  }
  return true;
}","public static boolean sameAsMetadatTable(List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,String> oldTableMap,int options){
  if (newTables == null || oldTables == null) {
    return false;
  }
  Map<String,IMetadataTable> id2TableMap=new HashMap<String,IMetadataTable>();
  for (  IMetadataTable oldTable : oldTables) {
    id2TableMap.put(oldTable.getId(),oldTable);
  }
  for (  IMetadataTable newTable : newTables) {
    IMetadataTable oldTable=id2TableMap.get(newTable.getId());
    if (oldTableMap.containsKey(newTable.getId())) {
      if (oldTable == null) {
        return false;
      }
 else {
        if (!newTable.sameMetadataAs(oldTable,options)) {
          return false;
        }
      }
    }
  }
  return true;
}",0.8932038834951457
128649,"@SuppressWarnings(""String_Node_Str"") private boolean filterForType(UpdateResult result){
  if (result == null || parameter == null) {
    return false;
  }
  Object object=result.getParameter();
  if (object == null) {
    return false;
  }
  if (object == parameter) {
    return true;
  }
  if (object instanceof List) {
    List list=((List)object);
    if (!list.isEmpty()) {
      Object firstObj=list.get(0);
      if (parameter == firstObj) {
        return true;
      }
      if (checkResultSchema(result,firstObj,parameter)) {
        return true;
      }
    }
  }
  if (checkResultSchema(result,object,parameter)) {
    return true;
  }
  if (parameter instanceof QueriesConnection && object instanceof Query) {
    for (    Query query : (List<Query>)((QueriesConnection)parameter).getQuery()) {
      if (query.getId().equals(((Query)object).getId())) {
        return true;
      }
    }
  }
  if ((object instanceof Query) && (parameter instanceof Query)) {
    if (((Query)object).getId().equals(((Query)parameter).getId())) {
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") private boolean filterForType(UpdateResult result){
  if (result == null || parameter == null) {
    return false;
  }
  Object object=result.getParameter();
  if (object == null) {
    return false;
  }
  if (object == parameter) {
    return true;
  }
  if (object instanceof List) {
    List list=((List)object);
    if (!list.isEmpty()) {
      Object firstObj=list.get(0);
      if (parameter == firstObj) {
        return true;
      }
      if (checkResultSchema(result,firstObj,parameter)) {
        return true;
      }
    }
  }
  if (checkResultSchema(result,object,parameter)) {
    return true;
  }
  if (parameter instanceof QueriesConnection && object instanceof Query) {
    for (    Query query : ((QueriesConnection)parameter).getQuery()) {
      if (query.getId().equals(((Query)object).getId())) {
        return true;
      }
    }
  }
  if ((object instanceof Query) && (parameter instanceof Query)) {
    if (((Query)object).getId().equals(((Query)parameter).getId())) {
      return true;
    }
  }
  return false;
}",0.9940009229349333
128650,"protected void makeActions(){
  boolean isNewDoubleClickAction=false;
  if (doubleClickAction != null) {
    StructuredViewer structuredViewer=doubleClickAction.getStructuredViewer();
    ISelection selection=structuredViewer.getSelection();
    if (selection.isEmpty()) {
      isNewDoubleClickAction=true;
    }
  }
  if (contextualsActions == null || isNewDoubleClickAction) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}","protected void makeActions(){
  boolean isNewDoubleClickAction=false;
  if (doubleClickAction != null && doubleClickAction.getStructuredViewer() != null) {
    StructuredViewer structuredViewer=doubleClickAction.getStructuredViewer();
    ISelection selection=structuredViewer.getSelection();
    if (selection == null || selection.isEmpty()) {
      isNewDoubleClickAction=true;
    }
  }
  if (contextualsActions == null || isNewDoubleClickAction) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}",0.9750692520775625
128651,"/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection());
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}","/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection(),true);
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}",0.9971542401821286
128652,"protected void doSave(OutputStream outputStream,Map options) throws IOException {
  ByteArray byteArray=(ByteArray)getContents().get(0);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(outputStream);
  bufferedOutputStream.write(byteArray.getInnerContent());
  bufferedOutputStream.flush();
}","@Override protected void doSave(OutputStream outputStream,Map options) throws IOException {
  if (getContents().size() > 0) {
    ByteArray byteArray=(ByteArray)getContents().get(0);
    BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(outputStream);
    bufferedOutputStream.write(byteArray.getInnerContent());
    bufferedOutputStream.flush();
  }
}",0.9178885630498532
128653,"protected void doLoad(InputStream inputStream,Map options) throws IOException {
  BufferedInputStream bufferedInputStream=new BufferedInputStream(inputStream);
  byte[] content=new byte[bufferedInputStream.available()];
  bufferedInputStream.read(content);
  bufferedInputStream.close();
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContent(content);
  getContents().add(byteArray);
}","@Override protected void doLoad(InputStream inputStream,Map options) throws IOException {
  BufferedInputStream bufferedInputStream=new BufferedInputStream(inputStream);
  byte[] content=new byte[bufferedInputStream.available()];
  bufferedInputStream.read(content);
  bufferedInputStream.close();
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContent(content);
  getContents().add(byteArray);
}",0.9884526558891455
128654,"protected void doUnload(){
  super.doUnload();
}","@Override protected void doUnload(){
  super.doUnload();
}",0.9056603773584906
128655,"public static void deleteFile(File file,boolean delete){
  if (file.exists()) {
    if (file.isFile() && delete) {
      file.delete();
    }
 else     if (file.isDirectory()) {
      File files[]=file.listFiles();
      for (int i=0; i < files.length; i++) {
        deleteFile(files[i],true);
      }
    }
    if (delete) {
      file.delete();
    }
  }
}","public static void deleteFile(File file,boolean delete){
  if (file.exists()) {
    if (file.isFile() && delete) {
      file.delete();
    }
 else     if (file.isDirectory()) {
      File files[]=file.listFiles();
      for (      File file2 : files) {
        deleteFile(file2,true);
      }
    }
    if (delete) {
      file.delete();
    }
  }
}",0.840620592383639
128656,"public static void copyDirectory(File source,File target){
  File tarpath=new File(target,source.getName());
  if (source.isDirectory()) {
    tarpath.mkdir();
    File[] dir=source.listFiles();
    for (int i=0; i < dir.length; i++) {
      copyDirectory(dir[i],tarpath);
    }
  }
 else {
    try {
      InputStream is=new FileInputStream(source);
      OutputStream os=new FileOutputStream(tarpath);
      byte[] buf=new byte[1024];
      int len=0;
      while ((len=is.read(buf)) != -1) {
        os.write(buf,0,len);
      }
      is.close();
      os.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public static void copyDirectory(File source,File target){
  File tarpath=new File(target,source.getName());
  if (source.isDirectory()) {
    tarpath.mkdir();
    File[] dir=source.listFiles();
    for (    File element : dir) {
      copyDirectory(element,tarpath);
    }
  }
 else {
    try {
      InputStream is=new FileInputStream(source);
      OutputStream os=new FileOutputStream(tarpath);
      byte[] buf=new byte[1024];
      int len=0;
      while ((len=is.read(buf)) != -1) {
        os.write(buf,0,len);
      }
      is.close();
      os.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9612403100775194
128657,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.925764192139738
128658,"/** 
 * the source should be a string wrapped in chars[ ] which stands for it is a collection
 * @param stSrc
 * @param fieldSep
 * @return
 */
public static List<String> parseTo_List(String strSrc,String fieldSep){
  if (strSrc == null) {
    return null;
  }
  List<String> list=new ArrayList<String>();
  if ((fieldSep == null || ""String_Node_Str"".equals(fieldSep)) || !(strSrc.startsWith(""String_Node_Str"") && strSrc.endsWith(""String_Node_Str""))) {
    list.add(strSrc);
    return list;
  }
  return Arrays.asList(strSrc.split(fieldSep,-1));
}","/** 
 * the source should be a string wrapped in chars[ ] which stands for it is a collection
 * @param stSrc
 * @param fieldSep
 * @return
 */
public static List<String> parseTo_List(final String strSrc,String fieldSep){
  if (strSrc == null) {
    return null;
  }
  List<String> list=new ArrayList<String>();
  if ((fieldSep == null || ""String_Node_Str"".equals(fieldSep)) || !(strSrc.startsWith(""String_Node_Str"") && strSrc.endsWith(""String_Node_Str""))) {
    list.add(strSrc);
    return list;
  }
  String strTemp=strSrc.substring(1,strSrc.length() - 1);
  for (  String str : strTemp.split(fieldSep,-1)) {
    list.add(str);
  }
  return list;
}",0.8690575479566305
128659,"protected void doSave(OutputStream outputStream,Map options) throws IOException {
  ByteArray byteArray=(ByteArray)getContents().get(0);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(outputStream);
  bufferedOutputStream.write(byteArray.getInnerContent());
  bufferedOutputStream.flush();
}","protected void doSave(OutputStream outputStream,Map options) throws IOException {
  if (getContents().size() > 0) {
    ByteArray byteArray=(ByteArray)getContents().get(0);
    BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(outputStream);
    bufferedOutputStream.write(byteArray.getInnerContent());
    bufferedOutputStream.flush();
  }
}",0.9315476190476192
128660,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.925764192139738
128661,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_ITERATE)) {
      return conn.getUniqueName();
    }
  }
  return ""String_Node_Str"";
}",0.9264787175234936
128662,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_ITERATE)) {
      return conn.getUniqueName();
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getUniqueName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getUniqueName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}",0.4834224598930481
128663,"/** 
 * DOC Administrator Comment method ""formatUnwithE"". In java when double more than six decimal that use toString will rentru contains E scientific natation.
 * @param arg like: double falot String .... e.g:1.0E-8
 * @return 0.00000001 as String
 */
public static String formatUnwithE(Object arg){
  String doubleString=String.valueOf(arg);
  int index=doubleString.indexOf(""String_Node_Str"");
  if (index != -1) {
    if (doubleString.charAt(index + 1) != '-') {
      return df.format(arg);
    }
 else {
      String position=doubleString.substring(index + 2);
      return String.format(""String_Node_Str"" + position + ""String_Node_Str"",arg);
    }
  }
  return doubleString;
}","/** 
 * DOC Administrator Comment method ""formatUnwithE"". In java when double more than six decimal that use toString will rentru contains E scientific natation.
 * @param arg like: double falot String .... e.g:1.0E-8
 * @return 0.00000001 as String
 */
public static String formatUnwithE(Object arg){
  String doubleString=String.valueOf(arg);
  int index=doubleString.indexOf(""String_Node_Str"");
  if (index != -1) {
    return (new BigDecimal(doubleString)).toPlainString();
  }
  return doubleString;
}",0.7294117647058823
128664,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_ITERATE)) {
      return conn.getUniqueName();
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getUniqueName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getUniqueName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}",0.4834224598930481
128665,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=schemaPattern + ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9973968017850502
128666,"protected void makeActions(){
  if (contextualsActions == null) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}","protected void makeActions(){
  boolean isNewDoubleClickAction=false;
  if (doubleClickAction != null) {
    StructuredViewer structuredViewer=doubleClickAction.getStructuredViewer();
    ISelection selection=structuredViewer.getSelection();
    if (selection.isEmpty()) {
      isNewDoubleClickAction=true;
    }
  }
  if (contextualsActions == null || isNewDoubleClickAction) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}",0.873701039168665
128667,"protected SelectRepositoryContextGroupDialog(Shell parentShell,IContextManager manager,ContextManagerHelper helper,List<ContextItem> selectedContextItems){
  super(parentShell);
  setBlockOnOpen(true);
  setDefaultImage(ImageProvider.getImage(ECoreImage.CONTEXT_ICON));
  setTitle(TITILE);
  setHelpAvailable(false);
  setMessage(DEFAULTMESAGE);
  setShellStyle(getShellStyle() | SWT.RESIZE);
  this.manager=manager;
  this.helper=helper;
  this.selectedContextItems=selectedContextItems;
  if (helper != null) {
    contextItemList.addAll(helper.getContextItems());
  }
}","public SelectRepositoryContextGroupDialog(Shell parentShell,IContextManager manager,ContextManagerHelper helper,List<ContextItem> selectedContextItems){
  super(parentShell);
  setBlockOnOpen(true);
  setDefaultImage(ImageProvider.getImage(ECoreImage.CONTEXT_ICON));
  setTitle(TITILE);
  setHelpAvailable(false);
  setMessage(DEFAULTMESAGE);
  setShellStyle(getShellStyle() | SWT.RESIZE);
  this.manager=manager;
  this.helper=helper;
  this.selectedContextItems=selectedContextItems;
  if (helper != null) {
    contextItemList.addAll(helper.getContextItems());
  }
}",0.9886064855390008
128668,"@SuppressWarnings(""String_Node_Str"") public static void addContextVarForJob(IProcess2 process,final ContextItem contextItem,final Set<String> addedVars){
  if (process == null || contextItem == null || addedVars == null || addedVars.isEmpty()) {
    return;
  }
  final IContextManager contextManager=process.getContextManager();
  if (contextManager != null) {
    CommandStack commandStack=process.getCommandStack();
    Command cmd=new Command(){
      @Override public void execute(){
        checkAndAddContextVariables(contextItem,addedVars,contextManager,true);
      }
    }
;
    if (commandStack == null) {
      cmd.execute();
    }
 else {
      commandStack.execute(cmd);
    }
  }
}","public static void addContextVarForJob(IProcess2 process,final ContextItem contextItem,final IContextManager contextManager,final Set<String> addedVars,final Set<String> contextGoupNameSet){
  if (process == null || contextItem == null || contextManager == null || addedVars == null || addedVars.isEmpty()) {
    return;
  }
  CommandStack commandStack=process.getCommandStack();
  Command cmd=new Command(){
    @Override public void execute(){
      checkAndAddContextVariables(contextItem,contextManager,addedVars,contextGoupNameSet);
    }
  }
;
  if (commandStack == null) {
    cmd.execute();
  }
 else {
    commandStack.execute(cmd);
  }
}",0.6865227103499628
128669,"/** 
 * ggu Comment method ""addContextForElementParameters"".
 * @param process
 * @param connItem
 * @param elementParameters
 * @param category
 * @param checked
 */
private static void addContextForElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  if (connItem == null || elementParameters == null || process == null) {
    return;
  }
  Connection connection=connItem.getConnection();
  if (connection != null && connection.isContextMode()) {
    Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
    if (neededVars != null && !neededVars.isEmpty()) {
      ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
      if (contextItem != null) {
        Set<String> addedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
        if (addedVars != null && !addedVars.isEmpty()) {
          boolean added=false;
          if (ignoreContextMode) {
            addContextVarForJob(process,contextItem,addedVars);
            added=true;
          }
 else {
            Map<String,Set<String>> addedVarsMap=new HashMap<String,Set<String>>();
            addedVarsMap.put(connItem.getProperty().getId(),addedVars);
            ShowAddedContextdialog showDialog=new ShowAddedContextdialog(addedVarsMap,true);
            if (showDialog.open() == Window.OK) {
              addContextVarForJob(process,contextItem,addedVars);
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}","/** 
 * ggu Comment method ""addContextForElementParameters"".
 * @param process
 * @param connItem
 * @param elementParameters
 * @param category
 * @param checked
 */
private static void addContextForElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  if (connItem == null || elementParameters == null || process == null) {
    return;
  }
  Connection connection=connItem.getConnection();
  if (connection != null && connection.isContextMode()) {
    Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
    if (neededVars != null && !neededVars.isEmpty()) {
      ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
      if (contextItem != null) {
        Set<String> addedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
        if (addedVars != null && !addedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
          boolean added=false;
          if (ignoreContextMode) {
            addContextVarForJob(process,contextItem,addedVars);
            added=true;
          }
 else {
            Map<String,Set<String>> addedVarsMap=new HashMap<String,Set<String>>();
            addedVarsMap.put(connItem.getProperty().getId(),addedVars);
            if (showContextdialog(process,contextItem,process.getContextManager(),addedVarsMap,addedVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}",0.9174683544303798
128670,"@Override public void execute(){
  checkAndAddContextVariables(contextItem,addedVars,contextManager,true);
}","@Override public void execute(){
  checkAndAddContextVariables(contextItem,contextManager,addedVars,contextGoupNameSet);
}",0.8608695652173913
128671,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_ITERATE)) {
      return conn.getUniqueName();
    }
  }
  return ""String_Node_Str"";
}",0.9264787175234936
128672,"/** 
 * DOC Administrator Comment method ""formatUnwithE"". In java when double more than six decimal that use toString will rentru contains E scientific natation.
 * @param arg like: double falot String .... e.g:1.0E-8
 * @return 0.00000001 as String
 */
public static String formatUnwithE(Object arg){
  String doubleString=String.valueOf(arg);
  int index=doubleString.indexOf(""String_Node_Str"");
  if (index != -1) {
    if (doubleString.charAt(index + 1) != '-') {
      return df.format(arg);
    }
 else {
      String position=doubleString.substring(index + 2);
      return String.format(""String_Node_Str"" + position + ""String_Node_Str"",arg);
    }
  }
  return doubleString;
}","/** 
 * DOC Administrator Comment method ""formatUnwithE"". In java when double more than six decimal that use toString will rentru contains E scientific natation.
 * @param arg like: double falot String .... e.g:1.0E-8
 * @return 0.00000001 as String
 */
public static String formatUnwithE(Object arg){
  String doubleString=String.valueOf(arg);
  int index=doubleString.indexOf(""String_Node_Str"");
  if (index != -1) {
    return (new BigDecimal(doubleString)).toPlainString();
  }
  return doubleString;
}",0.7294117647058823
128673,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
Item item=null;
if (objToDelete != null && objToDelete.getProperty() != null) {
item=objToDelete.getProperty().getItem();
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
if (resChangeService != null && item != null && item instanceof ConnectionItem && item.getState().isDeleted()) {
if (!resChangeService.handleResourceChange(((ConnectionItem)item).getConnection())) {
return true;
}
}
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (confirm == null) {
Display.getDefault().syncExec(new Runnable(){
  @Override public void run(){
    String title=Messages.getString(""String_Node_Str"");
    String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
    confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
  }
}
);
confirm=confirmFromDialog;
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && (item instanceof TDQItem || item instanceof ConnectionItem)) {
    resChangeService.removeAllDependecies(item);
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(repositoryNode);
}
}
return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final boolean[] enableDeleting=new boolean[1];
  enableDeleting[0]=true;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
          enableDeleting[0]=true;
        break;
case Window.CANCEL:
      enableDeleting[0]=false;
    break;
}
}
}
);
}
if (!enableDeleting[0]) {
return true;
}
Item item=null;
if (objToDelete != null && objToDelete.getProperty() != null) {
item=objToDelete.getProperty().getItem();
}
AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
if (resChangeService != null && item != null && item instanceof ConnectionItem && item.getState().isDeleted()) {
if (!resChangeService.handleResourceChange(((ConnectionItem)item).getConnection())) {
return true;
}
}
ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
if (nodeType != null && nodeType.isSubItem()) {
Display.getDefault().syncExec(new Runnable(){
@Override public void run(){
final DeleteTableAction deleteTableAction=new DeleteTableAction();
deleteTableAction.setWorkbenchPart(getWorkbenchPart());
deleteTableAction.run();
}
}
);
needReturn=true;
}
 else {
if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
if (confirm == null) {
Display.getDefault().syncExec(new Runnable(){
  @Override public void run(){
    String title=Messages.getString(""String_Node_Str"");
    String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
    confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
  }
}
);
confirm=confirmFromDialog;
}
if (confirm) {
deleteActionCache.closeOpenedEditor(objToDelete);
if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
  boolean success=true;
  for (  IRepositoryNode curNode : currentJobNode.getChildren()) {
    try {
      deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (success) {
    if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
      Item fitem=currentJobNode.getObject().getProperty().getItem();
      if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
      }
 else {
        factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
      }
    }
 else {
      factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
    }
  }
}
 else {
  if (resChangeService != null && (item instanceof TDQItem || item instanceof ConnectionItem)) {
    resChangeService.removeAllDependecies(item);
  }
  factory.deleteObjectPhysical(objToDelete);
  ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
}
}
}
 else {
factory.deleteObjectLogical(objToDelete);
updateRelatedViews();
removeConnFromSQLExplorer(currentJobNode);
}
}
return needReturn;
}",0.9975198412698412
128674,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_ITERATE)) {
      return conn.getUniqueName();
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getUniqueName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getUniqueName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}",0.4834224598930481
128675,"public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap);","public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,boolean showDialog,IProgressMonitor... monitorWrap);",0.9177489177489178
128676,"@Override public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap){
  if (jarsNeeded == null || jarsNeeded.size() == 0) {
    return false;
  }
  List<String> jarNotFound=new ArrayList<String>();
  boolean allIsOK=true;
  for (  String jar : jarsNeeded) {
    if (!retrieve(jar,pathToStore,false,monitorWrap)) {
      jarNotFound.add(jar);
      allIsOK=false;
    }
  }
  if (!jarNotFound.isEmpty() && !CommonsPlugin.isHeadless()) {
    Shell shell=Display.getCurrent().getActiveShell();
    ModulesInstaller.installModules(new Shell(shell),jarNotFound.toArray(new String[jarNotFound.size()]));
  }
  return allIsOK;
}","@Override public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap){
  return retrieve(jarsNeeded,pathToStore,true,monitorWrap);
}",0.3971631205673759
128677,"protected void makeActions(){
  if (contextualsActions == null) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}","protected void makeActions(){
  boolean isNewDoubleClickAction=false;
  if (doubleClickAction != null) {
    StructuredViewer structuredViewer=doubleClickAction.getStructuredViewer();
    ISelection selection=structuredViewer.getSelection();
    if (selection.isEmpty()) {
      isNewDoubleClickAction=true;
    }
  }
  if (contextualsActions == null || isNewDoubleClickAction) {
    ICommonViewerWorkbenchSite navWorkSite=((ICommonViewerWorkbenchSite)getActionSite().getViewSite());
    IHandlerService handlerService=(IHandlerService)navWorkSite.getSite().getService(IHandlerService.class);
    IHandler handler=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      final ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      if (coreService != null) {
        contextualsActions=coreService.getRepositoryContextualsActions();
        for (        ITreeContextualAction action : contextualsActions) {
          action.setWorkbenchPart(navWorkSite.getSite().getPart());
          if (action.getActionDefinitionId() != null) {
            handler=new ActionHandler(action);
            handlerService.activateHandler(action.getActionDefinitionId(),handler);
          }
        }
      }
    }
    doubleClickAction=new RepoDoubleClickAction(getActionSite().getStructuredViewer(),contextualsActions);
  }
}",0.873701039168665
128678,"protected SelectRepositoryContextGroupDialog(Shell parentShell,IContextManager manager,ContextManagerHelper helper,List<ContextItem> selectedContextItems){
  super(parentShell);
  setBlockOnOpen(true);
  setDefaultImage(ImageProvider.getImage(ECoreImage.CONTEXT_ICON));
  setTitle(TITILE);
  setHelpAvailable(false);
  setMessage(DEFAULTMESAGE);
  setShellStyle(getShellStyle() | SWT.RESIZE);
  this.manager=manager;
  this.helper=helper;
  this.selectedContextItems=selectedContextItems;
  if (helper != null) {
    contextItemList.addAll(helper.getContextItems());
  }
}","public SelectRepositoryContextGroupDialog(Shell parentShell,IContextManager manager,ContextManagerHelper helper,List<ContextItem> selectedContextItems){
  super(parentShell);
  setBlockOnOpen(true);
  setDefaultImage(ImageProvider.getImage(ECoreImage.CONTEXT_ICON));
  setTitle(TITILE);
  setHelpAvailable(false);
  setMessage(DEFAULTMESAGE);
  setShellStyle(getShellStyle() | SWT.RESIZE);
  this.manager=manager;
  this.helper=helper;
  this.selectedContextItems=selectedContextItems;
  if (helper != null) {
    contextItemList.addAll(helper.getContextItems());
  }
}",0.9886064855390008
128679,"@SuppressWarnings(""String_Node_Str"") public static void addContextVarForJob(IProcess2 process,final ContextItem contextItem,final Set<String> addedVars){
  if (process == null || contextItem == null || addedVars == null || addedVars.isEmpty()) {
    return;
  }
  final IContextManager contextManager=process.getContextManager();
  if (contextManager != null) {
    CommandStack commandStack=process.getCommandStack();
    Command cmd=new Command(){
      @Override public void execute(){
        checkAndAddContextVariables(contextItem,addedVars,contextManager,true);
      }
    }
;
    if (commandStack == null) {
      cmd.execute();
    }
 else {
      commandStack.execute(cmd);
    }
  }
}","public static void addContextVarForJob(IProcess2 process,final ContextItem contextItem,final IContextManager contextManager,final Set<String> addedVars,final Set<String> contextGoupNameSet){
  if (process == null || contextItem == null || contextManager == null || addedVars == null || addedVars.isEmpty()) {
    return;
  }
  CommandStack commandStack=process.getCommandStack();
  Command cmd=new Command(){
    @Override public void execute(){
      checkAndAddContextVariables(contextItem,contextManager,addedVars,contextGoupNameSet);
    }
  }
;
  if (commandStack == null) {
    cmd.execute();
  }
 else {
    commandStack.execute(cmd);
  }
}",0.6865227103499628
128680,"/** 
 * ggu Comment method ""addContextForElementParameters"".
 * @param process
 * @param connItem
 * @param elementParameters
 * @param category
 * @param checked
 */
private static void addContextForElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  if (connItem == null || elementParameters == null || process == null) {
    return;
  }
  Connection connection=connItem.getConnection();
  if (connection != null && connection.isContextMode()) {
    Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
    if (neededVars != null && !neededVars.isEmpty()) {
      ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
      if (contextItem != null) {
        Set<String> addedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
        if (addedVars != null && !addedVars.isEmpty()) {
          boolean added=false;
          if (ignoreContextMode) {
            addContextVarForJob(process,contextItem,addedVars);
            added=true;
          }
 else {
            Map<String,Set<String>> addedVarsMap=new HashMap<String,Set<String>>();
            addedVarsMap.put(connItem.getProperty().getId(),addedVars);
            ShowAddedContextdialog showDialog=new ShowAddedContextdialog(addedVarsMap,true);
            if (showDialog.open() == Window.OK) {
              addContextVarForJob(process,contextItem,addedVars);
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}","/** 
 * ggu Comment method ""addContextForElementParameters"".
 * @param process
 * @param connItem
 * @param elementParameters
 * @param category
 * @param checked
 */
private static void addContextForElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  if (connItem == null || elementParameters == null || process == null) {
    return;
  }
  Connection connection=connItem.getConnection();
  if (connection != null && connection.isContextMode()) {
    Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
    if (neededVars != null && !neededVars.isEmpty()) {
      ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
      if (contextItem != null) {
        Set<String> addedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
        if (addedVars != null && !addedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
          boolean added=false;
          if (ignoreContextMode) {
            addContextVarForJob(process,contextItem,addedVars);
            added=true;
          }
 else {
            Map<String,Set<String>> addedVarsMap=new HashMap<String,Set<String>>();
            addedVarsMap.put(connItem.getProperty().getId(),addedVars);
            if (showContextdialog(process,contextItem,process.getContextManager(),addedVarsMap,addedVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}",0.9174683544303798
128681,"@Override public void execute(){
  checkAndAddContextVariables(contextItem,addedVars,contextManager,true);
}","@Override public void execute(){
  checkAndAddContextVariables(contextItem,contextManager,addedVars,contextGoupNameSet);
}",0.8608695652173913
128682,"/** 
 * DOC Administrator Comment method ""formatUnwithE"". In java when double more than six decimal that use toString will rentru contains E scientific natation.
 * @param arg like: double falot String .... e.g:1.0E-8
 * @return 0.00000001 as String
 */
public static String formatUnwithE(Object arg){
  String doubleString=String.valueOf(arg);
  int index=doubleString.indexOf(""String_Node_Str"");
  if (index != -1) {
    if (doubleString.charAt(index + 1) != '-') {
      return df.format(arg);
    }
 else {
      String position=doubleString.substring(index + 2);
      return String.format(""String_Node_Str"" + position + ""String_Node_Str"",arg);
    }
  }
  return doubleString;
}","/** 
 * DOC Administrator Comment method ""formatUnwithE"". In java when double more than six decimal that use toString will rentru contains E scientific natation.
 * @param arg like: double falot String .... e.g:1.0E-8
 * @return 0.00000001 as String
 */
public static String formatUnwithE(Object arg){
  String doubleString=String.valueOf(arg);
  int index=doubleString.indexOf(""String_Node_Str"");
  if (index != -1) {
    return (new BigDecimal(doubleString)).toPlainString();
  }
  return doubleString;
}",0.7294117647058823
128683,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
  }
  return ""String_Node_Str"";
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  INode node=conn.getSource();
  if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
    return conn.getUniqueName();
  }
  List<? extends IConnection> listInConns=node.getIncomingConnections();
  IConnection inConnTemp=null;
  if (listInConns != null && listInConns.size() > 0) {
    inConnTemp=listInConns.get(0);
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
      return getPrivateConnClassName(inConnTemp);
    }
    if (inConnTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.USE_ITERATE)) {
      return conn.getUniqueName();
    }
  }
  return ""String_Node_Str"";
}",0.9264787175234936
128684,"/** 
 * ftang Comment method ""isForbbidNode"".
 * @param node
 * @return
 */
private boolean isForbidNode(RepositoryNode node){
  IRepositoryViewObject nodeObject=node.getObject();
  if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null && (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
    final String title=Messages.getString(""String_Node_Str"");
    String nodeName=ERepositoryObjectType.getDeleteFolderName(nodeObject.getRepositoryObjectType());
    final String message=Messages.getString(""String_Node_Str"",nodeName);
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        MessageDialog dialog=new MessageDialog(new Shell(),title,null,message,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
        dialog.open();
      }
    }
);
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOBS) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.GENERATED) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_CDC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_TABLE) {
    final IRepositoryViewObject object=nodeObject;
    if (object != null && object instanceof MetadataTableRepositoryObject) {
      final MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
      if (table != null && table instanceof SubscriberTable) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * ftang Comment method ""isForbbidNode"".
 * @param node
 * @return
 */
private boolean isForbidNode(RepositoryNode node){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject nodeObject=node.getObject();
  if (nodeObject == null || nodeObject.getProperty() == null || nodeObject.getProperty().getItem() == null) {
    return false;
  }
  boolean locked=false;
  if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
    if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
      locked=true;
    }
  }
  if ((locked || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
    final String title=Messages.getString(""String_Node_Str"");
    String nodeName=ERepositoryObjectType.getDeleteFolderName(nodeObject.getRepositoryObjectType());
    final String message=Messages.getString(""String_Node_Str"",nodeName);
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        MessageDialog dialog=new MessageDialog(new Shell(),title,null,message,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
        dialog.open();
      }
    }
);
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOBS) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.GENERATED) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_CDC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_TABLE) {
    final IRepositoryViewObject object=nodeObject;
    if (object != null && object instanceof MetadataTableRepositoryObject) {
      final MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
      if (table != null && table instanceof SubscriberTable) {
        return true;
      }
    }
  }
  return false;
}",0.9085726814295112
128685,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                deleteResource(current);
              }
 catch (              PersistenceException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9955431045460332
128686,"@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (""String_Node_Str"".equals(version)) {
    version=null;
  }
  if (objToDelete.getRepositoryObjectType() == ERepositoryObjectType.PROCESS || objToDelete.getRepositoryObjectType() == ERepositoryObjectType.JOBLET) {
    if (coreSerivce.isAlreadyBuilt(project)) {
      coreSerivce.removeItemRelations(objToDelete.getProperty().getItem());
    }
  }
  List<IRepositoryViewObject> allVersionToDelete=getAllVersion(project,objToDelete.getId(),false);
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    if (version == null || currentVersion.getVersion().equals(version)) {
      Item currentItem=currentVersion.getProperty().getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      currentItem.setParent(null);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(currentVersion.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.deleteResource(resource);
      }
    }
  }
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}","@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (""String_Node_Str"".equals(version)) {
    version=null;
  }
  if (objToDelete.getRepositoryObjectType() == ERepositoryObjectType.PROCESS || objToDelete.getRepositoryObjectType() == ERepositoryObjectType.JOBLET) {
    if (coreSerivce.isAlreadyBuilt(project)) {
      coreSerivce.removeItemRelations(objToDelete.getProperty().getItem());
    }
  }
  List<IRepositoryViewObject> allVersionToDelete=getAllVersion(project,objToDelete.getId(),false);
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    if (version == null || currentVersion.getVersion().equals(version)) {
      Item currentItem=currentVersion.getProperty().getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      currentItem.setParent(null);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(currentVersion.getProperty());
      for (      Resource resource : affectedResources) {
        deleteResource(resource);
      }
    }
  }
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}",0.9926782273603084
128687,"@Override public void deleteFolder(Project project,ERepositoryObjectType type,IPath path,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(path.toString()) || RepositoryConstants.isGeneratedFolder(path.toString()) || RepositoryConstants.isJobsFolder(path.toString())|| RepositoryConstants.isJobletsFolder(path.toString())) {
    return;
  }
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completePath=new Path(ERepositoryObjectType.getFolderName(type)).append(path).toString();
  IFolder folder=ResourceUtils.getFolder(fsProject,completePath,true);
  ResourceUtils.deleteResource(folder);
  getFolderHelper(project.getEmfProject()).deleteFolder(completePath);
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}","@Override public void deleteFolder(Project project,ERepositoryObjectType type,IPath path,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(path.toString()) || RepositoryConstants.isGeneratedFolder(path.toString()) || RepositoryConstants.isJobsFolder(path.toString())|| RepositoryConstants.isJobletsFolder(path.toString())) {
    return;
  }
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completePath=new Path(ERepositoryObjectType.getFolderName(type)).append(path).toString();
  IFolder folder=ResourceUtils.getFolder(fsProject,completePath,true);
  deleteResource(folder);
  getFolderHelper(project.getEmfProject()).deleteFolder(completePath);
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}",0.983481575603558
128688,"/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              RuntimeException e) {
                ExceptionHandler.process(e);
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  ((IFolder)current).delete(true,null);
                }
 catch (                CoreException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : (List<Item>)currentFolderItem.getChildren()) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}","/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              RuntimeException e) {
                ExceptionHandler.process(e);
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : (List<Item>)currentFolderItem.getChildren()) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}",0.995605223505776
128689,"protected void createFolder(IFolder folder) throws PersistenceException {
  ResourceUtils.createFolder(folder);
}","protected void createFolder(IFolder folder) throws PersistenceException {
  if (!folder.getParent().exists()) {
    if (folder.getParent() instanceof IFolder) {
      createFolder((IFolder)folder.getParent());
    }
  }
  ResourceUtils.createFolder(folder);
}",0.6075268817204301
128690,"/** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
private void forceTableFocus(){
  new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
    @Override public void run(){
      getTable().forceFocus();
    }
  }
).start();
}","/** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
private void forceTableFocus(){
  new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
    @Override public void run(){
      if (!getTable().isDisposed()) {
        getTable().forceFocus();
      }
    }
  }
).start();
}",0.9136690647482014
128691,"protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          getTable().forceFocus();
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
}","protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          if (!getTable().isDisposed()) {
            getTable().forceFocus();
          }
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
}",0.9920250640843064
128692,"/** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
private void forceTableFocus(){
  new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
    @Override public void run(){
      getTable().forceFocus();
    }
  }
).start();
}","/** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
private void forceTableFocus(){
  new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
    @Override public void run(){
      if (!getTable().isDisposed()) {
        getTable().forceFocus();
      }
    }
  }
).start();
}",0.9136690647482014
128693,"protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          getTable().forceFocus();
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
}","protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          if (!getTable().isDisposed()) {
            getTable().forceFocus();
          }
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
}",0.9920250640843064
128694,"/** 
 * Check data connection.
 */
private void checkConnection(){
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
      if (!isContextMode()) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
    }
  }
  ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null);
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  if (isHiveDBConnSelected()) {
    if (isHiveEmbeddedMode()) {
      Map<String,String> properties=new HashMap<String,String>();
      properties.put(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR,metastoreConnDriverJar.getText());
      properties.put(""String_Node_Str"",dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
      properties.put(""String_Node_Str"",metastoreConnURLTxt.getText());
      properties.put(""String_Node_Str"",metastoreConnUserName.getText());
      properties.put(""String_Node_Str"",metastoreConnPassword.getText());
      properties.put(""String_Node_Str"",metastoreConnDriverName.getText());
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      databaseSettingIsValide=managerConnection.checkForHive(properties);
    }
  }
 else {
    databaseSettingIsValide=managerConnection.check();
  }
  checkButton.setEnabled(true);
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
  }
}","/** 
 * Check data connection.
 */
private void checkConnection(){
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
      if (!isContextMode()) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
    }
  }
  ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null);
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  if (isHiveDBConnSelected() && isHiveEmbeddedMode()) {
    Map<String,String> properties=new HashMap<String,String>();
    properties.put(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR,metastoreConnDriverJar.getText());
    properties.put(""String_Node_Str"",dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
    properties.put(""String_Node_Str"",metastoreConnURLTxt.getText());
    properties.put(""String_Node_Str"",metastoreConnUserName.getText());
    properties.put(""String_Node_Str"",metastoreConnPassword.getText());
    properties.put(""String_Node_Str"",metastoreConnDriverName.getText());
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    databaseSettingIsValide=managerConnection.checkForHive(properties);
  }
 else {
    databaseSettingIsValide=managerConnection.check();
  }
  checkButton.setEnabled(true);
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
  }
}",0.9906114037096404
128695,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataconnection.getDbType())) {
          String key=(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(key)) {
            Map<String,String> properties=new HashMap<String,String>();
            properties.put(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR,(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR));
            properties.put(""String_Node_Str"",metadataconnection.getDbType());
            properties.put(""String_Node_Str"",(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL));
            properties.put(""String_Node_Str"",(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME));
            properties.put(""String_Node_Str"",(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD));
            properties.put(""String_Node_Str"",(String)metadataconnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME));
            properties.put(""String_Node_Str"",metadataconnection.getDbVersionString());
            properties.put(""String_Node_Str"",metadataconnection.getAdditionalParams());
            managerConnection.checkForHive(properties);
          }
        }
 else         managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.7589554737194509
128696,"private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  List list=MetadataConnectionUtils.getConnection(metadataconnection);
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof Driver) {
      String driverClass=metadataconnection.getDriverClass();
      if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
        derbyDriver=(Driver)list.get(i);
      }
    }
    if (list.get(i) instanceof java.sql.Connection) {
      sqlConn=(java.sql.Connection)list.get(i);
    }
  }
  try {
    if (sqlConn != null) {
      DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
}","private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  List list=MetadataConnectionUtils.getConnection(metadataconnection);
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof Driver) {
      String driverClass=metadataconnection.getDriverClass();
      if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
        derbyDriver=(Driver)list.get(i);
      }
    }
    if (list.get(i) instanceof java.sql.Connection) {
      sqlConn=(java.sql.Connection)list.get(i);
    }
  }
  try {
    if (sqlConn != null) {
      DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) || EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbType)) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
}",0.9810479375696768
128697,"public static boolean hasSchema(Connection dataProvider){
  List<Schema> schemas=SchemaHelper.getSchemas(dataProvider.getDataPackage());
  if (schemas.size() == 0) {
    List<Catalog> catalogs=CatalogHelper.getCatalogs(dataProvider.getDataPackage());
    for (    Catalog catalog : catalogs) {
      return CatalogHelper.getSchemas(catalog).size() > 0;
    }
  }
 else {
    return true;
  }
  return false;
}","/** 
 * Two case has been contain one is only schema another one is schema contain in some catalog
 * @param dataProvider
 * @return
 */
public static boolean hasSchema(Connection dataProvider){
  List<Schema> schemas=SchemaHelper.getSchemas(dataProvider.getDataPackage());
  if (schemas.size() == 0) {
    List<Catalog> catalogs=CatalogHelper.getCatalogs(dataProvider.getDataPackage());
    for (    Catalog catalog : catalogs) {
      return CatalogHelper.getSchemas(catalog).size() > 0;
    }
  }
 else {
    return true;
  }
  return false;
}",0.856544502617801
128698,"@Override public void listModulesDone(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      if (inputList.size() > 0) {
        open();
      }
    }
  }
);
}","@Override public void listModulesDone(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (inputList.size() > 0) {
        open();
      }
    }
  }
);
}",0.9974293059125964
128699,"private void downLoad(final IProgressMonitor monitor){
  final List<URL> downloadOk=new ArrayList<URL>();
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled()) {
      monitor.subTask(""String_Node_Str"" + module.getName() + ""String_Node_Str""+ module.getUrl_description());
      monitor.worked(5);
      DownloadHelper downloader=new DownloadHelper();
      String librariesPath=PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA);
      File target=new File(librariesPath);
      if (module.getUrl_download() != null && !""String_Node_Str"".equals(module.getUrl_download())) {
        try {
          boolean isLicenseAccepted=Activator.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
          if (!isLicenseAccepted) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                String license=RemoteModulesHelper.getInstance().getLicenseUrl(module.getLicenseType());
                ModuleLicenseDialog licenseDialog=new ModuleLicenseDialog(getShell(),module.getLicenseType(),license,module.getDescription());
                if (licenseDialog.open() != Window.OK) {
                  downloadFialed.add(module.getName());
                  accepted=false;
                }
 else {
                  accepted=true;
                }
              }
            }
);
          }
 else {
            accepted=true;
          }
          if (!accepted) {
            monitor.worked(5);
            continue;
          }
          File destination=new File(target.toString() + File.separator + module.getName());
          downloader.download(new URL(module.getUrl_download()),destination);
          downloadOk.add(destination.toURL());
          installedModules.add(module.getName());
          monitor.worked(2);
        }
 catch (        Exception e) {
          downloadFialed.add(module.getName());
          ExceptionHandler.process(e);
          continue;
        }
      }
      accepted=false;
    }
 else {
      downloadFialed.add(module.getName());
    }
  }
  if (!downloadOk.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          CorePlugin.getDefault().getLibrariesService().deployLibrarys(downloadOk.toArray(new URL[downloadOk.size()]));
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
        monitor.worked(5);
      }
    }
);
  }
}","private void downLoad(final IProgressMonitor monitor){
  final List<URL> downloadOk=new ArrayList<URL>();
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled()) {
      monitor.subTask(module.getName());
      monitor.worked(5);
      DownloadHelper downloader=new DownloadHelper();
      String librariesPath=PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA);
      File target=new File(librariesPath);
      if (module.getUrl_download() != null && !""String_Node_Str"".equals(module.getUrl_download())) {
        try {
          boolean isLicenseAccepted=Activator.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
          if (!isLicenseAccepted) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                String license=RemoteModulesHelper.getInstance().getLicenseUrl(module.getLicenseType());
                ModuleLicenseDialog licenseDialog=new ModuleLicenseDialog(getShell(),module.getLicenseType(),license,module.getDescription());
                if (licenseDialog.open() != Window.OK) {
                  downloadFialed.add(module.getName());
                  accepted=false;
                }
 else {
                  accepted=true;
                }
              }
            }
);
          }
 else {
            accepted=true;
          }
          if (!accepted) {
            monitor.worked(5);
            continue;
          }
          File destination=new File(target.toString() + File.separator + module.getName());
          downloader.download(new URL(module.getUrl_download()),destination);
          downloadOk.add(destination.toURL());
          installedModules.add(module.getName());
          monitor.worked(2);
        }
 catch (        Exception e) {
          downloadFialed.add(module.getName());
          ExceptionHandler.process(e);
          continue;
        }
      }
      accepted=false;
    }
 else {
      downloadFialed.add(module.getName());
    }
  }
  if (!downloadOk.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          CorePlugin.getDefault().getLibrariesService().deployLibrarys(downloadOk.toArray(new URL[downloadOk.size()]));
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
        monitor.worked(5);
      }
    }
);
  }
}",0.9805686234403764
128700,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(3);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(6);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(6);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  Label label=new Label(footComposite,SWT.WRAP);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  label.setText(Messages.getString(""String_Node_Str""));
  label.setLayoutData(layoutData);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getName();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setSortable(true);
  tableViewerCreator.setDefaultSort(column,SORT.ASC);
  column.setWeight(5);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setSortable(true);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(5);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setDisplayedValue(""String_Node_Str"");
  column.setSortable(true);
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,Boolean>(){
    @Override public Boolean get(    ModuleToInstall bean){
      return bean.isRequired();
    }
    @Override public void set(    ModuleToInstall bean,    Boolean value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(Messages.getString(""String_Node_Str""));
  column.setToolTipHeader(Messages.getString(""String_Node_Str""));
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(Messages.getString(""String_Node_Str""));
  urlcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  urlcolumn.setModifiable(false);
  urlcolumn.setSortable(true);
  urlcolumn.setWeight(7);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(Messages.getString(""String_Node_Str""));
  installcolumn.setToolTipHeader(Messages.getString(""String_Node_Str""));
  installcolumn.setModifiable(false);
  installcolumn.setSortable(true);
  installcolumn.setWeight(5);
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  Label label=new Label(footComposite,SWT.WRAP);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  label.setText(Messages.getString(""String_Node_Str""));
  label.setLayoutData(layoutData);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(Messages.getString(""String_Node_Str""));
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}",0.9992406985573272
128701,"@Override public void listModulesDone(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      if (inputList.size() > 0) {
        open();
      }
 else       if (showMessage) {
        MessageDialog.openInformation(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
      }
    }
  }
);
}","@Override public void listModulesDone(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (inputList.size() > 0) {
        open();
      }
 else       if (showMessage) {
        MessageDialog.openInformation(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",Messages.getString(""String_Node_Str""));
      }
    }
  }
);
}",0.9987293519695044
128702,"private void addInstallButtons(TableViewerCreatorColumn installColumn,TableViewerCreatorColumn urlColumn){
  installButtons.clear();
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        installButtons.add(button);
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            button.setEnabled(false);
            table.select(table.indexOf(item));
            List<ModuleToInstall> datalist=new ArrayList<ModuleToInstall>();
            datalist.add(data);
            final DownloadModuleJob job=new DownloadModuleJob(datalist);
            job.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                Display.getDefault().asyncExec(new Runnable(){
                  @Override public void run(){
                    String message=data.getName() + ""String_Node_Str"";
                    if (!job.installedModules.isEmpty()) {
                      message+=""String_Node_Str"";
                    }
 else {
                      message+=""String_Node_Str"";
                    }
                    MessageDialog.openInformation(getShell(),""String_Node_Str"",message);
                  }
                }
);
              }
            }
);
            job.setUser(true);
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            int n=0;
            for (            Button button : installButtons) {
              if (!button.isEnabled()) {
                n++;
              }
            }
            if (n == installButtons.size()) {
              installAllBtn.setEnabled(false);
            }
          }
        }
);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout();
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        GridData gData=new GridData(GridData.FILL_HORIZONTAL);
        gData.horizontalAlignment=SWT.CENTER;
        gData.verticalAlignment=SWT.CENTER;
        final Link openLink=new Link(composite,SWT.NONE);
        openLink.setBackground(color);
        openLink.setLayoutData(gData);
        openLink.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        openLink.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          final SelectionEvent e){
            Program.launch(data.getUrl_description());
          }
        }
);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installColumn));
      editor.layout();
      editor=new TableEditor(table);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + data.getUrl_description() + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlColumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}","private void addInstallButtons(TableViewerCreatorColumn installColumn,TableViewerCreatorColumn urlColumn){
  installButtons.clear();
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        installButtons.add(button);
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            button.setEnabled(false);
            table.select(table.indexOf(item));
            List<ModuleToInstall> datalist=new ArrayList<ModuleToInstall>();
            datalist.add(data);
            final DownloadModuleJob job=new DownloadModuleJob(datalist);
            job.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                Display.getDefault().asyncExec(new Runnable(){
                  @Override public void run(){
                    String message=data.getName() + ""String_Node_Str"";
                    if (!job.installedModules.isEmpty()) {
                      message+=""String_Node_Str"";
                    }
 else {
                      message+=""String_Node_Str"";
                    }
                    MessageDialog.openInformation(getShell(),""String_Node_Str"",message);
                  }
                }
);
              }
            }
);
            job.setUser(true);
            job.setPriority(Job.INTERACTIVE);
            job.schedule();
            int n=0;
            for (            Button button : installButtons) {
              if (!button.isEnabled()) {
                n++;
              }
            }
            if (n == installButtons.size()) {
              close();
            }
          }
        }
);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout();
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        GridData gData=new GridData(GridData.FILL_HORIZONTAL);
        gData.horizontalAlignment=SWT.CENTER;
        gData.verticalAlignment=SWT.CENTER;
        final Link openLink=new Link(composite,SWT.NONE);
        openLink.setBackground(color);
        openLink.setLayoutData(gData);
        openLink.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        openLink.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          final SelectionEvent e){
            Program.launch(data.getUrl_description());
          }
        }
);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installColumn));
      editor.layout();
      editor=new TableEditor(table);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + data.getUrl_description() + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlColumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}",0.9959955506117908
128703,"private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      installAllBtn.setEnabled(false);
      for (      Button button : installButtons) {
        button.setEnabled(false);
      }
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names=""String_Node_Str"" + name;
                    }
 else {
                      names=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),""String_Node_Str"",message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
    }
  }
);
}","private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),""String_Node_Str"",message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}",0.9659116906886296
128704,"@Override protected void initializeBounds(){
  super.initializeBounds();
  getShell().setSize(900,400);
  Point location=getInitialLocation(getShell().getSize());
  getShell().setLocation(location.x,location.y);
}","@Override protected void initializeBounds(){
  super.initializeBounds();
  getShell().setSize(1050,400);
  Point location=getInitialLocation(getShell().getSize());
  getShell().setLocation(location.x,location.y);
}",0.9882903981264636
128705,"@Override protected Control createDialogArea(Composite parent){
  ((GridData)parent.getLayoutData()).widthHint=580;
  ((GridData)parent.getLayoutData()).heightHint=400;
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginTop=10;
  layout.marginLeft=5;
  layout.marginRight=5;
  container.setLayout(layout);
  container.setLayoutData(data);
  data=new GridData(GridData.FILL_HORIZONTAL);
  Label subTitleLabel=new Label(container,SWT.NONE);
  String desc=""String_Node_Str"" + description + ""String_Node_Str"";
  subTitleLabel.setText(desc);
  subTitleLabel.setLayoutData(data);
  clufText=new Browser(container,SWT.MULTI | SWT.WRAP | SWT.LEFT| SWT.BORDER);
  clufText.setBackground(new Color(null,255,255,255));
  if (licenseUrl != null) {
    clufText.setUrl(licenseUrl);
  }
 else {
    clufText.setText(desc);
  }
  data=new GridData(GridData.FILL_BOTH);
  clufText.setLayoutData(data);
  return parent;
}","@Override protected Control createDialogArea(Composite parent){
  ((GridData)parent.getLayoutData()).minimumWidth=600;
  ((GridData)parent.getLayoutData()).heightHint=500;
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginTop=10;
  layout.marginLeft=5;
  layout.marginRight=5;
  container.setLayout(layout);
  container.setLayoutData(data);
  data=new GridData(GridData.FILL_HORIZONTAL);
  Label subTitleLabel=new Label(container,SWT.NONE);
  String desc=""String_Node_Str"" + description + ""String_Node_Str"";
  subTitleLabel.setText(desc);
  subTitleLabel.setLayoutData(data);
  clufText=new Browser(container,SWT.MULTI | SWT.WRAP | SWT.LEFT| SWT.BORDER);
  clufText.setBackground(new Color(null,255,255,255));
  if (licenseUrl != null) {
    clufText.setUrl(licenseUrl);
  }
 else {
    clufText.setText(desc);
  }
  data=new GridData(GridData.FILL_BOTH);
  clufText.setLayoutData(data);
  return parent;
}",0.9451309935739002
128706,"private static List<ModuleNeeded> getModulesNeededForComponents(){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  IComponentsFactory compFac=ComponentsFactoryProvider.getInstance();
  Set<IComponent> componentList=compFac.getComponents();
  for (  IComponent comp : componentList) {
    importNeedsList.addAll(comp.getModulesNeeded());
  }
  return importNeedsList;
}","private static List<ModuleNeeded> getModulesNeededForComponents(){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  IComponentsFactory compFac=ComponentsFactoryProvider.getInstance();
  Set<IComponent> componentList=compFac.getComponents();
  for (  IComponent comp : componentList.toArray(new IComponent[0])) {
    importNeedsList.addAll(comp.getModulesNeeded());
  }
  return importNeedsList;
}",0.966542750929368
128707,"private void postFillCatalog(List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  filterList=new ArrayList<String>();
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
}","private List<String> postFillCatalog(List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.972914409534128
128708,"protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser || isLock;
  }
  return true;
}","protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser;
  }
  return true;
}",0.989106753812636
128709,"private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER)) {
        isLock=true;
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}","private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}",0.8658008658008658
128710,"@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser && isLock) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}","@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}",0.9966666666666668
128711,"@Override public void dispose(){
  if (!isLock) {
    unlockObject();
  }
  super.dispose();
}","@Override public void dispose(){
  unlockObject();
  super.dispose();
}",0.8606060606060606
128712,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser && isLock) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}",0.9916666666666668
128713,"@Override public boolean performFinish(){
  if (alreadyEditedByUser || isLock) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}",0.9967447916666666
128714,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}",0.9819494584837544
128715,"private void generateOriginalColumnsMap(Collection<? extends Package> dataPackageFromOrignalConnection){
  for (  orgomg.cwm.objectmodel.core.Package pkg : dataPackageFromOrignalConnection) {
    for (    ModelElement mol : pkg.getOwnedElement()) {
      if (mol instanceof MetadataTable) {
        MetadataTable table=(MetadataTable)mol;
        String oldTableUuid=ResourceHelper.getUUID(table);
        originalTablesMap.put(generateKey(table),oldTableUuid);
        for (        ModelElement col : table.getFeature()) {
          if (col instanceof MetadataColumn) {
            MetadataColumn column=(MetadataColumn)col;
            String oldColumnUuid=ResourceHelper.getUUID(column);
            originalColumnsMap.put(generateKey(column),oldColumnUuid);
          }
        }
      }
      if (mol instanceof Catalog) {
        Catalog catlog=(Catalog)mol;
        List<Schema> subschemas=CatalogHelper.getSchemas(catlog);
        if (!subschemas.isEmpty()) {
          generateOriginalColumnsMap(subschemas);
        }
      }
    }
  }
}","private void generateOriginalColumnsMap(Collection<? extends Package> dataPackageFromOrignalConnection){
  for (  orgomg.cwm.objectmodel.core.Package pkg : dataPackageFromOrignalConnection) {
    for (    ModelElement mol : pkg.getOwnedElement()) {
      if (mol instanceof MetadataTable) {
        MetadataTable table=(MetadataTable)mol;
        String oldTableUuid=ResourceHelper.getUUID(table);
        originalTablesMap.put(generateKey(table),oldTableUuid);
        for (        ModelElement col : table.getFeature()) {
          if (col instanceof MetadataColumn) {
            MetadataColumn column=(MetadataColumn)col;
            String oldColumnUuid=ResourceHelper.getUUID(column);
            originalColumnsMap.put(generateKey(column),oldColumnUuid);
          }
        }
      }
 else       if (mol instanceof Schema) {
        List<Schema> subschemas=new ArrayList<Schema>();
        subschemas.add((Schema)mol);
        generateOriginalColumnsMap(subschemas);
      }
      if (mol instanceof Catalog) {
        Catalog catlog=(Catalog)mol;
        List<Schema> subschemas=CatalogHelper.getSchemas(catlog);
        if (!subschemas.isEmpty()) {
          generateOriginalColumnsMap(subschemas);
        }
      }
    }
  }
}",0.8778993435448578
128716,"public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}",0.9973375931842384
128717,"/** 
 * clone a new DB connection
 */
private void cloneBaseDataBaseConnection(DatabaseConnection connection){
  temConnection=(DatabaseConnection)EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}","/** 
 * clone a new DB connection
 */
private void cloneBaseDataBaseConnection(DatabaseConnection connection){
  temConnection=EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}",0.971830985915493
128718,"private void replaceUUidsForColumnsAndTables(Collection<? extends Package> copyDataPackage){
  for (  orgomg.cwm.objectmodel.core.Package pkg : copyDataPackage) {
    for (    ModelElement mol : pkg.getOwnedElement()) {
      if (mol instanceof MetadataTable) {
        MetadataTable table=(MetadataTable)mol;
        String tableKey=generateKey(table);
        String oldTableID=originalTablesMap.get(tableKey);
        if (oldTableID != null) {
          setUUid(table,oldTableID);
        }
        for (        ModelElement col : table.getFeature()) {
          if (col instanceof MetadataColumn) {
            MetadataColumn column=(MetadataColumn)col;
            String columnKey=generateKey(column);
            String oldColumnID=originalColumnsMap.get(columnKey);
            if (oldColumnID != null) {
              setUUid(column,oldColumnID);
            }
          }
        }
      }
      if (mol instanceof Catalog) {
        Catalog catlog=(Catalog)mol;
        List<Schema> subschemas=CatalogHelper.getSchemas(catlog);
        if (!subschemas.isEmpty()) {
          replaceUUidsForColumnsAndTables(subschemas);
        }
      }
    }
  }
}","private void replaceUUidsForColumnsAndTables(Collection<? extends Package> copyDataPackage){
  for (  orgomg.cwm.objectmodel.core.Package pkg : copyDataPackage) {
    for (    ModelElement mol : pkg.getOwnedElement()) {
      if (mol instanceof MetadataTable) {
        MetadataTable table=(MetadataTable)mol;
        String tableKey=generateKey(table);
        String oldTableID=originalTablesMap.get(tableKey);
        if (oldTableID != null) {
          setUUid(table,oldTableID);
        }
        for (        ModelElement col : table.getFeature()) {
          if (col instanceof MetadataColumn) {
            MetadataColumn column=(MetadataColumn)col;
            String columnKey=generateKey(column);
            String oldColumnID=originalColumnsMap.get(columnKey);
            if (oldColumnID != null) {
              setUUid(column,oldColumnID);
            }
          }
        }
      }
 else       if (mol instanceof Schema) {
        List<Schema> subschemas=new ArrayList<Schema>();
        subschemas.add((Schema)mol);
        replaceUUidsForColumnsAndTables(subschemas);
      }
      if (mol instanceof Catalog) {
        Catalog catlog=(Catalog)mol;
        List<Schema> subschemas=CatalogHelper.getSchemas(catlog);
        if (!subschemas.isEmpty()) {
          replaceUUidsForColumnsAndTables(subschemas);
        }
      }
    }
  }
}",0.8354531001589826
128719,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.998144023756496
128720,"protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser || isLock;
  }
  return true;
}","protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser;
  }
  return true;
}",0.989106753812636
128721,"private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER)) {
        isLock=true;
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}","private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}",0.8658008658008658
128722,"@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser && isLock) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
 else {
          String namePattern=type.getNamePattern();
          if (namePattern == null || ""String_Node_Str"".equals(namePattern.trim())) {
            return;
          }
          Pattern pattern=Pattern.compile(namePattern);
          if (pattern.matcher(nameText.getText()).matches()) {
            return;
          }
          nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          updatePageStatus();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}","@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
 else {
          String namePattern=type.getNamePattern();
          if (namePattern == null || ""String_Node_Str"".equals(namePattern.trim())) {
            return;
          }
          Pattern pattern=Pattern.compile(namePattern);
          if (pattern.matcher(nameText.getText()).matches()) {
            return;
          }
          nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          updatePageStatus();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}",0.997443762781186
128723,"@Override public void dispose(){
  if (!isLock) {
    unlockObject();
  }
  super.dispose();
}","@Override public void dispose(){
  unlockObject();
  super.dispose();
}",0.8606060606060606
128724,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser && isLock) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}",0.9916666666666668
128725,"@Override public boolean performFinish(){
  if (alreadyEditedByUser || isLock) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}",0.9967447916666666
128726,"/** 
 * ignore regex
 */
public static String replaceAllStrictly(String src,String search,String replacement,boolean entirelyMatch,boolean caseSensitive){
  if (search == null) {
    if (src == null) {
      return replacement;
    }
 else {
      return src;
    }
  }
 else {
    if (src == null) {
      return null;
    }
 else {
      if (replacement == null) {
        if (src.equals(search)) {
          return replacement;
        }
 else {
          return src;
        }
      }
 else {
        if (entirelyMatch) {
          String upperSrc=caseSensitive ? src : src.toUpperCase();
          String upperSearch=caseSensitive ? search : search.toUpperCase();
          return upperSrc.equals(upperSearch) ? replacement : src;
        }
 else {
          int flag=caseSensitive ? Pattern.LITERAL : Pattern.LITERAL | Pattern.CASE_INSENSITIVE;
          return Pattern.compile(search,flag).matcher(src).replaceAll(Matcher.quoteReplacement(replacement));
        }
      }
    }
  }
}","/** 
 * ignore regex
 */
public static String replaceAllStrictly(String src,String search,String replacement,boolean entirelyMatch,boolean caseSensitive){
  if (search == null) {
    if (src == null) {
      return replacement;
    }
 else {
      return src;
    }
  }
 else {
    if (src == null) {
      return null;
    }
 else {
      if (replacement == null) {
        if ((caseSensitive && src.equals(search)) || (!caseSensitive && src.equalsIgnoreCase(search))) {
          return replacement;
        }
 else {
          return src;
        }
      }
 else {
        if (entirelyMatch) {
          String upperSrc=caseSensitive ? src : src.toUpperCase();
          String upperSearch=caseSensitive ? search : search.toUpperCase();
          return upperSrc.equals(upperSearch) ? replacement : src;
        }
 else {
          int flag=caseSensitive ? Pattern.LITERAL : Pattern.LITERAL | Pattern.CASE_INSENSITIVE;
          return Pattern.compile(search,flag).matcher(src).replaceAll(Matcher.quoteReplacement(replacement));
        }
      }
    }
  }
}",0.9653827401267674
128727,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128728,"/** 
 * ignore regex
 */
public static String replaceAllStrictly(String src,String search,String replacement,boolean entirelyMatch,boolean caseSensitive){
  if (search == null) {
    if (src == null) {
      return replacement;
    }
 else {
      return src;
    }
  }
 else {
    if (src == null) {
      return null;
    }
 else {
      if (replacement == null) {
        if (src.equals(search)) {
          return replacement;
        }
 else {
          return src;
        }
      }
 else {
        if (entirelyMatch) {
          String upperSrc=caseSensitive ? src : src.toUpperCase();
          String upperSearch=caseSensitive ? search : search.toUpperCase();
          return upperSrc.equals(upperSearch) ? replacement : src;
        }
 else {
          int flag=caseSensitive ? Pattern.LITERAL : Pattern.LITERAL | Pattern.CASE_INSENSITIVE;
          return Pattern.compile(search,flag).matcher(src).replaceAll(Matcher.quoteReplacement(replacement));
        }
      }
    }
  }
}","/** 
 * ignore regex
 */
public static String replaceAllStrictly(String src,String search,String replacement,boolean entirelyMatch,boolean caseSensitive){
  if (search == null) {
    if (src == null) {
      return replacement;
    }
 else {
      return src;
    }
  }
 else {
    if (src == null) {
      return null;
    }
 else {
      if (replacement == null) {
        if ((caseSensitive && src.equals(search)) || (!caseSensitive && src.equalsIgnoreCase(search))) {
          return replacement;
        }
 else {
          return src;
        }
      }
 else {
        if (entirelyMatch) {
          String upperSrc=caseSensitive ? src : src.toUpperCase();
          String upperSearch=caseSensitive ? search : search.toUpperCase();
          return upperSrc.equals(upperSearch) ? replacement : src;
        }
 else {
          int flag=caseSensitive ? Pattern.LITERAL : Pattern.LITERAL | Pattern.CASE_INSENSITIVE;
          return Pattern.compile(search,flag).matcher(src).replaceAll(Matcher.quoteReplacement(replacement));
        }
      }
    }
  }
}",0.9653827401267674
128729,"/** 
 * ignore regex
 */
public static String replaceAllStrictly(String src,String search,String replacement,boolean entirelyMatch,boolean caseSensitive){
  if (search == null) {
    if (src == null) {
      return replacement;
    }
 else {
      return src;
    }
  }
 else {
    if (src == null) {
      return null;
    }
 else {
      if (replacement == null) {
        if (src.equals(search)) {
          return replacement;
        }
 else {
          return src;
        }
      }
 else {
        if (entirelyMatch) {
          String upperSrc=caseSensitive ? src : src.toUpperCase();
          String upperSearch=caseSensitive ? search : search.toUpperCase();
          return upperSrc.equals(upperSearch) ? replacement : src;
        }
 else {
          int flag=caseSensitive ? Pattern.LITERAL : Pattern.LITERAL | Pattern.CASE_INSENSITIVE;
          return Pattern.compile(search,flag).matcher(src).replaceAll(Matcher.quoteReplacement(replacement));
        }
      }
    }
  }
}","/** 
 * ignore regex
 */
public static String replaceAllStrictly(String src,String search,String replacement,boolean entirelyMatch,boolean caseSensitive){
  if (search == null) {
    if (src == null) {
      return replacement;
    }
 else {
      return src;
    }
  }
 else {
    if (src == null) {
      return null;
    }
 else {
      if (replacement == null) {
        if ((caseSensitive && src.equals(search)) || (!caseSensitive && src.equalsIgnoreCase(search))) {
          return replacement;
        }
 else {
          return src;
        }
      }
 else {
        if (entirelyMatch) {
          String upperSrc=caseSensitive ? src : src.toUpperCase();
          String upperSearch=caseSensitive ? search : search.toUpperCase();
          return upperSrc.equals(upperSearch) ? replacement : src;
        }
 else {
          int flag=caseSensitive ? Pattern.LITERAL : Pattern.LITERAL | Pattern.CASE_INSENSITIVE;
          return Pattern.compile(search,flag).matcher(src).replaceAll(Matcher.quoteReplacement(replacement));
        }
      }
    }
  }
}",0.9653827401267674
128730,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128731,"@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HDFS)) {
      if (PluginChecker.isHDFSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}","@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    if (relatedWizard == null) {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isRepObjType(objectType)) {
          relatedWizard=handler.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
          if (relatedWizard != null) {
            break;
          }
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}",0.956335003579098
128732,"/** 
 * DOC ycbai Comment method ""invokeMethod"". Returns the value of a method.
 * @param owner
 * @param methodName
 * @param args
 * @return
 */
public static Object invokeMethod(Object owner,String methodName,Object[] args){
  Thread.currentThread().getContextClassLoader();
  Object returnValue=null;
  Class ownerClass=owner.getClass();
  Class[] argsClass=new Class[args.length];
  for (int i=0, j=args.length; i < j; i++) {
    argsClass[i]=args[i].getClass();
  }
  try {
    Method method=ownerClass.getMethod(methodName,argsClass);
    returnValue=method.invoke(owner,args);
  }
 catch (  Exception e) {
    log.error(e);
    e.printStackTrace();
  }
  return returnValue;
}","/** 
 * DOC ycbai Comment method ""invokeMethod"". Returns the value of a method.
 * @param owner
 * @param methodName
 * @param args
 * @return
 */
public static Object invokeMethod(Object owner,String methodName,Object[] args){
  Object returnValue=null;
  Class ownerClass=owner.getClass();
  Class[] argsClass=new Class[args.length];
  for (int i=0, j=args.length; i < j; i++) {
    argsClass[i]=args[i].getClass();
  }
  try {
    Method method=ownerClass.getMethod(methodName,argsClass);
    returnValue=method.invoke(owner,args);
  }
 catch (  Exception e) {
    log.error(e);
    e.printStackTrace();
  }
  return returnValue;
}",0.96206373292868
128733,"/** 
 * DOC ggu Comment method ""setMainProjectBranch"". When use this method to set the branch value, make sure that have set the RepositoryContext object in context ""ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY, repositoryContext)""
 * @param technicalLabel
 * @param branchValue
 */
public void setMainProjectBranch(String technicalLabel,String branchValue){
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return;
  }
  String key=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (branchValue == null) {
    fields.put(key,""String_Node_Str"");
  }
 else {
    fields.put(key,branchValue);
  }
}","/** 
 * DOC ggu Comment method ""setMainProjectBranch"". When use this method to set the branch value, make sure that have set the RepositoryContext object in context ""ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY, repositoryContext)""
 * @param technicalLabel
 * @param branchValue
 */
public void setMainProjectBranch(String technicalLabel,String branchValue){
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return;
  }
  String key=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (branchValue != null) {
    fields.put(key,branchValue);
  }
}",0.9448123620309052
128734,"/** 
 * Test method for studio have all the lib for the system of db connection .
 */
@Test public void testMissingJar() throws MalformedURLException {
  Set<String> names=new HashSet<String>();
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
  if (jarFiles.size() > 0) {
    for (    File file : jarFiles) {
      names.add(file.getName());
    }
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  List<String> allJars=new ArrayList<String>();
  EDatabaseVersion4Drivers[] values=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers driver : values) {
    Set<String> providerDrivers=driver.getProviderDrivers();
    allJars.addAll(providerDrivers);
  }
  Set<String> missJars=new HashSet<String>();
  for (  String jar : allJars) {
    boolean hadInstalled=false;
    for (    String installJar : names) {
      if (jar.equals(installJar)) {
        hadInstalled=true;
      }
    }
    if (!hadInstalled) {
      missJars.add(jar);
    }
  }
  if (missJars.size() > 0) {
    for (    String notDiliver : notDilivers) {
      if (missJars.contains(notDiliver)) {
        missJars.remove(notDiliver);
      }
    }
    StringBuffer buffer=new StringBuffer();
    buffer.append(""String_Node_Str"");
    for (    String missJar : missJars) {
      buffer.append(missJar + ""String_Node_Str"");
    }
    throw new RuntimeException(buffer.toString());
  }
}","/** 
 * Test method for studio have all the lib for the system of db connection .
 */
@Test public void testMissingJar() throws MalformedURLException {
  Set<String> names=new HashSet<String>();
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
  if (jarFiles.size() > 0) {
    for (    File file : jarFiles) {
      names.add(file.getName());
    }
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  List<String> allJars=new ArrayList<String>();
  EDatabaseVersion4Drivers[] values=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers driver : values) {
    Set<String> providerDrivers=driver.getProviderDrivers();
    allJars.addAll(providerDrivers);
  }
  Set<String> missJars=new HashSet<String>();
  for (  String jar : allJars) {
    boolean hadInstalled=false;
    for (    String installJar : names) {
      if (jar.equals(installJar)) {
        hadInstalled=true;
      }
    }
    if (!hadInstalled) {
      missJars.add(jar);
    }
  }
  if (missJars.size() > 0) {
    for (    String notDiliver : notDilivers) {
      if (missJars.contains(notDiliver)) {
        missJars.remove(notDiliver);
      }
    }
  }
  if (missJars.size() > 0) {
    StringBuffer buffer=new StringBuffer();
    buffer.append(""String_Node_Str"");
    for (    String missJar : missJars) {
      buffer.append(missJar + ""String_Node_Str"");
    }
    throw new RuntimeException(buffer.toString());
  }
  assertTrue(missJars.size() == 0);
}",0.9784037558685446
128735,"/** 
 * Formats a Date into a date/time string.
 * @param pattern the pattern to format.
 * @param date the time value to be formatted into a time string.
 * @return the formatted time string.{talendTypes} String {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to format {param} date(myDate) date : the time value to be formatted into a time string {example} formatDate(""yyyy-MM-dd"", new Date()) #
 */
public synchronized static String formatDate(String pattern,java.util.Date date){
  if (date instanceof TalendTimestampWithTZ) {
    DateFormat format=FastDateParser.getInstance(pattern);
    format.setTimeZone(((TalendTimestampWithTZ)date).getTimeZone());
    return format.format(date.getTime());
  }
 else {
    return FastDateParser.getInstance(pattern).format(date);
  }
}","/** 
 * Formats a Date into a date/time string.
 * @param pattern the pattern to format.
 * @param date the time value to be formatted into a time string.
 * @return the formatted time string.{talendTypes} String {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to format {param} date(myDate) date : the time value to be formatted into a time string {example} formatDate(""yyyy-MM-dd"", new Date()) #
 */
public synchronized static String formatDate(String pattern,java.util.Date date){
  DateFormat format=FastDateParser.getInstance(pattern);
  if (date instanceof TalendTimestampWithTZ) {
    format.setTimeZone(((TalendTimestampWithTZ)date).getTimeZone());
  }
 else {
    format.setTimeZone(TimeZone.getDefault());
  }
  return format.format(date);
}",0.8322903629536921
128736,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (!factory.getRepositoryContext().isOffline() && factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.9826348087217652
128737,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
      if (!node.isBin() || !node.hasChildren()) {
        canWork=false;
      }
    break;
default :
  canWork=false;
break;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (!factory.getRepositoryContext().isOffline() && factory.getRepositoryContext().isEditableAsReadOnly()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
      if (!node.isBin() || !node.hasChildren()) {
        canWork=false;
      }
    break;
default :
  canWork=false;
break;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.9107981220657276
128738,"public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  setShellStyle(SWT.CLOSE | SWT.MAX | SWT.TITLE| SWT.BORDER| SWT.APPLICATION_MODAL| SWT.RESIZE| getDefaultOrientation());
  if (osName.contains(""String_Node_Str"")) {
    font=fontMac;
  }
  this.text=text;
  this.title=title;
}","public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  setShellStyle(SWT.CLOSE | SWT.MIN | SWT.MAX| SWT.TITLE| SWT.BORDER| SWT.RESIZE| getDefaultOrientation());
  if (osName.contains(""String_Node_Str"")) {
    font=fontMac;
  }
  this.text=text;
  this.title=title;
}",0.945337620578778
128739,"/** 
 * Formats a Date into a date/time string.
 * @param pattern the pattern to format.
 * @param date the time value to be formatted into a time string.
 * @return the formatted time string.{talendTypes} String {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to format {param} date(myDate) date : the time value to be formatted into a time string {example} formatDate(""yyyy-MM-dd"", new Date()) #
 */
public synchronized static String formatDate(String pattern,java.util.Date date){
  if (date instanceof TalendTimestampWithTZ) {
    DateFormat format=FastDateParser.getInstance(pattern);
    format.setTimeZone(((TalendTimestampWithTZ)date).getTimeZone());
    return format.format(date.getTime());
  }
 else {
    return FastDateParser.getInstance(pattern).format(date);
  }
}","/** 
 * Formats a Date into a date/time string.
 * @param pattern the pattern to format.
 * @param date the time value to be formatted into a time string.
 * @return the formatted time string.{talendTypes} String {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to format {param} date(myDate) date : the time value to be formatted into a time string {example} formatDate(""yyyy-MM-dd"", new Date()) #
 */
public synchronized static String formatDate(String pattern,java.util.Date date){
  DateFormat format=FastDateParser.getInstance(pattern);
  if (date instanceof TalendTimestampWithTZ) {
    format.setTimeZone(((TalendTimestampWithTZ)date).getTimeZone());
  }
 else {
    format.setTimeZone(TimeZone.getDefault());
  }
  return format.format(date);
}",0.8322903629536921
128740,"@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}","@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HDFS)) {
      if (PluginChecker.isHDFSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}",0.96986076986077
128741,"/** 
 * Formats a Date into a date/time string.
 * @param pattern the pattern to format.
 * @param date the time value to be formatted into a time string.
 * @return the formatted time string.{talendTypes} String {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to format {param} date(myDate) date : the time value to be formatted into a time string {example} formatDate(""yyyy-MM-dd"", new Date()) #
 */
public synchronized static String formatDate(String pattern,java.util.Date date){
  if (date instanceof TalendTimestampWithTZ) {
    DateFormat format=FastDateParser.getInstance(pattern);
    format.setTimeZone(((TalendTimestampWithTZ)date).getTimeZone());
    return format.format(date.getTime());
  }
 else {
    return FastDateParser.getInstance(pattern).format(date);
  }
}","/** 
 * Formats a Date into a date/time string.
 * @param pattern the pattern to format.
 * @param date the time value to be formatted into a time string.
 * @return the formatted time string.{talendTypes} String {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to format {param} date(myDate) date : the time value to be formatted into a time string {example} formatDate(""yyyy-MM-dd"", new Date()) #
 */
public synchronized static String formatDate(String pattern,java.util.Date date){
  DateFormat format=FastDateParser.getInstance(pattern);
  if (date instanceof TalendTimestampWithTZ) {
    format.setTimeZone(((TalendTimestampWithTZ)date).getTimeZone());
  }
 else {
    format.setTimeZone(TimeZone.getDefault());
  }
  return format.format(date);
}",0.8322903629536921
128742,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128743,"@Override protected void run() throws LoginException, PersistenceException {
  try {
    Item newItem=factory.copy(item,path,true);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.0283486888731396
128744,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        Item newItem=factory.copy(item,path,true);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem);
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.7308488612836439
128745,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.FILL_HORIZONTAL);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(6);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDisplayedValue(""String_Node_Str"");
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(""String_Node_Str"");
  urlcolumn.setModifiable(false);
  urlcolumn.setWeight(8);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(""String_Node_Str"");
  installcolumn.setModifiable(false);
  installcolumn.setWeight(5);
  if (inputList == null) {
    inputList=getUpdatedModulesToInstall();
  }
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  Label label=new Label(footComposite,SWT.WRAP);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  label.setText(""String_Node_Str"");
  label.setLayoutData(layoutData);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(""String_Node_Str"");
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getDescription();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setWeight(4);
  column.setModifiable(false);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getContext();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(6);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setDisplayedValue(""String_Node_Str"");
  column.setImageProvider(new IColumnImageProvider<ModuleToInstall>(){
    @Override public Image getImage(    ModuleToInstall bean){
      if (bean.isRequired()) {
        return ImageProvider.getImage(EImage.CHECKED_ICON);
      }
 else {
        return ImageProvider.getImage(EImage.UNCHECKED_ICON);
      }
    }
  }
);
  column.setModifiable(false);
  column.setWeight(2);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setSortable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<ModuleToInstall,String>(){
    @Override public String get(    ModuleToInstall bean){
      return bean.getLicenseType();
    }
    @Override public void set(    ModuleToInstall bean,    String value){
    }
  }
);
  column.setModifiable(false);
  column.setWeight(3);
  TableViewerCreatorColumn urlcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  urlcolumn.setTitle(""String_Node_Str"");
  urlcolumn.setToolTipHeader(""String_Node_Str"");
  urlcolumn.setModifiable(false);
  urlcolumn.setWeight(8);
  TableViewerCreatorColumn installcolumn=new TableViewerCreatorColumn(tableViewerCreator);
  installcolumn.setTitle(""String_Node_Str"");
  installcolumn.setToolTipHeader(""String_Node_Str"");
  installcolumn.setModifiable(false);
  installcolumn.setWeight(5);
  if (inputList == null) {
    inputList=getUpdatedModulesToInstall();
  }
  tableViewerCreator.init(inputList);
  addInstallButtons(installcolumn,urlcolumn);
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  Label label=new Label(footComposite,SWT.WRAP);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  label.setText(""String_Node_Str"");
  label.setLayoutData(layoutData);
  installAllBtn=new Button(footComposite,SWT.NONE);
  installAllBtn.setText(""String_Node_Str"");
  createFooter(composite);
  setTitle(title);
  addListeners();
  return composite;
}",0.2319435535599743
128746,"/** 
 * Test method for studio have all the lib for the system of db connection .
 */
@Test public void testMissingJar() throws MalformedURLException {
  Set<String> names=new HashSet<String>();
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
  if (jarFiles.size() > 0) {
    for (    File file : jarFiles) {
      names.add(file.getName());
    }
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  List<String> allJars=new ArrayList<String>();
  EDatabaseVersion4Drivers[] values=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers driver : values) {
    Set<String> providerDrivers=driver.getProviderDrivers();
    allJars.addAll(providerDrivers);
  }
  List<String> missJars=new ArrayList<String>();
  for (  String jar : allJars) {
    boolean hadInstalled=false;
    for (    String installJar : names) {
      if (jar.equals(installJar)) {
        hadInstalled=true;
      }
    }
    if (!hadInstalled) {
      missJars.add(jar);
    }
  }
  if (missJars.size() > 0) {
    System.out.println(""String_Node_Str"");
    for (    String missJar : missJars) {
      System.out.println(missJar);
    }
    System.out.println(""String_Node_Str"");
  }
  assertTrue(missJars.size() == 0);
}","/** 
 * Test method for studio have all the lib for the system of db connection .
 */
@Test public void testMissingJar() throws MalformedURLException {
  Set<String> names=new HashSet<String>();
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
  if (jarFiles.size() > 0) {
    for (    File file : jarFiles) {
      names.add(file.getName());
    }
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  List<String> allJars=new ArrayList<String>();
  EDatabaseVersion4Drivers[] values=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers driver : values) {
    Set<String> providerDrivers=driver.getProviderDrivers();
    allJars.addAll(providerDrivers);
  }
  List<String> missJars=new ArrayList<String>();
  for (  String jar : allJars) {
    boolean hadInstalled=false;
    for (    String installJar : names) {
      if (jar.equals(installJar)) {
        hadInstalled=true;
      }
    }
    if (!hadInstalled) {
      missJars.add(jar);
    }
  }
  if (missJars.size() > 0) {
    StringBuffer buffer=new StringBuffer();
    buffer.append(""String_Node_Str"");
    for (    String missJar : missJars) {
      buffer.append(missJar + ""String_Node_Str"");
    }
    throw new RuntimeException(buffer.toString());
  }
}",0.920623671155209
128747,"/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
    char sign=offset >= 0 ? '+' : '-';
    int hour=Math.abs(offset) / 1000 / 60/ 60;
    int min=Math.abs(offset) / 1000 / 60 % 60;
    String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
    TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
    return tstz;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    boolean hasZone=false;
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    if (hasZone) {
      int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
      char sign=offset >= 0 ? '+' : '-';
      int hour=Math.abs(offset) / 1000 / 60/ 60;
      int min=Math.abs(offset) / 1000 / 60 % 60;
      String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
      TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
      return tstz;
    }
 else {
      return d;
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}",0.8949579831932774
128748,"private TableEditor addTableEditor(TableViewerCreatorColumnNotModifiable column,TableEditorContentNotModifiable tableEditorContent,String idProperty,TableItem tableItem){
  if (tableItem.getData() == null) {
    return null;
  }
  tableEditorContent.setLayoutEnabled(true);
  TableEditor tableEditor=tableEditorContent.createTableEditor(tableItem.getParent());
  tableEditorList.add(tableEditor);
  dataToMultipleDataEditor.put(tableItem.getData(),tableEditor);
  Object currentRowObject=tableItem.getData();
  Object value=column.getBeanPropertyAccessors().get(tableItem.getData());
  Control control=tableEditorContent.initialize(tableItem.getParent(),tableEditor,column,currentRowObject,value);
  if (tableItem != null && !tableItem.isDisposed()) {
    tableEditor.setEditor(control,tableItem,column.getIndex());
    fireEvent(new TableEditorManagerEvent(EVENT_TYPE.CONTROL_CREATED,tableEditor));
  }
  return tableEditor;
}","private TableEditor addTableEditor(TableViewerCreatorColumnNotModifiable column,TableEditorContentNotModifiable tableEditorContent,String idProperty,TableItem tableItem){
  if (tableItem.getData() == null) {
    return null;
  }
  tableEditorContent.setLayoutEnabled(true);
  TableEditor tableEditor=tableEditorContent.createTableEditor(tableItem.getParent());
  tableEditorList.add(tableEditor);
  dataToMultipleDataEditor.put(tableItem.getData(),tableEditor);
  Object currentRowObject=tableItem.getData();
  Object value=null;
  if (column.getBeanPropertyAccessors() != null) {
    value=column.getBeanPropertyAccessors().get(tableItem.getData());
  }
 else {
    value=tableViewerCreator.getCellModifier().getValue(currentRowObject,idProperty);
  }
  Control control=tableEditorContent.initialize(tableItem.getParent(),tableEditor,column,currentRowObject,value);
  if (tableItem != null && !tableItem.isDisposed()) {
    tableEditor.setEditor(control,tableItem,column.getIndex());
    fireEvent(new TableEditorManagerEvent(EVENT_TYPE.CONTROL_CREATED,tableEditor));
  }
  return tableEditor;
}",0.91646070192783
128749,"/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
    char sign=offset >= 0 ? '+' : '-';
    int hour=Math.abs(offset) / 1000 / 60/ 60;
    int min=Math.abs(offset) / 1000 / 60 % 60;
    String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
    TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
    return tstz;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    boolean hasZone=false;
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    if (hasZone) {
      int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
      char sign=offset >= 0 ? '+' : '-';
      int hour=Math.abs(offset) / 1000 / 60/ 60;
      int min=Math.abs(offset) / 1000 / 60 % 60;
      String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
      TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
      return tstz;
    }
 else {
      return d;
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}",0.8949579831932774
128750,"/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
    char sign=offset >= 0 ? '+' : '-';
    int hour=Math.abs(offset) / 1000 / 60/ 60;
    int min=Math.abs(offset) / 1000 / 60 % 60;
    String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
    TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
    return tstz;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    boolean hasZone=false;
    boolean inQuote=false;
    char[] ps=pattern.toCharArray();
    for (    char p : ps) {
      if (p == '\'') {
        inQuote=!inQuote;
      }
 else       if (!inQuote && (p == 'Z' || p == 'z')) {
        hasZone=true;
        break;
      }
    }
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    if (hasZone) {
      int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
      char sign=offset >= 0 ? '+' : '-';
      int hour=Math.abs(offset) / 1000 / 60/ 60;
      int min=Math.abs(offset) / 1000 / 60 % 60;
      String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
      TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
      return tstz;
    }
 else {
      return d;
    }
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}",0.8949579831932774
128751,"private TableEditor addTableEditor(TableViewerCreatorColumnNotModifiable column,TableEditorContentNotModifiable tableEditorContent,String idProperty,TableItem tableItem){
  if (tableItem.getData() == null) {
    return null;
  }
  tableEditorContent.setLayoutEnabled(true);
  TableEditor tableEditor=tableEditorContent.createTableEditor(tableItem.getParent());
  tableEditorList.add(tableEditor);
  dataToMultipleDataEditor.put(tableItem.getData(),tableEditor);
  Object currentRowObject=tableItem.getData();
  Object value=column.getBeanPropertyAccessors().get(tableItem.getData());
  Control control=tableEditorContent.initialize(tableItem.getParent(),tableEditor,column,currentRowObject,value);
  if (tableItem != null && !tableItem.isDisposed()) {
    tableEditor.setEditor(control,tableItem,column.getIndex());
    fireEvent(new TableEditorManagerEvent(EVENT_TYPE.CONTROL_CREATED,tableEditor));
  }
  return tableEditor;
}","private TableEditor addTableEditor(TableViewerCreatorColumnNotModifiable column,TableEditorContentNotModifiable tableEditorContent,String idProperty,TableItem tableItem){
  if (tableItem.getData() == null) {
    return null;
  }
  tableEditorContent.setLayoutEnabled(true);
  TableEditor tableEditor=tableEditorContent.createTableEditor(tableItem.getParent());
  tableEditorList.add(tableEditor);
  dataToMultipleDataEditor.put(tableItem.getData(),tableEditor);
  Object currentRowObject=tableItem.getData();
  Object value=null;
  if (column.getBeanPropertyAccessors() != null) {
    value=column.getBeanPropertyAccessors().get(tableItem.getData());
  }
 else {
    value=tableViewerCreator.getCellModifier().getValue(currentRowObject,idProperty);
  }
  Control control=tableEditorContent.initialize(tableItem.getParent(),tableEditor,column,currentRowObject,value);
  if (tableItem != null && !tableItem.isDisposed()) {
    tableEditor.setEditor(control,tableItem,column.getIndex());
    fireEvent(new TableEditorManagerEvent(EVENT_TYPE.CONTROL_CREATED,tableEditor));
  }
  return tableEditor;
}",0.91646070192783
128752,"@Override public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap){
  if (jarsNeeded == null || jarsNeeded.size() == 0) {
    return false;
  }
  List<String> jarNotFound=new ArrayList<String>();
  boolean allIsOK=true;
  for (  String jar : jarsNeeded) {
    if (!retrieve(jar,pathToStore,false,monitorWrap)) {
      jarNotFound.add(jar);
      allIsOK=false;
    }
  }
  if (!jarNotFound.isEmpty() && !CommonsPlugin.isHeadless()) {
    Shell shell=Display.getCurrent().getActiveShell();
    ModulesInstaller.installModules(new Shell(shell),jarNotFound.toArray(new String[jarNotFound.size()]));
    for (    String jar : jarNotFound) {
      if (!retrieve(jar,pathToStore,false,monitorWrap)) {
        allIsOK=false;
      }
    }
  }
  return allIsOK;
}","@Override public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap){
  if (jarsNeeded == null || jarsNeeded.size() == 0) {
    return false;
  }
  List<String> jarNotFound=new ArrayList<String>();
  boolean allIsOK=true;
  for (  String jar : jarsNeeded) {
    if (!retrieve(jar,pathToStore,false,monitorWrap)) {
      jarNotFound.add(jar);
      allIsOK=false;
    }
  }
  if (!jarNotFound.isEmpty() && !CommonsPlugin.isHeadless()) {
    Shell shell=Display.getCurrent().getActiveShell();
    ModulesInstaller.installModules(new Shell(shell),jarNotFound.toArray(new String[jarNotFound.size()]));
  }
  return allIsOK;
}",0.8913043478260869
128753,"@Override public void run(){
  String title=""String_Node_Str"";
  String text=""String_Node_Str"";
  ExternalModulesInstallDialog dialog=new ExternalModulesInstallDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),text,title);
}","@Override public void run(){
  String title=""String_Node_Str"";
  String text=""String_Node_Str"";
  ExternalModulesInstallDialog dialog=new ExternalModulesInstallDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),text,title);
  dialog.openDialog();
}",0.9551656920077972
128754,"public ComponentExternalModulesDialog(Shell shell,String[] neededJars,String text,String title){
  super(shell,neededJars,text,title);
}","public ComponentExternalModulesDialog(Shell shell,String text,String title){
  super(shell,text,title);
}",0.8713692946058091
128755,"private void refreshUI(){
  showMessage=false;
  updateModulesToInstall();
}","private void refreshUI(){
  showMessage=false;
  openDialog();
}",0.8428571428571429
128756,"public ExternalModulesInstallDialog(Shell shell,String[] neededJars,String text,String title){
  super(shell);
  this.text=text;
  this.title=title;
  this.neededJars=neededJars;
  updateModulesToInstall();
}","public ExternalModulesInstallDialog(Shell shell,String text,String title){
  super(shell);
  this.text=text;
  this.title=title;
}",0.7692307692307693
128757,"private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      installAllBtn.setEnabled(false);
      for (      Button button : installButtons) {
        button.setEnabled(false);
      }
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + ""String_Node_Str"";
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=""String_Node_Str"";
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names=""String_Node_Str"" + name;
                    }
 else {
                      names=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),""String_Node_Str"",message);
                refreshUI();
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
    }
  }
);
}","private void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      installAllBtn.setEnabled(false);
      for (      Button button : installButtons) {
        button.setEnabled(false);
      }
      List<ModuleToInstall> inputList=tableViewerCreator.getInputList();
      List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
      if (!jarsInstalledSuccuss.isEmpty()) {
        for (        ModuleToInstall module : inputList) {
          if (!jarsInstalledSuccuss.contains(module.getName())) {
            toInstall.add(module);
          }
        }
      }
 else {
        toInstall.addAll(inputList);
      }
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob job=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=job.downloadFialed;
                jarsInstalledSuccuss.addAll(job.installedModules);
                int installedModules=job.installedModules.size();
                String success=installedModules + ""String_Node_Str"";
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=""String_Node_Str"";
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names=""String_Node_Str"" + name;
                    }
 else {
                      names=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),""String_Node_Str"",message);
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
    }
  }
);
}",0.9934611048478016
128758,"/** 
 * DOC WCHEN OperationExternalModulesDialog constructor comment.
 * @param shell
 * @param modules
 * @param text
 * @param title
 */
public OperationExternalModulesDialog(Shell shell,String[] neededJars,String text,String title){
  super(shell,neededJars,text,title);
}","/** 
 * DOC WCHEN OperationExternalModulesDialog constructor comment.
 * @param shell
 * @param modules
 * @param text
 * @param title
 */
public OperationExternalModulesDialog(Shell shell,String[] neededJars,String text,String title){
  super(shell,text,title);
  this.neededJars=neededJars;
}",0.9279437609841829
128759,"public static void installModules(Shell shell,String[] jarNames){
  if (!Activator.getDefault().getPreferenceStore().getBoolean(ExternalModulesInstallDialog.DO_NOT_SHOW_EXTERNALMODULESINSTALLDIALOG)) {
    String text=""String_Node_Str"";
    String title=""String_Node_Str"";
    OperationExternalModulesDialog dialog=new OperationExternalModulesDialog(shell,jarNames,text,title);
  }
}","public static void installModules(Shell shell,String[] jarNames){
  if (!Activator.getDefault().getPreferenceStore().getBoolean(ExternalModulesInstallDialog.DO_NOT_SHOW_EXTERNALMODULESINSTALLDIALOG)) {
    String text=""String_Node_Str"";
    String title=""String_Node_Str"";
    OperationExternalModulesDialog dialog=new OperationExternalModulesDialog(shell,jarNames,text,title);
    dialog.openDialog();
  }
}",0.968394437420986
128760,"/** 
 * Test method for studio have all the lib for the system of db connection .
 */
@Test public void testMissingJar() throws MalformedURLException {
  Set<String> names=new HashSet<String>();
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
  if (jarFiles.size() > 0) {
    for (    File file : jarFiles) {
      names.add(file.getName());
    }
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  List<String> allJars=new ArrayList<String>();
  EDatabaseVersion4Drivers[] values=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers driver : values) {
    Set<String> providerDrivers=driver.getProviderDrivers();
    allJars.addAll(providerDrivers);
  }
  List<String> missJars=new ArrayList<String>();
  for (  String jar : allJars) {
    boolean hadInstalled=false;
    for (    String installJar : names) {
      if (jar.equals(installJar)) {
        hadInstalled=true;
      }
    }
    if (!hadInstalled) {
      missJars.add(jar);
    }
  }
  if (missJars.size() > 0) {
    StringBuffer buffer=new StringBuffer();
    buffer.append(""String_Node_Str"");
    for (    String missJar : missJars) {
      buffer.append(missJar + ""String_Node_Str"");
    }
    throw new RuntimeException(buffer.toString());
  }
}","/** 
 * Test method for studio have all the lib for the system of db connection .
 */
@Test public void testMissingJar() throws MalformedURLException {
  Set<String> names=new HashSet<String>();
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
  if (jarFiles.size() > 0) {
    for (    File file : jarFiles) {
      names.add(file.getName());
    }
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  List<String> allJars=new ArrayList<String>();
  EDatabaseVersion4Drivers[] values=EDatabaseVersion4Drivers.values();
  for (  EDatabaseVersion4Drivers driver : values) {
    Set<String> providerDrivers=driver.getProviderDrivers();
    allJars.addAll(providerDrivers);
  }
  Set<String> missJars=new HashSet<String>();
  for (  String jar : allJars) {
    boolean hadInstalled=false;
    for (    String installJar : names) {
      if (jar.equals(installJar)) {
        hadInstalled=true;
      }
    }
    if (!hadInstalled) {
      missJars.add(jar);
    }
  }
  if (missJars.size() > 0) {
    for (    String notDiliver : notDilivers) {
      if (missJars.contains(notDiliver)) {
        missJars.remove(notDiliver);
      }
    }
    StringBuffer buffer=new StringBuffer();
    buffer.append(""String_Node_Str"");
    for (    String missJar : missJars) {
      buffer.append(missJar + ""String_Node_Str"");
    }
    throw new RuntimeException(buffer.toString());
  }
}",0.9460997656511552
128761,"/** 
 * DOC Administrator Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
}","/** 
 * DOC Administrator Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  notDilivers.add(""String_Node_Str"");
  notDilivers.add(""String_Node_Str"");
  notDilivers.add(""String_Node_Str"");
  notDilivers.add(""String_Node_Str"");
  notDilivers.add(""String_Node_Str"");
}",0.5833333333333334
128762,"@Override public void run(){
  ExternalModulesInstallDialog dialog=new ExternalModulesInstallDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  if (dialog.needOpen()) {
    dialog.open();
  }
 else {
    MessageDialog.openInformation(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",""String_Node_Str"");
  }
}","@Override public void run(){
  String title=""String_Node_Str"";
  String text=""String_Node_Str"";
  ExternalModulesInstallDialog dialog=new ExternalModulesInstallDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),text,title);
}",0.5475409836065573
128763,"public ComponentExternalModulesDialog(Shell shell,String text,String title){
  super(shell);
  this.text=text;
  this.title=title;
}","public ComponentExternalModulesDialog(Shell shell,String[] neededJars,String text,String title){
  super(shell,neededJars,text,title);
}",0.7686567164179104
128764,"/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}","/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  defautVal=defautVal.trim();
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}",0.98971898560658
128765,"/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}","/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  defautVal=defautVal.trim();
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}",0.98971898560658
128766,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128767,"/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    return FastDateParser.getInstance(pattern).parse(stringDate);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
    char sign=offset >= 0 ? '+' : '-';
    int hour=Math.abs(offset) / 1000 / 60/ 60;
    int min=Math.abs(offset) / 1000 / 60 % 60;
    String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
    TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
    return tstz;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}",0.7583166332665331
128768,"/** 
 * get part of date. like YEAR, MONTH, HOUR, or DAY_OF_WEEK, WEEK_OF_MONTH, WEEK_OF_YEAR, TIMEZONE and so on
 * @param partName which part to get.
 * @param date the date value.
 * @return the specified part value.{talendTypes} Integer {Category} TalendDate {param} string(""DAY_OF_WEEK"") partName : which part to get {param} date(TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) date : the date value {example} getPartOfDate(""DAY_OF_WEEK"", TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) #
 */
public static int getPartOfDate(String partName,Date date){
  if (partName == null || date == null)   return 0;
  int ret=0;
  String[] fieldsName={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  java.util.List<String> filedsList=java.util.Arrays.asList(fieldsName);
  Calendar c=Calendar.getInstance();
  c.setTime(date);
switch (filedsList.indexOf(partName)) {
case 0:
    ret=c.get(Calendar.YEAR);
  break;
case 1:
ret=c.get(Calendar.MONTH);
break;
case 2:
ret=c.get(Calendar.HOUR);
break;
case 3:
ret=c.get(Calendar.MINUTE);
break;
case 4:
ret=c.get(Calendar.SECOND);
break;
case 5:
ret=c.get(Calendar.DAY_OF_WEEK);
break;
case 6:
ret=c.get(Calendar.DAY_OF_MONTH);
break;
case 7:
ret=c.get(Calendar.DAY_OF_YEAR);
break;
case 8:
ret=c.get(Calendar.WEEK_OF_MONTH);
break;
case 9:
ret=c.get(Calendar.DAY_OF_WEEK_IN_MONTH);
break;
case 10:
ret=c.get(Calendar.WEEK_OF_YEAR);
break;
case 11:
ret=(c.get(Calendar.ZONE_OFFSET)) / (1000 * 60 * 60);
break;
default :
break;
}
return ret;
}","/** 
 * get part of date. like YEAR, MONTH, HOUR, or DAY_OF_WEEK, WEEK_OF_MONTH, WEEK_OF_YEAR, TIMEZONE and so on
 * @param partName which part to get.
 * @param date the date value.
 * @return the specified part value.{talendTypes} Integer {Category} TalendDate {param} string(""DAY_OF_WEEK"") partName : which part to get {param} date(TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) date : the date value {example} getPartOfDate(""DAY_OF_WEEK"", TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) #
 */
public static int getPartOfDate(String partName,Date date){
  if (partName == null || date == null) {
    return 0;
  }
  int ret=0;
  String[] fieldsName={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  java.util.List<String> filedsList=java.util.Arrays.asList(fieldsName);
  Calendar c=Calendar.getInstance();
  c.setTime(date);
switch (filedsList.indexOf(partName)) {
case 0:
    ret=c.get(Calendar.YEAR);
  break;
case 1:
ret=c.get(Calendar.MONTH);
break;
case 2:
ret=c.get(Calendar.HOUR);
break;
case 3:
ret=c.get(Calendar.MINUTE);
break;
case 4:
ret=c.get(Calendar.SECOND);
break;
case 5:
ret=c.get(Calendar.DAY_OF_WEEK);
break;
case 6:
ret=c.get(Calendar.DAY_OF_MONTH);
break;
case 7:
ret=c.get(Calendar.DAY_OF_YEAR);
break;
case 8:
ret=c.get(Calendar.WEEK_OF_MONTH);
break;
case 9:
ret=c.get(Calendar.DAY_OF_WEEK_IN_MONTH);
break;
case 10:
ret=c.get(Calendar.WEEK_OF_YEAR);
break;
case 11:
ret=(c.get(Calendar.ZONE_OFFSET)) / (1000 * 60 * 60);
break;
default :
break;
}
return ret;
}",0.9975918121613486
128769,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList list=new ArrayList();
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      copy.setLabel(((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel()));
      if (copy instanceof XPathQueryMetadataColumnExt) {
        list.add(copy);
      }
    }
  }
  return list;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      if (copy instanceof XPathQueryMetadataColumnExt) {
        list.add(copy);
      }
    }
  }
  return list;
}",0.7292736610418196
128770,"public String getUniqueString(ArrayList list,String columnName){
  int lstSize=list.size();
  String[] labels=new String[lstSize];
  for (int i=0; i < lstSize; i++) {
    labels[i]=list.get(i).toString();
  }
  boolean found=false;
  int indexNewColumn=0;
  String newColumnName=null;
  boolean firstTime=true;
  while (!found) {
    newColumnName=columnName + (firstTime ? ""String_Node_Str"" : (++indexNewColumn));
    firstTime=false;
    boolean allAreDifferent=true;
    for (int j=0; j < labels.length; j++) {
      String label=labels[j];
      if (label.equals(newColumnName)) {
        allAreDifferent=false;
        break;
      }
    }
    if (allAreDifferent) {
      found=true;
    }
  }
  return newColumnName;
}","public String getUniqueString(ArrayList list,String columnName){
  int lstSize=list.size();
  String[] labels=new String[lstSize];
  for (int i=0; i < lstSize; i++) {
    labels[i]=list.get(i).toString();
  }
  boolean found=false;
  int indexNewColumn=0;
  String newColumnName=null;
  boolean firstTime=true;
  while (!found) {
    newColumnName=columnName + (firstTime ? ""String_Node_Str"" : (++indexNewColumn));
    firstTime=false;
    boolean allAreDifferent=true;
    for (    String label : labels) {
      if (label.equals(newColumnName)) {
        allAreDifferent=false;
        break;
      }
    }
    if (allAreDifferent) {
      found=true;
    }
  }
  return newColumnName;
}",0.7128712871287128
128771,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  int indice=1;
  MetadataEmfTableEditor tableEditor=(MetadataEmfTableEditor)extendedTable;
  for (  Object current : copiedObjectsList) {
    if (current instanceof MetadataColumn) {
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(metadataColumn.getLabel());
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
    }
 else     if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=copy.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        metaColumnUnique=true;
        iMetaColumnUnique=false;
        if (list.size() == 0)         iMetaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           iMetaColumnUnique=true;
 else {
            iMetaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(ConvertionHelper.convertToMetaDataColumn(copy),nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  int indice=1;
  MetadataEmfTableEditor tableEditor=(MetadataEmfTableEditor)extendedTable;
  for (  Object current : copiedObjectsList) {
    if (current instanceof MetadataColumn) {
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(metadataColumn.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
    }
 else     if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=copy.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        metaColumnUnique=true;
        iMetaColumnUnique=false;
        if (list.size() == 0) {
          iMetaColumnUnique=true;
        }
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName)) {
            iMetaColumnUnique=true;
          }
 else {
            iMetaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(ConvertionHelper.convertToMetaDataColumn(copy),nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.9272684198057332
128772,"public String getUniqueString(ArrayList list,String columnName){
  int lstSize=list.size();
  String[] labels=new String[lstSize];
  for (int i=0; i < lstSize; i++) {
    labels[i]=list.get(i).toString();
  }
  boolean found=false;
  int indexNewColumn=0;
  String newColumnName=null;
  boolean firstTime=true;
  while (!found) {
    newColumnName=columnName + (firstTime ? ""String_Node_Str"" : (++indexNewColumn));
    firstTime=false;
    boolean allAreDifferent=true;
    for (int j=0; j < labels.length; j++) {
      String label=labels[j];
      if (label.equals(newColumnName)) {
        allAreDifferent=false;
        break;
      }
    }
    if (allAreDifferent) {
      found=true;
    }
  }
  return newColumnName;
}","public String getUniqueString(ArrayList list,String columnName){
  int lstSize=list.size();
  String[] labels=new String[lstSize];
  for (int i=0; i < lstSize; i++) {
    labels[i]=list.get(i).toString();
  }
  boolean found=false;
  int indexNewColumn=0;
  String newColumnName=null;
  boolean firstTime=true;
  while (!found) {
    newColumnName=columnName + (firstTime ? ""String_Node_Str"" : (++indexNewColumn));
    firstTime=false;
    boolean allAreDifferent=true;
    for (    String label : labels) {
      if (label.equals(newColumnName)) {
        allAreDifferent=false;
        break;
      }
    }
    if (allAreDifferent) {
      found=true;
    }
  }
  return newColumnName;
}",0.7128712871287128
128773,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      copy.setLabel(((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel()));
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0) {
          metaColumnUnique=true;
        }
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName)) {
            metaColumnUnique=true;
          }
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.2862852860354734
128774,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != currentNodeType) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(currentNodeType);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    WSDLSchemaWizard wsdlSchemaWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames(),false);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),wsdlSchemaWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames(),false));
  }
  if (!creation) {
    RepositoryManager.refreshSavedNode(repositoryNode);
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != currentNodeType) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(currentNodeType);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    WSDLSchemaWizard wsdlSchemaWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames(),false);
    wsdlSchemaWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),wsdlSchemaWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames(),false));
  }
  if (!creation) {
    RepositoryManager.refreshSavedNode(repositoryNode);
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}",0.9816643159379408
128775,"/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    return FastDateParser.getInstance(pattern).parse(stringDate);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
    char sign=offset >= 0 ? '+' : '-';
    int hour=Math.abs(offset) / 1000 / 60/ 60;
    int min=Math.abs(offset) / 1000 / 60 % 60;
    String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
    TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
    return tstz;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}",0.7583166332665331
128776,"/** 
 * get part of date. like YEAR, MONTH, HOUR, or DAY_OF_WEEK, WEEK_OF_MONTH, WEEK_OF_YEAR, TIMEZONE and so on
 * @param partName which part to get.
 * @param date the date value.
 * @return the specified part value.{talendTypes} Integer {Category} TalendDate {param} string(""DAY_OF_WEEK"") partName : which part to get {param} date(TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) date : the date value {example} getPartOfDate(""DAY_OF_WEEK"", TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) #
 */
public static int getPartOfDate(String partName,Date date){
  if (partName == null || date == null)   return 0;
  int ret=0;
  String[] fieldsName={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  java.util.List<String> filedsList=java.util.Arrays.asList(fieldsName);
  Calendar c=Calendar.getInstance();
  c.setTime(date);
switch (filedsList.indexOf(partName)) {
case 0:
    ret=c.get(Calendar.YEAR);
  break;
case 1:
ret=c.get(Calendar.MONTH);
break;
case 2:
ret=c.get(Calendar.HOUR);
break;
case 3:
ret=c.get(Calendar.MINUTE);
break;
case 4:
ret=c.get(Calendar.SECOND);
break;
case 5:
ret=c.get(Calendar.DAY_OF_WEEK);
break;
case 6:
ret=c.get(Calendar.DAY_OF_MONTH);
break;
case 7:
ret=c.get(Calendar.DAY_OF_YEAR);
break;
case 8:
ret=c.get(Calendar.WEEK_OF_MONTH);
break;
case 9:
ret=c.get(Calendar.DAY_OF_WEEK_IN_MONTH);
break;
case 10:
ret=c.get(Calendar.WEEK_OF_YEAR);
break;
case 11:
ret=(c.get(Calendar.ZONE_OFFSET)) / (1000 * 60 * 60);
break;
default :
break;
}
return ret;
}","/** 
 * get part of date. like YEAR, MONTH, HOUR, or DAY_OF_WEEK, WEEK_OF_MONTH, WEEK_OF_YEAR, TIMEZONE and so on
 * @param partName which part to get.
 * @param date the date value.
 * @return the specified part value.{talendTypes} Integer {Category} TalendDate {param} string(""DAY_OF_WEEK"") partName : which part to get {param} date(TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) date : the date value {example} getPartOfDate(""DAY_OF_WEEK"", TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) #
 */
public static int getPartOfDate(String partName,Date date){
  if (partName == null || date == null) {
    return 0;
  }
  int ret=0;
  String[] fieldsName={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  java.util.List<String> filedsList=java.util.Arrays.asList(fieldsName);
  Calendar c=Calendar.getInstance();
  c.setTime(date);
switch (filedsList.indexOf(partName)) {
case 0:
    ret=c.get(Calendar.YEAR);
  break;
case 1:
ret=c.get(Calendar.MONTH);
break;
case 2:
ret=c.get(Calendar.HOUR);
break;
case 3:
ret=c.get(Calendar.MINUTE);
break;
case 4:
ret=c.get(Calendar.SECOND);
break;
case 5:
ret=c.get(Calendar.DAY_OF_WEEK);
break;
case 6:
ret=c.get(Calendar.DAY_OF_MONTH);
break;
case 7:
ret=c.get(Calendar.DAY_OF_YEAR);
break;
case 8:
ret=c.get(Calendar.WEEK_OF_MONTH);
break;
case 9:
ret=c.get(Calendar.DAY_OF_WEEK_IN_MONTH);
break;
case 10:
ret=c.get(Calendar.WEEK_OF_YEAR);
break;
case 11:
ret=(c.get(Calendar.ZONE_OFFSET)) / (1000 * 60 * 60);
break;
default :
break;
}
return ret;
}",0.9975918121613486
128777,"/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(value)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(value)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}",0.9853296193129062
128778,"/** 
 * DOC wzhang Comment method ""setDatabaseType"".
 * @param connection
 * @param node
 */
private static void setDatabaseType(DatabaseConnection connection,INode node){
  IElementParameter parameter=node.getElementParameter(""String_Node_Str"");
  if (parameter == null) {
    IElementParameter para=node.getElementParameter(""String_Node_Str"");
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GREENPLUM.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GREENPLUM.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GREENPLUM.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.PLUSPSQL.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
      connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GENERAL_JDBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GENERAL_JDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GENERAL_JDBC.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.MYSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MYSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MYSQL.getProduct());
  }
 else   if (EDatabaseTypeName.MSSQL.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MSSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MSSQL.getProduct());
  }
 else   if (EDatabaseTypeName.EXASOL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.EXASOL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.EXASOL.getProduct());
  }
 else   if (EDatabaseTypeName.PSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PSQL.getProduct());
  }
 else   if (EDatabaseTypeName.PLUSPSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
  }
 else   if (EDatabaseTypeName.IBMDB2.getProduct().equalsIgnoreCase(((String)parameter.getValue()).replace(' ','_'))) {
    connection.setDatabaseType(EDatabaseTypeName.IBMDB2.getDisplayName());
    connection.setProductId(EDatabaseTypeName.IBMDB2.getProduct());
  }
 else   if (EDatabaseTypeName.INGRES.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INGRES.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INGRES.getProduct());
  }
 else   if (EDatabaseTypeName.INTERBASE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INTERBASE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INTERBASE.getProduct());
  }
 else   if (EDatabaseTypeName.SQLITE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.SQLITE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.SQLITE.getProduct());
  }
 else   if (EDatabaseTypeName.FIREBIRD.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.FIREBIRD.getDisplayName());
    connection.setProductId(EDatabaseTypeName.FIREBIRD.getProduct());
  }
 else   if (EDatabaseTypeName.INFORMIX.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INFORMIX.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INFORMIX.getProduct());
  }
 else   if (EDatabaseTypeName.ACCESS.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.ACCESS.getDisplayName());
    connection.setProductId(EDatabaseTypeName.ACCESS.getProduct());
  }
 else   if (EDatabaseTypeName.TERADATA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.TERADATA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.TERADATA.getProduct());
  }
 else   if (EDatabaseTypeName.AS400.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.AS400.getDisplayName());
    connection.setProductId(EDatabaseTypeName.AS400.getProduct());
  }
 else   if (EDatabaseTypeName.MAXDB.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MAXDB.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MAXDB.getProduct());
  }
 else   if (EDatabaseTypeName.PARACCEL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PARACCEL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PARACCEL.getProduct());
  }
 else   if (EDatabaseTypeName.NETEZZA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.NETEZZA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.NETEZZA.getProduct());
  }
 else   if (((String)parameter.getValue()).toLowerCase().startsWith(EDatabaseTypeName.SYBASEASE.getProduct().toLowerCase())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.SYBASEASE.getDisplayName());
      connection.setProductId(EDatabaseTypeName.SYBASEASE.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.ORACLEFORSID.getProduct().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLEFORSID.getXmlName().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLESN.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_OCI.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_RAC.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLESN.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLEFORSID.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLE_RAC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.HSQLDB_SERVER.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_SERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_WEBSERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.JAVADB_EMBEDED.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_EMBEDED.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_JCCJDBC.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_DERBYCLIENT.getProduct());
    }
    return;
  }
 else   if (node.getComponent().getName().startsWith(""String_Node_Str"") || node.getComponent().getName().startsWith(""String_Node_Str"")) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (parameter.getRepositoryValue().endsWith(EDatabaseTypeName.GODBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GODBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GODBC.getProduct());
    }
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseType"".
 * @param connection
 * @param node
 */
private static void setDatabaseType(DatabaseConnection connection,INode node){
  IElementParameter parameter=node.getElementParameter(""String_Node_Str"");
  if (parameter == null) {
    IElementParameter para=node.getElementParameter(""String_Node_Str"");
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GREENPLUM.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GREENPLUM.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GREENPLUM.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.PLUSPSQL.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
      connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GENERAL_JDBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GENERAL_JDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GENERAL_JDBC.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.VERTICA.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.VERTICA.getDisplayName());
      connection.setProductId(EDatabaseTypeName.VERTICA.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.MYSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MYSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MYSQL.getProduct());
  }
 else   if (EDatabaseTypeName.MSSQL.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MSSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MSSQL.getProduct());
  }
 else   if (EDatabaseTypeName.EXASOL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.EXASOL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.EXASOL.getProduct());
  }
 else   if (EDatabaseTypeName.PSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PSQL.getProduct());
  }
 else   if (EDatabaseTypeName.PLUSPSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
  }
 else   if (EDatabaseTypeName.IBMDB2.getProduct().equalsIgnoreCase(((String)parameter.getValue()).replace(' ','_'))) {
    connection.setDatabaseType(EDatabaseTypeName.IBMDB2.getDisplayName());
    connection.setProductId(EDatabaseTypeName.IBMDB2.getProduct());
  }
 else   if (EDatabaseTypeName.INGRES.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INGRES.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INGRES.getProduct());
  }
 else   if (EDatabaseTypeName.INTERBASE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INTERBASE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INTERBASE.getProduct());
  }
 else   if (EDatabaseTypeName.SQLITE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.SQLITE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.SQLITE.getProduct());
  }
 else   if (EDatabaseTypeName.FIREBIRD.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.FIREBIRD.getDisplayName());
    connection.setProductId(EDatabaseTypeName.FIREBIRD.getProduct());
  }
 else   if (EDatabaseTypeName.INFORMIX.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INFORMIX.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INFORMIX.getProduct());
  }
 else   if (EDatabaseTypeName.ACCESS.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.ACCESS.getDisplayName());
    connection.setProductId(EDatabaseTypeName.ACCESS.getProduct());
  }
 else   if (EDatabaseTypeName.TERADATA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.TERADATA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.TERADATA.getProduct());
  }
 else   if (EDatabaseTypeName.AS400.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.AS400.getDisplayName());
    connection.setProductId(EDatabaseTypeName.AS400.getProduct());
  }
 else   if (EDatabaseTypeName.VERTICA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.VERTICA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.VERTICA.getProduct());
  }
 else   if (EDatabaseTypeName.MAXDB.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MAXDB.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MAXDB.getProduct());
  }
 else   if (EDatabaseTypeName.PARACCEL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PARACCEL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PARACCEL.getProduct());
  }
 else   if (EDatabaseTypeName.NETEZZA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.NETEZZA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.NETEZZA.getProduct());
  }
 else   if (((String)parameter.getValue()).toLowerCase().startsWith(EDatabaseTypeName.SYBASEASE.getProduct().toLowerCase())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.SYBASEASE.getDisplayName());
      connection.setProductId(EDatabaseTypeName.SYBASEASE.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.ORACLEFORSID.getProduct().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLEFORSID.getXmlName().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLESN.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_OCI.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_RAC.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLESN.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLEFORSID.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLE_RAC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.HSQLDB_SERVER.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_SERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_WEBSERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.JAVADB_EMBEDED.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_EMBEDED.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_JCCJDBC.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_DERBYCLIENT.getProduct());
    }
    return;
  }
 else   if (node.getComponent().getName().startsWith(""String_Node_Str"") || node.getComponent().getName().startsWith(""String_Node_Str"")) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (parameter.getRepositoryValue().endsWith(EDatabaseTypeName.GODBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GODBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GODBC.getProduct());
    }
  }
}",0.9743910707766128
128779,"@Override protected void run() throws LoginException, PersistenceException {
  try {
    Item newItem=factory.copy(item,path,true);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.0283486888731396
128780,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        Item newItem=factory.copy(item,path,true);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem);
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.7308488612836439
128781,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList list=new ArrayList();
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      copy.setLabel(((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel()));
      if (copy instanceof XPathQueryMetadataColumnExt) {
        list.add(copy);
      }
    }
  }
  return list;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      if (copy instanceof XPathQueryMetadataColumnExt) {
        list.add(copy);
      }
    }
  }
  return list;
}",0.7292736610418196
128782,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  int indice=1;
  MetadataEmfTableEditor tableEditor=(MetadataEmfTableEditor)extendedTable;
  for (  Object current : copiedObjectsList) {
    if (current instanceof MetadataColumn) {
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(metadataColumn.getLabel());
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
    }
 else     if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=copy.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        metaColumnUnique=true;
        iMetaColumnUnique=false;
        if (list.size() == 0)         iMetaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           iMetaColumnUnique=true;
 else {
            iMetaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(ConvertionHelper.convertToMetaDataColumn(copy),nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  int indice=1;
  MetadataEmfTableEditor tableEditor=(MetadataEmfTableEditor)extendedTable;
  for (  Object current : copiedObjectsList) {
    if (current instanceof MetadataColumn) {
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(metadataColumn.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
    }
 else     if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=copy.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        metaColumnUnique=true;
        iMetaColumnUnique=false;
        if (list.size() == 0)         iMetaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           iMetaColumnUnique=true;
 else {
            iMetaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(ConvertionHelper.convertToMetaDataColumn(copy),nextGeneratedColumnName);
      newColumnCopy.setLabel(nextGeneratedColumnName);
      addItemList.add(newColumnCopy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.9339059890240992
128783,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      copy.setLabel(((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel()));
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.2889504153032972
128784,"/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.handleString(HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment()))));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}","/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment())));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}",0.9373835793093568
128785,"protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<URI>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}","protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<String>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}",0.998089577584377
128786,"public void logOnProject(Project project) throws LoginException, PersistenceException {
  setLoggedOnProject(false);
  IStatusPreferenceInitService statusPreferenceInitService=CoreRuntimePlugin.getInstance().getStatusPreferenceInitService();
  if (statusPreferenceInitService != null) {
    statusPreferenceInitService.initStatusPreference();
  }
  String productVersion=VersionUtils.getVersion();
  IBrandingService brandingService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
    brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  }
  if (brandingService != null) {
    String version=brandingService.getFullProductName() + ""String_Node_Str"" + productVersion;
    if (!version.equals(project.getEmfProject().getProductVersion())) {
      project.getEmfProject().setProductVersion(version);
      project.getEmfProject().getFolders().clear();
    }
  }
  setLoggedOnProject(true);
}","@Override public void logOnProject(Project project) throws LoginException, PersistenceException {
  setLoggedOnProject(false);
  IStatusPreferenceInitService statusPreferenceInitService=CoreRuntimePlugin.getInstance().getStatusPreferenceInitService();
  if (statusPreferenceInitService != null) {
    statusPreferenceInitService.initStatusPreference();
  }
  String productVersion=VersionUtils.getVersion();
  IBrandingService brandingService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
    brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  }
  if (brandingService != null) {
    String version=brandingService.getFullProductName() + ""String_Node_Str"" + productVersion;
    if (!version.equals(project.getEmfProject().getProductVersion())) {
      project.getEmfProject().setProductVersion(version);
      project.getEmfProject().getFolders().clear();
    }
  }
  setLoggedOnProject(true);
}",0.9949647532729105
128787,"private void getAllVersions(Project project,Property property,List<IRepositoryViewObject> allVersion) throws PersistenceException {
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(property.getItem());
  Object fullFolder=getFullFolder(project,itemType,property.getItem().getState().getPath());
  if (fullFolder != null) {
    allVersion.addAll(getSerializableFromFolder(project,fullFolder,property.getId(),itemType,true,false,false,true));
    if (allVersion.size() == 0) {
      allVersion.addAll(getAllVersion(project,property.getId(),false));
    }
  }
 else {
    allVersion.addAll(getAllVersion(project,property.getId(),false));
  }
  if (allVersion.size() == 0 && project.getEmfProject().getReferencedProjects().size() > 0) {
    String parentBranch=getRepositoryContext().getFields().get(IProxyRepositoryFactory.BRANCH_SELECTION + ""String_Node_Str"" + project.getTechnicalLabel());
    for (    ProjectReference refProject : (List<ProjectReference>)(List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
      if (refProject.getBranch() != null && !parentBranch.equals(refProject.getBranch())) {
        continue;
      }
      org.talend.core.model.properties.Project emfProject=refProject.getReferencedProject();
      getAllVersions(new Project(emfProject),property,allVersion);
      if (allVersion.size() > 0) {
        break;
      }
    }
  }
  if (allVersion.size() == 0) {
    allVersion.add(new RepositoryViewObject(property));
  }
}","private void getAllVersions(Project project,Property property,List<IRepositoryViewObject> allVersion) throws PersistenceException {
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(property.getItem());
  Object fullFolder=getFullFolder(project,itemType,property.getItem().getState().getPath());
  if (fullFolder != null) {
    allVersion.addAll(getSerializableFromFolder(project,fullFolder,property.getId(),itemType,true,false,false,true));
    if (allVersion.size() == 0) {
      allVersion.addAll(getAllVersion(project,property.getId(),false));
    }
  }
 else {
    allVersion.addAll(getAllVersion(project,property.getId(),false));
  }
  if (allVersion.size() == 0 && project.getEmfProject().getReferencedProjects().size() > 0) {
    String parentBranch=getRepositoryContext().getFields().get(IProxyRepositoryFactory.BRANCH_SELECTION + ""String_Node_Str"" + project.getTechnicalLabel());
    for (    ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
      if (refProject.getBranch() != null && !parentBranch.equals(refProject.getBranch())) {
        continue;
      }
      org.talend.core.model.properties.Project emfProject=refProject.getReferencedProject();
      getAllVersions(new Project(emfProject),property,allVersion);
      if (allVersion.size() > 0) {
        break;
      }
    }
  }
  if (allVersion.size() == 0) {
    allVersion.add(new RepositoryViewObject(property));
  }
}",0.991869918699187
128788,"public LockInfo getLockInfo(Item item){
  if (item.getState().isLocked()) {
    return new LockInfo(item.getState().getLocker().getLogin(),""String_Node_Str"",item.getState().getLockDate());
  }
  return new LockInfo(""String_Node_Str"",""String_Node_Str"",null);
}","@Override public LockInfo getLockInfo(Item item){
  if (item.getState().isLocked()) {
    return new LockInfo(item.getState().getLocker().getLogin(),""String_Node_Str"",item.getState().getLockDate());
  }
  return new LockInfo(""String_Node_Str"",""String_Node_Str"",null);
}",0.981060606060606
128789,"public List<IRepositoryViewObject> getAllVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  if (fullFolder != null) {
    serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,true,false,false,true);
    if (serializableAllVersion.isEmpty()) {
      serializableAllVersion=getSerializable(project,id,true,false);
    }
    return convert(serializableAllVersion);
  }
  serializableAllVersion=new ArrayList<IRepositoryViewObject>();
  return serializableAllVersion;
}","@Override public List<IRepositoryViewObject> getAllVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  if (fullFolder != null) {
    serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,true,false,false,true);
    if (serializableAllVersion.isEmpty()) {
      serializableAllVersion=getSerializable(project,id,true,false);
    }
    return convert(serializableAllVersion);
  }
  serializableAllVersion=new ArrayList<IRepositoryViewObject>();
  return serializableAllVersion;
}",0.9926578560939796
128790,"/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<URI> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      URI jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(new Path(jar.getPath()).lastSegment());
        type.setUrlPath(jar.getPath());
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}","/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<String> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      String jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(jar);
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}",0.9723889555822328
128791,"public boolean canLock(Item item) throws PersistenceException {
  return true;
}","@Override public boolean canLock(Item item) throws PersistenceException {
  return true;
}",0.9411764705882352
128792,"public RootContainer<String,IRepositoryViewObject> getRoutineFromProject(Project project) throws PersistenceException {
  RootContainer<String,IRepositoryViewObject> toReturn=new RootContainer<String,IRepositoryViewObject>();
  ERepositoryObjectType type=ERepositoryObjectType.ROUTINES;
  IProject fsProject=ResourceModelUtils.getProject(project);
  IFolder objectFolder=ResourceUtils.getFolder(fsProject,ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES),true);
  addFolderMembers(project,type,toReturn,objectFolder,true);
  saveProject(project);
  return toReturn;
}","@Override public RootContainer<String,IRepositoryViewObject> getRoutineFromProject(Project project) throws PersistenceException {
  RootContainer<String,IRepositoryViewObject> toReturn=new RootContainer<String,IRepositoryViewObject>();
  ERepositoryObjectType type=ERepositoryObjectType.ROUTINES;
  IProject fsProject=ResourceModelUtils.getProject(project);
  IFolder objectFolder=ResourceUtils.getFolder(fsProject,ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES),true);
  addFolderMembers(project,type,toReturn,objectFolder,true);
  saveProject(project);
  return toReturn;
}",0.9915254237288136
128793,"public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=""String_Node_Str"";
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=""String_Node_Str"";
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}",0.9960063897763578
128794,"public List<ModuleNeeded> getModulesNeededForJobs() throws PersistenceException {
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  IProxyRepositoryFactory repositoryFactory=CoreRuntimePlugin.getInstance().getRepositoryService().getProxyRepositoryFactory();
  List<IRepositoryViewObject> jobs=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true);
  for (  IRepositoryViewObject cur : jobs) {
    if (!cur.isDeleted()) {
      ProcessItem item=(ProcessItem)cur.getProperty().getItem();
      if (item == null || item.getProcess() == null) {
        continue;
      }
      List<NodeType> nodes=item.getProcess().getNode();
      for (      NodeType node : nodes) {
        List<ElementParameterType> elementParameter=node.getElementParameter();
        for (        ElementParameterType elementParam : elementParameter) {
          if (elementParam.getField() != null && elementParam.getField().equals(EParameterFieldType.MODULE_LIST.getName())) {
            String uniquename=coreSerivce.getParameterUNIQUENAME(node);
            ModuleNeeded toAdd=new ModuleNeeded(Messages.getString(""String_Node_Str"") + item.getProperty().getLabel(),elementParam.getValue(),Messages.getString(""String_Node_Str"") + uniquename + ""String_Node_Str"",true);
            importNeedsList.add(toAdd);
          }
        }
      }
    }
  }
  return importNeedsList;
}","@Override public List<ModuleNeeded> getModulesNeededForJobs() throws PersistenceException {
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  IProxyRepositoryFactory repositoryFactory=CoreRuntimePlugin.getInstance().getRepositoryService().getProxyRepositoryFactory();
  List<IRepositoryViewObject> jobs=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true);
  for (  IRepositoryViewObject cur : jobs) {
    if (!cur.isDeleted()) {
      ProcessItem item=(ProcessItem)cur.getProperty().getItem();
      if (item == null || item.getProcess() == null) {
        continue;
      }
      List<NodeType> nodes=item.getProcess().getNode();
      for (      NodeType node : nodes) {
        List<ElementParameterType> elementParameter=node.getElementParameter();
        for (        ElementParameterType elementParam : elementParameter) {
          if (elementParam.getField() != null && elementParam.getField().equals(EParameterFieldType.MODULE_LIST.getName())) {
            String uniquename=coreSerivce.getParameterUNIQUENAME(node);
            ModuleNeeded toAdd=new ModuleNeeded(Messages.getString(""String_Node_Str"") + item.getProperty().getLabel(),elementParam.getValue(),Messages.getString(""String_Node_Str"") + uniquename + ""String_Node_Str"",true);
            importNeedsList.add(toAdd);
          }
        }
      }
    }
  }
  return importNeedsList;
}",0.9963741841914432
128795,"public RootContainer<String,IRepositoryViewObject> getMetadata(Project project,ERepositoryObjectType type,boolean... options) throws PersistenceException {
  return getObjectFromFolder(project,type,true,options);
}","@Override public RootContainer<String,IRepositoryViewObject> getMetadata(Project project,ERepositoryObjectType type,boolean... options) throws PersistenceException {
  return getObjectFromFolder(project,type,true,options);
}",0.9771689497716894
128796,"public Property getUptodateProperty(Project project,Property property) throws PersistenceException {
  List<IRepositoryViewObject> allVersion=new ArrayList<IRepositoryViewObject>();
  getAllVersions(project,property,allVersion);
  for (  IRepositoryViewObject repositoryObject : allVersion) {
    Property uptodateProperty=repositoryObject.getProperty();
    if (uptodateProperty.getVersion().equals(property.getVersion())) {
      return uptodateProperty;
    }
  }
  return null;
}","@Override public Property getUptodateProperty(Project project,Property property) throws PersistenceException {
  List<IRepositoryViewObject> allVersion=new ArrayList<IRepositoryViewObject>();
  getAllVersions(project,property,allVersion);
  for (  IRepositoryViewObject repositoryObject : allVersion) {
    Property uptodateProperty=repositoryObject.getProperty();
    if (uptodateProperty.getVersion().equals(property.getVersion())) {
      return uptodateProperty;
    }
  }
  return null;
}",0.9897540983606558
128797,"public List<IRepositoryViewObject> getRecycleBinItems(Project project,boolean... options) throws PersistenceException {
  ERepositoryObjectType types[]={ERepositoryObjectType.DOCUMENTATION,ERepositoryObjectType.METADATA_CONNECTIONS,ERepositoryObjectType.METADATA_SAPCONNECTIONS,ERepositoryObjectType.SQLPATTERNS,ERepositoryObjectType.METADATA_FILE_DELIMITED,ERepositoryObjectType.METADATA_FILE_POSITIONAL,ERepositoryObjectType.PROCESS,ERepositoryObjectType.CONTEXT,ERepositoryObjectType.SNIPPETS,ERepositoryObjectType.ROUTINES,ERepositoryObjectType.BUSINESS_PROCESS,ERepositoryObjectType.METADATA_FILE_REGEXP,ERepositoryObjectType.METADATA_FILE_XML,ERepositoryObjectType.METADATA_FILE_LDIF,ERepositoryObjectType.METADATA_FILE_EXCEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA,ERepositoryObjectType.METADATA_GENERIC_SCHEMA,ERepositoryObjectType.METADATA_WSDL_SCHEMA,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA,ERepositoryObjectType.JOBLET,ERepositoryObjectType.METADATA_FILE_EBCDIC,ERepositoryObjectType.METADATA_FILE_RULES,ERepositoryObjectType.METADATA_FILE_HL7,ERepositoryObjectType.METADATA_FILE_FTP,ERepositoryObjectType.METADATA_FILE_BRMS,ERepositoryObjectType.METADATA_MDMCONNECTION,ERepositoryObjectType.METADATA_HEADER_FOOTER,ERepositoryObjectType.JOB_SCRIPT};
  List<IRepositoryViewObject> deletedItems=new ArrayList<IRepositoryViewObject>();
  for (int i=0; i < types.length; i++) {
    RootContainer<String,IRepositoryViewObject> container=getObjectFromFolder(project,types[i],true,options);
    List<IRepositoryViewObject> repositoryObjects=container.getAbsoluteMembers().objects();
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.isDeleted()) {
        deletedItems.add(object);
      }
    }
  }
  return deletedItems;
}","@Override public List<IRepositoryViewObject> getRecycleBinItems(Project project,boolean... options) throws PersistenceException {
  ERepositoryObjectType types[]={ERepositoryObjectType.DOCUMENTATION,ERepositoryObjectType.METADATA_CONNECTIONS,ERepositoryObjectType.METADATA_SAPCONNECTIONS,ERepositoryObjectType.SQLPATTERNS,ERepositoryObjectType.METADATA_FILE_DELIMITED,ERepositoryObjectType.METADATA_FILE_POSITIONAL,ERepositoryObjectType.PROCESS,ERepositoryObjectType.CONTEXT,ERepositoryObjectType.SNIPPETS,ERepositoryObjectType.ROUTINES,ERepositoryObjectType.BUSINESS_PROCESS,ERepositoryObjectType.METADATA_FILE_REGEXP,ERepositoryObjectType.METADATA_FILE_XML,ERepositoryObjectType.METADATA_FILE_LDIF,ERepositoryObjectType.METADATA_FILE_EXCEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA,ERepositoryObjectType.METADATA_GENERIC_SCHEMA,ERepositoryObjectType.METADATA_WSDL_SCHEMA,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA,ERepositoryObjectType.JOBLET,ERepositoryObjectType.METADATA_FILE_EBCDIC,ERepositoryObjectType.METADATA_FILE_RULES,ERepositoryObjectType.METADATA_FILE_HL7,ERepositoryObjectType.METADATA_FILE_FTP,ERepositoryObjectType.METADATA_FILE_BRMS,ERepositoryObjectType.METADATA_MDMCONNECTION,ERepositoryObjectType.METADATA_HEADER_FOOTER,ERepositoryObjectType.JOB_SCRIPT};
  List<IRepositoryViewObject> deletedItems=new ArrayList<IRepositoryViewObject>();
  for (  ERepositoryObjectType type : types) {
    RootContainer<String,IRepositoryViewObject> container=getObjectFromFolder(project,type,true,options);
    List<IRepositoryViewObject> repositoryObjects=container.getAbsoluteMembers().objects();
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.isDeleted()) {
        deletedItems.add(object);
      }
    }
  }
  return deletedItems;
}",0.9645669291338582
128798,"/** 
 * DOC zshen Comment method ""getMetadataByFolder"".
 * @param itemType
 * @param path
 * @return all of object under path.
 */
public List<IRepositoryViewObject> getMetadataByFolder(Project project,ERepositoryObjectType itemType,IPath path){
  return getMetadatasByFolder(project,itemType,path);
}","/** 
 * DOC zshen Comment method ""getMetadataByFolder"".
 * @param itemType
 * @param path
 * @return all of object under path.
 */
@Override public List<IRepositoryViewObject> getMetadataByFolder(Project project,ERepositoryObjectType itemType,IPath path){
  return getMetadatasByFolder(project,itemType,path);
}",0.9836601307189542
128799,"public void reloadProject(Project project) throws PersistenceException {
}","@Override public void reloadProject(Project project) throws PersistenceException {
}",0.9367088607594936
128800,"public IRepositoryViewObject getLastVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,false,false,false,true);
  if (serializableAllVersion.isEmpty()) {
    serializableAllVersion=getSerializable(project,id,true,false);
  }
  int size=serializableAllVersion.size();
  if (size > 1) {
    String message=getItemsMessages(serializableAllVersion,size);
    throw new PersistenceException(Messages.getString(""String_Node_Str"",message));
  }
 else   if (size == 1) {
    return serializableAllVersion.get(0);
  }
 else {
    return null;
  }
}","@Override public IRepositoryViewObject getLastVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,false,false,false,true);
  if (serializableAllVersion.isEmpty()) {
    serializableAllVersion=getSerializable(project,id,true,false);
  }
  int size=serializableAllVersion.size();
  if (size > 1) {
    String message=getItemsMessages(serializableAllVersion,size);
    throw new PersistenceException(Messages.getString(""String_Node_Str"",message));
  }
 else   if (size == 1) {
    return serializableAllVersion.get(0);
  }
 else {
    return null;
  }
}",0.9938118811881188
128801,"public FolderItem getFolderItem(Project project,ERepositoryObjectType itemType,IPath path){
  return getFolderHelper(project.getEmfProject()).getFolder(ERepositoryObjectType.getFolderName(itemType) + IPath.SEPARATOR + path);
}","@Override public FolderItem getFolderItem(Project project,ERepositoryObjectType itemType,IPath path){
  return getFolderHelper(project.getEmfProject()).getFolder(ERepositoryObjectType.getFolderName(itemType) + IPath.SEPARATOR + path);
}",0.9783549783549784
128802,"public boolean canUnlock(Item item) throws PersistenceException {
  return true;
}","@Override public boolean canUnlock(Item item) throws PersistenceException {
  return true;
}",0.942528735632184
128803,"public RootContainer<String,IRepositoryViewObject> getTdqRepositoryViewObjects(Project project,ERepositoryObjectType type,String folderName,boolean[] options) throws PersistenceException {
  return getObjectFromFolder(project,type,folderName,true,options);
}","@Override public RootContainer<String,IRepositoryViewObject> getTdqRepositoryViewObjects(Project project,ERepositoryObjectType type,String folderName,boolean[] options) throws PersistenceException {
  return getObjectFromFolder(project,type,folderName,true,options);
}",0.9809885931558936
128804,"public RootContainer<String,IRepositoryViewObject> getRootContainerFromType(Project project,ERepositoryObjectType type){
  if (project == null || type == null) {
    return null;
  }
  try {
    return getObjectFromFolder(project,type,true);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","@Override public RootContainer<String,IRepositoryViewObject> getRootContainerFromType(Project project,ERepositoryObjectType type){
  if (project == null || type == null) {
    return null;
  }
  try {
    return getObjectFromFolder(project,type,true);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9852941176470588
128805,"private Object getFullFolder(Project project,ERepositoryObjectType itemType,String path) throws PersistenceException {
  Object folder=getFolder(project,itemType);
  if (folder == null) {
    return null;
  }
  Object fullFolder;
  if (folder instanceof IFolder) {
    fullFolder=(IFolder)getFolder(project,itemType);
    if (path != null && !""String_Node_Str"".equals(path)) {
      fullFolder=((IFolder)fullFolder).getFolder(new Path(path));
    }
  }
 else {
    if (path != null && !""String_Node_Str"".equals(path)) {
      if (folder == null) {
        fullFolder=ResourceModelUtils.getProject(project).getFolder(new Path(path));
      }
 else {
        fullFolder=this.getFolderHelper(project.getEmfProject()).getFolder(((FolderItem)folder).getProperty().getLabel() + ""String_Node_Str"" + path);
      }
    }
 else {
      fullFolder=folder;
    }
  }
  return fullFolder;
}","private Object getFullFolder(Project project,ERepositoryObjectType itemType,String path) throws PersistenceException {
  Object folder=getFolder(project,itemType);
  if (folder == null) {
    return null;
  }
  Object fullFolder;
  if (folder instanceof IFolder) {
    fullFolder=getFolder(project,itemType);
    if (path != null && !""String_Node_Str"".equals(path)) {
      fullFolder=((IFolder)fullFolder).getFolder(new Path(path));
    }
  }
 else {
    if (path != null && !""String_Node_Str"".equals(path)) {
      if (folder == null) {
        fullFolder=ResourceModelUtils.getProject(project).getFolder(new Path(path));
      }
 else {
        fullFolder=this.getFolderHelper(project.getEmfProject()).getFolder(((FolderItem)folder).getProperty().getLabel() + ""String_Node_Str"" + path);
      }
    }
 else {
      fullFolder=folder;
    }
  }
  return fullFolder;
}",0.994848311390956
128806,"public Map<String,List<URI>> getRoutineAndJars();","public Map<String,List<String>> getRoutineAndJars();",0.9108910891089108
128807,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
            IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            IRepositoryViewObject object=node.getObject();
            if (coreService != null && object != null && object.getProperty() != null) {
              Item item=object.getProperty().getItem();
              IProcess iProcess=coreService.getProcessFromItem(item);
              if (iProcess != null && iProcess instanceof IProcess2) {
                IProcess2 process=(IProcess2)iProcess;
                process.removeProblems4ProcessDeleted();
              }
            }
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9247462751025696
128808,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
      Item item=objToDelete.getProperty().getItem();
      IProcess iProcess=coreService.getProcessFromItem(item);
      if (iProcess != null && iProcess instanceof IProcess2) {
        IProcess2 process=(IProcess2)iProcess;
        process.removeProblems4ProcessDeleted();
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}","private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
        Item item=objToDelete.getProperty().getItem();
        IProcess iProcess=coreService.getProcessFromItem(item);
        if (iProcess != null && iProcess instanceof IProcess2) {
          IProcess2 process=(IProcess2)iProcess;
          process.removeProblems4ProcessDeleted();
        }
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}",0.9733333333333334
128809,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.992524296037877
128810,"public static byte[] saveImageToData(Image img){
  if (img != null) {
    ByteArrayOutputStream baos=null;
    try {
      baos=new ByteArrayOutputStream();
      BufferedOutputStream stream=new BufferedOutputStream(baos,8192);
      ImageLoader imageLoader=new ImageLoader();
      imageLoader.data=new ImageData[]{img.getImageData()};
      imageLoader.save(stream,SWT.IMAGE_PNG);
      stream.flush();
      byte[] imageByteArray=baos.toByteArray();
      return imageByteArray;
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
          if (img != null && !img.isDisposed())           img.dispose();
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return null;
}","public static byte[] saveImageToData(Image img){
  if (img != null) {
    ByteArrayOutputStream baos=null;
    try {
      baos=new ByteArrayOutputStream();
      BufferedOutputStream stream=new BufferedOutputStream(baos,8192);
      ImageLoader imageLoader=new ImageLoader();
      imageLoader.data=new ImageData[]{img.getImageData()};
      imageLoader.save(stream,SWT.IMAGE_PNG);
      stream.flush();
      byte[] imageByteArray=baos.toByteArray();
      return imageByteArray;
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (baos != null) {
        try {
          baos.close();
          if (img != null && !img.isDisposed()) {
            img.dispose();
          }
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return null;
}",0.9618138424821002
128811,"/** 
 * ggu Comment method ""AdjustSize"". do the better size of image, when scale.
 */
public static Point AdjustSize(final Point originalSize,final Point requiredSize){
  Point newSize=new Point(originalSize.x,originalSize.y);
  if (originalSize.x <= requiredSize.x && originalSize.y <= requiredSize.y) {
    newSize.x=originalSize.x;
    newSize.y=originalSize.y;
  }
 else {
    float w=originalSize.x / (float)requiredSize.x;
    float h=originalSize.y / (float)requiredSize.y;
    if (w > h) {
      newSize.x=requiredSize.x;
      newSize.y=(int)(w >= 1 ? Math.round(originalSize.y / w) : Math.round(originalSize.y * w));
    }
 else     if (w < h) {
      newSize.x=(int)(h >= 1 ? Math.round(originalSize.x / h) : Math.round(originalSize.x * h));
      newSize.y=requiredSize.y;
    }
 else {
      newSize.x=requiredSize.x;
      newSize.y=requiredSize.y;
    }
  }
  return newSize;
}","/** 
 * ggu Comment method ""AdjustSize"". do the better size of image, when scale.
 */
public static Point AdjustSize(final Point originalSize,final Point requiredSize){
  Point newSize=new Point(originalSize.x,originalSize.y);
  if (originalSize.x <= requiredSize.x && originalSize.y <= requiredSize.y) {
    newSize.x=originalSize.x;
    newSize.y=originalSize.y;
  }
 else {
    float w=originalSize.x / (float)requiredSize.x;
    float h=originalSize.y / (float)requiredSize.y;
    if (w > h) {
      newSize.x=requiredSize.x;
      newSize.y=(w >= 1 ? Math.round(originalSize.y / w) : Math.round(originalSize.y * w));
    }
 else     if (w < h) {
      newSize.x=(h >= 1 ? Math.round(originalSize.x / h) : Math.round(originalSize.x * h));
      newSize.y=requiredSize.y;
    }
 else {
      newSize.x=requiredSize.x;
      newSize.y=requiredSize.y;
    }
  }
  return newSize;
}",0.9943630214205186
128812,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest) && !(resourceProperty.getItem() instanceof JobletProcessItem)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
 else     if (resourceProperty.getItem() instanceof JobletProcessItem && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      saveResource(resource);
      return;
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.9659580380714188
128813,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128814,"public void setContentProvider(IContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}","public void setContentProvider(IStructuredContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}",0.9802371541501976
128815,"/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged && !(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}","/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged && !isLazyLoad()) {
    refreshTableEditorControls();
  }
}",0.9812981298129811
128816,"/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  if (lazyLoad) {
    style|=SWT.VIRTUAL;
  }
  return style;
}","/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  if (isLazyLoad()) {
    style|=SWT.VIRTUAL;
  }
  return style;
}",0.9949238578680204
128817,"public void setLazyLoad(boolean lazyLoad){
  this.lazyLoad=lazyLoad;
  setContentProvider(new LazyContentProvider(this));
}","public void setLazyLoad(boolean lazyLoad){
  this.lazyLoad=lazyLoad;
}",0.7253886010362695
128818,"@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorColumn(index);
  if (!(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}","@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorControls();
}",0.7072463768115942
128819,"/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
      refreshTableEditorControls();
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorColumn(index);
      if (!(contentProvider instanceof ILazyContentProvider)) {
        refreshTableEditorControls();
      }
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void inputChanged(    Object input,    Object oldInput){
      if (input instanceof List && contentProvider instanceof ILazyContentProvider) {
        int newSize=((List)input).size();
        int oldSize=0;
        if (oldInput instanceof List) {
          oldSize=((List)oldInput).size();
        }
        if (newSize != oldSize) {
          tableViewer.setItemCount(newSize);
        }
      }
      super.inputChanged(input,oldInput);
    }
  }
;
  setTablePreferences();
  return table;
}","/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void hookControl(    Control control){
      super.hookControl(control);
      table.addListener(SWT.SetData,new Listener(){
        @Override public void handleEvent(        Event event){
          TableItem item=(TableItem)event.item;
          int index=table.indexOf(item);
          if (index == -1) {
            return;
          }
          B element=getInputList().get(index);
          associate(element,item);
          updateItem(item,element);
          refreshTableEditorColumn(index);
        }
      }
);
    }
  }
;
  setTablePreferences();
  return table;
}",0.3774574049803407
128820,"@Override public void insert(Object element,int position){
  super.insert(element,position);
  refreshTableEditorControls();
}","@Override public void insert(Object element,int position){
  super.insert(element,position);
}",0.8545454545454545
128821,"public void refreshTableEditorColumn(int index){
  if (tableEditorManager != null && contentProvider instanceof ILazyContentProvider) {
    tableEditorManager.refreshColumn(index);
  }
}","public void refreshTableEditorColumn(int index){
  if (tableEditorManager != null && isLazyLoad()) {
    tableEditorManager.refreshColumn(index);
  }
}",0.8724035608308606
128822,"private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  if (!(tableViewerCreator.getContentProvider() instanceof ILazyContentProvider)) {
    TableItem[] items=tableViewerCreator.getTable().getItems();
    List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
    for (    TableItem item : items) {
      TableItem tableItem=item;
      if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
        for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
          TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
          TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
          String idProperty=column.getId();
          TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
          if (tableEditor != null) {
            addedTableEditor.add(tableEditor);
          }
        }
      }
    }
    for (int i=indexStart; i < items.length; i++) {
      TableItem tableItem=items[i];
      Object data=tableItem.getData();
      Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
      for (      TableEditor tableEditor : tableEditorCollection) {
        tableEditor.setItem(tableItem);
      }
    }
    previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
  }
 else {
    refreshColumn(indexStart);
  }
}","private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  TableItem[] items=tableViewerCreator.getTable().getItems();
  List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
  for (  TableItem item : items) {
    TableItem tableItem=item;
    if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
      for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
        TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
        TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
        String idProperty=column.getId();
        TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
        if (tableEditor != null) {
          addedTableEditor.add(tableEditor);
        }
      }
    }
  }
  for (int i=indexStart; i < items.length; i++) {
    TableItem tableItem=items[i];
    Object data=tableItem.getData();
    Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
    for (    TableEditor tableEditor : tableEditorCollection) {
      tableEditor.setItem(tableItem);
    }
  }
  previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
}",0.8717594192879364
128823,"public void refreshColumn(int index){
  Table table=tableViewerCreator.getTable();
  if (table.isDisposed()) {
    return;
  }
  for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
    TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
    TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
    String idProperty=column.getId();
    TableItem tableItem=table.getItems()[index];
    if (dataToMultipleDataEditor.containsKey(tableItem.getData())) {
      Collection<TableEditor> object=dataToMultipleDataEditor.getCollection(tableItem.getData());
      for (      TableEditor tableEditor : object) {
        tableEditor.setItem(tableItem);
        Control editor=tableEditor.getEditor();
        if (editor != null) {
          editor.redraw();
        }
      }
      if (object.size() == columnsWithEditorContent.size()) {
        break;
      }
 else {
        if (iEditorCol < object.size()) {
          continue;
        }
 else {
          addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
        }
      }
    }
 else {
      addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
    }
  }
}","public void refreshColumn(int index){
  Table table=tableViewerCreator.getTable();
  if (table.isDisposed() || index >= table.getItems().length) {
    return;
  }
  for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
    TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
    TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
    String idProperty=column.getId();
    TableItem tableItem=table.getItems()[index];
    if (dataToMultipleDataEditor.containsKey(tableItem.getData())) {
      Collection<TableEditor> object=dataToMultipleDataEditor.getCollection(tableItem.getData());
      for (      TableEditor tableEditor : object) {
        tableEditor.setItem(tableItem);
        Control editor=tableEditor.getEditor();
        if (editor != null) {
          editor.redraw();
        }
      }
      if (object.size() == columnsWithEditorContent.size()) {
        break;
      }
 else {
        if (iEditorCol < object.size()) {
          continue;
        }
 else {
          addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
        }
      }
    }
 else {
      addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
    }
  }
}",0.9858044164037856
128824,"/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}","/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (tableViewerCreator.isLazyLoad()) {
        tableViewer.refresh();
      }
 else {
        if (event.type == TYPE.ADDED) {
        }
 else         if (event.type == TYPE.SWAPED) {
          Object[] swapedObjects=event.swapedObjects;
          for (          Object data : swapedObjects) {
            tableViewer.refresh(data,true,true);
          }
        }
 else         if (event.type == TYPE.REMOVED) {
        }
 else {
          tableViewer.refresh();
        }
      }
    }
  }
}",0.8219796763266842
128825,"/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment())));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}","/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.handleString(HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment()))));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}",0.9373835793093568
128826,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        ((IJavaProject)CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        (CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}",0.9932562620423891
128827,"/** 
 * This method is used to reset the tRunJob component's context,see feature 1625.
 * @param jobInfo
 * @param currentProcess
 * @param selectedContextName
 */
private static void resetRunJobComponentParameterForContextApply(JobInfo jobInfo,IProcess currentProcess,String selectedContextName){
  if (jobInfo.isApplyContextToChildren()) {
    for (Iterator<? extends INode> iter=currentProcess.getGeneratingNodes().iterator(); iter.hasNext(); ) {
      INode node=iter.next();
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        node.getElementParameter(""String_Node_Str"").setValue(selectedContextName);
      }
    }
  }
}","/** 
 * This method is used to reset the tRunJob component's context,see feature 1625.
 * @param jobInfo
 * @param currentProcess
 * @param selectedContextName
 */
private static void resetRunJobComponentParameterForContextApply(JobInfo jobInfo,IProcess currentProcess,String selectedContextName){
  if (jobInfo.isApplyContextToChildren()) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        node.getElementParameter(""String_Node_Str"").setValue(selectedContextName);
      }
    }
  }
}",0.91699604743083
128828,"public static String[] getMainCommand(String processName,String processVersion,String contextName,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  IProcess currentProcess=null;
  ProcessItem selectedProcessItem=null;
  selectedProcessItem=ItemCacheManager.getProcessItem(processName,processVersion);
  if (selectedProcessItem != null) {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    currentProcess=service.getProcessFromProcessItem(selectedProcessItem);
  }
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,selectedProcessItem.getProperty(),currentContext);
  String[] cmd=new String[]{processor.getCodePath().removeFirstSegments(1).toString().replace(""String_Node_Str"",""String_Node_Str"")};
  if (codeOptions != null) {
    for (int i=0; i < codeOptions.length; i++) {
      String string=codeOptions[i];
      if (string != null) {
        cmd=(String[])ArrayUtils.add(cmd,string);
      }
    }
  }
  if (contextName != null && !contextName.equals(""String_Node_Str"")) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + contextName);
  }
  if (statisticPort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + statisticPort);
  }
  if (tracePort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + tracePort);
  }
  return cmd;
}","public static String[] getMainCommand(String processName,String processVersion,String contextName,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  IProcess currentProcess=null;
  ProcessItem selectedProcessItem=null;
  selectedProcessItem=ItemCacheManager.getProcessItem(processName,processVersion);
  if (selectedProcessItem != null) {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    currentProcess=service.getProcessFromProcessItem(selectedProcessItem);
  }
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,selectedProcessItem.getProperty(),currentContext);
  String[] cmd=new String[]{processor.getCodePath().removeFirstSegments(1).toString().replace(""String_Node_Str"",""String_Node_Str"")};
  if (codeOptions != null) {
    for (    String string : codeOptions) {
      if (string != null) {
        cmd=(String[])ArrayUtils.add(cmd,string);
      }
    }
  }
  if (contextName != null && !contextName.equals(""String_Node_Str"")) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + contextName);
  }
  if (statisticPort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + statisticPort);
  }
  if (tracePort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + tracePort);
  }
  return cmd;
}",0.9728242174062608
128829,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.9917035398230089
128830,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
            IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            IRepositoryViewObject object=node.getObject();
            if (coreService != null && object != null && object.getProperty() != null) {
              Item item=object.getProperty().getItem();
              IProcess iProcess=coreService.getProcessFromItem(item);
              if (iProcess != null && iProcess instanceof IProcess2) {
                IProcess2 process=(IProcess2)iProcess;
                process.removeProblems4ProcessDeleted();
              }
            }
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    @Override public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9247462751025696
128831,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
      Item item=objToDelete.getProperty().getItem();
      IProcess iProcess=coreService.getProcessFromItem(item);
      if (iProcess != null && iProcess instanceof IProcess2) {
        IProcess2 process=(IProcess2)iProcess;
        process.removeProblems4ProcessDeleted();
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}","private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
        Item item=objToDelete.getProperty().getItem();
        IProcess iProcess=coreService.getProcessFromItem(item);
        if (iProcess != null && iProcess instanceof IProcess2) {
          IProcess2 process=(IProcess2)iProcess;
          process.removeProblems4ProcessDeleted();
        }
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}",0.9733333333333334
128832,"/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    return FastDateParser.getInstance(pattern).parse(stringDate);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses text from the beginning of the given string to produce a date using the given pattern and the default date format symbols for the given locale. The method may not use the entire text of the given string. <p>
 * @param pattern the pattern to parse.
 * @param stringDate A <code>String</code> whose beginning should be parsed.
 * @return A <code>Date</code> parsed from the string.
 * @throws ParseException
 * @exception ParseException if the beginning of the specified string cannot be parsed.{talendTypes} Date {Category} TalendDate {param} string(""yyyy-MM-dd HH:mm:ss"") pattern : the pattern to parse {param} string("""") stringDate : A <code>String</code> whose beginning should be parsed {example} parseDate(""yyyy-MMM-dd HH:mm:ss"", ""23-Mar-1979 23:59:59"") #
 */
public synchronized static Date parseDate(String pattern,String stringDate){
  try {
    DateFormat df=FastDateParser.getInstance(pattern);
    Date d=df.parse(stringDate);
    int offset=df.getCalendar().get(Calendar.ZONE_OFFSET);
    char sign=offset >= 0 ? '+' : '-';
    int hour=Math.abs(offset) / 1000 / 60/ 60;
    int min=Math.abs(offset) / 1000 / 60 % 60;
    String minStr=min < 10 ? ""String_Node_Str"" + min : min + ""String_Node_Str"";
    TalendTimestampWithTZ tstz=new TalendTimestampWithTZ(new java.sql.Timestamp(d.getTime()),TimeZone.getTimeZone(""String_Node_Str"" + sign + hour+ ""String_Node_Str""+ minStr));
    return tstz;
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}",0.7583166332665331
128833,"/** 
 * get part of date. like YEAR, MONTH, HOUR, or DAY_OF_WEEK, WEEK_OF_MONTH, WEEK_OF_YEAR, TIMEZONE and so on
 * @param partName which part to get.
 * @param date the date value.
 * @return the specified part value.{talendTypes} Integer {Category} TalendDate {param} string(""DAY_OF_WEEK"") partName : which part to get {param} date(TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) date : the date value {example} getPartOfDate(""DAY_OF_WEEK"", TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) #
 */
public static int getPartOfDate(String partName,Date date){
  if (partName == null || date == null)   return 0;
  int ret=0;
  String[] fieldsName={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  java.util.List<String> filedsList=java.util.Arrays.asList(fieldsName);
  Calendar c=Calendar.getInstance();
  c.setTime(date);
switch (filedsList.indexOf(partName)) {
case 0:
    ret=c.get(Calendar.YEAR);
  break;
case 1:
ret=c.get(Calendar.MONTH);
break;
case 2:
ret=c.get(Calendar.HOUR);
break;
case 3:
ret=c.get(Calendar.MINUTE);
break;
case 4:
ret=c.get(Calendar.SECOND);
break;
case 5:
ret=c.get(Calendar.DAY_OF_WEEK);
break;
case 6:
ret=c.get(Calendar.DAY_OF_MONTH);
break;
case 7:
ret=c.get(Calendar.DAY_OF_YEAR);
break;
case 8:
ret=c.get(Calendar.WEEK_OF_MONTH);
break;
case 9:
ret=c.get(Calendar.DAY_OF_WEEK_IN_MONTH);
break;
case 10:
ret=c.get(Calendar.WEEK_OF_YEAR);
break;
case 11:
ret=(c.get(Calendar.ZONE_OFFSET)) / (1000 * 60 * 60);
break;
default :
break;
}
return ret;
}","/** 
 * get part of date. like YEAR, MONTH, HOUR, or DAY_OF_WEEK, WEEK_OF_MONTH, WEEK_OF_YEAR, TIMEZONE and so on
 * @param partName which part to get.
 * @param date the date value.
 * @return the specified part value.{talendTypes} Integer {Category} TalendDate {param} string(""DAY_OF_WEEK"") partName : which part to get {param} date(TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) date : the date value {example} getPartOfDate(""DAY_OF_WEEK"", TalendDate.parseDate(""yyyy-MM-dd"", ""2010-12-26"")) #
 */
public static int getPartOfDate(String partName,Date date){
  if (partName == null || date == null) {
    return 0;
  }
  int ret=0;
  String[] fieldsName={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  java.util.List<String> filedsList=java.util.Arrays.asList(fieldsName);
  Calendar c=Calendar.getInstance();
  c.setTime(date);
switch (filedsList.indexOf(partName)) {
case 0:
    ret=c.get(Calendar.YEAR);
  break;
case 1:
ret=c.get(Calendar.MONTH);
break;
case 2:
ret=c.get(Calendar.HOUR);
break;
case 3:
ret=c.get(Calendar.MINUTE);
break;
case 4:
ret=c.get(Calendar.SECOND);
break;
case 5:
ret=c.get(Calendar.DAY_OF_WEEK);
break;
case 6:
ret=c.get(Calendar.DAY_OF_MONTH);
break;
case 7:
ret=c.get(Calendar.DAY_OF_YEAR);
break;
case 8:
ret=c.get(Calendar.WEEK_OF_MONTH);
break;
case 9:
ret=c.get(Calendar.DAY_OF_WEEK_IN_MONTH);
break;
case 10:
ret=c.get(Calendar.WEEK_OF_YEAR);
break;
case 11:
ret=(c.get(Calendar.ZONE_OFFSET)) / (1000 * 60 * 60);
break;
default :
break;
}
return ret;
}",0.9975918121613486
128834,"/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment())));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}","/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.handleString(HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment()))));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}",0.9373835793093568
128835,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest) && !(resourceProperty.getItem() instanceof JobletProcessItem)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
 else     if (resourceProperty.getItem() instanceof JobletProcessItem && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      saveResource(resource);
      return;
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.5443934972905378
128836,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128837,"protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<URI>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}","protected void createSystemRoutines() throws PersistenceException {
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemRoutines();
  Path path=new Path(RepositoryConstants.SYSTEM_DIRECTORY);
  IPath systemRoutinePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutinePath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY);
  FolderItem folderItem=folderHelper.getFolder(systemRoutinePath);
  if (folderItem == null) {
    folderItem=folderHelper.createFolder(systemRoutinePath.toString());
  }
  IPath systemRoutineApiPath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.ROUTINES));
  systemRoutineApiPath=systemRoutinePath.append(RepositoryConstants.SYSTEM_DIRECTORY).append(""String_Node_Str"");
  FolderItem folderItemApi=folderHelper.getFolder(systemRoutineApiPath);
  if (folderItemApi == null) {
    folderItemApi=folderHelper.createFolder(systemRoutineApiPath.toString());
  }
  List<IRepositoryViewObject> repositoryObjects=getAll(project,ERepositoryObjectType.ROUTINES,false,false);
  Map<String,List<String>> routineAndJars=coreSerivce.getRoutineAndJars();
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    String routineLabel=tmp[0];
    if (routineLabel.equals(coreSerivce.getTemplateString())) {
      continue;
    }
    RoutineItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(routineLabel) && object.getProperty().getItem() instanceof RoutineItem) {
        existingItem=(RoutineItem)object.getProperty().getItem();
        break;
      }
    }
    if (existingItem == null) {
      createRoutine(url,path,routineLabel,routineAndJars != null ? routineAndJars.get(routineLabel) : null);
    }
 else {
      updateRoutine(url,existingItem);
      existingItem.setParent(folderItem);
    }
  }
}",0.998089577584377
128838,"/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<URI> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      URI jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(new Path(jar.getPath()).lastSegment());
        type.setUrlPath(jar.getPath());
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}","/** 
 * DOC smallet Comment method ""createRoutine"".
 * @param url
 * @throws PersistenceException
 */
private void createRoutine(URL url,IPath path,String label,List<String> neededJars) throws PersistenceException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  InputStream stream=null;
  try {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    property.setId(getNextId());
    property.setLabel(label);
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    stream=url.openStream();
    byte[] innerContent=new byte[stream.available()];
    stream.read(innerContent);
    stream.close();
    byteArray.setInnerContent(innerContent);
    RoutineItem routineItem=PropertiesFactory.eINSTANCE.createRoutineItem();
    routineItem.setProperty(property);
    routineItem.setContent(byteArray);
    routineItem.setBuiltIn(true);
    if (neededJars != null) {
      for (      String jar : neededJars) {
        IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
        type.setMESSAGE(""String_Node_Str"");
        type.setNAME(label);
        type.setREQUIRED(true);
        type.setMODULE(jar);
        routineItem.getImports().add(type);
      }
    }
    if (!routineItem.getProperty().getLabel().equals(coreSerivce.getTemplateString())) {
      create(getRepositoryContext().getProject(),routineItem,path,true);
    }
  }
 catch (  IOException ioe) {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        throw new PersistenceException(ioe);
      }
    }
    throw new PersistenceException(ioe);
  }
}",0.9723889555822328
128839,"public Map<String,List<URI>> getRoutineAndJars();","public Map<String,List<String>> getRoutineAndJars();",0.9108910891089108
128840,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (sourceFileOpening(node)) {
              continue;
            }
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            RepositoryManager.refresh(types);
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (sourceFileOpening(node)) {
              continue;
            }
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
                IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
                IRepositoryViewObject object=node.getObject();
                if (coreService != null && object != null && object.getProperty() != null) {
                  Item item=object.getProperty().getItem();
                  IProcess iProcess=coreService.getProcessFromItem(item);
                  if (iProcess != null && iProcess instanceof IProcess2) {
                    IProcess2 process=(IProcess2)iProcess;
                    process.removeProblems4ProcessDeleted();
                  }
                }
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            RepositoryManager.refresh(types);
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9179879092049732
128841,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
      Item item=objToDelete.getProperty().getItem();
      IProcess iProcess=coreService.getProcessFromItem(item);
      if (iProcess != null && iProcess instanceof IProcess2) {
        IProcess2 process=(IProcess2)iProcess;
        process.removeProblems4ProcessDeleted();
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}","private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
        Item item=objToDelete.getProperty().getItem();
        IProcess iProcess=coreService.getProcessFromItem(item);
        if (iProcess != null && iProcess instanceof IProcess2) {
          IProcess2 process=(IProcess2)iProcess;
          process.removeProblems4ProcessDeleted();
        }
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}",0.9733333333333334
128842,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_TABLE.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.9883125410374262
128843,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest) && !(resourceProperty.getItem() instanceof JobletProcessItem)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
 else     if (resourceProperty.getItem() instanceof JobletProcessItem && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      saveResource(resource);
      return;
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.9659580380714188
128844,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128845,"@Override public List<org.talend.core.model.properties.Project> getReferencedProjects(Project project){
  String parentBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  List<org.talend.core.model.properties.Project> refProjectList=new ArrayList<org.talend.core.model.properties.Project>();
  for (  ProjectReference refProject : (List<ProjectReference>)getRepositoryContext().getProject().getEmfProject().getReferencedProjects()) {
    if (refProject.getBranch() == null || parentBranch.equals(refProject.getBranch())) {
      refProjectList.add(refProject.getReferencedProject());
    }
  }
  return refProjectList;
}","@Override public List<org.talend.core.model.properties.Project> getReferencedProjects(Project project){
  String parentBranch=getRepositoryContext().getFields().get(IProxyRepositoryFactory.BRANCH_SELECTION + ""String_Node_Str"" + project.getTechnicalLabel());
  List<org.talend.core.model.properties.Project> refProjectList=new ArrayList<org.talend.core.model.properties.Project>();
  for (  ProjectReference refProject : (List<ProjectReference>)getRepositoryContext().getProject().getEmfProject().getReferencedProjects()) {
    if (refProject.getBranch() == null || parentBranch.equals(refProject.getBranch())) {
      refProjectList.add(refProject.getReferencedProject());
    }
  }
  return refProjectList;
}",0.5809806835066865
128846,"@Override public String getNavigatorViewDescription(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  if (currentProject == null) {
    return ""String_Node_Str"";
  }
  StringBuffer descBuffer=new StringBuffer();
  descBuffer.append(ProjectManager.LOCAL);
  descBuffer.append(""String_Node_Str"").append(currentProject.getLabel());
  return descBuffer.toString();
}","@Override public String getNavigatorViewDescription(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  if (currentProject == null) {
    return ""String_Node_Str"";
  }
  StringBuffer descBuffer=new StringBuffer();
  descBuffer.append(""String_Node_Str"").append(currentProject.getLabel());
  return descBuffer.toString();
}",0.941970310391363
128847,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      if ((node != null) && node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,true,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (exportAsOSGI) {
                LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              }
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.9917035398230089
128848,"/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.handleString(HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment()))));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}","/** 
 * This class is used for generating component schema information.
 * @param node
 * @param componentElement
 */
protected void generateComponentSchemaInfo(INode node,Element componentElement){
  List metaDataList=node.getMetadataList();
  Element schemasElement=null;
  if (metaDataList != null && metaDataList.size() != 0) {
    schemasElement=componentElement.addElement(""String_Node_Str"");
    boolean isBuiltIn=node.getConnectorFromName(EConnectionType.FLOW_MAIN.getName()).isMultiSchema() || node.getConnectorFromName(EConnectionType.TABLE.getName()).isMultiSchema();
    for (int j=0; j < metaDataList.size(); j++) {
      if ((!isBuiltIn) && (j > 0)) {
        break;
      }
      IMetadataTable table=(IMetadataTable)metaDataList.get(j);
      List columnTypeList=table.getListColumns();
      Element schemaElement=schemasElement.addElement(""String_Node_Str"");
      String metaName=table.getLabel();
      if (metaName == null) {
        metaName=table.getTableName();
      }
      schemaElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(metaName));
      boolean dbComponent=false;
      if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"") || node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
        dbComponent=true;
      }
      for (int k=0; k < columnTypeList.size(); k++) {
        IMetadataColumn columnType=(IMetadataColumn)columnTypeList.get(k);
        Element columnElement=schemaElement.addElement(""String_Node_Str"");
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.getLabel()));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isKey() + ""String_Node_Str""));
        String type=HTMLDocUtils.checkString(columnType.getTalendType());
        if (node.getComponent().getOriginalFamilyName().startsWith(""String_Node_Str"")) {
          type=HTMLDocUtils.checkString(columnType.getType());
        }
 else         if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
          type=JavaTypesManager.getTypeToGenerate(columnType.getTalendType(),columnType.isNullable());
        }
        columnElement.addAttribute(""String_Node_Str"",type);
        String length;
        if ((columnType.getLength() == null) || (columnType.getLength() == 0)) {
          length=""String_Node_Str"";
        }
 else {
          length=String.valueOf(columnType.getLength());
        }
        columnElement.addAttribute(""String_Node_Str"",length);
        String precision;
        if ((columnType.getPrecision() == null) || (columnType.getPrecision() == 0)) {
          precision=""String_Node_Str"";
        }
 else {
          precision=String.valueOf(columnType.getPrecision());
        }
        columnElement.addAttribute(""String_Node_Str"",precision);
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(columnType.isNullable() + ""String_Node_Str""));
        columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getComment())));
        if (PluginChecker.isDatacertPluginLoaded()) {
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelatedEntity())));
          columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(ElementParameterParser.parse(node,columnType.getRelationshipType())));
        }
      }
    }
  }
}",0.9373835793093568
128849,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest) && !(resourceProperty.getItem() instanceof JobletProcessItem)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
 else     if (resourceProperty.getItem() instanceof JobletProcessItem && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      saveResource(resource);
      return;
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.5443934972905378
128850,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
              ImageUtils.propertyImgCachedImages.clear();
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9963221306277744
128851,"/** 
 * create technical name.
 * @param name
 * @return
 */
public static String createTechnicalName(String name){
  return ProjectManager.getInstance().getLocalTechnicalProjectName(name);
}","/** 
 * create technical name.
 * @param name
 * @return
 */
public static String createTechnicalName(String name){
  return ProjectManager.getLocalTechnicalProjectName(name);
}",0.9619565217391304
128852,"public String getTechnicalProjectLabel(String lable){
  String projectLabel=lable;
  if (projectLabel != null) {
    projectLabel=projectLabel.trim();
    projectLabel=projectLabel.toUpperCase(Locale.ENGLISH);
    projectLabel=projectLabel.replace(""String_Node_Str"",""String_Node_Str"");
    projectLabel=projectLabel.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return projectLabel;
}","public static String getTechnicalProjectLabel(String lable){
  String projectLabel=lable;
  if (projectLabel != null) {
    projectLabel=projectLabel.trim();
    projectLabel=projectLabel.toUpperCase(Locale.ENGLISH);
    projectLabel=projectLabel.replace(""String_Node_Str"",""String_Node_Str"");
    projectLabel=projectLabel.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return projectLabel;
}",0.9911054637865312
128853,"/** 
 * DOC ggu Comment method ""getLocalTechnicalProjectName"". TDI-21185
 * @param projectLabel
 * @return
 */
public String getLocalTechnicalProjectName(String projectLabel){
  if (projectLabel != null) {
    String technicalName=getTechnicalProjectLabel(projectLabel);
    if (enableSpecialTechnicalProjectName()) {
      return LOCAL + UNDER_LINE + technicalName;
    }
    return technicalName;
  }
  return null;
}","/** 
 * DOC ggu Comment method ""getLocalTechnicalProjectName"". TDI-21185
 * @param projectLabel
 * @return
 */
public static String getLocalTechnicalProjectName(String projectLabel){
  if (projectLabel != null) {
    String technicalName=getTechnicalProjectLabel(projectLabel);
    if (enableSpecialTechnicalProjectName()) {
      return LOCAL + UNDER_LINE + technicalName;
    }
    return technicalName;
  }
  return null;
}",0.991715976331361
128854,"/** 
 * DOC ggu Comment method ""getProjectDisplayLabel"".
 * @param project
 * @return
 */
public String getProjectDisplayLabel(org.talend.core.model.properties.Project project){
  if (project != null) {
    if (project.getLabel().equals(project.getTechnicalLabel())) {
      return project.getLabel();
    }
    return project.getLabel() + ""String_Node_Str"" + project.getTechnicalLabel()+ ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","/** 
 * DOC ggu Comment method ""getProjectDisplayLabel"".
 * @param project
 * @return
 */
public static String getProjectDisplayLabel(org.talend.core.model.properties.Project project){
  if (project != null) {
    if (project.getLabel().equals(project.getTechnicalLabel())) {
      return project.getLabel();
    }
    return project.getLabel() + ""String_Node_Str"" + project.getTechnicalLabel()+ ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.9921259842519684
128855,"public boolean enableSpecialTechnicalProjectName(){
  return TalendPropertiesUtil.isEnabledMultiBranchesInWorkspace();
}","public static boolean enableSpecialTechnicalProjectName(){
  return TalendPropertiesUtil.isEnabledMultiBranchesInWorkspace();
}",0.97165991902834
128856,"/** 
 * Defines the default <code>Charset</code> used in case the buffer represents an 8-bit <code>Charset</code>.
 * @param defaultCharset the default <code>Charset</code> to be returned by <code>guessEncoding()</code> if an8-bit <code>Charset</code> is encountered.
 */
public void setDefaultCharset(Charset defaultCharset){
  if (defaultCharset != null) {
    this.defaultCharset=defaultCharset;
  }
 else {
    this.defaultCharset=getDefaultSystemCharset();
  }
}","/** 
 * Defines the default <code>Charset</code> used in case the buffer represents an 8-bit <code>Charset</code>.
 * @param defaultCharset the default <code>Charset</code> to be returned by <code>guessEncoding()</code> if an 8-bit<code>Charset</code> is encountered.
 */
public void setDefaultCharset(Charset defaultCharset){
  if (defaultCharset != null) {
    this.defaultCharset=defaultCharset;
  }
 else {
    this.defaultCharset=getDefaultSystemCharset();
  }
}",0.9978586723768736
128857,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9729770876151328
128858,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (      String element : jarPath) {
        loader.addPath(element);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (    String element : jarPath) {
      if (element.contains(""String_Node_Str"")) {
        String[] splittedPath=element.split(""String_Node_Str"");
        for (        String element2 : splittedPath) {
          loader.addPath(element2);
        }
      }
 else {
        loader.addPath(element);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.8648748841519925
128859,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=(java.sql.Connection)MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      DatabaseMetaData databaseMetaData=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
      if (sqlConn != null) {
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (derbyDriver != null) {
      try {
        derbyDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return dbConn;
}",0.9922708870077293
128860,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            Path path=new Path(jars[i]);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jars[i]);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            Path path=new Path(jars[i]);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jars[i]);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9897570093457944
128861,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
    if (systemCharset != null && systemCharset.displayName() != null) {
      info.put(""String_Node_Str"",systemCharset.displayName());
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9696216024160595
128862,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9900861133222376
128863,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
    if (systemCharset != null && systemCharset.displayName() != null) {
      info.put(""String_Node_Str"",systemCharset.displayName());
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9696216024160595
128864,"/** 
 * Defines the default <code>Charset</code> used in case the buffer represents an 8-bit <code>Charset</code>.
 * @param defaultCharset the default <code>Charset</code> to be returned by <code>guessEncoding()</code> if an8-bit <code>Charset</code> is encountered.
 */
public void setDefaultCharset(Charset defaultCharset){
  if (defaultCharset != null) {
    this.defaultCharset=defaultCharset;
  }
 else {
    this.defaultCharset=getDefaultSystemCharset();
  }
}","/** 
 * Defines the default <code>Charset</code> used in case the buffer represents an 8-bit <code>Charset</code>.
 * @param defaultCharset the default <code>Charset</code> to be returned by <code>guessEncoding()</code> if an 8-bit<code>Charset</code> is encountered.
 */
public void setDefaultCharset(Charset defaultCharset){
  if (defaultCharset != null) {
    this.defaultCharset=defaultCharset;
  }
 else {
    this.defaultCharset=getDefaultSystemCharset();
  }
}",0.9978586723768736
128865,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion)) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9838086749851456
128866,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
    if (systemCharset != null && systemCharset.displayName() != null) {
      info.put(""String_Node_Str"",systemCharset.displayName());
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.960272417707151
128867,"/** 
 * for editorProperties
 */
public static void refreshEditorPropertiesNode(ERepositoryObjectType type){
  if (isRefreshManually() || !isRefreshCreated()) {
    refresh(type);
  }
 else {
    IRepositoryView repositoryView=getRepositoryView();
    if (repositoryView != null) {
      repositoryView.refresh();
    }
  }
  if (type != null) {
    syncRoutineAndJoblet(type);
  }
}","/** 
 * for editorProperties
 */
public static void refreshEditorPropertiesNode(ERepositoryObjectType type){
}",0.4462474645030426
128868,"public static void refreshCreatedNode(IProjectRepositoryNode projectNode,ERepositoryObjectType type){
  IRepositoryView repositoryView=getRepositoryView();
  if (repositoryView != null) {
    if ((isRefreshManually() || !isRefreshCreated()) && !type.isSubItem()) {
      if (projectNode != null) {
        RepositoryNode rootNode=(RepositoryNode)projectNode.getRootRepositoryNode(type);
        repositoryView.refreshAllChildNodes(rootNode);
      }
 else {
        refresh(type);
      }
    }
 else {
      repositoryView.refresh();
    }
    if (type != null) {
      syncRoutineAndJoblet(type);
    }
  }
}","public static void refreshCreatedNode(IProjectRepositoryNode projectNode,ERepositoryObjectType type){
}",0.2889200561009817
128869,"/** 
 * for save
 */
public static void refreshSavedNode(RepositoryNode node){
  if (node == null) {
    return;
  }
  IRepositoryView repositoryView=getRepositoryView();
  if (repositoryView != null) {
    if (isRefreshManually() || !isRefreshSaved()) {
      repositoryView.refresh(node);
    }
 else {
      repositoryView.refresh();
    }
  }
}","/** 
 * for save
 */
public static void refreshSavedNode(RepositoryNode node){
}",0.3738317757009345
128870,"public static void refresh(Set<ERepositoryObjectType> types){
  IRepositoryView repositoryView=getRepositoryView();
  if (types != null && repositoryView != null) {
    for (    ERepositoryObjectType type : types) {
      repositoryView.refresh(type);
    }
  }
}","public static void refresh(Set<ERepositoryObjectType> types){
}",0.3865030674846625
128871,"/** 
 * for delete
 */
public static void refreshDeletedNode(Set<ERepositoryObjectType> types){
  IRepositoryView repositoryView=getRepositoryView();
  if (repositoryView != null) {
    repositoryView.refresh();
  }
}","/** 
 * for delete
 */
public static void refreshDeletedNode(Set<ERepositoryObjectType> types){
  IRepositoryView repositoryView=getRepositoryView();
  if (repositoryView != null) {
  }
}",0.9257425742574258
128872,"@Override protected void run() throws LoginException, PersistenceException {
  boolean exist=false;
  if (node != null && node.getObject() != null) {
    Property property=node.getObject().getProperty();
    if (property != null) {
      exist=true;
      doRun();
    }
    if (!exist) {
      refreshRelatedItem(getOldItem());
    }
  }
 else {
    doRun();
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  boolean exist=false;
  if (node != null && node.getObject() != null) {
    Property property=node.getObject().getProperty();
    if (property != null) {
      exist=true;
      doRun();
    }
  }
 else {
    doRun();
  }
}",0.8588588588588588
128873,"/** 
 * Convenience method user to refresh view (starting with the given element) on wich action had been called.
 * @param obj - object to start the refresh on
 */
public void refresh(Object obj){
  IRepositoryView viewPart=getViewPart();
  if (viewPart != null) {
    viewPart.refresh(obj);
    viewPart.expand(obj,true);
  }
}","/** 
 * Convenience method user to refresh view (starting with the given element) on wich action had been called.
 * @param obj - object to start the refresh on
 */
public void refresh(Object obj){
  IRepositoryView viewPart=getViewPart();
  if (viewPart != null) {
    viewPart.expand(obj,true);
  }
}",0.9572107765451664
128874,"private RepositoryNode searchRepositoryNode(IRepositoryNode root,ERepositoryObjectType type){
  if (root == null || type == null) {
    return null;
  }
  IRepositoryNode foundNode=null;
  List<IRepositoryNode> chindren=root.getChildren();
  for (  IRepositoryNode repositoryNode : chindren) {
    if (repositoryNode.getContentType() == type) {
      foundNode=repositoryNode;
    }
 else {
      foundNode=searchRepositoryNode((RepositoryNode)repositoryNode,type);
    }
    if (foundNode != null) {
      return (RepositoryNode)foundNode;
    }
  }
  return null;
}","private RepositoryNode searchRepositoryNode(IRepositoryNode root,ERepositoryObjectType type){
  if (root == null || type == null) {
    return null;
  }
  IRepositoryNode foundNode=null;
  List<IRepositoryNode> chindren=root.getChildren();
  for (  IRepositoryNode repositoryNode : chindren) {
    if (repositoryNode.getContentType() == type) {
      foundNode=repositoryNode;
    }
 else {
      foundNode=searchRepositoryNode(repositoryNode,type);
    }
    if (foundNode != null) {
      return (RepositoryNode)foundNode;
    }
  }
  return null;
}",0.9856887298747764
128875,"@Override public void doRun(){
  if (this.repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_CONNECTIONS) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
  }
  IRepositoryView view=getViewPart();
  if (view != null) {
    view.refresh();
  }
  RepositoryNode metadataNode=repositoryNode.getParent();
  if (metadataNode != null) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.setFocus();
      viewPart.expand(metadataNode,true);
      viewPart.expand(repositoryNode,true);
    }
  }
  DatabaseConnection connection=null;
  IPath pathToSave=null;
  if (repositoryNode.getObject() != null && repositoryNode.getObject().getClass().equals(RepositoryObject.class)) {
    try {
      ((RepositoryObject)repositoryNode.getObject()).setProperty(ProxyRepositoryFactory.getInstance().getUptodateProperty(repositoryNode.getObject().getProperty()));
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  RepositoryNode node=repositoryNode;
  boolean creation=false;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    connection=(DatabaseConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
  creation=false;
break;
case SIMPLE_FOLDER:
pathToSave=RepositoryNodeUtilities.getPath(node);
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
}
if (!creation) {
Property property=node.getObject().getProperty();
Property updatedProperty=null;
if (getNeededVersion() == null) {
}
 else {
try {
updatedProperty=ProxyRepositoryFactory.getInstance().getUptodateProperty(new Project(ProjectManager.getInstance().getProject(property.getItem())),property);
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
}
}
}
DatabaseWizard databaseWizard;
if (isToolbar()) {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
databaseWizard.setToolBar(true);
}
 else {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
}
if (!creation) {
RepositoryManager.refreshSavedNode(node);
}
WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),databaseWizard);
wizardDialog.setPageSize(600,540);
wizardDialog.create();
wizardDialog.open();
connItem=databaseWizard.getConnectionItem();
RepositoryManager.refreshSavedNode(node);
}","@Override public void doRun(){
  if (this.repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_CONNECTIONS) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
  }
  RepositoryNode metadataNode=repositoryNode.getParent();
  if (metadataNode != null) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.setFocus();
      viewPart.expand(metadataNode,true);
      viewPart.expand(repositoryNode,true);
    }
  }
  DatabaseConnection connection=null;
  IPath pathToSave=null;
  if (repositoryNode.getObject() != null && repositoryNode.getObject().getClass().equals(RepositoryObject.class)) {
    try {
      ((RepositoryObject)repositoryNode.getObject()).setProperty(ProxyRepositoryFactory.getInstance().getUptodateProperty(repositoryNode.getObject().getProperty()));
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  RepositoryNode node=repositoryNode;
  boolean creation=false;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    connection=(DatabaseConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
  creation=false;
break;
case SIMPLE_FOLDER:
pathToSave=RepositoryNodeUtilities.getPath(node);
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
}
if (!creation) {
Property property=node.getObject().getProperty();
Property updatedProperty=null;
if (getNeededVersion() == null) {
}
 else {
try {
updatedProperty=ProxyRepositoryFactory.getInstance().getUptodateProperty(new Project(ProjectManager.getInstance().getProject(property.getItem())),property);
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
}
}
}
DatabaseWizard databaseWizard;
if (isToolbar()) {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
databaseWizard.setToolBar(true);
}
 else {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
}
if (!creation) {
RepositoryManager.refreshSavedNode(node);
}
WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),databaseWizard);
wizardDialog.setPageSize(600,540);
wizardDialog.create();
wizardDialog.open();
connItem=databaseWizard.getConnectionItem();
RepositoryManager.refreshSavedNode(node);
}",0.984688297484506
128876,"public void setContentProvider(IContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}","public void setContentProvider(IStructuredContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}",0.9802371541501976
128877,"/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged && !(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}","/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged && !isLazyLoad()) {
    refreshTableEditorControls();
  }
}",0.9812981298129811
128878,"/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  if (lazyLoad) {
    style|=SWT.VIRTUAL;
  }
  return style;
}","/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  if (isLazyLoad()) {
    style|=SWT.VIRTUAL;
  }
  return style;
}",0.9949238578680204
128879,"public void setLazyLoad(boolean lazyLoad){
  this.lazyLoad=lazyLoad;
  setContentProvider(new LazyContentProvider(this));
}","public void setLazyLoad(boolean lazyLoad){
  this.lazyLoad=lazyLoad;
}",0.7253886010362695
128880,"@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorColumn(index);
  if (!(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}","@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorControls();
}",0.7072463768115942
128881,"/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
      refreshTableEditorControls();
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorColumn(index);
      if (!(contentProvider instanceof ILazyContentProvider)) {
        refreshTableEditorControls();
      }
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void inputChanged(    Object input,    Object oldInput){
      if (input instanceof List && contentProvider instanceof ILazyContentProvider) {
        int newSize=((List)input).size();
        int oldSize=0;
        if (oldInput instanceof List) {
          oldSize=((List)oldInput).size();
        }
        if (newSize != oldSize) {
          tableViewer.setItemCount(newSize);
        }
      }
      super.inputChanged(input,oldInput);
    }
  }
;
  setTablePreferences();
  return table;
}","/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void hookControl(    Control control){
      super.hookControl(control);
      table.addListener(SWT.SetData,new Listener(){
        @Override public void handleEvent(        Event event){
          TableItem item=(TableItem)event.item;
          int index=table.indexOf(item);
          if (index == -1) {
            return;
          }
          B element=getInputList().get(index);
          associate(element,item);
          updateItem(item,element);
          refreshTableEditorColumn(index);
        }
      }
);
    }
  }
;
  setTablePreferences();
  return table;
}",0.3774574049803407
128882,"@Override public void insert(Object element,int position){
  super.insert(element,position);
  refreshTableEditorControls();
}","@Override public void insert(Object element,int position){
  super.insert(element,position);
}",0.8545454545454545
128883,"public void refreshTableEditorColumn(int index){
  if (tableEditorManager != null && contentProvider instanceof ILazyContentProvider) {
    tableEditorManager.refreshColumn(index);
  }
}","public void refreshTableEditorColumn(int index){
  if (tableEditorManager != null && isLazyLoad()) {
    tableEditorManager.refreshColumn(index);
  }
}",0.8724035608308606
128884,"private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  if (!(tableViewerCreator.getContentProvider() instanceof ILazyContentProvider)) {
    TableItem[] items=tableViewerCreator.getTable().getItems();
    List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
    for (    TableItem item : items) {
      TableItem tableItem=item;
      if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
        for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
          TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
          TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
          String idProperty=column.getId();
          TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
          if (tableEditor != null) {
            addedTableEditor.add(tableEditor);
          }
        }
      }
    }
    for (int i=indexStart; i < items.length; i++) {
      TableItem tableItem=items[i];
      Object data=tableItem.getData();
      Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
      for (      TableEditor tableEditor : tableEditorCollection) {
        tableEditor.setItem(tableItem);
      }
    }
    previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
  }
 else {
    for (int i=0; i < event.addedObjects.size(); i++) {
      refreshColumn(indexStart + i);
    }
  }
}","private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  TableItem[] items=tableViewerCreator.getTable().getItems();
  List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
  for (  TableItem item : items) {
    TableItem tableItem=item;
    if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
      for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
        TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
        TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
        String idProperty=column.getId();
        TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
        if (tableEditor != null) {
          addedTableEditor.add(tableEditor);
        }
      }
    }
  }
  for (int i=indexStart; i < items.length; i++) {
    TableItem tableItem=items[i];
    Object data=tableItem.getData();
    Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
    for (    TableEditor tableEditor : tableEditorCollection) {
      tableEditor.setItem(tableItem);
    }
  }
  previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
}",0.8517392772711921
128885,"/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}","/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (tableViewerCreator.isLazyLoad()) {
        tableViewer.refresh();
      }
 else {
        if (event.type == TYPE.ADDED) {
        }
 else         if (event.type == TYPE.SWAPED) {
          Object[] swapedObjects=event.swapedObjects;
          for (          Object data : swapedObjects) {
            tableViewer.refresh(data,true,true);
          }
        }
 else         if (event.type == TYPE.REMOVED) {
        }
 else {
          tableViewer.refresh();
        }
      }
    }
  }
}",0.8219796763266842
128886,"@Override protected void setTableViewerCreatorOptions(TableViewerCreator<IMetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
  newTableViewerCreator.setLazyLoad(true);
}","@Override protected void setTableViewerCreatorOptions(TableViewerCreator<IMetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
}",0.8911392405063291
128887,"@Override protected void setTableViewerCreatorOptions(TableViewerCreator<MetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
  newTableViewerCreator.setLazyLoad(true);
}","@Override protected void setTableViewerCreatorOptions(TableViewerCreator<MetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
}",0.8905852417302799
128888,"public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_TABLE.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.9882817643186308
128889,"/** 
 * This method is used for generating HTML file base on given folder, job name and xsl file name.
 * @param tempFolderPath a string
 * @param jobNameOrComponentName a string
 * @param externalNodeHTMLList
 * @param xslFileName a string
 */
public static void generateHTMLFile(String tempFolderPath,String xslFilePath,String xmlFilePath,String htmlFilePath){
  FileOutputStream output=null;
  Writer writer=null;
  try {
    File xmlFile=new File(xmlFilePath);
    Reader reader=new InputStreamReader(new FileInputStream(xmlFile),""String_Node_Str"");
    javax.xml.transform.Source xmlSource=new javax.xml.transform.stream.StreamSource(reader);
    Path htmlPath=new Path(htmlFilePath);
    File htmlFile=new File(htmlPath.removeLastSegments(1).toPortableString());
    htmlFile.mkdirs();
    output=new FileOutputStream(htmlFilePath);
    writer=new BufferedWriter(new OutputStreamWriter(output,""String_Node_Str""));
    javax.xml.transform.Result result=new javax.xml.transform.stream.StreamResult(writer);
    transformerCache.clear();
    javax.xml.transform.Transformer trans=transformerCache.get(xslFilePath);
    if (trans == null) {
      File xsltFile=new File(xslFilePath);
      javax.xml.transform.Source xsltSource=new javax.xml.transform.stream.StreamSource(xsltFile);
      trans=transformerFactory.newTransformer(xsltSource);
      transformerCache.put(xslFilePath,trans);
    }
    trans.transform(xmlSource,result);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    try {
      if (output != null) {
        output.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception e1) {
      ExceptionHandler.process(e1);
    }
  }
}","/** 
 * This method is used for generating HTML file base on given folder, job name and xsl file name.
 * @param tempFolderPath a string
 * @param jobNameOrComponentName a string
 * @param externalNodeHTMLList
 * @param xslFileName a string
 */
public static void generateHTMLFile(String tempFolderPath,String xslFilePath,String xmlFilePath,String htmlFilePath){
  FileOutputStream output=null;
  Writer writer=null;
  try {
    File xmlFile=new File(xmlFilePath);
    javax.xml.transform.Source xmlSource=new javax.xml.transform.stream.StreamSource(xmlFile);
    Path htmlPath=new Path(htmlFilePath);
    File htmlFile=new File(htmlPath.removeLastSegments(1).toPortableString());
    htmlFile.mkdirs();
    output=new FileOutputStream(htmlFilePath);
    writer=new BufferedWriter(new OutputStreamWriter(output,""String_Node_Str""));
    javax.xml.transform.Result result=new javax.xml.transform.stream.StreamResult(writer);
    transformerCache.clear();
    javax.xml.transform.Transformer trans=transformerCache.get(xslFilePath);
    if (trans == null) {
      File xsltFile=new File(xslFilePath);
      javax.xml.transform.Source xsltSource=new javax.xml.transform.stream.StreamSource(xsltFile);
      trans=transformerFactory.newTransformer(xsltSource);
      transformerCache.put(xslFilePath,trans);
    }
    trans.transform(xmlSource,result);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    try {
      if (output != null) {
        output.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception e1) {
      ExceptionHandler.process(e1);
    }
  }
}",0.7851473922902494
128890,"/** 
 * Find all projects in the workspace having the given nature.
 * @param natureId Nature id.
 * @return all projects in the workspace having the given nature.
 * @throws PersistenceException
 */
public static IProject[] getProjetWithNature(String natureId) throws PersistenceException {
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject[] allProjects=root.getProjects();
  List<IProject> projects=new ArrayList<IProject>();
  for (  IProject prj : allProjects) {
    try {
      if (prj.hasNature(natureId)) {
        projects.add(prj);
      }
    }
 catch (    CoreException e) {
    }
  }
  IProject[] prjs=new IProject[projects.size()];
  prjs=projects.toArray(prjs);
  return prjs;
}","/** 
 * Find all projects in the workspace having the given nature.
 * @param natureId Nature id.
 * @return all projects in the workspace having the given nature.
 * @throws PersistenceException
 */
public static IProject[] getProjetWithNature(String natureId) throws PersistenceException {
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject[] allProjects=root.getProjects();
  List<IProject> projects=new ArrayList<IProject>();
  for (  IProject prj : allProjects) {
    try {
      prj.open(IResource.BACKGROUND_REFRESH,null);
      if (prj.hasNature(natureId)) {
        projects.add(prj);
      }
    }
 catch (    CoreException e) {
    }
  }
  IProject[] prjs=new IProject[projects.size()];
  prjs=projects.toArray(prjs);
  return prjs;
}",0.9657027572293208
128891,"/** 
 * Defines the default <code>Charset</code> used in case the buffer represents an 8-bit <code>Charset</code>.
 * @param defaultCharset the default <code>Charset</code> to be returned by <code>guessEncoding()</code> if an8-bit <code>Charset</code> is encountered.
 */
public void setDefaultCharset(Charset defaultCharset){
  if (defaultCharset != null) {
    this.defaultCharset=defaultCharset;
  }
 else {
    this.defaultCharset=getDefaultSystemCharset();
  }
}","/** 
 * Defines the default <code>Charset</code> used in case the buffer represents an 8-bit <code>Charset</code>.
 * @param defaultCharset the default <code>Charset</code> to be returned by <code>guessEncoding()</code> if an 8-bit<code>Charset</code> is encountered.
 */
public void setDefaultCharset(Charset defaultCharset){
  if (defaultCharset != null) {
    this.defaultCharset=defaultCharset;
  }
 else {
    this.defaultCharset=getDefaultSystemCharset();
  }
}",0.9978586723768736
128892,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            Path path=new Path(jars[i]);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jars[i]);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            Path path=new Path(jars[i]);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jars[i]);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9832565284178189
128893,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=(HotClassLoader)classLoadersMap.get(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      for (int i=0; i < jarPath.length; i++) {
        loader.addPath(jarPath[i]);
      }
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=HotClassLoader.getInstance();
    for (int i=0; i < jarPath.length; i++) {
      if (jarPath[i].contains(""String_Node_Str"")) {
        String[] splittedPath=jarPath[i].split(""String_Node_Str"");
        for (int j=0; j < splittedPath.length; j++) {
          loader.addPath(splittedPath[j]);
        }
      }
 else {
        loader.addPath(jarPath[i]);
      }
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
    if (systemCharset != null && systemCharset.displayName() != null) {
      info.put(""String_Node_Str"",systemCharset.displayName());
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
        connection=ConnectionUtils.createConnection(url,(Driver)(driver.newInstance()),info);
      }
 else {
        connection=wapperDriver.connect(url,info);
      }
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.960272417707151
128894,"public static ISourceViewer createViewer(Composite composite,int styles,boolean checkCode){
  StringBuffer buff=new StringBuffer();
  buff.append(""String_Node_Str"");
  buff.append(getImports());
  buff.append(""String_Node_Str"" + VIEWER_CLASS_NAME + currentId+ ""String_Node_Str"");
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  int documentOffset=buff.toString().length();
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  IDocument document=new Document();
  document.set(buff.toString());
  return initializeViewer(composite,styles,checkCode,document,documentOffset);
}","public static ISourceViewer createViewer(Composite composite,int styles,boolean checkCode){
  StringBuffer buff=new StringBuffer();
  buff.append(""String_Node_Str"");
  buff.append(getImports());
  buff.append(""String_Node_Str"" + VIEWER_CLASS_NAME + currentId+ ""String_Node_Str"");
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  try {
    IProcess activeProcess=CorePlugin.getDefault().getRunProcessService().getActiveProcess();
    if (activeProcess != null && ""String_Node_Str"".equals(activeProcess.getClass().getName())) {
      buff.append(""String_Node_Str"");
      buff.append(""String_Node_Str"");
      buff.append(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  int documentOffset=buff.toString().length();
  buff.append(""String_Node_Str"");
  buff.append(""String_Node_Str"");
  IDocument document=new Document();
  document.set(buff.toString());
  return initializeViewer(composite,styles,checkCode,document,documentOffset);
}",0.79463243873979
128895,"/** 
 * Find all projects in the workspace having the given nature.
 * @param natureId Nature id.
 * @return all projects in the workspace having the given nature.
 * @throws PersistenceException
 */
public static IProject[] getProjetWithNature(String natureId) throws PersistenceException {
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject[] allProjects=root.getProjects();
  List<IProject> projects=new ArrayList<IProject>();
  for (  IProject prj : allProjects) {
    try {
      if (prj.hasNature(natureId)) {
        projects.add(prj);
      }
    }
 catch (    CoreException e) {
    }
  }
  IProject[] prjs=new IProject[projects.size()];
  prjs=projects.toArray(prjs);
  return prjs;
}","/** 
 * Find all projects in the workspace having the given nature.
 * @param natureId Nature id.
 * @return all projects in the workspace having the given nature.
 * @throws PersistenceException
 */
public static IProject[] getProjetWithNature(String natureId) throws PersistenceException {
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProject[] allProjects=root.getProjects();
  List<IProject> projects=new ArrayList<IProject>();
  for (  IProject prj : allProjects) {
    try {
      prj.open(IResource.BACKGROUND_REFRESH,null);
      if (prj.hasNature(natureId)) {
        projects.add(prj);
      }
    }
 catch (    CoreException e) {
    }
  }
  IProject[] prjs=new IProject[projects.size()];
  prjs=projects.toArray(prjs);
  return prjs;
}",0.9657027572293208
128896,"@Override public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    if ((item instanceof JobletProcessItem || item instanceof ProcessItem) && getStatus(item) == ERepositoryStatus.LOCK_BY_USER) {
      String docId=item.getProperty().getId() + ""String_Node_Str"";
      IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
      if (repositoryViewObject != null) {
        Property property=repositoryViewObject.getProperty();
        Item documentationItem=property.getItem();
        this.repositoryFactoryFromProvider.lock(documentationItem);
      }
    }
    notifyLock(item,true);
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}","@Override public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    notifyLock(item,true);
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}",0.5592055003819709
128897,"@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (!(obj instanceof FolderItem) && (obj.eResource() == null || obj.getProperty().eResource() == null)) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}","@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (!(obj instanceof FolderItem) && (obj.eResource() == null || obj.getProperty().eResource() == null)) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}",0.7607634265423879
128898,"private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (int i=0; i < tableItems.length; i++) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItems[i].getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItems[i],tableItems[i].getData(),xmlViewer.getTree(),treeNode,false);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (int i=0; i < children.length; i++) {
    initLinker(children[i],tableItems);
  }
}","private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  Properties prop=System.getProperties();
  String os=prop.getProperty(""String_Node_Str"");
  boolean isLastOne=false;
  if (column != null) {
    for (int i=0; i < tableItems.length; i++) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItems[i].getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        if (os.startsWith(""String_Node_Str"")) {
          isLastOne=true;
        }
        linker.addLoopLink(tableItems[i],tableItems[i].getData(),xmlViewer.getTree(),treeNode,isLastOne);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (int i=0; i < children.length; i++) {
    initLinker(children[i],tableItems);
  }
}",0.8557951482479784
128899,"public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    if (linker.linkSize() == 0) {
      linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
    }
  }
}","public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}",0.9599236641221374
128900,"/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged) {
    refreshTableEditorControls();
  }
}","/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged && !(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}",0.9800738007380074
128901,"/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  return style;
}","/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  if (lazyLoad) {
    style|=SWT.VIRTUAL;
  }
  return style;
}",0.9593639575971732
128902,"private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  TableItem[] items=tableViewerCreator.getTable().getItems();
  List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
  for (  TableItem item : items) {
    TableItem tableItem=item;
    if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
      for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
        TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
        TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
        String idProperty=column.getId();
        TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
        if (tableEditor != null) {
          addedTableEditor.add(tableEditor);
        }
      }
    }
  }
  for (int i=indexStart; i < items.length; i++) {
    TableItem tableItem=items[i];
    Object data=tableItem.getData();
    Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
    for (    TableEditor tableEditor : tableEditorCollection) {
      tableEditor.setItem(tableItem);
    }
  }
  previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
}","private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  if (!(tableViewerCreator.getContentProvider() instanceof ILazyContentProvider)) {
    TableItem[] items=tableViewerCreator.getTable().getItems();
    List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
    for (    TableItem item : items) {
      TableItem tableItem=item;
      if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
        for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
          TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
          TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
          String idProperty=column.getId();
          TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
          if (tableEditor != null) {
            addedTableEditor.add(tableEditor);
          }
        }
      }
    }
    for (int i=indexStart; i < items.length; i++) {
      TableItem tableItem=items[i];
      Object data=tableItem.getData();
      Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
      for (      TableEditor tableEditor : tableEditorCollection) {
        tableEditor.setItem(tableItem);
      }
    }
    previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
  }
 else {
    refreshColumn(indexStart);
  }
}",0.8717594192879364
128903,"/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}","/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}",0.9457364341085271
128904,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    outputMetaView=new MetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new MetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    outputMetaView=new MetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str""),outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str""),outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}",0.9990402047563186
128905,"@Override protected boolean canModifyDBColumn(Object bean){
  if (bean instanceof MetadataColumnImpl) {
    if (((MetadataColumnImpl)bean).getLabel().equals(((MetadataColumnImpl)bean).getOriginalField()))     return true;
  }
  return false;
}","@Override protected boolean canModifyDBColumn(Object bean){
  if (bean instanceof MetadataColumnImpl) {
    if (((MetadataColumnImpl)bean).getLabel().equals(((MetadataColumnImpl)bean).getOriginalField())) {
      return true;
    }
  }
  return false;
}",0.9798387096774194
128906,"public TableViewerCreator<MetadataColumn> getTableViewerCreator(){
  return getExtendedTableViewer().getTableViewerCreator();
}","@Override public TableViewerCreator<MetadataColumn> getTableViewerCreator(){
  return getExtendedTableViewer().getTableViewerCreator();
}",0.9621212121212122
128907,"protected IBeanPropertyAccessors<MetadataColumn,String> getRelationshipTypeAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,String>(){
    public String get(    MetadataColumn bean){
      return bean.getRelationshipType();
    }
    public void set(    MetadataColumn bean,    String value){
      bean.setRelationshipType(value);
    }
  }
;
}","@Override protected IBeanPropertyAccessors<MetadataColumn,String> getRelationshipTypeAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,String>(){
    public String get(    MetadataColumn bean){
      return bean.getRelationshipType();
    }
    public void set(    MetadataColumn bean,    String value){
      bean.setRelationshipType(value);
    }
  }
;
}",0.9862637362637364
128908,"protected IBeanPropertyAccessors<MetadataColumn,String> getRelatedEntityAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,String>(){
    public String get(    MetadataColumn bean){
      return bean.getRelatedEntity();
    }
    public void set(    MetadataColumn bean,    String value){
      bean.setRelatedEntity(value);
    }
  }
;
}","@Override protected IBeanPropertyAccessors<MetadataColumn,String> getRelatedEntityAccessor(){
  return new IBeanPropertyAccessors<MetadataColumn,String>(){
    public String get(    MetadataColumn bean){
      return bean.getRelatedEntity();
    }
    public void set(    MetadataColumn bean,    String value){
      bean.setRelatedEntity(value);
    }
  }
;
}",0.9859154929577464
128909,"/** 
 * This method is used for generating HTML file base on given folder, job name and xsl file name.
 * @param tempFolderPath a string
 * @param jobNameOrComponentName a string
 * @param externalNodeHTMLList
 * @param xslFileName a string
 */
public static void generateHTMLFile(String tempFolderPath,String xslFilePath,String xmlFilePath,String htmlFilePath){
  FileOutputStream output=null;
  Writer writer=null;
  try {
    File xmlFile=new File(xmlFilePath);
    javax.xml.transform.Source xmlSource=new javax.xml.transform.stream.StreamSource(xmlFile);
    Path htmlPath=new Path(htmlFilePath);
    File htmlFile=new File(htmlPath.removeLastSegments(1).toPortableString());
    htmlFile.mkdirs();
    output=new FileOutputStream(htmlFilePath);
    writer=new BufferedWriter(new OutputStreamWriter(output,""String_Node_Str""));
    javax.xml.transform.Result result=new javax.xml.transform.stream.StreamResult(writer);
    transformerCache.clear();
    javax.xml.transform.Transformer trans=transformerCache.get(xslFilePath);
    if (trans == null) {
      File xsltFile=new File(xslFilePath);
      javax.xml.transform.Source xsltSource=new javax.xml.transform.stream.StreamSource(xsltFile);
      trans=transformerFactory.newTransformer(xsltSource);
      transformerCache.put(xslFilePath,trans);
    }
    trans.transform(xmlSource,result);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    try {
      if (output != null) {
        output.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception e1) {
      ExceptionHandler.process(e1);
    }
  }
}","/** 
 * This method is used for generating HTML file base on given folder, job name and xsl file name.
 * @param tempFolderPath a string
 * @param jobNameOrComponentName a string
 * @param externalNodeHTMLList
 * @param xslFileName a string
 */
public static void generateHTMLFile(String tempFolderPath,String xslFilePath,String xmlFilePath,String htmlFilePath){
  FileOutputStream output=null;
  Writer writer=null;
  try {
    File xmlFile=new File(xmlFilePath);
    Reader reader=new InputStreamReader(new FileInputStream(xmlFile),""String_Node_Str"");
    javax.xml.transform.Source xmlSource=new javax.xml.transform.stream.StreamSource(reader);
    Path htmlPath=new Path(htmlFilePath);
    File htmlFile=new File(htmlPath.removeLastSegments(1).toPortableString());
    htmlFile.mkdirs();
    output=new FileOutputStream(htmlFilePath);
    writer=new BufferedWriter(new OutputStreamWriter(output,""String_Node_Str""));
    javax.xml.transform.Result result=new javax.xml.transform.stream.StreamResult(writer);
    transformerCache.clear();
    javax.xml.transform.Transformer trans=transformerCache.get(xslFilePath);
    if (trans == null) {
      File xsltFile=new File(xslFilePath);
      javax.xml.transform.Source xsltSource=new javax.xml.transform.stream.StreamSource(xsltFile);
      trans=transformerFactory.newTransformer(xsltSource);
      transformerCache.put(xslFilePath,trans);
    }
    trans.transform(xmlSource,result);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    try {
      if (output != null) {
        output.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception e1) {
      ExceptionHandler.process(e1);
    }
  }
}",0.7868480725623582
128910,"public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  IRepositoryView view=RepositoryManager.getRepositoryView();
  if (view != null) {
    if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
      view.refresh();
    }
  }
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
}",0.501002004008016
128911,"public void createInitialLayout(IPageLayout layout){
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  service.getBrandingConfiguration().initPerspective(layout);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      IRepositoryView view=RepositoryManager.getRepositoryView();
      if (view != null) {
        if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId) || IBrandingConfiguration.PERSPECTIVE_CAMEL_ID.equals(pId)) {
          view.refresh();
        }
      }
    }
  }
);
}","public void createInitialLayout(IPageLayout layout){
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  service.getBrandingConfiguration().initPerspective(layout);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
    }
  }
);
}",0.7721822541966427
128912,"@Override protected void setTableViewerCreatorOptions(TableViewerCreator<IMetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
  newTableViewerCreator.setLazyLoad(true);
}","@Override protected void setTableViewerCreatorOptions(TableViewerCreator<IMetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
}",0.8911392405063291
128913,"@Override protected void setTableViewerCreatorOptions(TableViewerCreator<MetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
  newTableViewerCreator.setLazyLoad(true);
}","@Override protected void setTableViewerCreatorOptions(TableViewerCreator<MetadataColumn> newTableViewerCreator){
  super.setTableViewerCreatorOptions(newTableViewerCreator);
}",0.8905852417302799
128914,"private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (    TableItem tableItem : tableItems) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItem.getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItem,tableItem.getData(),xmlViewer.getTree(),treeNode,false);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (  TreeItem element : children) {
    initLinker(element,tableItems);
  }
}","private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  Properties prop=System.getProperties();
  String os=prop.getProperty(""String_Node_Str"");
  boolean isLastOne=false;
  if (column != null) {
    for (    TableItem tableItem : tableItems) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItem.getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        if (os.startsWith(""String_Node_Str"")) {
          isLastOne=true;
        }
        linker.addLoopLink(tableItem,tableItem.getData(),xmlViewer.getTree(),treeNode,isLastOne);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (  TreeItem element : children) {
    initLinker(element,tableItems);
  }
}",0.8520055325034578
128915,"@Override public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    if (linker.linkSize() == 0) {
      linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
    }
  }
}","@Override public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}",0.9606741573033708
128916,"public void init(final Tree tree,Table[] tables,IBackgroundRefresher backgroundRefresher){
  super.init(tree,tables,delegateLinker,backgroundRefresher);
  tree.removeSelectionListener(getLinkableTree().getSelectionListener());
}","@Override public void init(final Tree tree,Table[] tables,IBackgroundRefresher backgroundRefresher){
  super.init(tree,tables,delegateLinker,backgroundRefresher);
  tree.removeSelectionListener(getLinkableTree().getSelectionListener());
}",0.9785407725321889
128917,"public void drawBackground(GC gc){
  delegateLinker.drawBackground(gc);
}","@Override public void drawBackground(GC gc){
  delegateLinker.drawBackground(gc);
}",0.935897435897436
128918,"private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  if (!(tableViewerCreator.getContentProvider() instanceof ILazyContentProvider)) {
    TableItem[] items=tableViewerCreator.getTable().getItems();
    List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
    for (    TableItem item : items) {
      TableItem tableItem=item;
      if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
        for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
          TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
          TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
          String idProperty=column.getId();
          TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
          if (tableEditor != null) {
            addedTableEditor.add(tableEditor);
          }
        }
      }
    }
    for (int i=indexStart; i < items.length; i++) {
      TableItem tableItem=items[i];
      Object data=tableItem.getData();
      Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
      for (      TableEditor tableEditor : tableEditorCollection) {
        tableEditor.setItem(tableItem);
      }
    }
    previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
  }
 else {
    refreshColumn(indexStart);
  }
}","private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  if (!(tableViewerCreator.getContentProvider() instanceof ILazyContentProvider)) {
    TableItem[] items=tableViewerCreator.getTable().getItems();
    List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
    for (    TableItem item : items) {
      TableItem tableItem=item;
      if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
        for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
          TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
          TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
          String idProperty=column.getId();
          TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
          if (tableEditor != null) {
            addedTableEditor.add(tableEditor);
          }
        }
      }
    }
    for (int i=indexStart; i < items.length; i++) {
      TableItem tableItem=items[i];
      Object data=tableItem.getData();
      Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
      for (      TableEditor tableEditor : tableEditorCollection) {
        tableEditor.setItem(tableItem);
      }
    }
    previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
  }
 else {
    for (int i=0; i < event.addedObjects.size(); i++) {
      refreshColumn(indexStart + i);
    }
  }
}",0.9764780673871584
128919,"public void refreshColumn(int index){
  Table table=tableViewerCreator.getTable();
  if (table.isDisposed()) {
    return;
  }
  for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
    TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
    TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
    String idProperty=column.getId();
    TableItem tableItem=table.getItems()[index];
    if (dataToMultipleDataEditor.containsKey(tableItem.getData())) {
      Collection<TableEditor> object=dataToMultipleDataEditor.getCollection(tableItem.getData());
      for (      TableEditor tableEditor : object) {
        tableEditor.setItem(tableItem);
        Control editor=tableEditor.getEditor();
        if (editor != null) {
          editor.redraw();
        }
      }
      if (object.size() == columnsWithEditorContent.size()) {
        break;
      }
 else {
        if (iEditorCol < object.size()) {
          continue;
        }
 else {
          addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
        }
      }
    }
 else {
      addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
    }
  }
}","public void refreshColumn(int index){
  Table table=tableViewerCreator.getTable();
  if (table.isDisposed() || index >= table.getItems().length) {
    return;
  }
  for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
    TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
    TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
    String idProperty=column.getId();
    TableItem tableItem=table.getItems()[index];
    if (dataToMultipleDataEditor.containsKey(tableItem.getData())) {
      Collection<TableEditor> object=dataToMultipleDataEditor.getCollection(tableItem.getData());
      for (      TableEditor tableEditor : object) {
        tableEditor.setItem(tableItem);
        Control editor=tableEditor.getEditor();
        if (editor != null) {
          editor.redraw();
        }
      }
      if (object.size() == columnsWithEditorContent.size()) {
        break;
      }
 else {
        if (iEditorCol < object.size()) {
          continue;
        }
 else {
          addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
        }
      }
    }
 else {
      addTableEditor(column,tableEditorContent,idProperty,table.getItems()[index]);
    }
  }
}",0.9858044164037856
128920,"public void setContentProvider(ILazyContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}","public void setContentProvider(IContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}",0.992
128921,"/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged) {
  }
}","/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged) {
    refreshTableEditorControls();
  }
}",0.9870327993897788
128922,"@Override protected void inputChanged(Object input,Object oldInput){
  if (input instanceof List) {
    int newSize=((List)input).size();
    int oldSize=0;
    if (oldInput instanceof List) {
      oldSize=((List)oldInput).size();
    }
    if (newSize != oldSize) {
      tableViewer.setItemCount(newSize);
    }
  }
  super.inputChanged(input,oldInput);
}","@Override protected void inputChanged(Object input,Object oldInput){
  if (input instanceof List && contentProvider instanceof ILazyContentProvider) {
    int newSize=((List)input).size();
    int oldSize=0;
    if (oldInput instanceof List) {
      oldSize=((List)oldInput).size();
    }
    if (newSize != oldSize) {
      tableViewer.setItemCount(newSize);
    }
  }
  super.inputChanged(input,oldInput);
}",0.9335071707953064
128923,"protected void attachContentProvider(){
  if (this.contentProvider == null) {
    this.contentProvider=new LazyContentProvider(this);
  }
  tableViewer.setContentProvider(this.contentProvider);
}","protected void attachContentProvider(){
  if (this.contentProvider == null) {
    this.contentProvider=new DefaultStructuredContentProvider(this);
  }
  tableViewer.setContentProvider(this.contentProvider);
}",0.9478908188585607
128924,"@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorColumn(index);
}","@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorColumn(index);
  if (!(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}",0.7183908045977011
128925,"/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,SWT.VIRTUAL | checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
      refreshTableEditorControls();
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorColumn(index);
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void inputChanged(    Object input,    Object oldInput){
      if (input instanceof List) {
        int newSize=((List)input).size();
        int oldSize=0;
        if (oldInput instanceof List) {
          oldSize=((List)oldInput).size();
        }
        if (newSize != oldSize) {
          tableViewer.setItemCount(newSize);
        }
      }
      super.inputChanged(input,oldInput);
    }
  }
;
  setTablePreferences();
  return table;
}","/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
      refreshTableEditorControls();
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorColumn(index);
      if (!(contentProvider instanceof ILazyContentProvider)) {
        refreshTableEditorControls();
      }
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void inputChanged(    Object input,    Object oldInput){
      if (input instanceof List && contentProvider instanceof ILazyContentProvider) {
        int newSize=((List)input).size();
        int oldSize=0;
        if (oldInput instanceof List) {
          oldSize=((List)oldInput).size();
        }
        if (newSize != oldSize) {
          tableViewer.setItemCount(newSize);
        }
      }
      super.inputChanged(input,oldInput);
    }
  }
;
  setTablePreferences();
  return table;
}",0.9611024672149366
128926,"public void refreshTableEditorColumn(int index){
  if (tableEditorManager != null) {
    tableEditorManager.refreshColumn(index);
  }
}","public void refreshTableEditorColumn(int index){
  if (tableEditorManager != null && contentProvider instanceof ILazyContentProvider) {
    tableEditorManager.refreshColumn(index);
  }
}",0.8411214953271028
128927,"/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        tableViewer.setItemCount(event.source.size());
        tableViewer.refresh();
      }
    }
  }
}","/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}",0.962753036437247
128928,"/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged) {
    refreshTableEditorControls();
  }
}","/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged && !(contentProvider instanceof ILazyContentProvider)) {
    refreshTableEditorControls();
  }
}",0.9800738007380074
128929,"/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  return style;
}","/** 
 * Initiate the style intended for instanciate <code>Table</code>.
 * @return int style
 */
protected int checkTableStyles(){
  int style=SWT.NONE;
  if (lineSelection != null) {
    style|=lineSelection.getSwtStyle();
  }
  if (showLineSelection != null) {
    style|=showLineSelection.getSwtStyle();
  }
  if (checkboxInFirstColumn) {
    style|=SWT.CHECK;
  }
  if (borderVisible) {
    style|=SWT.BORDER;
  }
  if (horizontalScroll) {
    style|=SWT.H_SCROLL;
  }
  if (verticalScroll) {
    style|=SWT.V_SCROLL;
  }
  if (lazyLoad) {
    style|=SWT.VIRTUAL;
  }
  return style;
}",0.9593639575971732
128930,"private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  TableItem[] items=tableViewerCreator.getTable().getItems();
  List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
  for (  TableItem item : items) {
    TableItem tableItem=item;
    if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
      for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
        TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
        TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
        String idProperty=column.getId();
        TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
        if (tableEditor != null) {
          addedTableEditor.add(tableEditor);
        }
      }
    }
  }
  for (int i=indexStart; i < items.length; i++) {
    TableItem tableItem=items[i];
    Object data=tableItem.getData();
    Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
    for (    TableEditor tableEditor : tableEditorCollection) {
      tableEditor.setItem(tableItem);
    }
  }
  previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
}","private void handleAddedEvent(final ListenableListEvent event){
  int indexStart=event.index;
  if (tableViewerCreator.getTable().isDisposed()) {
    return;
  }
  if (!(tableViewerCreator.getContentProvider() instanceof ILazyContentProvider)) {
    TableItem[] items=tableViewerCreator.getTable().getItems();
    List<TableEditor> addedTableEditor=new ArrayList<TableEditor>();
    for (    TableItem item : items) {
      TableItem tableItem=item;
      if (previousItemsHash == null || !previousItemsHash.contains(tableItem)) {
        for (int iEditorCol=0; iEditorCol < columnsWithEditorContent.size(); iEditorCol++) {
          TableViewerCreatorColumnNotModifiable column=columnsWithEditorContent.get(iEditorCol);
          TableEditorContentNotModifiable tableEditorContent=column.getTableEditorContent();
          String idProperty=column.getId();
          TableEditor tableEditor=addTableEditor(column,tableEditorContent,idProperty,tableItem);
          if (tableEditor != null) {
            addedTableEditor.add(tableEditor);
          }
        }
      }
    }
    for (int i=indexStart; i < items.length; i++) {
      TableItem tableItem=items[i];
      Object data=tableItem.getData();
      Collection<TableEditor> tableEditorCollection=dataToMultipleDataEditor.getCollection(data);
      for (      TableEditor tableEditor : tableEditorCollection) {
        tableEditor.setItem(tableItem);
      }
    }
    previousItemsHash=new HashSet<TableItem>(Arrays.asList(items));
  }
 else {
    refreshColumn(indexStart);
  }
}",0.8717594192879364
128931,"/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}","/** 
 * DOC amaumont Comment method ""handleListenableListEvent"".
 * @param event
 */
protected void handleAfterListenableListOperationEvent(ListenableListEvent<B> event){
  if (tableViewerCreator.getTable() != null && !tableViewerCreator.getTable().isDisposed()) {
    TableViewer tableViewer=tableViewerCreator.getTableViewer();
    if (event.type == TYPE.LIST_REGISTERED && tableViewerCreator.getInputList() == null && getExtendedTableModel().isDataRegistered()) {
      tableViewerCreator.setInputList(getBeansList());
      new AsynchronousThreading(100,true,tableViewerCreator.getTable().getDisplay(),new Runnable(){
        public void run(){
          tableViewerCreator.layout();
        }
      }
).start();
    }
 else {
      if (event.type == TYPE.ADDED) {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
 else       if (event.type == TYPE.SWAPED) {
        Object[] swapedObjects=event.swapedObjects;
        for (        Object data : swapedObjects) {
          tableViewer.refresh(data,true,true);
        }
      }
 else       if (event.type == TYPE.REMOVED) {
      }
 else {
        if (tableViewer.getContentProvider() instanceof ILazyContentProvider) {
          tableViewer.setItemCount(event.source.size());
        }
        tableViewer.refresh();
      }
    }
  }
}",0.9457364341085271
128932,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    outputMetaView=new MetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new MetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataTool.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataTool.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataTool.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataTool.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    outputMetaView=new MetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str""),outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataTool.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataTool.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataTool.copyTable(getInputMetaData(),getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataTool.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataTool.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str""),outputReadOnly,true,true,false);
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      copyToOutput.setEnabled(false);
      copySelectionToOutput.setEnabled(false);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataTool.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
    }
  }
);
  return composite;
}",0.9990371242109768
128933,"public void setReadAction(boolean readAction){
  this.readAction=readAction;
}","@Override public void setReadAction(boolean readAction){
  this.readAction=readAction;
}",0.9397590361445785
128934,"public boolean isReadAction(){
  return readAction;
}","@Override public boolean isReadAction(){
  return readAction;
}",0.913793103448276
128935,"/** 
 * Returns the class on wich this action may be call by double-click.
 * @return the class on wich this action may be call by double-click
 */
public Class getClassForDoubleClick(){
  return null;
}","/** 
 * Returns the class on wich this action may be call by double-click.
 * @return the class on wich this action may be call by double-click
 */
@Override public Class getClassForDoubleClick(){
  return null;
}",0.9759615384615384
128936,"public void setGroupId(String groupId){
  this.groupId=groupId;
}","@Override public void setGroupId(String groupId){
  this.groupId=groupId;
}",0.9285714285714286
128937,"public boolean isEditAction(){
  return editAction;
}","@Override public boolean isEditAction(){
  return editAction;
}",0.913793103448276
128938,"/** 
 * Display a ""Save job"" prompt dialog if the job eidtor of the selectedNode is unsaved.
 */
protected void promptForSavingIfNecessary(RepositoryNode selectedNode){
  try {
    IEditorReference[] references=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
    if (references == null || references.length == 0) {
      return;
    }
    String label=selectedNode.getObject().getProperty().getLabel();
    for (int i=0; i < references.length; i++) {
      IEditorPart part=references[i].getEditor(false);
      if (part == null || part.isDirty() == false) {
        continue;
      }
      IEditorInput input=part.getEditorInput();
      if (label.equals(input.getName())) {
        if (promptForSavingDialog(part) == ISaveablePart2.YES) {
          part.doSave(new NullProgressMonitor());
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * Display a ""Save job"" prompt dialog if the job eidtor of the selectedNode is unsaved.
 */
protected void promptForSavingIfNecessary(RepositoryNode selectedNode){
  try {
    IEditorReference[] references=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
    if (references == null || references.length == 0) {
      return;
    }
    String label=selectedNode.getObject().getProperty().getLabel();
    for (    IEditorReference reference : references) {
      IEditorPart part=reference.getEditor(false);
      if (part == null || part.isDirty() == false) {
        continue;
      }
      IEditorInput input=part.getEditorInput();
      if (label.equals(input.getName())) {
        if (promptForSavingDialog(part) == ISaveablePart2.YES) {
          part.doSave(new NullProgressMonitor());
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.949353448275862
128939,"public String getGroupId(){
  return this.groupId;
}","@Override public String getGroupId(){
  return this.groupId;
}",0.912280701754386
128940,"/** 
 * Sets the level.
 * @param level the level to set
 */
public void setLevel(int level){
  this.level=level;
}","/** 
 * Sets the level.
 * @param level the level to set
 */
@Override public void setLevel(int level){
  this.level=level;
}",0.9583333333333334
128941,"public boolean isPropertiesAction(){
  return propertiesAction;
}","@Override public boolean isPropertiesAction(){
  return propertiesAction;
}",0.9285714285714286
128942,"/** 
 * Returns if this action is accessible by double-click.
 * @return <code>true</code> if action is accessible by double-click, <code>true</code> otherwise
 */
public final boolean isDoubleClickAction(){
  return getClassForDoubleClick() != null;
}","/** 
 * Returns if this action is accessible by double-click.
 * @return <code>true</code> if action is accessible by double-click, <code>true</code> otherwise
 */
@Override public final boolean isDoubleClickAction(){
  return getClassForDoubleClick() != null;
}",0.980544747081712
128943,"/** 
 * Sets the workbenchPart.
 * @param workbenchPart the workbenchPart to set
 */
public void setWorkbenchPart(IWorkbenchPart workbenchPart){
  this.workbenchPart=workbenchPart;
}","/** 
 * Sets the workbenchPart.
 * @param workbenchPart the workbenchPart to set
 */
@Override public void setWorkbenchPart(IWorkbenchPart workbenchPart){
  this.workbenchPart=workbenchPart;
}",0.9732620320855616
128944,"public void setSpecialSelection(ISelectionProvider selectionProvider){
  this.specialSelectionProvider=selectionProvider;
}","@Override public void setSpecialSelection(ISelectionProvider selectionProvider){
  this.specialSelectionProvider=selectionProvider;
}",0.9609375
128945,"public boolean isVisible(){
  return isEnabled();
}","@Override public boolean isVisible(){
  return isEnabled();
}",0.9107142857142856
128946,"protected boolean isLastVersion(RepositoryNode repositoryObject){
  if (repositoryObject.getObject() instanceof RepositoryViewObject) {
    return true;
  }
  try {
    if (repositoryObject.getObject() != null) {
      Property property=repositoryObject.getObject().getProperty();
      Item item=repositoryObject.getObject().getProperty().getItem();
      if (item instanceof ConnectionItem) {
        return true;
      }
      List<IRepositoryViewObject> allVersion=null;
      ItemState state=property.getItem().getState();
      boolean pathExist=false;
      if (state != null) {
        String path=state.getPath();
        if (path != null) {
          File f=new File(path);
          if (f.exists()) {
            pathExist=true;
          }
        }
      }
      if (pathExist) {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId(),state.getPath(),repositoryObject.getObject().getRepositoryObjectType());
      }
 else {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId());
      }
      if (allVersion == null || allVersion.isEmpty()) {
        return false;
      }
      String lastVersion=VersionUtils.DEFAULT_VERSION;
      for (      IRepositoryViewObject object : allVersion) {
        if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
          lastVersion=object.getVersion();
        }
      }
      if (VersionUtils.compareTo(property.getVersion(),lastVersion) == 0) {
        return true;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return false;
}","protected boolean isLastVersion(RepositoryNode repositoryObject){
  if (repositoryObject.getObject() instanceof RepositoryViewObject) {
    return true;
  }
  try {
    if (repositoryObject.getObject() != null) {
      Property property=repositoryObject.getObject().getProperty();
      Item item=repositoryObject.getObject().getProperty().getItem();
      if (item instanceof ConnectionItem) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          if (service != null) {
            boolean flag=service.isServiceItem(item.eClass().getClassifierID());
            if (!flag) {
              return true;
            }
          }
        }
      }
      List<IRepositoryViewObject> allVersion=null;
      ItemState state=property.getItem().getState();
      boolean pathExist=false;
      if (state != null) {
        String path=state.getPath();
        if (path != null) {
          File f=new File(path);
          if (f.exists()) {
            pathExist=true;
          }
        }
      }
      if (pathExist) {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId(),state.getPath(),repositoryObject.getObject().getRepositoryObjectType());
      }
 else {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId());
      }
      if (allVersion == null || allVersion.isEmpty()) {
        return false;
      }
      String lastVersion=VersionUtils.DEFAULT_VERSION;
      for (      IRepositoryViewObject object : allVersion) {
        if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
          lastVersion=object.getVersion();
        }
      }
      if (VersionUtils.compareTo(property.getVersion(),lastVersion) == 0) {
        return true;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return false;
}",0.8904827586206897
128947,"/** 
 * Getter for level.
 * @return the level
 */
public int getLevel(){
  return this.level;
}","/** 
 * Getter for level.
 * @return the level
 */
@Override public int getLevel(){
  return this.level;
}",0.9504950495049505
128948,"private RepositoryNode searchRepositoryNode(IRepositoryNode root,ERepositoryObjectType type){
  if (root == null || type == null) {
    return null;
  }
  IRepositoryNode foundNode=null;
  List<IRepositoryNode> chindren=root.getChildren();
  for (  IRepositoryNode repositoryNode : chindren) {
    if (repositoryNode.getContentType() == type) {
      foundNode=repositoryNode;
    }
 else {
      foundNode=searchRepositoryNode((RepositoryNode)repositoryNode,type);
    }
    if (foundNode != null) {
      return (RepositoryNode)foundNode;
    }
  }
  return null;
}","private RepositoryNode searchRepositoryNode(IRepositoryNode root,ERepositoryObjectType type){
  if (root == null || type == null) {
    return null;
  }
  IRepositoryNode foundNode=null;
  List<IRepositoryNode> chindren=root.getChildren();
  for (  IRepositoryNode repositoryNode : chindren) {
    if (repositoryNode.getContentType() == type) {
      foundNode=repositoryNode;
    }
 else {
      foundNode=searchRepositoryNode(repositoryNode,type);
    }
    if (foundNode != null) {
      return (RepositoryNode)foundNode;
    }
  }
  return null;
}",0.9856887298747764
128949,"public void setPropertiesAction(boolean propertiesAction){
  this.propertiesAction=propertiesAction;
}","@Override public void setPropertiesAction(boolean propertiesAction){
  this.propertiesAction=propertiesAction;
}",0.9532710280373832
128950,"public void setEditAction(boolean editAction){
  this.editAction=editAction;
}","@Override public void setEditAction(boolean editAction){
  this.editAction=editAction;
}",0.9397590361445785
128951,"@Override public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    if ((item instanceof JobletProcessItem || item instanceof ProcessItem) && getStatus(item) == ERepositoryStatus.LOCK_BY_USER) {
      String docId=item.getProperty().getId() + ""String_Node_Str"";
      IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
      if (repositoryViewObject != null) {
        Property property=repositoryViewObject.getProperty();
        Item documentationItem=property.getItem();
        this.repositoryFactoryFromProvider.lock(documentationItem);
      }
    }
    notifyLock(item,true);
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}","@Override public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    notifyLock(item,true);
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}",0.5592055003819709
128952,"@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}","@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}",0.7182435964453737
128953,"protected boolean isLastVersion(RepositoryNode repositoryObject){
  if (repositoryObject.getObject() instanceof RepositoryViewObject) {
    return true;
  }
  try {
    if (repositoryObject.getObject() != null) {
      Property property=repositoryObject.getObject().getProperty();
      Item item=repositoryObject.getObject().getProperty().getItem();
      if (item instanceof ConnectionItem) {
        return true;
      }
      List<IRepositoryViewObject> allVersion=null;
      ItemState state=property.getItem().getState();
      boolean pathExist=false;
      if (state != null) {
        String path=state.getPath();
        if (path != null) {
          File f=new File(path);
          if (f.exists()) {
            pathExist=true;
          }
        }
      }
      if (pathExist) {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId(),state.getPath(),repositoryObject.getObject().getRepositoryObjectType());
      }
 else {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId());
      }
      if (allVersion == null || allVersion.isEmpty()) {
        return false;
      }
      String lastVersion=VersionUtils.DEFAULT_VERSION;
      for (      IRepositoryViewObject object : allVersion) {
        if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
          lastVersion=object.getVersion();
        }
      }
      if (VersionUtils.compareTo(property.getVersion(),lastVersion) == 0) {
        return true;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return false;
}","protected boolean isLastVersion(RepositoryNode repositoryObject){
  if (repositoryObject.getObject() instanceof RepositoryViewObject) {
    return true;
  }
  try {
    if (repositoryObject.getObject() != null) {
      Property property=repositoryObject.getObject().getProperty();
      Item item=repositoryObject.getObject().getProperty().getItem();
      if (item instanceof ConnectionItem) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          if (service != null) {
            boolean flag=service.isServiceItem(item.eClass().getClassifierID());
            if (!flag) {
              return true;
            }
          }
        }
      }
      List<IRepositoryViewObject> allVersion=null;
      ItemState state=property.getItem().getState();
      boolean pathExist=false;
      if (state != null) {
        String path=state.getPath();
        if (path != null) {
          File f=new File(path);
          if (f.exists()) {
            pathExist=true;
          }
        }
      }
      if (pathExist) {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId(),state.getPath(),repositoryObject.getObject().getRepositoryObjectType());
      }
 else {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId());
      }
      if (allVersion == null || allVersion.isEmpty()) {
        return false;
      }
      String lastVersion=VersionUtils.DEFAULT_VERSION;
      for (      IRepositoryViewObject object : allVersion) {
        if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
          lastVersion=object.getVersion();
        }
      }
      if (VersionUtils.compareTo(property.getVersion(),lastVersion) == 0) {
        return true;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return false;
}",0.8904827586206897
128954,"protected boolean isLastVersion(RepositoryNode repositoryObject){
  if (repositoryObject.getObject() instanceof RepositoryViewObject) {
    return true;
  }
  try {
    if (repositoryObject.getObject() != null) {
      Property property=repositoryObject.getObject().getProperty();
      Item item=repositoryObject.getObject().getProperty().getItem();
      if (item instanceof ConnectionItem) {
        return true;
      }
      List<IRepositoryViewObject> allVersion=null;
      ItemState state=property.getItem().getState();
      boolean pathExist=false;
      if (state != null) {
        String path=state.getPath();
        if (path != null) {
          File f=new File(path);
          if (f.exists()) {
            pathExist=true;
          }
        }
      }
      if (pathExist) {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId(),state.getPath(),repositoryObject.getObject().getRepositoryObjectType());
      }
 else {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId());
      }
      if (allVersion == null || allVersion.isEmpty()) {
        return false;
      }
      String lastVersion=VersionUtils.DEFAULT_VERSION;
      for (      IRepositoryViewObject object : allVersion) {
        if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
          lastVersion=object.getVersion();
        }
      }
      if (VersionUtils.compareTo(property.getVersion(),lastVersion) == 0) {
        return true;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return false;
}","protected boolean isLastVersion(RepositoryNode repositoryObject){
  if (repositoryObject.getObject() instanceof RepositoryViewObject) {
    return true;
  }
  try {
    if (repositoryObject.getObject() != null) {
      Property property=repositoryObject.getObject().getProperty();
      Item item=repositoryObject.getObject().getProperty().getItem();
      if (item instanceof ConnectionItem) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          if (service != null) {
            boolean flag=service.isServiceItem(item.eClass().getClassifierID());
            if (!flag) {
              return true;
            }
          }
        }
      }
      List<IRepositoryViewObject> allVersion=null;
      ItemState state=property.getItem().getState();
      boolean pathExist=false;
      if (state != null) {
        String path=state.getPath();
        if (path != null) {
          File f=new File(path);
          if (f.exists()) {
            pathExist=true;
          }
        }
      }
      if (pathExist) {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId(),state.getPath(),repositoryObject.getObject().getRepositoryObjectType());
      }
 else {
        allVersion=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getAllVersion(property.getId());
      }
      if (allVersion == null || allVersion.isEmpty()) {
        return false;
      }
      String lastVersion=VersionUtils.DEFAULT_VERSION;
      for (      IRepositoryViewObject object : allVersion) {
        if (VersionUtils.compareTo(object.getVersion(),lastVersion) > 0) {
          lastVersion=object.getVersion();
        }
      }
      if (VersionUtils.compareTo(property.getVersion(),lastVersion) == 0) {
        return true;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return false;
}",0.8904827586206897
128955,"@Override public String getComponentValue(Connection connection,String value){
  if (value != null && canHandle(connection)) {
    ExampleDemoConnection demoConn=(ExampleDemoConnection)connection;
    if (""String_Node_Str"".equals(value)) {
      return demoConn.getType();
    }
 else     if (""String_Node_Str"".equals(value)) {
      return Boolean.toString(demoConn.isValid());
    }
  }
  return null;
}","@Override public String getComponentValue(Connection connection,String value,IMetadataTable table){
  if (value != null && canHandle(connection)) {
    ExampleDemoConnection demoConn=(ExampleDemoConnection)connection;
    if (""String_Node_Str"".equals(value)) {
      return demoConn.getType();
    }
 else     if (""String_Node_Str"".equals(value)) {
      return Boolean.toString(demoConn.isValid());
    }
  }
  return null;
}",0.9747292418772564
128956,"@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}","@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (hasLockedItems(type,path)) {
    throw new PersistenceException(""String_Node_Str"");
  }
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}",0.9249201277955272
128957,"@Override public synchronized void deleteFolder(Project project,ERepositoryObjectType type,IPath path,boolean fromEmptyRecycleBin) throws PersistenceException {
  this.repositoryFactoryFromProvider.deleteFolder(project,type,path,fromEmptyRecycleBin);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_DELETE.getName(),path,type);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_DELETE.getName(),path,type);
  }
}","@Override public synchronized void deleteFolder(Project project,ERepositoryObjectType type,IPath path,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (hasLockedItems(type,path)) {
    throw new PersistenceException(""String_Node_Str"");
  }
  this.repositoryFactoryFromProvider.deleteFolder(project,type,path,fromEmptyRecycleBin);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_DELETE.getName(),path,type);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_DELETE.getName(),path,type);
  }
}",0.9202037351443124
128958,"@Override public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  this.repositoryFactoryFromProvider.moveFolder(type,sourcePath,targetPath);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_MOVE.getName(),sourcePath,targetPath);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_MOVE.getName(),sourcePath,targetPath);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,targetPath.append(sourcePath.lastSegment()));
}","@Override public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (hasLockedItems(type,sourcePath)) {
    throw new PersistenceException(""String_Node_Str"");
  }
  this.repositoryFactoryFromProvider.moveFolder(type,sourcePath,targetPath);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_MOVE.getName(),sourcePath,targetPath);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_MOVE.getName(),sourcePath,targetPath);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,targetPath.append(sourcePath.lastSegment()));
}",0.9250374812593704
128959,"@Override public void moveObject(IRepositoryViewObject objToMove,IPath newPath) throws PersistenceException {
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
  IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
  FolderItem folderItem=getFolderItem(project,itemType,newPath);
  List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
  for (  IRepositoryViewObject oject : objects) {
    if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
      throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
    }
  }
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
  for (  IRepositoryViewObject obj : allVersionToMove) {
    Item currentItem=obj.getProperty().getItem();
    if (currentItem.getParent() instanceof FolderItem) {
      ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
    }
    FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
    newFolderItem.getChildren().add(currentItem);
    currentItem.setParent(newFolderItem);
    ItemState state=obj.getProperty().getItem().getState();
    state.setPath(newPath.toString());
    xmiResourceManager.saveResource(state.eResource());
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
    for (    Resource resource : affectedResources) {
      IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
      Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
      List<Resource> needSaves=new ArrayList<Resource>();
      for (      EObject object : find.keySet()) {
        Resource re=object.eResource();
        if (re == null) {
          continue;
        }
        EcoreUtil.resolveAll(re);
        needSaves.add(re);
      }
      xmiResourceManager.moveResource(resource,path);
      AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
      if (resChangeService != null) {
        for (        Resource toSave : needSaves) {
          resChangeService.saveResourceByEMFShared(toSave);
        }
      }
    }
    affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  saveProject(project);
}","@Override public void moveObject(IRepositoryViewObject objToMove,IPath newPath) throws PersistenceException {
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
  IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
  FolderItem folderItem=getFolderItem(project,itemType,newPath);
  List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
  for (  IRepositoryViewObject oject : objects) {
    if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
      throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
    }
  }
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
  for (  IRepositoryViewObject obj : allVersionToMove) {
    Item currentItem=obj.getProperty().getItem();
    if (currentItem.getParent() instanceof FolderItem) {
      ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
    }
    FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
    newFolderItem.getChildren().add(currentItem);
    currentItem.setParent(newFolderItem);
    ItemState state=obj.getProperty().getItem().getState();
    state.setPath(newPath.toString());
    xmiResourceManager.saveResource(state.eResource());
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
    for (    Resource resource : affectedResources) {
      IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
      Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
      List<Resource> needSaves=new ArrayList<Resource>();
      for (      EObject object : find.keySet()) {
        Resource re=object.eResource();
        if (re == null) {
          continue;
        }
        EcoreUtil.resolveAll(re);
        needSaves.add(re);
      }
      moveResource(resource,path);
      AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
      if (resChangeService != null) {
        for (        Resource toSave : needSaves) {
          resChangeService.saveResourceByEMFShared(toSave);
        }
      }
    }
    affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
    for (    Resource resource : affectedResources) {
      xmiResourceManager.saveResource(resource);
    }
  }
  saveProject(project);
}",0.996807259284154
128960,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    IPath targetPath=sourcePath.removeLastSegments(1);
    Project project=getRepositoryContext().getProject();
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
    String completeNewPath;
    if (targetPath.isEmpty()) {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
    }
 else {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
    }
    if (completeNewPath.equals(completeOldPath)) {
      return;
    }
    IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
    FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
    FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
    if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
      IPath path=new Path(sourcePath.toString());
      ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
      emfFolder=folderHelper.getFolder(completeOldPath);
    }
    createFolder(getRepositoryContext().getProject(),type,targetPath,label);
    FolderItem newFolder=folderHelper.getFolder(completeNewPath);
    Item[] childrens=(Item[])emfFolder.getChildren().toArray();
    for (    Item children2 : childrens) {
      if (children2 instanceof FolderItem) {
        FolderItem children=(FolderItem)children2;
        moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
      }
 else {
        moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
      }
    }
    List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        xmiResourceManager.moveResource(resource,path);
      }
    }
    deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
    xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
  }
 catch (  PersistenceException e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    IPath targetPath=sourcePath.removeLastSegments(1);
    Project project=getRepositoryContext().getProject();
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
    String completeNewPath;
    if (targetPath.isEmpty()) {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
    }
 else {
      completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
    }
    if (completeNewPath.equals(completeOldPath)) {
      return;
    }
    IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
    FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
    FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
    if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
      IPath path=new Path(sourcePath.toString());
      ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
      emfFolder=folderHelper.getFolder(completeOldPath);
    }
    createFolder(getRepositoryContext().getProject(),type,targetPath,label);
    FolderItem newFolder=folderHelper.getFolder(completeNewPath);
    Item[] childrens=(Item[])emfFolder.getChildren().toArray();
    for (    Item children2 : childrens) {
      if (children2 instanceof FolderItem) {
        FolderItem children=(FolderItem)children2;
        moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
      }
 else {
        moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
      }
    }
    List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
    for (    IRepositoryViewObject object : serializableFromFolder) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
      for (      Resource resource : affectedResources) {
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        moveResource(resource,path);
      }
    }
    deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
    xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
  }
 catch (  PersistenceException e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}",0.9966543405529142
128961,"private void moveOldContentToNewFolder(Project project,String completeNewPath,FolderItem emfFolder,FolderItem newFolder,Item child) throws PersistenceException {
  emfFolder.getChildren().remove(child);
  newFolder.getChildren().add(child);
  child.setParent(newFolder);
  List<Resource> affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
    Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
    List<Resource> needSaves=new ArrayList<Resource>();
    for (    EObject object : find.keySet()) {
      Resource re=object.eResource();
      if (re == null) {
        continue;
      }
      EcoreUtil.resolveAll(re);
      needSaves.add(re);
    }
    xmiResourceManager.moveResource(resource,path);
    AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
    if (resChangeService != null) {
      for (      Resource toSave : needSaves) {
        resChangeService.saveResourceByEMFShared(toSave);
      }
    }
  }
  affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    xmiResourceManager.saveResource(resource);
  }
}","private void moveOldContentToNewFolder(Project project,String completeNewPath,FolderItem emfFolder,FolderItem newFolder,Item child) throws PersistenceException {
  emfFolder.getChildren().remove(child);
  newFolder.getChildren().add(child);
  child.setParent(newFolder);
  List<Resource> affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
    Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
    List<Resource> needSaves=new ArrayList<Resource>();
    for (    EObject object : find.keySet()) {
      Resource re=object.eResource();
      if (re == null) {
        continue;
      }
      EcoreUtil.resolveAll(re);
      needSaves.add(re);
    }
    moveResource(resource,path);
    AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
    if (resChangeService != null) {
      for (      Resource toSave : needSaves) {
        resChangeService.saveResourceByEMFShared(toSave);
      }
    }
  }
  affectedResources=xmiResourceManager.getAffectedResources(child.getProperty());
  for (  Resource resource : affectedResources) {
    xmiResourceManager.saveResource(resource);
  }
}",0.9933169187478016
128962,"@Override public Folder createFolder(Project project,ERepositoryObjectType type,IPath path,String label,boolean isImportItem) throws PersistenceException {
  if (type == null) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  if (path == null) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  if (label == null || label.length() == 0) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  IProject fsProject=ResourceModelUtils.getProject(project);
  String parentPath=ERepositoryObjectType.getFolderName(type);
  if (!path.isEmpty()) {
    parentPath+=IPath.SEPARATOR + path.toString();
  }
  String completePath=parentPath + IPath.SEPARATOR + label;
  FolderItem folderItem=getFolderHelper(project.getEmfProject()).createFolder(completePath);
  IFolder folder=ResourceUtils.getFolder(fsProject,completePath,false);
  if (!folder.exists()) {
    ResourceUtils.createFolder(folder);
  }
  return new Folder(folderItem.getProperty(),type);
}","protected void createFolder(IFolder folder) throws PersistenceException {
  ResourceUtils.createFolder(folder);
}",0.1637931034482758
128963,"@Override public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","@Override public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (  Item children2 : childrens) {
    if (children2 instanceof FolderItem) {
      FolderItem children=(FolderItem)children2;
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.9329943708007988
128964,"private void renameFolderExecute(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            xmiResourceManager.moveResource(resource,path);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}","private void renameFolderExecute(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            moveResource(resource,path);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}",0.9973228124559672
128965,"@Override public void setMigrationTasksDone(Project project,List<MigrationTask> list) throws PersistenceException {
  project.getEmfProject().getMigrationTask().clear();
  project.getEmfProject().getMigrationTask().addAll(list);
  saveProject(project);
}","@Override public void setMigrationTasksDone(Project project,List<MigrationTask> list) throws PersistenceException {
  List oldMigrationTasks=project.getEmfProject().getMigrationTask();
  if (oldMigrationTasks.size() == list.size()) {
    return;
  }
  project.getEmfProject().getMigrationTask().clear();
  project.getEmfProject().getMigrationTask().addAll(list);
  saveProject(project);
}",0.7632398753894081
128966,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (sourceFileOpening(node)) {
              continue;
            }
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            RepositoryManager.refresh(types);
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (sourceFileOpening(node)) {
              continue;
            }
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            RepositoryManager.refresh(types);
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9612421618393552
128967,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    factory.deleteObjectLogical(objToDelete);
  }
}","private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
      Item item=objToDelete.getProperty().getItem();
      IProcess iProcess=coreService.getProcessFromItem(item);
      if (iProcess != null && iProcess instanceof IProcess2) {
        IProcess2 process=(IProcess2)iProcess;
        process.removeProblems4ProcessDeleted();
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}",0.8723563075391888
128968,"public void applyEditorValue(){
  String text=getControl().getText();
  onValueChanged(text,true,property);
}","@Override public void applyEditorValue(){
  String text=getControl().getText();
  onValueChanged(text,true,property);
}",0.956140350877193
128969,"public List<FOXTreeNode> getTreeData(){
  return treeData;
}","@Override public List<FOXTreeNode> getTreeData(){
  return treeData;
}",0.9230769230769232
128970,"private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (int i=0; i < tableItems.length; i++) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItems[i].getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItems[i],tableItems[i].getData(),xmlViewer.getTree(),treeNode,false);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (int i=0; i < children.length; i++) {
    initLinker(children[i],tableItems);
  }
}","private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (    TableItem tableItem : tableItems) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItem.getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItem,tableItem.getData(),xmlViewer.getTree(),treeNode,false);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (  TreeItem element : children) {
    initLinker(element,tableItems);
  }
}",0.756155679110405
128971,"protected FOXTreeNode addElement(FOXTreeNode current,String currentPath,String newPath,String defaultValue){
  String name=newPath.substring(newPath.lastIndexOf(""String_Node_Str"") + 1);
  String parentPath=newPath.substring(0,newPath.lastIndexOf(""String_Node_Str""));
  FOXTreeNode temp=new Element(name,defaultValue);
  if (current == null) {
    return temp;
  }
  if (currentPath.equals(parentPath)) {
    current.addChild(temp);
  }
 else {
    String[] nods=currentPath.split(""String_Node_Str"");
    String[] newNods=parentPath.split(""String_Node_Str"");
    int parentLevel=0;
    int checkLength=nods.length < newNods.length ? nods.length : newNods.length;
    for (int i=1; i < checkLength; i++) {
      if (nods[i].equals(newNods[i])) {
        parentLevel=i;
      }
    }
    FOXTreeNode parent=current;
    for (int i=0; i < nods.length - (parentLevel + 1); i++) {
      FOXTreeNode tmpParent=parent.getParent();
      if (tmpParent == null) {
        break;
      }
      parent=tmpParent;
    }
    if (parent != null)     parent.addChild(temp);
  }
  return temp;
}","protected FOXTreeNode addElement(FOXTreeNode current,String currentPath,String newPath,String defaultValue){
  String name=newPath.substring(newPath.lastIndexOf(""String_Node_Str"") + 1);
  String parentPath=newPath.substring(0,newPath.lastIndexOf(""String_Node_Str""));
  FOXTreeNode temp=new Element(name,defaultValue);
  if (current == null) {
    return temp;
  }
  if (currentPath.equals(parentPath)) {
    current.addChild(temp);
  }
 else {
    String[] nods=currentPath.split(""String_Node_Str"");
    String[] newNods=parentPath.split(""String_Node_Str"");
    int parentLevel=0;
    int checkLength=nods.length < newNods.length ? nods.length : newNods.length;
    for (int i=1; i < checkLength; i++) {
      if (nods[i].equals(newNods[i])) {
        parentLevel=i;
      }
    }
    FOXTreeNode parent=current;
    for (int i=0; i < nods.length - (parentLevel + 1); i++) {
      FOXTreeNode tmpParent=parent.getParent();
      if (tmpParent == null) {
        break;
      }
      parent=tmpParent;
    }
    if (parent != null) {
      parent.addChild(temp);
    }
  }
  return temp;
}",0.9833795013850416
128972,"public void menuAboutToShow(IMenuManager manager){
  fillContextMenu(manager);
}","@Override public void menuAboutToShow(IMenuManager manager){
  fillContextMenu(manager);
}",0.9411764705882352
128973,"public MetadataTable getMetadataTable(){
  return ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0];
}","@Override public MetadataTable getMetadataTable(){
  return ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0];
}",0.9626865671641792
128974,"public void setSelectedText(String label){
  selectedText=label;
}","@Override public void setSelectedText(String label){
  selectedText=label;
}",0.9295774647887324
128975,"public void updateConnection(){
  ConnectionHelper.getTables(getConnection());
  EList root=getConnection().getRoot();
  EList loop=getConnection().getLoop();
  EList group=getConnection().getGroup();
  root.clear();
  loop.clear();
  group.clear();
  List<FOXTreeNode> node=(List<FOXTreeNode>)xmlViewer.getInput();
  FOXTreeNode foxTreeNode=node.get(0);
  if (foxTreeNode != null) {
    initNodeOrder(foxTreeNode);
    if (!foxTreeNode.isLoop()) {
      tableLoader((Element)foxTreeNode,""String_Node_Str"",root,foxTreeNode.getDefaultValue());
    }
    Element loopNode=(Element)TreeUtil.getLoopNode(foxTreeNode);
    if (loopNode != null) {
      String path=TreeUtil.getPath(loopNode);
      tableLoader(loopNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),loop,loopNode.getDefaultValue());
    }
    Element groupNode=(Element)TreeUtil.getGroupNode(foxTreeNode);
    if (groupNode != null) {
      String path=TreeUtil.getPath(groupNode);
      tableLoader(groupNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),group,groupNode.getDefaultValue());
    }
  }
}","@Override public void updateConnection(){
  ConnectionHelper.getTables(getConnection());
  EList root=getConnection().getRoot();
  EList loop=getConnection().getLoop();
  EList group=getConnection().getGroup();
  root.clear();
  loop.clear();
  group.clear();
  List<FOXTreeNode> node=(List<FOXTreeNode>)xmlViewer.getInput();
  FOXTreeNode foxTreeNode=node.get(0);
  if (foxTreeNode != null) {
    initNodeOrder(foxTreeNode);
    if (!foxTreeNode.isLoop()) {
      tableLoader((Element)foxTreeNode,""String_Node_Str"",root,foxTreeNode.getDefaultValue());
    }
    Element loopNode=(Element)TreeUtil.getLoopNode(foxTreeNode);
    if (loopNode != null) {
      String path=TreeUtil.getPath(loopNode);
      tableLoader(loopNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),loop,loopNode.getDefaultValue());
    }
    Element groupNode=(Element)TreeUtil.getGroupNode(foxTreeNode);
    if (groupNode != null) {
      String path=TreeUtil.getPath(groupNode);
      tableLoader(groupNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),group,groupNode.getDefaultValue());
    }
  }
}",0.9953959484346224
128976,"public boolean canModify(Object element,String property){
  FOXTreeNode node=(FOXTreeNode)element;
  if (property.equals(""String_Node_Str"")) {
    if (node.getLabel() != null && node.getLabel().length() > 0) {
      return true;
    }
  }
  if (property.equals(""String_Node_Str"")) {
    if (node.getDefaultValue() != null && node.getDefaultValue().length() > 0) {
      return true;
    }
  }
  return false;
}","@Override public boolean canModify(Object element,String property){
  FOXTreeNode node=(FOXTreeNode)element;
  if (property.equals(""String_Node_Str"")) {
    if (node.getLabel() != null && node.getLabel().length() > 0) {
      return true;
    }
  }
  if (property.equals(""String_Node_Str"")) {
    if (node.getDefaultValue() != null && node.getDefaultValue().length() > 0) {
      return true;
    }
  }
  return false;
}",0.9879518072289156
128977,"public void editorValueChanged(boolean oldValidState,boolean newValidState){
  onValueChanged(getControl().getText(),false,property);
}","@Override public void editorValueChanged(boolean oldValidState,boolean newValidState){
  onValueChanged(getControl().getText(),false,property);
}",0.9642857142857144
128978,"public void cancelEditor(){
}","@Override public void cancelEditor(){
}",0.8529411764705882
128979,"public TableViewer getSchemaViewer(){
  return this.schemaViewer;
}","@Override public TableViewer getSchemaViewer(){
  return this.schemaViewer;
}",0.9305555555555556
128980,"private void displayRootCombo(boolean visible){
  if (rootCombo == null)   return;
  rootCombo.setVisible(visible);
  GridData layoutData=(GridData)rootCombo.getLayoutData();
  layoutData.exclude=!visible;
  rootCombo.getParent().layout();
}","private void displayRootCombo(boolean visible){
  if (rootCombo == null) {
    return;
  }
  rootCombo.setVisible(visible);
  GridData layoutData=(GridData)rootCombo.getLayoutData();
  layoutData.exclude=!visible;
  rootCombo.getParent().layout();
}",0.946938775510204
128981,"public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}","@Override public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    if (linker.linkSize() == 0) {
      linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
    }
  }
}",0.9508506616257087
128982,"public void modify(Object element,String property,Object value){
  TreeItem treeItem=(TreeItem)element;
  FOXTreeNode node=(FOXTreeNode)treeItem.getData();
  if (property.equals(""String_Node_Str"")) {
    node.setLabel((String)value);
  }
  if (property.equals(""String_Node_Str"")) {
    node.setDefaultValue((String)value);
  }
  xmlViewer.refresh(node);
}","@Override public void modify(Object element,String property,Object value){
  TreeItem treeItem=(TreeItem)element;
  FOXTreeNode node=(FOXTreeNode)treeItem.getData();
  if (property.equals(""String_Node_Str"")) {
    node.setLabel((String)value);
  }
  if (property.equals(""String_Node_Str"")) {
    node.setDefaultValue((String)value);
  }
  xmlViewer.refresh(node);
}",0.9861111111111112
128983,"public Object getValue(Object element,String property){
  FOXTreeNode node=(FOXTreeNode)element;
  if (property.equals(""String_Node_Str"")) {
    return node.getLabel();
  }
  if (property.equals(""String_Node_Str"")) {
    return node.getDefaultValue();
  }
  return null;
}","@Override public Object getValue(Object element,String property){
  FOXTreeNode node=(FOXTreeNode)element;
  if (property.equals(""String_Node_Str"")) {
    return node.getLabel();
  }
  if (property.equals(""String_Node_Str"")) {
    return node.getDefaultValue();
  }
  return null;
}",0.9819494584837544
128984,"@Override protected void addFieldsListeners(){
  rootComboViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      ATreeNode node=(ATreeNode)selection.getFirstElement();
      List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(node,false);
      if (nodeList.size() == 0) {
        return;
      }
      if (ConnectionHelper.getTables(getConnection()).size() > 0) {
        EList schemaMetadataColumn=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        schemaMetadataColumn.clear();
        initMetadataTable(nodeList,schemaMetadataColumn);
      }
      updateConnectionProperties(nodeList.get(0));
      initXmlTreeData();
      initSchemaTable();
      xmlViewer.setInput(treeData);
      xmlViewer.expandAll();
      redrawLinkers();
      if (!creation) {
        checkFieldsValue();
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  rootComboViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      ATreeNode node=(ATreeNode)selection.getFirstElement();
      List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(node,false);
      if (nodeList.size() == 0) {
        return;
      }
      if (ConnectionHelper.getTables(getConnection()).size() > 0) {
        EList schemaMetadataColumn=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
        schemaMetadataColumn.clear();
        initMetadataTable(nodeList,schemaMetadataColumn);
      }
      updateConnectionProperties(nodeList.get(0));
      initXmlTreeData();
      initSchemaTable();
      xmlViewer.setInput(treeData);
      xmlViewer.expandAll();
      redrawLinkers();
      if (!creation) {
        checkFieldsValue();
      }
    }
  }
);
}",0.995159728944821
128985,"public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  ATreeNode node=(ATreeNode)selection.getFirstElement();
  List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(node,false);
  if (nodeList.size() == 0) {
    return;
  }
  if (ConnectionHelper.getTables(getConnection()).size() > 0) {
    EList schemaMetadataColumn=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    schemaMetadataColumn.clear();
    initMetadataTable(nodeList,schemaMetadataColumn);
  }
  updateConnectionProperties(nodeList.get(0));
  initXmlTreeData();
  initSchemaTable();
  xmlViewer.setInput(treeData);
  xmlViewer.expandAll();
  redrawLinkers();
  if (!creation) {
    checkFieldsValue();
  }
}","@Override public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  ATreeNode node=(ATreeNode)selection.getFirstElement();
  List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(node,false);
  if (nodeList.size() == 0) {
    return;
  }
  if (ConnectionHelper.getTables(getConnection()).size() > 0) {
    EList schemaMetadataColumn=ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns();
    schemaMetadataColumn.clear();
    initMetadataTable(nodeList,schemaMetadataColumn);
  }
  updateConnectionProperties(nodeList.get(0));
  initXmlTreeData();
  initSchemaTable();
  xmlViewer.setInput(treeData);
  xmlViewer.expandAll();
  redrawLinkers();
  if (!creation) {
    checkFieldsValue();
  }
}",0.9937965260545906
128986,"public void updateStatus(){
  checkFieldsValue();
}","@Override public void updateStatus(){
  checkFieldsValue();
}",0.9107142857142856
128987,"private void addXmlFileViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(group,SWT.BORDER);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(data);
  rootComboViewer=new ComboViewer(composite,SWT.READ_ONLY);
  FoxNodeComboViewProvider comboProvider=new FoxNodeComboViewProvider();
  rootComboViewer.setLabelProvider(comboProvider);
  rootComboViewer.setContentProvider(comboProvider);
  rootCombo=rootComboViewer.getCombo();
  GridData comboData=new GridData(SWT.FILL,SWT.CENTER,true,false);
  rootCombo.setLayoutData(comboData);
  xmlViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  data=new GridData(GridData.FILL_BOTH);
  xmlViewer.getControl().setLayoutData(data);
  xmlViewer.setUseHashlookup(true);
  Tree tree=xmlViewer.getTree();
  if (isReadOnly()) {
    tree.setEnabled(false);
  }
  tree.setLinesVisible(true);
  tree.setBackground(tree.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  column1.setText(""String_Node_Str"");
  column1.setWidth(120);
  TreeColumn column2=new TreeColumn(tree,SWT.CENTER);
  column2.setText(""String_Node_Str"");
  column2.setWidth(100);
  TreeColumn column3=new TreeColumn(tree,SWT.CENTER);
  column3.setText(""String_Node_Str"");
  column3.setWidth(100);
  TreeColumn column4=new TreeColumn(tree,SWT.CENTER);
  column4.setText(""String_Node_Str"");
  column4.setWidth(100);
  tree.setHeaderVisible(true);
  XmlFileTreeViewerProvider provider=new XmlFileTreeViewerProvider();
  xmlViewer.setLabelProvider(provider);
  xmlViewer.setCellModifier(new ICellModifier(){
    public void modify(    Object element,    String property,    Object value){
      TreeItem treeItem=(TreeItem)element;
      FOXTreeNode node=(FOXTreeNode)treeItem.getData();
      if (property.equals(""String_Node_Str"")) {
        node.setLabel((String)value);
      }
      if (property.equals(""String_Node_Str"")) {
        node.setDefaultValue((String)value);
      }
      xmlViewer.refresh(node);
    }
    public Object getValue(    Object element,    String property){
      FOXTreeNode node=(FOXTreeNode)element;
      if (property.equals(""String_Node_Str"")) {
        return node.getLabel();
      }
      if (property.equals(""String_Node_Str"")) {
        return node.getDefaultValue();
      }
      return null;
    }
    public boolean canModify(    Object element,    String property){
      FOXTreeNode node=(FOXTreeNode)element;
      if (property.equals(""String_Node_Str"")) {
        if (node.getLabel() != null && node.getLabel().length() > 0) {
          return true;
        }
      }
      if (property.equals(""String_Node_Str"")) {
        if (node.getDefaultValue() != null && node.getDefaultValue().length() > 0) {
          return true;
        }
      }
      return false;
    }
  }
);
  xmlViewer.setColumnProperties(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  CellEditor editor=new TextCellEditor(xmlViewer.getTree());
  editor.addListener(new DialogErrorXMLLabelCellEditor(editor,""String_Node_Str""));
  CellEditor editorDefault=new TextCellEditor(xmlViewer.getTree());
  editorDefault.addListener(new DialogErrorXMLLabelCellEditor(editorDefault,""String_Node_Str""));
  xmlViewer.setCellEditors(new CellEditor[]{editor,null,null,editorDefault});
  xmlViewer.setContentProvider(provider);
  xmlViewer.expandAll();
  createAction();
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      fillContextMenu(manager);
    }
  }
);
  Menu menu=menuMgr.createContextMenu(xmlViewer.getControl());
  xmlViewer.getControl().setMenu(menu);
  xmlViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
    }
  }
);
  initToolBar(composite);
}","private void addXmlFileViewer(final Composite mainComposite,final int width,final int height){
  final Group group=Form.createGroup(mainComposite,1,""String_Node_Str"",height);
  GridData data=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(group,SWT.BORDER);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(data);
  rootComboViewer=new ComboViewer(composite,SWT.READ_ONLY);
  FoxNodeComboViewProvider comboProvider=new FoxNodeComboViewProvider();
  rootComboViewer.setLabelProvider(comboProvider);
  rootComboViewer.setContentProvider(comboProvider);
  rootCombo=rootComboViewer.getCombo();
  GridData comboData=new GridData(SWT.FILL,SWT.CENTER,true,false);
  rootCombo.setLayoutData(comboData);
  xmlViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  data=new GridData(GridData.FILL_BOTH);
  xmlViewer.getControl().setLayoutData(data);
  xmlViewer.setUseHashlookup(true);
  Tree tree=xmlViewer.getTree();
  if (isReadOnly()) {
    tree.setEnabled(false);
  }
  tree.setLinesVisible(true);
  tree.setBackground(tree.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  TreeColumn column1=new TreeColumn(tree,SWT.LEFT);
  column1.setText(""String_Node_Str"");
  column1.setWidth(120);
  TreeColumn column2=new TreeColumn(tree,SWT.CENTER);
  column2.setText(""String_Node_Str"");
  column2.setWidth(100);
  TreeColumn column3=new TreeColumn(tree,SWT.CENTER);
  column3.setText(""String_Node_Str"");
  column3.setWidth(100);
  TreeColumn column4=new TreeColumn(tree,SWT.CENTER);
  column4.setText(""String_Node_Str"");
  column4.setWidth(100);
  tree.setHeaderVisible(true);
  XmlFileTreeViewerProvider provider=new XmlFileTreeViewerProvider();
  xmlViewer.setLabelProvider(provider);
  xmlViewer.setCellModifier(new ICellModifier(){
    @Override public void modify(    Object element,    String property,    Object value){
      TreeItem treeItem=(TreeItem)element;
      FOXTreeNode node=(FOXTreeNode)treeItem.getData();
      if (property.equals(""String_Node_Str"")) {
        node.setLabel((String)value);
      }
      if (property.equals(""String_Node_Str"")) {
        node.setDefaultValue((String)value);
      }
      xmlViewer.refresh(node);
    }
    @Override public Object getValue(    Object element,    String property){
      FOXTreeNode node=(FOXTreeNode)element;
      if (property.equals(""String_Node_Str"")) {
        return node.getLabel();
      }
      if (property.equals(""String_Node_Str"")) {
        return node.getDefaultValue();
      }
      return null;
    }
    @Override public boolean canModify(    Object element,    String property){
      FOXTreeNode node=(FOXTreeNode)element;
      if (property.equals(""String_Node_Str"")) {
        if (node.getLabel() != null && node.getLabel().length() > 0) {
          return true;
        }
      }
      if (property.equals(""String_Node_Str"")) {
        if (node.getDefaultValue() != null && node.getDefaultValue().length() > 0) {
          return true;
        }
      }
      return false;
    }
  }
);
  xmlViewer.setColumnProperties(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  CellEditor editor=new TextCellEditor(xmlViewer.getTree());
  editor.addListener(new DialogErrorXMLLabelCellEditor(editor,""String_Node_Str""));
  CellEditor editorDefault=new TextCellEditor(xmlViewer.getTree());
  editorDefault.addListener(new DialogErrorXMLLabelCellEditor(editorDefault,""String_Node_Str""));
  xmlViewer.setCellEditors(new CellEditor[]{editor,null,null,editorDefault});
  xmlViewer.setContentProvider(provider);
  xmlViewer.expandAll();
  createAction();
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      fillContextMenu(manager);
    }
  }
);
  Menu menu=menuMgr.createContextMenu(xmlViewer.getControl());
  xmlViewer.getControl().setMenu(menu);
  xmlViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
    }
  }
);
  initToolBar(composite);
}",0.9940177075855468
128988,"public void mouseDown(MouseEvent mouseEvent){
  controlClicked=mouseEvent.getSource();
}","@Override public void mouseDown(MouseEvent mouseEvent){
  controlClicked=mouseEvent.getSource();
}",0.946236559139785
128989,"public void setContentProvider(IStructuredContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}","public void setContentProvider(ILazyContentProvider contentProvider){
  if (tableViewer != null && tableViewer.getContentProvider() != contentProvider) {
    tableViewer.setContentProvider(contentProvider);
  }
  this.contentProvider=contentProvider;
}",0.9725490196078432
128990,"/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged) {
    refreshTableEditorControls();
  }
}","/** 
 * <p> Create a new instance of <code>Table</code> with its <code>TableColumn</code>s and create also a new instance of <code>TableViewer</code> if these objects doesn't exist already. </p> <p> Initialize the <code>TableViewer</code> with by default the <code>DefaultStructuredContentProvider</code>, the <code>DefaultTableLabelProvider</code> and the <code>DefaultTableViewerSorter</code>. </p> <p> If you use the default ContentProvider, you must set as input an object which extends <code>Collection</code>. </p> <p> <b> If it is the second or more time than you call this method, only the input object is loaded. Call methods of <code>TableViewer</code> for others operations. </b> </p>
 * @param input by default a object which extends <code>Collection</code>.
 */
public void init(List list){
  if (!initCalled) {
    initCalled=true;
    if (this.table == null) {
      createTable();
    }
    attachLabelProvider();
    buildAndLayoutTable();
    attachViewerSorter();
    attachContentProvider();
    attachCellEditors();
    addListeners();
  }
  boolean hasChanged=false;
  if (this.list != list) {
    hasChanged=true;
  }
  setInputList(list);
  if (tableEditorManager != null && list != null) {
    tableEditorManager.init(this.listenableList);
  }
  if (hasChanged) {
  }
}",0.9870327993897788
128991,"public void mouseUp(MouseEvent e){
}","@Override public void mouseUp(MouseEvent e){
}",0.8780487804878049
128992,"/** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
private void forceTableFocus(){
  new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
    public void run(){
      getTable().forceFocus();
    }
  }
).start();
}","/** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
private void forceTableFocus(){
  new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
    @Override public void run(){
      getTable().forceFocus();
    }
  }
).start();
}",0.9799196787148594
128993,"public void keyReleased(KeyEvent e){
}","@Override public void keyReleased(KeyEvent e){
}",0.8837209302325582
128994,"protected void attachContentProvider(){
  if (this.contentProvider == null) {
    this.contentProvider=new DefaultStructuredContentProvider(this);
  }
  tableViewer.setContentProvider(this.contentProvider);
}","protected void attachContentProvider(){
  if (this.contentProvider == null) {
    this.contentProvider=new LazyContentProvider(this);
  }
  tableViewer.setContentProvider(this.contentProvider);
}",0.9528535980148884
128995,"public void notifyEvent(TableEditorManagerEvent event){
  Control editor=event.getTableEditor().getEditor();
  if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
    editor.addMouseListener(mouseListener);
    editor.addTraverseListener(traverseListenerForControls);
  }
}","@Override public void notifyEvent(TableEditorManagerEvent event){
  Control editor=event.getTableEditor().getEditor();
  if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
    editor.addMouseListener(mouseListener);
    editor.addTraverseListener(traverseListenerForControls);
  }
}",0.9823943661971832
128996,"@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorControls();
}","@Override public void replace(Object element,int index){
  super.replace(element,index);
  refreshTableEditorColumn(index);
}",0.9473684210526316
128997,"public void run(){
  boolean continueRun=(keyPressed == SWT.TRAVERSE_TAB_NEXT || keyPressed == SWT.TRAVERSE_TAB_PREVIOUS || keyPressed == SWT.TRAVERSE_RETURN || keyPressed == SWT.F2);
  if (!continueRun || getTable().isDisposed()) {
    return;
  }
  List<B> inputList=TableViewerCreatorNotModifiable.this.getInputList();
  int currentIndexColumn=indexColumnStartFinal;
  int currentItemIndex=itemIndexStartFinal;
  CellEditor cellEditorToActivate=null;
  Control controlToFocusIn=null;
  boolean found=false;
  boolean firstLoop=true;
  while (true) {
    if (keyPressed == SWT.TRAVERSE_TAB_NEXT || !firstLoop && (keyPressed == SWT.F2 || keyPressed == SWT.TRAVERSE_RETURN)) {
      currentIndexColumn++;
      if (currentIndexColumn >= columns.size()) {
        currentIndexColumn=0;
        currentItemIndex++;
        if (currentItemIndex >= inputList.size()) {
          break;
        }
      }
    }
 else     if (keyPressed == SWT.TRAVERSE_TAB_PREVIOUS) {
      currentIndexColumn--;
      if (currentIndexColumn < 0) {
        currentIndexColumn=columns.size() - 1;
        currentItemIndex--;
        if (currentItemIndex < 0) {
          break;
        }
      }
    }
 else     if (keyPressed == SWT.TRAVERSE_RETURN) {
    }
    TableViewerCreatorColumnNotModifiable tableViewerCreatorColumn=columns.get(currentIndexColumn);
    if (tableViewerCreatorColumn.getTableEditorContent() != null) {
      TableItem tableItem=getTable().getItem(currentItemIndex);
      if (tableEditorManager != null) {
        List<TableEditor> tableEditorList=tableEditorManager.getTableEditorList();
        for (        TableEditor editor : tableEditorList) {
          if (editor.getColumn() == currentIndexColumn && editor.getItem() == tableItem) {
            controlToFocusIn=editor.getEditor();
            found=true;
            break;
          }
        }
      }
    }
 else     if (tableViewerCreatorColumn.getCellEditor() != null) {
      cellEditorToActivate=tableViewerCreatorColumn.getCellEditor();
      found=true;
    }
    firstLoop=false;
    if (found) {
      if (controlToFocusIn != null) {
        getTable().setSelection(currentItemIndex);
        controlToFocusIn.setFocus();
        break;
      }
 else       if (getCellModifier() != null && getCellModifier().canModify(inputList.get(currentItemIndex),getColumns().get(currentIndexColumn).getId()) && cellEditorToActivate != null) {
        TableViewerCreatorNotModifiable.this.getTableViewer().editElement(inputList.get(currentItemIndex),currentIndexColumn);
        break;
      }
 else {
        found=false;
      }
    }
  }
  keyPressed=0;
}","@Override public void run(){
  boolean continueRun=(keyPressed == SWT.TRAVERSE_TAB_NEXT || keyPressed == SWT.TRAVERSE_TAB_PREVIOUS || keyPressed == SWT.TRAVERSE_RETURN || keyPressed == SWT.F2);
  if (!continueRun || getTable().isDisposed()) {
    return;
  }
  List<B> inputList=TableViewerCreatorNotModifiable.this.getInputList();
  int currentIndexColumn=indexColumnStartFinal;
  int currentItemIndex=itemIndexStartFinal;
  CellEditor cellEditorToActivate=null;
  Control controlToFocusIn=null;
  boolean found=false;
  boolean firstLoop=true;
  while (true) {
    if (keyPressed == SWT.TRAVERSE_TAB_NEXT || !firstLoop && (keyPressed == SWT.F2 || keyPressed == SWT.TRAVERSE_RETURN)) {
      currentIndexColumn++;
      if (currentIndexColumn >= columns.size()) {
        currentIndexColumn=0;
        currentItemIndex++;
        if (currentItemIndex >= inputList.size()) {
          break;
        }
      }
    }
 else     if (keyPressed == SWT.TRAVERSE_TAB_PREVIOUS) {
      currentIndexColumn--;
      if (currentIndexColumn < 0) {
        currentIndexColumn=columns.size() - 1;
        currentItemIndex--;
        if (currentItemIndex < 0) {
          break;
        }
      }
    }
 else     if (keyPressed == SWT.TRAVERSE_RETURN) {
    }
    TableViewerCreatorColumnNotModifiable tableViewerCreatorColumn=columns.get(currentIndexColumn);
    if (tableViewerCreatorColumn.getTableEditorContent() != null) {
      TableItem tableItem=getTable().getItem(currentItemIndex);
      if (tableEditorManager != null) {
        List<TableEditor> tableEditorList=tableEditorManager.getTableEditorList();
        for (        TableEditor editor : tableEditorList) {
          if (editor.getColumn() == currentIndexColumn && editor.getItem() == tableItem) {
            controlToFocusIn=editor.getEditor();
            found=true;
            break;
          }
        }
      }
    }
 else     if (tableViewerCreatorColumn.getCellEditor() != null) {
      cellEditorToActivate=tableViewerCreatorColumn.getCellEditor();
      found=true;
    }
    firstLoop=false;
    if (found) {
      if (controlToFocusIn != null) {
        getTable().setSelection(currentItemIndex);
        controlToFocusIn.setFocus();
        break;
      }
 else       if (getCellModifier() != null && getCellModifier().canModify(inputList.get(currentItemIndex),getColumns().get(currentIndexColumn).getId()) && cellEditorToActivate != null) {
        TableViewerCreatorNotModifiable.this.getTableViewer().editElement(inputList.get(currentItemIndex),currentIndexColumn);
        break;
      }
 else {
        found=false;
      }
    }
  }
  keyPressed=0;
}",0.998093058733791
128998,"/** 
 * DOC amaumont Comment method ""initCellModifier"".
 */
protected void setTablePreferences(){
  table.setHeaderVisible(headerVisible);
  table.setLinesVisible(linesVisible);
  if (this.emptyZoneColor != null && !WindowSystem.isGTK() && !WindowSystem.isOSX()) {
    Listener paintListener=new Listener(){
      public void handleEvent(      Event event){
        GC gc=event.gc;
        Rectangle area=table.getClientArea();
        Color previousBgColor=gc.getBackground();
        gc.setBackground(emptyZoneColor);
        int starty=table.getHeaderHeight() + table.getItemCount() * table.getItemHeight() - table.getVerticalBar().getSelection() * table.getItemHeight();
        if (starty < area.height) {
          gc.fillRectangle(0,starty,area.width,area.height);
        }
        TableColumn[] tableColumns=table.getColumns();
        int widthColumns=0;
        for (int i=0; i < tableColumns.length; i++) {
          widthColumns+=tableColumns[i].getWidth();
        }
        if (widthColumns < area.width) {
          gc.fillRectangle(widthColumns + 1,0,area.width,area.height);
        }
        gc.setBackground(previousBgColor);
      }
    }
;
    table.addListener(SWTFacade.Paint,paintListener);
  }
  setBackgroundColor(backgroundColor != null ? backgroundColor : table.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  setForegroundColor(foregroundColor != null ? foregroundColor : table.getDisplay().getSystemColor(SWT.COLOR_BLACK));
  if (useCustomItemColoring) {
    setUseCustomItemColoring(true);
  }
  if (this.firstVisibleColumnIsSelection) {
    this.mouseTableSelectionHelper=new MouseTableSelectionHelper(this);
  }
}","/** 
 * DOC amaumont Comment method ""initCellModifier"".
 */
protected void setTablePreferences(){
  table.setHeaderVisible(headerVisible);
  table.setLinesVisible(linesVisible);
  if (this.emptyZoneColor != null && !WindowSystem.isGTK() && !WindowSystem.isOSX()) {
    Listener paintListener=new Listener(){
      @Override public void handleEvent(      Event event){
        GC gc=event.gc;
        Rectangle area=table.getClientArea();
        Color previousBgColor=gc.getBackground();
        gc.setBackground(emptyZoneColor);
        int starty=table.getHeaderHeight() + table.getItemCount() * table.getItemHeight() - table.getVerticalBar().getSelection() * table.getItemHeight();
        if (starty < area.height) {
          gc.fillRectangle(0,starty,area.width,area.height);
        }
        TableColumn[] tableColumns=table.getColumns();
        int widthColumns=0;
        for (        TableColumn tableColumn : tableColumns) {
          widthColumns+=tableColumn.getWidth();
        }
        if (widthColumns < area.width) {
          gc.fillRectangle(widthColumns + 1,0,area.width,area.height);
        }
        gc.setBackground(previousBgColor);
      }
    }
;
    table.addListener(SWTFacade.Paint,paintListener);
  }
  setBackgroundColor(backgroundColor != null ? backgroundColor : table.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  setForegroundColor(foregroundColor != null ? foregroundColor : table.getDisplay().getSystemColor(SWT.COLOR_BLACK));
  if (useCustomItemColoring) {
    setUseCustomItemColoring(true);
  }
  if (this.firstVisibleColumnIsSelection) {
    this.mouseTableSelectionHelper=new MouseTableSelectionHelper(this);
  }
}",0.9707037148897614
128999,"public void widgetDisposed(DisposeEvent e){
  if (tableEditorManager != null) {
    tableEditorManager.release();
  }
}","@Override public void widgetDisposed(DisposeEvent e){
  if (tableEditorManager != null) {
    tableEditorManager.release();
  }
}",0.9596774193548387
129000,"public void keyPressed(KeyEvent e){
  if (!keyboardManagementForCellEdition) {
    return;
  }
  int key=e.keyCode;
  if (key == SWT.F2) {
    keyPressed=key;
    editOtherEditor(null);
  }
}","@Override public void keyPressed(KeyEvent e){
  if (!keyboardManagementForCellEdition) {
    return;
  }
  int key=e.keyCode;
  if (key == SWT.F2) {
    keyPressed=key;
    editOtherEditor(null);
  }
}",0.9744897959183674
